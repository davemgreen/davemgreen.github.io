[
 {
  "instr": "add",
  "ty": "i8",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "add w0, w0, w1\nret",
  "giasm": "add w0, w0, w1\nret",
  "ll": "define i8 @test(i8 %a, i8 %b) {\n  %r = add i8 %a, %b\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = add i8 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "add",
  "ty": "i16",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "add w0, w0, w1\nret",
  "giasm": "add w0, w0, w1\nret",
  "ll": "define i16 @test(i16 %a, i16 %b) {\n  %r = add i16 %a, %b\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = add i16 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "add",
  "ty": "i32",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "add w0, w0, w1\nret",
  "giasm": "add w0, w0, w1\nret",
  "ll": "define i32 @test(i32 %a, i32 %b) {\n  %r = add i32 %a, %b\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = add i32 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "add",
  "ty": "i64",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "add x0, x0, x1\nret",
  "giasm": "add x0, x0, x1\nret",
  "ll": "define i64 @test(i64 %a, i64 %b) {\n  %r = add i64 %a, %b\n  ret i64 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = add i64 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i64 %r"
 },
 {
  "instr": "add",
  "ty": "<8 x i8>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "add v0.8b, v0.8b, v1.8b\nret",
  "giasm": "add v0.8b, v0.8b, v1.8b\nret",
  "ll": "define <8 x i8> @test(<8 x i8> %a, <8 x i8> %b) {\n  %r = add <8 x i8> %a, %b\n  ret <8 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = add <8 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i8> %r"
 },
 {
  "instr": "add",
  "ty": "<16 x i8>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "add v0.16b, v0.16b, v1.16b\nret",
  "giasm": "add v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <16 x i8> @test(<16 x i8> %a, <16 x i8> %b) {\n  %r = add <16 x i8> %a, %b\n  ret <16 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = add <16 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i8> %r"
 },
 {
  "instr": "add",
  "ty": "<32 x i8>",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "add v1.16b, v1.16b, v3.16b\nadd v0.16b, v0.16b, v2.16b\nret",
  "giasm": "add v0.16b, v0.16b, v2.16b\nadd v1.16b, v1.16b, v3.16b\nret",
  "ll": "define <32 x i8> @test(<32 x i8> %a, <32 x i8> %b) {\n  %r = add <32 x i8> %a, %b\n  ret <32 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = add <32 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i8> %r"
 },
 {
  "instr": "add",
  "ty": "<4 x i16>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "add v0.4h, v0.4h, v1.4h\nret",
  "giasm": "add v0.4h, v0.4h, v1.4h\nret",
  "ll": "define <4 x i16> @test(<4 x i16> %a, <4 x i16> %b) {\n  %r = add <4 x i16> %a, %b\n  ret <4 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = add <4 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i16> %r"
 },
 {
  "instr": "add",
  "ty": "<8 x i16>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "add v0.8h, v0.8h, v1.8h\nret",
  "giasm": "add v0.8h, v0.8h, v1.8h\nret",
  "ll": "define <8 x i16> @test(<8 x i16> %a, <8 x i16> %b) {\n  %r = add <8 x i16> %a, %b\n  ret <8 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = add <8 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i16> %r"
 },
 {
  "instr": "add",
  "ty": "<16 x i16>",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "add v1.8h, v1.8h, v3.8h\nadd v0.8h, v0.8h, v2.8h\nret",
  "giasm": "add v0.8h, v0.8h, v2.8h\nadd v1.8h, v1.8h, v3.8h\nret",
  "ll": "define <16 x i16> @test(<16 x i16> %a, <16 x i16> %b) {\n  %r = add <16 x i16> %a, %b\n  ret <16 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = add <16 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i16> %r"
 },
 {
  "instr": "add",
  "ty": "<2 x i32>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "add v0.2s, v0.2s, v1.2s\nret",
  "giasm": "add v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x i32> @test(<2 x i32> %a, <2 x i32> %b) {\n  %r = add <2 x i32> %a, %b\n  ret <2 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = add <2 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i32> %r"
 },
 {
  "instr": "add",
  "ty": "<4 x i32>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "add v0.4s, v0.4s, v1.4s\nret",
  "giasm": "add v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x i32> @test(<4 x i32> %a, <4 x i32> %b) {\n  %r = add <4 x i32> %a, %b\n  ret <4 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = add <4 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i32> %r"
 },
 {
  "instr": "add",
  "ty": "<8 x i32>",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "add v1.4s, v1.4s, v3.4s\nadd v0.4s, v0.4s, v2.4s\nret",
  "giasm": "add v0.4s, v0.4s, v2.4s\nadd v1.4s, v1.4s, v3.4s\nret",
  "ll": "define <8 x i32> @test(<8 x i32> %a, <8 x i32> %b) {\n  %r = add <8 x i32> %a, %b\n  ret <8 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = add <8 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i32> %r"
 },
 {
  "instr": "add",
  "ty": "<2 x i64>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "add v0.2d, v0.2d, v1.2d\nret",
  "giasm": "add v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x i64> @test(<2 x i64> %a, <2 x i64> %b) {\n  %r = add <2 x i64> %a, %b\n  ret <2 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = add <2 x i64> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i64> %r"
 },
 {
  "instr": "add",
  "ty": "<4 x i64>",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "add v1.2d, v1.2d, v3.2d\nadd v0.2d, v0.2d, v2.2d\nret",
  "giasm": "add v0.2d, v0.2d, v2.2d\nadd v1.2d, v1.2d, v3.2d\nret",
  "ll": "define <4 x i64> @test(<4 x i64> %a, <4 x i64> %b) {\n  %r = add <4 x i64> %a, %b\n  ret <4 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = add <4 x i64> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i64> %r"
 },
 {
  "instr": "sub",
  "ty": "i8",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "sub w0, w0, w1\nret",
  "giasm": "sub w0, w0, w1\nret",
  "ll": "define i8 @test(i8 %a, i8 %b) {\n  %r = sub i8 %a, %b\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = sub i8 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "sub",
  "ty": "i16",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "sub w0, w0, w1\nret",
  "giasm": "sub w0, w0, w1\nret",
  "ll": "define i16 @test(i16 %a, i16 %b) {\n  %r = sub i16 %a, %b\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = sub i16 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "sub",
  "ty": "i32",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "sub w0, w0, w1\nret",
  "giasm": "sub w0, w0, w1\nret",
  "ll": "define i32 @test(i32 %a, i32 %b) {\n  %r = sub i32 %a, %b\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = sub i32 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "sub",
  "ty": "i64",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "sub x0, x0, x1\nret",
  "giasm": "sub x0, x0, x1\nret",
  "ll": "define i64 @test(i64 %a, i64 %b) {\n  %r = sub i64 %a, %b\n  ret i64 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = sub i64 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i64 %r"
 },
 {
  "instr": "sub",
  "ty": "<8 x i8>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "sub v0.8b, v0.8b, v1.8b\nret",
  "giasm": "sub v0.8b, v0.8b, v1.8b\nret",
  "ll": "define <8 x i8> @test(<8 x i8> %a, <8 x i8> %b) {\n  %r = sub <8 x i8> %a, %b\n  ret <8 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = sub <8 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i8> %r"
 },
 {
  "instr": "sub",
  "ty": "<16 x i8>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "sub v0.16b, v0.16b, v1.16b\nret",
  "giasm": "sub v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <16 x i8> @test(<16 x i8> %a, <16 x i8> %b) {\n  %r = sub <16 x i8> %a, %b\n  ret <16 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = sub <16 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i8> %r"
 },
 {
  "instr": "sub",
  "ty": "<32 x i8>",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "sub v1.16b, v1.16b, v3.16b\nsub v0.16b, v0.16b, v2.16b\nret",
  "giasm": "sub v0.16b, v0.16b, v2.16b\nsub v1.16b, v1.16b, v3.16b\nret",
  "ll": "define <32 x i8> @test(<32 x i8> %a, <32 x i8> %b) {\n  %r = sub <32 x i8> %a, %b\n  ret <32 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = sub <32 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i8> %r"
 },
 {
  "instr": "sub",
  "ty": "<4 x i16>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "sub v0.4h, v0.4h, v1.4h\nret",
  "giasm": "sub v0.4h, v0.4h, v1.4h\nret",
  "ll": "define <4 x i16> @test(<4 x i16> %a, <4 x i16> %b) {\n  %r = sub <4 x i16> %a, %b\n  ret <4 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = sub <4 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i16> %r"
 },
 {
  "instr": "sub",
  "ty": "<8 x i16>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "sub v0.8h, v0.8h, v1.8h\nret",
  "giasm": "sub v0.8h, v0.8h, v1.8h\nret",
  "ll": "define <8 x i16> @test(<8 x i16> %a, <8 x i16> %b) {\n  %r = sub <8 x i16> %a, %b\n  ret <8 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = sub <8 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i16> %r"
 },
 {
  "instr": "sub",
  "ty": "<16 x i16>",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "sub v1.8h, v1.8h, v3.8h\nsub v0.8h, v0.8h, v2.8h\nret",
  "giasm": "sub v0.8h, v0.8h, v2.8h\nsub v1.8h, v1.8h, v3.8h\nret",
  "ll": "define <16 x i16> @test(<16 x i16> %a, <16 x i16> %b) {\n  %r = sub <16 x i16> %a, %b\n  ret <16 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = sub <16 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i16> %r"
 },
 {
  "instr": "sub",
  "ty": "<2 x i32>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "sub v0.2s, v0.2s, v1.2s\nret",
  "giasm": "sub v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x i32> @test(<2 x i32> %a, <2 x i32> %b) {\n  %r = sub <2 x i32> %a, %b\n  ret <2 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = sub <2 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i32> %r"
 },
 {
  "instr": "sub",
  "ty": "<4 x i32>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "sub v0.4s, v0.4s, v1.4s\nret",
  "giasm": "sub v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x i32> @test(<4 x i32> %a, <4 x i32> %b) {\n  %r = sub <4 x i32> %a, %b\n  ret <4 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = sub <4 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i32> %r"
 },
 {
  "instr": "sub",
  "ty": "<8 x i32>",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "sub v1.4s, v1.4s, v3.4s\nsub v0.4s, v0.4s, v2.4s\nret",
  "giasm": "sub v0.4s, v0.4s, v2.4s\nsub v1.4s, v1.4s, v3.4s\nret",
  "ll": "define <8 x i32> @test(<8 x i32> %a, <8 x i32> %b) {\n  %r = sub <8 x i32> %a, %b\n  ret <8 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = sub <8 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i32> %r"
 },
 {
  "instr": "sub",
  "ty": "<2 x i64>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "sub v0.2d, v0.2d, v1.2d\nret",
  "giasm": "sub v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x i64> @test(<2 x i64> %a, <2 x i64> %b) {\n  %r = sub <2 x i64> %a, %b\n  ret <2 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = sub <2 x i64> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i64> %r"
 },
 {
  "instr": "sub",
  "ty": "<4 x i64>",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "sub v1.2d, v1.2d, v3.2d\nsub v0.2d, v0.2d, v2.2d\nret",
  "giasm": "sub v0.2d, v0.2d, v2.2d\nsub v1.2d, v1.2d, v3.2d\nret",
  "ll": "define <4 x i64> @test(<4 x i64> %a, <4 x i64> %b) {\n  %r = sub <4 x i64> %a, %b\n  ret <4 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = sub <4 x i64> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i64> %r"
 },
 {
  "instr": "mul",
  "ty": "i8",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "mul w0, w0, w1\nret",
  "giasm": "mul w0, w0, w1\nret",
  "ll": "define i8 @test(i8 %a, i8 %b) {\n  %r = mul i8 %a, %b\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = mul i8 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "mul",
  "ty": "i16",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "mul w0, w0, w1\nret",
  "giasm": "mul w0, w0, w1\nret",
  "ll": "define i16 @test(i16 %a, i16 %b) {\n  %r = mul i16 %a, %b\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = mul i16 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "mul",
  "ty": "i32",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "mul w0, w0, w1\nret",
  "giasm": "mul w0, w0, w1\nret",
  "ll": "define i32 @test(i32 %a, i32 %b) {\n  %r = mul i32 %a, %b\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = mul i32 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "mul",
  "ty": "i64",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "mul x0, x0, x1\nret",
  "giasm": "mul x0, x0, x1\nret",
  "ll": "define i64 @test(i64 %a, i64 %b) {\n  %r = mul i64 %a, %b\n  ret i64 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = mul i64 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i64 %r"
 },
 {
  "instr": "mul",
  "ty": "<8 x i8>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "mul v0.8b, v0.8b, v1.8b\nret",
  "giasm": "mul v0.8b, v0.8b, v1.8b\nret",
  "ll": "define <8 x i8> @test(<8 x i8> %a, <8 x i8> %b) {\n  %r = mul <8 x i8> %a, %b\n  ret <8 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = mul <8 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i8> %r"
 },
 {
  "instr": "mul",
  "ty": "<16 x i8>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "mul v0.16b, v0.16b, v1.16b\nret",
  "giasm": "mul v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <16 x i8> @test(<16 x i8> %a, <16 x i8> %b) {\n  %r = mul <16 x i8> %a, %b\n  ret <16 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = mul <16 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i8> %r"
 },
 {
  "instr": "mul",
  "ty": "<32 x i8>",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "mul v1.16b, v1.16b, v3.16b\nmul v0.16b, v0.16b, v2.16b\nret",
  "giasm": "mul v0.16b, v0.16b, v2.16b\nmul v1.16b, v1.16b, v3.16b\nret",
  "ll": "define <32 x i8> @test(<32 x i8> %a, <32 x i8> %b) {\n  %r = mul <32 x i8> %a, %b\n  ret <32 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = mul <32 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i8> %r"
 },
 {
  "instr": "mul",
  "ty": "<4 x i16>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "mul v0.4h, v0.4h, v1.4h\nret",
  "giasm": "mul v0.4h, v0.4h, v1.4h\nret",
  "ll": "define <4 x i16> @test(<4 x i16> %a, <4 x i16> %b) {\n  %r = mul <4 x i16> %a, %b\n  ret <4 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = mul <4 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i16> %r"
 },
 {
  "instr": "mul",
  "ty": "<8 x i16>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "mul v0.8h, v0.8h, v1.8h\nret",
  "giasm": "mul v0.8h, v0.8h, v1.8h\nret",
  "ll": "define <8 x i16> @test(<8 x i16> %a, <8 x i16> %b) {\n  %r = mul <8 x i16> %a, %b\n  ret <8 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = mul <8 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i16> %r"
 },
 {
  "instr": "mul",
  "ty": "<16 x i16>",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "mul v1.8h, v1.8h, v3.8h\nmul v0.8h, v0.8h, v2.8h\nret",
  "giasm": "mul v0.8h, v0.8h, v2.8h\nmul v1.8h, v1.8h, v3.8h\nret",
  "ll": "define <16 x i16> @test(<16 x i16> %a, <16 x i16> %b) {\n  %r = mul <16 x i16> %a, %b\n  ret <16 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = mul <16 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i16> %r"
 },
 {
  "instr": "mul",
  "ty": "<2 x i32>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "mul v0.2s, v0.2s, v1.2s\nret",
  "giasm": "mul v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x i32> @test(<2 x i32> %a, <2 x i32> %b) {\n  %r = mul <2 x i32> %a, %b\n  ret <2 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = mul <2 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i32> %r"
 },
 {
  "instr": "mul",
  "ty": "<4 x i32>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "mul v0.4s, v0.4s, v1.4s\nret",
  "giasm": "mul v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x i32> @test(<4 x i32> %a, <4 x i32> %b) {\n  %r = mul <4 x i32> %a, %b\n  ret <4 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = mul <4 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i32> %r"
 },
 {
  "instr": "mul",
  "ty": "<8 x i32>",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "mul v1.4s, v1.4s, v3.4s\nmul v0.4s, v0.4s, v2.4s\nret",
  "giasm": "mul v0.4s, v0.4s, v2.4s\nmul v1.4s, v1.4s, v3.4s\nret",
  "ll": "define <8 x i32> @test(<8 x i32> %a, <8 x i32> %b) {\n  %r = mul <8 x i32> %a, %b\n  ret <8 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = mul <8 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i32> %r"
 },
 {
  "instr": "mul",
  "ty": "<2 x i64>",
  "variant": "binop",
  "codesize": 1,
  "thru": 14,
  "lat": 1,
  "sizelat": 1,
  "size": 8,
  "gisize": 8,
  "extrasize": 0,
  "asm": "fmov x10, d1\nfmov x11, d0\nmov x8, v1.d[1]\nmov x9, v0.d[1]\nmul x10, x11, x10\nmul x8, x9, x8\nfmov d0, x10\nmov v0.d[1], x8\nret",
  "giasm": "fmov x8, d0\nfmov x9, d1\nmov x10, v0.d[1]\nmov x11, v1.d[1]\nmul x8, x8, x9\nmul x9, x10, x11\nmov v0.d[0], x8\nmov v0.d[1], x9\nret",
  "ll": "define <2 x i64> @test(<2 x i64> %a, <2 x i64> %b) {\n  %r = mul <2 x i64> %a, %b\n  ret <2 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = mul <2 x i64> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i64> %r"
 },
 {
  "instr": "mul",
  "ty": "<4 x i64>",
  "variant": "binop",
  "codesize": 1,
  "thru": 28,
  "lat": 1,
  "sizelat": 1,
  "size": 16,
  "gisize": 16,
  "extrasize": 0,
  "asm": "fmov x8, d2\nfmov x9, d0\nfmov x12, d1\nmov x10, v2.d[1]\nmov x11, v0.d[1]\nmov x13, v3.d[1]\nmov x14, v1.d[1]\nmul x8, x9, x8\nfmov x9, d3\nmul x10, x11, x10\nmul x9, x12, x9\nfmov d0, x8\nmul x11, x14, x13\nmov v0.d[1], x10\nfmov d1, x9\nmov v1.d[1], x11\nret",
  "giasm": "fmov x8, d0\nfmov x9, d2\nfmov x12, d3\nmov x10, v0.d[1]\nmov x11, v2.d[1]\nmov x13, v1.d[1]\nmov x14, v3.d[1]\nmul x8, x8, x9\nfmov x9, d1\nmul x10, x10, x11\nmul x9, x9, x12\nmov v0.d[0], x8\nmul x11, x13, x14\nmov v1.d[0], x9\nmov v0.d[1], x10\nmov v1.d[1], x11\nret",
  "ll": "define <4 x i64> @test(<4 x i64> %a, <4 x i64> %b) {\n  %r = mul <4 x i64> %a, %b\n  ret <4 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = mul <4 x i64> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i64> %r"
 },
 {
  "instr": "sdiv",
  "ty": "i8",
  "variant": "binop",
  "codesize": 4,
  "thru": 1,
  "lat": 4,
  "sizelat": 4,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "sxtb w8, w1\nsxtb w9, w0\nsdiv w0, w9, w8\nret",
  "giasm": "sxtb w8, w0\nsxtb w9, w1\nsdiv w0, w8, w9\nret",
  "ll": "define i8 @test(i8 %a, i8 %b) {\n  %r = sdiv i8 %a, %b\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = sdiv i8 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "sdiv",
  "ty": "i8",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 7,
  "gisize": 3,
  "extrasize": 0,
  "asm": "sxtb w8, w0\nmov w9, #-109                       // =0xffffff93\nmul w8, w8, w9\nadd w8, w0, w8, lsr #8\nsbfx w9, w8, #2, #6\nand w8, w8, #0x80\nadd w0, w9, w8, lsr #7\nret",
  "giasm": "sxtb w8, w0\nmov w9, #7                          // =0x7\nsdiv w0, w8, w9\nret",
  "ll": "define i8 @test(i8 %a) {\n  %r = sdiv i8 %a, 7\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = sdiv i8 %a, 7\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "sdiv",
  "ty": "i16",
  "variant": "binop",
  "codesize": 4,
  "thru": 1,
  "lat": 4,
  "sizelat": 4,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "sxth w8, w1\nsxth w9, w0\nsdiv w0, w9, w8\nret",
  "giasm": "sxth w8, w0\nsxth w9, w1\nsdiv w0, w8, w9\nret",
  "ll": "define i16 @test(i16 %a, i16 %b) {\n  %r = sdiv i16 %a, %b\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = sdiv i16 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "sdiv",
  "ty": "i16",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 5,
  "gisize": 3,
  "extrasize": 0,
  "asm": "sxth w8, w0\nmov w9, #18725                      // =0x4925\nmul w8, w8, w9\nasr w9, w8, #17\nadd w0, w9, w8, lsr #31\nret",
  "giasm": "sxth w8, w0\nmov w9, #7                          // =0x7\nsdiv w0, w8, w9\nret",
  "ll": "define i16 @test(i16 %a) {\n  %r = sdiv i16 %a, 7\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = sdiv i16 %a, 7\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "sdiv",
  "ty": "i32",
  "variant": "binop",
  "codesize": 4,
  "thru": 1,
  "lat": 4,
  "sizelat": 4,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "sdiv w0, w0, w1\nret",
  "giasm": "sdiv w0, w0, w1\nret",
  "ll": "define i32 @test(i32 %a, i32 %b) {\n  %r = sdiv i32 %a, %b\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = sdiv i32 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "sdiv",
  "ty": "i32",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 7,
  "gisize": 2,
  "extrasize": 0,
  "asm": "mov w8, #9363                       // =0x2493\nmovk w8, #37449, lsl #16\nsmull x8, w0, w8\nlsr x8, x8, #32\nadd w8, w8, w0\nasr w9, w8, #2\nadd w0, w9, w8, lsr #31\nret",
  "giasm": "mov w8, #7                          // =0x7\nsdiv w0, w0, w8\nret",
  "ll": "define i32 @test(i32 %a) {\n  %r = sdiv i32 %a, 7\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = sdiv i32 %a, 7\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "sdiv",
  "ty": "i64",
  "variant": "binop",
  "codesize": 4,
  "thru": 1,
  "lat": 4,
  "sizelat": 4,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "sdiv x0, x0, x1\nret",
  "giasm": "sdiv x0, x0, x1\nret",
  "ll": "define i64 @test(i64 %a, i64 %b) {\n  %r = sdiv i64 %a, %b\n  ret i64 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = sdiv i64 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i64 %r"
 },
 {
  "instr": "sdiv",
  "ty": "i64",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 7,
  "gisize": 2,
  "extrasize": 0,
  "asm": "mov x8, #18725                      // =0x4925\nmovk x8, #9362, lsl #16\nmovk x8, #37449, lsl #32\nmovk x8, #18724, lsl #48\nsmulh x8, x0, x8\nasr x9, x8, #1\nadd x0, x9, x8, lsr #63\nret",
  "giasm": "mov w8, #7                          // =0x7\nsdiv x0, x0, x8\nret",
  "ll": "define i64 @test(i64 %a) {\n  %r = sdiv i64 %a, 7\n  ret i64 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = sdiv i64 %a, 7\nCost Model: Found an estimated cost of 1 for instruction:   ret i64 %r"
 },
 {
  "instr": "sdiv",
  "ty": "<8 x i8>",
  "variant": "binop",
  "codesize": 4,
  "thru": 88,
  "lat": 4,
  "sizelat": 4,
  "size": 32,
  "gisize": 32,
  "extrasize": 0,
  "asm": "smov w8, v1.b[1]\nsmov w9, v0.b[1]\nsmov w10, v0.b[0]\nsmov w11, v0.b[2]\nsmov w12, v0.b[3]\nsmov w13, v0.b[4]\nsmov w14, v0.b[5]\nsdiv w8, w9, w8\nsmov w9, v1.b[0]\nsdiv w9, w10, w9\nsmov w10, v1.b[2]\nsdiv w10, w11, w10\nsmov w11, v1.b[3]\nfmov s2, w9\nsmov w9, v1.b[6]\nmov v2.b[1], w8\nsdiv w11, w12, w11\nsmov w12, v1.b[4]\nmov v2.b[2], w10\nsmov w10, v0.b[6]\nsdiv w12, w13, w12\nsmov w13, v1.b[5]\nmov v2.b[3], w11\nsmov w11, v0.b[7]\nsdiv w8, w14, w13\nmov v2.b[4], w12\nsdiv w9, w10, w9\nsmov w10, v1.b[7]\nmov v2.b[5], w8\nsdiv w8, w11, w10\nmov v2.b[6], w9\nmov v2.b[7], w8\nfmov d0, d2\nret",
  "giasm": "smov w8, v0.b[0]\nsmov w9, v1.b[0]\nsmov w10, v1.b[1]\nsmov w11, v1.b[2]\nsmov w12, v1.b[3]\nsmov w13, v1.b[4]\nsmov w14, v1.b[5]\nsdiv w8, w8, w9\nsmov w9, v0.b[1]\nsdiv w9, w9, w10\nsmov w10, v0.b[2]\nfmov s2, w8\nsdiv w10, w10, w11\nsmov w11, v0.b[3]\nmov v2.b[1], w9\nsmov w9, v0.b[6]\nsdiv w11, w11, w12\nsmov w12, v0.b[4]\nmov v2.b[2], w10\nsmov w10, v0.b[7]\nsdiv w12, w12, w13\nsmov w13, v0.b[5]\nmov v2.b[3], w11\nsmov w11, v1.b[7]\nsdiv w8, w13, w14\nsmov w13, v1.b[6]\nmov v2.b[4], w12\nsdiv w9, w9, w13\nmov v2.b[5], w8\nsdiv w8, w10, w11\nmov v2.b[6], w9\nmov v2.b[7], w8\nfmov d0, d2\nret",
  "ll": "define <8 x i8> @test(<8 x i8> %a, <8 x i8> %b) {\n  %r = sdiv <8 x i8> %a, %b\n  ret <8 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = sdiv <8 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i8> %r"
 },
 {
  "instr": "sdiv",
  "ty": "<8 x i8>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 14,
  "lat": 4,
  "sizelat": 4,
  "size": 9,
  "gisize": 26,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nmovi v2.4h, #254\nldr d1, [x8, :lo12:.LCPI0_0]\nsmull v1.8h, v0.8b, v1.8b\nbic v0.4h, #255, lsl #8\nshrn v1.8b, v1.8h, #8\nadd v0.8b, v1.8b, v0.8b\nsshl v0.8b, v0.8b, v2.8b\nusra v0.8b, v0.8b, #7\nret",
  "giasm": "smov w8, v0.b[0]\nmov w9, #7                          // =0x7\nsmov w10, v0.b[1]\nmov w11, #6                         // =0x6\nsmov w12, v0.b[2]\nsmov w13, v0.b[3]\nsmov w14, v0.b[4]\nsmov w15, v0.b[5]\nsdiv w8, w8, w9\nsdiv w10, w10, w11\nfmov s1, w8\nsdiv w12, w12, w9\nmov v1.b[1], w10\nsmov w10, v0.b[6]\nsdiv w13, w13, w11\nmov v1.b[2], w12\nsdiv w14, w14, w9\nmov v1.b[3], w13\nsdiv w8, w15, w11\nmov v1.b[4], w14\nsdiv w9, w10, w9\nsmov w10, v0.b[7]\nmov v1.b[5], w8\nsdiv w8, w10, w11\nmov v1.b[6], w9\nmov v1.b[7], w8\nfmov d0, d1\nret",
  "ll": "define <8 x i8> @test(<8 x i8> %a) {\n  %r = sdiv <8 x i8> %a, <i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6>\n  ret <8 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = sdiv <8 x i8> %a, <i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6>\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i8> %r"
 },
 {
  "instr": "sdiv",
  "ty": "<8 x i8>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 91,
  "lat": 7,
  "sizelat": 7,
  "size": 25,
  "gisize": 33,
  "extrasize": 0,
  "asm": "smov w10, v0.b[0]\nsxtb w9, w0\nsmov w8, v0.b[1]\nsmov w11, v0.b[2]\nsmov w12, v0.b[3]\nsmov w13, v0.b[4]\nsmov w14, v0.b[5]\nsdiv w10, w10, w9\nsdiv w8, w8, w9\nfmov s1, w10\nsmov w10, v0.b[6]\nsdiv w11, w11, w9\nmov v1.b[1], w8\nsdiv w12, w12, w9\nmov v1.b[2], w11\nsmov w11, v0.b[7]\nsdiv w13, w13, w9\nmov v1.b[3], w12\nsdiv w8, w14, w9\nmov v1.b[4], w13\nsdiv w10, w10, w9\nmov v1.b[5], w8\nsdiv w8, w11, w9\nmov v1.b[6], w10\nmov v1.b[7], w8\nfmov d0, d1\nret",
  "giasm": "dup v2.8b, w0\nsmov w8, v0.b[0]\nsmov w9, v2.b[0]\nsmov w10, v2.b[1]\nsmov w11, v2.b[2]\nsmov w12, v2.b[3]\nsmov w13, v2.b[4]\nsmov w14, v2.b[5]\nsdiv w8, w8, w9\nsmov w9, v0.b[1]\nsdiv w9, w9, w10\nsmov w10, v0.b[2]\nfmov s1, w8\nsdiv w10, w10, w11\nsmov w11, v0.b[3]\nmov v1.b[1], w9\nsmov w9, v0.b[6]\nsdiv w11, w11, w12\nsmov w12, v0.b[4]\nmov v1.b[2], w10\nsmov w10, v0.b[7]\nsdiv w12, w12, w13\nsmov w13, v0.b[5]\nmov v1.b[3], w11\nsmov w11, v2.b[7]\nsdiv w8, w13, w14\nsmov w13, v2.b[6]\nmov v1.b[4], w12\nsdiv w9, w9, w13\nmov v1.b[5], w8\nsdiv w8, w10, w11\nmov v1.b[6], w9\nmov v1.b[7], w8\nfmov d0, d1\nret",
  "ll": "define <8 x i8> @test(<8 x i8> %a, i8 %bs) {\n  %i = insertelement <8 x i8> poison, i8 %bs, i64 0\n  %b = shufflevector <8 x i8> %i, <8 x i8> poison, <8 x i32> zeroinitializer\n  %r = sdiv <8 x i8> %a, %b\n  ret <8 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <8 x i8> poison, i8 %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <8 x i8> %i, <8 x i8> poison, <8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = sdiv <8 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i8> %r"
 },
 {
  "instr": "sdiv",
  "ty": "<8 x i8>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 6,
  "lat": 4,
  "sizelat": 4,
  "size": 6,
  "gisize": 25,
  "extrasize": 0,
  "asm": "movi v1.8b, #147\nsmull v1.8h, v0.8b, v1.8b\nshrn v1.8b, v1.8h, #8\nadd v0.8b, v1.8b, v0.8b\nsshr v0.8b, v0.8b, #2\nusra v0.8b, v0.8b, #7\nret",
  "giasm": "smov w9, v0.b[0]\nmov w8, #7                          // =0x7\nsmov w10, v0.b[1]\nsmov w11, v0.b[2]\nsmov w12, v0.b[3]\nsmov w13, v0.b[4]\nsmov w14, v0.b[5]\nsdiv w9, w9, w8\nsdiv w10, w10, w8\nfmov s1, w9\nsdiv w11, w11, w8\nmov v1.b[1], w10\nsmov w10, v0.b[6]\nsdiv w12, w12, w8\nmov v1.b[2], w11\nsmov w11, v0.b[7]\nsdiv w13, w13, w8\nmov v1.b[3], w12\nsdiv w9, w14, w8\nmov v1.b[4], w13\nsdiv w10, w10, w8\nmov v1.b[5], w9\nsdiv w8, w11, w8\nmov v1.b[6], w10\nmov v1.b[7], w8\nfmov d0, d1\nret",
  "ll": "define <8 x i8> @test(<8 x i8> %a) {\n  %r = sdiv <8 x i8> %a, splat (i8 7)\n  ret <8 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = sdiv <8 x i8> %a, splat (i8 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i8> %r"
 },
 {
  "instr": "sdiv",
  "ty": "<16 x i8>",
  "variant": "binop",
  "codesize": 4,
  "thru": 168,
  "lat": 4,
  "sizelat": 4,
  "size": 64,
  "gisize": 64,
  "extrasize": 0,
  "asm": "smov w8, v1.b[1]\nsmov w9, v0.b[1]\nsmov w10, v0.b[0]\nsmov w11, v0.b[2]\nsmov w12, v0.b[3]\nsmov w13, v0.b[4]\nsmov w14, v0.b[5]\nsmov w15, v0.b[6]\nsmov w16, v0.b[7]\nsmov w17, v0.b[8]\nsmov w18, v0.b[9]\nsdiv w8, w9, w8\nsmov w9, v1.b[0]\nsdiv w9, w10, w9\nsmov w10, v1.b[2]\nsdiv w10, w11, w10\nsmov w11, v1.b[3]\nfmov s2, w9\nsmov w9, v1.b[10]\nmov v2.b[1], w8\nsdiv w11, w12, w11\nsmov w12, v1.b[4]\nmov v2.b[2], w10\nsmov w10, v0.b[10]\nsdiv w12, w13, w12\nsmov w13, v1.b[5]\nmov v2.b[3], w11\nsmov w11, v0.b[11]\nsdiv w13, w14, w13\nsmov w14, v1.b[6]\nmov v2.b[4], w12\nsmov w12, v0.b[12]\nsdiv w14, w15, w14\nsmov w15, v1.b[7]\nmov v2.b[5], w13\nsmov w13, v0.b[13]\nsdiv w15, w16, w15\nsmov w16, v1.b[8]\nmov v2.b[6], w14\nsdiv w16, w17, w16\nsmov w17, v1.b[9]\nmov v2.b[7], w15\nsdiv w8, w18, w17\nmov v2.b[8], w16\nsdiv w9, w10, w9\nsmov w10, v1.b[11]\nmov v2.b[9], w8\nsdiv w10, w11, w10\nsmov w11, v1.b[12]\nmov v2.b[10], w9\nsmov w9, v1.b[14]\nsdiv w11, w12, w11\nsmov w12, v1.b[13]\nmov v2.b[11], w10\nsmov w10, v1.b[15]\nsdiv w8, w13, w12\nsmov w12, v0.b[14]\nmov v2.b[12], w11\nsmov w11, v0.b[15]\nsdiv w9, w12, w9\nmov v2.b[13], w8\nsdiv w8, w11, w10\nmov v2.b[14], w9\nmov v2.b[15], w8\nmov v0.16b, v2.16b\nret",
  "giasm": "smov w8, v0.b[0]\nsmov w9, v1.b[0]\nsmov w10, v1.b[1]\nsmov w11, v1.b[2]\nsmov w12, v1.b[3]\nsmov w13, v1.b[4]\nsmov w14, v1.b[5]\nsmov w15, v1.b[6]\nsmov w16, v1.b[7]\nsmov w17, v1.b[8]\nsmov w18, v1.b[9]\nsdiv w8, w8, w9\nsmov w9, v0.b[1]\nsdiv w9, w9, w10\nsmov w10, v0.b[2]\nfmov s2, w8\nsdiv w10, w10, w11\nsmov w11, v0.b[3]\nmov v2.b[1], w9\nsmov w9, v0.b[10]\nsdiv w11, w11, w12\nsmov w12, v0.b[4]\nmov v2.b[2], w10\nsmov w10, v0.b[11]\nsdiv w12, w12, w13\nsmov w13, v0.b[5]\nmov v2.b[3], w11\nsmov w11, v1.b[11]\nsdiv w13, w13, w14\nsmov w14, v0.b[6]\nmov v2.b[4], w12\nsmov w12, v1.b[12]\nsdiv w14, w14, w15\nsmov w15, v0.b[7]\nmov v2.b[5], w13\nsmov w13, v1.b[13]\nsdiv w15, w15, w16\nsmov w16, v0.b[8]\nmov v2.b[6], w14\nsdiv w16, w16, w17\nsmov w17, v0.b[9]\nmov v2.b[7], w15\nsdiv w8, w17, w18\nsmov w17, v1.b[10]\nmov v2.b[8], w16\nsdiv w9, w9, w17\nmov v2.b[9], w8\nsmov w8, v0.b[14]\nsdiv w10, w10, w11\nsmov w11, v0.b[12]\nmov v2.b[10], w9\nsmov w9, v0.b[15]\nsdiv w11, w11, w12\nsmov w12, v0.b[13]\nmov v2.b[11], w10\nsmov w10, v1.b[15]\nsdiv w12, w12, w13\nsmov w13, v1.b[14]\nmov v2.b[12], w11\nsdiv w8, w8, w13\nmov v2.b[13], w12\nsdiv w9, w9, w10\nmov v2.b[14], w8\nmov v2.b[15], w9\nmov v0.16b, v2.16b\nret",
  "ll": "define <16 x i8> @test(<16 x i8> %a, <16 x i8> %b) {\n  %r = sdiv <16 x i8> %a, %b\n  ret <16 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = sdiv <16 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i8> %r"
 },
 {
  "instr": "sdiv",
  "ty": "<16 x i8>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 22,
  "lat": 4,
  "sizelat": 4,
  "size": 10,
  "gisize": 50,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nsmull2 v2.8h, v0.16b, v1.16b\nsmull v1.8h, v0.8b, v1.8b\nbic v0.8h, #255, lsl #8\nuzp2 v1.16b, v1.16b, v2.16b\nmovi v2.8h, #254\nadd v0.16b, v1.16b, v0.16b\nsshl v0.16b, v0.16b, v2.16b\nusra v0.16b, v0.16b, #7\nret",
  "giasm": "smov w8, v0.b[0]\nmov w9, #7                          // =0x7\nsmov w11, v0.b[1]\nsmov w12, v0.b[2]\nsmov w13, v0.b[3]\nsmov w14, v0.b[4]\nsmov w15, v0.b[5]\nsmov w16, v0.b[6]\nsmov w17, v0.b[7]\nsmov w18, v0.b[8]\nsmov w0, v0.b[9]\nsdiv w10, w8, w9\nmov w8, #6                          // =0x6\nsdiv w11, w11, w8\nfmov s1, w10\nsdiv w12, w12, w9\nmov v1.b[1], w11\nsmov w11, v0.b[10]\nsdiv w13, w13, w8\nmov v1.b[2], w12\nsmov w12, v0.b[11]\nsdiv w14, w14, w9\nmov v1.b[3], w13\nsmov w13, v0.b[12]\nsdiv w15, w15, w8\nmov v1.b[4], w14\nsmov w14, v0.b[13]\nsdiv w16, w16, w9\nmov v1.b[5], w15\nsdiv w17, w17, w8\nmov v1.b[6], w16\nsdiv w18, w18, w9\nmov v1.b[7], w17\nsdiv w10, w0, w8\nmov v1.b[8], w18\nsdiv w11, w11, w9\nmov v1.b[9], w10\nsmov w10, v0.b[14]\nsdiv w12, w12, w8\nmov v1.b[10], w11\nsdiv w13, w13, w9\nmov v1.b[11], w12\nsdiv w14, w14, w8\nmov v1.b[12], w13\nsdiv w9, w10, w9\nsmov w10, v0.b[15]\nmov v1.b[13], w14\nsdiv w8, w10, w8\nmov v1.b[14], w9\nmov v1.b[15], w8\nmov v0.16b, v1.16b\nret",
  "ll": "define <16 x i8> @test(<16 x i8> %a) {\n  %r = sdiv <16 x i8> %a, <i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6>\n  ret <16 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = sdiv <16 x i8> %a, <i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6>\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i8> %r"
 },
 {
  "instr": "sdiv",
  "ty": "<16 x i8>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 171,
  "lat": 7,
  "sizelat": 7,
  "size": 49,
  "gisize": 65,
  "extrasize": 0,
  "asm": "smov w10, v0.b[0]\nsxtb w8, w0\nsmov w9, v0.b[1]\nsmov w11, v0.b[2]\nsmov w12, v0.b[3]\nsmov w13, v0.b[4]\nsmov w14, v0.b[5]\nsmov w15, v0.b[6]\nsmov w16, v0.b[7]\nsmov w17, v0.b[8]\nsmov w18, v0.b[9]\nsdiv w10, w10, w8\nsdiv w9, w9, w8\nfmov s1, w10\nsmov w10, v0.b[10]\nsdiv w11, w11, w8\nmov v1.b[1], w9\nsdiv w12, w12, w8\nmov v1.b[2], w11\nsmov w11, v0.b[11]\nsdiv w13, w13, w8\nmov v1.b[3], w12\nsmov w12, v0.b[12]\nsdiv w14, w14, w8\nmov v1.b[4], w13\nsmov w13, v0.b[13]\nsdiv w15, w15, w8\nmov v1.b[5], w14\nsdiv w16, w16, w8\nmov v1.b[6], w15\nsdiv w17, w17, w8\nmov v1.b[7], w16\nsdiv w9, w18, w8\nmov v1.b[8], w17\nsdiv w10, w10, w8\nmov v1.b[9], w9\nsdiv w11, w11, w8\nmov v1.b[10], w10\nsmov w10, v0.b[14]\nsdiv w12, w12, w8\nmov v1.b[11], w11\nsmov w11, v0.b[15]\nsdiv w9, w13, w8\nmov v1.b[12], w12\nsdiv w10, w10, w8\nmov v1.b[13], w9\nsdiv w8, w11, w8\nmov v1.b[14], w10\nmov v1.b[15], w8\nmov v0.16b, v1.16b\nret",
  "giasm": "dup v2.16b, w0\nsmov w8, v0.b[0]\nsmov w9, v2.b[0]\nsmov w10, v2.b[1]\nsmov w11, v2.b[2]\nsmov w12, v2.b[3]\nsmov w13, v2.b[4]\nsmov w14, v2.b[5]\nsmov w15, v2.b[6]\nsmov w16, v2.b[7]\nsmov w17, v2.b[8]\nsmov w18, v2.b[9]\nsdiv w8, w8, w9\nsmov w9, v0.b[1]\nsdiv w9, w9, w10\nsmov w10, v0.b[2]\nfmov s1, w8\nsdiv w10, w10, w11\nsmov w11, v0.b[3]\nmov v1.b[1], w9\nsmov w9, v0.b[10]\nsdiv w11, w11, w12\nsmov w12, v0.b[4]\nmov v1.b[2], w10\nsmov w10, v0.b[11]\nsdiv w12, w12, w13\nsmov w13, v0.b[5]\nmov v1.b[3], w11\nsmov w11, v2.b[11]\nsdiv w13, w13, w14\nsmov w14, v0.b[6]\nmov v1.b[4], w12\nsmov w12, v2.b[12]\nsdiv w14, w14, w15\nsmov w15, v0.b[7]\nmov v1.b[5], w13\nsmov w13, v2.b[13]\nsdiv w15, w15, w16\nsmov w16, v0.b[8]\nmov v1.b[6], w14\nsdiv w16, w16, w17\nsmov w17, v0.b[9]\nmov v1.b[7], w15\nsdiv w8, w17, w18\nsmov w17, v2.b[10]\nmov v1.b[8], w16\nsdiv w9, w9, w17\nmov v1.b[9], w8\nsmov w8, v0.b[14]\nsdiv w10, w10, w11\nsmov w11, v0.b[12]\nmov v1.b[10], w9\nsmov w9, v0.b[15]\nsdiv w11, w11, w12\nsmov w12, v0.b[13]\nmov v1.b[11], w10\nsmov w10, v2.b[15]\nsdiv w12, w12, w13\nsmov w13, v2.b[14]\nmov v1.b[12], w11\nsdiv w8, w8, w13\nmov v1.b[13], w12\nsdiv w9, w9, w10\nmov v1.b[14], w8\nmov v1.b[15], w9\nmov v0.16b, v1.16b\nret",
  "ll": "define <16 x i8> @test(<16 x i8> %a, i8 %bs) {\n  %i = insertelement <16 x i8> poison, i8 %bs, i64 0\n  %b = shufflevector <16 x i8> %i, <16 x i8> poison, <16 x i32> zeroinitializer\n  %r = sdiv <16 x i8> %a, %b\n  ret <16 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <16 x i8> poison, i8 %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <16 x i8> %i, <16 x i8> poison, <16 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = sdiv <16 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i8> %r"
 },
 {
  "instr": "sdiv",
  "ty": "<16 x i8>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 6,
  "lat": 4,
  "sizelat": 4,
  "size": 7,
  "gisize": 49,
  "extrasize": 0,
  "asm": "movi v1.16b, #147\nsmull2 v2.8h, v0.16b, v1.16b\nsmull v1.8h, v0.8b, v1.8b\nuzp2 v1.16b, v1.16b, v2.16b\nadd v0.16b, v1.16b, v0.16b\nsshr v0.16b, v0.16b, #2\nusra v0.16b, v0.16b, #7\nret",
  "giasm": "smov w9, v0.b[0]\nmov w8, #7                          // =0x7\nsmov w10, v0.b[1]\nsmov w11, v0.b[2]\nsmov w12, v0.b[3]\nsmov w13, v0.b[4]\nsmov w14, v0.b[5]\nsmov w15, v0.b[6]\nsmov w16, v0.b[7]\nsmov w17, v0.b[8]\nsmov w18, v0.b[9]\nsdiv w9, w9, w8\nsdiv w10, w10, w8\nfmov s1, w9\nsdiv w11, w11, w8\nmov v1.b[1], w10\nsmov w10, v0.b[10]\nsdiv w12, w12, w8\nmov v1.b[2], w11\nsmov w11, v0.b[11]\nsdiv w13, w13, w8\nmov v1.b[3], w12\nsmov w12, v0.b[12]\nsdiv w14, w14, w8\nmov v1.b[4], w13\nsmov w13, v0.b[13]\nsdiv w15, w15, w8\nmov v1.b[5], w14\nsdiv w16, w16, w8\nmov v1.b[6], w15\nsdiv w17, w17, w8\nmov v1.b[7], w16\nsdiv w9, w18, w8\nmov v1.b[8], w17\nsdiv w10, w10, w8\nmov v1.b[9], w9\nsmov w9, v0.b[14]\nsdiv w11, w11, w8\nmov v1.b[10], w10\nsmov w10, v0.b[15]\nsdiv w12, w12, w8\nmov v1.b[11], w11\nsdiv w13, w13, w8\nmov v1.b[12], w12\nsdiv w9, w9, w8\nmov v1.b[13], w13\nsdiv w8, w10, w8\nmov v1.b[14], w9\nmov v1.b[15], w8\nmov v0.16b, v1.16b\nret",
  "ll": "define <16 x i8> @test(<16 x i8> %a) {\n  %r = sdiv <16 x i8> %a, splat (i8 7)\n  ret <16 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = sdiv <16 x i8> %a, splat (i8 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i8> %r"
 },
 {
  "instr": "sdiv",
  "ty": "<32 x i8>",
  "variant": "binop",
  "codesize": 4,
  "thru": 328,
  "lat": 4,
  "sizelat": 4,
  "size": 136,
  "gisize": 136,
  "extrasize": 0,
  "asm": "stp x26, x25, [sp, #-64]!           // 16-byte Folded Spill\nstp x24, x23, [sp, #16]             // 16-byte Folded Spill\nstp x22, x21, [sp, #32]             // 16-byte Folded Spill\nstp x20, x19, [sp, #48]             // 16-byte Folded Spill\nsmov w8, v2.b[1]\nsmov w9, v0.b[1]\nsmov w10, v0.b[0]\nsmov w11, v0.b[2]\nsmov w12, v0.b[3]\nsmov w13, v0.b[4]\nsmov w14, v0.b[5]\nsmov w15, v0.b[6]\nsmov w16, v0.b[7]\nsmov w17, v0.b[8]\nsmov w18, v0.b[9]\nsmov w0, v0.b[10]\nsdiv w8, w9, w8\nsmov w9, v2.b[0]\nsmov w1, v0.b[11]\nsmov w2, v0.b[12]\nsmov w3, v0.b[13]\nsmov w4, v0.b[14]\nsmov w5, v0.b[15]\nsmov w6, v1.b[1]\nsmov w7, v1.b[0]\nsmov w19, v1.b[2]\nsmov w20, v1.b[3]\nsmov w21, v1.b[4]\nsmov w22, v1.b[5]\nsmov w23, v1.b[6]\nsmov w24, v1.b[7]\nsmov w25, v1.b[8]\nsmov w26, v1.b[9]\nsdiv w9, w10, w9\nsmov w10, v2.b[2]\nsdiv w11, w11, w10\nsmov w10, v2.b[3]\nfmov s0, w9\nsmov w9, v3.b[10]\nmov v0.b[1], w8\nsdiv w10, w12, w10\nsmov w12, v2.b[4]\nmov v0.b[2], w11\nsmov w11, v1.b[10]\nsdiv w13, w13, w12\nsmov w12, v2.b[5]\nmov v0.b[3], w10\nsmov w10, v3.b[11]\nsdiv w12, w14, w12\nsmov w14, v2.b[6]\nmov v0.b[4], w13\nsmov w13, v1.b[13]\nsdiv w15, w15, w14\nsmov w14, v2.b[7]\nmov v0.b[5], w12\nsmov w12, v1.b[12]\nsdiv w14, w16, w14\nsmov w16, v2.b[8]\nmov v0.b[6], w15\nsdiv w17, w17, w16\nsmov w16, v2.b[9]\nmov v0.b[7], w14\nsdiv w16, w18, w16\nsmov w18, v2.b[10]\nmov v0.b[8], w17\nsdiv w0, w0, w18\nsmov w18, v2.b[11]\nmov v0.b[9], w16\nsdiv w18, w1, w18\nsmov w1, v2.b[12]\nmov v0.b[10], w0\nsdiv w2, w2, w1\nsmov w1, v2.b[13]\nmov v0.b[11], w18\nsdiv w1, w3, w1\nsmov w3, v2.b[14]\nmov v0.b[12], w2\nsdiv w3, w4, w3\nsmov w4, v2.b[15]\nmov v0.b[13], w1\nsdiv w4, w5, w4\nsmov w5, v3.b[1]\nmov v0.b[14], w3\nsdiv w5, w6, w5\nsmov w6, v3.b[0]\nmov v0.b[15], w4\nsdiv w6, w7, w6\nsmov w7, v3.b[2]\nsdiv w7, w19, w7\nsmov w19, v3.b[3]\nfmov s2, w6\nmov v2.b[1], w5\nsdiv w19, w20, w19\nsmov w20, v3.b[4]\nmov v2.b[2], w7\nsdiv w20, w21, w20\nsmov w21, v3.b[5]\nmov v2.b[3], w19\nsdiv w21, w22, w21\nsmov w22, v3.b[6]\nmov v2.b[4], w20\nldp x20, x19, [sp, #48]             // 16-byte Folded Reload\nsdiv w22, w23, w22\nsmov w23, v3.b[7]\nmov v2.b[5], w21\nsdiv w23, w24, w23\nsmov w24, v3.b[8]\nmov v2.b[6], w22\nldp x22, x21, [sp, #32]             // 16-byte Folded Reload\nsdiv w24, w25, w24\nsmov w25, v3.b[9]\nmov v2.b[7], w23\nsdiv w8, w26, w25\nmov v2.b[8], w24\nldp x24, x23, [sp, #16]             // 16-byte Folded Reload\nsdiv w9, w11, w9\nsmov w11, v1.b[11]\nmov v2.b[9], w8\nsdiv w10, w11, w10\nsmov w11, v3.b[12]\nmov v2.b[10], w9\nsmov w9, v3.b[14]\nsdiv w11, w12, w11\nsmov w12, v3.b[13]\nmov v2.b[11], w10\nsmov w10, v3.b[15]\nsdiv w8, w13, w12\nsmov w12, v1.b[14]\nmov v2.b[12], w11\nsmov w11, v1.b[15]\nsdiv w9, w12, w9\nmov v2.b[13], w8\nsdiv w8, w11, w10\nmov v2.b[14], w9\nmov v2.b[15], w8\nmov v1.16b, v2.16b\nldp x26, x25, [sp], #64             // 16-byte Folded Reload\nret",
  "giasm": "stp x26, x25, [sp, #-64]!           // 16-byte Folded Spill\nstp x24, x23, [sp, #16]             // 16-byte Folded Spill\nstp x22, x21, [sp, #32]             // 16-byte Folded Spill\nstp x20, x19, [sp, #48]             // 16-byte Folded Spill\nsmov w8, v0.b[0]\nsmov w9, v2.b[0]\nsmov w5, v2.b[15]\nsmov w6, v3.b[0]\nsmov w25, v3.b[8]\nsmov w26, v3.b[9]\nsdiv w4, w8, w9\nsmov w8, v0.b[1]\nsmov w9, v2.b[1]\nsdiv w3, w8, w9\nsmov w8, v0.b[2]\nsmov w9, v2.b[2]\nsdiv w2, w8, w9\nsmov w8, v0.b[3]\nsmov w9, v2.b[3]\nsdiv w1, w8, w9\nsmov w8, v0.b[4]\nsmov w9, v2.b[4]\nsdiv w0, w8, w9\nsmov w8, v0.b[5]\nsmov w9, v2.b[5]\nsdiv w18, w8, w9\nsmov w8, v0.b[6]\nsmov w9, v2.b[6]\nsdiv w17, w8, w9\nsmov w8, v0.b[7]\nsmov w9, v2.b[7]\nsdiv w16, w8, w9\nsmov w8, v0.b[8]\nsmov w9, v2.b[8]\nsdiv w15, w8, w9\nsmov w8, v0.b[9]\nsmov w9, v2.b[9]\nsdiv w14, w8, w9\nsmov w8, v0.b[10]\nsmov w9, v2.b[10]\nsdiv w13, w8, w9\nsmov w8, v0.b[11]\nsmov w9, v2.b[11]\nsdiv w12, w8, w9\nsmov w8, v0.b[12]\nsmov w9, v2.b[12]\nsdiv w11, w8, w9\nsmov w8, v0.b[13]\nsmov w9, v2.b[13]\nsdiv w10, w8, w9\nsmov w8, v0.b[14]\nsmov w9, v2.b[14]\nsdiv w9, w8, w9\nsmov w8, v0.b[15]\nfmov s0, w4\nmov v0.b[1], w3\nsmov w3, v1.b[10]\nmov v0.b[2], w2\nsdiv w8, w8, w5\nsmov w5, v1.b[0]\nmov v0.b[3], w1\nsmov w1, v1.b[11]\nmov v0.b[4], w0\nsdiv w24, w5, w6\nsmov w5, v1.b[1]\nsmov w6, v3.b[1]\nmov v0.b[5], w18\nsmov w18, v1.b[12]\nmov v0.b[6], w17\nsdiv w23, w5, w6\nsmov w5, v1.b[2]\nsmov w6, v3.b[2]\nfmov s2, w24\nmov v0.b[7], w16\nsmov w16, v1.b[13]\nmov v0.b[8], w15\nsdiv w22, w5, w6\nsmov w5, v1.b[3]\nsmov w6, v3.b[3]\nmov v2.b[1], w23\nsmov w23, v3.b[10]\nmov v0.b[9], w14\nsmov w14, v1.b[14]\nmov v0.b[10], w13\nsdiv w21, w5, w6\nsmov w5, v1.b[4]\nsmov w6, v3.b[4]\nmov v2.b[2], w22\nmov v0.b[11], w12\nsmov w12, v1.b[15]\nmov v0.b[12], w11\nsdiv w20, w5, w6\nsmov w5, v1.b[5]\nsmov w6, v3.b[5]\nmov v2.b[3], w21\nldp x22, x21, [sp, #32]             // 16-byte Folded Reload\nmov v0.b[13], w10\nmov v0.b[14], w9\nsdiv w19, w5, w6\nsmov w5, v1.b[6]\nsmov w6, v3.b[6]\nmov v2.b[4], w20\nmov v0.b[15], w8\nsdiv w7, w5, w6\nsmov w5, v1.b[7]\nsmov w6, v3.b[7]\nmov v2.b[5], w19\nldp x20, x19, [sp, #48]             // 16-byte Folded Reload\nsdiv w6, w5, w6\nsmov w5, v1.b[8]\nmov v2.b[6], w7\nsdiv w5, w5, w25\nsmov w25, v1.b[9]\nmov v2.b[7], w6\nsdiv w4, w25, w26\nmov v2.b[8], w5\nsdiv w2, w3, w23\nsmov w3, v3.b[11]\nmov v2.b[9], w4\nldp x24, x23, [sp, #16]             // 16-byte Folded Reload\nsdiv w0, w1, w3\nsmov w1, v3.b[12]\nmov v2.b[10], w2\nsdiv w17, w18, w1\nsmov w18, v3.b[13]\nmov v2.b[11], w0\nsdiv w15, w16, w18\nsmov w16, v3.b[14]\nmov v2.b[12], w17\nsdiv w13, w14, w16\nsmov w14, v3.b[15]\nmov v2.b[13], w15\nsdiv w10, w12, w14\nmov v2.b[14], w13\nmov v2.b[15], w10\nmov v1.16b, v2.16b\nldp x26, x25, [sp], #64             // 16-byte Folded Reload\nret",
  "ll": "define <32 x i8> @test(<32 x i8> %a, <32 x i8> %b) {\n  %r = sdiv <32 x i8> %a, %b\n  ret <32 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = sdiv <32 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i8> %r"
 },
 {
  "instr": "sdiv",
  "ty": "<32 x i8>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 38,
  "lat": 4,
  "sizelat": 4,
  "size": 212,
  "gisize": 108,
  "extrasize": 0,
  "asm": "smov w10, v0.b[0]\nsmov x12, v0.b[1]\nmov w9, #9363                       // =0x2493\nsmov w11, v0.b[2]\nsmov x13, v0.b[3]\nmovk w9, #37449, lsl #16\nsmov w15, v1.b[0]\nmov w8, #43691                      // =0xaaab\nsmov w17, v1.b[2]\nmovk w8, #10922, lsl #16\nsmov x14, v1.b[1]\nsmull x16, w10, w9\nsmull x12, w12, w8\nsmull x18, w11, w9\nsmull x13, w13, w8\nlsr x16, x16, #32\nsmull x1, w15, w9\nlsr x0, x12, #63\nlsr x12, x12, #32\nlsr x18, x18, #32\nadd w10, w16, w10\nsmull x14, w14, w8\nlsr x16, x13, #63\nlsr x13, x13, #32\nadd w12, w12, w0\nlsr x1, x1, #32\nsmull x0, w17, w9\nadd w18, w18, w11\nadd w11, w13, w16\nasr w13, w10, #2\nsmov w16, v0.b[4]\nadd w15, w1, w15\nlsr x2, x14, #63\nlsr x14, x14, #32\nasr w1, w15, #2\nadd w10, w13, w10, lsr #31\nlsr x0, x0, #32\nsmov x13, v1.b[3]\nadd w14, w14, w2\nsmov x2, v0.b[5]\nadd w15, w1, w15, lsr #31\nfmov s2, w10\nadd w17, w0, w17\nsmov w0, v1.b[4]\nasr w1, w18, #2\nsmull x10, w16, w9\nfmov s3, w15\nsmov w15, v0.b[6]\nmov v2.b[1], w12\nadd w12, w1, w18, lsr #31\nasr w18, w17, #2\nsmull x13, w13, w8\nlsr x1, x10, #32\nsmov w10, v0.b[8]\nmov v3.b[1], w14\nsmull x14, w0, w9\nadd w17, w18, w17, lsr #31\nsmov x18, v0.b[7]\nmov v2.b[2], w12\nadd w12, w1, w16\nlsr x16, x13, #63\nlsr x14, x14, #32\nlsr x13, x13, #32\nsmull x1, w2, w8\nmov v3.b[2], w17\nsmov x17, v1.b[5]\nsmull x2, w10, w9\nadd w14, w14, w0\nsmov w0, v1.b[6]\nadd w13, w13, w16\nasr w16, w12, #2\nmov v2.b[3], w11\nlsr x11, x1, #63\nlsr x1, x1, #32\nsmull x18, w18, w8\nmov v3.b[3], w13\nasr w13, w14, #2\nadd w12, w16, w12, lsr #31\nsmull x16, w15, w9\nadd w11, w1, w11\nsmov x1, v0.b[9]\nsmull x17, w17, w8\nadd w13, w13, w14, lsr #31\nmov v2.b[4], w12\nsmull x14, w0, w9\nsmov x12, v1.b[7]\nlsr x16, x16, #32\nmov v3.b[4], w13\nlsr x13, x17, #63\nlsr x17, x17, #32\nlsr x14, x14, #32\nadd w15, w16, w15\nsmov w16, v1.b[8]\nadd w13, w17, w13\nmov v2.b[5], w11\nlsr x17, x18, #63\nadd w14, w14, w0\nasr w0, w15, #2\nmov v3.b[5], w13\nasr w13, w14, #2\nlsr x18, x18, #32\nsmull x12, w12, w8\nadd w15, w0, w15, lsr #31\nlsr x0, x2, #32\nsmov w11, v0.b[10]\nadd w13, w13, w14, lsr #31\nsmull x14, w16, w9\nadd w17, w18, w17\nmov v2.b[6], w15\nsmull x18, w1, w8\nlsr x15, x12, #63\nmov v3.b[6], w13\nlsr x12, x12, #32\nadd w10, w0, w10\nlsr x14, x14, #32\nsmov w0, v1.b[10]\nsmov x13, v1.b[9]\nadd w12, w12, w15\nlsr x15, x18, #63\nadd w14, w14, w16\nasr w16, w10, #2\nmov v2.b[7], w17\nlsr x17, x18, #32\nasr w18, w14, #2\nmov v3.b[7], w12\nadd w10, w16, w10, lsr #31\nsmull x16, w11, w9\nsmov x12, v0.b[11]\nadd w15, w17, w15\nsmull x17, w0, w9\nadd w14, w18, w14, lsr #31\nsmull x13, w13, w8\nmov v2.b[8], w10\nsmov w18, v0.b[12]\nlsr x16, x16, #32\nmov v3.b[8], w14\nsmov x10, v1.b[11]\nlsr x17, x17, #32\nsmov w14, v1.b[12]\nsmull x12, w12, w8\nadd w11, w16, w11\nlsr x16, x13, #63\nlsr x13, x13, #32\nadd w17, w17, w0\nasr w0, w11, #2\nmov v2.b[9], w15\nadd w13, w13, w16\nasr w16, w17, #2\nsmull x15, w18, w9\nadd w11, w0, w11, lsr #31\nmov v3.b[9], w13\nsmull x10, w10, w8\nadd w16, w16, w17, lsr #31\nlsr x13, x12, #63\nlsr x12, x12, #32\nmov v2.b[10], w11\nsmull x11, w14, w9\nlsr x15, x15, #32\nadd w12, w12, w13\nsmov w13, v0.b[14]\nsmov x17, v0.b[13]\nmov v3.b[10], w16\nlsr x16, x10, #63\nlsr x10, x10, #32\nlsr x11, x11, #32\nadd w15, w15, w18\nsmov x18, v1.b[13]\nadd w10, w10, w16\nsmov w16, v1.b[14]\nmov v2.b[11], w12\nadd w11, w11, w14\nasr w12, w15, #2\nsmull x14, w13, w9\nmov v3.b[11], w10\nasr w10, w11, #2\nsmull x17, w17, w8\nadd w12, w12, w15, lsr #31\nsmull x15, w18, w8\nsmull x9, w16, w9\nadd w10, w10, w11, lsr #31\nlsr x14, x14, #32\nmov v2.b[12], w12\nlsr x12, x17, #63\nlsr x17, x17, #32\nmov v3.b[12], w10\nlsr x10, x15, #63\nlsr x15, x15, #32\nlsr x9, x9, #32\nsmov x11, v0.b[15]\nadd w13, w14, w13\nsmov x14, v1.b[15]\nadd w12, w17, w12\nadd w10, w15, w10\nadd w9, w9, w16\nmov v2.b[13], w12\nasr w12, w13, #2\nmov v3.b[13], w10\nasr w10, w9, #2\nsmull x11, w11, w8\nadd w12, w12, w13, lsr #31\nadd w9, w10, w9, lsr #31\nsmull x8, w14, w8\nmov v2.b[14], w12\nmov v3.b[14], w9\nlsr x10, x11, #63\nlsr x9, x11, #32\nlsr x11, x8, #63\nlsr x8, x8, #32\nadd w9, w9, w10\nadd w8, w8, w11\nmov v2.b[15], w9\nmov v3.b[15], w8\nmov v0.16b, v2.16b\nmov v1.16b, v3.16b\nret",
  "giasm": "str x27, [sp, #-80]!                // 8-byte Folded Spill\nstp x26, x25, [sp, #16]             // 16-byte Folded Spill\nstp x24, x23, [sp, #32]             // 16-byte Folded Spill\nstp x22, x21, [sp, #48]             // 16-byte Folded Spill\nstp x20, x19, [sp, #64]             // 16-byte Folded Spill\nsmov w8, v0.b[0]\nsmov w10, v0.b[1]\nmov w9, #7                          // =0x7\nsmov w6, v1.b[0]\nsmov w27, v1.b[9]\nsdiv w25, w8, w9\nmov w8, #6                          // =0x6\nsdiv w5, w10, w8\nsmov w10, v0.b[2]\nsdiv w4, w10, w9\nsmov w10, v0.b[3]\nsdiv w3, w10, w8\nsmov w10, v0.b[4]\nsdiv w2, w10, w9\nsmov w10, v0.b[5]\nsdiv w1, w10, w8\nsmov w10, v0.b[6]\nsdiv w0, w10, w9\nsmov w10, v0.b[7]\nsdiv w18, w10, w8\nsmov w10, v0.b[8]\nsdiv w17, w10, w9\nsmov w10, v0.b[9]\nsdiv w16, w10, w8\nsmov w10, v0.b[10]\nsdiv w15, w10, w9\nsmov w10, v0.b[11]\nsdiv w26, w6, w9\nsmov w6, v1.b[1]\nsdiv w14, w10, w8\nsmov w10, v0.b[12]\nfmov s2, w26\nsdiv w24, w6, w8\nsmov w6, v1.b[2]\nsdiv w13, w10, w9\nsmov w10, v0.b[13]\nmov v2.b[1], w24\nsdiv w23, w6, w9\nsmov w6, v1.b[3]\nsdiv w12, w10, w8\nsmov w10, v0.b[14]\nmov v2.b[2], w23\nldp x24, x23, [sp, #32]             // 16-byte Folded Reload\nsdiv w22, w6, w8\nsmov w6, v1.b[4]\nsdiv w11, w10, w9\nsmov w10, v0.b[15]\nfmov s0, w25\nmov v2.b[3], w22\nmov v0.b[1], w5\nsmov w5, v1.b[10]\nmov v0.b[2], w4\nsdiv w21, w6, w9\nsmov w6, v1.b[5]\nmov v0.b[3], w3\nsmov w3, v1.b[11]\nmov v0.b[4], w2\nsdiv w20, w6, w8\nsmov w6, v1.b[6]\nmov v2.b[4], w21\nldp x22, x21, [sp, #48]             // 16-byte Folded Reload\nmov v0.b[5], w1\nsmov w1, v1.b[12]\nmov v0.b[6], w0\nsdiv w19, w6, w9\nsmov w6, v1.b[7]\nmov v2.b[5], w20\nmov v0.b[7], w18\nsmov w18, v1.b[13]\nmov v0.b[8], w17\nsdiv w7, w6, w8\nsmov w6, v1.b[8]\nmov v2.b[6], w19\nldp x20, x19, [sp, #64]             // 16-byte Folded Reload\nmov v0.b[9], w16\nsmov w16, v1.b[14]\nmov v0.b[10], w15\nsdiv w6, w6, w9\nmov v2.b[7], w7\nmov v0.b[11], w14\nsmov w14, v1.b[15]\nmov v0.b[12], w13\nsdiv w25, w27, w8\nmov v2.b[8], w6\nmov v0.b[13], w12\nmov v0.b[14], w11\nsdiv w4, w5, w9\nmov v2.b[9], w25\nldp x26, x25, [sp, #16]             // 16-byte Folded Reload\nsdiv w2, w3, w8\nmov v2.b[10], w4\nsdiv w0, w1, w9\nmov v2.b[11], w2\nsdiv w17, w18, w8\nmov v2.b[12], w0\nsdiv w9, w16, w9\nmov v2.b[13], w17\nsdiv w10, w10, w8\nmov v2.b[14], w9\nsdiv w8, w14, w8\nmov v0.b[15], w10\nmov v2.b[15], w8\nmov v1.16b, v2.16b\nldr x27, [sp], #80                  // 8-byte Folded Reload\nret",
  "ll": "define <32 x i8> @test(<32 x i8> %a) {\n  %r = sdiv <32 x i8> %a, <i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6>\n  ret <32 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = sdiv <32 x i8> %a, <i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6>\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i8> %r"
 },
 {
  "instr": "sdiv",
  "ty": "<32 x i8>",
  "variant": "binopsplat",
  "codesize": 7,
  "thru": 332,
  "lat": 8,
  "sizelat": 8,
  "size": 105,
  "gisize": 132,
  "extrasize": 0,
  "asm": "stp x26, x25, [sp, #-64]!           // 16-byte Folded Spill\nstp x24, x23, [sp, #16]             // 16-byte Folded Spill\nstp x22, x21, [sp, #32]             // 16-byte Folded Spill\nstp x20, x19, [sp, #48]             // 16-byte Folded Spill\nsmov w7, v1.b[0]\nsxtb w8, w0\nsmov w6, v1.b[1]\nsmov w10, v0.b[0]\nsmov w9, v0.b[1]\nsmov w19, v1.b[2]\nsmov w11, v0.b[2]\nsmov w20, v1.b[3]\nsmov w12, v0.b[4]\nsmov w13, v0.b[6]\nsmov w14, v0.b[8]\nsmov w15, v0.b[10]\nsdiv w7, w7, w8\nsmov w16, v0.b[12]\nsmov w21, v1.b[4]\nsmov w4, v0.b[14]\nsmov w5, v0.b[15]\nsmov w22, v1.b[5]\nsmov w23, v1.b[6]\nsmov w24, v1.b[7]\nsmov w25, v1.b[8]\nsmov w26, v1.b[9]\nsdiv w6, w6, w8\nfmov s2, w7\nsdiv w10, w10, w8\nmov v2.b[1], w6\nsdiv w9, w9, w8\nsdiv w19, w19, w8\nsdiv w17, w11, w8\nsmov w11, v0.b[3]\nmov v2.b[2], w19\nsdiv w20, w20, w8\nsdiv w18, w12, w8\nsmov w12, v0.b[5]\nmov v2.b[3], w20\nldp x20, x19, [sp, #48]             // 16-byte Folded Reload\nsdiv w0, w13, w8\nsmov w13, v0.b[7]\nsdiv w1, w14, w8\nsmov w14, v0.b[9]\nsdiv w2, w15, w8\nsmov w15, v0.b[11]\nsdiv w3, w16, w8\nsmov w16, v0.b[13]\nfmov s0, w10\nsmov w10, v1.b[10]\nmov v0.b[1], w9\nmov v0.b[2], w17\nsdiv w11, w11, w8\nsdiv w21, w21, w8\nmov v0.b[3], w11\nsmov w11, v1.b[11]\nmov v0.b[4], w18\nsdiv w22, w22, w8\nmov v2.b[4], w21\nsdiv w12, w12, w8\nmov v2.b[5], w22\nldp x22, x21, [sp, #32]             // 16-byte Folded Reload\nsdiv w23, w23, w8\nmov v0.b[5], w12\nsmov w12, v1.b[12]\nmov v0.b[6], w0\nsdiv w24, w24, w8\nmov v2.b[6], w23\nsdiv w13, w13, w8\nmov v2.b[7], w24\nldp x24, x23, [sp, #16]             // 16-byte Folded Reload\nsdiv w25, w25, w8\nmov v0.b[7], w13\nsmov w13, v1.b[13]\nmov v0.b[8], w1\nsdiv w9, w26, w8\nmov v2.b[8], w25\nsdiv w14, w14, w8\nmov v2.b[9], w9\nsdiv w10, w10, w8\nmov v0.b[9], w14\nmov v0.b[10], w2\nsdiv w11, w11, w8\nmov v2.b[10], w10\nsmov w10, v1.b[14]\nsdiv w15, w15, w8\nmov v2.b[11], w11\nsmov w11, v1.b[15]\nsdiv w12, w12, w8\nmov v0.b[11], w15\nmov v0.b[12], w3\nsdiv w9, w13, w8\nmov v2.b[12], w12\nsdiv w16, w16, w8\nmov v2.b[13], w9\nsdiv w10, w10, w8\nmov v0.b[13], w16\nsdiv w4, w4, w8\nmov v2.b[14], w10\nsdiv w5, w5, w8\nmov v0.b[14], w4\nsdiv w8, w11, w8\nmov v0.b[15], w5\nmov v2.b[15], w8\nmov v1.16b, v2.16b\nldp x26, x25, [sp], #64             // 16-byte Folded Reload\nret",
  "giasm": "sub sp, sp, #112\nstp x29, x30, [sp, #16]             // 16-byte Folded Spill\nstp x28, x27, [sp, #32]             // 16-byte Folded Spill\nstp x26, x25, [sp, #48]             // 16-byte Folded Spill\nstp x24, x23, [sp, #64]             // 16-byte Folded Spill\nstp x22, x21, [sp, #80]             // 16-byte Folded Spill\nstp x20, x19, [sp, #96]             // 16-byte Folded Spill\ndup v2.16b, w0\nsmov w8, v0.b[0]\nsmov w28, v2.b[0]\nsmov w29, v2.b[1]\nsmov w25, v2.b[2]\nsmov w26, v2.b[3]\nsmov w27, v2.b[4]\nsmov w10, v2.b[5]\nsmov w22, v2.b[6]\nsmov w23, v2.b[7]\nsmov w9, v2.b[8]\nsmov w21, v2.b[9]\nsmov w20, v2.b[10]\nsmov w19, v2.b[11]\nsdiv w24, w8, w28\nsmov w8, v0.b[1]\nsmov w7, v2.b[12]\nsmov w6, v2.b[13]\nsmov w3, v2.b[14]\nsmov w13, v2.b[15]\nsdiv w5, w8, w29\nsmov w8, v0.b[2]\nsdiv w4, w8, w25\nsmov w8, v0.b[3]\nsdiv w2, w8, w26\nsmov w8, v0.b[4]\nsdiv w1, w8, w27\nsmov w8, v0.b[5]\nsdiv w0, w8, w10\nsmov w8, v0.b[6]\nsdiv w18, w8, w22\nsmov w8, v0.b[7]\nsdiv w17, w8, w23\nsmov w8, v0.b[8]\nsdiv w16, w8, w9\nsmov w8, v0.b[9]\nsdiv w15, w8, w21\nsmov w8, v0.b[10]\nsdiv w14, w8, w20\nsmov w8, v0.b[11]\nsdiv w12, w8, w19\nsmov w8, v0.b[12]\nsdiv w11, w8, w7\nsmov w8, v0.b[13]\nsdiv w8, w8, w6\nstr w8, [sp, #4]                    // 4-byte Folded Spill\nsmov w8, v0.b[14]\nsdiv w8, w8, w3\nstr w8, [sp, #8]                    // 4-byte Folded Spill\nsmov w8, v0.b[15]\nfmov s0, w24\nmov v0.b[1], w5\nsdiv w8, w8, w13\nmov v0.b[2], w4\nmov v0.b[3], w2\nstr w8, [sp, #12]                   // 4-byte Folded Spill\nsmov w8, v1.b[0]\nmov v0.b[4], w1\nsdiv w8, w8, w28\nsmov w28, v1.b[1]\nmov v0.b[5], w0\nsmov w0, v1.b[12]\nmov v0.b[6], w18\nsdiv w30, w28, w29\nsmov w28, v1.b[2]\nfmov s2, w8\nmov v0.b[7], w17\nsmov w17, v1.b[13]\nmov v0.b[8], w16\nsdiv w29, w28, w25\nsmov w25, v1.b[3]\nmov v2.b[1], w30\nmov v0.b[9], w15\nmov v0.b[10], w14\nsdiv w28, w25, w26\nsmov w25, v1.b[4]\nmov v2.b[2], w29\nldp x29, x30, [sp, #16]             // 16-byte Folded Reload\nmov v0.b[11], w12\nmov v0.b[12], w11\nsdiv w27, w25, w27\nsmov w25, v1.b[5]\nmov v2.b[3], w28\nsdiv w26, w25, w10\nsmov w10, v1.b[6]\nmov v2.b[4], w27\nldp x28, x27, [sp, #32]             // 16-byte Folded Reload\nsdiv w25, w10, w22\nsmov w10, v1.b[7]\nmov v2.b[5], w26\nsdiv w23, w10, w23\nsmov w10, v1.b[8]\nmov v2.b[6], w25\nldp x26, x25, [sp, #48]             // 16-byte Folded Reload\nsdiv w22, w10, w9\nsmov w9, v1.b[9]\nmov v2.b[7], w23\nsmov w10, v1.b[11]\nldp x24, x23, [sp, #64]             // 16-byte Folded Reload\nsdiv w8, w9, w21\nsmov w9, v1.b[10]\nmov v2.b[8], w22\nldp x22, x21, [sp, #80]             // 16-byte Folded Reload\nsdiv w9, w9, w20\nmov v2.b[9], w8\nsmov w8, v1.b[14]\nsdiv w10, w10, w19\nmov v2.b[10], w9\nsmov w9, v1.b[15]\nldp x20, x19, [sp, #96]             // 16-byte Folded Reload\nsdiv w18, w0, w7\nmov v2.b[11], w10\nldp w11, w10, [sp, #4]              // 8-byte Folded Reload\nmov v0.b[13], w11\nsdiv w16, w17, w6\nmov v2.b[12], w18\nmov v0.b[14], w10\nsdiv w8, w8, w3\nmov v2.b[13], w16\nsdiv w9, w9, w13\nmov v2.b[14], w8\nldr w8, [sp, #12]                   // 4-byte Folded Reload\nmov v0.b[15], w8\nmov v2.b[15], w9\nmov v1.16b, v2.16b\nadd sp, sp, #112\nret",
  "ll": "define <32 x i8> @test(<32 x i8> %a, i8 %bs) {\n  %i = insertelement <32 x i8> poison, i8 %bs, i64 0\n  %b = shufflevector <32 x i8> %i, <32 x i8> poison, <32 x i32> zeroinitializer\n  %r = sdiv <32 x i8> %a, %b\n  ret <32 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <32 x i8> poison, i8 %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <32 x i8> %i, <32 x i8> poison, <32 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = sdiv <32 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i8> %r"
 },
 {
  "instr": "sdiv",
  "ty": "<32 x i8>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 12,
  "lat": 4,
  "sizelat": 4,
  "size": 226,
  "gisize": 105,
  "extrasize": 0,
  "asm": "smov w9, v0.b[1]\nsmov w10, v0.b[0]\nmov w8, #9363                       // =0x2493\nmovk w8, #37449, lsl #16\nsmov w11, v0.b[2]\nsmov w12, v0.b[3]\nsmov w13, v0.b[4]\nsmov w14, v0.b[5]\nsmov w15, v0.b[6]\nsmov w1, v1.b[0]\nsmov w0, v1.b[1]\nsmov w4, v1.b[2]\nsmull x16, w9, w8\nsmull x18, w10, w8\nsmull x17, w11, w8\nlsr x16, x16, #32\nsmull x2, w12, w8\nlsr x18, x18, #32\nsmull x3, w13, w8\nsmull x5, w14, w8\nadd w16, w16, w9\nlsr x17, x17, #32\nsmull x9, w15, w8\nadd w10, w18, w10\nlsr x2, x2, #32\nsmull x18, w1, w8\nasr w7, w10, #2\nlsr x3, x3, #32\nlsr x5, x5, #32\nadd w11, w17, w11\nsmull x17, w0, w8\nlsr x6, x9, #32\nadd w10, w7, w10, lsr #31\nadd w2, w2, w12\nadd w9, w3, w13\nadd w13, w5, w14\nlsr x14, x18, #32\nadd w12, w6, w15\nasr w15, w16, #2\nfmov s2, w10\nlsr x17, x17, #32\nadd w14, w14, w1\nsmull x1, w4, w8\nadd w15, w15, w16, lsr #31\nsmov w16, v1.b[3]\nasr w10, w14, #2\nadd w17, w17, w0\nasr w0, w11, #2\nsmov w18, v0.b[7]\nmov v2.b[1], w15\nasr w15, w17, #2\nadd w10, w10, w14, lsr #31\nadd w11, w0, w11, lsr #31\nlsr x1, x1, #32\nsmov w0, v1.b[4]\nadd w15, w15, w17, lsr #31\nsmull x17, w16, w8\nfmov s3, w10\nasr w10, w2, #2\nsmull x3, w18, w8\nadd w1, w1, w4\nmov v2.b[2], w11\nsmov w14, v0.b[8]\nsmov w11, v0.b[9]\nlsr x17, x17, #32\nadd w10, w10, w2, lsr #31\nmov v3.b[1], w15\nasr w15, w1, #2\nlsr x3, x3, #32\nsmull x2, w0, w8\nadd w16, w17, w16\nasr w17, w9, #2\nadd w15, w15, w1, lsr #31\nmov v2.b[3], w10\nsmov w1, v1.b[5]\nadd w18, w3, w18\nasr w3, w16, #2\nadd w17, w17, w9, lsr #31\nmov v3.b[2], w15\nlsr x15, x2, #32\nasr w2, w13, #2\nadd w16, w3, w16, lsr #31\nsmov w3, v1.b[6]\nsmov w10, v0.b[10]\nmov v2.b[4], w17\nsmull x17, w1, w8\nadd w15, w15, w0\nadd w13, w2, w13, lsr #31\nasr w2, w12, #2\nsmull x0, w14, w8\nmov v3.b[3], w16\nasr w16, w15, #2\nsmov w9, v0.b[11]\nlsr x17, x17, #32\nadd w12, w2, w12, lsr #31\nsmull x2, w3, w8\nadd w15, w16, w15, lsr #31\nmov v2.b[5], w13\nsmov w13, v1.b[7]\nadd w17, w17, w1\nlsr x0, x0, #32\nsmull x16, w11, w8\nasr w1, w17, #2\nmov v3.b[4], w15\nlsr x15, x2, #32\nadd w14, w0, w14\nasr w0, w18, #2\nsmov w2, v1.b[8]\nadd w17, w1, w17, lsr #31\nmov v2.b[6], w12\nsmull x12, w13, w8\nadd w15, w15, w3\nadd w18, w0, w18, lsr #31\nasr w0, w14, #2\nmov v3.b[5], w17\nasr w17, w15, #2\nsmull x1, w10, w8\nlsr x12, x12, #32\nsmull x3, w2, w8\nlsr x16, x16, #32\nadd w15, w17, w15, lsr #31\nmov v2.b[7], w18\nsmov w17, v1.b[9]\nadd w12, w12, w13\nadd w13, w0, w14, lsr #31\nlsr x18, x1, #32\nmov v3.b[6], w15\nasr w14, w12, #2\nlsr x15, x3, #32\nadd w11, w16, w11\nsmov w0, v1.b[10]\nadd w10, w18, w10\nadd w12, w14, w12, lsr #31\nmov v2.b[8], w13\nsmull x13, w17, w8\nasr w16, w11, #2\nadd w15, w15, w2\nsmov w14, v0.b[12]\nmov v3.b[7], w12\nasr w12, w15, #2\nsmull x1, w9, w8\nadd w11, w16, w11, lsr #31\nlsr x13, x13, #32\nasr w16, w10, #2\nsmull x18, w0, w8\nadd w12, w12, w15, lsr #31\nsmov w15, v1.b[11]\nadd w16, w16, w10, lsr #31\nadd w10, w13, w17\nmov v2.b[9], w11\nmov v3.b[8], w12\nasr w12, w10, #2\nsmull x13, w14, w8\nlsr x18, x18, #32\nsmov w3, v1.b[12]\nsmov w17, v0.b[13]\nadd w12, w12, w10, lsr #31\nsmull x2, w15, w8\nsmov w11, v0.b[14]\nadd w18, w18, w0\nlsr x0, x1, #32\nmov v2.b[10], w16\nmov v3.b[9], w12\nasr w12, w18, #2\nlsr x13, x13, #32\nlsr x16, x2, #32\nadd w9, w0, w9\nsmov w0, v1.b[13]\nadd w12, w12, w18, lsr #31\nsmull x18, w3, w8\nasr w1, w9, #2\nadd w13, w13, w14\nadd w14, w16, w15\nsmull x15, w17, w8\nmov v3.b[10], w12\nasr w12, w14, #2\nadd w9, w1, w9, lsr #31\nlsr x18, x18, #32\nsmov w1, v1.b[14]\nasr w16, w13, #2\nadd w12, w12, w14, lsr #31\nsmull x14, w0, w8\nmov v2.b[11], w9\nadd w9, w18, w3\nlsr x15, x15, #32\nadd w13, w16, w13, lsr #31\nmov v3.b[11], w12\nasr w12, w9, #2\nsmull x16, w11, w8\nlsr x14, x14, #32\nsmov w10, v0.b[15]\nadd w15, w15, w17\nadd w9, w12, w9, lsr #31\nsmull x12, w1, w8\nsmov w17, v1.b[15]\nmov v2.b[12], w13\nadd w13, w14, w0\nasr w14, w15, #2\nlsr x16, x16, #32\nmov v3.b[12], w9\nasr w9, w13, #2\nlsr x12, x12, #32\nadd w14, w14, w15, lsr #31\nsmull x15, w10, w8\nadd w11, w16, w11\nadd w9, w9, w13, lsr #31\nsmull x8, w17, w8\nadd w12, w12, w1\nasr w13, w11, #2\nmov v2.b[13], w14\nmov v3.b[13], w9\nasr w9, w12, #2\nadd w11, w13, w11, lsr #31\nlsr x13, x15, #32\nlsr x8, x8, #32\nadd w9, w9, w12, lsr #31\nadd w10, w13, w10\nadd w8, w8, w17\nmov v2.b[14], w11\nasr w11, w10, #2\nmov v3.b[14], w9\nasr w9, w8, #2\nadd w10, w11, w10, lsr #31\nadd w8, w9, w8, lsr #31\nmov v2.b[15], w10\nmov v3.b[15], w8\nmov v0.16b, v2.16b\nmov v1.16b, v3.16b\nret",
  "giasm": "stp x26, x25, [sp, #-64]!           // 16-byte Folded Spill\nstp x24, x23, [sp, #16]             // 16-byte Folded Spill\nstp x22, x21, [sp, #32]             // 16-byte Folded Spill\nstp x20, x19, [sp, #48]             // 16-byte Folded Spill\nsmov w9, v0.b[0]\nmov w8, #7                          // =0x7\nsmov w5, v1.b[0]\nsmov w26, v1.b[9]\nsdiv w25, w9, w8\nsmov w9, v0.b[1]\nsdiv w4, w9, w8\nsmov w9, v0.b[2]\nsdiv w3, w9, w8\nsmov w9, v0.b[3]\nsdiv w2, w9, w8\nsmov w9, v0.b[4]\nsdiv w1, w9, w8\nsmov w9, v0.b[5]\nsdiv w0, w9, w8\nsmov w9, v0.b[6]\nsdiv w18, w9, w8\nsmov w9, v0.b[7]\nsdiv w17, w9, w8\nsmov w9, v0.b[8]\nsdiv w16, w9, w8\nsmov w9, v0.b[9]\nsdiv w15, w9, w8\nsmov w9, v0.b[10]\nsdiv w14, w9, w8\nsmov w9, v0.b[11]\nsdiv w24, w5, w8\nsmov w5, v1.b[1]\nsdiv w13, w9, w8\nsmov w9, v0.b[12]\nfmov s2, w24\nsdiv w23, w5, w8\nsmov w5, v1.b[2]\nsdiv w12, w9, w8\nsmov w9, v0.b[13]\nmov v2.b[1], w23\nsdiv w22, w5, w8\nsmov w5, v1.b[3]\nsdiv w11, w9, w8\nsmov w9, v0.b[14]\nmov v2.b[2], w22\nsdiv w21, w5, w8\nsmov w5, v1.b[4]\nsdiv w10, w9, w8\nsmov w9, v0.b[15]\nfmov s0, w25\nmov v2.b[3], w21\nldp x22, x21, [sp, #32]             // 16-byte Folded Reload\nmov v0.b[1], w4\nsmov w4, v1.b[10]\nmov v0.b[2], w3\nsdiv w20, w5, w8\nsmov w5, v1.b[5]\nmov v0.b[3], w2\nsmov w2, v1.b[11]\nmov v0.b[4], w1\nsdiv w19, w5, w8\nsmov w5, v1.b[6]\nmov v2.b[4], w20\nmov v0.b[5], w0\nsmov w0, v1.b[12]\nmov v0.b[6], w18\nsdiv w7, w5, w8\nsmov w5, v1.b[7]\nmov v2.b[5], w19\nldp x20, x19, [sp, #48]             // 16-byte Folded Reload\nmov v0.b[7], w17\nsmov w17, v1.b[13]\nmov v0.b[8], w16\nsdiv w6, w5, w8\nsmov w5, v1.b[8]\nmov v2.b[6], w7\nmov v0.b[9], w15\nsmov w15, v1.b[14]\nmov v0.b[10], w14\nsdiv w5, w5, w8\nmov v2.b[7], w6\nmov v0.b[11], w13\nsmov w13, v1.b[15]\nmov v0.b[12], w12\nsdiv w24, w26, w8\nmov v2.b[8], w5\nmov v0.b[13], w11\nmov v0.b[14], w10\nsdiv w3, w4, w8\nmov v2.b[9], w24\nldp x24, x23, [sp, #16]             // 16-byte Folded Reload\nsdiv w1, w2, w8\nmov v2.b[10], w3\nsdiv w18, w0, w8\nmov v2.b[11], w1\nsdiv w16, w17, w8\nmov v2.b[12], w18\nsdiv w14, w15, w8\nmov v2.b[13], w16\nsdiv w9, w9, w8\nmov v2.b[14], w14\nsdiv w8, w13, w8\nmov v0.b[15], w9\nmov v2.b[15], w8\nmov v1.16b, v2.16b\nldp x26, x25, [sp], #64             // 16-byte Folded Reload\nret",
  "ll": "define <32 x i8> @test(<32 x i8> %a) {\n  %r = sdiv <32 x i8> %a, splat (i8 7)\n  ret <32 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = sdiv <32 x i8> %a, splat (i8 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i8> %r"
 },
 {
  "instr": "sdiv",
  "ty": "<4 x i16>",
  "variant": "binop",
  "codesize": 4,
  "thru": 48,
  "lat": 4,
  "sizelat": 4,
  "size": 16,
  "gisize": 16,
  "extrasize": 0,
  "asm": "smov w8, v1.h[1]\nsmov w9, v0.h[1]\nsmov w10, v0.h[0]\nsmov w11, v0.h[2]\nsmov w12, v0.h[3]\nsdiv w8, w9, w8\nsmov w9, v1.h[0]\nsdiv w9, w10, w9\nsmov w10, v1.h[2]\nsdiv w10, w11, w10\nsmov w11, v1.h[3]\nfmov s0, w9\nmov v0.h[1], w8\nsdiv w8, w12, w11\nmov v0.h[2], w10\nmov v0.h[3], w8\nret",
  "giasm": "smov w8, v0.h[0]\nsmov w9, v1.h[0]\nsmov w10, v1.h[1]\nsmov w11, v1.h[2]\nsmov w12, v1.h[3]\nsdiv w8, w8, w9\nsmov w9, v0.h[1]\nsdiv w9, w9, w10\nsmov w10, v0.h[2]\nsdiv w10, w10, w11\nsmov w11, v0.h[3]\nfmov s0, w8\nmov v0.h[1], w9\nsdiv w8, w11, w12\nmov v0.h[2], w10\nmov v0.h[3], w8\nret",
  "ll": "define <4 x i16> @test(<4 x i16> %a, <4 x i16> %b) {\n  %r = sdiv <4 x i16> %a, %b\n  ret <4 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = sdiv <4 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i16> %r"
 },
 {
  "instr": "sdiv",
  "ty": "<4 x i16>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 10,
  "lat": 4,
  "sizelat": 4,
  "size": 7,
  "gisize": 14,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr d1, [x8, :lo12:.LCPI0_0]\nsmull v0.4s, v0.4h, v1.4h\nmovi d1, #0x00ffff0000ffff\nshrn v0.4h, v0.4s, #16\nsshl v0.4h, v0.4h, v1.4h\nusra v0.4h, v0.4h, #15\nret",
  "giasm": "smov w8, v0.h[0]\nmov w9, #7                          // =0x7\nsmov w10, v0.h[1]\nmov w11, #6                         // =0x6\nsmov w12, v0.h[2]\nsdiv w8, w8, w9\nsdiv w10, w10, w11\nsdiv w9, w12, w9\nsmov w12, v0.h[3]\nfmov s0, w8\nmov v0.h[1], w10\nsdiv w8, w12, w11\nmov v0.h[2], w9\nmov v0.h[3], w8\nret",
  "ll": "define <4 x i16> @test(<4 x i16> %a) {\n  %r = sdiv <4 x i16> %a, <i16 7, i16 6, i16 7, i16 6>\n  ret <4 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = sdiv <4 x i16> %a, <i16 7, i16 6, i16 7, i16 6>\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i16> %r"
 },
 {
  "instr": "sdiv",
  "ty": "<4 x i16>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 51,
  "lat": 7,
  "sizelat": 7,
  "size": 13,
  "gisize": 17,
  "extrasize": 0,
  "asm": "smov w10, v0.h[0]\nsxth w9, w0\nsmov w8, v0.h[1]\nsmov w11, v0.h[2]\nsmov w12, v0.h[3]\nsdiv w10, w10, w9\nsdiv w8, w8, w9\nfmov s0, w10\nsdiv w11, w11, w9\nmov v0.h[1], w8\nsdiv w8, w12, w9\nmov v0.h[2], w11\nmov v0.h[3], w8\nret",
  "giasm": "dup v1.4h, w0\nsmov w8, v0.h[0]\nsmov w9, v1.h[0]\nsmov w10, v1.h[1]\nsmov w11, v1.h[2]\nsmov w12, v1.h[3]\nsdiv w8, w8, w9\nsmov w9, v0.h[1]\nsdiv w9, w9, w10\nsmov w10, v0.h[2]\nsdiv w10, w10, w11\nsmov w11, v0.h[3]\nfmov s0, w8\nmov v0.h[1], w9\nsdiv w8, w11, w12\nmov v0.h[2], w10\nmov v0.h[3], w8\nret",
  "ll": "define <4 x i16> @test(<4 x i16> %a, i16 %bs) {\n  %i = insertelement <4 x i16> poison, i16 %bs, i64 0\n  %b = shufflevector <4 x i16> %i, <4 x i16> poison, <4 x i32> zeroinitializer\n  %r = sdiv <4 x i16> %a, %b\n  ret <4 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <4 x i16> poison, i16 %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <4 x i16> %i, <4 x i16> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = sdiv <4 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i16> %r"
 },
 {
  "instr": "sdiv",
  "ty": "<4 x i16>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 6,
  "lat": 4,
  "sizelat": 4,
  "size": 6,
  "gisize": 13,
  "extrasize": 0,
  "asm": "mov w8, #18725                      // =0x4925\ndup v1.4h, w8\nsmull v0.4s, v0.4h, v1.4h\nsshr v0.4s, v0.4s, #17\nxtn v0.4h, v0.4s\nusra v0.4h, v0.4h, #15\nret",
  "giasm": "smov w9, v0.h[0]\nmov w8, #7                          // =0x7\nsmov w10, v0.h[1]\nsmov w11, v0.h[2]\nsmov w12, v0.h[3]\nsdiv w9, w9, w8\nsdiv w10, w10, w8\nfmov s0, w9\nsdiv w11, w11, w8\nmov v0.h[1], w10\nsdiv w8, w12, w8\nmov v0.h[2], w11\nmov v0.h[3], w8\nret",
  "ll": "define <4 x i16> @test(<4 x i16> %a) {\n  %r = sdiv <4 x i16> %a, splat (i16 7)\n  ret <4 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = sdiv <4 x i16> %a, splat (i16 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i16> %r"
 },
 {
  "instr": "sdiv",
  "ty": "<8 x i16>",
  "variant": "binop",
  "codesize": 4,
  "thru": 88,
  "lat": 4,
  "sizelat": 4,
  "size": 32,
  "gisize": 32,
  "extrasize": 0,
  "asm": "smov w8, v1.h[1]\nsmov w9, v0.h[1]\nsmov w10, v0.h[0]\nsmov w11, v0.h[2]\nsmov w12, v0.h[3]\nsmov w13, v0.h[4]\nsmov w14, v0.h[5]\nsdiv w8, w9, w8\nsmov w9, v1.h[0]\nsdiv w9, w10, w9\nsmov w10, v1.h[2]\nsdiv w10, w11, w10\nsmov w11, v1.h[3]\nfmov s2, w9\nsmov w9, v1.h[6]\nmov v2.h[1], w8\nsdiv w11, w12, w11\nsmov w12, v1.h[4]\nmov v2.h[2], w10\nsmov w10, v0.h[6]\nsdiv w12, w13, w12\nsmov w13, v1.h[5]\nmov v2.h[3], w11\nsmov w11, v0.h[7]\nsdiv w8, w14, w13\nmov v2.h[4], w12\nsdiv w9, w10, w9\nsmov w10, v1.h[7]\nmov v2.h[5], w8\nsdiv w8, w11, w10\nmov v2.h[6], w9\nmov v2.h[7], w8\nmov v0.16b, v2.16b\nret",
  "giasm": "smov w8, v0.h[0]\nsmov w9, v1.h[0]\nsmov w10, v1.h[1]\nsmov w11, v1.h[2]\nsmov w12, v1.h[3]\nsmov w13, v1.h[4]\nsmov w14, v1.h[5]\nsdiv w8, w8, w9\nsmov w9, v0.h[1]\nsdiv w9, w9, w10\nsmov w10, v0.h[2]\nfmov s2, w8\nsdiv w10, w10, w11\nsmov w11, v0.h[3]\nmov v2.h[1], w9\nsmov w9, v0.h[6]\nsdiv w11, w11, w12\nsmov w12, v0.h[4]\nmov v2.h[2], w10\nsmov w10, v0.h[7]\nsdiv w12, w12, w13\nsmov w13, v0.h[5]\nmov v2.h[3], w11\nsmov w11, v1.h[7]\nsdiv w8, w13, w14\nsmov w13, v1.h[6]\nmov v2.h[4], w12\nsdiv w9, w9, w13\nmov v2.h[5], w8\nsdiv w8, w10, w11\nmov v2.h[6], w9\nmov v2.h[7], w8\nmov v0.16b, v2.16b\nret",
  "ll": "define <8 x i16> @test(<8 x i16> %a, <8 x i16> %b) {\n  %r = sdiv <8 x i16> %a, %b\n  ret <8 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = sdiv <8 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i16> %r"
 },
 {
  "instr": "sdiv",
  "ty": "<8 x i16>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 14,
  "lat": 4,
  "sizelat": 4,
  "size": 8,
  "gisize": 26,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nsmull2 v2.4s, v0.8h, v1.8h\nsmull v0.4s, v0.4h, v1.4h\nmovi v1.2d, #0x00ffff0000ffff\nuzp2 v0.8h, v0.8h, v2.8h\nsshl v0.8h, v0.8h, v1.8h\nusra v0.8h, v0.8h, #15\nret",
  "giasm": "smov w8, v0.h[0]\nmov w9, #7                          // =0x7\nsmov w10, v0.h[1]\nmov w11, #6                         // =0x6\nsmov w12, v0.h[2]\nsmov w13, v0.h[3]\nsmov w14, v0.h[4]\nsmov w15, v0.h[5]\nsdiv w8, w8, w9\nsdiv w10, w10, w11\nfmov s1, w8\nsdiv w12, w12, w9\nmov v1.h[1], w10\nsmov w10, v0.h[6]\nsdiv w13, w13, w11\nmov v1.h[2], w12\nsdiv w14, w14, w9\nmov v1.h[3], w13\nsdiv w8, w15, w11\nmov v1.h[4], w14\nsdiv w9, w10, w9\nsmov w10, v0.h[7]\nmov v1.h[5], w8\nsdiv w8, w10, w11\nmov v1.h[6], w9\nmov v1.h[7], w8\nmov v0.16b, v1.16b\nret",
  "ll": "define <8 x i16> @test(<8 x i16> %a) {\n  %r = sdiv <8 x i16> %a, <i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6>\n  ret <8 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = sdiv <8 x i16> %a, <i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6>\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i16> %r"
 },
 {
  "instr": "sdiv",
  "ty": "<8 x i16>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 91,
  "lat": 7,
  "sizelat": 7,
  "size": 25,
  "gisize": 33,
  "extrasize": 0,
  "asm": "smov w10, v0.h[0]\nsxth w9, w0\nsmov w8, v0.h[1]\nsmov w11, v0.h[2]\nsmov w12, v0.h[3]\nsmov w13, v0.h[4]\nsmov w14, v0.h[5]\nsdiv w10, w10, w9\nsdiv w8, w8, w9\nfmov s1, w10\nsmov w10, v0.h[6]\nsdiv w11, w11, w9\nmov v1.h[1], w8\nsdiv w12, w12, w9\nmov v1.h[2], w11\nsmov w11, v0.h[7]\nsdiv w13, w13, w9\nmov v1.h[3], w12\nsdiv w8, w14, w9\nmov v1.h[4], w13\nsdiv w10, w10, w9\nmov v1.h[5], w8\nsdiv w8, w11, w9\nmov v1.h[6], w10\nmov v1.h[7], w8\nmov v0.16b, v1.16b\nret",
  "giasm": "dup v2.8h, w0\nsmov w8, v0.h[0]\nsmov w9, v2.h[0]\nsmov w10, v2.h[1]\nsmov w11, v2.h[2]\nsmov w12, v2.h[3]\nsmov w13, v2.h[4]\nsmov w14, v2.h[5]\nsdiv w8, w8, w9\nsmov w9, v0.h[1]\nsdiv w9, w9, w10\nsmov w10, v0.h[2]\nfmov s1, w8\nsdiv w10, w10, w11\nsmov w11, v0.h[3]\nmov v1.h[1], w9\nsmov w9, v0.h[6]\nsdiv w11, w11, w12\nsmov w12, v0.h[4]\nmov v1.h[2], w10\nsmov w10, v0.h[7]\nsdiv w12, w12, w13\nsmov w13, v0.h[5]\nmov v1.h[3], w11\nsmov w11, v2.h[7]\nsdiv w8, w13, w14\nsmov w13, v2.h[6]\nmov v1.h[4], w12\nsdiv w9, w9, w13\nmov v1.h[5], w8\nsdiv w8, w10, w11\nmov v1.h[6], w9\nmov v1.h[7], w8\nmov v0.16b, v1.16b\nret",
  "ll": "define <8 x i16> @test(<8 x i16> %a, i16 %bs) {\n  %i = insertelement <8 x i16> poison, i16 %bs, i64 0\n  %b = shufflevector <8 x i16> %i, <8 x i16> poison, <8 x i32> zeroinitializer\n  %r = sdiv <8 x i16> %a, %b\n  ret <8 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <8 x i16> poison, i16 %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <8 x i16> %i, <8 x i16> poison, <8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = sdiv <8 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i16> %r"
 },
 {
  "instr": "sdiv",
  "ty": "<8 x i16>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 6,
  "lat": 4,
  "sizelat": 4,
  "size": 7,
  "gisize": 25,
  "extrasize": 0,
  "asm": "mov w8, #18725                      // =0x4925\ndup v1.8h, w8\nsmull2 v2.4s, v0.8h, v1.8h\nsmull v0.4s, v0.4h, v1.4h\nuzp2 v0.8h, v0.8h, v2.8h\nsshr v0.8h, v0.8h, #1\nusra v0.8h, v0.8h, #15\nret",
  "giasm": "smov w9, v0.h[0]\nmov w8, #7                          // =0x7\nsmov w10, v0.h[1]\nsmov w11, v0.h[2]\nsmov w12, v0.h[3]\nsmov w13, v0.h[4]\nsmov w14, v0.h[5]\nsdiv w9, w9, w8\nsdiv w10, w10, w8\nfmov s1, w9\nsdiv w11, w11, w8\nmov v1.h[1], w10\nsmov w10, v0.h[6]\nsdiv w12, w12, w8\nmov v1.h[2], w11\nsmov w11, v0.h[7]\nsdiv w13, w13, w8\nmov v1.h[3], w12\nsdiv w9, w14, w8\nmov v1.h[4], w13\nsdiv w10, w10, w8\nmov v1.h[5], w9\nsdiv w8, w11, w8\nmov v1.h[6], w10\nmov v1.h[7], w8\nmov v0.16b, v1.16b\nret",
  "ll": "define <8 x i16> @test(<8 x i16> %a) {\n  %r = sdiv <8 x i16> %a, splat (i16 7)\n  ret <8 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = sdiv <8 x i16> %a, splat (i16 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i16> %r"
 },
 {
  "instr": "sdiv",
  "ty": "<16 x i16>",
  "variant": "binop",
  "codesize": 4,
  "thru": 168,
  "lat": 4,
  "sizelat": 4,
  "size": 64,
  "gisize": 64,
  "extrasize": 0,
  "asm": "smov w8, v2.h[1]\nsmov w9, v0.h[1]\nsmov w10, v0.h[0]\nsmov w11, v0.h[2]\nsmov w12, v0.h[3]\nsmov w13, v0.h[4]\nsmov w14, v0.h[5]\nsmov w15, v0.h[6]\nsmov w16, v0.h[7]\nsmov w17, v1.h[1]\nsmov w18, v1.h[0]\nsmov w0, v1.h[2]\nsdiv w8, w9, w8\nsmov w9, v2.h[0]\nsmov w1, v1.h[3]\nsmov w2, v1.h[4]\nsmov w3, v1.h[5]\nsdiv w9, w10, w9\nsmov w10, v2.h[2]\nsdiv w10, w11, w10\nsmov w11, v2.h[3]\nfmov s0, w9\nsmov w9, v3.h[6]\nmov v0.h[1], w8\nsdiv w11, w12, w11\nsmov w12, v2.h[4]\nmov v0.h[2], w10\nsmov w10, v1.h[6]\nsdiv w12, w13, w12\nsmov w13, v2.h[5]\nmov v0.h[3], w11\nsmov w11, v1.h[7]\nsdiv w13, w14, w13\nsmov w14, v2.h[6]\nmov v0.h[4], w12\nsdiv w14, w15, w14\nsmov w15, v2.h[7]\nmov v0.h[5], w13\nsdiv w15, w16, w15\nsmov w16, v3.h[1]\nmov v0.h[6], w14\nsdiv w16, w17, w16\nsmov w17, v3.h[0]\nmov v0.h[7], w15\nsdiv w17, w18, w17\nsmov w18, v3.h[2]\nsdiv w18, w0, w18\nsmov w0, v3.h[3]\nfmov s2, w17\nmov v2.h[1], w16\nsdiv w0, w1, w0\nsmov w1, v3.h[4]\nmov v2.h[2], w18\nsdiv w1, w2, w1\nsmov w2, v3.h[5]\nmov v2.h[3], w0\nsdiv w8, w3, w2\nmov v2.h[4], w1\nsdiv w9, w10, w9\nsmov w10, v3.h[7]\nmov v2.h[5], w8\nsdiv w8, w11, w10\nmov v2.h[6], w9\nmov v2.h[7], w8\nmov v1.16b, v2.16b\nret",
  "giasm": "smov w8, v0.h[0]\nsmov w9, v2.h[0]\nsmov w16, v2.h[7]\nsmov w17, v3.h[0]\nsmov w18, v3.h[1]\nsmov w0, v3.h[2]\nsmov w1, v3.h[3]\nsmov w2, v3.h[4]\nsmov w3, v3.h[5]\nsdiv w14, w8, w9\nsmov w8, v0.h[1]\nsmov w9, v2.h[1]\nsdiv w15, w8, w9\nsmov w8, v0.h[2]\nsmov w9, v2.h[2]\nsdiv w13, w8, w9\nsmov w8, v0.h[3]\nsmov w9, v2.h[3]\nsdiv w12, w8, w9\nsmov w8, v0.h[4]\nsmov w9, v2.h[4]\nsdiv w11, w8, w9\nsmov w8, v0.h[5]\nsmov w9, v2.h[5]\nsdiv w10, w8, w9\nsmov w8, v0.h[6]\nsmov w9, v2.h[6]\nsdiv w9, w8, w9\nsmov w8, v0.h[7]\nfmov s0, w14\nmov v0.h[1], w15\nsmov w15, v1.h[6]\nmov v0.h[2], w13\nsdiv w8, w8, w16\nsmov w16, v1.h[0]\nmov v0.h[3], w12\nsmov w12, v1.h[7]\nmov v0.h[4], w11\nsdiv w16, w16, w17\nsmov w17, v1.h[1]\nmov v0.h[5], w10\nmov v0.h[6], w9\nsdiv w17, w17, w18\nsmov w18, v1.h[2]\nfmov s2, w16\nsmov w16, v3.h[6]\nmov v0.h[7], w8\nsdiv w18, w18, w0\nsmov w0, v1.h[3]\nmov v2.h[1], w17\nsdiv w0, w0, w1\nsmov w1, v1.h[4]\nmov v2.h[2], w18\nsdiv w1, w1, w2\nsmov w2, v1.h[5]\nmov v2.h[3], w0\nsdiv w14, w2, w3\nmov v2.h[4], w1\nsdiv w13, w15, w16\nsmov w15, v3.h[7]\nmov v2.h[5], w14\nsdiv w10, w12, w15\nmov v2.h[6], w13\nmov v2.h[7], w10\nmov v1.16b, v2.16b\nret",
  "ll": "define <16 x i16> @test(<16 x i16> %a, <16 x i16> %b) {\n  %r = sdiv <16 x i16> %a, %b\n  ret <16 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = sdiv <16 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i16> %r"
 },
 {
  "instr": "sdiv",
  "ty": "<16 x i16>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 22,
  "lat": 4,
  "sizelat": 4,
  "size": 108,
  "gisize": 50,
  "extrasize": 0,
  "asm": "smov w10, v0.h[0]\nsmov w11, v0.h[2]\nmov w9, #9363                       // =0x2493\nsmov w14, v1.h[0]\nsmov x13, v1.h[1]\nmovk w9, #37449, lsl #16\nmov w8, #43691                      // =0xaaab\nsmov w16, v1.h[2]\nsmov x12, v0.h[1]\nmovk w8, #10922, lsl #16\nsmov x1, v0.h[3]\nsmull x15, w10, w9\nsmull x17, w11, w9\nsmull x18, w14, w9\nsmull x13, w13, w8\nlsr x15, x15, #32\nlsr x17, x17, #32\nsmull x2, w16, w9\nadd w10, w15, w10\nlsr x15, x18, #32\nsmull x12, w12, w8\nadd w11, w17, w11\nlsr x17, x13, #63\nlsr x13, x13, #32\nadd w14, w15, w14\nasr w15, w10, #2\nlsr x18, x2, #32\nadd w13, w13, w17\nasr w17, w14, #2\nlsr x0, x12, #63\nadd w10, w15, w10, lsr #31\nlsr x12, x12, #32\nadd w16, w18, w16\nadd w14, w17, w14, lsr #31\nsmov w18, v0.h[4]\nsmov x15, v1.h[3]\nfmov s2, w10\nsmov w17, v1.h[4]\nadd w12, w12, w0\nfmov s3, w14\nasr w14, w11, #2\nsmull x0, w1, w8\nmov v2.h[1], w12\nsmull x12, w18, w9\nadd w11, w14, w11, lsr #31\nmov v3.h[1], w13\nasr w13, w16, #2\nsmull x15, w15, w8\nlsr x10, x0, #63\nlsr x0, x0, #32\nsmov x14, v0.h[5]\nadd w13, w13, w16, lsr #31\nsmull x16, w17, w9\nlsr x12, x12, #32\nmov v2.h[2], w11\nsmov w11, v0.h[6]\nadd w10, w0, w10\nmov v3.h[2], w13\nlsr x13, x15, #63\nlsr x15, x15, #32\nlsr x16, x16, #32\nadd w12, w12, w18\nsmov x18, v1.h[5]\nadd w13, w15, w13\nsmov w15, v1.h[6]\nsmull x14, w14, w8\nadd w16, w16, w17\nasr w17, w12, #2\nmov v2.h[3], w10\nmov v3.h[3], w13\nasr w13, w16, #2\nsmull x10, w11, w9\nadd w12, w17, w12, lsr #31\nsmull x17, w18, w8\nsmull x9, w15, w9\nadd w13, w13, w16, lsr #31\nsmov x16, v0.h[7]\nmov v2.h[4], w12\nlsr x10, x10, #32\nlsr x12, x14, #63\nmov v3.h[4], w13\nlsr x14, x14, #32\nlsr x13, x17, #63\nlsr x17, x17, #32\nlsr x9, x9, #32\nadd w10, w10, w11\nsmov x11, v1.h[7]\nadd w12, w14, w12\nsmull x14, w16, w8\nadd w13, w17, w13\nadd w9, w9, w15\nmov v2.h[5], w12\nasr w12, w10, #2\nmov v3.h[5], w13\nasr w13, w9, #2\nadd w10, w12, w10, lsr #31\nadd w9, w13, w9, lsr #31\nsmull x8, w11, w8\nmov v2.h[6], w10\nmov v3.h[6], w9\nlsr x10, x14, #63\nlsr x9, x14, #32\nlsr x11, x8, #63\nlsr x8, x8, #32\nadd w9, w9, w10\nadd w8, w8, w11\nmov v2.h[7], w9\nmov v3.h[7], w8\nmov v0.16b, v2.16b\nmov v1.16b, v3.16b\nret",
  "giasm": "smov w18, v1.h[0]\nsmov w8, v0.h[0]\nmov w9, #7                          // =0x7\nsmov w0, v1.h[1]\nsmov w11, v0.h[1]\nsmov w1, v1.h[2]\nsmov w12, v0.h[2]\nsmov w2, v1.h[3]\nsmov w13, v0.h[3]\nsmov w14, v0.h[4]\nsmov w15, v0.h[5]\nsmov w16, v0.h[6]\nsdiv w18, w18, w9\nsmov w17, v0.h[7]\nsmov w3, v1.h[4]\nsmov w4, v1.h[5]\nsdiv w10, w8, w9\nmov w8, #6                          // =0x6\nfmov s2, w18\nsdiv w0, w0, w8\nfmov s0, w10\nsdiv w11, w11, w8\nmov v2.h[1], w0\nsdiv w1, w1, w9\nmov v0.h[1], w11\nsmov w11, v1.h[6]\nsdiv w12, w12, w9\nmov v2.h[2], w1\nsdiv w2, w2, w8\nmov v0.h[2], w12\nsdiv w13, w13, w8\nmov v2.h[3], w2\nsdiv w3, w3, w9\nmov v0.h[3], w13\nsdiv w14, w14, w9\nmov v2.h[4], w3\nsdiv w10, w4, w8\nmov v0.h[4], w14\nsdiv w15, w15, w8\nmov v2.h[5], w10\nsdiv w16, w16, w9\nmov v0.h[5], w15\nsdiv w9, w11, w9\nsmov w11, v1.h[7]\nmov v0.h[6], w16\nsdiv w17, w17, w8\nmov v2.h[6], w9\nsdiv w8, w11, w8\nmov v0.h[7], w17\nmov v2.h[7], w8\nmov v1.16b, v2.16b\nret",
  "ll": "define <16 x i16> @test(<16 x i16> %a) {\n  %r = sdiv <16 x i16> %a, <i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6>\n  ret <16 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = sdiv <16 x i16> %a, <i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6>\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i16> %r"
 },
 {
  "instr": "sdiv",
  "ty": "<16 x i16>",
  "variant": "binopsplat",
  "codesize": 7,
  "thru": 172,
  "lat": 8,
  "sizelat": 8,
  "size": 49,
  "gisize": 57,
  "extrasize": 0,
  "asm": "smov w18, v1.h[0]\nsxth w8, w0\nsmov w10, v0.h[0]\nsmov w17, v1.h[1]\nsmov w9, v0.h[1]\nsmov w0, v1.h[2]\nsmov w11, v0.h[2]\nsmov w1, v1.h[3]\nsmov w12, v0.h[3]\nsmov w13, v0.h[4]\nsmov w14, v0.h[5]\nsmov w15, v0.h[6]\nsdiv w18, w18, w8\nsmov w16, v0.h[7]\nsmov w2, v1.h[4]\nsmov w3, v1.h[5]\nsdiv w10, w10, w8\nfmov s2, w18\nsdiv w17, w17, w8\nfmov s0, w10\nsmov w10, v1.h[6]\nsdiv w9, w9, w8\nmov v2.h[1], w17\nsdiv w0, w0, w8\nmov v0.h[1], w9\nsdiv w11, w11, w8\nmov v2.h[2], w0\nsdiv w1, w1, w8\nmov v0.h[2], w11\nsmov w11, v1.h[7]\nsdiv w12, w12, w8\nmov v2.h[3], w1\nsdiv w2, w2, w8\nmov v0.h[3], w12\nsdiv w13, w13, w8\nmov v2.h[4], w2\nsdiv w9, w3, w8\nmov v0.h[4], w13\nsdiv w14, w14, w8\nmov v2.h[5], w9\nsdiv w10, w10, w8\nmov v0.h[5], w14\nsdiv w15, w15, w8\nmov v2.h[6], w10\nsdiv w16, w16, w8\nmov v0.h[6], w15\nsdiv w8, w11, w8\nmov v0.h[7], w16\nmov v2.h[7], w8\nmov v1.16b, v2.16b\nret",
  "giasm": "dup v2.8h, w0\nsmov w8, v0.h[0]\nsmov w5, v1.h[0]\nsmov w10, v0.h[1]\nsmov w12, v0.h[2]\nsmov w14, v0.h[3]\nsmov w16, v0.h[4]\nsmov w18, v0.h[5]\nsmov w1, v0.h[6]\nsmov w9, v2.h[0]\nsmov w11, v2.h[1]\nsmov w13, v2.h[2]\nsmov w15, v2.h[3]\nsmov w17, v2.h[4]\nsmov w0, v2.h[5]\nsmov w2, v2.h[6]\nsmov w4, v2.h[7]\nsmov w3, v0.h[7]\nsdiv w8, w8, w9\nsdiv w9, w5, w9\nsmov w5, v1.h[1]\nfmov s0, w8\nsdiv w10, w10, w11\nfmov s2, w9\nsmov w9, v1.h[6]\nsdiv w11, w5, w11\nsmov w5, v1.h[2]\nmov v0.h[1], w10\nsmov w10, v1.h[7]\nsdiv w12, w12, w13\nmov v2.h[1], w11\nsdiv w13, w5, w13\nsmov w5, v1.h[3]\nmov v0.h[2], w12\nsdiv w14, w14, w15\nmov v2.h[2], w13\nsdiv w15, w5, w15\nsmov w5, v1.h[4]\nmov v0.h[3], w14\nsdiv w16, w16, w17\nmov v2.h[3], w15\nsdiv w17, w5, w17\nsmov w5, v1.h[5]\nmov v0.h[4], w16\nsdiv w8, w5, w0\nmov v2.h[4], w17\nsdiv w18, w18, w0\nmov v2.h[5], w8\nsdiv w9, w9, w2\nmov v0.h[5], w18\nsdiv w1, w1, w2\nmov v2.h[6], w9\nsdiv w8, w10, w4\nmov v0.h[6], w1\nsdiv w3, w3, w4\nmov v2.h[7], w8\nmov v1.16b, v2.16b\nmov v0.h[7], w3\nret",
  "ll": "define <16 x i16> @test(<16 x i16> %a, i16 %bs) {\n  %i = insertelement <16 x i16> poison, i16 %bs, i64 0\n  %b = shufflevector <16 x i16> %i, <16 x i16> poison, <16 x i32> zeroinitializer\n  %r = sdiv <16 x i16> %a, %b\n  ret <16 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <16 x i16> poison, i16 %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <16 x i16> %i, <16 x i16> poison, <16 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = sdiv <16 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i16> %r"
 },
 {
  "instr": "sdiv",
  "ty": "<16 x i16>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 12,
  "lat": 4,
  "sizelat": 4,
  "size": 114,
  "gisize": 49,
  "extrasize": 0,
  "asm": "smov w10, v0.h[0]\nmov w8, #9363                       // =0x2493\nsmov w15, v1.h[0]\nmovk w8, #37449, lsl #16\nsmov w14, v1.h[1]\nsmov w9, v0.h[1]\nsmov w11, v0.h[2]\nsmov w16, v1.h[2]\nsmov w1, v0.h[3]\nsmov w4, v1.h[3]\nsmull x13, w10, w8\nsmull x0, w15, w8\nsmull x18, w14, w8\nlsr x3, x13, #32\nsmull x12, w9, w8\nsmov w13, v0.h[4]\nsmull x17, w11, w8\nsmull x2, w16, w8\nadd w3, w3, w10\nlsr x10, x0, #32\nlsr x18, x18, #32\nlsr x12, x12, #32\nadd w15, w10, w15\nlsr x17, x17, #32\nsmov w10, v0.h[6]\nlsr x0, x2, #32\nadd w14, w18, w14\nasr w18, w3, #2\nasr w2, w15, #2\nadd w9, w12, w9\nadd w11, w17, w11\nasr w17, w9, #2\nadd w18, w18, w3, lsr #31\nadd w16, w0, w16\nadd w15, w2, w15, lsr #31\nasr w0, w14, #2\nsmov w12, v0.h[5]\nadd w17, w17, w9, lsr #31\nsmull x3, w1, w8\nsmov w9, v0.h[7]\nfmov s0, w18\nfmov s2, w15\nadd w14, w0, w14, lsr #31\nsmull x0, w4, w8\nsmov w18, v1.h[4]\nlsr x2, x3, #32\nsmull x15, w13, w8\nmov v0.h[1], w17\nasr w17, w11, #2\nmov v2.h[1], w14\nasr w14, w16, #2\nlsr x0, x0, #32\nadd w1, w2, w1\nsmov w2, v1.h[5]\nadd w11, w17, w11, lsr #31\nsmull x17, w18, w8\nadd w14, w14, w16, lsr #31\nadd w0, w0, w4\nsmull x16, w12, w8\nlsr x15, x15, #32\nmov v0.h[2], w11\nasr w11, w1, #2\nmov v2.h[2], w14\nasr w14, w0, #2\nlsr x17, x17, #32\nadd w13, w15, w13\nadd w11, w11, w1, lsr #31\nsmov w15, v1.h[6]\nadd w14, w14, w0, lsr #31\nsmull x0, w2, w8\nlsr x16, x16, #32\nadd w17, w17, w18\nmov v0.h[3], w11\nasr w11, w13, #2\nadd w12, w16, w12\nasr w16, w17, #2\nmov v2.h[3], w14\nsmull x14, w10, w8\nlsr x18, x0, #32\nadd w11, w11, w13, lsr #31\nsmov w13, v1.h[7]\nadd w16, w16, w17, lsr #31\nsmull x17, w15, w8\nadd w18, w18, w2\nmov v0.h[4], w11\nasr w11, w12, #2\nlsr x14, x14, #32\nmov v2.h[4], w16\nasr w16, w18, #2\nlsr x17, x17, #32\nadd w11, w11, w12, lsr #31\nsmull x12, w9, w8\nadd w10, w14, w10\nadd w14, w16, w18, lsr #31\nsmull x8, w13, w8\nadd w15, w17, w15\nmov v0.h[5], w11\nasr w11, w10, #2\nmov v2.h[5], w14\nasr w14, w15, #2\nlsr x8, x8, #32\nadd w10, w11, w10, lsr #31\nlsr x11, x12, #32\nadd w12, w14, w15, lsr #31\nadd w8, w8, w13\nadd w9, w11, w9\nmov v0.h[6], w10\nmov v2.h[6], w12\nasr w11, w8, #2\nasr w10, w9, #2\nadd w8, w11, w8, lsr #31\nadd w9, w10, w9, lsr #31\nmov v2.h[7], w8\nmov v0.h[7], w9\nmov v1.16b, v2.16b\nret",
  "giasm": "smov w17, v1.h[0]\nmov w8, #7                          // =0x7\nsmov w9, v0.h[0]\nsmov w18, v1.h[1]\nsmov w10, v0.h[1]\nsmov w0, v1.h[2]\nsmov w11, v0.h[2]\nsmov w1, v1.h[3]\nsmov w12, v0.h[3]\nsmov w13, v0.h[4]\nsmov w14, v0.h[5]\nsmov w15, v0.h[6]\nsdiv w17, w17, w8\nsmov w16, v0.h[7]\nsmov w2, v1.h[4]\nsmov w3, v1.h[5]\nsdiv w9, w9, w8\nfmov s2, w17\nsdiv w18, w18, w8\nfmov s0, w9\nsdiv w10, w10, w8\nmov v2.h[1], w18\nsdiv w0, w0, w8\nmov v0.h[1], w10\nsmov w10, v1.h[6]\nsdiv w11, w11, w8\nmov v2.h[2], w0\nsdiv w1, w1, w8\nmov v0.h[2], w11\nsmov w11, v1.h[7]\nsdiv w12, w12, w8\nmov v2.h[3], w1\nsdiv w2, w2, w8\nmov v0.h[3], w12\nsdiv w13, w13, w8\nmov v2.h[4], w2\nsdiv w9, w3, w8\nmov v0.h[4], w13\nsdiv w14, w14, w8\nmov v2.h[5], w9\nsdiv w10, w10, w8\nmov v0.h[5], w14\nsdiv w15, w15, w8\nmov v2.h[6], w10\nsdiv w16, w16, w8\nmov v0.h[6], w15\nsdiv w8, w11, w8\nmov v0.h[7], w16\nmov v2.h[7], w8\nmov v1.16b, v2.16b\nret",
  "ll": "define <16 x i16> @test(<16 x i16> %a) {\n  %r = sdiv <16 x i16> %a, splat (i16 7)\n  ret <16 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = sdiv <16 x i16> %a, splat (i16 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i16> %r"
 },
 {
  "instr": "sdiv",
  "ty": "<2 x i32>",
  "variant": "binop",
  "codesize": 4,
  "thru": 28,
  "lat": 4,
  "sizelat": 4,
  "size": 8,
  "gisize": 8,
  "extrasize": 0,
  "asm": "fmov w8, s1\nfmov w9, s0\nmov w10, v0.s[1]\nsdiv w8, w9, w8\nmov w9, v1.s[1]\nsdiv w9, w10, w9\nfmov s0, w8\nmov v0.s[1], w9\nret",
  "giasm": "fmov w8, s0\nfmov w9, s1\nmov w10, v1.s[1]\nsdiv w8, w8, w9\nmov w9, v0.s[1]\nsdiv w9, w9, w10\nmov v0.s[0], w8\nmov v0.s[1], w9\nret",
  "ll": "define <2 x i32> @test(<2 x i32> %a, <2 x i32> %b) {\n  %r = sdiv <2 x i32> %a, %b\n  ret <2 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = sdiv <2 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i32> %r"
 },
 {
  "instr": "sdiv",
  "ty": "<2 x i32>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 8,
  "lat": 4,
  "sizelat": 4,
  "size": 10,
  "gisize": 8,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr d1, [x8, :lo12:.LCPI0_0]\nadrp x8, .LCPI0_1\nsmull v1.2d, v0.2s, v1.2s\nmov v0.s[1], wzr\nshrn v1.2s, v1.2d, #32\nadd v1.2s, v1.2s, v0.2s\nldr d0, [x8, :lo12:.LCPI0_1]\nsshl v0.2s, v1.2s, v0.2s\nusra v0.2s, v1.2s, #31\nret",
  "giasm": "fmov w9, s0\nmov w8, #7                          // =0x7\nmov w10, #6                         // =0x6\nsdiv w8, w9, w8\nmov w9, v0.s[1]\nsdiv w9, w9, w10\nmov v0.s[0], w8\nmov v0.s[1], w9\nret",
  "ll": "define <2 x i32> @test(<2 x i32> %a) {\n  %r = sdiv <2 x i32> %a, <i32 7, i32 6>\n  ret <2 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = sdiv <2 x i32> %a, <i32 7, i32 6>\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i32> %r"
 },
 {
  "instr": "sdiv",
  "ty": "<2 x i32>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 31,
  "lat": 7,
  "sizelat": 7,
  "size": 6,
  "gisize": 9,
  "extrasize": 0,
  "asm": "fmov w8, s0\nmov w9, v0.s[1]\nsdiv w8, w8, w0\nsdiv w9, w9, w0\nfmov s0, w8\nmov v0.s[1], w9\nret",
  "giasm": "dup v1.2s, w0\nfmov w8, s0\nfmov w9, s1\nmov w10, v1.s[1]\nsdiv w8, w8, w9\nmov w9, v0.s[1]\nsdiv w9, w9, w10\nmov v0.s[0], w8\nmov v0.s[1], w9\nret",
  "ll": "define <2 x i32> @test(<2 x i32> %a, i32 %bs) {\n  %i = insertelement <2 x i32> poison, i32 %bs, i64 0\n  %b = shufflevector <2 x i32> %i, <2 x i32> poison, <2 x i32> zeroinitializer\n  %r = sdiv <2 x i32> %a, %b\n  ret <2 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <2 x i32> poison, i32 %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <2 x i32> %i, <2 x i32> poison, <2 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = sdiv <2 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i32> %r"
 },
 {
  "instr": "sdiv",
  "ty": "<2 x i32>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 6,
  "lat": 4,
  "sizelat": 4,
  "size": 8,
  "gisize": 7,
  "extrasize": 0,
  "asm": "mov w8, #9363                       // =0x2493\nmovk w8, #37449, lsl #16\ndup v1.2s, w8\nsmull v1.2d, v0.2s, v1.2s\nshrn v1.2s, v1.2d, #32\nadd v1.2s, v1.2s, v0.2s\nsshr v0.2s, v1.2s, #2\nusra v0.2s, v1.2s, #31\nret",
  "giasm": "fmov w9, s0\nmov w8, #7                          // =0x7\nmov w10, v0.s[1]\nsdiv w9, w9, w8\nsdiv w8, w10, w8\nmov v0.s[0], w9\nmov v0.s[1], w8\nret",
  "ll": "define <2 x i32> @test(<2 x i32> %a) {\n  %r = sdiv <2 x i32> %a, splat (i32 7)\n  ret <2 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = sdiv <2 x i32> %a, splat (i32 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i32> %r"
 },
 {
  "instr": "sdiv",
  "ty": "<4 x i32>",
  "variant": "binop",
  "codesize": 4,
  "thru": 48,
  "lat": 4,
  "sizelat": 4,
  "size": 16,
  "gisize": 16,
  "extrasize": 0,
  "asm": "mov w8, v1.s[1]\nmov w9, v0.s[1]\nfmov w10, s0\nmov w11, v0.s[2]\nmov w12, v0.s[3]\nsdiv w8, w9, w8\nfmov w9, s1\nsdiv w9, w10, w9\nmov w10, v1.s[2]\nsdiv w10, w11, w10\nmov w11, v1.s[3]\nfmov s0, w9\nmov v0.s[1], w8\nsdiv w8, w12, w11\nmov v0.s[2], w10\nmov v0.s[3], w8\nret",
  "giasm": "fmov w8, s0\nfmov w9, s1\nmov w10, v1.s[1]\nmov w11, v1.s[2]\nmov w12, v1.s[3]\nsdiv w8, w8, w9\nmov w9, v0.s[1]\nsdiv w9, w9, w10\nmov w10, v0.s[2]\nsdiv w10, w10, w11\nmov w11, v0.s[3]\nmov v0.s[0], w8\nmov v0.s[1], w9\nsdiv w8, w11, w12\nmov v0.s[2], w10\nmov v0.s[3], w8\nret",
  "ll": "define <4 x i32> @test(<4 x i32> %a, <4 x i32> %b) {\n  %r = sdiv <4 x i32> %a, %b\n  ret <4 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = sdiv <4 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i32> %r"
 },
 {
  "instr": "sdiv",
  "ty": "<4 x i32>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 10,
  "lat": 4,
  "sizelat": 4,
  "size": 12,
  "gisize": 14,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nmovi v3.2d, #0x000000ffffffff\nldr q1, [x8, :lo12:.LCPI0_0]\nadrp x8, .LCPI0_1\nsmull2 v2.2d, v0.4s, v1.4s\nsmull v1.2d, v0.2s, v1.2s\nand v0.16b, v0.16b, v3.16b\nuzp2 v1.4s, v1.4s, v2.4s\nadd v1.4s, v1.4s, v0.4s\nldr q0, [x8, :lo12:.LCPI0_1]\nsshl v0.4s, v1.4s, v0.4s\nusra v0.4s, v1.4s, #31\nret",
  "giasm": "fmov w9, s0\nmov w8, #7                          // =0x7\nmov w10, v0.s[1]\nmov w11, #6                         // =0x6\nmov w12, v0.s[2]\nsdiv w9, w9, w8\nsdiv w10, w10, w11\nsdiv w8, w12, w8\nmov w12, v0.s[3]\nmov v0.s[0], w9\nmov v0.s[1], w10\nsdiv w9, w12, w11\nmov v0.s[2], w8\nmov v0.s[3], w9\nret",
  "ll": "define <4 x i32> @test(<4 x i32> %a) {\n  %r = sdiv <4 x i32> %a, <i32 7, i32 6, i32 7, i32 6>\n  ret <4 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = sdiv <4 x i32> %a, <i32 7, i32 6, i32 7, i32 6>\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i32> %r"
 },
 {
  "instr": "sdiv",
  "ty": "<4 x i32>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 51,
  "lat": 7,
  "sizelat": 7,
  "size": 12,
  "gisize": 17,
  "extrasize": 0,
  "asm": "fmov w9, s0\nmov w8, v0.s[1]\nmov w10, v0.s[2]\nmov w11, v0.s[3]\nsdiv w9, w9, w0\nsdiv w8, w8, w0\nfmov s0, w9\nsdiv w10, w10, w0\nmov v0.s[1], w8\nsdiv w8, w11, w0\nmov v0.s[2], w10\nmov v0.s[3], w8\nret",
  "giasm": "dup v1.4s, w0\nfmov w8, s0\nfmov w9, s1\nmov w10, v1.s[1]\nmov w11, v1.s[2]\nmov w12, v1.s[3]\nsdiv w8, w8, w9\nmov w9, v0.s[1]\nsdiv w9, w9, w10\nmov w10, v0.s[2]\nsdiv w10, w10, w11\nmov w11, v0.s[3]\nmov v0.s[0], w8\nmov v0.s[1], w9\nsdiv w8, w11, w12\nmov v0.s[2], w10\nmov v0.s[3], w8\nret",
  "ll": "define <4 x i32> @test(<4 x i32> %a, i32 %bs) {\n  %i = insertelement <4 x i32> poison, i32 %bs, i64 0\n  %b = shufflevector <4 x i32> %i, <4 x i32> poison, <4 x i32> zeroinitializer\n  %r = sdiv <4 x i32> %a, %b\n  ret <4 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <4 x i32> poison, i32 %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <4 x i32> %i, <4 x i32> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = sdiv <4 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i32> %r"
 },
 {
  "instr": "sdiv",
  "ty": "<4 x i32>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 6,
  "lat": 4,
  "sizelat": 4,
  "size": 9,
  "gisize": 13,
  "extrasize": 0,
  "asm": "mov w8, #9363                       // =0x2493\nmovk w8, #37449, lsl #16\ndup v1.4s, w8\nsmull2 v2.2d, v0.4s, v1.4s\nsmull v1.2d, v0.2s, v1.2s\nuzp2 v1.4s, v1.4s, v2.4s\nadd v1.4s, v1.4s, v0.4s\nsshr v0.4s, v1.4s, #2\nusra v0.4s, v1.4s, #31\nret",
  "giasm": "fmov w9, s0\nmov w8, #7                          // =0x7\nmov w10, v0.s[1]\nmov w11, v0.s[2]\nmov w12, v0.s[3]\nsdiv w9, w9, w8\nsdiv w10, w10, w8\nmov v0.s[0], w9\nsdiv w11, w11, w8\nmov v0.s[1], w10\nsdiv w8, w12, w8\nmov v0.s[2], w11\nmov v0.s[3], w8\nret",
  "ll": "define <4 x i32> @test(<4 x i32> %a) {\n  %r = sdiv <4 x i32> %a, splat (i32 7)\n  ret <4 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = sdiv <4 x i32> %a, splat (i32 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i32> %r"
 },
 {
  "instr": "sdiv",
  "ty": "<8 x i32>",
  "variant": "binop",
  "codesize": 4,
  "thru": 88,
  "lat": 4,
  "sizelat": 4,
  "size": 32,
  "gisize": 32,
  "extrasize": 0,
  "asm": "mov w8, v2.s[1]\nmov w9, v0.s[1]\nfmov w10, s0\nmov w11, v0.s[2]\nmov w12, v0.s[3]\nmov w13, v1.s[1]\nfmov w14, s1\nmov w15, v1.s[2]\nmov w16, v1.s[3]\nsdiv w8, w9, w8\nfmov w9, s2\nsdiv w9, w10, w9\nmov w10, v2.s[2]\nsdiv w10, w11, w10\nmov w11, v2.s[3]\nfmov s0, w9\nmov v0.s[1], w8\nsdiv w11, w12, w11\nmov w12, v3.s[1]\nmov v0.s[2], w10\nsdiv w12, w13, w12\nfmov w13, s3\nmov v0.s[3], w11\nsdiv w13, w14, w13\nmov w14, v3.s[2]\nsdiv w14, w15, w14\nmov w15, v3.s[3]\nfmov s1, w13\nmov v1.s[1], w12\nsdiv w8, w16, w15\nmov v1.s[2], w14\nmov v1.s[3], w8\nret",
  "giasm": "fmov w8, s0\nfmov w9, s2\nmov w10, v2.s[1]\nmov w11, v2.s[2]\nmov w12, v2.s[3]\nfmov w13, s3\nmov w14, v3.s[1]\nmov w15, v3.s[2]\nmov w16, v3.s[3]\nsdiv w8, w8, w9\nmov w9, v0.s[1]\nsdiv w9, w9, w10\nmov w10, v0.s[2]\nsdiv w10, w10, w11\nmov w11, v0.s[3]\nmov v0.s[0], w8\nmov v0.s[1], w9\nsdiv w11, w11, w12\nfmov w12, s1\nmov v0.s[2], w10\nsdiv w12, w12, w13\nmov w13, v1.s[1]\nmov v0.s[3], w11\nsdiv w13, w13, w14\nmov w14, v1.s[2]\nsdiv w14, w14, w15\nmov w15, v1.s[3]\nmov v1.s[0], w12\nmov v1.s[1], w13\nsdiv w8, w15, w16\nmov v1.s[2], w14\nmov v1.s[3], w8\nret",
  "ll": "define <8 x i32> @test(<8 x i32> %a, <8 x i32> %b) {\n  %r = sdiv <8 x i32> %a, %b\n  ret <8 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = sdiv <8 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i32> %r"
 },
 {
  "instr": "sdiv",
  "ty": "<8 x i32>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 14,
  "lat": 4,
  "sizelat": 4,
  "size": 19,
  "gisize": 26,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nmovi v6.2d, #0x000000ffffffff\nldr q2, [x8, :lo12:.LCPI0_0]\nadrp x8, .LCPI0_1\nsmull2 v3.2d, v0.4s, v2.4s\nsmull v4.2d, v0.2s, v2.2s\nsmull2 v5.2d, v1.4s, v2.4s\nsmull v2.2d, v1.2s, v2.2s\nand v0.16b, v0.16b, v6.16b\nand v1.16b, v1.16b, v6.16b\nuzp2 v3.4s, v4.4s, v3.4s\nuzp2 v2.4s, v2.4s, v5.4s\nadd v3.4s, v3.4s, v0.4s\nadd v2.4s, v2.4s, v1.4s\nldr q1, [x8, :lo12:.LCPI0_1]\nsshl v0.4s, v3.4s, v1.4s\nsshl v1.4s, v2.4s, v1.4s\nusra v0.4s, v3.4s, #31\nusra v1.4s, v2.4s, #31\nret",
  "giasm": "fmov w9, s0\nfmov w14, s1\nmov w8, #7                          // =0x7\nmov w10, v0.s[1]\nmov w15, v1.s[1]\nmov w11, #6                         // =0x6\nmov w12, v0.s[2]\nmov w16, v1.s[2]\nmov w13, v0.s[3]\nsdiv w9, w9, w8\nsdiv w14, w14, w8\nmov v0.s[0], w9\nsdiv w10, w10, w11\nsdiv w15, w15, w11\nmov v0.s[1], w10\nsdiv w12, w12, w8\nsdiv w8, w16, w8\nmov w16, v1.s[3]\nmov v1.s[0], w14\nmov v0.s[2], w12\nmov v1.s[1], w15\nsdiv w13, w13, w11\nmov v1.s[2], w8\nsdiv w9, w16, w11\nmov v0.s[3], w13\nmov v1.s[3], w9\nret",
  "ll": "define <8 x i32> @test(<8 x i32> %a) {\n  %r = sdiv <8 x i32> %a, <i32 7, i32 6, i32 7, i32 6, i32 7, i32 6, i32 7, i32 6>\n  ret <8 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = sdiv <8 x i32> %a, <i32 7, i32 6, i32 7, i32 6, i32 7, i32 6, i32 7, i32 6>\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i32> %r"
 },
 {
  "instr": "sdiv",
  "ty": "<8 x i32>",
  "variant": "binopsplat",
  "codesize": 7,
  "thru": 92,
  "lat": 8,
  "sizelat": 8,
  "size": 24,
  "gisize": 29,
  "extrasize": 0,
  "asm": "fmov w9, s0\nfmov w13, s1\nmov w8, v0.s[1]\nmov w12, v1.s[1]\nmov w10, v0.s[2]\nmov w14, v1.s[2]\nmov w11, v0.s[3]\nmov w15, v1.s[3]\nsdiv w9, w9, w0\nsdiv w13, w13, w0\nfmov s0, w9\nsdiv w8, w8, w0\nfmov s1, w13\nsdiv w12, w12, w0\nmov v0.s[1], w8\nsdiv w10, w10, w0\nmov v1.s[1], w12\nsdiv w14, w14, w0\nmov v0.s[2], w10\nsdiv w11, w11, w0\nmov v1.s[2], w14\nsdiv w8, w15, w0\nmov v0.s[3], w11\nmov v1.s[3], w8\nret",
  "giasm": "dup v2.4s, w0\nfmov w8, s0\nfmov w16, s1\nmov w10, v0.s[1]\nmov w12, v0.s[2]\nmov w14, v0.s[3]\nfmov w9, s2\nmov w11, v2.s[1]\nmov w13, v2.s[2]\nmov w15, v2.s[3]\nsdiv w8, w8, w9\nsdiv w9, w16, w9\nmov w16, v1.s[1]\nmov v0.s[0], w8\nsdiv w10, w10, w11\nsdiv w11, w16, w11\nmov w16, v1.s[2]\nmov v0.s[1], w10\nsdiv w12, w12, w13\nsdiv w13, w16, w13\nmov w16, v1.s[3]\nmov v1.s[0], w9\nmov v0.s[2], w12\nmov v1.s[1], w11\nsdiv w14, w14, w15\nmov v1.s[2], w13\nsdiv w8, w16, w15\nmov v0.s[3], w14\nmov v1.s[3], w8\nret",
  "ll": "define <8 x i32> @test(<8 x i32> %a, i32 %bs) {\n  %i = insertelement <8 x i32> poison, i32 %bs, i64 0\n  %b = shufflevector <8 x i32> %i, <8 x i32> poison, <8 x i32> zeroinitializer\n  %r = sdiv <8 x i32> %a, %b\n  ret <8 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <8 x i32> poison, i32 %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <8 x i32> %i, <8 x i32> poison, <8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = sdiv <8 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i32> %r"
 },
 {
  "instr": "sdiv",
  "ty": "<8 x i32>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 12,
  "lat": 4,
  "sizelat": 4,
  "size": 15,
  "gisize": 25,
  "extrasize": 0,
  "asm": "mov w8, #9363                       // =0x2493\nmovk w8, #37449, lsl #16\ndup v2.4s, w8\nsmull2 v3.2d, v0.4s, v2.4s\nsmull v4.2d, v0.2s, v2.2s\nsmull2 v5.2d, v1.4s, v2.4s\nsmull v2.2d, v1.2s, v2.2s\nuzp2 v3.4s, v4.4s, v3.4s\nuzp2 v2.4s, v2.4s, v5.4s\nadd v3.4s, v3.4s, v0.4s\nadd v2.4s, v2.4s, v1.4s\nsshr v0.4s, v3.4s, #2\nsshr v1.4s, v2.4s, #2\nusra v0.4s, v3.4s, #31\nusra v1.4s, v2.4s, #31\nret",
  "giasm": "fmov w9, s0\nfmov w13, s1\nmov w8, #7                          // =0x7\nmov w10, v0.s[1]\nmov w14, v1.s[1]\nmov w11, v0.s[2]\nmov w15, v1.s[2]\nmov w12, v0.s[3]\nmov w16, v1.s[3]\nsdiv w9, w9, w8\nsdiv w13, w13, w8\nmov v0.s[0], w9\nsdiv w10, w10, w8\nmov v1.s[0], w13\nsdiv w14, w14, w8\nmov v0.s[1], w10\nsdiv w11, w11, w8\nmov v1.s[1], w14\nsdiv w15, w15, w8\nmov v0.s[2], w11\nsdiv w12, w12, w8\nmov v1.s[2], w15\nsdiv w8, w16, w8\nmov v0.s[3], w12\nmov v1.s[3], w8\nret",
  "ll": "define <8 x i32> @test(<8 x i32> %a) {\n  %r = sdiv <8 x i32> %a, splat (i32 7)\n  ret <8 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = sdiv <8 x i32> %a, splat (i32 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i32> %r"
 },
 {
  "instr": "sdiv",
  "ty": "<2 x i64>",
  "variant": "binop",
  "codesize": 4,
  "thru": 28,
  "lat": 4,
  "sizelat": 4,
  "size": 8,
  "gisize": 8,
  "extrasize": 0,
  "asm": "fmov x8, d1\nfmov x9, d0\nmov x10, v0.d[1]\nsdiv x8, x9, x8\nmov x9, v1.d[1]\nsdiv x9, x10, x9\nfmov d0, x8\nmov v0.d[1], x9\nret",
  "giasm": "fmov x8, d0\nfmov x9, d1\nmov x10, v1.d[1]\nsdiv x8, x8, x9\nmov x9, v0.d[1]\nsdiv x9, x9, x10\nmov v0.d[0], x8\nmov v0.d[1], x9\nret",
  "ll": "define <2 x i64> @test(<2 x i64> %a, <2 x i64> %b) {\n  %r = sdiv <2 x i64> %a, %b\n  ret <2 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = sdiv <2 x i64> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i64> %r"
 },
 {
  "instr": "sdiv",
  "ty": "<2 x i64>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 8,
  "lat": 4,
  "sizelat": 4,
  "size": 15,
  "gisize": 8,
  "extrasize": 0,
  "asm": "mov x8, #18725                      // =0x4925\nfmov x10, d0\nmov x9, v0.d[1]\nmovk x8, #9362, lsl #16\nmovk x8, #37449, lsl #32\nmovk x8, #18724, lsl #48\nsmulh x8, x10, x8\nmov x10, #-6148914691236517206      // =0xaaaaaaaaaaaaaaaa\neor x10, x10, #0x8000000000000001\nsmulh x9, x9, x10\nasr x10, x8, #1\nadd x8, x10, x8, lsr #63\nadd x9, x9, x9, lsr #63\nfmov d0, x8\nmov v0.d[1], x9\nret",
  "giasm": "fmov x9, d0\nmov w8, #7                          // =0x7\nmov w10, #6                         // =0x6\nsdiv x8, x9, x8\nmov x9, v0.d[1]\nsdiv x9, x9, x10\nmov v0.d[0], x8\nmov v0.d[1], x9\nret",
  "ll": "define <2 x i64> @test(<2 x i64> %a) {\n  %r = sdiv <2 x i64> %a, <i64 7, i64 6>\n  ret <2 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = sdiv <2 x i64> %a, <i64 7, i64 6>\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i64> %r"
 },
 {
  "instr": "sdiv",
  "ty": "<2 x i64>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 31,
  "lat": 7,
  "sizelat": 7,
  "size": 6,
  "gisize": 9,
  "extrasize": 0,
  "asm": "fmov x8, d0\nmov x9, v0.d[1]\nsdiv x8, x8, x0\nsdiv x9, x9, x0\nfmov d0, x8\nmov v0.d[1], x9\nret",
  "giasm": "dup v1.2d, x0\nfmov x8, d0\nfmov x9, d1\nmov x10, v1.d[1]\nsdiv x8, x8, x9\nmov x9, v0.d[1]\nsdiv x9, x9, x10\nmov v0.d[0], x8\nmov v0.d[1], x9\nret",
  "ll": "define <2 x i64> @test(<2 x i64> %a, i64 %bs) {\n  %i = insertelement <2 x i64> poison, i64 %bs, i64 0\n  %b = shufflevector <2 x i64> %i, <2 x i64> poison, <2 x i32> zeroinitializer\n  %r = sdiv <2 x i64> %a, %b\n  ret <2 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <2 x i64> poison, i64 %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <2 x i64> %i, <2 x i64> poison, <2 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = sdiv <2 x i64> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i64> %r"
 },
 {
  "instr": "sdiv",
  "ty": "<2 x i64>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 8,
  "lat": 4,
  "sizelat": 4,
  "size": 14,
  "gisize": 7,
  "extrasize": 0,
  "asm": "mov x8, #18725                      // =0x4925\nfmov x10, d0\nmov x9, v0.d[1]\nmovk x8, #9362, lsl #16\nmovk x8, #37449, lsl #32\nmovk x8, #18724, lsl #48\nsmulh x10, x10, x8\nsmulh x8, x9, x8\nasr x9, x10, #1\nadd x9, x9, x10, lsr #63\nasr x11, x8, #1\nfmov d0, x9\nadd x8, x11, x8, lsr #63\nmov v0.d[1], x8\nret",
  "giasm": "fmov x9, d0\nmov w8, #7                          // =0x7\nmov x10, v0.d[1]\nsdiv x9, x9, x8\nsdiv x8, x10, x8\nmov v0.d[0], x9\nmov v0.d[1], x8\nret",
  "ll": "define <2 x i64> @test(<2 x i64> %a) {\n  %r = sdiv <2 x i64> %a, splat (i64 7)\n  ret <2 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = sdiv <2 x i64> %a, splat (i64 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i64> %r"
 },
 {
  "instr": "sdiv",
  "ty": "<4 x i64>",
  "variant": "binop",
  "codesize": 4,
  "thru": 48,
  "lat": 4,
  "sizelat": 4,
  "size": 16,
  "gisize": 16,
  "extrasize": 0,
  "asm": "mov x8, v2.d[1]\nmov x9, v0.d[1]\nfmov x10, d0\nfmov x11, d1\nmov x12, v1.d[1]\nsdiv x8, x9, x8\nfmov x9, d2\nsdiv x9, x10, x9\nfmov x10, d3\nsdiv x10, x11, x10\nmov x11, v3.d[1]\nfmov d0, x9\nmov v0.d[1], x8\nsdiv x11, x12, x11\nfmov d1, x10\nmov v1.d[1], x11\nret",
  "giasm": "fmov x8, d0\nfmov x9, d2\nmov x10, v2.d[1]\nfmov x11, d3\nmov x12, v3.d[1]\nsdiv x8, x8, x9\nmov x9, v0.d[1]\nsdiv x9, x9, x10\nfmov x10, d1\nmov v0.d[0], x8\nsdiv x10, x10, x11\nmov x11, v1.d[1]\nmov v0.d[1], x9\nsdiv x11, x11, x12\nmov v1.d[0], x10\nmov v1.d[1], x11\nret",
  "ll": "define <4 x i64> @test(<4 x i64> %a, <4 x i64> %b) {\n  %r = sdiv <4 x i64> %a, %b\n  ret <4 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = sdiv <4 x i64> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i64> %r"
 },
 {
  "instr": "sdiv",
  "ty": "<4 x i64>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 10,
  "lat": 4,
  "sizelat": 4,
  "size": 24,
  "gisize": 14,
  "extrasize": 0,
  "asm": "mov x8, #18725                      // =0x4925\nfmov x9, d0\nfmov x11, d1\nmovk x8, #9362, lsl #16\nmov x10, v0.d[1]\nmov x12, v1.d[1]\nmovk x8, #37449, lsl #32\nmovk x8, #18724, lsl #48\nsmulh x9, x9, x8\nsmulh x8, x11, x8\nmov x11, #-6148914691236517206      // =0xaaaaaaaaaaaaaaaa\neor x11, x11, #0x8000000000000001\nsmulh x10, x10, x11\nsmulh x11, x12, x11\nasr x12, x9, #1\nasr x13, x8, #1\nadd x9, x12, x9, lsr #63\nadd x8, x13, x8, lsr #63\nadd x10, x10, x10, lsr #63\nfmov d0, x9\nfmov d1, x8\nadd x11, x11, x11, lsr #63\nmov v0.d[1], x10\nmov v1.d[1], x11\nret",
  "giasm": "fmov x9, d0\nfmov x12, d1\nmov w8, #7                          // =0x7\nmov x10, v0.d[1]\nmov w11, #6                         // =0x6\nsdiv x9, x9, x8\nsdiv x8, x12, x8\nmov x12, v1.d[1]\nmov v0.d[0], x9\nsdiv x10, x10, x11\nmov v1.d[0], x8\nsdiv x11, x12, x11\nmov v0.d[1], x10\nmov v1.d[1], x11\nret",
  "ll": "define <4 x i64> @test(<4 x i64> %a) {\n  %r = sdiv <4 x i64> %a, <i64 7, i64 6, i64 7, i64 6>\n  ret <4 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = sdiv <4 x i64> %a, <i64 7, i64 6, i64 7, i64 6>\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i64> %r"
 },
 {
  "instr": "sdiv",
  "ty": "<4 x i64>",
  "variant": "binopsplat",
  "codesize": 7,
  "thru": 52,
  "lat": 8,
  "sizelat": 8,
  "size": 12,
  "gisize": 15,
  "extrasize": 0,
  "asm": "fmov x9, d0\nfmov x10, d1\nmov x8, v0.d[1]\nmov x11, v1.d[1]\nsdiv x9, x9, x0\nsdiv x10, x10, x0\nfmov d0, x9\nsdiv x8, x8, x0\nfmov d1, x10\nsdiv x11, x11, x0\nmov v0.d[1], x8\nmov v1.d[1], x11\nret",
  "giasm": "dup v2.2d, x0\nfmov x8, d0\nfmov x12, d1\nmov x10, v0.d[1]\nfmov x9, d2\nmov x11, v2.d[1]\nsdiv x8, x8, x9\nsdiv x9, x12, x9\nmov x12, v1.d[1]\nmov v0.d[0], x8\nsdiv x10, x10, x11\nmov v1.d[0], x9\nsdiv x11, x12, x11\nmov v0.d[1], x10\nmov v1.d[1], x11\nret",
  "ll": "define <4 x i64> @test(<4 x i64> %a, i64 %bs) {\n  %i = insertelement <4 x i64> poison, i64 %bs, i64 0\n  %b = shufflevector <4 x i64> %i, <4 x i64> poison, <4 x i32> zeroinitializer\n  %r = sdiv <4 x i64> %a, %b\n  ret <4 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <4 x i64> poison, i64 %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <4 x i64> %i, <4 x i64> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = sdiv <4 x i64> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i64> %r"
 },
 {
  "instr": "sdiv",
  "ty": "<4 x i64>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 16,
  "lat": 4,
  "sizelat": 4,
  "size": 24,
  "gisize": 13,
  "extrasize": 0,
  "asm": "mov x8, #18725                      // =0x4925\nfmov x9, d0\nfmov x11, d1\nmovk x8, #9362, lsl #16\nmov x10, v0.d[1]\nmov x12, v1.d[1]\nmovk x8, #37449, lsl #32\nmovk x8, #18724, lsl #48\nsmulh x9, x9, x8\nsmulh x11, x11, x8\nsmulh x10, x10, x8\nsmulh x8, x12, x8\nasr x12, x9, #1\nasr x13, x11, #1\nadd x9, x12, x9, lsr #63\nadd x11, x13, x11, lsr #63\nasr x14, x10, #1\nfmov d0, x9\nasr x15, x8, #1\nfmov d1, x11\nadd x10, x14, x10, lsr #63\nadd x8, x15, x8, lsr #63\nmov v0.d[1], x10\nmov v1.d[1], x8\nret",
  "giasm": "fmov x9, d0\nfmov x11, d1\nmov w8, #7                          // =0x7\nmov x10, v0.d[1]\nmov x12, v1.d[1]\nsdiv x9, x9, x8\nsdiv x11, x11, x8\nmov v0.d[0], x9\nsdiv x10, x10, x8\nmov v1.d[0], x11\nsdiv x8, x12, x8\nmov v0.d[1], x10\nmov v1.d[1], x8\nret",
  "ll": "define <4 x i64> @test(<4 x i64> %a) {\n  %r = sdiv <4 x i64> %a, splat (i64 7)\n  ret <4 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = sdiv <4 x i64> %a, splat (i64 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i64> %r"
 },
 {
  "instr": "srem",
  "ty": "i8",
  "variant": "binop",
  "codesize": 4,
  "thru": 3,
  "lat": 4,
  "sizelat": 4,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "sxtb w8, w1\nsxtb w9, w0\nsdiv w10, w9, w8\nmsub w0, w10, w8, w9\nret",
  "giasm": "sxtb w8, w0\nsxtb w9, w1\nsdiv w8, w8, w9\nmsub w0, w8, w1, w0\nret",
  "ll": "define i8 @test(i8 %a, i8 %b) {\n  %r = srem i8 %a, %b\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = srem i8 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "srem",
  "ty": "i8",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 9,
  "gisize": 6,
  "extrasize": 0,
  "asm": "sxtb w8, w0\nmov w9, #-109                       // =0xffffff93\nmul w8, w8, w9\nadd w8, w0, w8, lsr #8\nsbfx w9, w8, #2, #6\nand w8, w8, #0x80\nadd w8, w9, w8, lsr #7\nsub w8, w8, w8, lsl #3\nadd w0, w0, w8\nret",
  "giasm": "sxtb w8, w0\nmov w9, #7                          // =0x7\nsdiv w8, w8, w9\nlsl w9, w8, #3\nsub w8, w9, w8\nsub w0, w0, w8\nret",
  "ll": "define i8 @test(i8 %a) {\n  %r = srem i8 %a, 7\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = srem i8 %a, 7\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "srem",
  "ty": "i16",
  "variant": "binop",
  "codesize": 4,
  "thru": 3,
  "lat": 4,
  "sizelat": 4,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "sxth w8, w1\nsxth w9, w0\nsdiv w10, w9, w8\nmsub w0, w10, w8, w9\nret",
  "giasm": "sxth w8, w0\nsxth w9, w1\nsdiv w8, w8, w9\nmsub w0, w8, w1, w0\nret",
  "ll": "define i16 @test(i16 %a, i16 %b) {\n  %r = srem i16 %a, %b\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = srem i16 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "srem",
  "ty": "i16",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 7,
  "gisize": 6,
  "extrasize": 0,
  "asm": "sxth w8, w0\nmov w9, #18725                      // =0x4925\nmul w8, w8, w9\nasr w9, w8, #17\nadd w8, w9, w8, lsr #31\nsub w8, w8, w8, lsl #3\nadd w0, w0, w8\nret",
  "giasm": "sxth w8, w0\nmov w9, #7                          // =0x7\nsdiv w8, w8, w9\nlsl w9, w8, #3\nsub w8, w9, w8\nsub w0, w0, w8\nret",
  "ll": "define i16 @test(i16 %a) {\n  %r = srem i16 %a, 7\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = srem i16 %a, 7\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "srem",
  "ty": "i32",
  "variant": "binop",
  "codesize": 4,
  "thru": 3,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "sdiv w8, w0, w1\nmsub w0, w8, w1, w0\nret",
  "giasm": "sdiv w8, w0, w1\nmsub w0, w8, w1, w0\nret",
  "ll": "define i32 @test(i32 %a, i32 %b) {\n  %r = srem i32 %a, %b\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = srem i32 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "srem",
  "ty": "i32",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 9,
  "gisize": 5,
  "extrasize": 0,
  "asm": "mov w8, #9363                       // =0x2493\nmovk w8, #37449, lsl #16\nsmull x8, w0, w8\nlsr x8, x8, #32\nadd w8, w8, w0\nasr w9, w8, #2\nadd w8, w9, w8, lsr #31\nsub w8, w8, w8, lsl #3\nadd w0, w0, w8\nret",
  "giasm": "mov w8, #7                          // =0x7\nsdiv w8, w0, w8\nlsl w9, w8, #3\nsub w8, w9, w8\nsub w0, w0, w8\nret",
  "ll": "define i32 @test(i32 %a) {\n  %r = srem i32 %a, 7\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = srem i32 %a, 7\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "srem",
  "ty": "i64",
  "variant": "binop",
  "codesize": 4,
  "thru": 3,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "sdiv x8, x0, x1\nmsub x0, x8, x1, x0\nret",
  "giasm": "sdiv x8, x0, x1\nmsub x0, x8, x1, x0\nret",
  "ll": "define i64 @test(i64 %a, i64 %b) {\n  %r = srem i64 %a, %b\n  ret i64 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = srem i64 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i64 %r"
 },
 {
  "instr": "srem",
  "ty": "i64",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 9,
  "gisize": 5,
  "extrasize": 0,
  "asm": "mov x8, #18725                      // =0x4925\nmovk x8, #9362, lsl #16\nmovk x8, #37449, lsl #32\nmovk x8, #18724, lsl #48\nsmulh x8, x0, x8\nasr x9, x8, #1\nadd x8, x9, x8, lsr #63\nsub x8, x8, x8, lsl #3\nadd x0, x0, x8\nret",
  "giasm": "mov w8, #7                          // =0x7\nsdiv x8, x0, x8\nlsl x9, x8, #3\nsub x8, x9, x8\nsub x0, x0, x8\nret",
  "ll": "define i64 @test(i64 %a) {\n  %r = srem i64 %a, 7\n  ret i64 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = srem i64 %a, 7\nCost Model: Found an estimated cost of 1 for instruction:   ret i64 %r"
 },
 {
  "instr": "srem",
  "ty": "<8 x i8>",
  "variant": "binop",
  "codesize": 4,
  "thru": 56,
  "lat": 4,
  "sizelat": 4,
  "size": 40,
  "gisize": 42,
  "extrasize": 0,
  "asm": "smov w11, v1.b[0]\nsmov w12, v0.b[0]\nsmov w8, v1.b[1]\nsmov w9, v0.b[1]\nsmov w14, v1.b[2]\nsmov w15, v0.b[2]\nsmov w17, v1.b[3]\nsmov w18, v0.b[3]\nsmov w1, v1.b[4]\nsmov w2, v0.b[4]\nsmov w4, v1.b[5]\nsmov w5, v0.b[5]\nsdiv w13, w12, w11\nsdiv w10, w9, w8\nmsub w11, w13, w11, w12\nsmov w13, v1.b[7]\nfmov s2, w11\nsmov w11, v0.b[6]\nsdiv w16, w15, w14\nmsub w8, w10, w8, w9\nsmov w10, v1.b[6]\nmov v2.b[1], w8\nsdiv w0, w18, w17\nmsub w8, w16, w14, w15\nsmov w14, v0.b[7]\nmov v2.b[2], w8\nsdiv w3, w2, w1\nmsub w8, w0, w17, w18\nmov v2.b[3], w8\nsdiv w9, w5, w4\nmsub w8, w3, w1, w2\nmov v2.b[4], w8\nsdiv w12, w11, w10\nmsub w8, w9, w4, w5\nmov v2.b[5], w8\nsdiv w9, w14, w13\nmsub w8, w12, w10, w11\nmov v2.b[6], w8\nmsub w8, w9, w13, w14\nmov v2.b[7], w8\nfmov d0, d2\nret",
  "giasm": "sshll v0.8h, v0.8b, #0\nsshll v1.8h, v1.8b, #0\nsshll v2.4s, v0.4h, #0\nsshll v3.4s, v1.4h, #0\nsshll2 v0.4s, v0.8h, #0\nsshll2 v1.4s, v1.8h, #0\nfmov w8, s2\nfmov w9, s3\nmov w10, v3.s[1]\nmov w11, v3.s[2]\nmov w12, v3.s[3]\nfmov w13, s1\nmov w14, v1.s[1]\nmov w15, v1.s[2]\nsdiv w8, w8, w9\nmov w9, v2.s[1]\nsdiv w9, w9, w10\nmov w10, v2.s[2]\nmov v4.s[0], w8\nmov w8, v0.s[3]\nsdiv w10, w10, w11\nmov w11, v2.s[3]\nmov v4.s[1], w9\nsdiv w11, w11, w12\nfmov w12, s0\nmov v4.s[2], w10\nsdiv w12, w12, w13\nmov w13, v0.s[1]\nmov v4.s[3], w11\nmls v2.4s, v4.4s, v3.4s\nsdiv w13, w13, w14\nmov w14, v0.s[2]\nmov v5.s[0], w12\nmov w12, v1.s[3]\nsdiv w14, w14, w15\nmov v5.s[1], w13\nsdiv w8, w8, w12\nmov v5.s[2], w14\nmov v5.s[3], w8\nmls v0.4s, v5.4s, v1.4s\nuzp1 v0.8h, v2.8h, v0.8h\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i8> @test(<8 x i8> %a, <8 x i8> %b) {\n  %r = srem <8 x i8> %a, %b\n  ret <8 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = srem <8 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i8> %r"
 },
 {
  "instr": "srem",
  "ty": "<8 x i8>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 30,
  "lat": 4,
  "sizelat": 4,
  "size": 12,
  "gisize": 38,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nfmov d2, d0\nmovi v3.4h, #254\nldr d1, [x8, :lo12:.LCPI0_0]\nadrp x8, .LCPI0_1\nsmull v1.8h, v0.8b, v1.8b\nbic v2.4h, #255, lsl #8\nshrn v1.8b, v1.8h, #8\nadd v1.8b, v1.8b, v2.8b\nldr d2, [x8, :lo12:.LCPI0_1]\nsshl v1.8b, v1.8b, v3.8b\nusra v1.8b, v1.8b, #7\nmls v0.8b, v1.8b, v2.8b\nret",
  "giasm": "sshll v0.8h, v0.8b, #0\nmov w8, #7                          // =0x7\nmov w11, #6                         // =0x6\nsshll v1.4s, v0.4h, #0\nsshll2 v0.4s, v0.8h, #0\nmov w12, v1.s[2]\nmov w15, v0.s[2]\nfmov w9, s1\nfmov w14, s0\nmov w10, v1.s[1]\nmov w13, v1.s[3]\nsdiv w9, w9, w8\nsdiv w12, w12, w8\nmov v2.s[0], w9\nmov w9, v0.s[3]\nsdiv w14, w14, w8\nsdiv w8, w15, w8\nmov w15, v0.s[1]\nmov v3.s[0], w14\nsdiv w10, w10, w11\nsdiv w15, w15, w11\nmov v2.s[1], w10\nadrp x10, .LCPI0_0\nldr d4, [x10, :lo12:.LCPI0_0]\nsshll v4.8h, v4.8b, #0\nmov v2.s[2], w12\nsshll v5.4s, v4.4h, #0\nsshll2 v4.4s, v4.8h, #0\nsdiv w13, w13, w11\nmov v3.s[1], w15\nmov v3.s[2], w8\nsdiv w9, w9, w11\nmov v2.s[3], w13\nmls v1.4s, v2.4s, v5.4s\nmov v3.s[3], w9\nmls v0.4s, v3.4s, v4.4s\nuzp1 v0.8h, v1.8h, v0.8h\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i8> @test(<8 x i8> %a) {\n  %r = srem <8 x i8> %a, <i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6>\n  ret <8 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = srem <8 x i8> %a, <i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6>\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i8> %r"
 },
 {
  "instr": "srem",
  "ty": "<8 x i8>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 59,
  "lat": 7,
  "sizelat": 7,
  "size": 33,
  "gisize": 43,
  "extrasize": 0,
  "asm": "smov w11, v0.b[0]\nsxtb w9, w0\nsmov w8, v0.b[1]\nsmov w13, v0.b[2]\nsmov w15, v0.b[3]\nsmov w17, v0.b[4]\nsmov w0, v0.b[5]\nsdiv w12, w11, w9\nsdiv w10, w8, w9\nmsub w11, w12, w9, w11\nfmov s1, w11\nsmov w11, v0.b[6]\nsdiv w14, w13, w9\nmsub w8, w10, w9, w8\nmov v1.b[1], w8\nsdiv w16, w15, w9\nmsub w8, w14, w9, w13\nsmov w13, v0.b[7]\nmov v1.b[2], w8\nsdiv w18, w17, w9\nmsub w8, w16, w9, w15\nmov v1.b[3], w8\nsdiv w10, w0, w9\nmsub w8, w18, w9, w17\nmov v1.b[4], w8\nsdiv w12, w11, w9\nmsub w8, w10, w9, w0\nmov v1.b[5], w8\nsdiv w10, w13, w9\nmsub w8, w12, w9, w11\nmov v1.b[6], w8\nmsub w8, w10, w9, w13\nmov v1.b[7], w8\nfmov d0, d1\nret",
  "giasm": "dup v1.8b, w0\nsshll v0.8h, v0.8b, #0\nsshll v2.4s, v0.4h, #0\nsshll2 v0.4s, v0.8h, #0\nsshll v1.8h, v1.8b, #0\nfmov w8, s2\nsshll v3.4s, v1.4h, #0\nsshll2 v1.4s, v1.8h, #0\nfmov w9, s3\nmov w10, v3.s[1]\nmov w11, v3.s[2]\nmov w12, v3.s[3]\nfmov w13, s1\nmov w14, v1.s[1]\nmov w15, v1.s[2]\nsdiv w8, w8, w9\nmov w9, v2.s[1]\nsdiv w9, w9, w10\nmov w10, v2.s[2]\nmov v4.s[0], w8\nmov w8, v0.s[3]\nsdiv w10, w10, w11\nmov w11, v2.s[3]\nmov v4.s[1], w9\nsdiv w11, w11, w12\nfmov w12, s0\nmov v4.s[2], w10\nsdiv w12, w12, w13\nmov w13, v0.s[1]\nmov v4.s[3], w11\nmls v2.4s, v4.4s, v3.4s\nsdiv w13, w13, w14\nmov w14, v0.s[2]\nmov v5.s[0], w12\nmov w12, v1.s[3]\nsdiv w14, w14, w15\nmov v5.s[1], w13\nsdiv w8, w8, w12\nmov v5.s[2], w14\nmov v5.s[3], w8\nmls v0.4s, v5.4s, v1.4s\nuzp1 v0.8h, v2.8h, v0.8h\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i8> @test(<8 x i8> %a, i8 %bs) {\n  %i = insertelement <8 x i8> poison, i8 %bs, i64 0\n  %b = shufflevector <8 x i8> %i, <8 x i8> poison, <8 x i32> zeroinitializer\n  %r = srem <8 x i8> %a, %b\n  ret <8 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <8 x i8> poison, i8 %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <8 x i8> %i, <8 x i8> poison, <8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = srem <8 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i8> %r"
 },
 {
  "instr": "srem",
  "ty": "<8 x i8>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 6,
  "lat": 4,
  "sizelat": 4,
  "size": 8,
  "gisize": 36,
  "extrasize": 0,
  "asm": "movi v1.8b, #147\nmovi v2.8b, #7\nsmull v1.8h, v0.8b, v1.8b\nshrn v1.8b, v1.8h, #8\nadd v1.8b, v1.8b, v0.8b\nsshr v1.8b, v1.8b, #2\nusra v1.8b, v1.8b, #7\nmls v0.8b, v1.8b, v2.8b\nret",
  "giasm": "sshll v0.8h, v0.8b, #0\nmov w8, #7                          // =0x7\nmovi v4.8b, #7\nsshll v1.4s, v0.4h, #0\nsshll2 v0.4s, v0.8h, #0\nsshll v4.8h, v4.8b, #0\nfmov w9, s1\nfmov w13, s0\nmov w10, v1.s[1]\nmov w14, v0.s[1]\nmov w11, v1.s[2]\nmov w15, v0.s[2]\nmov w12, v1.s[3]\nsshll v5.4s, v4.4h, #0\nsshll2 v4.4s, v4.8h, #0\nsdiv w9, w9, w8\nsdiv w13, w13, w8\nmov v2.s[0], w9\nmov w9, v0.s[3]\nsdiv w10, w10, w8\nmov v3.s[0], w13\nsdiv w14, w14, w8\nmov v2.s[1], w10\nsdiv w11, w11, w8\nmov v3.s[1], w14\nsdiv w15, w15, w8\nmov v2.s[2], w11\nsdiv w12, w12, w8\nmov v3.s[2], w15\nsdiv w8, w9, w8\nmov v2.s[3], w12\nmls v1.4s, v2.4s, v5.4s\nmov v3.s[3], w8\nmls v0.4s, v3.4s, v4.4s\nuzp1 v0.8h, v1.8h, v0.8h\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i8> @test(<8 x i8> %a) {\n  %r = srem <8 x i8> %a, splat (i8 7)\n  ret <8 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = srem <8 x i8> %a, splat (i8 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i8> %r"
 },
 {
  "instr": "srem",
  "ty": "<16 x i8>",
  "variant": "binop",
  "codesize": 4,
  "thru": 112,
  "lat": 4,
  "sizelat": 4,
  "size": 90,
  "gisize": 83,
  "extrasize": 0,
  "asm": "stp x28, x27, [sp, #-80]!           // 16-byte Folded Spill\nstp x26, x25, [sp, #16]             // 16-byte Folded Spill\nstp x24, x23, [sp, #32]             // 16-byte Folded Spill\nstp x22, x21, [sp, #48]             // 16-byte Folded Spill\nstp x20, x19, [sp, #64]             // 16-byte Folded Spill\nsmov w11, v1.b[0]\nsmov w12, v0.b[0]\nsmov w8, v1.b[1]\nsmov w9, v0.b[1]\nsmov w14, v1.b[2]\nsmov w15, v0.b[2]\nsmov w17, v1.b[3]\nsmov w18, v0.b[3]\nsmov w1, v1.b[4]\nsmov w2, v0.b[4]\nsmov w4, v1.b[5]\nsmov w5, v0.b[5]\nsdiv w13, w12, w11\nsmov w7, v1.b[6]\nsmov w19, v0.b[6]\nsmov w21, v1.b[7]\nsmov w22, v0.b[7]\nsmov w24, v1.b[8]\nsmov w25, v0.b[8]\nsmov w27, v1.b[9]\nsmov w28, v0.b[9]\nsdiv w10, w9, w8\nmsub w11, w13, w11, w12\nsmov w13, v1.b[11]\nfmov s2, w11\nsmov w11, v0.b[10]\nsdiv w16, w15, w14\nmsub w8, w10, w8, w9\nsmov w10, v1.b[10]\nmov v2.b[1], w8\nsdiv w0, w18, w17\nmsub w8, w16, w14, w15\nsmov w14, v0.b[11]\nsmov w16, v1.b[12]\nmov v2.b[2], w8\nsdiv w3, w2, w1\nmsub w8, w0, w17, w18\nsmov w17, v0.b[12]\nsmov w0, v1.b[13]\nmov v2.b[3], w8\nsdiv w6, w5, w4\nmsub w8, w3, w1, w2\nsmov w1, v0.b[13]\nmov v2.b[4], w8\nsdiv w20, w19, w7\nmsub w8, w6, w4, w5\nmov v2.b[5], w8\nsdiv w23, w22, w21\nmsub w8, w20, w7, w19\nldp x20, x19, [sp, #64]             // 16-byte Folded Reload\nmov v2.b[6], w8\nsdiv w26, w25, w24\nmsub w8, w23, w21, w22\nldp x22, x21, [sp, #48]             // 16-byte Folded Reload\nmov v2.b[7], w8\nsdiv w9, w28, w27\nmsub w8, w26, w24, w25\nldp x24, x23, [sp, #32]             // 16-byte Folded Reload\nldp x26, x25, [sp, #16]             // 16-byte Folded Reload\nmov v2.b[8], w8\nsdiv w12, w11, w10\nmsub w8, w9, w27, w28\nmov v2.b[9], w8\nsdiv w15, w14, w13\nmsub w8, w12, w10, w11\nsmov w10, v1.b[14]\nsmov w11, v0.b[14]\nmov v2.b[10], w8\nsdiv w18, w17, w16\nmsub w8, w15, w13, w14\nsmov w13, v1.b[15]\nsmov w14, v0.b[15]\nmov v2.b[11], w8\nsdiv w9, w1, w0\nmsub w8, w18, w16, w17\nmov v2.b[12], w8\nsdiv w12, w11, w10\nmsub w8, w9, w0, w1\nmov v2.b[13], w8\nsdiv w9, w14, w13\nmsub w8, w12, w10, w11\nmov v2.b[14], w8\nmsub w8, w9, w13, w14\nmov v2.b[15], w8\nmov v0.16b, v2.16b\nldp x28, x27, [sp], #80             // 16-byte Folded Reload\nret",
  "giasm": "sshll v4.8h, v0.8b, #0\nsshll v5.8h, v1.8b, #0\nsshll2 v6.8h, v0.16b, #0\nsshll2 v7.8h, v1.16b, #0\nsshll v2.4s, v4.4h, #0\nsshll v3.4s, v5.4h, #0\nsshll2 v4.4s, v4.8h, #0\nsshll2 v5.4s, v5.8h, #0\nsshll v0.4s, v6.4h, #0\nsshll v1.4s, v7.4h, #0\nsshll2 v6.4s, v6.8h, #0\nsshll2 v7.4s, v7.8h, #0\nfmov w8, s2\nfmov w9, s3\nmov w12, v3.s[3]\nfmov w13, s5\nmov w16, v5.s[3]\nfmov w17, s1\nmov w18, v1.s[1]\nmov w0, v1.s[2]\nmov w1, v1.s[3]\nsdiv w11, w8, w9\nmov w8, v2.s[1]\nmov w9, v3.s[1]\nfmov w2, s7\nmov w3, v7.s[1]\nmov w4, v7.s[2]\nsdiv w10, w8, w9\nmov w8, v2.s[2]\nmov w9, v3.s[2]\nmov v16.s[0], w11\nmov w11, v6.s[3]\nsdiv w9, w8, w9\nmov w8, v2.s[3]\nmov v16.s[1], w10\nsdiv w8, w8, w12\nfmov w12, s4\nmov v16.s[2], w9\nsdiv w14, w12, w13\nmov w12, v4.s[1]\nmov w13, v5.s[1]\nmov v16.s[3], w8\nmls v2.4s, v16.4s, v3.4s\nsdiv w15, w12, w13\nmov w12, v4.s[2]\nmov w13, v5.s[2]\nmov v17.s[0], w14\nmov w14, v7.s[3]\nsdiv w13, w12, w13\nmov w12, v4.s[3]\nmov v17.s[1], w15\nsdiv w12, w12, w16\nfmov w16, s0\nmov v17.s[2], w13\nsdiv w16, w16, w17\nmov w17, v0.s[1]\nmov v17.s[3], w12\nmls v4.4s, v17.4s, v5.4s\nsdiv w17, w17, w18\nmov w18, v0.s[2]\nmov v18.s[0], w16\nsdiv w18, w18, w0\nmov w0, v0.s[3]\nmov v18.s[1], w17\nsdiv w0, w0, w1\nfmov w1, s6\nmov v18.s[2], w18\nsdiv w1, w1, w2\nmov w2, v6.s[1]\nmov v18.s[3], w0\nmls v0.4s, v18.4s, v1.4s\nuzp1 v1.8h, v2.8h, v4.8h\nsdiv w2, w2, w3\nmov w3, v6.s[2]\nmov v19.s[0], w1\nsdiv w3, w3, w4\nmov v19.s[1], w2\nsdiv w10, w11, w14\nmov v19.s[2], w3\nmov v19.s[3], w10\nmls v6.4s, v19.4s, v7.4s\nuzp1 v0.8h, v0.8h, v6.8h\nuzp1 v0.16b, v1.16b, v0.16b\nret",
  "ll": "define <16 x i8> @test(<16 x i8> %a, <16 x i8> %b) {\n  %r = srem <16 x i8> %a, %b\n  ret <16 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = srem <16 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i8> %r"
 },
 {
  "instr": "srem",
  "ty": "<16 x i8>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 54,
  "lat": 4,
  "sizelat": 4,
  "size": 13,
  "gisize": 68,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nmovi v3.8h, #254\nldr q1, [x8, :lo12:.LCPI0_0]\nadrp x8, .LCPI0_1\nsmull2 v2.8h, v0.16b, v1.16b\nsmull v1.8h, v0.8b, v1.8b\nuzp2 v1.16b, v1.16b, v2.16b\nmov v2.16b, v0.16b\nbic v2.8h, #255, lsl #8\nadd v1.16b, v1.16b, v2.16b\nldr q2, [x8, :lo12:.LCPI0_1]\nsshl v1.16b, v1.16b, v3.16b\nusra v1.16b, v1.16b, #7\nmls v0.16b, v1.16b, v2.16b\nret",
  "giasm": "sshll v2.8h, v0.8b, #0\nsshll2 v3.8h, v0.16b, #0\nmov w8, #7                          // =0x7\nmov w11, #6                         // =0x6\nsshll v1.4s, v2.4h, #0\nsshll2 v2.4s, v2.8h, #0\nsshll v0.4s, v3.4h, #0\nsshll2 v3.4s, v3.8h, #0\nfmov w9, s1\nmov w16, v2.s[2]\nmov w1, v0.s[2]\nmov w4, v3.s[2]\nfmov w14, s2\nfmov w18, s0\nfmov w3, s3\nmov w15, v2.s[1]\nmov w0, v0.s[1]\nsdiv w13, w9, w8\nmov w9, v1.s[1]\nmov w17, v2.s[3]\nmov w2, v0.s[3]\nsdiv w12, w9, w11\nmov w9, v1.s[2]\nmov v4.s[0], w13\nmov w13, v3.s[3]\nsdiv w10, w9, w8\nmov w9, v1.s[3]\nmov v4.s[1], w12\nadrp x12, .LCPI0_0\nldr d16, [x12, :lo12:.LCPI0_0]\nsshll v16.8h, v16.8b, #0\nsshll v17.4s, v16.4h, #0\nsshll2 v16.4s, v16.8h, #0\nsdiv w14, w14, w8\nmov v4.s[2], w10\nsdiv w16, w16, w8\nmov v5.s[0], w14\nsdiv w18, w18, w8\nsdiv w1, w1, w8\nmov v6.s[0], w18\nsdiv w3, w3, w8\nsdiv w8, w4, w8\nmov w4, v3.s[1]\nmov v7.s[0], w3\nsdiv w15, w15, w11\nsdiv w0, w0, w11\nmov v5.s[1], w15\nmov v5.s[2], w16\nsdiv w4, w4, w11\nmov v6.s[1], w0\nmov v6.s[2], w1\nsdiv w9, w9, w11\nmov v7.s[1], w4\nmov v7.s[2], w8\nsdiv w17, w17, w11\nmov v4.s[3], w9\nmls v1.4s, v4.4s, v17.4s\nsdiv w2, w2, w11\nmov v5.s[3], w17\nmls v2.4s, v5.4s, v16.4s\nsdiv w11, w13, w11\nmov v6.s[3], w2\nuzp1 v1.8h, v1.8h, v2.8h\nmls v0.4s, v6.4s, v17.4s\nmov v7.s[3], w11\nmls v3.4s, v7.4s, v16.4s\nuzp1 v0.8h, v0.8h, v3.8h\nuzp1 v0.16b, v1.16b, v0.16b\nret",
  "ll": "define <16 x i8> @test(<16 x i8> %a) {\n  %r = srem <16 x i8> %a, <i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6>\n  ret <16 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = srem <16 x i8> %a, <i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6>\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i8> %r"
 },
 {
  "instr": "srem",
  "ty": "<16 x i8>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 115,
  "lat": 7,
  "sizelat": 7,
  "size": 67,
  "gisize": 84,
  "extrasize": 0,
  "asm": "str x19, [sp, #-16]!                // 8-byte Folded Spill\nsmov w11, v0.b[0]\nsxtb w8, w0\nsmov w9, v0.b[1]\nsmov w13, v0.b[2]\nsmov w15, v0.b[3]\nsmov w17, v0.b[4]\nsmov w0, v0.b[5]\nsmov w2, v0.b[6]\nsmov w4, v0.b[7]\nsmov w6, v0.b[8]\nsmov w19, v0.b[9]\nsdiv w12, w11, w8\nsdiv w10, w9, w8\nmsub w11, w12, w8, w11\nfmov s1, w11\nsmov w11, v0.b[10]\nsdiv w14, w13, w8\nmsub w9, w10, w8, w9\nmov v1.b[1], w9\nsdiv w16, w15, w8\nmsub w9, w14, w8, w13\nsmov w13, v0.b[11]\nmov v1.b[2], w9\nsdiv w18, w17, w8\nmsub w9, w16, w8, w15\nsmov w15, v0.b[12]\nmov v1.b[3], w9\nsdiv w1, w0, w8\nmsub w9, w18, w8, w17\nsmov w17, v0.b[13]\nmov v1.b[4], w9\nsdiv w3, w2, w8\nmsub w9, w1, w8, w0\nmov v1.b[5], w9\nsdiv w5, w4, w8\nmsub w9, w3, w8, w2\nmov v1.b[6], w9\nsdiv w7, w6, w8\nmsub w9, w5, w8, w4\nmov v1.b[7], w9\nsdiv w10, w19, w8\nmsub w9, w7, w8, w6\nmov v1.b[8], w9\nsdiv w12, w11, w8\nmsub w9, w10, w8, w19\nmov v1.b[9], w9\nsdiv w14, w13, w8\nmsub w9, w12, w8, w11\nsmov w11, v0.b[14]\nmov v1.b[10], w9\nsdiv w16, w15, w8\nmsub w9, w14, w8, w13\nsmov w13, v0.b[15]\nmov v1.b[11], w9\nsdiv w10, w17, w8\nmsub w9, w16, w8, w15\nmov v1.b[12], w9\nsdiv w12, w11, w8\nmsub w9, w10, w8, w17\nmov v1.b[13], w9\nsdiv w10, w13, w8\nmsub w9, w12, w8, w11\nmov v1.b[14], w9\nmsub w8, w10, w8, w13\nmov v1.b[15], w8\nmov v0.16b, v1.16b\nldr x19, [sp], #16                  // 8-byte Folded Reload\nret",
  "giasm": "dup v5.16b, w0\nsshll v3.8h, v0.8b, #0\nsshll2 v6.8h, v0.16b, #0\nsshll v4.8h, v5.8b, #0\nsshll v1.4s, v3.4h, #0\nsshll2 v3.4s, v3.8h, #0\nsshll2 v7.8h, v5.16b, #0\nsshll v0.4s, v6.4h, #0\nsshll2 v6.4s, v6.8h, #0\nsshll v2.4s, v4.4h, #0\nfmov w8, s1\nsshll2 v4.4s, v4.8h, #0\nsshll v5.4s, v7.4h, #0\nsshll2 v7.4s, v7.8h, #0\nfmov w9, s2\nmov w12, v2.s[3]\nfmov w13, s4\nmov w16, v4.s[3]\nfmov w17, s5\nmov w18, v5.s[1]\nmov w0, v5.s[2]\nmov w1, v5.s[3]\nfmov w2, s7\nsdiv w11, w8, w9\nmov w8, v1.s[1]\nmov w9, v2.s[1]\nmov w3, v7.s[1]\nmov w4, v7.s[2]\nsdiv w10, w8, w9\nmov w8, v1.s[2]\nmov w9, v2.s[2]\nmov v16.s[0], w11\nmov w11, v6.s[3]\nsdiv w9, w8, w9\nmov w8, v1.s[3]\nmov v16.s[1], w10\nsdiv w8, w8, w12\nfmov w12, s3\nmov v16.s[2], w9\nsdiv w14, w12, w13\nmov w12, v3.s[1]\nmov w13, v4.s[1]\nmov v16.s[3], w8\nmls v1.4s, v16.4s, v2.4s\nsdiv w15, w12, w13\nmov w12, v3.s[2]\nmov w13, v4.s[2]\nmov v17.s[0], w14\nmov w14, v7.s[3]\nsdiv w13, w12, w13\nmov w12, v3.s[3]\nmov v17.s[1], w15\nsdiv w12, w12, w16\nfmov w16, s0\nmov v17.s[2], w13\nsdiv w16, w16, w17\nmov w17, v0.s[1]\nmov v17.s[3], w12\nmls v3.4s, v17.4s, v4.4s\nsdiv w17, w17, w18\nmov w18, v0.s[2]\nmov v18.s[0], w16\nuzp1 v1.8h, v1.8h, v3.8h\nsdiv w18, w18, w0\nmov w0, v0.s[3]\nmov v18.s[1], w17\nsdiv w0, w0, w1\nfmov w1, s6\nmov v18.s[2], w18\nsdiv w1, w1, w2\nmov w2, v6.s[1]\nmov v18.s[3], w0\nmls v0.4s, v18.4s, v5.4s\nsdiv w2, w2, w3\nmov w3, v6.s[2]\nmov v19.s[0], w1\nsdiv w3, w3, w4\nmov v19.s[1], w2\nsdiv w10, w11, w14\nmov v19.s[2], w3\nmov v19.s[3], w10\nmls v6.4s, v19.4s, v7.4s\nuzp1 v0.8h, v0.8h, v6.8h\nuzp1 v0.16b, v1.16b, v0.16b\nret",
  "ll": "define <16 x i8> @test(<16 x i8> %a, i8 %bs) {\n  %i = insertelement <16 x i8> poison, i8 %bs, i64 0\n  %b = shufflevector <16 x i8> %i, <16 x i8> poison, <16 x i32> zeroinitializer\n  %r = srem <16 x i8> %a, %b\n  ret <16 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <16 x i8> poison, i8 %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <16 x i8> %i, <16 x i8> poison, <16 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = srem <16 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i8> %r"
 },
 {
  "instr": "srem",
  "ty": "<16 x i8>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 6,
  "lat": 4,
  "sizelat": 4,
  "size": 9,
  "gisize": 66,
  "extrasize": 0,
  "asm": "movi v1.16b, #147\nsmull2 v2.8h, v0.16b, v1.16b\nsmull v1.8h, v0.8b, v1.8b\nuzp2 v1.16b, v1.16b, v2.16b\nmovi v2.16b, #7\nadd v1.16b, v1.16b, v0.16b\nsshr v1.16b, v1.16b, #2\nusra v1.16b, v1.16b, #7\nmls v0.16b, v1.16b, v2.16b\nret",
  "giasm": "sshll v2.8h, v0.8b, #0\nsshll2 v3.8h, v0.16b, #0\nmov w8, #7                          // =0x7\nmovi v16.8b, #7\nsshll v1.4s, v2.4h, #0\nsshll2 v2.4s, v2.8h, #0\nsshll v0.4s, v3.4h, #0\nsshll2 v3.4s, v3.8h, #0\nsshll v16.8h, v16.8b, #0\nfmov w9, s1\nfmov w13, s2\nfmov w17, s0\nfmov w2, s3\nmov w14, v2.s[1]\nmov w18, v0.s[1]\nmov w3, v3.s[1]\nmov w15, v2.s[2]\nmov w0, v0.s[2]\nsdiv w12, w9, w8\nmov w9, v1.s[1]\nmov w4, v3.s[2]\nmov w16, v2.s[3]\nmov w1, v0.s[3]\nsshll v17.4s, v16.4h, #0\nsshll2 v16.4s, v16.8h, #0\nsdiv w13, w13, w8\nmov v4.s[0], w12\nmov w12, v3.s[3]\nsdiv w17, w17, w8\nmov v5.s[0], w13\nsdiv w2, w2, w8\nmov v6.s[0], w17\nsdiv w11, w9, w8\nmov w9, v1.s[2]\nmov v7.s[0], w2\nsdiv w14, w14, w8\nmov v4.s[1], w11\nsdiv w18, w18, w8\nmov v5.s[1], w14\nsdiv w3, w3, w8\nmov v6.s[1], w18\nsdiv w10, w9, w8\nmov w9, v1.s[3]\nmov v7.s[1], w3\nsdiv w15, w15, w8\nmov v4.s[2], w10\nsdiv w0, w0, w8\nmov v5.s[2], w15\nsdiv w4, w4, w8\nmov v6.s[2], w0\nsdiv w9, w9, w8\nmov v7.s[2], w4\nsdiv w16, w16, w8\nmov v4.s[3], w9\nmls v1.4s, v4.4s, v17.4s\nsdiv w1, w1, w8\nmov v5.s[3], w16\nmls v2.4s, v5.4s, v16.4s\nsdiv w8, w12, w8\nmov v6.s[3], w1\nuzp1 v1.8h, v1.8h, v2.8h\nmls v0.4s, v6.4s, v17.4s\nmov v7.s[3], w8\nmls v3.4s, v7.4s, v16.4s\nuzp1 v0.8h, v0.8h, v3.8h\nuzp1 v0.16b, v1.16b, v0.16b\nret",
  "ll": "define <16 x i8> @test(<16 x i8> %a) {\n  %r = srem <16 x i8> %a, splat (i8 7)\n  ret <16 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = srem <16 x i8> %a, splat (i8 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i8> %r"
 },
 {
  "instr": "srem",
  "ty": "<32 x i8>",
  "variant": "binop",
  "codesize": 4,
  "thru": 224,
  "lat": 4,
  "sizelat": 4,
  "size": 250,
  "gisize": 194,
  "extrasize": 0,
  "asm": "sub sp, sp, #304\nstp x29, x30, [sp, #208]            // 16-byte Folded Spill\nstp x28, x27, [sp, #224]            // 16-byte Folded Spill\nstp x26, x25, [sp, #240]            // 16-byte Folded Spill\nstp x24, x23, [sp, #256]            // 16-byte Folded Spill\nstp x22, x21, [sp, #272]            // 16-byte Folded Spill\nstp x20, x19, [sp, #288]            // 16-byte Folded Spill\nsmov w8, v2.b[1]\nsmov w9, v0.b[1]\nsmov w19, v3.b[7]\nsmov w7, v1.b[7]\nsmov w6, v3.b[8]\nsmov w3, v1.b[8]\nsmov w13, v3.b[0]\nsmov w5, v3.b[1]\nsmov w0, v1.b[1]\nsmov w12, v3.b[2]\nsmov w17, v3.b[3]\nsmov w16, v1.b[3]\nstr w8, [sp, #80]                   // 4-byte Folded Spill\nsdiv w10, w9, w8\nsmov w8, v2.b[0]\nstr w9, [sp, #88]                   // 4-byte Folded Spill\nsmov w9, v0.b[0]\nldr w30, [sp, #80]                  // 4-byte Folded Reload\nsmov w15, v3.b[4]\nsmov w14, v1.b[4]\nsmov w4, v3.b[5]\nsmov w1, v1.b[5]\nsmov w2, v3.b[6]\nsmov w18, v1.b[6]\nstr w8, [sp, #32]                   // 4-byte Folded Spill\nsmov w21, v3.b[9]\nsmov w20, v1.b[9]\nstr w9, [sp, #40]                   // 4-byte Folded Spill\nldr w29, [sp, #32]                  // 4-byte Folded Reload\nsdiv w11, w9, w8\nsmov w8, v2.b[2]\nsmov w9, v0.b[2]\nstr w10, [sp, #96]                  // 4-byte Folded Spill\nstp w8, w9, [sp, #16]               // 8-byte Folded Spill\nsdiv w10, w9, w8\nsmov w8, v2.b[3]\nsmov w9, v0.b[3]\nstp w11, w8, [sp, #48]              // 8-byte Folded Spill\nstr w10, [sp, #24]                  // 4-byte Folded Spill\nsdiv w10, w9, w8\nsmov w8, v2.b[4]\nstr w8, [sp, #28]                   // 4-byte Folded Spill\nstp w9, w10, [sp, #56]              // 8-byte Folded Spill\nsmov w9, v0.b[4]\nsdiv w27, w0, w5\nstr w9, [sp, #36]                   // 4-byte Folded Spill\nsdiv w10, w9, w8\nsmov w8, v2.b[5]\nsmov w9, v0.b[5]\nstr w8, [sp, #76]                   // 4-byte Folded Spill\nstr w9, [sp, #84]                   // 4-byte Folded Spill\nstr w10, [sp, #44]                  // 4-byte Folded Spill\nsdiv w10, w9, w8\nsmov w8, v2.b[6]\nsmov w9, v0.b[6]\nstp w8, w9, [sp, #64]               // 8-byte Folded Spill\nstr w10, [sp, #92]                  // 4-byte Folded Spill\nsdiv w10, w9, w8\nsmov w8, v2.b[7]\nsmov w9, v0.b[7]\nstp w8, w9, [sp, #112]              // 8-byte Folded Spill\nsdiv w11, w9, w8\nsmov w8, v2.b[8]\nsmov w9, v0.b[8]\nstr w10, [sp, #72]                  // 4-byte Folded Spill\nstp w8, w9, [sp, #100]              // 8-byte Folded Spill\nsdiv w10, w9, w8\nsmov w8, v2.b[9]\nsmov w9, v0.b[9]\nstp w8, w9, [sp, #136]              // 8-byte Folded Spill\nstr w10, [sp, #108]                 // 4-byte Folded Spill\nsdiv w10, w9, w8\nsmov w8, v2.b[10]\nsmov w9, v0.b[10]\nstp w11, w8, [sp, #120]             // 8-byte Folded Spill\nstr w10, [sp, #144]                 // 4-byte Folded Spill\nsdiv w10, w9, w8\nsmov w8, v2.b[11]\nstp w9, w10, [sp, #128]             // 8-byte Folded Spill\nsmov w9, v0.b[11]\nsdiv w25, w16, w17\nstp w8, w9, [sp, #172]              // 8-byte Folded Spill\nsdiv w11, w9, w8\nsmov w8, v2.b[12]\nsmov w9, v0.b[12]\nstr w8, [sp, #152]                  // 4-byte Folded Spill\nstr w9, [sp, #160]                  // 4-byte Folded Spill\nsdiv w10, w9, w8\nsmov w8, v2.b[13]\nsmov w9, v0.b[13]\nstp w8, w9, [sp, #196]              // 8-byte Folded Spill\nstr w10, [sp, #168]                 // 4-byte Folded Spill\nsdiv w10, w9, w8\nsmov w8, v2.b[14]\nsmov w9, v0.b[14]\nstp w11, w8, [sp, #180]             // 8-byte Folded Spill\nsmov w11, v1.b[2]\nstr w10, [sp, #204]                 // 4-byte Folded Spill\nsdiv w10, w9, w8\nsmov w8, v2.b[15]\nstr w8, [sp, #148]                  // 4-byte Folded Spill\nstp w9, w10, [sp, #188]             // 8-byte Folded Spill\nsmov w9, v0.b[15]\nsdiv w22, w11, w12\nstr w9, [sp, #156]                  // 4-byte Folded Spill\nsdiv w10, w9, w8\nstr w10, [sp, #164]                 // 4-byte Folded Spill\nsmov w10, v1.b[0]\nsdiv w9, w7, w19\nsdiv w8, w3, w6\nsdiv w23, w10, w13\nstp w8, w9, [sp, #8]                // 8-byte Folded Spill\nldr w8, [sp, #96]                   // 4-byte Folded Reload\nldr w9, [sp, #88]                   // 4-byte Folded Reload\nmsub w9, w8, w30, w9\nldr w8, [sp, #48]                   // 4-byte Folded Reload\nldr w30, [sp, #40]                  // 4-byte Folded Reload\nmsub w8, w8, w29, w30\nldp x29, x30, [sp, #208]            // 16-byte Folded Reload\nfmov s0, w8\nmsub w10, w23, w13, w10\nsdiv w24, w14, w15\nmsub w13, w27, w5, w0\nldr w5, [sp, #16]                   // 4-byte Folded Reload\nmov v0.b[1], w9\nmsub w9, w22, w12, w11\nsmov w11, v1.b[10]\nfmov s2, w10\nldp w10, w8, [sp, #20]              // 8-byte Folded Reload\nmov v2.b[1], w13\nmsub w8, w8, w5, w10\nldr w5, [sp, #52]                   // 4-byte Folded Reload\nsmov w10, v3.b[10]\nsdiv w28, w1, w4\nldp w13, w12, [sp, #56]             // 8-byte Folded Reload\nmov v2.b[2], w9\nmov v0.b[2], w8\nmsub w8, w25, w17, w16\nldr w17, [sp, #28]                  // 4-byte Folded Reload\nldr w16, [sp, #36]                  // 4-byte Folded Reload\nmsub w12, w12, w5, w13\nldr w13, [sp, #44]                  // 4-byte Folded Reload\nldr w5, [sp, #136]                  // 4-byte Folded Reload\nmov v2.b[3], w8\nmsub w8, w24, w15, w14\nldr w15, [sp, #92]                  // 4-byte Folded Reload\nmov v0.b[3], w12\nmsub w13, w13, w17, w16\nldr w17, [sp, #76]                  // 4-byte Folded Reload\nsdiv w26, w18, w2\nldr w16, [sp, #84]                  // 4-byte Folded Reload\nsmov w12, v3.b[11]\nmsub w15, w15, w17, w16\nsmov w14, v1.b[11]\nmov v2.b[4], w8\nmsub w8, w28, w4, w1\nldr w1, [sp, #64]                   // 4-byte Folded Reload\nmov v0.b[4], w13\nldr w4, [sp, #100]                  // 4-byte Folded Reload\nldp w17, w16, [sp, #68]             // 8-byte Folded Reload\nldp x24, x23, [sp, #256]            // 16-byte Folded Reload\nmov v2.b[5], w8\nldp x28, x27, [sp, #224]            // 16-byte Folded Reload\nmov v0.b[5], w15\nmsub w16, w16, w1, w17\nsmov w15, v3.b[12]\nmsub w8, w26, w2, w18\nldr w2, [sp, #112]                  // 4-byte Folded Reload\nsdiv w0, w20, w21\nldp w1, w18, [sp, #116]             // 8-byte Folded Reload\nsmov w17, v1.b[12]\nldp x26, x25, [sp, #240]            // 16-byte Folded Reload\nmov v2.b[6], w8\nldr w8, [sp, #12]                   // 4-byte Folded Reload\nmov v0.b[6], w16\nmsub w18, w18, w2, w1\nmsub w8, w8, w19, w7\nldp w2, w1, [sp, #104]              // 8-byte Folded Reload\nmov v0.b[7], w18\nsmov w18, v3.b[13]\nmov v2.b[7], w8\nldr w8, [sp, #8]                    // 4-byte Folded Reload\nsdiv w9, w11, w10\nmsub w1, w1, w4, w2\nsmov w2, v1.b[13]\nmsub w8, w8, w6, w3\nldp w4, w3, [sp, #140]              // 8-byte Folded Reload\nmov v0.b[8], w1\nmov v2.b[8], w8\nmsub w8, w0, w21, w20\nmsub w3, w3, w5, w4\nldr w5, [sp, #124]                  // 4-byte Folded Reload\nldp w4, w1, [sp, #128]              // 8-byte Folded Reload\nsdiv w13, w14, w12\nldp x20, x19, [sp, #288]            // 16-byte Folded Reload\nmov v2.b[9], w8\nmov v0.b[9], w3\nmsub w8, w9, w10, w11\nmsub w1, w1, w5, w4\nldr w4, [sp, #172]                  // 4-byte Folded Reload\nsmov w9, v3.b[14]\nldp w3, w11, [sp, #176]             // 8-byte Folded Reload\nsmov w10, v1.b[14]\nldp x22, x21, [sp, #272]            // 16-byte Folded Reload\nmov v2.b[10], w8\nmov v0.b[10], w1\nldr w1, [sp, #152]                  // 4-byte Folded Reload\nmsub w11, w11, w4, w3\nsdiv w16, w17, w15\nmsub w8, w13, w12, w14\nldr w13, [sp, #168]                 // 4-byte Folded Reload\nldr w14, [sp, #160]                 // 4-byte Folded Reload\nmov v0.b[11], w11\nsmov w11, v3.b[15]\nmsub w13, w13, w1, w14\nsmov w14, v1.b[15]\nmov v2.b[11], w8\nmov v0.b[12], w13\nsdiv w0, w2, w18\nmsub w8, w16, w15, w17\nldr w17, [sp, #196]                 // 4-byte Folded Reload\nldp w16, w15, [sp, #200]            // 8-byte Folded Reload\nmov v2.b[12], w8\nmsub w15, w15, w17, w16\nldp w17, w16, [sp, #188]            // 8-byte Folded Reload\nmov v0.b[13], w15\nsdiv w12, w10, w9\nmsub w8, w0, w18, w2\nldr w18, [sp, #184]                 // 4-byte Folded Reload\nmsub w16, w16, w18, w17\nmov v2.b[13], w8\nmov v0.b[14], w16\nsdiv w13, w14, w11\nmsub w8, w12, w9, w10\nldr w9, [sp, #164]                  // 4-byte Folded Reload\nldr w12, [sp, #148]                 // 4-byte Folded Reload\nldr w10, [sp, #156]                 // 4-byte Folded Reload\nmov v2.b[14], w8\nmsub w9, w9, w12, w10\nmov v0.b[15], w9\nmsub w8, w13, w11, w14\nmov v2.b[15], w8\nmov v1.16b, v2.16b\nadd sp, sp, #304\nret",
  "giasm": "stp x29, x30, [sp, #-96]!           // 16-byte Folded Spill\nstp x28, x27, [sp, #16]             // 16-byte Folded Spill\nstp x26, x25, [sp, #32]             // 16-byte Folded Spill\nstp x24, x23, [sp, #48]             // 16-byte Folded Spill\nstp x22, x21, [sp, #64]             // 16-byte Folded Spill\nstp x20, x19, [sp, #80]             // 16-byte Folded Spill\nsshll v4.8h, v0.8b, #0\nsshll v5.8h, v2.8b, #0\nsshll v16.8h, v1.8b, #0\nsshll v17.8h, v3.8b, #0\nsshll v6.4s, v4.4h, #0\nsshll v7.4s, v5.4h, #0\nsshll2 v4.4s, v4.8h, #0\nsshll2 v5.4s, v5.8h, #0\nsshll v18.4s, v16.4h, #0\nsshll v19.4s, v17.4h, #0\nsshll2 v16.4s, v16.8h, #0\nsshll2 v17.4s, v17.8h, #0\nfmov w8, s6\nfmov w9, s7\nmov w12, v7.s[3]\nfmov w13, s5\nmov w16, v5.s[3]\nfmov w6, s19\nmov w7, v19.s[3]\nfmov w21, s17\nmov w23, v17.s[3]\nsdiv w11, w8, w9\nmov w8, v6.s[1]\nmov w9, v7.s[1]\nsdiv w10, w8, w9\nmov w8, v6.s[2]\nmov w9, v7.s[2]\nmov v20.s[0], w11\nsdiv w9, w8, w9\nmov w8, v6.s[3]\nsshll2 v6.8h, v0.16b, #0\nmov v20.s[1], w10\nsshll v0.8h, v0.8b, #0\nsshll v28.4s, v0.4h, #0\nsshll2 v0.4s, v0.8h, #0\nsdiv w8, w8, w12\nfmov w12, s4\nmov v20.s[2], w9\nsdiv w15, w12, w13\nmov w12, v4.s[1]\nmov w13, v5.s[1]\nmov v20.s[3], w8\nsdiv w14, w12, w13\nmov w12, v4.s[2]\nmov w13, v5.s[2]\nsshll v5.4s, v6.4h, #0\nmov v21.s[0], w15\nsdiv w13, w12, w13\nmov w12, v4.s[3]\nsshll2 v4.8h, v2.16b, #0\nmov v21.s[1], w14\nsshll v2.8h, v2.8b, #0\nsshll v7.4s, v4.4h, #0\nsshll v30.4s, v2.4h, #0\nsshll2 v2.4s, v2.8h, #0\nfmov w17, s7\nmls v28.4s, v20.4s, v30.4s\nsdiv w12, w12, w16\nfmov w16, s5\nmov v21.s[2], w13\nsdiv w1, w16, w17\nmov w16, v5.s[1]\nmov w17, v7.s[1]\nmov v21.s[3], w12\nmls v0.4s, v21.4s, v2.4s\nsdiv w0, w16, w17\nmov w16, v5.s[2]\nmov w17, v7.s[2]\nmov v22.s[0], w1\nuzp1 v0.8h, v28.8h, v0.8h\nsdiv w18, w16, w17\nmov w16, v5.s[3]\nmov w17, v7.s[3]\nsshll2 v5.4s, v6.8h, #0\nsshll2 v7.4s, v4.8h, #0\nmov v22.s[1], w0\nsshll v6.4s, v6.4h, #0\nsshll v4.4s, v4.4h, #0\nfmov w2, s7\nmov w4, v7.s[3]\nsdiv w16, w16, w17\nfmov w17, s5\nmov v22.s[2], w18\nsdiv w5, w17, w2\nmov w17, v5.s[1]\nmov w2, v7.s[1]\nmov v22.s[3], w16\nmls v6.4s, v22.4s, v4.4s\nsdiv w3, w17, w2\nmov w17, v5.s[2]\nmov w2, v7.s[2]\nmov v23.s[0], w5\nsdiv w2, w17, w2\nmov w17, v5.s[3]\nmov v23.s[1], w3\nsdiv w17, w17, w4\nfmov w4, s18\nmov v23.s[2], w2\nsdiv w20, w4, w6\nmov w4, v18.s[1]\nmov w6, v19.s[1]\nmov v23.s[3], w17\nmls v5.4s, v23.4s, v7.4s\nsdiv w19, w4, w6\nmov w4, v18.s[2]\nmov w6, v19.s[2]\nmov v24.s[0], w20\nuzp1 v2.8h, v6.8h, v5.8h\nuzp1 v0.16b, v0.16b, v2.16b\nsdiv w6, w4, w6\nmov w4, v18.s[3]\nmov v24.s[1], w19\nldp x20, x19, [sp, #80]             // 16-byte Folded Reload\nsdiv w4, w4, w7\nfmov w7, s16\nmov v24.s[2], w6\nsdiv w24, w7, w21\nmov w7, v16.s[1]\nmov w21, v17.s[1]\nmov v24.s[3], w4\nsdiv w22, w7, w21\nmov w7, v16.s[2]\nmov w21, v17.s[2]\nsshll2 v17.8h, v1.16b, #0\nmov v25.s[0], w24\nsshll v1.8h, v1.8b, #0\nsshll v18.4s, v17.4h, #0\nsshll v29.4s, v1.4h, #0\nsshll2 v1.4s, v1.8h, #0\nsdiv w21, w7, w21\nmov w7, v16.s[3]\nsshll2 v16.8h, v3.16b, #0\nmov v25.s[1], w22\nsshll v3.8h, v3.8b, #0\nsshll v19.4s, v16.4h, #0\nsshll v31.4s, v3.4h, #0\nsshll2 v3.4s, v3.8h, #0\nfmov w25, s19\nmov w26, v19.s[1]\nmov w27, v19.s[2]\nmov w28, v19.s[3]\nsshll2 v19.4s, v16.8h, #0\nsshll v16.4s, v16.4h, #0\nsdiv w7, w7, w23\nfmov w23, s18\nmov v25.s[2], w21\nmls v29.4s, v24.4s, v31.4s\nldp x22, x21, [sp, #64]             // 16-byte Folded Reload\nfmov w29, s19\nmov w30, v19.s[1]\nmov w15, v19.s[2]\nsdiv w25, w23, w25\nmov w23, v18.s[1]\nmov v25.s[3], w7\nmls v1.4s, v25.4s, v3.4s\nsdiv w26, w23, w26\nmov w23, v18.s[2]\nmov v26.s[0], w25\nuzp1 v1.8h, v29.8h, v1.8h\nsdiv w27, w23, w27\nmov w23, v18.s[3]\nsshll2 v18.4s, v17.8h, #0\nmov v26.s[1], w26\nsshll v17.4s, v17.4h, #0\nldp x26, x25, [sp, #32]             // 16-byte Folded Reload\nmov w11, v18.s[2]\nmov w9, v18.s[3]\nsdiv w23, w23, w28\nfmov w28, s18\nmov v26.s[2], w27\nsdiv w28, w28, w29\nmov w29, v18.s[1]\nmov v26.s[3], w23\nldp x24, x23, [sp, #48]             // 16-byte Folded Reload\nmls v17.4s, v26.4s, v16.4s\nsdiv w29, w29, w30\nmov v27.s[0], w28\nldp x28, x27, [sp, #16]             // 16-byte Folded Reload\nsdiv w10, w11, w15\nmov w11, v19.s[3]\nmov v27.s[1], w29\nsdiv w8, w9, w11\nmov v27.s[2], w10\nmov v27.s[3], w8\nmls v18.4s, v27.4s, v19.4s\nuzp1 v3.8h, v17.8h, v18.8h\nuzp1 v1.16b, v1.16b, v3.16b\nldp x29, x30, [sp], #96             // 16-byte Folded Reload\nret",
  "ll": "define <32 x i8> @test(<32 x i8> %a, <32 x i8> %b) {\n  %r = srem <32 x i8> %a, %b\n  ret <32 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = srem <32 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i8> %r"
 },
 {
  "instr": "srem",
  "ty": "<32 x i8>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 102,
  "lat": 4,
  "sizelat": 4,
  "size": 265,
  "gisize": 153,
  "extrasize": 0,
  "asm": "str x21, [sp, #-32]!                // 8-byte Folded Spill\nstp x20, x19, [sp, #16]             // 16-byte Folded Spill\nsmov w14, v0.b[1]\nsmov w12, v0.b[0]\nmov w8, #43691                      // =0xaaab\nsmov w16, v0.b[5]\nmovk w8, #10922, lsl #16\nmov w9, #9363                       // =0x2493\nmovk w9, #37449, lsl #16\nsmov w11, v0.b[2]\nsmov w15, v0.b[3]\nsmov w2, v1.b[1]\nsmov w13, v0.b[4]\nsmov w1, v1.b[0]\nsmull x17, w14, w8\nmov w10, #6                         // =0x6\nsmov w18, v0.b[7]\nsmull x0, w12, w9\nsmull x6, w16, w8\nlsr x19, x17, #63\nlsr x17, x17, #32\nsmull x3, w11, w9\nlsr x0, x0, #32\nsmull x4, w15, w8\nadd w17, w17, w19\nlsr x19, x6, #63\nlsr x6, x6, #32\nadd w0, w0, w12\nsmull x7, w2, w8\nlsr x3, x3, #32\nadd w6, w6, w19\nasr w19, w0, #2\nlsr x20, x4, #63\nlsr x4, x4, #32\nsmull x5, w13, w9\nadd w3, w3, w11\nadd w0, w19, w0, lsr #31\nmsub w21, w17, w10, w14\nlsr x14, x7, #63\nlsr x17, x7, #32\nadd w4, w4, w20\nsmull x7, w1, w9\nsub w0, w0, w0, lsl #3\nlsr x5, x5, #32\nsmull x20, w18, w8\nadd w19, w17, w14\nmsub w17, w4, w10, w15\nasr w4, w3, #2\nadd w12, w12, w0\nmsub w15, w6, w10, w16\nsmov w16, v1.b[2]\nadd w3, w4, w3, lsr #31\nlsr x4, x7, #32\nfmov s2, w12\nadd w5, w5, w13\nsmov w14, v0.b[6]\nlsr x0, x20, #63\nasr w12, w5, #2\nadd w4, w4, w1\nsub w3, w3, w3, lsl #3\nmov v2.b[1], w21\nasr w7, w4, #2\nlsr x6, x20, #32\nadd w12, w12, w5, lsr #31\nsmull x5, w16, w9\nadd w3, w11, w3\nadd w4, w7, w4, lsr #31\nmsub w2, w19, w10, w2\nsmov w19, v1.b[3]\nsub w7, w12, w12, lsl #3\nadd w12, w6, w0\nsmov w6, v1.b[4]\nmov v2.b[2], w3\nsub w3, w4, w4, lsl #3\nlsr x4, x5, #32\nsmov w11, v0.b[8]\nsmull x0, w14, w9\nadd w13, w13, w7\nadd w1, w1, w3\nadd w4, w4, w16\nsmull x5, w19, w8\nfmov s3, w1\nasr w1, w4, #2\nmov v2.b[3], w17\nlsr x0, x0, #32\nadd w1, w1, w4, lsr #31\nsmull x4, w6, w9\nlsr x17, x5, #63\nsmull x3, w11, w9\nmov v3.b[1], w2\nadd w0, w0, w14\nsub w1, w1, w1, lsl #3\nlsr x5, x5, #32\nasr w2, w0, #2\nmov v2.b[4], w13\nlsr x4, x4, #32\nsmov w13, v0.b[9]\nlsr x3, x3, #32\nadd w16, w16, w1\nadd w17, w5, w17\nadd w1, w4, w6\nmov v3.b[2], w16\nsmov w4, v1.b[5]\nadd w0, w2, w0, lsr #31\nasr w2, w1, #2\nsmov w16, v1.b[6]\nadd w3, w3, w11\nmsub w17, w17, w10, w19\nmov v2.b[5], w15\nasr w5, w3, #2\nsub w0, w0, w0, lsl #3\nadd w1, w2, w1, lsr #31\nmsub w15, w12, w10, w18\nsmov w12, v0.b[10]\nadd w18, w5, w3, lsr #31\nsmull x3, w13, w8\nmov v3.b[3], w17\nsmull x17, w4, w8\nadd w14, w14, w0\nsub w0, w1, w1, lsl #3\nsmull x1, w16, w9\nmov v2.b[6], w14\nsub w18, w18, w18, lsl #3\nlsr x14, x3, #63\nlsr x2, x3, #32\nadd w0, w6, w0\nlsr x3, x17, #63\nlsr x17, x17, #32\nmov v3.b[4], w0\nlsr x1, x1, #32\nsmull x0, w12, w9\nadd w11, w11, w18\nadd w17, w17, w3\nsmov w3, v1.b[8]\nmov v2.b[7], w15\nadd w15, w1, w16\nsmov w1, v1.b[7]\nmsub w17, w17, w10, w4\nasr w4, w15, #2\nlsr x0, x0, #32\nadd w14, w2, w14\nmsub w13, w14, w10, w13\nldp x20, x19, [sp, #16]             // 16-byte Folded Reload\nadd w15, w4, w15, lsr #31\nadd w18, w0, w12\nsmull x0, w3, w9\nmov v3.b[5], w17\nsmull x17, w1, w8\nasr w2, w18, #2\nsub w14, w15, w15, lsl #3\nmov v2.b[8], w11\nsmov w11, v0.b[12]\nadd w15, w2, w18, lsr #31\nlsr x18, x0, #32\nsmov w0, v1.b[10]\nadd w14, w16, w14\nlsr x16, x17, #63\nlsr x17, x17, #32\nmov v3.b[6], w14\nadd w14, w18, w3\nsmov w18, v1.b[9]\nadd w16, w17, w16\nmov v2.b[9], w13\nsub w13, w15, w15, lsl #3\nmsub w15, w16, w10, w1\nasr w17, w14, #2\nsmov w16, v0.b[11]\nsmull x1, w11, w9\nadd w12, w12, w13\nsmov w4, v0.b[13]\nadd w14, w17, w14, lsr #31\nsmull x13, w18, w8\nmov v3.b[7], w15\nsmull x15, w0, w9\nmov v2.b[10], w12\nsub w14, w14, w14, lsl #3\nlsr x17, x1, #32\nsmull x12, w16, w8\nlsr x1, x13, #63\nlsr x2, x13, #32\nsmov w13, v1.b[12]\nlsr x15, x15, #32\nadd w14, w3, w14\nadd w17, w17, w11\nmov v3.b[8], w14\nadd w14, w2, w1\nsmov w1, v1.b[11]\nadd w15, w15, w0\nmsub w14, w14, w10, w18\nlsr x3, x12, #63\nasr w18, w15, #2\nlsr x12, x12, #32\nasr w2, w17, #2\nadd w15, w18, w15, lsr #31\nsmull x18, w13, w9\nmov v3.b[9], w14\nsmull x14, w1, w8\nadd w12, w12, w3\nsmov w3, v1.b[14]\nsub w15, w15, w15, lsl #3\nmsub w16, w12, w10, w16\nsmov w12, v0.b[14]\nlsr x18, x18, #32\nadd w17, w2, w17, lsr #31\nsmull x2, w4, w8\nadd w15, w0, w15\nlsr x0, x14, #63\nlsr x14, x14, #32\nmov v3.b[10], w15\nadd w15, w18, w13\nsmov w18, v1.b[13]\nadd w14, w14, w0\nasr w0, w15, #2\nsub w17, w17, w17, lsl #3\nmsub w14, w14, w10, w1\nmov v2.b[11], w16\nsmull x16, w12, w9\nadd w15, w0, w15, lsr #31\nadd w11, w11, w17\nsmull x1, w18, w8\nlsr x17, x2, #63\nlsr x0, x2, #32\nmov v3.b[11], w14\nsmull x9, w3, w9\nsub w14, w15, w15, lsl #3\nlsr x16, x16, #32\nmov v2.b[12], w11\nadd w11, w0, w17\nadd w13, w13, w14\nlsr x14, x1, #63\nlsr x17, x1, #32\nlsr x9, x9, #32\nsmov w15, v0.b[15]\nadd w16, w16, w12\nmov v3.b[12], w13\nsmov w13, v1.b[15]\nadd w14, w17, w14\nasr w17, w16, #2\nadd w9, w9, w3\nmsub w11, w11, w10, w4\nmsub w14, w14, w10, w18\nasr w18, w9, #2\nadd w16, w17, w16, lsr #31\nsmull x17, w15, w8\nadd w9, w18, w9, lsr #31\nsmull x8, w13, w8\nmov v2.b[13], w11\nsub w11, w16, w16, lsl #3\nmov v3.b[13], w14\nsub w9, w9, w9, lsl #3\nlsr x14, x17, #63\nlsr x16, x17, #32\nadd w11, w12, w11\nlsr x12, x8, #63\nlsr x8, x8, #32\nadd w9, w3, w9\nmov v2.b[14], w11\nadd w11, w16, w14\nmov v3.b[14], w9\nadd w8, w8, w12\nmsub w11, w11, w10, w15\nmsub w8, w8, w10, w13\nmov v2.b[15], w11\nmov v3.b[15], w8\nmov v0.16b, v2.16b\nmov v1.16b, v3.16b\nldr x21, [sp], #32                  // 8-byte Folded Reload\nret",
  "giasm": "sub sp, sp, #112\nstp x29, x30, [sp, #16]             // 16-byte Folded Spill\nstp x28, x27, [sp, #32]             // 16-byte Folded Spill\nstp x26, x25, [sp, #48]             // 16-byte Folded Spill\nstp x24, x23, [sp, #64]             // 16-byte Folded Spill\nstp x22, x21, [sp, #80]             // 16-byte Folded Spill\nstp x20, x19, [sp, #96]             // 16-byte Folded Spill\nsshll v2.8h, v0.8b, #0\nsshll v4.8h, v1.8b, #0\nmov w8, #7                          // =0x7\nsshll v3.4s, v2.4h, #0\nsshll2 v2.4s, v2.8h, #0\nsshll v5.4s, v4.4h, #0\nsshll2 v4.4s, v4.8h, #0\nfmov w9, s3\nmov w10, v3.s[1]\nfmov w12, s2\nfmov w20, s4\nfmov w5, s5\nsdiv w14, w9, w8\nmov w9, #6                          // =0x6\nsdiv w1, w12, w8\nmov w12, v2.s[1]\nmov v6.s[0], w14\nsdiv w15, w10, w9\nmov w10, v3.s[2]\nmov v7.s[0], w1\nsdiv w0, w12, w9\nmov w12, v2.s[2]\nmov v6.s[1], w15\nsdiv w25, w20, w8\nmov w20, v4.s[1]\nmov v7.s[1], w0\nsdiv w11, w10, w8\nmov w10, v3.s[3]\nsshll2 v3.8h, v0.16b, #0\nmov v19.s[0], w25\nsshll v0.8h, v0.8b, #0\nsshll v24.4s, v0.4h, #0\nsshll2 v0.4s, v0.8h, #0\nsdiv w23, w5, w8\nmov w5, v5.s[1]\nmov v6.s[2], w11\nadrp x11, .LCPI0_0\nldr d22, [x11, :lo12:.LCPI0_0]\nsshll v22.8h, v22.8b, #0\nsshll v23.4s, v22.4h, #0\nsshll2 v22.4s, v22.8h, #0\nsdiv w16, w12, w8\nmov w12, v2.s[3]\nsshll v2.4s, v3.4h, #0\nmov v18.s[0], w23\nfmov w13, s2\nsdiv w26, w20, w9\nmov w20, v4.s[2]\nmov v7.s[2], w16\nsdiv w21, w5, w9\nmov w5, v5.s[2]\nmov v19.s[1], w26\nldp x26, x25, [sp, #48]             // 16-byte Folded Reload\nsdiv w22, w20, w8\nmov w20, v4.s[3]\nsshll2 v4.8h, v1.16b, #0\nmov v18.s[1], w21\nsshll v1.8h, v1.8b, #0\nsshll v25.4s, v1.4h, #0\nsshll2 v1.4s, v1.8h, #0\nsdiv w4, w13, w8\nmov w13, v2.s[1]\nmov v19.s[2], w22\nldp x22, x21, [sp, #80]             // 16-byte Folded Reload\nsdiv w7, w5, w8\nmov w5, v5.s[3]\nsshll v5.4s, v4.4h, #0\nmov v16.s[0], w4\nfmov w24, s5\nsdiv w2, w13, w9\nmov w13, v2.s[2]\nmov v18.s[2], w7\nsdiv w27, w24, w8\nmov w24, v5.s[1]\nmov v16.s[1], w2\nsdiv w17, w13, w8\nmov w13, v2.s[3]\nsshll2 v2.4s, v3.8h, #0\nmov v20.s[0], w27\nsshll v3.4s, v3.4h, #0\nfmov w18, s2\nsdiv w10, w10, w9\nmov v16.s[2], w17\nsdiv w28, w24, w9\nmov w24, v5.s[2]\nstr w10, [sp, #12]                  // 4-byte Folded Spill\nsdiv w19, w18, w8\nmov w18, v2.s[1]\nmov v20.s[1], w28\nldp x28, x27, [sp, #32]             // 16-byte Folded Reload\nsdiv w29, w24, w8\nmov w24, v5.s[3]\nsshll2 v5.4s, v4.8h, #0\nmov v17.s[0], w19\nsshll v4.4s, v4.4h, #0\nmov w10, v5.s[2]\nfmov w30, s5\nmov w14, v5.s[3]\nsdiv w6, w18, w9\nmov w18, v2.s[2]\nmov v20.s[2], w29\nsdiv w3, w18, w8\nmov w18, v2.s[3]\nmov v17.s[1], w6\nsdiv w30, w30, w8\nmov v17.s[2], w3\nsdiv w8, w10, w8\nmov w10, v5.s[1]\nmov v21.s[0], w30\nldp x29, x30, [sp, #16]             // 16-byte Folded Reload\nsdiv w10, w10, w9\nsdiv w12, w12, w9\nmov v21.s[1], w10\nldr w10, [sp, #12]                  // 4-byte Folded Reload\nmov v6.s[3], w10\nmov v21.s[2], w8\nmls v24.4s, v6.4s, v23.4s\nsdiv w13, w13, w9\nmov v7.s[3], w12\nmls v0.4s, v7.4s, v22.4s\nsdiv w18, w18, w9\nmov v16.s[3], w13\nuzp1 v0.8h, v24.8h, v0.8h\nmls v3.4s, v16.4s, v23.4s\nsdiv w5, w5, w9\nmov v17.s[3], w18\nmls v2.4s, v17.4s, v22.4s\nsdiv w20, w20, w9\nmov v18.s[3], w5\nuzp1 v2.8h, v3.8h, v2.8h\nmls v25.4s, v18.4s, v23.4s\nuzp1 v0.16b, v0.16b, v2.16b\nsdiv w24, w24, w9\nmov v19.s[3], w20\nldp x20, x19, [sp, #96]             // 16-byte Folded Reload\nmls v1.4s, v19.4s, v22.4s\nsdiv w9, w14, w9\nmov v20.s[3], w24\nuzp1 v1.8h, v25.8h, v1.8h\nldp x24, x23, [sp, #64]             // 16-byte Folded Reload\nmls v4.4s, v20.4s, v23.4s\nmov v21.s[3], w9\nmls v5.4s, v21.4s, v22.4s\nuzp1 v3.8h, v4.8h, v5.8h\nuzp1 v1.16b, v1.16b, v3.16b\nadd sp, sp, #112\nret",
  "ll": "define <32 x i8> @test(<32 x i8> %a) {\n  %r = srem <32 x i8> %a, <i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6>\n  ret <32 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = srem <32 x i8> %a, <i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6>\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i8> %r"
 },
 {
  "instr": "srem",
  "ty": "<32 x i8>",
  "variant": "binopsplat",
  "codesize": 7,
  "thru": 228,
  "lat": 8,
  "sizelat": 8,
  "size": 177,
  "gisize": 193,
  "extrasize": 0,
  "asm": "sub sp, sp, #192\nstp x29, x30, [sp, #96]             // 16-byte Folded Spill\nstp x28, x27, [sp, #112]            // 16-byte Folded Spill\nstp x26, x25, [sp, #128]            // 16-byte Folded Spill\nstp x24, x23, [sp, #144]            // 16-byte Folded Spill\nstp x22, x21, [sp, #160]            // 16-byte Folded Spill\nstp x20, x19, [sp, #176]            // 16-byte Folded Spill\nsmov w29, v0.b[0]\nsmov w30, v0.b[2]\nsxtb w8, w0\nsmov w23, v0.b[1]\nsmov w25, v0.b[4]\nsmov w24, v0.b[3]\nsmov w20, v0.b[6]\nsmov w21, v0.b[5]\nsmov w22, v0.b[8]\nsmov w28, v0.b[9]\nsmov w26, v0.b[7]\nsmov w12, v1.b[3]\nsdiv w11, w29, w8\nsmov w13, v1.b[4]\nsmov w14, v1.b[5]\nsmov w15, v1.b[6]\nsmov w16, v1.b[7]\nsmov w17, v1.b[8]\nsmov w18, v1.b[9]\nsdiv w9, w30, w8\nsdiv w10, w23, w8\nstp w9, w11, [sp, #8]               // 8-byte Folded Spill\nsdiv w9, w25, w8\nsdiv w11, w24, w8\nstp w10, w9, [sp, #20]              // 8-byte Folded Spill\nldr w27, [sp, #20]                  // 4-byte Folded Reload\nmsub w23, w27, w8, w23\nldr w27, [sp, #12]                  // 4-byte Folded Reload\nmsub w29, w27, w8, w29\nsdiv w9, w20, w8\nsdiv w10, w21, w8\nstp w11, w9, [sp, #28]              // 8-byte Folded Spill\nsdiv w9, w22, w8\nstp w10, w9, [sp, #36]              // 8-byte Folded Spill\nsdiv w9, w28, w8\nstr w9, [sp, #52]                   // 4-byte Folded Spill\nsmov w9, v0.b[10]\nsdiv w11, w26, w8\nstr w9, [sp, #16]                   // 4-byte Folded Spill\nsdiv w9, w9, w8\nstp w11, w9, [sp, #44]              // 8-byte Folded Spill\nsmov w9, v0.b[11]\nsdiv w3, w12, w8\nstr w9, [sp, #60]                   // 4-byte Folded Spill\nsdiv w11, w9, w8\nsmov w9, v0.b[12]\nstr w9, [sp, #56]                   // 4-byte Folded Spill\nsdiv w10, w9, w8\nsmov w9, v0.b[13]\nstr w9, [sp, #84]                   // 4-byte Folded Spill\nstp w10, w11, [sp, #64]             // 8-byte Folded Spill\nsdiv w11, w9, w8\nsmov w9, v0.b[14]\nstr w9, [sp, #80]                   // 4-byte Folded Spill\nsdiv w10, w9, w8\nsmov w9, v0.b[15]\nfmov s0, w29\nmov v0.b[1], w23\nstp w10, w11, [sp, #88]             // 8-byte Folded Spill\nsdiv w10, w9, w8\nsmov w11, v1.b[1]\nstp w9, w10, [sp, #72]              // 8-byte Folded Spill\nsmov w9, v1.b[0]\nsdiv w4, w11, w8\nsmov w10, v1.b[2]\nsdiv w0, w9, w8\nmsub w11, w4, w8, w11\nmsub w9, w0, w8, w9\nsdiv w1, w10, w8\nfmov s2, w9\nldr w9, [sp, #8]                    // 4-byte Folded Reload\nmsub w9, w9, w8, w30\nldp x29, x30, [sp, #96]             // 16-byte Folded Reload\nmov v2.b[1], w11\nsmov w11, v1.b[10]\nmov v0.b[2], w9\nldr w9, [sp, #28]                   // 4-byte Folded Reload\nsdiv w2, w13, w8\nmsub w10, w1, w8, w10\nmsub w9, w9, w8, w24\nldp x24, x23, [sp, #144]            // 16-byte Folded Reload\nmov v2.b[2], w10\nmsub w10, w3, w8, w12\nmov v0.b[3], w9\nldr w9, [sp, #24]                   // 4-byte Folded Reload\nmsub w9, w9, w8, w25\nsdiv w6, w14, w8\nmov v2.b[3], w10\nmsub w10, w2, w8, w13\nsmov w13, v1.b[11]\nmov v0.b[4], w9\nldr w9, [sp, #36]                   // 4-byte Folded Reload\nmsub w9, w9, w8, w21\nmov v2.b[4], w10\nmov v0.b[5], w9\nldr w9, [sp, #32]                   // 4-byte Folded Reload\nsdiv w5, w15, w8\nmsub w10, w6, w8, w14\nmsub w9, w9, w8, w20\nmov v2.b[5], w10\nmov v0.b[6], w9\nldr w9, [sp, #44]                   // 4-byte Folded Reload\nmsub w9, w9, w8, w26\nldp x26, x25, [sp, #128]            // 16-byte Folded Reload\nsdiv w19, w16, w8\nmsub w10, w5, w8, w15\nsmov w15, v1.b[12]\nmov v0.b[7], w9\nldr w9, [sp, #40]                   // 4-byte Folded Reload\nmsub w9, w9, w8, w22\nmov v2.b[6], w10\nldp x22, x21, [sp, #160]            // 16-byte Folded Reload\nmov v0.b[8], w9\nldr w9, [sp, #52]                   // 4-byte Folded Reload\nsdiv w7, w17, w8\nmsub w10, w19, w8, w16\nmsub w9, w9, w8, w28\nldp x20, x19, [sp, #176]            // 16-byte Folded Reload\nldp x28, x27, [sp, #112]            // 16-byte Folded Reload\nmov v2.b[7], w10\nmov v0.b[9], w9\nldr w9, [sp, #48]                   // 4-byte Folded Reload\nsdiv w0, w18, w8\nmsub w10, w7, w8, w17\nsmov w17, v1.b[13]\nmov v2.b[8], w10\nsdiv w12, w11, w8\nmsub w10, w0, w8, w18\nldr w0, [sp, #16]                   // 4-byte Folded Reload\nmsub w9, w9, w8, w0\nmov v2.b[9], w10\nmov v0.b[10], w9\nldr w9, [sp, #68]                   // 4-byte Folded Reload\nsdiv w14, w13, w8\nmsub w10, w12, w8, w11\nldr w12, [sp, #60]                  // 4-byte Folded Reload\nmsub w9, w9, w8, w12\nsmov w11, v1.b[14]\nmov v2.b[10], w10\nmov v0.b[11], w9\nldr w9, [sp, #64]                   // 4-byte Folded Reload\nsdiv w16, w15, w8\nmsub w10, w14, w8, w13\nldr w13, [sp, #56]                  // 4-byte Folded Reload\nmsub w9, w9, w8, w13\nsmov w13, v1.b[15]\nmov v2.b[11], w10\nmov v0.b[12], w9\nldr w9, [sp, #92]                   // 4-byte Folded Reload\nsdiv w18, w17, w8\nmsub w10, w16, w8, w15\nldp w15, w14, [sp, #80]             // 8-byte Folded Reload\nmsub w9, w9, w8, w14\nmov v2.b[12], w10\nmov v0.b[13], w9\nldr w9, [sp, #88]                   // 4-byte Folded Reload\nmsub w9, w9, w8, w15\nsdiv w12, w11, w8\nmsub w10, w18, w8, w17\nmov v0.b[14], w9\nmov v2.b[13], w10\nsdiv w14, w13, w8\nmsub w10, w12, w8, w11\nldp w11, w9, [sp, #72]              // 8-byte Folded Reload\nmov v2.b[14], w10\nmsub w9, w9, w8, w11\nmov v0.b[15], w9\nmsub w8, w14, w8, w13\nmov v2.b[15], w8\nmov v1.16b, v2.16b\nadd sp, sp, #192\nret",
  "giasm": "sub sp, sp, #112\nstp x29, x30, [sp, #16]             // 16-byte Folded Spill\nstp x28, x27, [sp, #32]             // 16-byte Folded Spill\nstp x26, x25, [sp, #48]             // 16-byte Folded Spill\nstp x24, x23, [sp, #64]             // 16-byte Folded Spill\nstp x22, x21, [sp, #80]             // 16-byte Folded Spill\nstp x20, x19, [sp, #96]             // 16-byte Folded Spill\ndup v2.16b, w0\nsshll v3.8h, v0.8b, #0\nsshll v7.8h, v1.8b, #0\nsshll v4.8h, v2.8b, #0\nsshll v16.8h, v2.8b, #0\nsshll v5.4s, v3.4h, #0\nsshll v17.4s, v7.4h, #0\nsshll2 v3.4s, v3.8h, #0\nsshll2 v7.4s, v7.8h, #0\nsshll v26.8h, v2.8b, #0\nsshll v6.4s, v4.4h, #0\nsshll v18.4s, v16.4h, #0\nfmov w8, s5\nfmov w2, s17\nsshll2 v4.4s, v4.8h, #0\nsshll2 v16.4s, v16.8h, #0\nsshll v28.4s, v26.4h, #0\nsshll2 v26.4s, v26.8h, #0\nfmov w9, s6\nfmov w5, s18\nmov w19, v18.s[3]\nfmov w13, s4\nfmov w23, s16\nmov w14, v4.s[3]\nmov w24, v16.s[3]\nsdiv w12, w8, w9\nmov w8, v5.s[1]\nmov w9, v6.s[1]\nsdiv w22, w2, w5\nmov w2, v17.s[1]\nmov w5, v18.s[1]\nsdiv w11, w8, w9\nmov w8, v5.s[2]\nmov w9, v6.s[2]\nmov v21.s[0], w22\nsdiv w21, w2, w5\nmov w2, v17.s[2]\nmov w5, v18.s[2]\nsdiv w10, w8, w9\nmov w8, v5.s[3]\nmov w9, v6.s[3]\nsshll2 v6.8h, v0.16b, #0\nmov v21.s[1], w21\nsshll v0.8h, v0.8b, #0\nldp x22, x21, [sp, #80]             // 16-byte Folded Reload\nsshll v25.4s, v0.4h, #0\nsshll2 v0.4s, v0.8h, #0\nsdiv w5, w2, w5\nmov w2, v17.s[3]\nsdiv w8, w8, w9\nfmov w9, s3\nmov v21.s[2], w5\nsdiv w2, w2, w19\nfmov w19, s7\nstr w8, [sp, #12]                   // 4-byte Folded Spill\nsdiv w16, w9, w13\nmov w9, v3.s[1]\nmov w13, v4.s[1]\nmov v21.s[3], w2\nsdiv w26, w19, w23\nmov w19, v7.s[1]\nmov w23, v16.s[1]\nmov v18.s[0], w16\nsdiv w15, w9, w13\nmov w9, v3.s[2]\nmov w13, v4.s[2]\nsshll v4.4s, v6.4h, #0\nmov v22.s[0], w26\nsdiv w25, w19, w23\nmov w19, v7.s[2]\nmov w23, v16.s[2]\nmov v18.s[1], w15\nsdiv w13, w9, w13\nmov w9, v3.s[3]\nsshll2 v3.8h, v2.16b, #0\nmov v22.s[1], w25\nsshll v2.8h, v2.8b, #0\nldp x26, x25, [sp, #48]             // 16-byte Folded Reload\nsshll v5.4s, v3.4h, #0\nsshll v17.4s, v3.4h, #0\nsshll v29.4s, v3.4h, #0\nsshll v30.4s, v2.4h, #0\nsshll2 v2.4s, v2.8h, #0\nfmov w17, s5\nfmov w27, s17\nmov w28, v17.s[1]\nmov w29, v17.s[2]\nmov w1, v5.s[3]\nmov w30, v17.s[3]\nsdiv w23, w19, w23\nmov w19, v7.s[3]\nsshll2 v7.8h, v1.16b, #0\nmov v17.s[0], w12\nmov v18.s[2], w13\nsshll v1.8h, v1.8b, #0\nsshll v16.4s, v7.4h, #0\nsshll v27.4s, v1.4h, #0\nsshll2 v1.4s, v1.8h, #0\nmov v17.s[1], w11\nmls v27.4s, v21.4s, v30.4s\nsdiv w9, w9, w14\nfmov w14, s4\nmov v22.s[2], w23\nmov v17.s[2], w10\nldr w10, [sp, #12]                  // 4-byte Folded Reload\nmov v17.s[3], w10\nsdiv w19, w19, w24\nfmov w24, s16\nmov v18.s[3], w9\nmls v25.4s, v17.4s, v28.4s\nmls v0.4s, v18.4s, v26.4s\nsdiv w0, w14, w17\nmov w14, v4.s[1]\nmov w17, v5.s[1]\nmov v22.s[3], w19\nuzp1 v0.8h, v25.8h, v0.8h\nmls v1.4s, v22.4s, v2.4s\nsdiv w27, w24, w27\nmov w24, v16.s[1]\nmov v19.s[0], w0\nuzp1 v1.8h, v27.8h, v1.8h\nsdiv w18, w14, w17\nmov w14, v4.s[2]\nmov w17, v5.s[2]\nsshll2 v5.4s, v3.8h, #0\nmov v23.s[0], w27\nsshll v3.4s, v3.4h, #0\nfmov w6, s5\nmov w7, v5.s[1]\nmov w20, v5.s[2]\nmov w8, v5.s[3]\nsdiv w28, w24, w28\nmov w24, v16.s[2]\nmov v19.s[1], w18\nsdiv w17, w14, w17\nmov w14, v4.s[3]\nsshll2 v4.4s, v6.8h, #0\nmov v23.s[1], w28\nsshll v6.4s, v6.4h, #0\nldp x28, x27, [sp, #32]             // 16-byte Folded Reload\nsdiv w29, w24, w29\nmov w24, v16.s[3]\nsshll2 v16.4s, v7.8h, #0\nmov v19.s[2], w17\nsshll v7.4s, v7.4h, #0\nmov w11, v16.s[3]\nsdiv w14, w14, w1\nfmov w1, s4\nmov v23.s[2], w29\nsdiv w24, w24, w30\nfmov w30, s16\nmov v19.s[3], w14\nmls v6.4s, v19.4s, v29.4s\nsdiv w4, w1, w6\nmov w1, v4.s[1]\nmov v23.s[3], w24\nldp x24, x23, [sp, #64]             // 16-byte Folded Reload\nmls v7.4s, v23.4s, v3.4s\nsdiv w6, w30, w6\nmov w30, v16.s[1]\nmov v20.s[0], w4\nsdiv w3, w1, w7\nmov w1, v4.s[2]\nmov v24.s[0], w6\nsdiv w7, w30, w7\nmov w30, v16.s[2]\nmov v20.s[1], w3\nsdiv w1, w1, w20\nmov v24.s[1], w7\nsdiv w20, w30, w20\nmov w30, v4.s[3]\nmov v20.s[2], w1\nsdiv w12, w30, w8\nmov v24.s[2], w20\nldp x20, x19, [sp, #96]             // 16-byte Folded Reload\nldp x29, x30, [sp, #16]             // 16-byte Folded Reload\nsdiv w8, w11, w8\nmov v20.s[3], w12\nmls v4.4s, v20.4s, v5.4s\nmov v24.s[3], w8\nuzp1 v2.8h, v6.8h, v4.8h\nmls v16.4s, v24.4s, v5.4s\nuzp1 v0.16b, v0.16b, v2.16b\nuzp1 v3.8h, v7.8h, v16.8h\nuzp1 v1.16b, v1.16b, v3.16b\nadd sp, sp, #112\nret",
  "ll": "define <32 x i8> @test(<32 x i8> %a, i8 %bs) {\n  %i = insertelement <32 x i8> poison, i8 %bs, i64 0\n  %b = shufflevector <32 x i8> %i, <32 x i8> poison, <32 x i32> zeroinitializer\n  %r = srem <32 x i8> %a, %b\n  ret <32 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <32 x i8> poison, i8 %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <32 x i8> %i, <32 x i8> poison, <32 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = srem <32 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i8> %r"
 },
 {
  "instr": "srem",
  "ty": "<32 x i8>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 12,
  "lat": 4,
  "sizelat": 4,
  "size": 296,
  "gisize": 151,
  "extrasize": 0,
  "asm": "stp x24, x23, [sp, #-48]!           // 16-byte Folded Spill\nstp x22, x21, [sp, #16]             // 16-byte Folded Spill\nstp x20, x19, [sp, #32]             // 16-byte Folded Spill\nsmov w0, v0.b[0]\nmov w8, #9363                       // =0x2493\nsmov w17, v0.b[1]\nmovk w8, #37449, lsl #16\nsmov w16, v0.b[2]\nsmov w18, v0.b[3]\nsmov w15, v0.b[5]\nsmov w14, v0.b[4]\nsmov w13, v0.b[6]\nsmov w11, v0.b[7]\nsmov w10, v0.b[9]\nsmov w12, v0.b[8]\nsmull x1, w0, w8\nsmov w2, v1.b[1]\nsmull x9, w17, w8\nsmull x3, w16, w8\nlsr x1, x1, #32\nsmull x5, w18, w8\nlsr x4, x9, #32\nsmull x19, w14, w8\nsmov w9, v0.b[10]\nadd w20, w1, w0\nlsr x6, x3, #32\nsmov w1, v1.b[2]\nasr w21, w20, #2\nadd w4, w4, w17\nlsr x5, x5, #32\nasr w7, w4, #2\nadd w6, w6, w16\nlsr x19, x19, #32\nadd w20, w21, w20, lsr #31\nasr w22, w6, #2\nadd w5, w5, w18\nadd w4, w7, w4, lsr #31\nsmull x7, w15, w8\nsmov w3, v1.b[0]\nsub w20, w20, w20, lsl #3\nadd w6, w22, w6, lsr #31\nsmull x21, w13, w8\nsub w4, w4, w4, lsl #3\nsmull x22, w11, w8\nadd w19, w19, w14\nadd w0, w0, w20\nlsr x7, x7, #32\nasr w20, w5, #2\nfmov s2, w0\nadd w17, w17, w4\nsub w6, w6, w6, lsl #3\nadd w7, w7, w15\nadd w5, w20, w5, lsr #31\nsmull x23, w10, w8\nasr w20, w7, #2\nadd w16, w16, w6\nsmull x4, w12, w8\nmov v2.b[1], w17\nasr w0, w19, #2\nsub w5, w5, w5, lsl #3\nadd w7, w20, w7, lsr #31\nlsr x20, x21, #32\nlsr x21, x22, #32\nadd w0, w0, w19, lsr #31\nsmull x6, w2, w8\nadd w18, w18, w5\nadd w20, w20, w13\nsmull x5, w3, w8\nlsr x22, x23, #32\nmov v2.b[2], w16\nsmull x16, w1, w8\nlsr x4, x4, #32\nsub w0, w0, w0, lsl #3\nlsr x6, x6, #32\nsub w7, w7, w7, lsl #3\nlsr x5, x5, #32\nadd w4, w4, w12\nsmov w17, v1.b[3]\nlsr x23, x16, #32\nasr w16, w20, #2\nadd w14, w14, w0\nmov v2.b[3], w18\nadd w18, w21, w11\nadd w21, w22, w10\nadd w20, w16, w20, lsr #31\nasr w16, w18, #2\nadd w6, w6, w2\nadd w5, w5, w3\nadd w15, w15, w7\nsmull x19, w9, w8\nadd w22, w16, w18, lsr #31\nasr w16, w4, #2\nasr w18, w21, #2\nmov v2.b[4], w14\nsub w7, w20, w20, lsl #3\nadd w14, w16, w4, lsr #31\nasr w4, w6, #2\nadd w0, w18, w21, lsr #31\nasr w18, w5, #2\nadd w7, w13, w7\nsmov w13, v0.b[11]\nadd w4, w4, w6, lsr #31\nadd w6, w23, w1\nsub w14, w14, w14, lsl #3\nadd w5, w18, w5, lsr #31\nasr w18, w6, #2\nmov v2.b[5], w15\nsmull x15, w17, w8\nsub w4, w4, w4, lsl #3\nlsr x19, x19, #32\nsub w5, w5, w5, lsl #3\nadd w6, w18, w6, lsr #31\nsmov w18, v1.b[4]\nadd w4, w2, w4\nsmov w2, v1.b[5]\nadd w12, w12, w14\nadd w3, w3, w5\nmov v2.b[6], w7\nlsr x5, x15, #32\nfmov s3, w3\nsub w7, w22, w22, lsl #3\nsub w6, w6, w6, lsl #3\nsmull x3, w18, w8\nadd w5, w5, w17\nsmov w15, v1.b[6]\nadd w11, w11, w7\nasr w7, w5, #2\nadd w1, w1, w6\nmov v3.b[1], w4\nmov v2.b[7], w11\nsmull x11, w2, w8\nlsr x3, x3, #32\nadd w5, w7, w5, lsr #31\nsmull x4, w13, w8\nadd w19, w19, w9\nsub w0, w0, w0, lsl #3\nsmov w14, v1.b[7]\nadd w3, w3, w18\nsub w5, w5, w5, lsl #3\nlsr x11, x11, #32\nmov v3.b[2], w1\nmov v2.b[8], w12\nasr w12, w3, #2\nasr w24, w19, #2\nsmull x1, w15, w8\nadd w17, w17, w5\nadd w12, w12, w3, lsr #31\nlsr x4, x4, #32\nadd w11, w11, w2\nadd w16, w24, w19, lsr #31\nasr w5, w11, #2\nadd w10, w10, w0\nmov v3.b[3], w17\nsub w0, w12, w12, lsl #3\nadd w4, w4, w13\nlsr x1, x1, #32\nasr w3, w4, #2\nsub w17, w16, w16, lsl #3\nmov v2.b[9], w10\nsmov w16, v1.b[8]\nadd w18, w18, w0\nadd w11, w5, w11, lsr #31\nsmull x0, w14, w8\nadd w10, w3, w4, lsr #31\nmov v3.b[4], w18\nadd w18, w1, w15\nadd w9, w9, w17\nsub w11, w11, w11, lsl #3\nasr w17, w18, #2\nsub w1, w10, w10, lsl #3\nmov v2.b[10], w9\nsmull x9, w16, w8\nsmov w12, v0.b[12]\nadd w10, w2, w11\nadd w11, w17, w18, lsr #31\nlsr x18, x0, #32\nsmov w17, v1.b[9]\nmov v3.b[5], w10\nadd w1, w13, w1\nadd w18, w18, w14\nsub w10, w11, w11, lsl #3\nlsr x2, x9, #32\nasr w3, w18, #2\nsmov w13, v1.b[11]\nsmull x0, w12, w8\nadd w4, w15, w10\nadd w2, w2, w16\nsmov w15, v1.b[10]\nadd w18, w3, w18, lsr #31\nsmull x5, w17, w8\nasr w3, w2, #2\nmov v3.b[6], w4\nsmov w11, v0.b[13]\nlsr x0, x0, #32\nsub w18, w18, w18, lsl #3\nadd w2, w3, w2, lsr #31\nmov v2.b[11], w1\nlsr x3, x5, #32\nsmull x4, w15, w8\nadd w0, w0, w12\nadd w14, w14, w18\nsmov w9, v0.b[14]\nasr w5, w0, #2\nmov v3.b[7], w14\nsub w14, w2, w2, lsl #3\nadd w18, w3, w17\nasr w2, w18, #2\nlsr x3, x4, #32\nsmull x4, w13, w8\nadd w16, w16, w14\nsmov w14, v1.b[12]\nsmull x1, w11, w8\nadd w18, w2, w18, lsr #31\nadd w2, w3, w15\nadd w0, w5, w0, lsr #31\nmov v3.b[8], w16\nasr w16, w2, #2\nlsr x3, x4, #32\nsub w18, w18, w18, lsl #3\nlsr x1, x1, #32\nsub w0, w0, w0, lsl #3\nsmull x4, w14, w8\nadd w2, w16, w2, lsr #31\nsmov w16, v1.b[13]\nadd w17, w17, w18\nadd w18, w3, w13\nadd w1, w1, w11\nmov v3.b[9], w17\nsub w17, w2, w2, lsl #3\nasr w2, w18, #2\nlsr x4, x4, #32\nsmull x5, w9, w8\nasr w3, w1, #2\nadd w15, w15, w17\nadd w17, w2, w18, lsr #31\nsmull x2, w16, w8\nadd w18, w4, w14\nsmov w4, v1.b[14]\nadd w12, w12, w0\nmov v3.b[10], w15\nasr w15, w18, #2\nsub w17, w17, w17, lsl #3\nsmov w10, v0.b[15]\nmov v2.b[12], w12\nadd w12, w3, w1, lsr #31\nadd w15, w15, w18, lsr #31\nlsr x18, x2, #32\nlsr x0, x5, #32\nadd w13, w13, w17\nsmull x17, w4, w8\nsmov w1, v1.b[15]\nmov v3.b[11], w13\nsub w13, w15, w15, lsl #3\nadd w15, w18, w16\nadd w18, w0, w9\nasr w0, w15, #2\nsub w12, w12, w12, lsl #3\nlsr x17, x17, #32\nadd w13, w14, w13\nsmull x14, w10, w8\nadd w15, w0, w15, lsr #31\nsmull x8, w1, w8\nadd w11, w11, w12\nmov v3.b[12], w13\nadd w12, w17, w4\nasr w0, w18, #2\nsub w15, w15, w15, lsl #3\nasr w17, w12, #2\nmov v2.b[13], w11\nlsr x11, x14, #32\nlsr x8, x8, #32\nadd w13, w0, w18, lsr #31\nadd w14, w16, w15\nadd w12, w17, w12, lsr #31\nadd w11, w11, w10\nmov v3.b[13], w14\nadd w8, w8, w1\nsub w13, w13, w13, lsl #3\nasr w14, w11, #2\nsub w12, w12, w12, lsl #3\nasr w15, w8, #2\nldp x20, x19, [sp, #32]             // 16-byte Folded Reload\nadd w9, w9, w13\nadd w11, w14, w11, lsr #31\nadd w12, w4, w12\nadd w8, w15, w8, lsr #31\nmov v2.b[14], w9\nmov v3.b[14], w12\nsub w9, w11, w11, lsl #3\nldp x22, x21, [sp, #16]             // 16-byte Folded Reload\nsub w8, w8, w8, lsl #3\nadd w9, w10, w9\nadd w8, w1, w8\nmov v2.b[15], w9\nmov v3.b[15], w8\nmov v0.16b, v2.16b\nmov v1.16b, v3.16b\nldp x24, x23, [sp], #48             // 16-byte Folded Reload\nret",
  "giasm": "sub sp, sp, #112\nstp x29, x30, [sp, #16]             // 16-byte Folded Spill\nstp x28, x27, [sp, #32]             // 16-byte Folded Spill\nstp x26, x25, [sp, #48]             // 16-byte Folded Spill\nstp x24, x23, [sp, #64]             // 16-byte Folded Spill\nstp x22, x21, [sp, #80]             // 16-byte Folded Spill\nstp x20, x19, [sp, #96]             // 16-byte Folded Spill\nsshll v2.8h, v0.8b, #0\nsshll v4.8h, v1.8b, #0\nmov w8, #7                          // =0x7\nmovi v22.8b, #7\nsshll v3.4s, v2.4h, #0\nsshll v5.4s, v4.4h, #0\nsshll2 v4.4s, v4.8h, #0\nsshll2 v2.4s, v2.8h, #0\nsshll v22.8h, v22.8b, #0\nfmov w9, s3\nfmov w19, s4\nfmov w4, s5\nfmov w11, s2\nsshll v23.4s, v22.4h, #0\nsshll2 v22.4s, v22.8h, #0\nsdiv w13, w9, w8\nmov w9, v3.s[1]\nsdiv w24, w19, w8\nmov w19, v4.s[1]\nmov v6.s[0], w13\nsdiv w0, w11, w8\nmov w11, v2.s[1]\nmov v19.s[0], w24\nsdiv w22, w4, w8\nmov w4, v5.s[1]\nmov v7.s[0], w0\nsdiv w12, w9, w8\nmov w9, v3.s[2]\nmov v18.s[0], w22\nsdiv w25, w19, w8\nmov w19, v4.s[2]\nmov v6.s[1], w12\nsdiv w17, w11, w8\nmov w11, v2.s[2]\nmov v19.s[1], w25\nsdiv w20, w4, w8\nmov w4, v5.s[2]\nmov v7.s[1], w17\nsdiv w10, w9, w8\nmov w9, v3.s[3]\nsshll2 v3.8h, v0.16b, #0\nmov v18.s[1], w20\nsshll v0.8h, v0.8b, #0\nsshll v24.4s, v0.4h, #0\nsshll2 v0.4s, v0.8h, #0\nsdiv w21, w19, w8\nmov w19, v4.s[3]\nsshll2 v4.8h, v1.16b, #0\nmov v6.s[2], w10\nsshll v1.8h, v1.8b, #0\nsshll v25.4s, v1.4h, #0\nsshll2 v1.4s, v1.8h, #0\nsdiv w15, w11, w8\nmov w11, v2.s[3]\nsshll v2.4s, v3.4h, #0\nmov v19.s[2], w21\nldp x22, x21, [sp, #80]             // 16-byte Folded Reload\nfmov w14, s2\nsdiv w6, w4, w8\nmov w4, v5.s[3]\nsshll v5.4s, v4.4h, #0\nmov v7.s[2], w15\nfmov w23, s5\nsdiv w3, w14, w8\nmov w14, v2.s[1]\nmov v18.s[2], w6\nsdiv w26, w23, w8\nmov w23, v5.s[1]\nmov v16.s[0], w3\nsdiv w1, w14, w8\nmov w14, v2.s[2]\nmov v20.s[0], w26\nldp x26, x25, [sp, #48]             // 16-byte Folded Reload\nsdiv w27, w23, w8\nmov w23, v5.s[2]\nmov v16.s[1], w1\nsdiv w16, w14, w8\nmov w14, v2.s[3]\nsshll2 v2.4s, v3.8h, #0\nmov v20.s[1], w27\nsshll v3.4s, v3.4h, #0\nfmov w18, s2\nsdiv w28, w23, w8\nmov w23, v5.s[3]\nsshll2 v5.4s, v4.8h, #0\nmov v16.s[2], w16\nsshll v4.4s, v4.4h, #0\nfmov w29, s5\nmov w30, v5.s[1]\nmov w12, v5.s[3]\nsdiv w9, w9, w8\nmov v20.s[2], w28\nldp x28, x27, [sp, #32]             // 16-byte Folded Reload\nsdiv w7, w18, w8\nmov w18, v2.s[1]\nstr w9, [sp, #12]                   // 4-byte Folded Spill\nmov w9, v5.s[2]\nldr w10, [sp, #12]                  // 4-byte Folded Reload\nmov v6.s[3], w10\nmls v24.4s, v6.4s, v23.4s\nsdiv w29, w29, w8\nmov v17.s[0], w7\nsdiv w5, w18, w8\nmov w18, v2.s[2]\nmov v21.s[0], w29\nsdiv w30, w30, w8\nmov v17.s[1], w5\nsdiv w2, w18, w8\nmov w18, v2.s[3]\nmov v21.s[1], w30\nldp x29, x30, [sp, #16]             // 16-byte Folded Reload\nsdiv w9, w9, w8\nmov v17.s[2], w2\nsdiv w11, w11, w8\nmov v21.s[2], w9\nsdiv w14, w14, w8\nmov v7.s[3], w11\nmls v0.4s, v7.4s, v22.4s\nsdiv w18, w18, w8\nmov v16.s[3], w14\nuzp1 v0.8h, v24.8h, v0.8h\nmls v3.4s, v16.4s, v23.4s\nsdiv w4, w4, w8\nmov v17.s[3], w18\nmls v2.4s, v17.4s, v22.4s\nsdiv w19, w19, w8\nmov v18.s[3], w4\nuzp1 v2.8h, v3.8h, v2.8h\nmls v25.4s, v18.4s, v23.4s\nuzp1 v0.16b, v0.16b, v2.16b\nsdiv w23, w23, w8\nmov v19.s[3], w19\nldp x20, x19, [sp, #96]             // 16-byte Folded Reload\nmls v1.4s, v19.4s, v22.4s\nsdiv w8, w12, w8\nmov v20.s[3], w23\nuzp1 v1.8h, v25.8h, v1.8h\nldp x24, x23, [sp, #64]             // 16-byte Folded Reload\nmls v4.4s, v20.4s, v23.4s\nmov v21.s[3], w8\nmls v5.4s, v21.4s, v22.4s\nuzp1 v3.8h, v4.8h, v5.8h\nuzp1 v1.16b, v1.16b, v3.16b\nadd sp, sp, #112\nret",
  "ll": "define <32 x i8> @test(<32 x i8> %a) {\n  %r = srem <32 x i8> %a, splat (i8 7)\n  ret <32 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = srem <32 x i8> %a, splat (i8 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i8> %r"
 },
 {
  "instr": "srem",
  "ty": "<4 x i16>",
  "variant": "binop",
  "codesize": 4,
  "thru": 28,
  "lat": 4,
  "sizelat": 4,
  "size": 20,
  "gisize": 20,
  "extrasize": 0,
  "asm": "smov w11, v1.h[0]\nsmov w12, v0.h[0]\nsmov w8, v1.h[1]\nsmov w9, v0.h[1]\nsmov w14, v1.h[2]\nsmov w15, v0.h[2]\nsmov w17, v1.h[3]\nsmov w18, v0.h[3]\nsdiv w13, w12, w11\nsdiv w10, w9, w8\nmsub w11, w13, w11, w12\nfmov s0, w11\nsdiv w16, w15, w14\nmsub w8, w10, w8, w9\nmov v0.h[1], w8\nsdiv w9, w18, w17\nmsub w8, w16, w14, w15\nmov v0.h[2], w8\nmsub w8, w9, w17, w18\nmov v0.h[3], w8\nret",
  "giasm": "sshll v0.4s, v0.4h, #0\nsshll v1.4s, v1.4h, #0\nfmov w8, s0\nfmov w9, s1\nmov w10, v1.s[1]\nmov w11, v1.s[2]\nmov w12, v1.s[3]\nsdiv w8, w8, w9\nmov w9, v0.s[1]\nsdiv w9, w9, w10\nmov w10, v0.s[2]\nmov v2.s[0], w8\nsdiv w10, w10, w11\nmov w11, v0.s[3]\nmov v2.s[1], w9\nsdiv w8, w11, w12\nmov v2.s[2], w10\nmov v2.s[3], w8\nmls v0.4s, v2.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i16> @test(<4 x i16> %a, <4 x i16> %b) {\n  %r = srem <4 x i16> %a, %b\n  ret <4 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = srem <4 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i16> %r"
 },
 {
  "instr": "srem",
  "ty": "<4 x i16>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 18,
  "lat": 4,
  "sizelat": 4,
  "size": 10,
  "gisize": 20,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nmovi d2, #0x00ffff0000ffff\nldr d1, [x8, :lo12:.LCPI0_0]\nadrp x8, .LCPI0_1\nsmull v1.4s, v0.4h, v1.4h\nshrn v1.4h, v1.4s, #16\nsshl v1.4h, v1.4h, v2.4h\nldr d2, [x8, :lo12:.LCPI0_1]\nusra v1.4h, v1.4h, #15\nmls v0.4h, v1.4h, v2.4h\nret",
  "giasm": "sshll v0.4s, v0.4h, #0\nmov w8, #7                          // =0x7\nmov w11, #6                         // =0x6\nfmov w9, s0\nmov w10, v0.s[1]\nmov w12, v0.s[2]\nsdiv w9, w9, w8\nsdiv w10, w10, w11\nmov v1.s[0], w9\nsdiv w8, w12, w8\nmov w12, v0.s[3]\nmov v1.s[1], w10\nsdiv w9, w12, w11\nmov v1.s[2], w8\nadrp x8, .LCPI0_0\nldr d2, [x8, :lo12:.LCPI0_0]\nsshll v2.4s, v2.4h, #0\nmov v1.s[3], w9\nmls v0.4s, v1.4s, v2.4s\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i16> @test(<4 x i16> %a) {\n  %r = srem <4 x i16> %a, <i16 7, i16 6, i16 7, i16 6>\n  ret <4 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = srem <4 x i16> %a, <i16 7, i16 6, i16 7, i16 6>\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i16> %r"
 },
 {
  "instr": "srem",
  "ty": "<4 x i16>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 31,
  "lat": 7,
  "sizelat": 7,
  "size": 17,
  "gisize": 21,
  "extrasize": 0,
  "asm": "smov w11, v0.h[0]\nsxth w9, w0\nsmov w8, v0.h[1]\nsmov w13, v0.h[2]\nsmov w15, v0.h[3]\nsdiv w12, w11, w9\nsdiv w10, w8, w9\nmsub w11, w12, w9, w11\nfmov s0, w11\nsdiv w14, w13, w9\nmsub w8, w10, w9, w8\nmov v0.h[1], w8\nsdiv w10, w15, w9\nmsub w8, w14, w9, w13\nmov v0.h[2], w8\nmsub w8, w10, w9, w15\nmov v0.h[3], w8\nret",
  "giasm": "dup v1.4h, w0\nsshll v0.4s, v0.4h, #0\nfmov w8, s0\nsshll v1.4s, v1.4h, #0\nfmov w9, s1\nmov w10, v1.s[1]\nmov w11, v1.s[2]\nmov w12, v1.s[3]\nsdiv w8, w8, w9\nmov w9, v0.s[1]\nsdiv w9, w9, w10\nmov w10, v0.s[2]\nmov v2.s[0], w8\nsdiv w10, w10, w11\nmov w11, v0.s[3]\nmov v2.s[1], w9\nsdiv w8, w11, w12\nmov v2.s[2], w10\nmov v2.s[3], w8\nmls v0.4s, v2.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i16> @test(<4 x i16> %a, i16 %bs) {\n  %i = insertelement <4 x i16> poison, i16 %bs, i64 0\n  %b = shufflevector <4 x i16> %i, <4 x i16> poison, <4 x i32> zeroinitializer\n  %r = srem <4 x i16> %a, %b\n  ret <4 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <4 x i16> poison, i16 %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <4 x i16> %i, <4 x i16> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = srem <4 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i16> %r"
 },
 {
  "instr": "srem",
  "ty": "<4 x i16>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 6,
  "lat": 4,
  "sizelat": 4,
  "size": 8,
  "gisize": 18,
  "extrasize": 0,
  "asm": "mov w8, #18725                      // =0x4925\nmovi v2.4h, #7\ndup v1.4h, w8\nsmull v1.4s, v0.4h, v1.4h\nsshr v1.4s, v1.4s, #17\nxtn v1.4h, v1.4s\nusra v1.4h, v1.4h, #15\nmls v0.4h, v1.4h, v2.4h\nret",
  "giasm": "sshll v0.4s, v0.4h, #0\nmov w8, #7                          // =0x7\nmovi v2.4h, #7\nfmov w9, s0\nmov w10, v0.s[1]\nmov w11, v0.s[2]\nmov w12, v0.s[3]\nsshll v2.4s, v2.4h, #0\nsdiv w9, w9, w8\nsdiv w10, w10, w8\nmov v1.s[0], w9\nsdiv w11, w11, w8\nmov v1.s[1], w10\nsdiv w8, w12, w8\nmov v1.s[2], w11\nmov v1.s[3], w8\nmls v0.4s, v1.4s, v2.4s\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i16> @test(<4 x i16> %a) {\n  %r = srem <4 x i16> %a, splat (i16 7)\n  ret <4 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = srem <4 x i16> %a, splat (i16 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i16> %r"
 },
 {
  "instr": "srem",
  "ty": "<8 x i16>",
  "variant": "binop",
  "codesize": 4,
  "thru": 56,
  "lat": 4,
  "sizelat": 4,
  "size": 40,
  "gisize": 39,
  "extrasize": 0,
  "asm": "smov w11, v1.h[0]\nsmov w12, v0.h[0]\nsmov w8, v1.h[1]\nsmov w9, v0.h[1]\nsmov w14, v1.h[2]\nsmov w15, v0.h[2]\nsmov w17, v1.h[3]\nsmov w18, v0.h[3]\nsmov w1, v1.h[4]\nsmov w2, v0.h[4]\nsmov w4, v1.h[5]\nsmov w5, v0.h[5]\nsdiv w13, w12, w11\nsdiv w10, w9, w8\nmsub w11, w13, w11, w12\nsmov w13, v1.h[7]\nfmov s2, w11\nsmov w11, v0.h[6]\nsdiv w16, w15, w14\nmsub w8, w10, w8, w9\nsmov w10, v1.h[6]\nmov v2.h[1], w8\nsdiv w0, w18, w17\nmsub w8, w16, w14, w15\nsmov w14, v0.h[7]\nmov v2.h[2], w8\nsdiv w3, w2, w1\nmsub w8, w0, w17, w18\nmov v2.h[3], w8\nsdiv w9, w5, w4\nmsub w8, w3, w1, w2\nmov v2.h[4], w8\nsdiv w12, w11, w10\nmsub w8, w9, w4, w5\nmov v2.h[5], w8\nsdiv w9, w14, w13\nmsub w8, w12, w10, w11\nmov v2.h[6], w8\nmsub w8, w9, w13, w14\nmov v2.h[7], w8\nmov v0.16b, v2.16b\nret",
  "giasm": "sshll v2.4s, v0.4h, #0\nsshll v3.4s, v1.4h, #0\nsshll2 v0.4s, v0.8h, #0\nsshll2 v1.4s, v1.8h, #0\nfmov w8, s2\nfmov w9, s3\nmov w10, v3.s[1]\nmov w11, v3.s[2]\nmov w12, v3.s[3]\nfmov w13, s1\nmov w14, v1.s[1]\nmov w15, v1.s[2]\nsdiv w8, w8, w9\nmov w9, v2.s[1]\nsdiv w9, w9, w10\nmov w10, v2.s[2]\nmov v4.s[0], w8\nmov w8, v0.s[3]\nsdiv w10, w10, w11\nmov w11, v2.s[3]\nmov v4.s[1], w9\nsdiv w11, w11, w12\nfmov w12, s0\nmov v4.s[2], w10\nsdiv w12, w12, w13\nmov w13, v0.s[1]\nmov v4.s[3], w11\nmls v2.4s, v4.4s, v3.4s\nsdiv w13, w13, w14\nmov w14, v0.s[2]\nmov v5.s[0], w12\nmov w12, v1.s[3]\nsdiv w14, w14, w15\nmov v5.s[1], w13\nsdiv w8, w8, w12\nmov v5.s[2], w14\nmov v5.s[3], w8\nmls v0.4s, v5.4s, v1.4s\nuzp1 v0.8h, v2.8h, v0.8h\nret",
  "ll": "define <8 x i16> @test(<8 x i16> %a, <8 x i16> %b) {\n  %r = srem <8 x i16> %a, %b\n  ret <8 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = srem <8 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i16> %r"
 },
 {
  "instr": "srem",
  "ty": "<8 x i16>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 30,
  "lat": 4,
  "sizelat": 4,
  "size": 11,
  "gisize": 34,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nadrp x8, .LCPI0_1\nsmull2 v2.4s, v0.8h, v1.8h\nsmull v1.4s, v0.4h, v1.4h\nuzp2 v1.8h, v1.8h, v2.8h\nmovi v2.2d, #0x00ffff0000ffff\nsshl v1.8h, v1.8h, v2.8h\nldr q2, [x8, :lo12:.LCPI0_1]\nusra v1.8h, v1.8h, #15\nmls v0.8h, v1.8h, v2.8h\nret",
  "giasm": "sshll v1.4s, v0.4h, #0\nsshll2 v0.4s, v0.8h, #0\nmov w8, #7                          // =0x7\nmov w11, #6                         // =0x6\nmov w12, v1.s[2]\nmov w15, v0.s[2]\nfmov w9, s1\nfmov w14, s0\nmov w10, v1.s[1]\nmov w13, v1.s[3]\nsdiv w9, w9, w8\nsdiv w12, w12, w8\nmov v2.s[0], w9\nmov w9, v0.s[3]\nsdiv w14, w14, w8\nsdiv w8, w15, w8\nmov w15, v0.s[1]\nmov v3.s[0], w14\nsdiv w10, w10, w11\nsdiv w15, w15, w11\nmov v2.s[1], w10\nmov v2.s[2], w12\nsdiv w13, w13, w11\nmov v3.s[1], w15\nmov v3.s[2], w8\nadrp x8, .LCPI0_0\nldr d4, [x8, :lo12:.LCPI0_0]\nsshll v4.4s, v4.4h, #0\nsdiv w9, w9, w11\nmov v2.s[3], w13\nmls v1.4s, v2.4s, v4.4s\nmov v3.s[3], w9\nmls v0.4s, v3.4s, v4.4s\nuzp1 v0.8h, v1.8h, v0.8h\nret",
  "ll": "define <8 x i16> @test(<8 x i16> %a) {\n  %r = srem <8 x i16> %a, <i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6>\n  ret <8 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = srem <8 x i16> %a, <i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6>\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i16> %r"
 },
 {
  "instr": "srem",
  "ty": "<8 x i16>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 59,
  "lat": 7,
  "sizelat": 7,
  "size": 33,
  "gisize": 40,
  "extrasize": 0,
  "asm": "smov w11, v0.h[0]\nsxth w9, w0\nsmov w8, v0.h[1]\nsmov w13, v0.h[2]\nsmov w15, v0.h[3]\nsmov w17, v0.h[4]\nsmov w0, v0.h[5]\nsdiv w12, w11, w9\nsdiv w10, w8, w9\nmsub w11, w12, w9, w11\nfmov s1, w11\nsmov w11, v0.h[6]\nsdiv w14, w13, w9\nmsub w8, w10, w9, w8\nmov v1.h[1], w8\nsdiv w16, w15, w9\nmsub w8, w14, w9, w13\nsmov w13, v0.h[7]\nmov v1.h[2], w8\nsdiv w18, w17, w9\nmsub w8, w16, w9, w15\nmov v1.h[3], w8\nsdiv w10, w0, w9\nmsub w8, w18, w9, w17\nmov v1.h[4], w8\nsdiv w12, w11, w9\nmsub w8, w10, w9, w0\nmov v1.h[5], w8\nsdiv w10, w13, w9\nmsub w8, w12, w9, w11\nmov v1.h[6], w8\nmsub w8, w10, w9, w13\nmov v1.h[7], w8\nmov v0.16b, v1.16b\nret",
  "giasm": "dup v1.8h, w0\nsshll v2.4s, v0.4h, #0\nsshll2 v0.4s, v0.8h, #0\nsshll v3.4s, v1.4h, #0\nfmov w8, s2\nsshll2 v1.4s, v1.8h, #0\nfmov w9, s3\nmov w10, v3.s[1]\nmov w11, v3.s[2]\nmov w12, v3.s[3]\nfmov w13, s1\nmov w14, v1.s[1]\nmov w15, v1.s[2]\nsdiv w8, w8, w9\nmov w9, v2.s[1]\nsdiv w9, w9, w10\nmov w10, v2.s[2]\nmov v4.s[0], w8\nmov w8, v0.s[3]\nsdiv w10, w10, w11\nmov w11, v2.s[3]\nmov v4.s[1], w9\nsdiv w11, w11, w12\nfmov w12, s0\nmov v4.s[2], w10\nsdiv w12, w12, w13\nmov w13, v0.s[1]\nmov v4.s[3], w11\nmls v2.4s, v4.4s, v3.4s\nsdiv w13, w13, w14\nmov w14, v0.s[2]\nmov v5.s[0], w12\nmov w12, v1.s[3]\nsdiv w14, w14, w15\nmov v5.s[1], w13\nsdiv w8, w8, w12\nmov v5.s[2], w14\nmov v5.s[3], w8\nmls v0.4s, v5.4s, v1.4s\nuzp1 v0.8h, v2.8h, v0.8h\nret",
  "ll": "define <8 x i16> @test(<8 x i16> %a, i16 %bs) {\n  %i = insertelement <8 x i16> poison, i16 %bs, i64 0\n  %b = shufflevector <8 x i16> %i, <8 x i16> poison, <8 x i32> zeroinitializer\n  %r = srem <8 x i16> %a, %b\n  ret <8 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <8 x i16> poison, i16 %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <8 x i16> %i, <8 x i16> poison, <8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = srem <8 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i16> %r"
 },
 {
  "instr": "srem",
  "ty": "<8 x i16>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 6,
  "lat": 4,
  "sizelat": 4,
  "size": 9,
  "gisize": 32,
  "extrasize": 0,
  "asm": "mov w8, #18725                      // =0x4925\ndup v1.8h, w8\nsmull2 v2.4s, v0.8h, v1.8h\nsmull v1.4s, v0.4h, v1.4h\nuzp2 v1.8h, v1.8h, v2.8h\nmovi v2.8h, #7\nsshr v1.8h, v1.8h, #1\nusra v1.8h, v1.8h, #15\nmls v0.8h, v1.8h, v2.8h\nret",
  "giasm": "sshll v1.4s, v0.4h, #0\nsshll2 v0.4s, v0.8h, #0\nmov w8, #7                          // =0x7\nmovi v4.4h, #7\nfmov w9, s1\nfmov w13, s0\nmov w10, v1.s[1]\nmov w14, v0.s[1]\nmov w11, v1.s[2]\nmov w15, v0.s[2]\nmov w12, v1.s[3]\nsshll v4.4s, v4.4h, #0\nsdiv w9, w9, w8\nsdiv w13, w13, w8\nmov v2.s[0], w9\nmov w9, v0.s[3]\nsdiv w10, w10, w8\nmov v3.s[0], w13\nsdiv w14, w14, w8\nmov v2.s[1], w10\nsdiv w11, w11, w8\nmov v3.s[1], w14\nsdiv w15, w15, w8\nmov v2.s[2], w11\nsdiv w12, w12, w8\nmov v3.s[2], w15\nsdiv w8, w9, w8\nmov v2.s[3], w12\nmls v1.4s, v2.4s, v4.4s\nmov v3.s[3], w8\nmls v0.4s, v3.4s, v4.4s\nuzp1 v0.8h, v1.8h, v0.8h\nret",
  "ll": "define <8 x i16> @test(<8 x i16> %a) {\n  %r = srem <8 x i16> %a, splat (i16 7)\n  ret <8 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = srem <8 x i16> %a, splat (i16 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i16> %r"
 },
 {
  "instr": "srem",
  "ty": "<16 x i16>",
  "variant": "binop",
  "codesize": 4,
  "thru": 112,
  "lat": 4,
  "sizelat": 4,
  "size": 116,
  "gisize": 82,
  "extrasize": 0,
  "asm": "sub sp, sp, #160\nstp x29, x30, [sp, #64]             // 16-byte Folded Spill\nstp x28, x27, [sp, #80]             // 16-byte Folded Spill\nstp x26, x25, [sp, #96]             // 16-byte Folded Spill\nstp x24, x23, [sp, #112]            // 16-byte Folded Spill\nstp x22, x21, [sp, #128]            // 16-byte Folded Spill\nstp x20, x19, [sp, #144]            // 16-byte Folded Spill\nsmov w8, v2.h[1]\nsmov w9, v0.h[1]\nsmov w19, v2.h[2]\nsmov w22, v0.h[2]\nsmov w1, v2.h[0]\nsmov w3, v0.h[0]\nsmov w7, v2.h[3]\nsmov w18, v0.h[3]\nsmov w4, v0.h[6]\nsmov w0, v2.h[4]\nsmov w5, v0.h[4]\nsmov w2, v2.h[7]\nstr w8, [sp, #52]                   // 4-byte Folded Spill\nsmov w6, v0.h[7]\nsmov w27, v3.h[0]\nstr w9, [sp, #44]                   // 4-byte Folded Spill\nsdiv w9, w9, w8\nsmov w28, v1.h[0]\nsmov w24, v3.h[1]\nsmov w25, v1.h[1]\nldr w21, [sp, #52]                  // 4-byte Folded Reload\nldr w23, [sp, #44]                  // 4-byte Folded Reload\nsmov w30, v3.h[2]\nsmov w12, v3.h[3]\nsmov w11, v1.h[3]\nsmov w14, v3.h[5]\nsmov w13, v1.h[5]\nsdiv w8, w22, w19\nstr w9, [sp, #60]                   // 4-byte Folded Spill\nldr w20, [sp, #60]                  // 4-byte Folded Reload\nmsub w21, w20, w21, w23\nsdiv w9, w3, w1\nstr w8, [sp, #12]                   // 4-byte Folded Spill\nsdiv w8, w18, w7\nstp w9, w8, [sp, #24]               // 8-byte Folded Spill\nsmov w8, v2.h[5]\nsmov w9, v0.h[5]\nsdiv w10, w5, w0\nldr w20, [sp, #24]                  // 4-byte Folded Reload\nmsub w1, w20, w1, w3\nstr w9, [sp, #40]                   // 4-byte Folded Spill\nstr w8, [sp, #48]                   // 4-byte Folded Spill\nfmov s0, w1\nldr w1, [sp, #12]                   // 4-byte Folded Reload\nmsub w1, w1, w19, w22\nldr w19, [sp, #28]                  // 4-byte Folded Reload\nsdiv w9, w9, w8\nsmov w8, v2.h[6]\nmov v0.h[1], w21\nmsub w18, w19, w7, w18\nldp x20, x19, [sp, #144]            // 16-byte Folded Reload\nldp x22, x21, [sp, #128]            // 16-byte Folded Reload\nmov v0.h[2], w1\nstr w9, [sp, #56]                   // 4-byte Folded Spill\nsdiv w9, w4, w8\nmov v0.h[3], w18\nldr w18, [sp, #40]                  // 4-byte Folded Reload\nstp w8, w9, [sp, #32]               // 8-byte Folded Spill\nsdiv w8, w6, w2\nsmov w9, v1.h[4]\nsdiv w29, w28, w27\nstp w8, w10, [sp, #16]              // 8-byte Folded Spill\nsmov w8, v1.h[2]\nsmov w10, v3.h[4]\nsdiv w26, w25, w24\nmsub w3, w29, w27, w28\nldp x28, x27, [sp, #80]             // 16-byte Folded Reload\nfmov s2, w3\nsmov w3, v1.h[6]\nsdiv w15, w8, w30\nmsub w24, w26, w24, w25\nmov v2.h[1], w24\nldp x24, x23, [sp, #112]            // 16-byte Folded Reload\nsdiv w17, w11, w12\nmsub w8, w15, w30, w8\nsmov w15, v3.h[6]\nldp x29, x30, [sp, #64]             // 16-byte Folded Reload\nmov v2.h[2], w8\nsdiv w16, w9, w10\nmsub w8, w17, w12, w11\nldr w12, [sp, #20]                  // 4-byte Folded Reload\nldr w17, [sp, #48]                  // 4-byte Folded Reload\nmsub w12, w12, w0, w5\nmov v2.h[3], w8\nmov v0.h[4], w12\nsdiv w25, w13, w14\nmsub w8, w16, w10, w9\nsmov w9, v3.h[7]\nsmov w10, v1.h[7]\nldr w16, [sp, #56]                  // 4-byte Folded Reload\nmov v2.h[4], w8\nmsub w16, w16, w17, w18\nmov v0.h[5], w16\nsdiv w11, w3, w15\nmsub w8, w25, w14, w13\nldp w14, w13, [sp, #32]             // 8-byte Folded Reload\nldp x26, x25, [sp, #96]             // 16-byte Folded Reload\nmov v2.h[5], w8\nmsub w13, w13, w14, w4\nmov v0.h[6], w13\nsdiv w12, w10, w9\nmsub w8, w11, w15, w3\nldr w11, [sp, #16]                  // 4-byte Folded Reload\nmsub w11, w11, w2, w6\nmov v2.h[6], w8\nmov v0.h[7], w11\nmsub w8, w12, w9, w10\nmov v2.h[7], w8\nmov v1.16b, v2.16b\nadd sp, sp, #160\nret",
  "giasm": "sshll v4.4s, v0.4h, #0\nsshll v5.4s, v2.4h, #0\nsshll v6.4s, v1.4h, #0\nsshll v7.4s, v3.4h, #0\nfmov w8, s4\nfmov w9, s5\nmov w12, v5.s[3]\nfmov w17, s7\nmov w18, v7.s[1]\nmov w0, v7.s[2]\nmov w1, v7.s[3]\nsshll2 v7.4s, v3.8h, #0\nsshll v3.4s, v3.4h, #0\nsdiv w11, w8, w9\nmov w8, v4.s[1]\nmov w9, v5.s[1]\nfmov w2, s7\nmov w3, v7.s[1]\nmov w4, v7.s[2]\nsdiv w10, w8, w9\nmov w8, v4.s[2]\nmov w9, v5.s[2]\nsshll2 v5.4s, v2.8h, #0\nmov v16.s[0], w11\nsshll v2.4s, v2.4h, #0\nfmov w13, s5\nmov w14, v5.s[1]\nmov w15, v5.s[2]\nmov w16, v5.s[3]\nsdiv w9, w8, w9\nmov w8, v4.s[3]\nsshll2 v4.4s, v0.8h, #0\nmov v16.s[1], w10\nsshll v0.4s, v0.4h, #0\nsdiv w8, w8, w12\nfmov w12, s4\nmov v16.s[2], w9\nsdiv w13, w12, w13\nmov w12, v4.s[1]\nmov v16.s[3], w8\nmls v0.4s, v16.4s, v2.4s\nsdiv w14, w12, w14\nmov w12, v4.s[2]\nmov v17.s[0], w13\nmov w13, v7.s[3]\nsdiv w15, w12, w15\nmov w12, v4.s[3]\nmov v17.s[1], w14\nsdiv w12, w12, w16\nfmov w16, s6\nmov v17.s[2], w15\nsdiv w16, w16, w17\nmov w17, v6.s[1]\nmov v17.s[3], w12\nmls v4.4s, v17.4s, v5.4s\nsdiv w17, w17, w18\nmov w18, v6.s[2]\nmov v18.s[0], w16\nuzp1 v0.8h, v0.8h, v4.8h\nsdiv w18, w18, w0\nmov w0, v6.s[3]\nsshll2 v6.4s, v1.8h, #0\nmov v18.s[1], w17\nsshll v1.4s, v1.4h, #0\nmov w11, v6.s[3]\nsdiv w0, w0, w1\nfmov w1, s6\nmov v18.s[2], w18\nsdiv w1, w1, w2\nmov w2, v6.s[1]\nmov v18.s[3], w0\nmls v1.4s, v18.4s, v3.4s\nsdiv w2, w2, w3\nmov w3, v6.s[2]\nmov v19.s[0], w1\nsdiv w3, w3, w4\nmov v19.s[1], w2\nsdiv w10, w11, w13\nmov v19.s[2], w3\nmov v19.s[3], w10\nmls v6.4s, v19.4s, v7.4s\nuzp1 v1.8h, v1.8h, v6.8h\nret",
  "ll": "define <16 x i16> @test(<16 x i16> %a, <16 x i16> %b) {\n  %r = srem <16 x i16> %a, %b\n  ret <16 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = srem <16 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i16> %r"
 },
 {
  "instr": "srem",
  "ty": "<16 x i16>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 54,
  "lat": 4,
  "sizelat": 4,
  "size": 135,
  "gisize": 65,
  "extrasize": 0,
  "asm": "str x19, [sp, #-16]!                // 8-byte Folded Spill\nsmov w11, v0.h[0]\nsmov w13, v0.h[1]\nmov w9, #9363                       // =0x2493\nsmov w12, v0.h[2]\nsmov w17, v1.h[0]\nmov w8, #43691                      // =0xaaab\nsmov w14, v0.h[3]\nmovk w9, #37449, lsl #16\nsmov w16, v1.h[1]\nmovk w8, #10922, lsl #16\nsmov w15, v1.h[2]\nmov w10, #6                         // =0x6\nsmull x0, w11, w9\nsmull x18, w13, w8\nsmull x1, w12, w9\nsmull x4, w17, w9\nlsr x0, x0, #32\nsmull x2, w14, w8\nlsr x5, x18, #63\nlsr x18, x18, #32\nsmull x3, w16, w8\nlsr x1, x1, #32\nadd w0, w0, w11\nlsr x4, x4, #32\nadd w18, w18, w5\nasr w5, w0, #2\nlsr x6, x2, #63\nlsr x2, x2, #32\nadd w1, w1, w12\nlsr x7, x3, #63\nlsr x3, x3, #32\nadd w4, w4, w17\nadd w2, w2, w6\nasr w6, w1, #2\nadd w5, w5, w0, lsr #31\nadd w3, w3, w7\nmsub w7, w18, w10, w13\nasr w18, w4, #2\nsmull x19, w15, w9\nadd w1, w6, w1, lsr #31\nsmov w13, v0.h[4]\nadd w4, w18, w4, lsr #31\nmsub w0, w2, w10, w14\nsub w2, w5, w5, lsl #3\nsub w1, w1, w1, lsl #3\nsmov w18, v1.h[3]\nsmov w14, v1.h[4]\nlsr x5, x19, #32\nsub w4, w4, w4, lsl #3\nadd w11, w11, w2\nfmov s2, w11\nadd w12, w12, w1\nsmull x1, w13, w9\nadd w17, w17, w4\nadd w2, w5, w15\nmsub w16, w3, w10, w16\nasr w3, w2, #2\nfmov s3, w17\nsmull x4, w18, w8\nmov v2.h[1], w7\nsmull x17, w14, w9\nlsr x1, x1, #32\nadd w2, w3, w2, lsr #31\nsmov w5, v0.h[5]\nsmov w11, v0.h[6]\nmov v3.h[1], w16\nadd w1, w1, w13\nlsr x16, x4, #63\nsub w2, w2, w2, lsl #3\nlsr x3, x4, #32\nlsr x17, x17, #32\nmov v2.h[2], w12\nasr w12, w1, #2\nadd w15, w15, w2\nadd w16, w3, w16\nadd w17, w17, w14\nadd w12, w12, w1, lsr #31\nsmov w1, v1.h[5]\nmov v3.h[2], w15\nsmov w15, v1.h[6]\nsmull x3, w5, w8\nasr w2, w17, #2\nmsub w16, w16, w10, w18\nmov v2.h[3], w0\nsub w12, w12, w12, lsl #3\nadd w17, w2, w17, lsr #31\nsmull x0, w11, w9\nlsr x18, x3, #63\nlsr x2, x3, #32\nadd w12, w13, w12\nsmull x13, w1, w8\nmov v3.h[3], w16\nsub w17, w17, w17, lsl #3\nsmull x9, w15, w9\nmov v2.h[4], w12\nadd w12, w2, w18\nlsr x18, x0, #32\nadd w14, w14, w17\nsmov w16, v0.h[7]\nlsr x17, x13, #63\nlsr x13, x13, #32\nmsub w12, w12, w10, w5\nlsr x9, x9, #32\nadd w18, w18, w11\nmov v3.h[4], w14\nsmov w14, v1.h[7]\nadd w13, w13, w17\nasr w17, w18, #2\nadd w9, w9, w15\nmsub w13, w13, w10, w1\nmov v2.h[5], w12\nasr w0, w9, #2\nadd w17, w17, w18, lsr #31\nsmull x18, w16, w8\nadd w9, w0, w9, lsr #31\nsmull x8, w14, w8\nsub w12, w17, w17, lsl #3\nmov v3.h[5], w13\nlsr x13, x18, #63\nlsr x17, x18, #32\nsub w9, w9, w9, lsl #3\nadd w11, w11, w12\nlsr x12, x8, #63\nlsr x8, x8, #32\nmov v2.h[6], w11\nadd w9, w15, w9\nadd w11, w17, w13\nmov v3.h[6], w9\nadd w8, w8, w12\nmsub w11, w11, w10, w16\nmsub w8, w8, w10, w14\nmov v2.h[7], w11\nmov v3.h[7], w8\nmov v0.16b, v2.16b\nmov v1.16b, v3.16b\nldr x19, [sp], #16                  // 8-byte Folded Reload\nret",
  "giasm": "sshll v2.4s, v0.4h, #0\nmov w8, #7                          // =0x7\nmov w10, #6                         // =0x6\nsshll v3.4s, v1.4h, #0\nfmov w9, s2\nfmov w18, s3\nmov w0, v3.s[1]\nmov w1, v3.s[2]\nmov w2, v3.s[3]\nsshll2 v3.4s, v1.8h, #0\nsshll v1.4s, v1.4h, #0\nsdiv w13, w9, w8\nmov w9, v2.s[1]\nmov w4, v3.s[2]\nfmov w3, s3\nsdiv w12, w9, w10\nmov w9, v2.s[2]\nmov v4.s[0], w13\nmov w13, v3.s[3]\nsdiv w11, w9, w8\nmov w9, v2.s[3]\nsshll2 v2.4s, v0.8h, #0\nmov v4.s[1], w12\nsshll v0.4s, v0.4h, #0\nmov w16, v2.s[2]\nfmov w14, s2\nmov w15, v2.s[1]\nmov w17, v2.s[3]\nsdiv w14, w14, w8\nmov v4.s[2], w11\nadrp x11, .LCPI0_0\nldr d16, [x11, :lo12:.LCPI0_0]\nsshll v16.4s, v16.4h, #0\nsdiv w16, w16, w8\nmov v5.s[0], w14\nsdiv w18, w18, w8\nsdiv w1, w1, w8\nmov v6.s[0], w18\nsdiv w3, w3, w8\nsdiv w8, w4, w8\nmov w4, v3.s[1]\nmov v7.s[0], w3\nsdiv w15, w15, w10\nsdiv w0, w0, w10\nmov v5.s[1], w15\nmov v5.s[2], w16\nsdiv w4, w4, w10\nmov v6.s[1], w0\nmov v6.s[2], w1\nsdiv w9, w9, w10\nmov v7.s[1], w4\nmov v7.s[2], w8\nsdiv w17, w17, w10\nmov v4.s[3], w9\nmls v0.4s, v4.4s, v16.4s\nsdiv w2, w2, w10\nmov v5.s[3], w17\nmls v2.4s, v5.4s, v16.4s\nsdiv w10, w13, w10\nmov v6.s[3], w2\nuzp1 v0.8h, v0.8h, v2.8h\nmls v1.4s, v6.4s, v16.4s\nmov v7.s[3], w10\nmls v3.4s, v7.4s, v16.4s\nuzp1 v1.8h, v1.8h, v3.8h\nret",
  "ll": "define <16 x i16> @test(<16 x i16> %a) {\n  %r = srem <16 x i16> %a, <i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6>\n  ret <16 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = srem <16 x i16> %a, <i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6>\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i16> %r"
 },
 {
  "instr": "srem",
  "ty": "<16 x i16>",
  "variant": "binopsplat",
  "codesize": 7,
  "thru": 116,
  "lat": 8,
  "sizelat": 8,
  "size": 75,
  "gisize": 78,
  "extrasize": 0,
  "asm": "str x27, [sp, #-80]!                // 8-byte Folded Spill\nstp x26, x25, [sp, #16]             // 16-byte Folded Spill\nstp x24, x23, [sp, #32]             // 16-byte Folded Spill\nstp x22, x21, [sp, #48]             // 16-byte Folded Spill\nstp x20, x19, [sp, #64]             // 16-byte Folded Spill\nsmov w15, v0.h[1]\nsmov w2, v0.h[0]\nsxth w8, w0\nsmov w19, v1.h[0]\nsmov w6, v1.h[1]\nsmov w21, v1.h[2]\nsmov w3, v0.h[2]\nsmov w16, v0.h[3]\nsmov w23, v1.h[3]\nsmov w17, v0.h[4]\nsmov w25, v1.h[4]\nsmov w9, v0.h[5]\nsdiv w1, w15, w8\nsmov w10, v0.h[6]\nsmov w13, v0.h[7]\nsmov w27, v1.h[5]\nsdiv w4, w2, w8\nmsub w15, w1, w8, w15\nsdiv w20, w19, w8\nmsub w1, w4, w8, w2\nfmov s0, w1\nmov v0.h[1], w15\nsdiv w7, w6, w8\nmsub w2, w20, w8, w19\nldp x20, x19, [sp, #64]             // 16-byte Folded Reload\nfmov s2, w2\nsmov w2, v1.h[6]\nsdiv w22, w21, w8\nmsub w4, w7, w8, w6\nmov v2.h[1], w4\nsdiv w5, w3, w8\nmsub w1, w22, w8, w21\nldp x22, x21, [sp, #48]             // 16-byte Folded Reload\nmov v2.h[2], w1\nsdiv w18, w16, w8\nmsub w15, w5, w8, w3\nmov v0.h[2], w15\nsdiv w24, w23, w8\nmsub w15, w18, w8, w16\nmov v0.h[3], w15\nsdiv w0, w17, w8\nmsub w16, w24, w8, w23\nldp x24, x23, [sp, #32]             // 16-byte Folded Reload\nmov v2.h[3], w16\nsdiv w26, w25, w8\nmsub w15, w0, w8, w17\nsmov w17, v1.h[7]\nmov v0.h[4], w15\nsdiv w11, w9, w8\nmsub w16, w26, w8, w25\nldp x26, x25, [sp, #16]             // 16-byte Folded Reload\nmov v2.h[4], w16\nsdiv w6, w27, w8\nmsub w9, w11, w8, w9\nmov v0.h[5], w9\nsdiv w12, w10, w8\nmsub w11, w6, w8, w27\nmov v2.h[5], w11\nsdiv w18, w2, w8\nmsub w9, w12, w8, w10\nmov v0.h[6], w9\nsdiv w14, w13, w8\nmsub w10, w18, w8, w2\nmov v2.h[6], w10\nsdiv w15, w17, w8\nmsub w9, w14, w8, w13\nmov v0.h[7], w9\nmsub w8, w15, w8, w17\nmov v2.h[7], w8\nmov v1.16b, v2.16b\nldr x27, [sp], #80                  // 8-byte Folded Reload\nret",
  "giasm": "dup v2.8h, w0\nsshll v3.4s, v0.4h, #0\nsshll v5.4s, v1.4h, #0\nsshll v4.4s, v2.4h, #0\nsshll v6.4s, v2.4h, #0\nfmov w8, s3\nfmov w18, s5\nsshll v18.4s, v2.4h, #0\nfmov w9, s4\nfmov w0, s6\nmov w1, v6.s[1]\nmov w2, v6.s[2]\nmov w12, v4.s[3]\nmov w3, v6.s[3]\nsdiv w11, w8, w9\nmov w8, v3.s[1]\nmov w9, v4.s[1]\nsdiv w18, w18, w0\nmov w0, v5.s[1]\nmov v6.s[0], w11\nsdiv w10, w8, w9\nmov w8, v3.s[2]\nmov w9, v4.s[2]\nsshll2 v4.4s, v2.8h, #0\nmov v16.s[0], w18\nsshll v2.4s, v2.4h, #0\nfmov w13, s4\nmov w15, v4.s[1]\nmov w17, v4.s[2]\nmov w4, v4.s[3]\nsdiv w0, w0, w1\nmov w1, v5.s[2]\nmov v6.s[1], w10\nsdiv w9, w8, w9\nmov w8, v3.s[3]\nsshll2 v3.4s, v0.8h, #0\nmov v16.s[1], w0\nsshll v0.4s, v0.4h, #0\nmov w14, v3.s[1]\nmov w16, v3.s[2]\nsdiv w1, w1, w2\nmov w2, v5.s[3]\nsshll2 v5.4s, v1.8h, #0\nmov v6.s[2], w9\nsshll v1.4s, v1.4h, #0\nmov w11, v5.s[3]\nsdiv w8, w8, w12\nfmov w12, s3\nmov v16.s[2], w1\nsdiv w2, w2, w3\nfmov w3, s5\nmov v6.s[3], w8\nmls v0.4s, v6.4s, v18.4s\nsdiv w12, w12, w13\nmov v16.s[3], w2\nmls v1.4s, v16.4s, v2.4s\nsdiv w13, w3, w13\nmov w3, v5.s[1]\nmov v7.s[0], w12\nsdiv w14, w14, w15\nmov v17.s[0], w13\nsdiv w15, w3, w15\nmov w3, v5.s[2]\nmov v7.s[1], w14\nsdiv w16, w16, w17\nmov v17.s[1], w15\nsdiv w17, w3, w17\nmov w3, v3.s[3]\nmov v7.s[2], w16\nsdiv w3, w3, w4\nmov v17.s[2], w17\nsdiv w10, w11, w4\nmov v7.s[3], w3\nmls v3.4s, v7.4s, v4.4s\nmov v17.s[3], w10\nuzp1 v0.8h, v0.8h, v3.8h\nmls v5.4s, v17.4s, v4.4s\nuzp1 v1.8h, v1.8h, v5.8h\nret",
  "ll": "define <16 x i16> @test(<16 x i16> %a, i16 %bs) {\n  %i = insertelement <16 x i16> poison, i16 %bs, i64 0\n  %b = shufflevector <16 x i16> %i, <16 x i16> poison, <16 x i32> zeroinitializer\n  %r = srem <16 x i16> %a, %b\n  ret <16 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <16 x i16> poison, i16 %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <16 x i16> %i, <16 x i16> poison, <16 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = srem <16 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i16> %r"
 },
 {
  "instr": "srem",
  "ty": "<16 x i16>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 12,
  "lat": 4,
  "sizelat": 4,
  "size": 146,
  "gisize": 63,
  "extrasize": 0,
  "asm": "smov w13, v0.h[1]\nsmov w12, v0.h[0]\nmov w8, #9363                       // =0x2493\nsmov w11, v0.h[3]\nsmov w9, v0.h[4]\nmovk w8, #37449, lsl #16\nsmov w10, v0.h[2]\nsmov w17, v1.h[1]\nsmov w15, v1.h[0]\nsmov w16, v1.h[2]\nsmull x14, w13, w8\nsmull x18, w12, w8\nsmull x1, w11, w8\nsmull x2, w9, w8\nlsr x14, x14, #32\nlsr x18, x18, #32\nsmull x0, w10, w8\nlsr x1, x1, #32\nadd w14, w14, w13\nsmull x3, w17, w8\nlsr x2, x2, #32\nadd w18, w18, w12\nasr w4, w14, #2\nasr w5, w18, #2\nlsr x0, x0, #32\nadd w1, w1, w11\nadd w2, w2, w9\nsmull x7, w15, w8\nadd w14, w4, w14, lsr #31\nasr w4, w1, #2\nadd w5, w5, w18, lsr #31\nasr w18, w2, #2\nadd w0, w0, w10\nasr w6, w0, #2\nadd w1, w4, w1, lsr #31\nsmull x4, w16, w8\nadd w18, w18, w2, lsr #31\nlsr x2, x3, #32\nlsr x3, x7, #32\nsub w5, w5, w5, lsl #3\nadd w0, w6, w0, lsr #31\nsub w6, w14, w14, lsl #3\nadd w3, w3, w15\nlsr x4, x4, #32\nadd w2, w2, w17\nadd w12, w12, w5\nadd w6, w13, w6\nsmov w13, v1.h[3]\nfmov s2, w12\nasr w12, w3, #2\nasr w5, w2, #2\nadd w4, w4, w16\nsmov w14, v0.h[5]\nsub w0, w0, w0, lsl #3\nadd w3, w12, w3, lsr #31\nadd w2, w5, w2, lsr #31\nasr w5, w4, #2\nmov v2.h[1], w6\nsmov w12, v1.h[4]\nadd w10, w10, w0\nsub w3, w3, w3, lsl #3\nadd w4, w5, w4, lsr #31\nsmull x5, w13, w8\nsub w2, w2, w2, lsl #3\nsmull x0, w14, w8\nsub w1, w1, w1, lsl #3\nadd w15, w15, w3\nsub w4, w4, w4, lsl #3\nsub w18, w18, w18, lsl #3\nfmov s3, w15\nmov v2.h[2], w10\nlsr x5, x5, #32\nsmull x3, w12, w8\nadd w2, w17, w2\nsmov w17, v1.h[5]\nadd w5, w5, w13\nadd w1, w11, w1\nlsr x0, x0, #32\nmov v3.h[1], w2\nasr w15, w5, #2\nsmov w11, v0.h[6]\nlsr x2, x3, #32\nmov v2.h[3], w1\nadd w0, w0, w14\nadd w16, w16, w4\nadd w15, w15, w5, lsr #31\nsmull x4, w17, w8\nadd w2, w2, w12\nsmov w5, v1.h[6]\nasr w1, w0, #2\nmov v3.h[2], w16\nasr w16, w2, #2\nadd w9, w9, w18\nsub w15, w15, w15, lsl #3\nmov v2.h[4], w9\nadd w9, w1, w0, lsr #31\nadd w16, w16, w2, lsr #31\nlsr x0, x4, #32\nsmov w10, v0.h[7]\nsmull x3, w11, w8\nadd w13, w13, w15\nsmov w1, v1.h[7]\nsmull x15, w5, w8\nmov v3.h[3], w13\nsub w13, w16, w16, lsl #3\nadd w16, w0, w17\nsub w9, w9, w9, lsl #3\nasr w0, w16, #2\nlsr x18, x3, #32\nadd w12, w12, w13\nlsr x15, x15, #32\nsmull x13, w10, w8\nadd w9, w14, w9\nadd w16, w0, w16, lsr #31\nsmull x8, w1, w8\nadd w18, w18, w11\nmov v3.h[4], w12\nadd w12, w15, w5\nasr w0, w18, #2\nsub w15, w16, w16, lsl #3\nasr w16, w12, #2\nmov v2.h[5], w9\nlsr x9, x13, #32\nlsr x8, x8, #32\nadd w14, w0, w18, lsr #31\nadd w13, w17, w15\nadd w12, w16, w12, lsr #31\nadd w9, w9, w10\nmov v3.h[5], w13\nadd w8, w8, w1\nsub w14, w14, w14, lsl #3\nasr w13, w9, #2\nsub w12, w12, w12, lsl #3\nasr w15, w8, #2\nadd w11, w11, w14\nadd w9, w13, w9, lsr #31\nadd w12, w5, w12\nadd w8, w15, w8, lsr #31\nmov v2.h[6], w11\nmov v3.h[6], w12\nsub w9, w9, w9, lsl #3\nsub w8, w8, w8, lsl #3\nadd w9, w10, w9\nadd w8, w1, w8\nmov v2.h[7], w9\nmov v3.h[7], w8\nmov v0.16b, v2.16b\nmov v1.16b, v3.16b\nret",
  "giasm": "sshll v2.4s, v0.4h, #0\nmov w8, #7                          // =0x7\nsshll v3.4s, v1.4h, #0\nmovi v16.4h, #7\nfmov w9, s2\nfmov w17, s3\nmov w18, v3.s[1]\nmov w0, v3.s[2]\nmov w1, v3.s[3]\nsshll2 v3.4s, v1.8h, #0\nsshll v16.4s, v16.4h, #0\nsshll v1.4s, v1.4h, #0\nsdiv w12, w9, w8\nmov w9, v2.s[1]\nfmov w2, s3\nmov w3, v3.s[1]\nmov w4, v3.s[2]\nsdiv w11, w9, w8\nmov w9, v2.s[2]\nmov v4.s[0], w12\nmov w12, v3.s[3]\nsdiv w10, w9, w8\nmov w9, v2.s[3]\nsshll2 v2.4s, v0.8h, #0\nmov v4.s[1], w11\nsshll v0.4s, v0.4h, #0\nfmov w13, s2\nmov w14, v2.s[1]\nmov w15, v2.s[2]\nmov w16, v2.s[3]\nsdiv w13, w13, w8\nmov v4.s[2], w10\nsdiv w17, w17, w8\nmov v5.s[0], w13\nsdiv w2, w2, w8\nmov v6.s[0], w17\nsdiv w14, w14, w8\nmov v7.s[0], w2\nsdiv w18, w18, w8\nmov v5.s[1], w14\nsdiv w3, w3, w8\nmov v6.s[1], w18\nsdiv w15, w15, w8\nmov v7.s[1], w3\nsdiv w0, w0, w8\nmov v5.s[2], w15\nsdiv w4, w4, w8\nmov v6.s[2], w0\nsdiv w9, w9, w8\nmov v7.s[2], w4\nsdiv w16, w16, w8\nmov v4.s[3], w9\nmls v0.4s, v4.4s, v16.4s\nsdiv w1, w1, w8\nmov v5.s[3], w16\nmls v2.4s, v5.4s, v16.4s\nsdiv w8, w12, w8\nmov v6.s[3], w1\nuzp1 v0.8h, v0.8h, v2.8h\nmls v1.4s, v6.4s, v16.4s\nmov v7.s[3], w8\nmls v3.4s, v7.4s, v16.4s\nuzp1 v1.8h, v1.8h, v3.8h\nret",
  "ll": "define <16 x i16> @test(<16 x i16> %a) {\n  %r = srem <16 x i16> %a, splat (i16 7)\n  ret <16 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = srem <16 x i16> %a, splat (i16 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i16> %r"
 },
 {
  "instr": "srem",
  "ty": "<2 x i32>",
  "variant": "binop",
  "codesize": 4,
  "thru": 14,
  "lat": 4,
  "sizelat": 4,
  "size": 10,
  "gisize": 9,
  "extrasize": 0,
  "asm": "fmov w8, s1\nfmov w9, s0\nmov w11, v1.s[1]\nmov w12, v0.s[1]\nsdiv w10, w9, w8\nsdiv w13, w12, w11\nmsub w8, w10, w8, w9\nfmov s0, w8\nmsub w9, w13, w11, w12\nmov v0.s[1], w9\nret",
  "giasm": "fmov w8, s0\nfmov w9, s1\nmov w10, v1.s[1]\nsdiv w8, w8, w9\nmov w9, v0.s[1]\nsdiv w9, w9, w10\nmov v2.s[0], w8\nmov v2.s[1], w9\nmls v0.2s, v2.2s, v1.2s\nret",
  "ll": "define <2 x i32> @test(<2 x i32> %a, <2 x i32> %b) {\n  %r = srem <2 x i32> %a, %b\n  ret <2 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = srem <2 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i32> %r"
 },
 {
  "instr": "srem",
  "ty": "<2 x i32>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 12,
  "lat": 4,
  "sizelat": 4,
  "size": 13,
  "gisize": 11,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nmov v2.16b, v0.16b\nldr d1, [x8, :lo12:.LCPI0_0]\nadrp x8, .LCPI0_1\nsmull v1.2d, v0.2s, v1.2s\nmov v2.s[1], wzr\nshrn v1.2s, v1.2d, #32\nadd v1.2s, v1.2s, v2.2s\nldr d2, [x8, :lo12:.LCPI0_1]\nadrp x8, .LCPI0_2\nsshl v2.2s, v1.2s, v2.2s\nusra v2.2s, v1.2s, #31\nldr d1, [x8, :lo12:.LCPI0_2]\nmls v0.2s, v2.2s, v1.2s\nret",
  "giasm": "fmov w9, s0\nmov w8, #7                          // =0x7\nmov w10, #6                         // =0x6\nsdiv w8, w9, w8\nmov w9, v0.s[1]\nsdiv w9, w9, w10\nmov v1.s[0], w8\nadrp x8, .LCPI0_0\nldr d2, [x8, :lo12:.LCPI0_0]\nmov v1.s[1], w9\nmls v0.2s, v1.2s, v2.2s\nret",
  "ll": "define <2 x i32> @test(<2 x i32> %a) {\n  %r = srem <2 x i32> %a, <i32 7, i32 6>\n  ret <2 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = srem <2 x i32> %a, <i32 7, i32 6>\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i32> %r"
 },
 {
  "instr": "srem",
  "ty": "<2 x i32>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 17,
  "lat": 7,
  "sizelat": 7,
  "size": 8,
  "gisize": 10,
  "extrasize": 0,
  "asm": "fmov w8, s0\nmov w10, v0.s[1]\nsdiv w9, w8, w0\nsdiv w11, w10, w0\nmsub w8, w9, w0, w8\nfmov s0, w8\nmsub w9, w11, w0, w10\nmov v0.s[1], w9\nret",
  "giasm": "dup v1.2s, w0\nfmov w8, s0\nfmov w9, s1\nmov w10, v1.s[1]\nsdiv w8, w8, w9\nmov w9, v0.s[1]\nsdiv w9, w9, w10\nmov v2.s[0], w8\nmov v2.s[1], w9\nmls v0.2s, v2.2s, v1.2s\nret",
  "ll": "define <2 x i32> @test(<2 x i32> %a, i32 %bs) {\n  %i = insertelement <2 x i32> poison, i32 %bs, i64 0\n  %b = shufflevector <2 x i32> %i, <2 x i32> poison, <2 x i32> zeroinitializer\n  %r = srem <2 x i32> %a, %b\n  ret <2 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <2 x i32> poison, i32 %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <2 x i32> %i, <2 x i32> poison, <2 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = srem <2 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i32> %r"
 },
 {
  "instr": "srem",
  "ty": "<2 x i32>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 6,
  "lat": 4,
  "sizelat": 4,
  "size": 10,
  "gisize": 9,
  "extrasize": 0,
  "asm": "mov w8, #9363                       // =0x2493\nmovi v3.2s, #7\nmovk w8, #37449, lsl #16\ndup v1.2s, w8\nsmull v1.2d, v0.2s, v1.2s\nshrn v1.2s, v1.2d, #32\nadd v1.2s, v1.2s, v0.2s\nsshr v2.2s, v1.2s, #2\nusra v2.2s, v1.2s, #31\nmls v0.2s, v2.2s, v3.2s\nret",
  "giasm": "fmov w9, s0\nmov w8, #7                          // =0x7\nmov w10, v0.s[1]\nmovi v2.2s, #7\nsdiv w9, w9, w8\nsdiv w8, w10, w8\nmov v1.s[0], w9\nmov v1.s[1], w8\nmls v0.2s, v1.2s, v2.2s\nret",
  "ll": "define <2 x i32> @test(<2 x i32> %a) {\n  %r = srem <2 x i32> %a, splat (i32 7)\n  ret <2 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = srem <2 x i32> %a, splat (i32 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i32> %r"
 },
 {
  "instr": "srem",
  "ty": "<4 x i32>",
  "variant": "binop",
  "codesize": 4,
  "thru": 28,
  "lat": 4,
  "sizelat": 4,
  "size": 20,
  "gisize": 17,
  "extrasize": 0,
  "asm": "fmov w11, s1\nfmov w12, s0\nmov w8, v1.s[1]\nmov w9, v0.s[1]\nmov w14, v1.s[2]\nmov w15, v0.s[2]\nmov w17, v1.s[3]\nmov w18, v0.s[3]\nsdiv w13, w12, w11\nsdiv w10, w9, w8\nmsub w11, w13, w11, w12\nfmov s0, w11\nsdiv w16, w15, w14\nmsub w8, w10, w8, w9\nmov v0.s[1], w8\nsdiv w9, w18, w17\nmsub w8, w16, w14, w15\nmov v0.s[2], w8\nmsub w8, w9, w17, w18\nmov v0.s[3], w8\nret",
  "giasm": "fmov w8, s0\nfmov w9, s1\nmov w10, v1.s[1]\nmov w11, v1.s[2]\nmov w12, v1.s[3]\nsdiv w8, w8, w9\nmov w9, v0.s[1]\nsdiv w9, w9, w10\nmov w10, v0.s[2]\nmov v2.s[0], w8\nsdiv w10, w10, w11\nmov w11, v0.s[3]\nmov v2.s[1], w9\nsdiv w8, w11, w12\nmov v2.s[2], w10\nmov v2.s[3], w8\nmls v0.4s, v2.4s, v1.4s\nret",
  "ll": "define <4 x i32> @test(<4 x i32> %a, <4 x i32> %b) {\n  %r = srem <4 x i32> %a, %b\n  ret <4 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = srem <4 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i32> %r"
 },
 {
  "instr": "srem",
  "ty": "<4 x i32>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 18,
  "lat": 4,
  "sizelat": 4,
  "size": 15,
  "gisize": 17,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nmovi v3.2d, #0x000000ffffffff\nldr q1, [x8, :lo12:.LCPI0_0]\nadrp x8, .LCPI0_1\nsmull2 v2.2d, v0.4s, v1.4s\nsmull v1.2d, v0.2s, v1.2s\nuzp2 v1.4s, v1.4s, v2.4s\nand v2.16b, v0.16b, v3.16b\nadd v1.4s, v1.4s, v2.4s\nldr q2, [x8, :lo12:.LCPI0_1]\nadrp x8, .LCPI0_2\nsshl v2.4s, v1.4s, v2.4s\nusra v2.4s, v1.4s, #31\nldr q1, [x8, :lo12:.LCPI0_2]\nmls v0.4s, v2.4s, v1.4s\nret",
  "giasm": "fmov w9, s0\nmov w8, #7                          // =0x7\nmov w10, v0.s[1]\nmov w11, #6                         // =0x6\nmov w12, v0.s[2]\nsdiv w9, w9, w8\nsdiv w10, w10, w11\nmov v1.s[0], w9\nsdiv w8, w12, w8\nmov w12, v0.s[3]\nmov v1.s[1], w10\nsdiv w9, w12, w11\nmov v1.s[2], w8\nadrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nmov v1.s[3], w9\nmls v0.4s, v1.4s, v2.4s\nret",
  "ll": "define <4 x i32> @test(<4 x i32> %a) {\n  %r = srem <4 x i32> %a, <i32 7, i32 6, i32 7, i32 6>\n  ret <4 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = srem <4 x i32> %a, <i32 7, i32 6, i32 7, i32 6>\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i32> %r"
 },
 {
  "instr": "srem",
  "ty": "<4 x i32>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 31,
  "lat": 7,
  "sizelat": 7,
  "size": 16,
  "gisize": 18,
  "extrasize": 0,
  "asm": "fmov w10, s0\nmov w8, v0.s[1]\nmov w12, v0.s[2]\nmov w14, v0.s[3]\nsdiv w11, w10, w0\nsdiv w9, w8, w0\nmsub w10, w11, w0, w10\nfmov s0, w10\nsdiv w13, w12, w0\nmsub w8, w9, w0, w8\nmov v0.s[1], w8\nsdiv w9, w14, w0\nmsub w8, w13, w0, w12\nmov v0.s[2], w8\nmsub w8, w9, w0, w14\nmov v0.s[3], w8\nret",
  "giasm": "dup v1.4s, w0\nfmov w8, s0\nfmov w9, s1\nmov w10, v1.s[1]\nmov w11, v1.s[2]\nmov w12, v1.s[3]\nsdiv w8, w8, w9\nmov w9, v0.s[1]\nsdiv w9, w9, w10\nmov w10, v0.s[2]\nmov v2.s[0], w8\nsdiv w10, w10, w11\nmov w11, v0.s[3]\nmov v2.s[1], w9\nsdiv w8, w11, w12\nmov v2.s[2], w10\nmov v2.s[3], w8\nmls v0.4s, v2.4s, v1.4s\nret",
  "ll": "define <4 x i32> @test(<4 x i32> %a, i32 %bs) {\n  %i = insertelement <4 x i32> poison, i32 %bs, i64 0\n  %b = shufflevector <4 x i32> %i, <4 x i32> poison, <4 x i32> zeroinitializer\n  %r = srem <4 x i32> %a, %b\n  ret <4 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <4 x i32> poison, i32 %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <4 x i32> %i, <4 x i32> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = srem <4 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i32> %r"
 },
 {
  "instr": "srem",
  "ty": "<4 x i32>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 6,
  "lat": 4,
  "sizelat": 4,
  "size": 11,
  "gisize": 15,
  "extrasize": 0,
  "asm": "mov w8, #9363                       // =0x2493\nmovi v3.4s, #7\nmovk w8, #37449, lsl #16\ndup v1.4s, w8\nsmull2 v2.2d, v0.4s, v1.4s\nsmull v1.2d, v0.2s, v1.2s\nuzp2 v1.4s, v1.4s, v2.4s\nadd v1.4s, v1.4s, v0.4s\nsshr v2.4s, v1.4s, #2\nusra v2.4s, v1.4s, #31\nmls v0.4s, v2.4s, v3.4s\nret",
  "giasm": "fmov w9, s0\nmov w8, #7                          // =0x7\nmov w10, v0.s[1]\nmov w11, v0.s[2]\nmov w12, v0.s[3]\nmovi v2.4s, #7\nsdiv w9, w9, w8\nsdiv w10, w10, w8\nmov v1.s[0], w9\nsdiv w11, w11, w8\nmov v1.s[1], w10\nsdiv w8, w12, w8\nmov v1.s[2], w11\nmov v1.s[3], w8\nmls v0.4s, v1.4s, v2.4s\nret",
  "ll": "define <4 x i32> @test(<4 x i32> %a) {\n  %r = srem <4 x i32> %a, splat (i32 7)\n  ret <4 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = srem <4 x i32> %a, splat (i32 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i32> %r"
 },
 {
  "instr": "srem",
  "ty": "<8 x i32>",
  "variant": "binop",
  "codesize": 4,
  "thru": 56,
  "lat": 4,
  "sizelat": 4,
  "size": 44,
  "gisize": 34,
  "extrasize": 0,
  "asm": "stp x22, x21, [sp, #-32]!           // 16-byte Folded Spill\nstp x20, x19, [sp, #16]             // 16-byte Folded Spill\nmov w8, v2.s[1]\nmov w9, v0.s[1]\nfmov w11, s2\nfmov w12, s0\nfmov w4, s3\nfmov w5, s1\nmov w1, v3.s[1]\nmov w2, v1.s[1]\nmov w14, v2.s[2]\nmov w15, v0.s[2]\nmov w7, v3.s[2]\nmov w19, v1.s[2]\nsdiv w10, w9, w8\nmov w17, v2.s[3]\nmov w18, v0.s[3]\nmov w21, v3.s[3]\nmov w22, v1.s[3]\nsdiv w13, w12, w11\nmsub w8, w10, w8, w9\nsdiv w6, w5, w4\nmsub w9, w13, w11, w12\nfmov s0, w9\nmov v0.s[1], w8\nsdiv w3, w2, w1\nmsub w10, w6, w4, w5\nfmov s1, w10\nsdiv w16, w15, w14\nmsub w11, w3, w1, w2\nmov v1.s[1], w11\nsdiv w20, w19, w7\nmsub w9, w16, w14, w15\nmov v0.s[2], w9\nsdiv w0, w18, w17\nmsub w8, w20, w7, w19\nldp x20, x19, [sp, #16]             // 16-byte Folded Reload\nmov v1.s[2], w8\nsdiv w12, w22, w21\nmsub w10, w0, w17, w18\nmov v0.s[3], w10\nmsub w8, w12, w21, w22\nmov v1.s[3], w8\nldp x22, x21, [sp], #32             // 16-byte Folded Reload\nret",
  "giasm": "fmov w8, s0\nfmov w9, s2\nmov w10, v2.s[1]\nmov w11, v2.s[2]\nmov w12, v2.s[3]\nfmov w13, s3\nmov w14, v3.s[1]\nmov w15, v3.s[2]\nsdiv w8, w8, w9\nmov w9, v0.s[1]\nsdiv w9, w9, w10\nmov w10, v0.s[2]\nmov v4.s[0], w8\nmov w8, v1.s[3]\nsdiv w10, w10, w11\nmov w11, v0.s[3]\nmov v4.s[1], w9\nsdiv w11, w11, w12\nfmov w12, s1\nmov v4.s[2], w10\nsdiv w12, w12, w13\nmov w13, v1.s[1]\nmov v4.s[3], w11\nmls v0.4s, v4.4s, v2.4s\nsdiv w13, w13, w14\nmov w14, v1.s[2]\nmov v5.s[0], w12\nmov w12, v3.s[3]\nsdiv w14, w14, w15\nmov v5.s[1], w13\nsdiv w8, w8, w12\nmov v5.s[2], w14\nmov v5.s[3], w8\nmls v1.4s, v5.4s, v3.4s\nret",
  "ll": "define <8 x i32> @test(<8 x i32> %a, <8 x i32> %b) {\n  %r = srem <8 x i32> %a, %b\n  ret <8 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = srem <8 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i32> %r"
 },
 {
  "instr": "srem",
  "ty": "<8 x i32>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 30,
  "lat": 4,
  "sizelat": 4,
  "size": 23,
  "gisize": 30,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nmovi v6.2d, #0x000000ffffffff\nldr q2, [x8, :lo12:.LCPI0_0]\nadrp x8, .LCPI0_1\nsmull2 v3.2d, v0.4s, v2.4s\nsmull v4.2d, v0.2s, v2.2s\nsmull2 v5.2d, v1.4s, v2.4s\nsmull v2.2d, v1.2s, v2.2s\nuzp2 v3.4s, v4.4s, v3.4s\nand v4.16b, v0.16b, v6.16b\nuzp2 v2.4s, v2.4s, v5.4s\nand v5.16b, v1.16b, v6.16b\nadd v3.4s, v3.4s, v4.4s\nldr q4, [x8, :lo12:.LCPI0_1]\nadrp x8, .LCPI0_2\nadd v2.4s, v2.4s, v5.4s\nsshl v5.4s, v3.4s, v4.4s\nsshl v4.4s, v2.4s, v4.4s\nusra v5.4s, v3.4s, #31\nusra v4.4s, v2.4s, #31\nldr q2, [x8, :lo12:.LCPI0_2]\nmls v0.4s, v5.4s, v2.4s\nmls v1.4s, v4.4s, v2.4s\nret",
  "giasm": "mov w12, v0.s[2]\nmov w15, v1.s[2]\nmov w8, #7                          // =0x7\nfmov w9, s0\nfmov w14, s1\nmov w11, #6                         // =0x6\nmov w10, v0.s[1]\nmov w13, v0.s[3]\nsdiv w9, w9, w8\nsdiv w12, w12, w8\nmov v2.s[0], w9\nmov w9, v1.s[3]\nsdiv w14, w14, w8\nsdiv w8, w15, w8\nmov w15, v1.s[1]\nmov v3.s[0], w14\nsdiv w10, w10, w11\nsdiv w15, w15, w11\nmov v2.s[1], w10\nmov v2.s[2], w12\nsdiv w13, w13, w11\nmov v3.s[1], w15\nmov v3.s[2], w8\nadrp x8, .LCPI0_0\nldr q4, [x8, :lo12:.LCPI0_0]\nsdiv w9, w9, w11\nmov v2.s[3], w13\nmls v0.4s, v2.4s, v4.4s\nmov v3.s[3], w9\nmls v1.4s, v3.4s, v4.4s\nret",
  "ll": "define <8 x i32> @test(<8 x i32> %a) {\n  %r = srem <8 x i32> %a, <i32 7, i32 6, i32 7, i32 6, i32 7, i32 6, i32 7, i32 6>\n  ret <8 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = srem <8 x i32> %a, <i32 7, i32 6, i32 7, i32 6, i32 7, i32 6, i32 7, i32 6>\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i32> %r"
 },
 {
  "instr": "srem",
  "ty": "<8 x i32>",
  "variant": "binopsplat",
  "codesize": 7,
  "thru": 60,
  "lat": 8,
  "sizelat": 8,
  "size": 32,
  "gisize": 31,
  "extrasize": 0,
  "asm": "mov w8, v0.s[1]\nfmov w10, s0\nfmov w18, s1\nmov w16, v1.s[1]\nmov w12, v0.s[2]\nmov w2, v1.s[2]\nmov w14, v0.s[3]\nmov w4, v1.s[3]\nsdiv w11, w10, w0\nsdiv w9, w8, w0\nsdiv w1, w18, w0\nmsub w8, w9, w0, w8\nmsub w9, w11, w0, w10\nfmov s0, w9\nmov v0.s[1], w8\nsdiv w17, w16, w0\nmsub w10, w1, w0, w18\nfmov s1, w10\nsdiv w13, w12, w0\nmsub w11, w17, w0, w16\nmov v1.s[1], w11\nsdiv w3, w2, w0\nmsub w8, w13, w0, w12\nmov v0.s[2], w8\nsdiv w15, w14, w0\nmsub w9, w3, w0, w2\nmov v1.s[2], w9\nsdiv w16, w4, w0\nmsub w8, w15, w0, w14\nmov v0.s[3], w8\nmsub w9, w16, w0, w4\nmov v1.s[3], w9\nret",
  "giasm": "dup v2.4s, w0\nfmov w8, s0\nfmov w14, s1\nmov w10, v0.s[1]\nmov w12, v0.s[2]\nfmov w9, s2\nmov w11, v2.s[1]\nmov w13, v2.s[2]\nmov w15, v2.s[3]\nsdiv w8, w8, w9\nsdiv w9, w14, w9\nmov w14, v1.s[1]\nmov v3.s[0], w8\nmov w8, v1.s[3]\nsdiv w10, w10, w11\nmov v4.s[0], w9\nsdiv w11, w14, w11\nmov w14, v1.s[2]\nmov v3.s[1], w10\nsdiv w12, w12, w13\nmov v4.s[1], w11\nsdiv w13, w14, w13\nmov w14, v0.s[3]\nmov v3.s[2], w12\nsdiv w14, w14, w15\nmov v4.s[2], w13\nsdiv w8, w8, w15\nmov v3.s[3], w14\nmls v0.4s, v3.4s, v2.4s\nmov v4.s[3], w8\nmls v1.4s, v4.4s, v2.4s\nret",
  "ll": "define <8 x i32> @test(<8 x i32> %a, i32 %bs) {\n  %i = insertelement <8 x i32> poison, i32 %bs, i64 0\n  %b = shufflevector <8 x i32> %i, <8 x i32> poison, <8 x i32> zeroinitializer\n  %r = srem <8 x i32> %a, %b\n  ret <8 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <8 x i32> poison, i32 %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <8 x i32> %i, <8 x i32> poison, <8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = srem <8 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i32> %r"
 },
 {
  "instr": "srem",
  "ty": "<8 x i32>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 12,
  "lat": 4,
  "sizelat": 4,
  "size": 18,
  "gisize": 28,
  "extrasize": 0,
  "asm": "mov w8, #9363                       // =0x2493\nmovi v6.4s, #7\nmovk w8, #37449, lsl #16\ndup v2.4s, w8\nsmull2 v3.2d, v0.4s, v2.4s\nsmull v4.2d, v0.2s, v2.2s\nsmull2 v5.2d, v1.4s, v2.4s\nsmull v2.2d, v1.2s, v2.2s\nuzp2 v3.4s, v4.4s, v3.4s\nuzp2 v2.4s, v2.4s, v5.4s\nadd v3.4s, v3.4s, v0.4s\nadd v2.4s, v2.4s, v1.4s\nsshr v4.4s, v3.4s, #2\nsshr v5.4s, v2.4s, #2\nusra v4.4s, v3.4s, #31\nusra v5.4s, v2.4s, #31\nmls v0.4s, v4.4s, v6.4s\nmls v1.4s, v5.4s, v6.4s\nret",
  "giasm": "fmov w9, s0\nfmov w13, s1\nmov w8, #7                          // =0x7\nmov w10, v0.s[1]\nmov w14, v1.s[1]\nmov w11, v0.s[2]\nmov w15, v1.s[2]\nmov w12, v0.s[3]\nmovi v4.4s, #7\nsdiv w9, w9, w8\nsdiv w13, w13, w8\nmov v2.s[0], w9\nmov w9, v1.s[3]\nsdiv w10, w10, w8\nmov v3.s[0], w13\nsdiv w14, w14, w8\nmov v2.s[1], w10\nsdiv w11, w11, w8\nmov v3.s[1], w14\nsdiv w15, w15, w8\nmov v2.s[2], w11\nsdiv w12, w12, w8\nmov v3.s[2], w15\nsdiv w8, w9, w8\nmov v2.s[3], w12\nmls v0.4s, v2.4s, v4.4s\nmov v3.s[3], w8\nmls v1.4s, v3.4s, v4.4s\nret",
  "ll": "define <8 x i32> @test(<8 x i32> %a) {\n  %r = srem <8 x i32> %a, splat (i32 7)\n  ret <8 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = srem <8 x i32> %a, splat (i32 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i32> %r"
 },
 {
  "instr": "srem",
  "ty": "<2 x i64>",
  "variant": "binop",
  "codesize": 4,
  "thru": 14,
  "lat": 4,
  "sizelat": 4,
  "size": 10,
  "gisize": 15,
  "extrasize": 0,
  "asm": "fmov x8, d1\nfmov x9, d0\nmov x11, v1.d[1]\nmov x12, v0.d[1]\nsdiv x10, x9, x8\nsdiv x13, x12, x11\nmsub x8, x10, x8, x9\nfmov d0, x8\nmsub x9, x13, x11, x12\nmov v0.d[1], x9\nret",
  "giasm": "fmov x8, d0\nfmov x9, d1\nmov x10, v1.d[1]\nmov x11, v0.d[1]\nsdiv x8, x8, x9\nsdiv x11, x11, x10\nmov v1.d[0], x8\nmov v1.d[1], x11\nfmov x8, d1\nmov x11, v1.d[1]\nmul x8, x8, x9\nmul x9, x11, x10\nmov v1.d[0], x8\nmov v1.d[1], x9\nsub v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x i64> @test(<2 x i64> %a, <2 x i64> %b) {\n  %r = srem <2 x i64> %a, %b\n  ret <2 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = srem <2 x i64> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i64> %r"
 },
 {
  "instr": "srem",
  "ty": "<2 x i64>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 12,
  "lat": 4,
  "sizelat": 4,
  "size": 19,
  "gisize": 19,
  "extrasize": 0,
  "asm": "mov x8, #18725                      // =0x4925\nfmov x10, d0\nmov x9, v0.d[1]\nmovk x8, #9362, lsl #16\nmov x11, #-6148914691236517206      // =0xaaaaaaaaaaaaaaaa\nmovk x8, #37449, lsl #32\neor x11, x11, #0x8000000000000001\nmovk x8, #18724, lsl #48\nsmulh x8, x10, x8\nsmulh x11, x9, x11\nasr x12, x8, #1\nadd x8, x12, x8, lsr #63\nadd x11, x11, x11, lsr #63\nmov w12, #6                         // =0x6\nsub x8, x8, x8, lsl #3\nmsub x9, x11, x12, x9\nadd x8, x10, x8\nfmov d0, x8\nmov v0.d[1], x9\nret",
  "giasm": "fmov x9, d0\nmov w8, #7                          // =0x7\nmov w10, #6                         // =0x6\nsdiv x8, x9, x8\nmov x9, v0.d[1]\nsdiv x9, x9, x10\nmov v1.d[0], x8\nadrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nmov x11, v2.d[1]\nmov v1.d[1], x9\nfmov x9, d2\nfmov x8, d1\nmov x10, v1.d[1]\nmul x8, x8, x9\nmul x9, x10, x11\nmov v1.d[0], x8\nmov v1.d[1], x9\nsub v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x i64> @test(<2 x i64> %a) {\n  %r = srem <2 x i64> %a, <i64 7, i64 6>\n  ret <2 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = srem <2 x i64> %a, <i64 7, i64 6>\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i64> %r"
 },
 {
  "instr": "srem",
  "ty": "<2 x i64>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 17,
  "lat": 7,
  "sizelat": 7,
  "size": 8,
  "gisize": 16,
  "extrasize": 0,
  "asm": "fmov x8, d0\nmov x10, v0.d[1]\nsdiv x9, x8, x0\nsdiv x11, x10, x0\nmsub x8, x9, x0, x8\nfmov d0, x8\nmsub x9, x11, x0, x10\nmov v0.d[1], x9\nret",
  "giasm": "dup v1.2d, x0\nfmov x8, d0\nmov x11, v0.d[1]\nfmov x9, d1\nmov x10, v1.d[1]\nsdiv x8, x8, x9\nsdiv x11, x11, x10\nmov v1.d[0], x8\nmov v1.d[1], x11\nfmov x8, d1\nmov x11, v1.d[1]\nmul x8, x8, x9\nmul x9, x11, x10\nmov v1.d[0], x8\nmov v1.d[1], x9\nsub v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x i64> @test(<2 x i64> %a, i64 %bs) {\n  %i = insertelement <2 x i64> poison, i64 %bs, i64 0\n  %b = shufflevector <2 x i64> %i, <2 x i64> poison, <2 x i32> zeroinitializer\n  %r = srem <2 x i64> %a, %b\n  ret <2 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <2 x i64> poison, i64 %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <2 x i64> %i, <2 x i64> poison, <2 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = srem <2 x i64> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i64> %r"
 },
 {
  "instr": "srem",
  "ty": "<2 x i64>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 8,
  "lat": 4,
  "sizelat": 4,
  "size": 18,
  "gisize": 18,
  "extrasize": 0,
  "asm": "mov x8, #18725                      // =0x4925\nfmov x10, d0\nmov x9, v0.d[1]\nmovk x8, #9362, lsl #16\nmovk x8, #37449, lsl #32\nmovk x8, #18724, lsl #48\nsmulh x11, x10, x8\nsmulh x8, x9, x8\nasr x12, x11, #1\nadd x11, x12, x11, lsr #63\nasr x13, x8, #1\nsub x11, x11, x11, lsl #3\nadd x8, x13, x8, lsr #63\nadd x10, x10, x11\nsub x8, x8, x8, lsl #3\nfmov d0, x10\nadd x8, x9, x8\nmov v0.d[1], x8\nret",
  "giasm": "fmov x9, d0\nmov w8, #7                          // =0x7\nmov x10, v0.d[1]\nsdiv x9, x9, x8\nsdiv x8, x10, x8\nmov v1.d[0], x9\nmov v1.d[1], x8\nadrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfmov x9, d2\nmov x11, v2.d[1]\nfmov x8, d1\nmov x10, v1.d[1]\nmul x8, x8, x9\nmul x9, x10, x11\nmov v1.d[0], x8\nmov v1.d[1], x9\nsub v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x i64> @test(<2 x i64> %a) {\n  %r = srem <2 x i64> %a, splat (i64 7)\n  ret <2 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = srem <2 x i64> %a, splat (i64 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i64> %r"
 },
 {
  "instr": "srem",
  "ty": "<4 x i64>",
  "variant": "binop",
  "codesize": 4,
  "thru": 28,
  "lat": 4,
  "sizelat": 4,
  "size": 20,
  "gisize": 30,
  "extrasize": 0,
  "asm": "mov x8, v2.d[1]\nmov x9, v0.d[1]\nfmov x11, d2\nfmov x12, d0\nfmov x14, d3\nfmov x15, d1\nmov x17, v3.d[1]\nmov x18, v1.d[1]\nsdiv x10, x9, x8\nsdiv x13, x12, x11\nmsub x8, x10, x8, x9\nsdiv x16, x15, x14\nmsub x9, x13, x11, x12\nfmov d0, x9\nmov v0.d[1], x8\nsdiv x0, x18, x17\nmsub x10, x16, x14, x15\nfmov d1, x10\nmsub x11, x0, x17, x18\nmov v1.d[1], x11\nret",
  "giasm": "fmov x8, d0\nfmov x9, d2\nmov x10, v2.d[1]\nmov x11, v0.d[1]\nfmov x12, d1\nfmov x13, d3\nmov x14, v3.d[1]\nmov x15, v1.d[1]\nsdiv x8, x8, x9\nsdiv x12, x12, x13\nmov v2.d[0], x8\nsdiv x11, x11, x10\nmov v3.d[0], x12\nsdiv x15, x15, x14\nmov v2.d[1], x11\nfmov x8, d2\nmov x11, v2.d[1]\nmul x8, x8, x9\nmul x10, x11, x10\nmov v2.d[0], x8\nmov v3.d[1], x15\nmov v2.d[1], x10\nfmov x9, d3\nmov x12, v3.d[1]\nsub v0.2d, v0.2d, v2.2d\nmul x9, x9, x13\nmul x11, x12, x14\nmov v3.d[0], x9\nmov v3.d[1], x11\nsub v1.2d, v1.2d, v3.2d\nret",
  "ll": "define <4 x i64> @test(<4 x i64> %a, <4 x i64> %b) {\n  %r = srem <4 x i64> %a, %b\n  ret <4 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = srem <4 x i64> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i64> %r"
 },
 {
  "instr": "srem",
  "ty": "<4 x i64>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 18,
  "lat": 4,
  "sizelat": 4,
  "size": 31,
  "gisize": 32,
  "extrasize": 0,
  "asm": "mov x8, #18725                      // =0x4925\nfmov x9, d0\nfmov x12, d1\nmovk x8, #9362, lsl #16\nmov x10, v0.d[1]\nmov x13, v1.d[1]\nmovk x8, #37449, lsl #32\nmov x14, #-6148914691236517206      // =0xaaaaaaaaaaaaaaaa\nmov w16, #6                         // =0x6\nmovk x8, #18724, lsl #48\neor x14, x14, #0x8000000000000001\nsmulh x11, x9, x8\nsmulh x8, x12, x8\nsmulh x15, x10, x14\nasr x17, x11, #1\nsmulh x14, x13, x14\nasr x18, x8, #1\nadd x11, x17, x11, lsr #63\nadd x8, x18, x8, lsr #63\nadd x15, x15, x15, lsr #63\nsub x11, x11, x11, lsl #3\nadd x14, x14, x14, lsr #63\nsub x8, x8, x8, lsl #3\nmsub x10, x15, x16, x10\nadd x9, x9, x11\nmsub x13, x14, x16, x13\nadd x8, x12, x8\nfmov d0, x9\nfmov d1, x8\nmov v0.d[1], x10\nmov v1.d[1], x13\nret",
  "giasm": "fmov x9, d0\nfmov x12, d1\nmov w8, #7                          // =0x7\nmov x10, v0.d[1]\nmov w11, #6                         // =0x6\nsdiv x9, x9, x8\nsdiv x8, x12, x8\nmov x12, v1.d[1]\nmov v2.d[0], x9\nsdiv x10, x10, x11\nmov v3.d[0], x8\nadrp x8, .LCPI0_0\nldr q4, [x8, :lo12:.LCPI0_0]\nfmov x9, d4\nsdiv x11, x12, x11\nmov v2.d[1], x10\nfmov x8, d2\nmov x10, v2.d[1]\nmul x8, x8, x9\nmov v2.d[0], x8\nmov v3.d[1], x11\nmov x11, v4.d[1]\nfmov x12, d3\nmov x13, v3.d[1]\nmul x10, x10, x11\nmul x9, x12, x9\nmul x11, x13, x11\nmov v2.d[1], x10\nmov v3.d[0], x9\nsub v0.2d, v0.2d, v2.2d\nmov v3.d[1], x11\nsub v1.2d, v1.2d, v3.2d\nret",
  "ll": "define <4 x i64> @test(<4 x i64> %a) {\n  %r = srem <4 x i64> %a, <i64 7, i64 6, i64 7, i64 6>\n  ret <4 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = srem <4 x i64> %a, <i64 7, i64 6, i64 7, i64 6>\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i64> %r"
 },
 {
  "instr": "srem",
  "ty": "<4 x i64>",
  "variant": "binopsplat",
  "codesize": 7,
  "thru": 32,
  "lat": 8,
  "sizelat": 8,
  "size": 16,
  "gisize": 29,
  "extrasize": 0,
  "asm": "mov x8, v0.d[1]\nfmov x10, d0\nfmov x12, d1\nmov x14, v1.d[1]\nsdiv x11, x10, x0\nsdiv x9, x8, x0\nsdiv x13, x12, x0\nmsub x8, x9, x0, x8\nmsub x9, x11, x0, x10\nfmov d0, x9\nmov v0.d[1], x8\nsdiv x15, x14, x0\nmsub x10, x13, x0, x12\nfmov d1, x10\nmsub x11, x15, x0, x14\nmov v1.d[1], x11\nret",
  "giasm": "dup v2.2d, x0\nfmov x8, d0\nfmov x12, d1\nmov x11, v0.d[1]\nmov x13, v1.d[1]\nfmov x9, d2\nmov x10, v2.d[1]\nsdiv x8, x8, x9\nsdiv x12, x12, x9\nmov v2.d[0], x8\nsdiv x11, x11, x10\nmov v3.d[0], x12\nsdiv x13, x13, x10\nmov v2.d[1], x11\nfmov x8, d2\nmov x11, v2.d[1]\nmul x8, x8, x9\nmul x11, x11, x10\nmov v2.d[0], x8\nmov v3.d[1], x13\nmov v2.d[1], x11\nfmov x12, d3\nmov x13, v3.d[1]\nsub v0.2d, v0.2d, v2.2d\nmul x9, x12, x9\nmul x10, x13, x10\nmov v3.d[0], x9\nmov v3.d[1], x10\nsub v1.2d, v1.2d, v3.2d\nret",
  "ll": "define <4 x i64> @test(<4 x i64> %a, i64 %bs) {\n  %i = insertelement <4 x i64> poison, i64 %bs, i64 0\n  %b = shufflevector <4 x i64> %i, <4 x i64> poison, <4 x i32> zeroinitializer\n  %r = srem <4 x i64> %a, %b\n  ret <4 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <4 x i64> poison, i64 %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <4 x i64> %i, <4 x i64> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = srem <4 x i64> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i64> %r"
 },
 {
  "instr": "srem",
  "ty": "<4 x i64>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 16,
  "lat": 4,
  "sizelat": 4,
  "size": 32,
  "gisize": 31,
  "extrasize": 0,
  "asm": "mov x8, #18725                      // =0x4925\nfmov x9, d0\nfmov x12, d1\nmovk x8, #9362, lsl #16\nmov x10, v0.d[1]\nmov x13, v1.d[1]\nmovk x8, #37449, lsl #32\nmovk x8, #18724, lsl #48\nsmulh x11, x9, x8\nsmulh x14, x12, x8\nsmulh x15, x10, x8\nasr x16, x11, #1\nsmulh x8, x13, x8\nasr x17, x14, #1\nadd x11, x16, x11, lsr #63\nadd x14, x17, x14, lsr #63\nasr x18, x15, #1\nsub x11, x11, x11, lsl #3\nasr x0, x8, #1\nsub x14, x14, x14, lsl #3\nadd x15, x18, x15, lsr #63\nadd x9, x9, x11\nadd x8, x0, x8, lsr #63\nadd x11, x12, x14\nsub x15, x15, x15, lsl #3\nfmov d0, x9\nfmov d1, x11\nsub x8, x8, x8, lsl #3\nadd x10, x10, x15\nadd x8, x13, x8\nmov v0.d[1], x10\nmov v1.d[1], x8\nret",
  "giasm": "fmov x9, d0\nfmov x11, d1\nmov w8, #7                          // =0x7\nmov x10, v0.d[1]\nmov x12, v1.d[1]\nsdiv x9, x9, x8\nsdiv x11, x11, x8\nmov v2.d[0], x9\nadrp x9, .LCPI0_0\nldr q4, [x9, :lo12:.LCPI0_0]\nfmov x9, d4\nsdiv x10, x10, x8\nmov v3.d[0], x11\nmov x11, v4.d[1]\nsdiv x8, x12, x8\nmov v2.d[1], x10\nmov x10, v2.d[1]\nmul x10, x10, x11\nmov v3.d[1], x8\nfmov x8, d2\nmul x8, x8, x9\nfmov x12, d3\nmov x13, v3.d[1]\nmul x9, x12, x9\nmov v2.d[0], x8\nmul x11, x13, x11\nmov v3.d[0], x9\nmov v2.d[1], x10\nmov v3.d[1], x11\nsub v0.2d, v0.2d, v2.2d\nsub v1.2d, v1.2d, v3.2d\nret",
  "ll": "define <4 x i64> @test(<4 x i64> %a) {\n  %r = srem <4 x i64> %a, splat (i64 7)\n  ret <4 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = srem <4 x i64> %a, splat (i64 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i64> %r"
 },
 {
  "instr": "udiv",
  "ty": "i8",
  "variant": "binop",
  "codesize": 4,
  "thru": 1,
  "lat": 4,
  "sizelat": 4,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "and w8, w1, #0xff\nand w9, w0, #0xff\nudiv w0, w9, w8\nret",
  "giasm": "and w8, w0, #0xff\nand w9, w1, #0xff\nudiv w0, w8, w9\nret",
  "ll": "define i8 @test(i8 %a, i8 %b) {\n  %r = udiv i8 %a, %b\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = udiv i8 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "udiv",
  "ty": "i8",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 5,
  "lat": 4,
  "sizelat": 4,
  "size": 8,
  "gisize": 8,
  "extrasize": 0,
  "asm": "mov w8, #37                         // =0x25\nand w9, w0, #0xff\nmul w8, w9, w8\nlsr w8, w8, #8\nsub w9, w0, w8\nand w9, w9, #0xfe\nadd w8, w8, w9, lsr #1\nlsr w0, w8, #2\nret",
  "giasm": "mov w8, #37                         // =0x25\nand w9, w0, #0xff\nmul w8, w9, w8\nlsr w8, w8, #8\nsub w9, w0, w8\nubfx w9, w9, #1, #7\nadd w8, w9, w8\nubfx w0, w8, #2, #6\nret",
  "ll": "define i8 @test(i8 %a) {\n  %r = udiv i8 %a, 7\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = udiv i8 %a, 7\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "udiv",
  "ty": "i16",
  "variant": "binop",
  "codesize": 4,
  "thru": 1,
  "lat": 4,
  "sizelat": 4,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "and w8, w1, #0xffff\nand w9, w0, #0xffff\nudiv w0, w9, w8\nret",
  "giasm": "and w8, w0, #0xffff\nand w9, w1, #0xffff\nudiv w0, w8, w9\nret",
  "ll": "define i16 @test(i16 %a, i16 %b) {\n  %r = udiv i16 %a, %b\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = udiv i16 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "udiv",
  "ty": "i16",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 5,
  "lat": 4,
  "sizelat": 4,
  "size": 8,
  "gisize": 8,
  "extrasize": 0,
  "asm": "mov w8, #9363                       // =0x2493\nand w9, w0, #0xffff\nmul w8, w9, w8\nlsr w8, w8, #16\nsub w9, w0, w8\nand w9, w9, #0xfffe\nadd w8, w8, w9, lsr #1\nlsr w0, w8, #2\nret",
  "giasm": "mov w8, #9363                       // =0x2493\nand w9, w0, #0xffff\nmul w8, w9, w8\nlsr w8, w8, #16\nsub w9, w0, w8\nubfx w9, w9, #1, #15\nadd w8, w9, w8\nubfx w0, w8, #2, #14\nret",
  "ll": "define i16 @test(i16 %a) {\n  %r = udiv i16 %a, 7\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = udiv i16 %a, 7\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "udiv",
  "ty": "i32",
  "variant": "binop",
  "codesize": 4,
  "thru": 1,
  "lat": 4,
  "sizelat": 4,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "udiv w0, w0, w1\nret",
  "giasm": "udiv w0, w0, w1\nret",
  "ll": "define i32 @test(i32 %a, i32 %b) {\n  %r = udiv i32 %a, %b\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = udiv i32 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "udiv",
  "ty": "i32",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 5,
  "lat": 4,
  "sizelat": 4,
  "size": 7,
  "gisize": 7,
  "extrasize": 0,
  "asm": "mov w8, #18725                      // =0x4925\nmovk w8, #9362, lsl #16\numull x8, w0, w8\nlsr x8, x8, #32\nsub w9, w0, w8\nadd w8, w8, w9, lsr #1\nlsr w0, w8, #2\nret",
  "giasm": "mov w8, #18725                      // =0x4925\nmovk w8, #9362, lsl #16\numull x8, w0, w8\nlsr x8, x8, #32\nsub w9, w0, w8\nadd w8, w8, w9, lsr #1\nlsr w0, w8, #2\nret",
  "ll": "define i32 @test(i32 %a) {\n  %r = udiv i32 %a, 7\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = udiv i32 %a, 7\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "udiv",
  "ty": "i64",
  "variant": "binop",
  "codesize": 4,
  "thru": 1,
  "lat": 4,
  "sizelat": 4,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "udiv x0, x0, x1\nret",
  "giasm": "udiv x0, x0, x1\nret",
  "ll": "define i64 @test(i64 %a, i64 %b) {\n  %r = udiv i64 %a, %b\n  ret i64 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = udiv i64 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i64 %r"
 },
 {
  "instr": "udiv",
  "ty": "i64",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 8,
  "gisize": 8,
  "extrasize": 0,
  "asm": "mov x8, #9363                       // =0x2493\nmovk x8, #37449, lsl #16\nmovk x8, #18724, lsl #32\nmovk x8, #9362, lsl #48\numulh x8, x0, x8\nsub x9, x0, x8\nadd x8, x8, x9, lsr #1\nlsr x0, x8, #2\nret",
  "giasm": "mov x8, #9363                       // =0x2493\nmovk x8, #37449, lsl #16\nmovk x8, #18724, lsl #32\nmovk x8, #9362, lsl #48\numulh x8, x0, x8\nsub x9, x0, x8\nadd x8, x8, x9, lsr #1\nlsr x0, x8, #2\nret",
  "ll": "define i64 @test(i64 %a) {\n  %r = udiv i64 %a, 7\n  ret i64 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = udiv i64 %a, 7\nCost Model: Found an estimated cost of 1 for instruction:   ret i64 %r"
 },
 {
  "instr": "udiv",
  "ty": "<8 x i8>",
  "variant": "binop",
  "codesize": 4,
  "thru": 88,
  "lat": 4,
  "sizelat": 4,
  "size": 32,
  "gisize": 32,
  "extrasize": 0,
  "asm": "umov w8, v1.b[1]\numov w9, v0.b[1]\numov w10, v0.b[0]\numov w11, v0.b[2]\numov w12, v0.b[3]\numov w13, v0.b[4]\numov w14, v0.b[5]\nudiv w8, w9, w8\numov w9, v1.b[0]\nudiv w9, w10, w9\numov w10, v1.b[2]\nudiv w10, w11, w10\numov w11, v1.b[3]\nfmov s2, w9\numov w9, v1.b[6]\nmov v2.b[1], w8\nudiv w11, w12, w11\numov w12, v1.b[4]\nmov v2.b[2], w10\numov w10, v0.b[6]\nudiv w12, w13, w12\numov w13, v1.b[5]\nmov v2.b[3], w11\numov w11, v0.b[7]\nudiv w8, w14, w13\nmov v2.b[4], w12\nudiv w9, w10, w9\numov w10, v1.b[7]\nmov v2.b[5], w8\nudiv w8, w11, w10\nmov v2.b[6], w9\nmov v2.b[7], w8\nfmov d0, d2\nret",
  "giasm": "umov w8, v0.b[0]\numov w9, v1.b[0]\numov w10, v1.b[1]\numov w11, v1.b[2]\numov w12, v1.b[3]\numov w13, v1.b[4]\numov w14, v1.b[5]\nudiv w8, w8, w9\numov w9, v0.b[1]\nudiv w9, w9, w10\numov w10, v0.b[2]\nfmov s2, w8\nudiv w10, w10, w11\numov w11, v0.b[3]\nmov v2.b[1], w9\numov w9, v0.b[6]\nudiv w11, w11, w12\numov w12, v0.b[4]\nmov v2.b[2], w10\numov w10, v0.b[7]\nudiv w12, w12, w13\numov w13, v0.b[5]\nmov v2.b[3], w11\numov w11, v1.b[7]\nudiv w8, w13, w14\numov w13, v1.b[6]\nmov v2.b[4], w12\nudiv w9, w9, w13\nmov v2.b[5], w8\nudiv w8, w10, w11\nmov v2.b[6], w9\nmov v2.b[7], w8\nfmov d0, d2\nret",
  "ll": "define <8 x i8> @test(<8 x i8> %a, <8 x i8> %b) {\n  %r = udiv <8 x i8> %a, %b\n  ret <8 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = udiv <8 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i8> %r"
 },
 {
  "instr": "udiv",
  "ty": "<8 x i8>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 5,
  "lat": 4,
  "sizelat": 4,
  "size": 10,
  "gisize": 11,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nmovi v2.4h, #128\nldr d1, [x8, :lo12:.LCPI0_0]\numull v1.8h, v0.8b, v1.8b\nshrn v1.8b, v1.8h, #8\nsub v0.8b, v0.8b, v1.8b\numull v0.8h, v0.8b, v2.8b\nshrn v0.8b, v0.8h, #8\nadd v0.8b, v0.8b, v1.8b\nushr v0.8b, v0.8b, #2\nret",
  "giasm": "adrp x8, .LCPI0_1\nldr d1, [x8, :lo12:.LCPI0_1]\nadrp x8, .LCPI0_0\nldr d2, [x8, :lo12:.LCPI0_0]\numull v1.8h, v0.8b, v1.8b\nshrn v1.8b, v1.8h, #8\nsub v0.8b, v0.8b, v1.8b\numull v0.8h, v0.8b, v2.8b\nshrn v0.8b, v0.8h, #8\nadd v0.8b, v0.8b, v1.8b\nushr v0.8b, v0.8b, #2\nret",
  "ll": "define <8 x i8> @test(<8 x i8> %a) {\n  %r = udiv <8 x i8> %a, <i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6>\n  ret <8 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = udiv <8 x i8> %a, <i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6>\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i8> %r"
 },
 {
  "instr": "udiv",
  "ty": "<8 x i8>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 91,
  "lat": 7,
  "sizelat": 7,
  "size": 25,
  "gisize": 33,
  "extrasize": 0,
  "asm": "umov w10, v0.b[0]\numov w8, v0.b[1]\nand w9, w0, #0xff\numov w11, v0.b[2]\numov w12, v0.b[3]\numov w13, v0.b[4]\numov w14, v0.b[5]\nudiv w10, w10, w9\nudiv w8, w8, w9\nfmov s1, w10\numov w10, v0.b[6]\nudiv w11, w11, w9\nmov v1.b[1], w8\nudiv w12, w12, w9\nmov v1.b[2], w11\numov w11, v0.b[7]\nudiv w13, w13, w9\nmov v1.b[3], w12\nudiv w8, w14, w9\nmov v1.b[4], w13\nudiv w10, w10, w9\nmov v1.b[5], w8\nudiv w8, w11, w9\nmov v1.b[6], w10\nmov v1.b[7], w8\nfmov d0, d1\nret",
  "giasm": "dup v2.8b, w0\numov w8, v0.b[0]\numov w9, v2.b[0]\numov w10, v2.b[1]\numov w11, v2.b[2]\numov w12, v2.b[3]\numov w13, v2.b[4]\numov w14, v2.b[5]\nudiv w8, w8, w9\numov w9, v0.b[1]\nudiv w9, w9, w10\numov w10, v0.b[2]\nfmov s1, w8\nudiv w10, w10, w11\numov w11, v0.b[3]\nmov v1.b[1], w9\numov w9, v0.b[6]\nudiv w11, w11, w12\numov w12, v0.b[4]\nmov v1.b[2], w10\numov w10, v0.b[7]\nudiv w12, w12, w13\numov w13, v0.b[5]\nmov v1.b[3], w11\numov w11, v2.b[7]\nudiv w8, w13, w14\numov w13, v2.b[6]\nmov v1.b[4], w12\nudiv w9, w9, w13\nmov v1.b[5], w8\nudiv w8, w10, w11\nmov v1.b[6], w9\nmov v1.b[7], w8\nfmov d0, d1\nret",
  "ll": "define <8 x i8> @test(<8 x i8> %a, i8 %bs) {\n  %i = insertelement <8 x i8> poison, i8 %bs, i64 0\n  %b = shufflevector <8 x i8> %i, <8 x i8> poison, <8 x i32> zeroinitializer\n  %r = udiv <8 x i8> %a, %b\n  ret <8 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <8 x i8> poison, i8 %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <8 x i8> %i, <8 x i8> poison, <8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = udiv <8 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i8> %r"
 },
 {
  "instr": "udiv",
  "ty": "<8 x i8>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 5,
  "lat": 4,
  "sizelat": 4,
  "size": 8,
  "gisize": 6,
  "extrasize": 0,
  "asm": "movi v1.8b, #37\numull v1.8h, v0.8b, v1.8b\nshrn v1.8b, v1.8h, #8\nsub v0.8b, v0.8b, v1.8b\nushll v0.8h, v0.8b, #0\nshrn v0.8b, v0.8h, #1\nadd v0.8b, v0.8b, v1.8b\nushr v0.8b, v0.8b, #2\nret",
  "giasm": "movi v1.8b, #37\numull v1.8h, v0.8b, v1.8b\nshrn v1.8b, v1.8h, #8\nsub v0.8b, v0.8b, v1.8b\nusra v1.8b, v0.8b, #1\nushr v0.8b, v1.8b, #2\nret",
  "ll": "define <8 x i8> @test(<8 x i8> %a) {\n  %r = udiv <8 x i8> %a, splat (i8 7)\n  ret <8 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = udiv <8 x i8> %a, splat (i8 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i8> %r"
 },
 {
  "instr": "udiv",
  "ty": "<16 x i8>",
  "variant": "binop",
  "codesize": 4,
  "thru": 168,
  "lat": 4,
  "sizelat": 4,
  "size": 64,
  "gisize": 64,
  "extrasize": 0,
  "asm": "umov w8, v1.b[1]\numov w9, v0.b[1]\numov w10, v0.b[0]\numov w11, v0.b[2]\numov w12, v0.b[3]\numov w13, v0.b[4]\numov w14, v0.b[5]\numov w15, v0.b[6]\numov w16, v0.b[7]\numov w17, v0.b[8]\numov w18, v0.b[9]\nudiv w8, w9, w8\numov w9, v1.b[0]\nudiv w9, w10, w9\numov w10, v1.b[2]\nudiv w10, w11, w10\numov w11, v1.b[3]\nfmov s2, w9\numov w9, v1.b[10]\nmov v2.b[1], w8\nudiv w11, w12, w11\numov w12, v1.b[4]\nmov v2.b[2], w10\numov w10, v0.b[10]\nudiv w12, w13, w12\numov w13, v1.b[5]\nmov v2.b[3], w11\numov w11, v0.b[11]\nudiv w13, w14, w13\numov w14, v1.b[6]\nmov v2.b[4], w12\numov w12, v0.b[12]\nudiv w14, w15, w14\numov w15, v1.b[7]\nmov v2.b[5], w13\numov w13, v0.b[13]\nudiv w15, w16, w15\numov w16, v1.b[8]\nmov v2.b[6], w14\nudiv w16, w17, w16\numov w17, v1.b[9]\nmov v2.b[7], w15\nudiv w8, w18, w17\nmov v2.b[8], w16\nudiv w9, w10, w9\numov w10, v1.b[11]\nmov v2.b[9], w8\nudiv w10, w11, w10\numov w11, v1.b[12]\nmov v2.b[10], w9\numov w9, v1.b[14]\nudiv w11, w12, w11\numov w12, v1.b[13]\nmov v2.b[11], w10\numov w10, v1.b[15]\nudiv w8, w13, w12\numov w12, v0.b[14]\nmov v2.b[12], w11\numov w11, v0.b[15]\nudiv w9, w12, w9\nmov v2.b[13], w8\nudiv w8, w11, w10\nmov v2.b[14], w9\nmov v2.b[15], w8\nmov v0.16b, v2.16b\nret",
  "giasm": "umov w8, v0.b[0]\numov w9, v1.b[0]\numov w10, v1.b[1]\numov w11, v1.b[2]\numov w12, v1.b[3]\numov w13, v1.b[4]\numov w14, v1.b[5]\numov w15, v1.b[6]\numov w16, v1.b[7]\numov w17, v1.b[8]\numov w18, v1.b[9]\nudiv w8, w8, w9\numov w9, v0.b[1]\nudiv w9, w9, w10\numov w10, v0.b[2]\nfmov s2, w8\nudiv w10, w10, w11\numov w11, v0.b[3]\nmov v2.b[1], w9\numov w9, v0.b[10]\nudiv w11, w11, w12\numov w12, v0.b[4]\nmov v2.b[2], w10\numov w10, v0.b[11]\nudiv w12, w12, w13\numov w13, v0.b[5]\nmov v2.b[3], w11\numov w11, v1.b[11]\nudiv w13, w13, w14\numov w14, v0.b[6]\nmov v2.b[4], w12\numov w12, v1.b[12]\nudiv w14, w14, w15\numov w15, v0.b[7]\nmov v2.b[5], w13\numov w13, v1.b[13]\nudiv w15, w15, w16\numov w16, v0.b[8]\nmov v2.b[6], w14\nudiv w16, w16, w17\numov w17, v0.b[9]\nmov v2.b[7], w15\nudiv w8, w17, w18\numov w17, v1.b[10]\nmov v2.b[8], w16\nudiv w9, w9, w17\nmov v2.b[9], w8\numov w8, v0.b[14]\nudiv w10, w10, w11\numov w11, v0.b[12]\nmov v2.b[10], w9\numov w9, v0.b[15]\nudiv w11, w11, w12\numov w12, v0.b[13]\nmov v2.b[11], w10\numov w10, v1.b[15]\nudiv w12, w12, w13\numov w13, v1.b[14]\nmov v2.b[12], w11\nudiv w8, w8, w13\nmov v2.b[13], w12\nudiv w9, w9, w10\nmov v2.b[14], w8\nmov v2.b[15], w9\nmov v0.16b, v2.16b\nret",
  "ll": "define <16 x i8> @test(<16 x i8> %a, <16 x i8> %b) {\n  %r = udiv <16 x i8> %a, %b\n  ret <16 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = udiv <16 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i8> %r"
 },
 {
  "instr": "udiv",
  "ty": "<16 x i8>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 6,
  "lat": 4,
  "sizelat": 4,
  "size": 12,
  "gisize": 13,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\numull2 v2.8h, v0.16b, v1.16b\numull v1.8h, v0.8b, v1.8b\nuzp2 v1.16b, v1.16b, v2.16b\nmovi v2.8h, #128\nsub v0.16b, v0.16b, v1.16b\numull2 v3.8h, v0.16b, v2.16b\numull v0.8h, v0.8b, v2.8b\nuzp2 v0.16b, v0.16b, v3.16b\nadd v0.16b, v0.16b, v1.16b\nushr v0.16b, v0.16b, #2\nret",
  "giasm": "adrp x8, .LCPI0_1\nldr q1, [x8, :lo12:.LCPI0_1]\nadrp x8, .LCPI0_0\numull2 v2.8h, v0.16b, v1.16b\numull v1.8h, v0.8b, v1.8b\nuzp2 v1.16b, v1.16b, v2.16b\nldr q2, [x8, :lo12:.LCPI0_0]\nsub v0.16b, v0.16b, v1.16b\numull2 v3.8h, v0.16b, v2.16b\numull v0.8h, v0.8b, v2.8b\nuzp2 v0.16b, v0.16b, v3.16b\nadd v0.16b, v0.16b, v1.16b\nushr v0.16b, v0.16b, #2\nret",
  "ll": "define <16 x i8> @test(<16 x i8> %a) {\n  %r = udiv <16 x i8> %a, <i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6>\n  ret <16 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = udiv <16 x i8> %a, <i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6>\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i8> %r"
 },
 {
  "instr": "udiv",
  "ty": "<16 x i8>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 171,
  "lat": 7,
  "sizelat": 7,
  "size": 49,
  "gisize": 65,
  "extrasize": 0,
  "asm": "umov w10, v0.b[0]\numov w9, v0.b[1]\nand w8, w0, #0xff\numov w11, v0.b[2]\numov w12, v0.b[3]\numov w13, v0.b[4]\numov w14, v0.b[5]\numov w15, v0.b[6]\numov w16, v0.b[7]\numov w17, v0.b[8]\numov w18, v0.b[9]\nudiv w10, w10, w8\nudiv w9, w9, w8\nfmov s1, w10\numov w10, v0.b[10]\nudiv w11, w11, w8\nmov v1.b[1], w9\nudiv w12, w12, w8\nmov v1.b[2], w11\numov w11, v0.b[11]\nudiv w13, w13, w8\nmov v1.b[3], w12\numov w12, v0.b[12]\nudiv w14, w14, w8\nmov v1.b[4], w13\numov w13, v0.b[13]\nudiv w15, w15, w8\nmov v1.b[5], w14\nudiv w16, w16, w8\nmov v1.b[6], w15\nudiv w17, w17, w8\nmov v1.b[7], w16\nudiv w9, w18, w8\nmov v1.b[8], w17\nudiv w10, w10, w8\nmov v1.b[9], w9\nudiv w11, w11, w8\nmov v1.b[10], w10\numov w10, v0.b[14]\nudiv w12, w12, w8\nmov v1.b[11], w11\numov w11, v0.b[15]\nudiv w9, w13, w8\nmov v1.b[12], w12\nudiv w10, w10, w8\nmov v1.b[13], w9\nudiv w8, w11, w8\nmov v1.b[14], w10\nmov v1.b[15], w8\nmov v0.16b, v1.16b\nret",
  "giasm": "dup v2.16b, w0\numov w8, v0.b[0]\numov w9, v2.b[0]\numov w10, v2.b[1]\numov w11, v2.b[2]\numov w12, v2.b[3]\numov w13, v2.b[4]\numov w14, v2.b[5]\numov w15, v2.b[6]\numov w16, v2.b[7]\numov w17, v2.b[8]\numov w18, v2.b[9]\nudiv w8, w8, w9\numov w9, v0.b[1]\nudiv w9, w9, w10\numov w10, v0.b[2]\nfmov s1, w8\nudiv w10, w10, w11\numov w11, v0.b[3]\nmov v1.b[1], w9\numov w9, v0.b[10]\nudiv w11, w11, w12\numov w12, v0.b[4]\nmov v1.b[2], w10\numov w10, v0.b[11]\nudiv w12, w12, w13\numov w13, v0.b[5]\nmov v1.b[3], w11\numov w11, v2.b[11]\nudiv w13, w13, w14\numov w14, v0.b[6]\nmov v1.b[4], w12\numov w12, v2.b[12]\nudiv w14, w14, w15\numov w15, v0.b[7]\nmov v1.b[5], w13\numov w13, v2.b[13]\nudiv w15, w15, w16\numov w16, v0.b[8]\nmov v1.b[6], w14\nudiv w16, w16, w17\numov w17, v0.b[9]\nmov v1.b[7], w15\nudiv w8, w17, w18\numov w17, v2.b[10]\nmov v1.b[8], w16\nudiv w9, w9, w17\nmov v1.b[9], w8\numov w8, v0.b[14]\nudiv w10, w10, w11\numov w11, v0.b[12]\nmov v1.b[10], w9\numov w9, v0.b[15]\nudiv w11, w11, w12\numov w12, v0.b[13]\nmov v1.b[11], w10\numov w10, v2.b[15]\nudiv w12, w12, w13\numov w13, v2.b[14]\nmov v1.b[12], w11\nudiv w8, w8, w13\nmov v1.b[13], w12\nudiv w9, w9, w10\nmov v1.b[14], w8\nmov v1.b[15], w9\nmov v0.16b, v1.16b\nret",
  "ll": "define <16 x i8> @test(<16 x i8> %a, i8 %bs) {\n  %i = insertelement <16 x i8> poison, i8 %bs, i64 0\n  %b = shufflevector <16 x i8> %i, <16 x i8> poison, <16 x i32> zeroinitializer\n  %r = udiv <16 x i8> %a, %b\n  ret <16 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <16 x i8> poison, i8 %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <16 x i8> %i, <16 x i8> poison, <16 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = udiv <16 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i8> %r"
 },
 {
  "instr": "udiv",
  "ty": "<16 x i8>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 6,
  "lat": 4,
  "sizelat": 4,
  "size": 7,
  "gisize": 7,
  "extrasize": 0,
  "asm": "movi v1.16b, #37\numull2 v2.8h, v0.16b, v1.16b\numull v1.8h, v0.8b, v1.8b\nuzp2 v1.16b, v1.16b, v2.16b\nsub v0.16b, v0.16b, v1.16b\nusra v1.16b, v0.16b, #1\nushr v0.16b, v1.16b, #2\nret",
  "giasm": "movi v1.16b, #37\numull2 v2.8h, v0.16b, v1.16b\numull v1.8h, v0.8b, v1.8b\nuzp2 v1.16b, v1.16b, v2.16b\nsub v0.16b, v0.16b, v1.16b\nusra v1.16b, v0.16b, #1\nushr v0.16b, v1.16b, #2\nret",
  "ll": "define <16 x i8> @test(<16 x i8> %a) {\n  %r = udiv <16 x i8> %a, splat (i8 7)\n  ret <16 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = udiv <16 x i8> %a, splat (i8 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i8> %r"
 },
 {
  "instr": "udiv",
  "ty": "<32 x i8>",
  "variant": "binop",
  "codesize": 4,
  "thru": 328,
  "lat": 4,
  "sizelat": 4,
  "size": 136,
  "gisize": 136,
  "extrasize": 0,
  "asm": "stp x26, x25, [sp, #-64]!           // 16-byte Folded Spill\nstp x24, x23, [sp, #16]             // 16-byte Folded Spill\nstp x22, x21, [sp, #32]             // 16-byte Folded Spill\nstp x20, x19, [sp, #48]             // 16-byte Folded Spill\numov w8, v2.b[1]\numov w9, v0.b[1]\numov w10, v0.b[0]\numov w11, v0.b[2]\numov w12, v0.b[3]\numov w13, v0.b[4]\numov w14, v0.b[5]\numov w15, v0.b[6]\numov w16, v0.b[7]\numov w17, v0.b[8]\numov w18, v0.b[9]\numov w0, v0.b[10]\nudiv w8, w9, w8\numov w9, v2.b[0]\numov w1, v0.b[11]\numov w2, v0.b[12]\numov w3, v0.b[13]\numov w4, v0.b[14]\numov w5, v0.b[15]\numov w6, v1.b[1]\numov w7, v1.b[0]\numov w19, v1.b[2]\numov w20, v1.b[3]\numov w21, v1.b[4]\numov w22, v1.b[5]\numov w23, v1.b[6]\numov w24, v1.b[7]\numov w25, v1.b[8]\numov w26, v1.b[9]\nudiv w9, w10, w9\numov w10, v2.b[2]\nudiv w11, w11, w10\numov w10, v2.b[3]\nfmov s0, w9\numov w9, v3.b[10]\nmov v0.b[1], w8\nudiv w10, w12, w10\numov w12, v2.b[4]\nmov v0.b[2], w11\numov w11, v1.b[10]\nudiv w13, w13, w12\numov w12, v2.b[5]\nmov v0.b[3], w10\numov w10, v3.b[11]\nudiv w12, w14, w12\numov w14, v2.b[6]\nmov v0.b[4], w13\numov w13, v1.b[13]\nudiv w15, w15, w14\numov w14, v2.b[7]\nmov v0.b[5], w12\numov w12, v1.b[12]\nudiv w14, w16, w14\numov w16, v2.b[8]\nmov v0.b[6], w15\nudiv w17, w17, w16\numov w16, v2.b[9]\nmov v0.b[7], w14\nudiv w16, w18, w16\numov w18, v2.b[10]\nmov v0.b[8], w17\nudiv w0, w0, w18\numov w18, v2.b[11]\nmov v0.b[9], w16\nudiv w18, w1, w18\numov w1, v2.b[12]\nmov v0.b[10], w0\nudiv w2, w2, w1\numov w1, v2.b[13]\nmov v0.b[11], w18\nudiv w1, w3, w1\numov w3, v2.b[14]\nmov v0.b[12], w2\nudiv w3, w4, w3\numov w4, v2.b[15]\nmov v0.b[13], w1\nudiv w4, w5, w4\numov w5, v3.b[1]\nmov v0.b[14], w3\nudiv w5, w6, w5\numov w6, v3.b[0]\nmov v0.b[15], w4\nudiv w6, w7, w6\numov w7, v3.b[2]\nudiv w7, w19, w7\numov w19, v3.b[3]\nfmov s2, w6\nmov v2.b[1], w5\nudiv w19, w20, w19\numov w20, v3.b[4]\nmov v2.b[2], w7\nudiv w20, w21, w20\numov w21, v3.b[5]\nmov v2.b[3], w19\nudiv w21, w22, w21\numov w22, v3.b[6]\nmov v2.b[4], w20\nldp x20, x19, [sp, #48]             // 16-byte Folded Reload\nudiv w22, w23, w22\numov w23, v3.b[7]\nmov v2.b[5], w21\nudiv w23, w24, w23\numov w24, v3.b[8]\nmov v2.b[6], w22\nldp x22, x21, [sp, #32]             // 16-byte Folded Reload\nudiv w24, w25, w24\numov w25, v3.b[9]\nmov v2.b[7], w23\nudiv w8, w26, w25\nmov v2.b[8], w24\nldp x24, x23, [sp, #16]             // 16-byte Folded Reload\nudiv w9, w11, w9\numov w11, v1.b[11]\nmov v2.b[9], w8\nudiv w10, w11, w10\numov w11, v3.b[12]\nmov v2.b[10], w9\numov w9, v3.b[14]\nudiv w11, w12, w11\numov w12, v3.b[13]\nmov v2.b[11], w10\numov w10, v3.b[15]\nudiv w8, w13, w12\numov w12, v1.b[14]\nmov v2.b[12], w11\numov w11, v1.b[15]\nudiv w9, w12, w9\nmov v2.b[13], w8\nudiv w8, w11, w10\nmov v2.b[14], w9\nmov v2.b[15], w8\nmov v1.16b, v2.16b\nldp x26, x25, [sp], #64             // 16-byte Folded Reload\nret",
  "giasm": "stp x26, x25, [sp, #-64]!           // 16-byte Folded Spill\nstp x24, x23, [sp, #16]             // 16-byte Folded Spill\nstp x22, x21, [sp, #32]             // 16-byte Folded Spill\nstp x20, x19, [sp, #48]             // 16-byte Folded Spill\numov w8, v0.b[0]\numov w9, v2.b[0]\numov w5, v2.b[15]\numov w6, v3.b[0]\numov w25, v3.b[8]\numov w26, v3.b[9]\nudiv w4, w8, w9\numov w8, v0.b[1]\numov w9, v2.b[1]\nudiv w3, w8, w9\numov w8, v0.b[2]\numov w9, v2.b[2]\nudiv w2, w8, w9\numov w8, v0.b[3]\numov w9, v2.b[3]\nudiv w1, w8, w9\numov w8, v0.b[4]\numov w9, v2.b[4]\nudiv w0, w8, w9\numov w8, v0.b[5]\numov w9, v2.b[5]\nudiv w18, w8, w9\numov w8, v0.b[6]\numov w9, v2.b[6]\nudiv w17, w8, w9\numov w8, v0.b[7]\numov w9, v2.b[7]\nudiv w16, w8, w9\numov w8, v0.b[8]\numov w9, v2.b[8]\nudiv w15, w8, w9\numov w8, v0.b[9]\numov w9, v2.b[9]\nudiv w14, w8, w9\numov w8, v0.b[10]\numov w9, v2.b[10]\nudiv w13, w8, w9\numov w8, v0.b[11]\numov w9, v2.b[11]\nudiv w12, w8, w9\numov w8, v0.b[12]\numov w9, v2.b[12]\nudiv w11, w8, w9\numov w8, v0.b[13]\numov w9, v2.b[13]\nudiv w10, w8, w9\numov w8, v0.b[14]\numov w9, v2.b[14]\nudiv w9, w8, w9\numov w8, v0.b[15]\nfmov s0, w4\nmov v0.b[1], w3\numov w3, v1.b[10]\nmov v0.b[2], w2\nudiv w8, w8, w5\numov w5, v1.b[0]\nmov v0.b[3], w1\numov w1, v1.b[11]\nmov v0.b[4], w0\nudiv w24, w5, w6\numov w5, v1.b[1]\numov w6, v3.b[1]\nmov v0.b[5], w18\numov w18, v1.b[12]\nmov v0.b[6], w17\nudiv w23, w5, w6\numov w5, v1.b[2]\numov w6, v3.b[2]\nfmov s2, w24\nmov v0.b[7], w16\numov w16, v1.b[13]\nmov v0.b[8], w15\nudiv w22, w5, w6\numov w5, v1.b[3]\numov w6, v3.b[3]\nmov v2.b[1], w23\numov w23, v3.b[10]\nmov v0.b[9], w14\numov w14, v1.b[14]\nmov v0.b[10], w13\nudiv w21, w5, w6\numov w5, v1.b[4]\numov w6, v3.b[4]\nmov v2.b[2], w22\nmov v0.b[11], w12\numov w12, v1.b[15]\nmov v0.b[12], w11\nudiv w20, w5, w6\numov w5, v1.b[5]\numov w6, v3.b[5]\nmov v2.b[3], w21\nldp x22, x21, [sp, #32]             // 16-byte Folded Reload\nmov v0.b[13], w10\nmov v0.b[14], w9\nudiv w19, w5, w6\numov w5, v1.b[6]\numov w6, v3.b[6]\nmov v2.b[4], w20\nmov v0.b[15], w8\nudiv w7, w5, w6\numov w5, v1.b[7]\numov w6, v3.b[7]\nmov v2.b[5], w19\nldp x20, x19, [sp, #48]             // 16-byte Folded Reload\nudiv w6, w5, w6\numov w5, v1.b[8]\nmov v2.b[6], w7\nudiv w5, w5, w25\numov w25, v1.b[9]\nmov v2.b[7], w6\nudiv w4, w25, w26\nmov v2.b[8], w5\nudiv w2, w3, w23\numov w3, v3.b[11]\nmov v2.b[9], w4\nldp x24, x23, [sp, #16]             // 16-byte Folded Reload\nudiv w0, w1, w3\numov w1, v3.b[12]\nmov v2.b[10], w2\nudiv w17, w18, w1\numov w18, v3.b[13]\nmov v2.b[11], w0\nudiv w15, w16, w18\numov w16, v3.b[14]\nmov v2.b[12], w17\nudiv w13, w14, w16\numov w14, v3.b[15]\nmov v2.b[13], w15\nudiv w10, w12, w14\nmov v2.b[14], w13\nmov v2.b[15], w10\nmov v1.16b, v2.16b\nldp x26, x25, [sp], #64             // 16-byte Folded Reload\nret",
  "ll": "define <32 x i8> @test(<32 x i8> %a, <32 x i8> %b) {\n  %r = udiv <32 x i8> %a, %b\n  ret <32 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = udiv <32 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i8> %r"
 },
 {
  "instr": "udiv",
  "ty": "<32 x i8>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 12,
  "lat": 4,
  "sizelat": 4,
  "size": 132,
  "gisize": 32,
  "extrasize": 0,
  "asm": "umov w11, v0.b[0]\numov w12, v1.b[0]\nmov w8, #18725                      // =0x4925\nmovk w8, #9362, lsl #16\numov w10, v0.b[1]\numov w13, v1.b[1]\nmov w9, #43691                      // =0xaaab\numov w14, v0.b[2]\numov w15, v1.b[2]\nmovk w9, #10922, lsl #16\numull x11, w11, w8\numull x12, w12, w8\numull x10, w10, w9\numull x13, w13, w9\nlsr x11, x11, #32\nlsr x12, x12, #32\numull x14, w14, w8\nfmov s2, w11\nlsr x10, x10, #32\numov w11, v0.b[3]\nfmov s3, w12\nlsr x13, x13, #32\numull x12, w15, w8\numov w15, v1.b[3]\nmov v2.b[1], w10\nlsr x10, x14, #32\nmov v3.b[1], w13\numov w13, v0.b[4]\nlsr x12, x12, #32\numull x11, w11, w9\numull x14, w15, w9\numov w15, v1.b[4]\nmov v2.b[2], w10\nmov v3.b[2], w12\nlsr x10, x11, #32\numull x11, w13, w8\nlsr x13, x14, #32\numov w12, v0.b[5]\numull x14, w15, w8\numov w15, v1.b[5]\nmov v2.b[3], w10\nlsr x10, x11, #32\nmov v3.b[3], w13\nlsr x13, x14, #32\numull x11, w12, w9\numov w12, v0.b[6]\numull x14, w15, w9\numov w15, v1.b[6]\nmov v2.b[4], w10\nmov v3.b[4], w13\nlsr x10, x11, #32\nlsr x13, x14, #32\numull x11, w12, w8\numov w12, v0.b[7]\numull x14, w15, w8\numov w15, v1.b[7]\nmov v2.b[5], w10\nmov v3.b[5], w13\nlsr x10, x11, #32\nlsr x13, x14, #32\numull x11, w12, w9\numov w12, v0.b[8]\numull x14, w15, w9\numov w15, v1.b[8]\nmov v2.b[6], w10\nmov v3.b[6], w13\nlsr x10, x11, #32\nlsr x13, x14, #32\numull x11, w12, w8\numov w12, v0.b[9]\numull x14, w15, w8\numov w15, v1.b[9]\nmov v2.b[7], w10\nmov v3.b[7], w13\nlsr x10, x11, #32\nlsr x13, x14, #32\numull x11, w12, w9\numov w12, v0.b[10]\numull x14, w15, w9\numov w15, v1.b[10]\nmov v2.b[8], w10\nmov v3.b[8], w13\nlsr x10, x11, #32\nlsr x13, x14, #32\numull x11, w12, w8\numov w12, v0.b[11]\numull x14, w15, w8\numov w15, v1.b[11]\nmov v2.b[9], w10\nmov v3.b[9], w13\nlsr x10, x11, #32\nlsr x13, x14, #32\numull x11, w12, w9\numov w12, v0.b[12]\numull x14, w15, w9\numov w15, v1.b[12]\nmov v2.b[10], w10\nmov v3.b[10], w13\nlsr x10, x11, #32\nlsr x13, x14, #32\numull x11, w12, w8\numov w12, v0.b[13]\numull x14, w15, w8\numov w15, v1.b[13]\nmov v2.b[11], w10\nmov v3.b[11], w13\nlsr x10, x11, #32\nlsr x13, x14, #32\numull x11, w12, w9\numov w12, v0.b[14]\numull x14, w15, w9\numov w15, v1.b[14]\nmov v2.b[12], w10\numov w10, v0.b[15]\nmov v3.b[12], w13\nlsr x11, x11, #32\nlsr x13, x14, #32\numull x12, w12, w8\numov w14, v1.b[15]\numull x8, w15, w8\nmov v2.b[13], w11\numull x10, w10, w9\nmov v3.b[13], w13\nlsr x11, x12, #32\nlsr x8, x8, #32\numull x9, w14, w9\nmov v2.b[14], w11\nmov v3.b[14], w8\nlsr x8, x10, #32\nlsr x9, x9, #32\nmov v2.b[15], w8\nmov v3.b[15], w9\nmov v0.16b, v2.16b\nmov v1.16b, v3.16b\nret",
  "giasm": "adrp x8, .LCPI0_1\nmov d3, v0.d[1]\nmov d5, v1.d[1]\nldr d2, [x8, :lo12:.LCPI0_1]\nadrp x8, .LCPI0_0\numull v4.8h, v0.8b, v2.8b\numull v6.8h, v1.8b, v2.8b\numull v3.8h, v3.8b, v2.8b\numull v2.8h, v5.8b, v2.8b\nshrn v4.8b, v4.8h, #8\nshrn v5.8b, v6.8h, #8\nmov v6.16b, v4.16b\nmov v7.16b, v5.16b\nshrn2 v4.16b, v3.8h, #8\nshrn2 v5.16b, v2.8h, #8\nshrn2 v6.16b, v3.8h, #8\nshrn2 v7.16b, v2.8h, #8\nsub v0.16b, v0.16b, v6.16b\nsub v1.16b, v1.16b, v7.16b\nldr d6, [x8, :lo12:.LCPI0_0]\nmov d7, v0.d[1]\nmov d16, v1.d[1]\numull v0.8h, v0.8b, v6.8b\numull v1.8h, v1.8b, v6.8b\numull v7.8h, v7.8b, v6.8b\numull v6.8h, v16.8b, v6.8b\nshrn v0.8b, v0.8h, #8\nshrn v1.8b, v1.8h, #8\nshrn2 v0.16b, v7.8h, #8\nshrn2 v1.16b, v6.8h, #8\nadd v0.16b, v0.16b, v4.16b\nadd v1.16b, v1.16b, v5.16b\nushr v0.16b, v0.16b, #2\nushr v1.16b, v1.16b, #2\nret",
  "ll": "define <32 x i8> @test(<32 x i8> %a) {\n  %r = udiv <32 x i8> %a, <i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6>\n  ret <32 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = udiv <32 x i8> %a, <i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6>\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i8> %r"
 },
 {
  "instr": "udiv",
  "ty": "<32 x i8>",
  "variant": "binopsplat",
  "codesize": 7,
  "thru": 332,
  "lat": 8,
  "sizelat": 8,
  "size": 105,
  "gisize": 132,
  "extrasize": 0,
  "asm": "stp x26, x25, [sp, #-64]!           // 16-byte Folded Spill\nstp x24, x23, [sp, #16]             // 16-byte Folded Spill\nstp x22, x21, [sp, #32]             // 16-byte Folded Spill\nstp x20, x19, [sp, #48]             // 16-byte Folded Spill\numov w7, v1.b[0]\nand w8, w0, #0xff\numov w6, v1.b[1]\numov w10, v0.b[0]\numov w9, v0.b[1]\numov w19, v1.b[2]\numov w11, v0.b[2]\numov w20, v1.b[3]\numov w12, v0.b[4]\numov w13, v0.b[6]\numov w14, v0.b[8]\numov w15, v0.b[10]\nudiv w7, w7, w8\numov w16, v0.b[12]\numov w21, v1.b[4]\numov w4, v0.b[14]\numov w5, v0.b[15]\numov w22, v1.b[5]\numov w23, v1.b[6]\numov w24, v1.b[7]\numov w25, v1.b[8]\numov w26, v1.b[9]\nudiv w6, w6, w8\nfmov s2, w7\nudiv w10, w10, w8\nmov v2.b[1], w6\nudiv w9, w9, w8\nudiv w19, w19, w8\nudiv w17, w11, w8\numov w11, v0.b[3]\nmov v2.b[2], w19\nudiv w20, w20, w8\nudiv w18, w12, w8\numov w12, v0.b[5]\nmov v2.b[3], w20\nldp x20, x19, [sp, #48]             // 16-byte Folded Reload\nudiv w0, w13, w8\numov w13, v0.b[7]\nudiv w1, w14, w8\numov w14, v0.b[9]\nudiv w2, w15, w8\numov w15, v0.b[11]\nudiv w3, w16, w8\numov w16, v0.b[13]\nfmov s0, w10\numov w10, v1.b[10]\nmov v0.b[1], w9\nmov v0.b[2], w17\nudiv w11, w11, w8\nudiv w21, w21, w8\nmov v0.b[3], w11\numov w11, v1.b[11]\nmov v0.b[4], w18\nudiv w22, w22, w8\nmov v2.b[4], w21\nudiv w12, w12, w8\nmov v2.b[5], w22\nldp x22, x21, [sp, #32]             // 16-byte Folded Reload\nudiv w23, w23, w8\nmov v0.b[5], w12\numov w12, v1.b[12]\nmov v0.b[6], w0\nudiv w24, w24, w8\nmov v2.b[6], w23\nudiv w13, w13, w8\nmov v2.b[7], w24\nldp x24, x23, [sp, #16]             // 16-byte Folded Reload\nudiv w25, w25, w8\nmov v0.b[7], w13\numov w13, v1.b[13]\nmov v0.b[8], w1\nudiv w9, w26, w8\nmov v2.b[8], w25\nudiv w14, w14, w8\nmov v2.b[9], w9\nudiv w10, w10, w8\nmov v0.b[9], w14\nmov v0.b[10], w2\nudiv w11, w11, w8\nmov v2.b[10], w10\numov w10, v1.b[14]\nudiv w15, w15, w8\nmov v2.b[11], w11\numov w11, v1.b[15]\nudiv w12, w12, w8\nmov v0.b[11], w15\nmov v0.b[12], w3\nudiv w9, w13, w8\nmov v2.b[12], w12\nudiv w16, w16, w8\nmov v2.b[13], w9\nudiv w10, w10, w8\nmov v0.b[13], w16\nudiv w4, w4, w8\nmov v2.b[14], w10\nudiv w5, w5, w8\nmov v0.b[14], w4\nudiv w8, w11, w8\nmov v0.b[15], w5\nmov v2.b[15], w8\nmov v1.16b, v2.16b\nldp x26, x25, [sp], #64             // 16-byte Folded Reload\nret",
  "giasm": "sub sp, sp, #112\nstp x29, x30, [sp, #16]             // 16-byte Folded Spill\nstp x28, x27, [sp, #32]             // 16-byte Folded Spill\nstp x26, x25, [sp, #48]             // 16-byte Folded Spill\nstp x24, x23, [sp, #64]             // 16-byte Folded Spill\nstp x22, x21, [sp, #80]             // 16-byte Folded Spill\nstp x20, x19, [sp, #96]             // 16-byte Folded Spill\ndup v2.16b, w0\numov w8, v0.b[0]\numov w28, v2.b[0]\numov w29, v2.b[1]\numov w25, v2.b[2]\numov w26, v2.b[3]\numov w27, v2.b[4]\numov w10, v2.b[5]\numov w22, v2.b[6]\numov w23, v2.b[7]\numov w9, v2.b[8]\numov w21, v2.b[9]\numov w20, v2.b[10]\numov w19, v2.b[11]\nudiv w24, w8, w28\numov w8, v0.b[1]\numov w7, v2.b[12]\numov w6, v2.b[13]\numov w3, v2.b[14]\numov w13, v2.b[15]\nudiv w5, w8, w29\numov w8, v0.b[2]\nudiv w4, w8, w25\numov w8, v0.b[3]\nudiv w2, w8, w26\numov w8, v0.b[4]\nudiv w1, w8, w27\numov w8, v0.b[5]\nudiv w0, w8, w10\numov w8, v0.b[6]\nudiv w18, w8, w22\numov w8, v0.b[7]\nudiv w17, w8, w23\numov w8, v0.b[8]\nudiv w16, w8, w9\numov w8, v0.b[9]\nudiv w15, w8, w21\numov w8, v0.b[10]\nudiv w14, w8, w20\numov w8, v0.b[11]\nudiv w12, w8, w19\numov w8, v0.b[12]\nudiv w11, w8, w7\numov w8, v0.b[13]\nudiv w8, w8, w6\nstr w8, [sp, #4]                    // 4-byte Folded Spill\numov w8, v0.b[14]\nudiv w8, w8, w3\nstr w8, [sp, #8]                    // 4-byte Folded Spill\numov w8, v0.b[15]\nfmov s0, w24\nmov v0.b[1], w5\nudiv w8, w8, w13\nmov v0.b[2], w4\nmov v0.b[3], w2\nstr w8, [sp, #12]                   // 4-byte Folded Spill\numov w8, v1.b[0]\nmov v0.b[4], w1\nudiv w8, w8, w28\numov w28, v1.b[1]\nmov v0.b[5], w0\numov w0, v1.b[12]\nmov v0.b[6], w18\nudiv w30, w28, w29\numov w28, v1.b[2]\nfmov s2, w8\nmov v0.b[7], w17\numov w17, v1.b[13]\nmov v0.b[8], w16\nudiv w29, w28, w25\numov w25, v1.b[3]\nmov v2.b[1], w30\nmov v0.b[9], w15\nmov v0.b[10], w14\nudiv w28, w25, w26\numov w25, v1.b[4]\nmov v2.b[2], w29\nldp x29, x30, [sp, #16]             // 16-byte Folded Reload\nmov v0.b[11], w12\nmov v0.b[12], w11\nudiv w27, w25, w27\numov w25, v1.b[5]\nmov v2.b[3], w28\nudiv w26, w25, w10\numov w10, v1.b[6]\nmov v2.b[4], w27\nldp x28, x27, [sp, #32]             // 16-byte Folded Reload\nudiv w25, w10, w22\numov w10, v1.b[7]\nmov v2.b[5], w26\nudiv w23, w10, w23\numov w10, v1.b[8]\nmov v2.b[6], w25\nldp x26, x25, [sp, #48]             // 16-byte Folded Reload\nudiv w22, w10, w9\numov w9, v1.b[9]\nmov v2.b[7], w23\numov w10, v1.b[11]\nldp x24, x23, [sp, #64]             // 16-byte Folded Reload\nudiv w8, w9, w21\numov w9, v1.b[10]\nmov v2.b[8], w22\nldp x22, x21, [sp, #80]             // 16-byte Folded Reload\nudiv w9, w9, w20\nmov v2.b[9], w8\numov w8, v1.b[14]\nudiv w10, w10, w19\nmov v2.b[10], w9\numov w9, v1.b[15]\nldp x20, x19, [sp, #96]             // 16-byte Folded Reload\nudiv w18, w0, w7\nmov v2.b[11], w10\nldp w11, w10, [sp, #4]              // 8-byte Folded Reload\nmov v0.b[13], w11\nudiv w16, w17, w6\nmov v2.b[12], w18\nmov v0.b[14], w10\nudiv w8, w8, w3\nmov v2.b[13], w16\nudiv w9, w9, w13\nmov v2.b[14], w8\nldr w8, [sp, #12]                   // 4-byte Folded Reload\nmov v0.b[15], w8\nmov v2.b[15], w9\nmov v1.16b, v2.16b\nadd sp, sp, #112\nret",
  "ll": "define <32 x i8> @test(<32 x i8> %a, i8 %bs) {\n  %i = insertelement <32 x i8> poison, i8 %bs, i64 0\n  %b = shufflevector <32 x i8> %i, <32 x i8> poison, <32 x i32> zeroinitializer\n  %r = udiv <32 x i8> %a, %b\n  ret <32 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <32 x i8> poison, i8 %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <32 x i8> %i, <32 x i8> poison, <32 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = udiv <32 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i8> %r"
 },
 {
  "instr": "udiv",
  "ty": "<32 x i8>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 12,
  "lat": 4,
  "sizelat": 4,
  "size": 130,
  "gisize": 19,
  "extrasize": 0,
  "asm": "umov w10, v0.b[0]\numov w11, v1.b[0]\nmov w8, #18725                      // =0x4925\nmovk w8, #9362, lsl #16\numov w9, v0.b[1]\numov w12, v1.b[1]\numov w13, v0.b[2]\numov w14, v1.b[2]\numull x10, w10, w8\numull x11, w11, w8\numull x9, w9, w8\numull x12, w12, w8\nlsr x10, x10, #32\nlsr x11, x11, #32\numull x13, w13, w8\nfmov s2, w10\nlsr x9, x9, #32\numov w10, v0.b[3]\nfmov s3, w11\nlsr x12, x12, #32\numull x11, w14, w8\numov w14, v1.b[3]\nmov v2.b[1], w9\nlsr x9, x13, #32\nmov v3.b[1], w12\numov w12, v0.b[4]\nlsr x11, x11, #32\numull x10, w10, w8\numull x13, w14, w8\numov w14, v1.b[4]\nmov v2.b[2], w9\nmov v3.b[2], w11\nlsr x9, x10, #32\numull x10, w12, w8\nlsr x12, x13, #32\numov w11, v0.b[5]\numull x13, w14, w8\numov w14, v1.b[5]\nmov v2.b[3], w9\nlsr x9, x10, #32\nmov v3.b[3], w12\nlsr x12, x13, #32\numull x10, w11, w8\numov w11, v0.b[6]\numull x13, w14, w8\numov w14, v1.b[6]\nmov v2.b[4], w9\nmov v3.b[4], w12\nlsr x9, x10, #32\nlsr x12, x13, #32\numull x10, w11, w8\numov w11, v0.b[7]\numull x13, w14, w8\numov w14, v1.b[7]\nmov v2.b[5], w9\nmov v3.b[5], w12\nlsr x9, x10, #32\nlsr x12, x13, #32\numull x10, w11, w8\numov w11, v0.b[8]\numull x13, w14, w8\numov w14, v1.b[8]\nmov v2.b[6], w9\nmov v3.b[6], w12\nlsr x9, x10, #32\nlsr x12, x13, #32\numull x10, w11, w8\numov w11, v0.b[9]\numull x13, w14, w8\numov w14, v1.b[9]\nmov v2.b[7], w9\nmov v3.b[7], w12\nlsr x9, x10, #32\nlsr x12, x13, #32\numull x10, w11, w8\numov w11, v0.b[10]\numull x13, w14, w8\numov w14, v1.b[10]\nmov v2.b[8], w9\nmov v3.b[8], w12\nlsr x9, x10, #32\nlsr x12, x13, #32\numull x10, w11, w8\numov w11, v0.b[11]\numull x13, w14, w8\numov w14, v1.b[11]\nmov v2.b[9], w9\nmov v3.b[9], w12\nlsr x9, x10, #32\nlsr x12, x13, #32\numull x10, w11, w8\numov w11, v0.b[12]\numull x13, w14, w8\numov w14, v1.b[12]\nmov v2.b[10], w9\nmov v3.b[10], w12\nlsr x9, x10, #32\nlsr x12, x13, #32\numull x10, w11, w8\numov w11, v0.b[13]\numull x13, w14, w8\numov w14, v1.b[13]\nmov v2.b[11], w9\nmov v3.b[11], w12\nlsr x9, x10, #32\nlsr x12, x13, #32\numull x10, w11, w8\numov w11, v0.b[14]\numull x13, w14, w8\numov w14, v1.b[14]\nmov v2.b[12], w9\numov w9, v0.b[15]\nmov v3.b[12], w12\nlsr x10, x10, #32\nlsr x12, x13, #32\numull x11, w11, w8\numull x13, w14, w8\numov w14, v1.b[15]\nmov v2.b[13], w10\numull x9, w9, w8\nmov v3.b[13], w12\nlsr x10, x11, #32\nlsr x11, x13, #32\numull x8, w14, w8\nlsr x9, x9, #32\nmov v2.b[14], w10\nmov v3.b[14], w11\nlsr x8, x8, #32\nmov v2.b[15], w9\nmov v3.b[15], w8\nmov v0.16b, v2.16b\nmov v1.16b, v3.16b\nret",
  "giasm": "movi v2.8b, #37\nmov d3, v0.d[1]\nmov d5, v1.d[1]\numull v4.8h, v0.8b, v2.8b\numull v6.8h, v1.8b, v2.8b\numull v3.8h, v3.8b, v2.8b\numull v2.8h, v5.8b, v2.8b\nshrn v4.8b, v4.8h, #8\nshrn v5.8b, v6.8h, #8\nmov v6.16b, v4.16b\nmov v7.16b, v5.16b\nshrn2 v4.16b, v3.8h, #8\nshrn2 v5.16b, v2.8h, #8\nshrn2 v6.16b, v3.8h, #8\nshrn2 v7.16b, v2.8h, #8\nsub v0.16b, v0.16b, v6.16b\nsub v1.16b, v1.16b, v7.16b\nusra v4.16b, v0.16b, #1\nusra v5.16b, v1.16b, #1\nushr v0.16b, v4.16b, #2\nushr v1.16b, v5.16b, #2\nret",
  "ll": "define <32 x i8> @test(<32 x i8> %a) {\n  %r = udiv <32 x i8> %a, splat (i8 7)\n  ret <32 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = udiv <32 x i8> %a, splat (i8 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i8> %r"
 },
 {
  "instr": "udiv",
  "ty": "<4 x i16>",
  "variant": "binop",
  "codesize": 4,
  "thru": 48,
  "lat": 4,
  "sizelat": 4,
  "size": 16,
  "gisize": 16,
  "extrasize": 0,
  "asm": "umov w8, v1.h[1]\numov w9, v0.h[1]\numov w10, v0.h[0]\numov w11, v0.h[2]\numov w12, v0.h[3]\nudiv w8, w9, w8\numov w9, v1.h[0]\nudiv w9, w10, w9\numov w10, v1.h[2]\nudiv w10, w11, w10\numov w11, v1.h[3]\nfmov s0, w9\nmov v0.h[1], w8\nudiv w8, w12, w11\nmov v0.h[2], w10\nmov v0.h[3], w8\nret",
  "giasm": "umov w8, v0.h[0]\numov w9, v1.h[0]\numov w10, v1.h[1]\numov w11, v1.h[2]\numov w12, v1.h[3]\nudiv w8, w8, w9\numov w9, v0.h[1]\nudiv w9, w9, w10\numov w10, v0.h[2]\nudiv w10, w10, w11\numov w11, v0.h[3]\nfmov s0, w8\nmov v0.h[1], w9\nudiv w8, w11, w12\nmov v0.h[2], w10\nmov v0.h[3], w8\nret",
  "ll": "define <4 x i16> @test(<4 x i16> %a, <4 x i16> %b) {\n  %r = udiv <4 x i16> %a, %b\n  ret <4 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = udiv <4 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i16> %r"
 },
 {
  "instr": "udiv",
  "ty": "<4 x i16>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 5,
  "lat": 4,
  "sizelat": 4,
  "size": 10,
  "gisize": 11,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nmovi v2.2s, #128, lsl #8\nldr d1, [x8, :lo12:.LCPI0_0]\numull v1.4s, v0.4h, v1.4h\nshrn v1.4h, v1.4s, #16\nsub v0.4h, v0.4h, v1.4h\numull v0.4s, v0.4h, v2.4h\nshrn v0.4h, v0.4s, #16\nadd v0.4h, v0.4h, v1.4h\nushr v0.4h, v0.4h, #2\nret",
  "giasm": "adrp x8, .LCPI0_1\nldr d1, [x8, :lo12:.LCPI0_1]\nadrp x8, .LCPI0_0\nldr d2, [x8, :lo12:.LCPI0_0]\numull v1.4s, v0.4h, v1.4h\nshrn v1.4h, v1.4s, #16\nsub v0.4h, v0.4h, v1.4h\numull v0.4s, v0.4h, v2.4h\nshrn v0.4h, v0.4s, #16\nadd v0.4h, v0.4h, v1.4h\nushr v0.4h, v0.4h, #2\nret",
  "ll": "define <4 x i16> @test(<4 x i16> %a) {\n  %r = udiv <4 x i16> %a, <i16 7, i16 6, i16 7, i16 6>\n  ret <4 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = udiv <4 x i16> %a, <i16 7, i16 6, i16 7, i16 6>\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i16> %r"
 },
 {
  "instr": "udiv",
  "ty": "<4 x i16>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 51,
  "lat": 7,
  "sizelat": 7,
  "size": 13,
  "gisize": 17,
  "extrasize": 0,
  "asm": "umov w10, v0.h[0]\numov w8, v0.h[1]\nand w9, w0, #0xffff\numov w11, v0.h[2]\numov w12, v0.h[3]\nudiv w10, w10, w9\nudiv w8, w8, w9\nfmov s0, w10\nudiv w11, w11, w9\nmov v0.h[1], w8\nudiv w8, w12, w9\nmov v0.h[2], w11\nmov v0.h[3], w8\nret",
  "giasm": "dup v1.4h, w0\numov w8, v0.h[0]\numov w9, v1.h[0]\numov w10, v1.h[1]\numov w11, v1.h[2]\numov w12, v1.h[3]\nudiv w8, w8, w9\numov w9, v0.h[1]\nudiv w9, w9, w10\numov w10, v0.h[2]\nudiv w10, w10, w11\numov w11, v0.h[3]\nfmov s0, w8\nmov v0.h[1], w9\nudiv w8, w11, w12\nmov v0.h[2], w10\nmov v0.h[3], w8\nret",
  "ll": "define <4 x i16> @test(<4 x i16> %a, i16 %bs) {\n  %i = insertelement <4 x i16> poison, i16 %bs, i64 0\n  %b = shufflevector <4 x i16> %i, <4 x i16> poison, <4 x i32> zeroinitializer\n  %r = udiv <4 x i16> %a, %b\n  ret <4 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <4 x i16> poison, i16 %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <4 x i16> %i, <4 x i16> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = udiv <4 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i16> %r"
 },
 {
  "instr": "udiv",
  "ty": "<4 x i16>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 5,
  "lat": 4,
  "sizelat": 4,
  "size": 9,
  "gisize": 7,
  "extrasize": 0,
  "asm": "mov w8, #9363                       // =0x2493\ndup v1.4h, w8\numull v1.4s, v0.4h, v1.4h\nshrn v1.4h, v1.4s, #16\nsub v0.4h, v0.4h, v1.4h\nushll v0.4s, v0.4h, #0\nshrn v0.4h, v0.4s, #1\nadd v0.4h, v0.4h, v1.4h\nushr v0.4h, v0.4h, #2\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr d1, [x8, :lo12:.LCPI0_0]\numull v1.4s, v0.4h, v1.4h\nshrn v1.4h, v1.4s, #16\nsub v0.4h, v0.4h, v1.4h\nusra v1.4h, v0.4h, #1\nushr v0.4h, v1.4h, #2\nret",
  "ll": "define <4 x i16> @test(<4 x i16> %a) {\n  %r = udiv <4 x i16> %a, splat (i16 7)\n  ret <4 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = udiv <4 x i16> %a, splat (i16 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i16> %r"
 },
 {
  "instr": "udiv",
  "ty": "<8 x i16>",
  "variant": "binop",
  "codesize": 4,
  "thru": 88,
  "lat": 4,
  "sizelat": 4,
  "size": 32,
  "gisize": 32,
  "extrasize": 0,
  "asm": "umov w8, v1.h[1]\numov w9, v0.h[1]\numov w10, v0.h[0]\numov w11, v0.h[2]\numov w12, v0.h[3]\numov w13, v0.h[4]\numov w14, v0.h[5]\nudiv w8, w9, w8\numov w9, v1.h[0]\nudiv w9, w10, w9\numov w10, v1.h[2]\nudiv w10, w11, w10\numov w11, v1.h[3]\nfmov s2, w9\numov w9, v1.h[6]\nmov v2.h[1], w8\nudiv w11, w12, w11\numov w12, v1.h[4]\nmov v2.h[2], w10\numov w10, v0.h[6]\nudiv w12, w13, w12\numov w13, v1.h[5]\nmov v2.h[3], w11\numov w11, v0.h[7]\nudiv w8, w14, w13\nmov v2.h[4], w12\nudiv w9, w10, w9\numov w10, v1.h[7]\nmov v2.h[5], w8\nudiv w8, w11, w10\nmov v2.h[6], w9\nmov v2.h[7], w8\nmov v0.16b, v2.16b\nret",
  "giasm": "umov w8, v0.h[0]\numov w9, v1.h[0]\numov w10, v1.h[1]\numov w11, v1.h[2]\numov w12, v1.h[3]\numov w13, v1.h[4]\numov w14, v1.h[5]\nudiv w8, w8, w9\numov w9, v0.h[1]\nudiv w9, w9, w10\numov w10, v0.h[2]\nfmov s2, w8\nudiv w10, w10, w11\numov w11, v0.h[3]\nmov v2.h[1], w9\numov w9, v0.h[6]\nudiv w11, w11, w12\numov w12, v0.h[4]\nmov v2.h[2], w10\numov w10, v0.h[7]\nudiv w12, w12, w13\numov w13, v0.h[5]\nmov v2.h[3], w11\numov w11, v1.h[7]\nudiv w8, w13, w14\numov w13, v1.h[6]\nmov v2.h[4], w12\nudiv w9, w9, w13\nmov v2.h[5], w8\nudiv w8, w10, w11\nmov v2.h[6], w9\nmov v2.h[7], w8\nmov v0.16b, v2.16b\nret",
  "ll": "define <8 x i16> @test(<8 x i16> %a, <8 x i16> %b) {\n  %r = udiv <8 x i16> %a, %b\n  ret <8 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = udiv <8 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i16> %r"
 },
 {
  "instr": "udiv",
  "ty": "<8 x i16>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 6,
  "lat": 4,
  "sizelat": 4,
  "size": 12,
  "gisize": 13,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\numull2 v2.4s, v0.8h, v1.8h\numull v1.4s, v0.4h, v1.4h\nuzp2 v1.8h, v1.8h, v2.8h\nmovi v2.4s, #128, lsl #8\nsub v0.8h, v0.8h, v1.8h\numull2 v3.4s, v0.8h, v2.8h\numull v0.4s, v0.4h, v2.4h\nuzp2 v0.8h, v0.8h, v3.8h\nadd v0.8h, v0.8h, v1.8h\nushr v0.8h, v0.8h, #2\nret",
  "giasm": "adrp x8, .LCPI0_1\nldr q1, [x8, :lo12:.LCPI0_1]\nadrp x8, .LCPI0_0\numull2 v2.4s, v0.8h, v1.8h\numull v1.4s, v0.4h, v1.4h\nuzp2 v1.8h, v1.8h, v2.8h\nldr q2, [x8, :lo12:.LCPI0_0]\nsub v0.8h, v0.8h, v1.8h\numull2 v3.4s, v0.8h, v2.8h\numull v0.4s, v0.4h, v2.4h\nuzp2 v0.8h, v0.8h, v3.8h\nadd v0.8h, v0.8h, v1.8h\nushr v0.8h, v0.8h, #2\nret",
  "ll": "define <8 x i16> @test(<8 x i16> %a) {\n  %r = udiv <8 x i16> %a, <i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6>\n  ret <8 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = udiv <8 x i16> %a, <i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6>\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i16> %r"
 },
 {
  "instr": "udiv",
  "ty": "<8 x i16>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 91,
  "lat": 7,
  "sizelat": 7,
  "size": 25,
  "gisize": 33,
  "extrasize": 0,
  "asm": "umov w10, v0.h[0]\numov w8, v0.h[1]\nand w9, w0, #0xffff\numov w11, v0.h[2]\numov w12, v0.h[3]\numov w13, v0.h[4]\numov w14, v0.h[5]\nudiv w10, w10, w9\nudiv w8, w8, w9\nfmov s1, w10\numov w10, v0.h[6]\nudiv w11, w11, w9\nmov v1.h[1], w8\nudiv w12, w12, w9\nmov v1.h[2], w11\numov w11, v0.h[7]\nudiv w13, w13, w9\nmov v1.h[3], w12\nudiv w8, w14, w9\nmov v1.h[4], w13\nudiv w10, w10, w9\nmov v1.h[5], w8\nudiv w8, w11, w9\nmov v1.h[6], w10\nmov v1.h[7], w8\nmov v0.16b, v1.16b\nret",
  "giasm": "dup v2.8h, w0\numov w8, v0.h[0]\numov w9, v2.h[0]\numov w10, v2.h[1]\numov w11, v2.h[2]\numov w12, v2.h[3]\numov w13, v2.h[4]\numov w14, v2.h[5]\nudiv w8, w8, w9\numov w9, v0.h[1]\nudiv w9, w9, w10\numov w10, v0.h[2]\nfmov s1, w8\nudiv w10, w10, w11\numov w11, v0.h[3]\nmov v1.h[1], w9\numov w9, v0.h[6]\nudiv w11, w11, w12\numov w12, v0.h[4]\nmov v1.h[2], w10\numov w10, v0.h[7]\nudiv w12, w12, w13\numov w13, v0.h[5]\nmov v1.h[3], w11\numov w11, v2.h[7]\nudiv w8, w13, w14\numov w13, v2.h[6]\nmov v1.h[4], w12\nudiv w9, w9, w13\nmov v1.h[5], w8\nudiv w8, w10, w11\nmov v1.h[6], w9\nmov v1.h[7], w8\nmov v0.16b, v1.16b\nret",
  "ll": "define <8 x i16> @test(<8 x i16> %a, i16 %bs) {\n  %i = insertelement <8 x i16> poison, i16 %bs, i64 0\n  %b = shufflevector <8 x i16> %i, <8 x i16> poison, <8 x i32> zeroinitializer\n  %r = udiv <8 x i16> %a, %b\n  ret <8 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <8 x i16> poison, i16 %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <8 x i16> %i, <8 x i16> poison, <8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = udiv <8 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i16> %r"
 },
 {
  "instr": "udiv",
  "ty": "<8 x i16>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 6,
  "lat": 4,
  "sizelat": 4,
  "size": 8,
  "gisize": 8,
  "extrasize": 0,
  "asm": "mov w8, #9363                       // =0x2493\ndup v1.8h, w8\numull2 v2.4s, v0.8h, v1.8h\numull v1.4s, v0.4h, v1.4h\nuzp2 v1.8h, v1.8h, v2.8h\nsub v0.8h, v0.8h, v1.8h\nusra v1.8h, v0.8h, #1\nushr v0.8h, v1.8h, #2\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\numull2 v2.4s, v0.8h, v1.8h\numull v1.4s, v0.4h, v1.4h\nuzp2 v1.8h, v1.8h, v2.8h\nsub v0.8h, v0.8h, v1.8h\nusra v1.8h, v0.8h, #1\nushr v0.8h, v1.8h, #2\nret",
  "ll": "define <8 x i16> @test(<8 x i16> %a) {\n  %r = udiv <8 x i16> %a, splat (i16 7)\n  ret <8 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = udiv <8 x i16> %a, splat (i16 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i16> %r"
 },
 {
  "instr": "udiv",
  "ty": "<16 x i16>",
  "variant": "binop",
  "codesize": 4,
  "thru": 168,
  "lat": 4,
  "sizelat": 4,
  "size": 64,
  "gisize": 64,
  "extrasize": 0,
  "asm": "umov w8, v2.h[1]\numov w9, v0.h[1]\numov w10, v0.h[0]\numov w11, v0.h[2]\numov w12, v0.h[3]\numov w13, v0.h[4]\numov w14, v0.h[5]\numov w15, v0.h[6]\numov w16, v0.h[7]\numov w17, v1.h[1]\numov w18, v1.h[0]\numov w0, v1.h[2]\nudiv w8, w9, w8\numov w9, v2.h[0]\numov w1, v1.h[3]\numov w2, v1.h[4]\numov w3, v1.h[5]\nudiv w9, w10, w9\numov w10, v2.h[2]\nudiv w10, w11, w10\numov w11, v2.h[3]\nfmov s0, w9\numov w9, v3.h[6]\nmov v0.h[1], w8\nudiv w11, w12, w11\numov w12, v2.h[4]\nmov v0.h[2], w10\numov w10, v1.h[6]\nudiv w12, w13, w12\numov w13, v2.h[5]\nmov v0.h[3], w11\numov w11, v1.h[7]\nudiv w13, w14, w13\numov w14, v2.h[6]\nmov v0.h[4], w12\nudiv w14, w15, w14\numov w15, v2.h[7]\nmov v0.h[5], w13\nudiv w15, w16, w15\numov w16, v3.h[1]\nmov v0.h[6], w14\nudiv w16, w17, w16\numov w17, v3.h[0]\nmov v0.h[7], w15\nudiv w17, w18, w17\numov w18, v3.h[2]\nudiv w18, w0, w18\numov w0, v3.h[3]\nfmov s2, w17\nmov v2.h[1], w16\nudiv w0, w1, w0\numov w1, v3.h[4]\nmov v2.h[2], w18\nudiv w1, w2, w1\numov w2, v3.h[5]\nmov v2.h[3], w0\nudiv w8, w3, w2\nmov v2.h[4], w1\nudiv w9, w10, w9\numov w10, v3.h[7]\nmov v2.h[5], w8\nudiv w8, w11, w10\nmov v2.h[6], w9\nmov v2.h[7], w8\nmov v1.16b, v2.16b\nret",
  "giasm": "umov w8, v0.h[0]\numov w9, v2.h[0]\numov w16, v2.h[7]\numov w17, v3.h[0]\numov w18, v3.h[1]\numov w0, v3.h[2]\numov w1, v3.h[3]\numov w2, v3.h[4]\numov w3, v3.h[5]\nudiv w14, w8, w9\numov w8, v0.h[1]\numov w9, v2.h[1]\nudiv w15, w8, w9\numov w8, v0.h[2]\numov w9, v2.h[2]\nudiv w13, w8, w9\numov w8, v0.h[3]\numov w9, v2.h[3]\nudiv w12, w8, w9\numov w8, v0.h[4]\numov w9, v2.h[4]\nudiv w11, w8, w9\numov w8, v0.h[5]\numov w9, v2.h[5]\nudiv w10, w8, w9\numov w8, v0.h[6]\numov w9, v2.h[6]\nudiv w9, w8, w9\numov w8, v0.h[7]\nfmov s0, w14\nmov v0.h[1], w15\numov w15, v1.h[6]\nmov v0.h[2], w13\nudiv w8, w8, w16\numov w16, v1.h[0]\nmov v0.h[3], w12\numov w12, v1.h[7]\nmov v0.h[4], w11\nudiv w16, w16, w17\numov w17, v1.h[1]\nmov v0.h[5], w10\nmov v0.h[6], w9\nudiv w17, w17, w18\numov w18, v1.h[2]\nfmov s2, w16\numov w16, v3.h[6]\nmov v0.h[7], w8\nudiv w18, w18, w0\numov w0, v1.h[3]\nmov v2.h[1], w17\nudiv w0, w0, w1\numov w1, v1.h[4]\nmov v2.h[2], w18\nudiv w1, w1, w2\numov w2, v1.h[5]\nmov v2.h[3], w0\nudiv w14, w2, w3\nmov v2.h[4], w1\nudiv w13, w15, w16\numov w15, v3.h[7]\nmov v2.h[5], w14\nudiv w10, w12, w15\nmov v2.h[6], w13\nmov v2.h[7], w10\nmov v1.16b, v2.16b\nret",
  "ll": "define <16 x i16> @test(<16 x i16> %a, <16 x i16> %b) {\n  %r = udiv <16 x i16> %a, %b\n  ret <16 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = udiv <16 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i16> %r"
 },
 {
  "instr": "udiv",
  "ty": "<16 x i16>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 12,
  "lat": 4,
  "sizelat": 4,
  "size": 68,
  "gisize": 32,
  "extrasize": 0,
  "asm": "umov w10, v0.h[0]\numov w12, v1.h[0]\nmov w8, #18725                      // =0x4925\nmovk w8, #9362, lsl #16\numov w11, v0.h[1]\numov w13, v1.h[1]\nmov w9, #43691                      // =0xaaab\numov w14, v0.h[2]\numov w15, v1.h[2]\nmovk w9, #10922, lsl #16\numull x10, w10, w8\numull x12, w12, w8\numull x11, w11, w9\numull x13, w13, w9\nlsr x10, x10, #32\nlsr x12, x12, #32\numull x14, w14, w8\nfmov s2, w10\nlsr x11, x11, #32\numov w10, v0.h[3]\nfmov s3, w12\nlsr x13, x13, #32\numull x12, w15, w8\numov w15, v1.h[3]\nmov v2.h[1], w11\nlsr x11, x14, #32\nmov v3.h[1], w13\numov w13, v0.h[4]\nlsr x12, x12, #32\numull x10, w10, w9\numull x14, w15, w9\numov w15, v1.h[4]\nmov v2.h[2], w11\nmov v3.h[2], w12\nlsr x10, x10, #32\numull x11, w13, w8\nlsr x13, x14, #32\numov w12, v0.h[5]\numull x14, w15, w8\numov w15, v1.h[5]\nmov v2.h[3], w10\nlsr x10, x11, #32\nmov v3.h[3], w13\nlsr x13, x14, #32\numull x11, w12, w9\numov w12, v0.h[6]\numull x14, w15, w9\numov w15, v1.h[6]\nmov v2.h[4], w10\numov w10, v0.h[7]\nmov v3.h[4], w13\nlsr x11, x11, #32\nlsr x13, x14, #32\numull x12, w12, w8\numov w14, v1.h[7]\numull x8, w15, w8\nmov v2.h[5], w11\numull x10, w10, w9\nmov v3.h[5], w13\nlsr x11, x12, #32\nlsr x8, x8, #32\numull x9, w14, w9\nmov v2.h[6], w11\nmov v3.h[6], w8\nlsr x8, x10, #32\nlsr x9, x9, #32\nmov v2.h[7], w8\nmov v3.h[7], w9\nmov v0.16b, v2.16b\nmov v1.16b, v3.16b\nret",
  "giasm": "adrp x8, .LCPI0_1\nmov d3, v0.d[1]\nmov d5, v1.d[1]\nldr d2, [x8, :lo12:.LCPI0_1]\nadrp x8, .LCPI0_0\numull v4.4s, v0.4h, v2.4h\numull v6.4s, v1.4h, v2.4h\numull v3.4s, v3.4h, v2.4h\numull v2.4s, v5.4h, v2.4h\nshrn v4.4h, v4.4s, #16\nshrn v5.4h, v6.4s, #16\nmov v6.16b, v4.16b\nmov v7.16b, v5.16b\nshrn2 v4.8h, v3.4s, #16\nshrn2 v5.8h, v2.4s, #16\nshrn2 v6.8h, v3.4s, #16\nshrn2 v7.8h, v2.4s, #16\nsub v0.8h, v0.8h, v6.8h\nsub v1.8h, v1.8h, v7.8h\nldr d6, [x8, :lo12:.LCPI0_0]\nmov d7, v0.d[1]\nmov d16, v1.d[1]\numull v0.4s, v0.4h, v6.4h\numull v1.4s, v1.4h, v6.4h\numull v7.4s, v7.4h, v6.4h\numull v6.4s, v16.4h, v6.4h\nshrn v0.4h, v0.4s, #16\nshrn v1.4h, v1.4s, #16\nshrn2 v0.8h, v7.4s, #16\nshrn2 v1.8h, v6.4s, #16\nadd v0.8h, v0.8h, v4.8h\nadd v1.8h, v1.8h, v5.8h\nushr v0.8h, v0.8h, #2\nushr v1.8h, v1.8h, #2\nret",
  "ll": "define <16 x i16> @test(<16 x i16> %a) {\n  %r = udiv <16 x i16> %a, <i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6>\n  ret <16 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = udiv <16 x i16> %a, <i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6>\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i16> %r"
 },
 {
  "instr": "udiv",
  "ty": "<16 x i16>",
  "variant": "binopsplat",
  "codesize": 7,
  "thru": 172,
  "lat": 8,
  "sizelat": 8,
  "size": 49,
  "gisize": 57,
  "extrasize": 0,
  "asm": "umov w18, v1.h[0]\nand w8, w0, #0xffff\numov w10, v0.h[0]\numov w17, v1.h[1]\numov w9, v0.h[1]\numov w0, v1.h[2]\numov w11, v0.h[2]\numov w1, v1.h[3]\numov w12, v0.h[3]\numov w13, v0.h[4]\numov w14, v0.h[5]\numov w15, v0.h[6]\nudiv w18, w18, w8\numov w16, v0.h[7]\numov w2, v1.h[4]\numov w3, v1.h[5]\nudiv w10, w10, w8\nfmov s2, w18\nudiv w17, w17, w8\nfmov s0, w10\numov w10, v1.h[6]\nudiv w9, w9, w8\nmov v2.h[1], w17\nudiv w0, w0, w8\nmov v0.h[1], w9\nudiv w11, w11, w8\nmov v2.h[2], w0\nudiv w1, w1, w8\nmov v0.h[2], w11\numov w11, v1.h[7]\nudiv w12, w12, w8\nmov v2.h[3], w1\nudiv w2, w2, w8\nmov v0.h[3], w12\nudiv w13, w13, w8\nmov v2.h[4], w2\nudiv w9, w3, w8\nmov v0.h[4], w13\nudiv w14, w14, w8\nmov v2.h[5], w9\nudiv w10, w10, w8\nmov v0.h[5], w14\nudiv w15, w15, w8\nmov v2.h[6], w10\nudiv w16, w16, w8\nmov v0.h[6], w15\nudiv w8, w11, w8\nmov v0.h[7], w16\nmov v2.h[7], w8\nmov v1.16b, v2.16b\nret",
  "giasm": "dup v2.8h, w0\numov w8, v0.h[0]\numov w5, v1.h[0]\numov w10, v0.h[1]\numov w12, v0.h[2]\numov w14, v0.h[3]\numov w16, v0.h[4]\numov w18, v0.h[5]\numov w1, v0.h[6]\numov w9, v2.h[0]\numov w11, v2.h[1]\numov w13, v2.h[2]\numov w15, v2.h[3]\numov w17, v2.h[4]\numov w0, v2.h[5]\numov w2, v2.h[6]\numov w4, v2.h[7]\numov w3, v0.h[7]\nudiv w8, w8, w9\nudiv w9, w5, w9\numov w5, v1.h[1]\nfmov s0, w8\nudiv w10, w10, w11\nfmov s2, w9\numov w9, v1.h[6]\nudiv w11, w5, w11\numov w5, v1.h[2]\nmov v0.h[1], w10\numov w10, v1.h[7]\nudiv w12, w12, w13\nmov v2.h[1], w11\nudiv w13, w5, w13\numov w5, v1.h[3]\nmov v0.h[2], w12\nudiv w14, w14, w15\nmov v2.h[2], w13\nudiv w15, w5, w15\numov w5, v1.h[4]\nmov v0.h[3], w14\nudiv w16, w16, w17\nmov v2.h[3], w15\nudiv w17, w5, w17\numov w5, v1.h[5]\nmov v0.h[4], w16\nudiv w8, w5, w0\nmov v2.h[4], w17\nudiv w18, w18, w0\nmov v2.h[5], w8\nudiv w9, w9, w2\nmov v0.h[5], w18\nudiv w1, w1, w2\nmov v2.h[6], w9\nudiv w8, w10, w4\nmov v0.h[6], w1\nudiv w3, w3, w4\nmov v2.h[7], w8\nmov v1.16b, v2.16b\nmov v0.h[7], w3\nret",
  "ll": "define <16 x i16> @test(<16 x i16> %a, i16 %bs) {\n  %i = insertelement <16 x i16> poison, i16 %bs, i64 0\n  %b = shufflevector <16 x i16> %i, <16 x i16> poison, <16 x i32> zeroinitializer\n  %r = udiv <16 x i16> %a, %b\n  ret <16 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <16 x i16> poison, i16 %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <16 x i16> %i, <16 x i16> poison, <16 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = udiv <16 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i16> %r"
 },
 {
  "instr": "udiv",
  "ty": "<16 x i16>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 12,
  "lat": 4,
  "sizelat": 4,
  "size": 66,
  "gisize": 20,
  "extrasize": 0,
  "asm": "umov w9, v0.h[0]\numov w11, v1.h[0]\nmov w8, #18725                      // =0x4925\nmovk w8, #9362, lsl #16\numov w10, v0.h[1]\numov w12, v1.h[1]\numov w13, v0.h[2]\numov w14, v1.h[2]\numull x9, w9, w8\numull x11, w11, w8\numull x10, w10, w8\numull x12, w12, w8\nlsr x9, x9, #32\nlsr x11, x11, #32\numull x13, w13, w8\nfmov s2, w9\nlsr x10, x10, #32\numov w9, v0.h[3]\nfmov s3, w11\nlsr x12, x12, #32\numull x11, w14, w8\numov w14, v1.h[3]\nmov v2.h[1], w10\nlsr x10, x13, #32\nmov v3.h[1], w12\numov w12, v0.h[4]\nlsr x11, x11, #32\numull x9, w9, w8\numull x13, w14, w8\numov w14, v1.h[4]\nmov v2.h[2], w10\nmov v3.h[2], w11\nlsr x9, x9, #32\numull x10, w12, w8\nlsr x12, x13, #32\numov w11, v0.h[5]\numull x13, w14, w8\numov w14, v1.h[5]\nmov v2.h[3], w9\nlsr x9, x10, #32\nmov v3.h[3], w12\nlsr x12, x13, #32\numull x10, w11, w8\numov w11, v0.h[6]\numull x13, w14, w8\numov w14, v1.h[6]\nmov v2.h[4], w9\numov w9, v0.h[7]\nmov v3.h[4], w12\nlsr x10, x10, #32\nlsr x12, x13, #32\numull x11, w11, w8\numull x13, w14, w8\numov w14, v1.h[7]\nmov v2.h[5], w10\numull x9, w9, w8\nmov v3.h[5], w12\nlsr x10, x11, #32\nlsr x11, x13, #32\numull x8, w14, w8\nlsr x9, x9, #32\nmov v2.h[6], w10\nmov v3.h[6], w11\nlsr x8, x8, #32\nmov v2.h[7], w9\nmov v3.h[7], w8\nmov v0.16b, v2.16b\nmov v1.16b, v3.16b\nret",
  "giasm": "adrp x8, .LCPI0_0\nmov d3, v0.d[1]\nmov d5, v1.d[1]\nldr d2, [x8, :lo12:.LCPI0_0]\numull v4.4s, v0.4h, v2.4h\numull v6.4s, v1.4h, v2.4h\numull v3.4s, v3.4h, v2.4h\numull v2.4s, v5.4h, v2.4h\nshrn v4.4h, v4.4s, #16\nshrn v5.4h, v6.4s, #16\nmov v6.16b, v4.16b\nmov v7.16b, v5.16b\nshrn2 v4.8h, v3.4s, #16\nshrn2 v5.8h, v2.4s, #16\nshrn2 v6.8h, v3.4s, #16\nshrn2 v7.8h, v2.4s, #16\nsub v0.8h, v0.8h, v6.8h\nsub v1.8h, v1.8h, v7.8h\nusra v4.8h, v0.8h, #1\nusra v5.8h, v1.8h, #1\nushr v0.8h, v4.8h, #2\nushr v1.8h, v5.8h, #2\nret",
  "ll": "define <16 x i16> @test(<16 x i16> %a) {\n  %r = udiv <16 x i16> %a, splat (i16 7)\n  ret <16 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = udiv <16 x i16> %a, splat (i16 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i16> %r"
 },
 {
  "instr": "udiv",
  "ty": "<2 x i32>",
  "variant": "binop",
  "codesize": 4,
  "thru": 28,
  "lat": 4,
  "sizelat": 4,
  "size": 8,
  "gisize": 8,
  "extrasize": 0,
  "asm": "fmov w8, s1\nfmov w9, s0\nmov w10, v0.s[1]\nudiv w8, w9, w8\nmov w9, v1.s[1]\nudiv w9, w10, w9\nfmov s0, w8\nmov v0.s[1], w9\nret",
  "giasm": "fmov w8, s0\nfmov w9, s1\nmov w10, v1.s[1]\nudiv w8, w8, w9\nmov w9, v0.s[1]\nudiv w9, w9, w10\nmov v0.s[0], w8\nmov v0.s[1], w9\nret",
  "ll": "define <2 x i32> @test(<2 x i32> %a, <2 x i32> %b) {\n  %r = udiv <2 x i32> %a, %b\n  ret <2 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = udiv <2 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i32> %r"
 },
 {
  "instr": "udiv",
  "ty": "<2 x i32>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 5,
  "lat": 4,
  "sizelat": 4,
  "size": 11,
  "gisize": 11,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nmovi v2.2s, #128, lsl #24\nldr d1, [x8, :lo12:.LCPI0_0]\numull v1.2d, v0.2s, v1.2s\nfneg d2, d2\nshrn v1.2s, v1.2d, #32\nsub v0.2s, v0.2s, v1.2s\numull v0.2d, v0.2s, v2.2s\nshrn v0.2s, v0.2d, #32\nadd v0.2s, v0.2s, v1.2s\nushr v0.2s, v0.2s, #2\nret",
  "giasm": "adrp x8, .LCPI0_1\nldr d1, [x8, :lo12:.LCPI0_1]\nadrp x8, .LCPI0_0\nldr d2, [x8, :lo12:.LCPI0_0]\numull v1.2d, v0.2s, v1.2s\nshrn v1.2s, v1.2d, #32\nsub v0.2s, v0.2s, v1.2s\numull v0.2d, v0.2s, v2.2s\nshrn v0.2s, v0.2d, #32\nadd v0.2s, v0.2s, v1.2s\nushr v0.2s, v0.2s, #2\nret",
  "ll": "define <2 x i32> @test(<2 x i32> %a) {\n  %r = udiv <2 x i32> %a, <i32 7, i32 6>\n  ret <2 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = udiv <2 x i32> %a, <i32 7, i32 6>\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i32> %r"
 },
 {
  "instr": "udiv",
  "ty": "<2 x i32>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 31,
  "lat": 7,
  "sizelat": 7,
  "size": 6,
  "gisize": 9,
  "extrasize": 0,
  "asm": "fmov w8, s0\nmov w9, v0.s[1]\nudiv w8, w8, w0\nudiv w9, w9, w0\nfmov s0, w8\nmov v0.s[1], w9\nret",
  "giasm": "dup v1.2s, w0\nfmov w8, s0\nfmov w9, s1\nmov w10, v1.s[1]\nudiv w8, w8, w9\nmov w9, v0.s[1]\nudiv w9, w9, w10\nmov v0.s[0], w8\nmov v0.s[1], w9\nret",
  "ll": "define <2 x i32> @test(<2 x i32> %a, i32 %bs) {\n  %i = insertelement <2 x i32> poison, i32 %bs, i64 0\n  %b = shufflevector <2 x i32> %i, <2 x i32> poison, <2 x i32> zeroinitializer\n  %r = udiv <2 x i32> %a, %b\n  ret <2 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <2 x i32> poison, i32 %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <2 x i32> %i, <2 x i32> poison, <2 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = udiv <2 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i32> %r"
 },
 {
  "instr": "udiv",
  "ty": "<2 x i32>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 5,
  "lat": 4,
  "sizelat": 4,
  "size": 10,
  "gisize": 7,
  "extrasize": 0,
  "asm": "mov w8, #18725                      // =0x4925\nmovk w8, #9362, lsl #16\ndup v1.2s, w8\numull v1.2d, v0.2s, v1.2s\nshrn v1.2s, v1.2d, #32\nsub v0.2s, v0.2s, v1.2s\nushll v0.2d, v0.2s, #0\nshrn v0.2s, v0.2d, #1\nadd v0.2s, v0.2s, v1.2s\nushr v0.2s, v0.2s, #2\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr d1, [x8, :lo12:.LCPI0_0]\numull v1.2d, v0.2s, v1.2s\nshrn v1.2s, v1.2d, #32\nsub v0.2s, v0.2s, v1.2s\nusra v1.2s, v0.2s, #1\nushr v0.2s, v1.2s, #2\nret",
  "ll": "define <2 x i32> @test(<2 x i32> %a) {\n  %r = udiv <2 x i32> %a, splat (i32 7)\n  ret <2 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = udiv <2 x i32> %a, splat (i32 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i32> %r"
 },
 {
  "instr": "udiv",
  "ty": "<4 x i32>",
  "variant": "binop",
  "codesize": 4,
  "thru": 48,
  "lat": 4,
  "sizelat": 4,
  "size": 16,
  "gisize": 16,
  "extrasize": 0,
  "asm": "mov w8, v1.s[1]\nmov w9, v0.s[1]\nfmov w10, s0\nmov w11, v0.s[2]\nmov w12, v0.s[3]\nudiv w8, w9, w8\nfmov w9, s1\nudiv w9, w10, w9\nmov w10, v1.s[2]\nudiv w10, w11, w10\nmov w11, v1.s[3]\nfmov s0, w9\nmov v0.s[1], w8\nudiv w8, w12, w11\nmov v0.s[2], w10\nmov v0.s[3], w8\nret",
  "giasm": "fmov w8, s0\nfmov w9, s1\nmov w10, v1.s[1]\nmov w11, v1.s[2]\nmov w12, v1.s[3]\nudiv w8, w8, w9\nmov w9, v0.s[1]\nudiv w9, w9, w10\nmov w10, v0.s[2]\nudiv w10, w10, w11\nmov w11, v0.s[3]\nmov v0.s[0], w8\nmov v0.s[1], w9\nudiv w8, w11, w12\nmov v0.s[2], w10\nmov v0.s[3], w8\nret",
  "ll": "define <4 x i32> @test(<4 x i32> %a, <4 x i32> %b) {\n  %r = udiv <4 x i32> %a, %b\n  ret <4 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = udiv <4 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i32> %r"
 },
 {
  "instr": "udiv",
  "ty": "<4 x i32>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 6,
  "lat": 4,
  "sizelat": 4,
  "size": 13,
  "gisize": 13,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nmovi v3.4s, #128, lsl #24\nldr q1, [x8, :lo12:.LCPI0_0]\numull2 v2.2d, v0.4s, v1.4s\numull v1.2d, v0.2s, v1.2s\nuzp2 v1.4s, v1.4s, v2.4s\nfneg v2.2d, v3.2d\nsub v0.4s, v0.4s, v1.4s\numull2 v3.2d, v0.4s, v2.4s\numull v0.2d, v0.2s, v2.2s\nuzp2 v0.4s, v0.4s, v3.4s\nadd v0.4s, v0.4s, v1.4s\nushr v0.4s, v0.4s, #2\nret",
  "giasm": "adrp x8, .LCPI0_1\nldr q1, [x8, :lo12:.LCPI0_1]\nadrp x8, .LCPI0_0\numull2 v2.2d, v0.4s, v1.4s\numull v1.2d, v0.2s, v1.2s\nuzp2 v1.4s, v1.4s, v2.4s\nldr q2, [x8, :lo12:.LCPI0_0]\nsub v0.4s, v0.4s, v1.4s\numull2 v3.2d, v0.4s, v2.4s\numull v0.2d, v0.2s, v2.2s\nuzp2 v0.4s, v0.4s, v3.4s\nadd v0.4s, v0.4s, v1.4s\nushr v0.4s, v0.4s, #2\nret",
  "ll": "define <4 x i32> @test(<4 x i32> %a) {\n  %r = udiv <4 x i32> %a, <i32 7, i32 6, i32 7, i32 6>\n  ret <4 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = udiv <4 x i32> %a, <i32 7, i32 6, i32 7, i32 6>\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i32> %r"
 },
 {
  "instr": "udiv",
  "ty": "<4 x i32>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 51,
  "lat": 7,
  "sizelat": 7,
  "size": 12,
  "gisize": 17,
  "extrasize": 0,
  "asm": "fmov w9, s0\nmov w8, v0.s[1]\nmov w10, v0.s[2]\nmov w11, v0.s[3]\nudiv w9, w9, w0\nudiv w8, w8, w0\nfmov s0, w9\nudiv w10, w10, w0\nmov v0.s[1], w8\nudiv w8, w11, w0\nmov v0.s[2], w10\nmov v0.s[3], w8\nret",
  "giasm": "dup v1.4s, w0\nfmov w8, s0\nfmov w9, s1\nmov w10, v1.s[1]\nmov w11, v1.s[2]\nmov w12, v1.s[3]\nudiv w8, w8, w9\nmov w9, v0.s[1]\nudiv w9, w9, w10\nmov w10, v0.s[2]\nudiv w10, w10, w11\nmov w11, v0.s[3]\nmov v0.s[0], w8\nmov v0.s[1], w9\nudiv w8, w11, w12\nmov v0.s[2], w10\nmov v0.s[3], w8\nret",
  "ll": "define <4 x i32> @test(<4 x i32> %a, i32 %bs) {\n  %i = insertelement <4 x i32> poison, i32 %bs, i64 0\n  %b = shufflevector <4 x i32> %i, <4 x i32> poison, <4 x i32> zeroinitializer\n  %r = udiv <4 x i32> %a, %b\n  ret <4 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <4 x i32> poison, i32 %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <4 x i32> %i, <4 x i32> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = udiv <4 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i32> %r"
 },
 {
  "instr": "udiv",
  "ty": "<4 x i32>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 6,
  "lat": 4,
  "sizelat": 4,
  "size": 9,
  "gisize": 8,
  "extrasize": 0,
  "asm": "mov w8, #18725                      // =0x4925\nmovk w8, #9362, lsl #16\ndup v1.4s, w8\numull2 v2.2d, v0.4s, v1.4s\numull v1.2d, v0.2s, v1.2s\nuzp2 v1.4s, v1.4s, v2.4s\nsub v0.4s, v0.4s, v1.4s\nusra v1.4s, v0.4s, #1\nushr v0.4s, v1.4s, #2\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\numull2 v2.2d, v0.4s, v1.4s\numull v1.2d, v0.2s, v1.2s\nuzp2 v1.4s, v1.4s, v2.4s\nsub v0.4s, v0.4s, v1.4s\nusra v1.4s, v0.4s, #1\nushr v0.4s, v1.4s, #2\nret",
  "ll": "define <4 x i32> @test(<4 x i32> %a) {\n  %r = udiv <4 x i32> %a, splat (i32 7)\n  ret <4 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = udiv <4 x i32> %a, splat (i32 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i32> %r"
 },
 {
  "instr": "udiv",
  "ty": "<8 x i32>",
  "variant": "binop",
  "codesize": 4,
  "thru": 88,
  "lat": 4,
  "sizelat": 4,
  "size": 32,
  "gisize": 32,
  "extrasize": 0,
  "asm": "mov w8, v2.s[1]\nmov w9, v0.s[1]\nfmov w10, s0\nmov w11, v0.s[2]\nmov w12, v0.s[3]\nmov w13, v1.s[1]\nfmov w14, s1\nmov w15, v1.s[2]\nmov w16, v1.s[3]\nudiv w8, w9, w8\nfmov w9, s2\nudiv w9, w10, w9\nmov w10, v2.s[2]\nudiv w10, w11, w10\nmov w11, v2.s[3]\nfmov s0, w9\nmov v0.s[1], w8\nudiv w11, w12, w11\nmov w12, v3.s[1]\nmov v0.s[2], w10\nudiv w12, w13, w12\nfmov w13, s3\nmov v0.s[3], w11\nudiv w13, w14, w13\nmov w14, v3.s[2]\nudiv w14, w15, w14\nmov w15, v3.s[3]\nfmov s1, w13\nmov v1.s[1], w12\nudiv w8, w16, w15\nmov v1.s[2], w14\nmov v1.s[3], w8\nret",
  "giasm": "fmov w8, s0\nfmov w9, s2\nmov w10, v2.s[1]\nmov w11, v2.s[2]\nmov w12, v2.s[3]\nfmov w13, s3\nmov w14, v3.s[1]\nmov w15, v3.s[2]\nmov w16, v3.s[3]\nudiv w8, w8, w9\nmov w9, v0.s[1]\nudiv w9, w9, w10\nmov w10, v0.s[2]\nudiv w10, w10, w11\nmov w11, v0.s[3]\nmov v0.s[0], w8\nmov v0.s[1], w9\nudiv w11, w11, w12\nfmov w12, s1\nmov v0.s[2], w10\nudiv w12, w12, w13\nmov w13, v1.s[1]\nmov v0.s[3], w11\nudiv w13, w13, w14\nmov w14, v1.s[2]\nudiv w14, w14, w15\nmov w15, v1.s[3]\nmov v1.s[0], w12\nmov v1.s[1], w13\nudiv w8, w15, w16\nmov v1.s[2], w14\nmov v1.s[3], w8\nret",
  "ll": "define <8 x i32> @test(<8 x i32> %a, <8 x i32> %b) {\n  %r = udiv <8 x i32> %a, %b\n  ret <8 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = udiv <8 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i32> %r"
 },
 {
  "instr": "udiv",
  "ty": "<8 x i32>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 12,
  "lat": 4,
  "sizelat": 4,
  "size": 22,
  "gisize": 32,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nmovi v6.4s, #128, lsl #24\nldr q2, [x8, :lo12:.LCPI0_0]\numull2 v3.2d, v0.4s, v2.4s\numull v4.2d, v0.2s, v2.2s\numull2 v5.2d, v1.4s, v2.4s\numull v2.2d, v1.2s, v2.2s\nuzp2 v3.4s, v4.4s, v3.4s\nfneg v4.2d, v6.2d\nuzp2 v2.4s, v2.4s, v5.4s\nsub v0.4s, v0.4s, v3.4s\nsub v1.4s, v1.4s, v2.4s\numull2 v5.2d, v0.4s, v4.4s\numull v0.2d, v0.2s, v4.2s\numull2 v6.2d, v1.4s, v4.4s\numull v1.2d, v1.2s, v4.2s\nuzp2 v0.4s, v0.4s, v5.4s\nuzp2 v1.4s, v1.4s, v6.4s\nadd v0.4s, v0.4s, v3.4s\nadd v1.4s, v1.4s, v2.4s\nushr v0.4s, v0.4s, #2\nushr v1.4s, v1.4s, #2\nret",
  "giasm": "adrp x8, .LCPI0_1\nmov d3, v0.d[1]\nmov d5, v1.d[1]\nldr d2, [x8, :lo12:.LCPI0_1]\nadrp x8, .LCPI0_0\numull v4.2d, v0.2s, v2.2s\numull v6.2d, v1.2s, v2.2s\numull v3.2d, v3.2s, v2.2s\numull v2.2d, v5.2s, v2.2s\nshrn v4.2s, v4.2d, #32\nshrn v5.2s, v6.2d, #32\nmov v6.16b, v4.16b\nmov v7.16b, v5.16b\nshrn2 v4.4s, v3.2d, #32\nshrn2 v5.4s, v2.2d, #32\nshrn2 v6.4s, v3.2d, #32\nshrn2 v7.4s, v2.2d, #32\nsub v0.4s, v0.4s, v6.4s\nsub v1.4s, v1.4s, v7.4s\nldr d6, [x8, :lo12:.LCPI0_0]\nmov d7, v0.d[1]\nmov d16, v1.d[1]\numull v0.2d, v0.2s, v6.2s\numull v1.2d, v1.2s, v6.2s\numull v7.2d, v7.2s, v6.2s\numull v6.2d, v16.2s, v6.2s\nshrn v0.2s, v0.2d, #32\nshrn v1.2s, v1.2d, #32\nshrn2 v0.4s, v7.2d, #32\nshrn2 v1.4s, v6.2d, #32\nadd v0.4s, v0.4s, v4.4s\nadd v1.4s, v1.4s, v5.4s\nushr v0.4s, v0.4s, #2\nushr v1.4s, v1.4s, #2\nret",
  "ll": "define <8 x i32> @test(<8 x i32> %a) {\n  %r = udiv <8 x i32> %a, <i32 7, i32 6, i32 7, i32 6, i32 7, i32 6, i32 7, i32 6>\n  ret <8 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = udiv <8 x i32> %a, <i32 7, i32 6, i32 7, i32 6, i32 7, i32 6, i32 7, i32 6>\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i32> %r"
 },
 {
  "instr": "udiv",
  "ty": "<8 x i32>",
  "variant": "binopsplat",
  "codesize": 7,
  "thru": 92,
  "lat": 8,
  "sizelat": 8,
  "size": 24,
  "gisize": 29,
  "extrasize": 0,
  "asm": "fmov w9, s0\nfmov w13, s1\nmov w8, v0.s[1]\nmov w12, v1.s[1]\nmov w10, v0.s[2]\nmov w14, v1.s[2]\nmov w11, v0.s[3]\nmov w15, v1.s[3]\nudiv w9, w9, w0\nudiv w13, w13, w0\nfmov s0, w9\nudiv w8, w8, w0\nfmov s1, w13\nudiv w12, w12, w0\nmov v0.s[1], w8\nudiv w10, w10, w0\nmov v1.s[1], w12\nudiv w14, w14, w0\nmov v0.s[2], w10\nudiv w11, w11, w0\nmov v1.s[2], w14\nudiv w8, w15, w0\nmov v0.s[3], w11\nmov v1.s[3], w8\nret",
  "giasm": "dup v2.4s, w0\nfmov w8, s0\nfmov w16, s1\nmov w10, v0.s[1]\nmov w12, v0.s[2]\nmov w14, v0.s[3]\nfmov w9, s2\nmov w11, v2.s[1]\nmov w13, v2.s[2]\nmov w15, v2.s[3]\nudiv w8, w8, w9\nudiv w9, w16, w9\nmov w16, v1.s[1]\nmov v0.s[0], w8\nudiv w10, w10, w11\nudiv w11, w16, w11\nmov w16, v1.s[2]\nmov v0.s[1], w10\nudiv w12, w12, w13\nudiv w13, w16, w13\nmov w16, v1.s[3]\nmov v1.s[0], w9\nmov v0.s[2], w12\nmov v1.s[1], w11\nudiv w14, w14, w15\nmov v1.s[2], w13\nudiv w8, w16, w15\nmov v0.s[3], w14\nmov v1.s[3], w8\nret",
  "ll": "define <8 x i32> @test(<8 x i32> %a, i32 %bs) {\n  %i = insertelement <8 x i32> poison, i32 %bs, i64 0\n  %b = shufflevector <8 x i32> %i, <8 x i32> poison, <8 x i32> zeroinitializer\n  %r = udiv <8 x i32> %a, %b\n  ret <8 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <8 x i32> poison, i32 %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <8 x i32> %i, <8 x i32> poison, <8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = udiv <8 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i32> %r"
 },
 {
  "instr": "udiv",
  "ty": "<8 x i32>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 12,
  "lat": 4,
  "sizelat": 4,
  "size": 15,
  "gisize": 20,
  "extrasize": 0,
  "asm": "mov w8, #18725                      // =0x4925\nmovk w8, #9362, lsl #16\ndup v2.4s, w8\numull2 v3.2d, v0.4s, v2.4s\numull v4.2d, v0.2s, v2.2s\numull2 v5.2d, v1.4s, v2.4s\numull v2.2d, v1.2s, v2.2s\nuzp2 v3.4s, v4.4s, v3.4s\nuzp2 v2.4s, v2.4s, v5.4s\nsub v0.4s, v0.4s, v3.4s\nsub v1.4s, v1.4s, v2.4s\nusra v3.4s, v0.4s, #1\nusra v2.4s, v1.4s, #1\nushr v0.4s, v3.4s, #2\nushr v1.4s, v2.4s, #2\nret",
  "giasm": "adrp x8, .LCPI0_0\nmov d3, v0.d[1]\nmov d5, v1.d[1]\nldr d2, [x8, :lo12:.LCPI0_0]\numull v4.2d, v0.2s, v2.2s\numull v6.2d, v1.2s, v2.2s\numull v3.2d, v3.2s, v2.2s\numull v2.2d, v5.2s, v2.2s\nshrn v4.2s, v4.2d, #32\nshrn v5.2s, v6.2d, #32\nmov v6.16b, v4.16b\nmov v7.16b, v5.16b\nshrn2 v4.4s, v3.2d, #32\nshrn2 v5.4s, v2.2d, #32\nshrn2 v6.4s, v3.2d, #32\nshrn2 v7.4s, v2.2d, #32\nsub v0.4s, v0.4s, v6.4s\nsub v1.4s, v1.4s, v7.4s\nusra v4.4s, v0.4s, #1\nusra v5.4s, v1.4s, #1\nushr v0.4s, v4.4s, #2\nushr v1.4s, v5.4s, #2\nret",
  "ll": "define <8 x i32> @test(<8 x i32> %a) {\n  %r = udiv <8 x i32> %a, splat (i32 7)\n  ret <8 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = udiv <8 x i32> %a, splat (i32 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i32> %r"
 },
 {
  "instr": "udiv",
  "ty": "<2 x i64>",
  "variant": "binop",
  "codesize": 4,
  "thru": 28,
  "lat": 4,
  "sizelat": 4,
  "size": 8,
  "gisize": 8,
  "extrasize": 0,
  "asm": "fmov x8, d1\nfmov x9, d0\nmov x10, v0.d[1]\nudiv x8, x9, x8\nmov x9, v1.d[1]\nudiv x9, x10, x9\nfmov d0, x8\nmov v0.d[1], x9\nret",
  "giasm": "fmov x8, d0\nfmov x9, d1\nmov x10, v1.d[1]\nudiv x8, x8, x9\nmov x9, v0.d[1]\nudiv x9, x9, x10\nmov v0.d[0], x8\nmov v0.d[1], x9\nret",
  "ll": "define <2 x i64> @test(<2 x i64> %a, <2 x i64> %b) {\n  %r = udiv <2 x i64> %a, %b\n  ret <2 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = udiv <2 x i64> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i64> %r"
 },
 {
  "instr": "udiv",
  "ty": "<2 x i64>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 32,
  "lat": 4,
  "sizelat": 4,
  "size": 16,
  "gisize": 22,
  "extrasize": 0,
  "asm": "mov x8, #9363                       // =0x2493\nfmov x9, d0\nmov x10, v0.d[1]\nmovk x8, #37449, lsl #16\nmov x11, #-6148914691236517206      // =0xaaaaaaaaaaaaaaaa\nmovk x8, #18724, lsl #32\nmovk x11, #43691\nmovk x8, #9362, lsl #48\numulh x8, x9, x8\numulh x10, x10, x11\nsub x9, x9, x8\nadd x8, x8, x9, lsr #1\nlsr x9, x10, #2\nlsr x8, x8, #2\nfmov d0, x8\nmov v0.d[1], x9\nret",
  "giasm": "mov x8, #9363                       // =0x2493\nfmov x9, d0\nmov x10, #-6148914691236517206      // =0xaaaaaaaaaaaaaaaa\nmovk x8, #37449, lsl #16\nmovk x10, #43691\nmovk x8, #18724, lsl #32\nmovk x8, #9362, lsl #48\numulh x8, x9, x8\nmov x9, v0.d[1]\numulh x9, x9, x10\nmov v1.d[0], x8\nmov x8, #-9223372036854775808       // =0x8000000000000000\nmov v1.d[1], x9\nsub v0.2d, v0.2d, v1.2d\nfmov x9, d0\nmov x10, v0.d[1]\numulh x8, x9, x8\numulh x9, x10, xzr\nmov v0.d[0], x8\nmov v0.d[1], x9\nadd v0.2d, v0.2d, v1.2d\nushr v0.2d, v0.2d, #2\nret",
  "ll": "define <2 x i64> @test(<2 x i64> %a) {\n  %r = udiv <2 x i64> %a, <i64 7, i64 6>\n  ret <2 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = udiv <2 x i64> %a, <i64 7, i64 6>\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i64> %r"
 },
 {
  "instr": "udiv",
  "ty": "<2 x i64>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 31,
  "lat": 7,
  "sizelat": 7,
  "size": 6,
  "gisize": 9,
  "extrasize": 0,
  "asm": "fmov x8, d0\nmov x9, v0.d[1]\nudiv x8, x8, x0\nudiv x9, x9, x0\nfmov d0, x8\nmov v0.d[1], x9\nret",
  "giasm": "dup v1.2d, x0\nfmov x8, d0\nfmov x9, d1\nmov x10, v1.d[1]\nudiv x8, x8, x9\nmov x9, v0.d[1]\nudiv x9, x9, x10\nmov v0.d[0], x8\nmov v0.d[1], x9\nret",
  "ll": "define <2 x i64> @test(<2 x i64> %a, i64 %bs) {\n  %i = insertelement <2 x i64> poison, i64 %bs, i64 0\n  %b = shufflevector <2 x i64> %i, <2 x i64> poison, <2 x i32> zeroinitializer\n  %r = udiv <2 x i64> %a, %b\n  ret <2 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <2 x i64> poison, i64 %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <2 x i64> %i, <2 x i64> poison, <2 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = udiv <2 x i64> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i64> %r"
 },
 {
  "instr": "udiv",
  "ty": "<2 x i64>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 32,
  "lat": 4,
  "sizelat": 4,
  "size": 16,
  "gisize": 13,
  "extrasize": 0,
  "asm": "mov x8, #9363                       // =0x2493\nfmov x10, d0\nmov x9, v0.d[1]\nmovk x8, #37449, lsl #16\nmovk x8, #18724, lsl #32\nmovk x8, #9362, lsl #48\numulh x11, x10, x8\numulh x8, x9, x8\nsub x10, x10, x11\nadd x10, x11, x10, lsr #1\nsub x9, x9, x8\nadd x8, x8, x9, lsr #1\nlsr x9, x10, #2\nfmov d0, x9\nlsr x8, x8, #2\nmov v0.d[1], x8\nret",
  "giasm": "mov x8, #9363                       // =0x2493\nfmov x9, d0\nmov x10, v0.d[1]\nmovk x8, #37449, lsl #16\nmovk x8, #18724, lsl #32\nmovk x8, #9362, lsl #48\numulh x9, x9, x8\numulh x8, x10, x8\nmov v1.d[0], x9\nmov v1.d[1], x8\nsub v0.2d, v0.2d, v1.2d\nusra v1.2d, v0.2d, #1\nushr v0.2d, v1.2d, #2\nret",
  "ll": "define <2 x i64> @test(<2 x i64> %a) {\n  %r = udiv <2 x i64> %a, splat (i64 7)\n  ret <2 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = udiv <2 x i64> %a, splat (i64 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i64> %r"
 },
 {
  "instr": "udiv",
  "ty": "<4 x i64>",
  "variant": "binop",
  "codesize": 4,
  "thru": 48,
  "lat": 4,
  "sizelat": 4,
  "size": 16,
  "gisize": 16,
  "extrasize": 0,
  "asm": "mov x8, v2.d[1]\nmov x9, v0.d[1]\nfmov x10, d0\nfmov x11, d1\nmov x12, v1.d[1]\nudiv x8, x9, x8\nfmov x9, d2\nudiv x9, x10, x9\nfmov x10, d3\nudiv x10, x11, x10\nmov x11, v3.d[1]\nfmov d0, x9\nmov v0.d[1], x8\nudiv x11, x12, x11\nfmov d1, x10\nmov v1.d[1], x11\nret",
  "giasm": "fmov x8, d0\nfmov x9, d2\nmov x10, v2.d[1]\nfmov x11, d3\nmov x12, v3.d[1]\nudiv x8, x8, x9\nmov x9, v0.d[1]\nudiv x9, x9, x10\nfmov x10, d1\nmov v0.d[0], x8\nudiv x10, x10, x11\nmov x11, v1.d[1]\nmov v0.d[1], x9\nudiv x11, x11, x12\nmov v1.d[0], x10\nmov v1.d[1], x11\nret",
  "ll": "define <4 x i64> @test(<4 x i64> %a, <4 x i64> %b) {\n  %r = udiv <4 x i64> %a, %b\n  ret <4 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = udiv <4 x i64> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i64> %r"
 },
 {
  "instr": "udiv",
  "ty": "<4 x i64>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 64,
  "lat": 4,
  "sizelat": 4,
  "size": 26,
  "gisize": 37,
  "extrasize": 0,
  "asm": "mov x8, #9363                       // =0x2493\nfmov x9, d0\nfmov x12, d1\nmovk x8, #37449, lsl #16\nmov x10, v0.d[1]\nmov x13, v1.d[1]\nmovk x8, #18724, lsl #32\nmov x14, #-6148914691236517206      // =0xaaaaaaaaaaaaaaaa\nmovk x8, #9362, lsl #48\nmovk x14, #43691\numulh x11, x9, x8\numulh x8, x12, x8\numulh x10, x10, x14\nsub x9, x9, x11\numulh x13, x13, x14\nadd x9, x11, x9, lsr #1\nsub x12, x12, x8\nadd x8, x8, x12, lsr #1\nlsr x9, x9, #2\nlsr x10, x10, #2\nlsr x8, x8, #2\nfmov d0, x9\nlsr x11, x13, #2\nfmov d1, x8\nmov v0.d[1], x10\nmov v1.d[1], x11\nret",
  "giasm": "mov x8, #9363                       // =0x2493\nfmov x9, d0\nfmov x11, d1\nmovk x8, #37449, lsl #16\nmov x10, v0.d[1]\nmov x12, v1.d[1]\nmovk x8, #18724, lsl #32\nmovk x8, #9362, lsl #48\numulh x9, x9, x8\numulh x8, x11, x8\nmov x11, #-6148914691236517206      // =0xaaaaaaaaaaaaaaaa\nmovk x11, #43691\numulh x10, x10, x11\nmov v2.d[0], x9\numulh x9, x12, x11\nmov v3.d[0], x8\nmov x8, #-9223372036854775808       // =0x8000000000000000\nmov v2.d[1], x10\nmov v3.d[1], x9\nsub v0.2d, v0.2d, v2.2d\nsub v1.2d, v1.2d, v3.2d\nfmov x9, d0\nmov x10, v0.d[1]\nfmov x11, d1\nmov x12, v1.d[1]\numulh x9, x9, x8\numulh x8, x11, x8\numulh x10, x10, xzr\nmov v0.d[0], x9\numulh x11, x12, xzr\nmov v1.d[0], x8\nmov v0.d[1], x10\nmov v1.d[1], x11\nadd v0.2d, v0.2d, v2.2d\nadd v1.2d, v1.2d, v3.2d\nushr v0.2d, v0.2d, #2\nushr v1.2d, v1.2d, #2\nret",
  "ll": "define <4 x i64> @test(<4 x i64> %a) {\n  %r = udiv <4 x i64> %a, <i64 7, i64 6, i64 7, i64 6>\n  ret <4 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = udiv <4 x i64> %a, <i64 7, i64 6, i64 7, i64 6>\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i64> %r"
 },
 {
  "instr": "udiv",
  "ty": "<4 x i64>",
  "variant": "binopsplat",
  "codesize": 7,
  "thru": 52,
  "lat": 8,
  "sizelat": 8,
  "size": 12,
  "gisize": 15,
  "extrasize": 0,
  "asm": "fmov x9, d0\nfmov x10, d1\nmov x8, v0.d[1]\nmov x11, v1.d[1]\nudiv x9, x9, x0\nudiv x10, x10, x0\nfmov d0, x9\nudiv x8, x8, x0\nfmov d1, x10\nudiv x11, x11, x0\nmov v0.d[1], x8\nmov v1.d[1], x11\nret",
  "giasm": "dup v2.2d, x0\nfmov x8, d0\nfmov x12, d1\nmov x10, v0.d[1]\nfmov x9, d2\nmov x11, v2.d[1]\nudiv x8, x8, x9\nudiv x9, x12, x9\nmov x12, v1.d[1]\nmov v0.d[0], x8\nudiv x10, x10, x11\nmov v1.d[0], x9\nudiv x11, x12, x11\nmov v0.d[1], x10\nmov v1.d[1], x11\nret",
  "ll": "define <4 x i64> @test(<4 x i64> %a, i64 %bs) {\n  %i = insertelement <4 x i64> poison, i64 %bs, i64 0\n  %b = shufflevector <4 x i64> %i, <4 x i64> poison, <4 x i32> zeroinitializer\n  %r = udiv <4 x i64> %a, %b\n  ret <4 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <4 x i64> poison, i64 %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <4 x i64> %i, <4 x i64> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = udiv <4 x i64> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i64> %r"
 },
 {
  "instr": "udiv",
  "ty": "<4 x i64>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 64,
  "lat": 4,
  "sizelat": 4,
  "size": 28,
  "gisize": 22,
  "extrasize": 0,
  "asm": "mov x8, #9363                       // =0x2493\nfmov x9, d0\nfmov x12, d1\nmovk x8, #37449, lsl #16\nmov x10, v0.d[1]\nmov x13, v1.d[1]\nmovk x8, #18724, lsl #32\nmovk x8, #9362, lsl #48\numulh x11, x9, x8\numulh x14, x12, x8\numulh x15, x10, x8\nsub x9, x9, x11\numulh x8, x13, x8\nadd x9, x11, x9, lsr #1\nsub x11, x12, x14\nadd x11, x14, x11, lsr #1\nlsr x9, x9, #2\nsub x10, x10, x15\nlsr x11, x11, #2\nadd x10, x15, x10, lsr #1\nfmov d0, x9\nsub x12, x13, x8\nadd x8, x8, x12, lsr #1\nfmov d1, x11\nlsr x10, x10, #2\nlsr x8, x8, #2\nmov v0.d[1], x10\nmov v1.d[1], x8\nret",
  "giasm": "mov x8, #9363                       // =0x2493\nfmov x9, d0\nfmov x11, d1\nmovk x8, #37449, lsl #16\nmov x10, v0.d[1]\nmov x12, v1.d[1]\nmovk x8, #18724, lsl #32\nmovk x8, #9362, lsl #48\numulh x9, x9, x8\numulh x11, x11, x8\numulh x10, x10, x8\nmov v2.d[0], x9\numulh x8, x12, x8\nmov v3.d[0], x11\nmov v2.d[1], x10\nmov v3.d[1], x8\nsub v0.2d, v0.2d, v2.2d\nsub v1.2d, v1.2d, v3.2d\nusra v2.2d, v0.2d, #1\nusra v3.2d, v1.2d, #1\nushr v0.2d, v2.2d, #2\nushr v1.2d, v3.2d, #2\nret",
  "ll": "define <4 x i64> @test(<4 x i64> %a) {\n  %r = udiv <4 x i64> %a, splat (i64 7)\n  ret <4 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = udiv <4 x i64> %a, splat (i64 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i64> %r"
 },
 {
  "instr": "urem",
  "ty": "i8",
  "variant": "binop",
  "codesize": 4,
  "thru": 3,
  "lat": 4,
  "sizelat": 4,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "and w8, w1, #0xff\nand w9, w0, #0xff\nudiv w10, w9, w8\nmsub w0, w10, w8, w9\nret",
  "giasm": "and w8, w0, #0xff\nand w9, w1, #0xff\nudiv w8, w8, w9\nmsub w0, w8, w1, w0\nret",
  "ll": "define i8 @test(i8 %a, i8 %b) {\n  %r = urem i8 %a, %b\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = urem i8 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "urem",
  "ty": "i8",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 7,
  "lat": 4,
  "sizelat": 4,
  "size": 10,
  "gisize": 6,
  "extrasize": 0,
  "asm": "mov w8, #37                         // =0x25\nand w9, w0, #0xff\nmul w8, w9, w8\nlsr w8, w8, #8\nsub w9, w0, w8\nand w9, w9, #0xfe\nadd w8, w8, w9, lsr #1\nlsr w8, w8, #2\nsub w8, w8, w8, lsl #3\nadd w0, w0, w8\nret",
  "giasm": "mov w8, #7                          // =0x7\nand w9, w0, #0xff\nudiv w8, w9, w8\nlsl w9, w8, #3\nsub w8, w9, w8\nsub w0, w0, w8\nret",
  "ll": "define i8 @test(i8 %a) {\n  %r = urem i8 %a, 7\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = urem i8 %a, 7\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "urem",
  "ty": "i16",
  "variant": "binop",
  "codesize": 4,
  "thru": 3,
  "lat": 4,
  "sizelat": 4,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "and w8, w1, #0xffff\nand w9, w0, #0xffff\nudiv w10, w9, w8\nmsub w0, w10, w8, w9\nret",
  "giasm": "and w8, w0, #0xffff\nand w9, w1, #0xffff\nudiv w8, w8, w9\nmsub w0, w8, w1, w0\nret",
  "ll": "define i16 @test(i16 %a, i16 %b) {\n  %r = urem i16 %a, %b\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = urem i16 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "urem",
  "ty": "i16",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 7,
  "lat": 4,
  "sizelat": 4,
  "size": 10,
  "gisize": 6,
  "extrasize": 0,
  "asm": "mov w8, #9363                       // =0x2493\nand w9, w0, #0xffff\nmul w8, w9, w8\nlsr w8, w8, #16\nsub w9, w0, w8\nand w9, w9, #0xfffe\nadd w8, w8, w9, lsr #1\nlsr w8, w8, #2\nsub w8, w8, w8, lsl #3\nadd w0, w0, w8\nret",
  "giasm": "mov w8, #7                          // =0x7\nand w9, w0, #0xffff\nudiv w8, w9, w8\nlsl w9, w8, #3\nsub w8, w9, w8\nsub w0, w0, w8\nret",
  "ll": "define i16 @test(i16 %a) {\n  %r = urem i16 %a, 7\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = urem i16 %a, 7\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "urem",
  "ty": "i32",
  "variant": "binop",
  "codesize": 4,
  "thru": 3,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "udiv w8, w0, w1\nmsub w0, w8, w1, w0\nret",
  "giasm": "udiv w8, w0, w1\nmsub w0, w8, w1, w0\nret",
  "ll": "define i32 @test(i32 %a, i32 %b) {\n  %r = urem i32 %a, %b\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = urem i32 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "urem",
  "ty": "i32",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 7,
  "lat": 4,
  "sizelat": 4,
  "size": 9,
  "gisize": 5,
  "extrasize": 0,
  "asm": "mov w8, #18725                      // =0x4925\nmovk w8, #9362, lsl #16\numull x8, w0, w8\nlsr x8, x8, #32\nsub w9, w0, w8\nadd w8, w8, w9, lsr #1\nlsr w8, w8, #2\nsub w8, w8, w8, lsl #3\nadd w0, w0, w8\nret",
  "giasm": "mov w8, #7                          // =0x7\nudiv w8, w0, w8\nlsl w9, w8, #3\nsub w8, w9, w8\nsub w0, w0, w8\nret",
  "ll": "define i32 @test(i32 %a) {\n  %r = urem i32 %a, 7\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = urem i32 %a, 7\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "urem",
  "ty": "i64",
  "variant": "binop",
  "codesize": 4,
  "thru": 3,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "udiv x8, x0, x1\nmsub x0, x8, x1, x0\nret",
  "giasm": "udiv x8, x0, x1\nmsub x0, x8, x1, x0\nret",
  "ll": "define i64 @test(i64 %a, i64 %b) {\n  %r = urem i64 %a, %b\n  ret i64 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = urem i64 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i64 %r"
 },
 {
  "instr": "urem",
  "ty": "i64",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 6,
  "lat": 4,
  "sizelat": 4,
  "size": 10,
  "gisize": 5,
  "extrasize": 0,
  "asm": "mov x8, #9363                       // =0x2493\nmovk x8, #37449, lsl #16\nmovk x8, #18724, lsl #32\nmovk x8, #9362, lsl #48\numulh x8, x0, x8\nsub x9, x0, x8\nadd x8, x8, x9, lsr #1\nlsr x8, x8, #2\nsub x8, x8, x8, lsl #3\nadd x0, x0, x8\nret",
  "giasm": "mov w8, #7                          // =0x7\nudiv x8, x0, x8\nlsl x9, x8, #3\nsub x8, x9, x8\nsub x0, x0, x8\nret",
  "ll": "define i64 @test(i64 %a) {\n  %r = urem i64 %a, 7\n  ret i64 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = urem i64 %a, 7\nCost Model: Found an estimated cost of 1 for instruction:   ret i64 %r"
 },
 {
  "instr": "urem",
  "ty": "<8 x i8>",
  "variant": "binop",
  "codesize": 4,
  "thru": 56,
  "lat": 4,
  "sizelat": 4,
  "size": 40,
  "gisize": 42,
  "extrasize": 0,
  "asm": "umov w11, v1.b[0]\numov w12, v0.b[0]\numov w8, v1.b[1]\numov w9, v0.b[1]\numov w14, v1.b[2]\numov w15, v0.b[2]\numov w17, v1.b[3]\numov w18, v0.b[3]\numov w1, v1.b[4]\numov w2, v0.b[4]\numov w4, v1.b[5]\numov w5, v0.b[5]\nudiv w13, w12, w11\nudiv w10, w9, w8\nmsub w11, w13, w11, w12\numov w13, v1.b[7]\nfmov s2, w11\numov w11, v0.b[6]\nudiv w16, w15, w14\nmsub w8, w10, w8, w9\numov w10, v1.b[6]\nmov v2.b[1], w8\nudiv w0, w18, w17\nmsub w8, w16, w14, w15\numov w14, v0.b[7]\nmov v2.b[2], w8\nudiv w3, w2, w1\nmsub w8, w0, w17, w18\nmov v2.b[3], w8\nudiv w9, w5, w4\nmsub w8, w3, w1, w2\nmov v2.b[4], w8\nudiv w12, w11, w10\nmsub w8, w9, w4, w5\nmov v2.b[5], w8\nudiv w9, w14, w13\nmsub w8, w12, w10, w11\nmov v2.b[6], w8\nmsub w8, w9, w13, w14\nmov v2.b[7], w8\nfmov d0, d2\nret",
  "giasm": "ushll v0.8h, v0.8b, #0\nushll v1.8h, v1.8b, #0\nushll v2.4s, v0.4h, #0\nushll v3.4s, v1.4h, #0\nushll2 v0.4s, v0.8h, #0\nushll2 v1.4s, v1.8h, #0\nfmov w8, s2\nfmov w9, s3\nmov w10, v3.s[1]\nmov w11, v3.s[2]\nmov w12, v3.s[3]\nfmov w13, s1\nmov w14, v1.s[1]\nmov w15, v1.s[2]\nudiv w8, w8, w9\nmov w9, v2.s[1]\nudiv w9, w9, w10\nmov w10, v2.s[2]\nmov v4.s[0], w8\nmov w8, v0.s[3]\nudiv w10, w10, w11\nmov w11, v2.s[3]\nmov v4.s[1], w9\nudiv w11, w11, w12\nfmov w12, s0\nmov v4.s[2], w10\nudiv w12, w12, w13\nmov w13, v0.s[1]\nmov v4.s[3], w11\nmls v2.4s, v4.4s, v3.4s\nudiv w13, w13, w14\nmov w14, v0.s[2]\nmov v5.s[0], w12\nmov w12, v1.s[3]\nudiv w14, w14, w15\nmov v5.s[1], w13\nudiv w8, w8, w12\nmov v5.s[2], w14\nmov v5.s[3], w8\nmls v0.4s, v5.4s, v1.4s\nuzp1 v0.8h, v2.8h, v0.8h\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i8> @test(<8 x i8> %a, <8 x i8> %b) {\n  %r = urem <8 x i8> %a, %b\n  ret <8 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = urem <8 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i8> %r"
 },
 {
  "instr": "urem",
  "ty": "<8 x i8>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 7,
  "lat": 4,
  "sizelat": 4,
  "size": 13,
  "gisize": 38,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nmovi v2.4h, #128\nldr d1, [x8, :lo12:.LCPI0_0]\nadrp x8, .LCPI0_1\numull v1.8h, v0.8b, v1.8b\nshrn v1.8b, v1.8h, #8\nsub v3.8b, v0.8b, v1.8b\numull v2.8h, v3.8b, v2.8b\nshrn v2.8b, v2.8h, #8\nadd v1.8b, v2.8b, v1.8b\nldr d2, [x8, :lo12:.LCPI0_1]\nushr v1.8b, v1.8b, #2\nmls v0.8b, v1.8b, v2.8b\nret",
  "giasm": "ushll v0.8h, v0.8b, #0\nmov w8, #7                          // =0x7\nmov w11, #6                         // =0x6\nushll v1.4s, v0.4h, #0\nushll2 v0.4s, v0.8h, #0\nmov w12, v1.s[2]\nmov w15, v0.s[2]\nfmov w9, s1\nfmov w14, s0\nmov w10, v1.s[1]\nmov w13, v1.s[3]\nudiv w9, w9, w8\nudiv w12, w12, w8\nmov v2.s[0], w9\nmov w9, v0.s[3]\nudiv w14, w14, w8\nudiv w8, w15, w8\nmov w15, v0.s[1]\nmov v3.s[0], w14\nudiv w10, w10, w11\nudiv w15, w15, w11\nmov v2.s[1], w10\nadrp x10, .LCPI0_0\nldr d4, [x10, :lo12:.LCPI0_0]\nushll v4.8h, v4.8b, #0\nmov v2.s[2], w12\nushll v5.4s, v4.4h, #0\nushll2 v4.4s, v4.8h, #0\nudiv w13, w13, w11\nmov v3.s[1], w15\nmov v3.s[2], w8\nudiv w9, w9, w11\nmov v2.s[3], w13\nmls v1.4s, v2.4s, v5.4s\nmov v3.s[3], w9\nmls v0.4s, v3.4s, v4.4s\nuzp1 v0.8h, v1.8h, v0.8h\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i8> @test(<8 x i8> %a) {\n  %r = urem <8 x i8> %a, <i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6>\n  ret <8 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = urem <8 x i8> %a, <i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6>\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i8> %r"
 },
 {
  "instr": "urem",
  "ty": "<8 x i8>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 59,
  "lat": 7,
  "sizelat": 7,
  "size": 33,
  "gisize": 43,
  "extrasize": 0,
  "asm": "umov w11, v0.b[0]\numov w8, v0.b[1]\nand w9, w0, #0xff\numov w13, v0.b[2]\numov w15, v0.b[3]\numov w17, v0.b[4]\numov w0, v0.b[5]\nudiv w12, w11, w9\nudiv w10, w8, w9\nmsub w11, w12, w9, w11\nfmov s1, w11\numov w11, v0.b[6]\nudiv w14, w13, w9\nmsub w8, w10, w9, w8\nmov v1.b[1], w8\nudiv w16, w15, w9\nmsub w8, w14, w9, w13\numov w13, v0.b[7]\nmov v1.b[2], w8\nudiv w18, w17, w9\nmsub w8, w16, w9, w15\nmov v1.b[3], w8\nudiv w10, w0, w9\nmsub w8, w18, w9, w17\nmov v1.b[4], w8\nudiv w12, w11, w9\nmsub w8, w10, w9, w0\nmov v1.b[5], w8\nudiv w10, w13, w9\nmsub w8, w12, w9, w11\nmov v1.b[6], w8\nmsub w8, w10, w9, w13\nmov v1.b[7], w8\nfmov d0, d1\nret",
  "giasm": "dup v1.8b, w0\nushll v0.8h, v0.8b, #0\nushll v2.4s, v0.4h, #0\nushll2 v0.4s, v0.8h, #0\nushll v1.8h, v1.8b, #0\nfmov w8, s2\nushll v3.4s, v1.4h, #0\nushll2 v1.4s, v1.8h, #0\nfmov w9, s3\nmov w10, v3.s[1]\nmov w11, v3.s[2]\nmov w12, v3.s[3]\nfmov w13, s1\nmov w14, v1.s[1]\nmov w15, v1.s[2]\nudiv w8, w8, w9\nmov w9, v2.s[1]\nudiv w9, w9, w10\nmov w10, v2.s[2]\nmov v4.s[0], w8\nmov w8, v0.s[3]\nudiv w10, w10, w11\nmov w11, v2.s[3]\nmov v4.s[1], w9\nudiv w11, w11, w12\nfmov w12, s0\nmov v4.s[2], w10\nudiv w12, w12, w13\nmov w13, v0.s[1]\nmov v4.s[3], w11\nmls v2.4s, v4.4s, v3.4s\nudiv w13, w13, w14\nmov w14, v0.s[2]\nmov v5.s[0], w12\nmov w12, v1.s[3]\nudiv w14, w14, w15\nmov v5.s[1], w13\nudiv w8, w8, w12\nmov v5.s[2], w14\nmov v5.s[3], w8\nmls v0.4s, v5.4s, v1.4s\nuzp1 v0.8h, v2.8h, v0.8h\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i8> @test(<8 x i8> %a, i8 %bs) {\n  %i = insertelement <8 x i8> poison, i8 %bs, i64 0\n  %b = shufflevector <8 x i8> %i, <8 x i8> poison, <8 x i32> zeroinitializer\n  %r = urem <8 x i8> %a, %b\n  ret <8 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <8 x i8> poison, i8 %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <8 x i8> %i, <8 x i8> poison, <8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = urem <8 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i8> %r"
 },
 {
  "instr": "urem",
  "ty": "<8 x i8>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 7,
  "lat": 4,
  "sizelat": 4,
  "size": 10,
  "gisize": 36,
  "extrasize": 0,
  "asm": "movi v1.8b, #37\numull v1.8h, v0.8b, v1.8b\nshrn v1.8b, v1.8h, #8\nsub v2.8b, v0.8b, v1.8b\nushll v2.8h, v2.8b, #0\nshrn v2.8b, v2.8h, #1\nadd v1.8b, v2.8b, v1.8b\nmovi v2.8b, #7\nushr v1.8b, v1.8b, #2\nmls v0.8b, v1.8b, v2.8b\nret",
  "giasm": "ushll v0.8h, v0.8b, #0\nmov w8, #7                          // =0x7\nmovi v4.8b, #7\nushll v1.4s, v0.4h, #0\nushll2 v0.4s, v0.8h, #0\nushll v4.8h, v4.8b, #0\nfmov w9, s1\nfmov w13, s0\nmov w10, v1.s[1]\nmov w14, v0.s[1]\nmov w11, v1.s[2]\nmov w15, v0.s[2]\nmov w12, v1.s[3]\nushll v5.4s, v4.4h, #0\nushll2 v4.4s, v4.8h, #0\nudiv w9, w9, w8\nudiv w13, w13, w8\nmov v2.s[0], w9\nmov w9, v0.s[3]\nudiv w10, w10, w8\nmov v3.s[0], w13\nudiv w14, w14, w8\nmov v2.s[1], w10\nudiv w11, w11, w8\nmov v3.s[1], w14\nudiv w15, w15, w8\nmov v2.s[2], w11\nudiv w12, w12, w8\nmov v3.s[2], w15\nudiv w8, w9, w8\nmov v2.s[3], w12\nmls v1.4s, v2.4s, v5.4s\nmov v3.s[3], w8\nmls v0.4s, v3.4s, v4.4s\nuzp1 v0.8h, v1.8h, v0.8h\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i8> @test(<8 x i8> %a) {\n  %r = urem <8 x i8> %a, splat (i8 7)\n  ret <8 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = urem <8 x i8> %a, splat (i8 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i8> %r"
 },
 {
  "instr": "urem",
  "ty": "<16 x i8>",
  "variant": "binop",
  "codesize": 4,
  "thru": 112,
  "lat": 4,
  "sizelat": 4,
  "size": 90,
  "gisize": 83,
  "extrasize": 0,
  "asm": "stp x28, x27, [sp, #-80]!           // 16-byte Folded Spill\nstp x26, x25, [sp, #16]             // 16-byte Folded Spill\nstp x24, x23, [sp, #32]             // 16-byte Folded Spill\nstp x22, x21, [sp, #48]             // 16-byte Folded Spill\nstp x20, x19, [sp, #64]             // 16-byte Folded Spill\numov w11, v1.b[0]\numov w12, v0.b[0]\numov w8, v1.b[1]\numov w9, v0.b[1]\numov w14, v1.b[2]\numov w15, v0.b[2]\numov w17, v1.b[3]\numov w18, v0.b[3]\numov w1, v1.b[4]\numov w2, v0.b[4]\numov w4, v1.b[5]\numov w5, v0.b[5]\nudiv w13, w12, w11\numov w7, v1.b[6]\numov w19, v0.b[6]\numov w21, v1.b[7]\numov w22, v0.b[7]\numov w24, v1.b[8]\numov w25, v0.b[8]\numov w27, v1.b[9]\numov w28, v0.b[9]\nudiv w10, w9, w8\nmsub w11, w13, w11, w12\numov w13, v1.b[11]\nfmov s2, w11\numov w11, v0.b[10]\nudiv w16, w15, w14\nmsub w8, w10, w8, w9\numov w10, v1.b[10]\nmov v2.b[1], w8\nudiv w0, w18, w17\nmsub w8, w16, w14, w15\numov w14, v0.b[11]\numov w16, v1.b[12]\nmov v2.b[2], w8\nudiv w3, w2, w1\nmsub w8, w0, w17, w18\numov w17, v0.b[12]\numov w0, v1.b[13]\nmov v2.b[3], w8\nudiv w6, w5, w4\nmsub w8, w3, w1, w2\numov w1, v0.b[13]\nmov v2.b[4], w8\nudiv w20, w19, w7\nmsub w8, w6, w4, w5\nmov v2.b[5], w8\nudiv w23, w22, w21\nmsub w8, w20, w7, w19\nldp x20, x19, [sp, #64]             // 16-byte Folded Reload\nmov v2.b[6], w8\nudiv w26, w25, w24\nmsub w8, w23, w21, w22\nldp x22, x21, [sp, #48]             // 16-byte Folded Reload\nmov v2.b[7], w8\nudiv w9, w28, w27\nmsub w8, w26, w24, w25\nldp x24, x23, [sp, #32]             // 16-byte Folded Reload\nldp x26, x25, [sp, #16]             // 16-byte Folded Reload\nmov v2.b[8], w8\nudiv w12, w11, w10\nmsub w8, w9, w27, w28\nmov v2.b[9], w8\nudiv w15, w14, w13\nmsub w8, w12, w10, w11\numov w10, v1.b[14]\numov w11, v0.b[14]\nmov v2.b[10], w8\nudiv w18, w17, w16\nmsub w8, w15, w13, w14\numov w13, v1.b[15]\numov w14, v0.b[15]\nmov v2.b[11], w8\nudiv w9, w1, w0\nmsub w8, w18, w16, w17\nmov v2.b[12], w8\nudiv w12, w11, w10\nmsub w8, w9, w0, w1\nmov v2.b[13], w8\nudiv w9, w14, w13\nmsub w8, w12, w10, w11\nmov v2.b[14], w8\nmsub w8, w9, w13, w14\nmov v2.b[15], w8\nmov v0.16b, v2.16b\nldp x28, x27, [sp], #80             // 16-byte Folded Reload\nret",
  "giasm": "ushll v4.8h, v0.8b, #0\nushll v5.8h, v1.8b, #0\nushll2 v6.8h, v0.16b, #0\nushll2 v7.8h, v1.16b, #0\nushll v2.4s, v4.4h, #0\nushll v3.4s, v5.4h, #0\nushll2 v4.4s, v4.8h, #0\nushll2 v5.4s, v5.8h, #0\nushll v0.4s, v6.4h, #0\nushll v1.4s, v7.4h, #0\nushll2 v6.4s, v6.8h, #0\nushll2 v7.4s, v7.8h, #0\nfmov w8, s2\nfmov w9, s3\nmov w12, v3.s[3]\nfmov w13, s5\nmov w16, v5.s[3]\nfmov w17, s1\nmov w18, v1.s[1]\nmov w0, v1.s[2]\nmov w1, v1.s[3]\nudiv w11, w8, w9\nmov w8, v2.s[1]\nmov w9, v3.s[1]\nfmov w2, s7\nmov w3, v7.s[1]\nmov w4, v7.s[2]\nudiv w10, w8, w9\nmov w8, v2.s[2]\nmov w9, v3.s[2]\nmov v16.s[0], w11\nmov w11, v6.s[3]\nudiv w9, w8, w9\nmov w8, v2.s[3]\nmov v16.s[1], w10\nudiv w8, w8, w12\nfmov w12, s4\nmov v16.s[2], w9\nudiv w14, w12, w13\nmov w12, v4.s[1]\nmov w13, v5.s[1]\nmov v16.s[3], w8\nmls v2.4s, v16.4s, v3.4s\nudiv w15, w12, w13\nmov w12, v4.s[2]\nmov w13, v5.s[2]\nmov v17.s[0], w14\nmov w14, v7.s[3]\nudiv w13, w12, w13\nmov w12, v4.s[3]\nmov v17.s[1], w15\nudiv w12, w12, w16\nfmov w16, s0\nmov v17.s[2], w13\nudiv w16, w16, w17\nmov w17, v0.s[1]\nmov v17.s[3], w12\nmls v4.4s, v17.4s, v5.4s\nudiv w17, w17, w18\nmov w18, v0.s[2]\nmov v18.s[0], w16\nudiv w18, w18, w0\nmov w0, v0.s[3]\nmov v18.s[1], w17\nudiv w0, w0, w1\nfmov w1, s6\nmov v18.s[2], w18\nudiv w1, w1, w2\nmov w2, v6.s[1]\nmov v18.s[3], w0\nmls v0.4s, v18.4s, v1.4s\nuzp1 v1.8h, v2.8h, v4.8h\nudiv w2, w2, w3\nmov w3, v6.s[2]\nmov v19.s[0], w1\nudiv w3, w3, w4\nmov v19.s[1], w2\nudiv w10, w11, w14\nmov v19.s[2], w3\nmov v19.s[3], w10\nmls v6.4s, v19.4s, v7.4s\nuzp1 v0.8h, v0.8h, v6.8h\nuzp1 v0.16b, v1.16b, v0.16b\nret",
  "ll": "define <16 x i8> @test(<16 x i8> %a, <16 x i8> %b) {\n  %r = urem <16 x i8> %a, %b\n  ret <16 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = urem <16 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i8> %r"
 },
 {
  "instr": "urem",
  "ty": "<16 x i8>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 8,
  "lat": 4,
  "sizelat": 4,
  "size": 15,
  "gisize": 68,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nadrp x8, .LCPI0_1\numull2 v2.8h, v0.16b, v1.16b\numull v1.8h, v0.8b, v1.8b\nuzp2 v1.16b, v1.16b, v2.16b\nmovi v2.8h, #128\nsub v3.16b, v0.16b, v1.16b\numull2 v4.8h, v3.16b, v2.16b\numull v2.8h, v3.8b, v2.8b\nuzp2 v2.16b, v2.16b, v4.16b\nadd v1.16b, v2.16b, v1.16b\nldr q2, [x8, :lo12:.LCPI0_1]\nushr v1.16b, v1.16b, #2\nmls v0.16b, v1.16b, v2.16b\nret",
  "giasm": "ushll v2.8h, v0.8b, #0\nushll2 v3.8h, v0.16b, #0\nmov w8, #7                          // =0x7\nmov w11, #6                         // =0x6\nushll v1.4s, v2.4h, #0\nushll2 v2.4s, v2.8h, #0\nushll v0.4s, v3.4h, #0\nushll2 v3.4s, v3.8h, #0\nfmov w9, s1\nmov w16, v2.s[2]\nmov w1, v0.s[2]\nmov w4, v3.s[2]\nfmov w14, s2\nfmov w18, s0\nfmov w3, s3\nmov w15, v2.s[1]\nmov w0, v0.s[1]\nudiv w13, w9, w8\nmov w9, v1.s[1]\nmov w17, v2.s[3]\nmov w2, v0.s[3]\nudiv w12, w9, w11\nmov w9, v1.s[2]\nmov v4.s[0], w13\nmov w13, v3.s[3]\nudiv w10, w9, w8\nmov w9, v1.s[3]\nmov v4.s[1], w12\nadrp x12, .LCPI0_0\nldr d16, [x12, :lo12:.LCPI0_0]\nushll v16.8h, v16.8b, #0\nushll v17.4s, v16.4h, #0\nushll2 v16.4s, v16.8h, #0\nudiv w14, w14, w8\nmov v4.s[2], w10\nudiv w16, w16, w8\nmov v5.s[0], w14\nudiv w18, w18, w8\nudiv w1, w1, w8\nmov v6.s[0], w18\nudiv w3, w3, w8\nudiv w8, w4, w8\nmov w4, v3.s[1]\nmov v7.s[0], w3\nudiv w15, w15, w11\nudiv w0, w0, w11\nmov v5.s[1], w15\nmov v5.s[2], w16\nudiv w4, w4, w11\nmov v6.s[1], w0\nmov v6.s[2], w1\nudiv w9, w9, w11\nmov v7.s[1], w4\nmov v7.s[2], w8\nudiv w17, w17, w11\nmov v4.s[3], w9\nmls v1.4s, v4.4s, v17.4s\nudiv w2, w2, w11\nmov v5.s[3], w17\nmls v2.4s, v5.4s, v16.4s\nudiv w11, w13, w11\nmov v6.s[3], w2\nuzp1 v1.8h, v1.8h, v2.8h\nmls v0.4s, v6.4s, v17.4s\nmov v7.s[3], w11\nmls v3.4s, v7.4s, v16.4s\nuzp1 v0.8h, v0.8h, v3.8h\nuzp1 v0.16b, v1.16b, v0.16b\nret",
  "ll": "define <16 x i8> @test(<16 x i8> %a) {\n  %r = urem <16 x i8> %a, <i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6>\n  ret <16 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = urem <16 x i8> %a, <i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6>\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i8> %r"
 },
 {
  "instr": "urem",
  "ty": "<16 x i8>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 115,
  "lat": 7,
  "sizelat": 7,
  "size": 67,
  "gisize": 84,
  "extrasize": 0,
  "asm": "str x19, [sp, #-16]!                // 8-byte Folded Spill\numov w11, v0.b[0]\numov w9, v0.b[1]\nand w8, w0, #0xff\numov w13, v0.b[2]\numov w15, v0.b[3]\numov w17, v0.b[4]\numov w0, v0.b[5]\numov w2, v0.b[6]\numov w4, v0.b[7]\numov w6, v0.b[8]\numov w19, v0.b[9]\nudiv w12, w11, w8\nudiv w10, w9, w8\nmsub w11, w12, w8, w11\nfmov s1, w11\numov w11, v0.b[10]\nudiv w14, w13, w8\nmsub w9, w10, w8, w9\nmov v1.b[1], w9\nudiv w16, w15, w8\nmsub w9, w14, w8, w13\numov w13, v0.b[11]\nmov v1.b[2], w9\nudiv w18, w17, w8\nmsub w9, w16, w8, w15\numov w15, v0.b[12]\nmov v1.b[3], w9\nudiv w1, w0, w8\nmsub w9, w18, w8, w17\numov w17, v0.b[13]\nmov v1.b[4], w9\nudiv w3, w2, w8\nmsub w9, w1, w8, w0\nmov v1.b[5], w9\nudiv w5, w4, w8\nmsub w9, w3, w8, w2\nmov v1.b[6], w9\nudiv w7, w6, w8\nmsub w9, w5, w8, w4\nmov v1.b[7], w9\nudiv w10, w19, w8\nmsub w9, w7, w8, w6\nmov v1.b[8], w9\nudiv w12, w11, w8\nmsub w9, w10, w8, w19\nmov v1.b[9], w9\nudiv w14, w13, w8\nmsub w9, w12, w8, w11\numov w11, v0.b[14]\nmov v1.b[10], w9\nudiv w16, w15, w8\nmsub w9, w14, w8, w13\numov w13, v0.b[15]\nmov v1.b[11], w9\nudiv w10, w17, w8\nmsub w9, w16, w8, w15\nmov v1.b[12], w9\nudiv w12, w11, w8\nmsub w9, w10, w8, w17\nmov v1.b[13], w9\nudiv w10, w13, w8\nmsub w9, w12, w8, w11\nmov v1.b[14], w9\nmsub w8, w10, w8, w13\nmov v1.b[15], w8\nmov v0.16b, v1.16b\nldr x19, [sp], #16                  // 8-byte Folded Reload\nret",
  "giasm": "dup v5.16b, w0\nushll v3.8h, v0.8b, #0\nushll2 v6.8h, v0.16b, #0\nushll v4.8h, v5.8b, #0\nushll v1.4s, v3.4h, #0\nushll2 v3.4s, v3.8h, #0\nushll2 v7.8h, v5.16b, #0\nushll v0.4s, v6.4h, #0\nushll2 v6.4s, v6.8h, #0\nushll v2.4s, v4.4h, #0\nfmov w8, s1\nushll2 v4.4s, v4.8h, #0\nushll v5.4s, v7.4h, #0\nushll2 v7.4s, v7.8h, #0\nfmov w9, s2\nmov w12, v2.s[3]\nfmov w13, s4\nmov w16, v4.s[3]\nfmov w17, s5\nmov w18, v5.s[1]\nmov w0, v5.s[2]\nmov w1, v5.s[3]\nfmov w2, s7\nudiv w11, w8, w9\nmov w8, v1.s[1]\nmov w9, v2.s[1]\nmov w3, v7.s[1]\nmov w4, v7.s[2]\nudiv w10, w8, w9\nmov w8, v1.s[2]\nmov w9, v2.s[2]\nmov v16.s[0], w11\nmov w11, v6.s[3]\nudiv w9, w8, w9\nmov w8, v1.s[3]\nmov v16.s[1], w10\nudiv w8, w8, w12\nfmov w12, s3\nmov v16.s[2], w9\nudiv w14, w12, w13\nmov w12, v3.s[1]\nmov w13, v4.s[1]\nmov v16.s[3], w8\nmls v1.4s, v16.4s, v2.4s\nudiv w15, w12, w13\nmov w12, v3.s[2]\nmov w13, v4.s[2]\nmov v17.s[0], w14\nmov w14, v7.s[3]\nudiv w13, w12, w13\nmov w12, v3.s[3]\nmov v17.s[1], w15\nudiv w12, w12, w16\nfmov w16, s0\nmov v17.s[2], w13\nudiv w16, w16, w17\nmov w17, v0.s[1]\nmov v17.s[3], w12\nmls v3.4s, v17.4s, v4.4s\nudiv w17, w17, w18\nmov w18, v0.s[2]\nmov v18.s[0], w16\nuzp1 v1.8h, v1.8h, v3.8h\nudiv w18, w18, w0\nmov w0, v0.s[3]\nmov v18.s[1], w17\nudiv w0, w0, w1\nfmov w1, s6\nmov v18.s[2], w18\nudiv w1, w1, w2\nmov w2, v6.s[1]\nmov v18.s[3], w0\nmls v0.4s, v18.4s, v5.4s\nudiv w2, w2, w3\nmov w3, v6.s[2]\nmov v19.s[0], w1\nudiv w3, w3, w4\nmov v19.s[1], w2\nudiv w10, w11, w14\nmov v19.s[2], w3\nmov v19.s[3], w10\nmls v6.4s, v19.4s, v7.4s\nuzp1 v0.8h, v0.8h, v6.8h\nuzp1 v0.16b, v1.16b, v0.16b\nret",
  "ll": "define <16 x i8> @test(<16 x i8> %a, i8 %bs) {\n  %i = insertelement <16 x i8> poison, i8 %bs, i64 0\n  %b = shufflevector <16 x i8> %i, <16 x i8> poison, <16 x i32> zeroinitializer\n  %r = urem <16 x i8> %a, %b\n  ret <16 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <16 x i8> poison, i8 %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <16 x i8> %i, <16 x i8> poison, <16 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = urem <16 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i8> %r"
 },
 {
  "instr": "urem",
  "ty": "<16 x i8>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 8,
  "lat": 4,
  "sizelat": 4,
  "size": 9,
  "gisize": 66,
  "extrasize": 0,
  "asm": "movi v1.16b, #37\numull2 v2.8h, v0.16b, v1.16b\numull v1.8h, v0.8b, v1.8b\nuzp2 v1.16b, v1.16b, v2.16b\nsub v2.16b, v0.16b, v1.16b\nusra v1.16b, v2.16b, #1\nmovi v2.16b, #7\nushr v1.16b, v1.16b, #2\nmls v0.16b, v1.16b, v2.16b\nret",
  "giasm": "ushll v2.8h, v0.8b, #0\nushll2 v3.8h, v0.16b, #0\nmov w8, #7                          // =0x7\nmovi v16.8b, #7\nushll v1.4s, v2.4h, #0\nushll2 v2.4s, v2.8h, #0\nushll v0.4s, v3.4h, #0\nushll2 v3.4s, v3.8h, #0\nushll v16.8h, v16.8b, #0\nfmov w9, s1\nfmov w13, s2\nfmov w17, s0\nfmov w2, s3\nmov w14, v2.s[1]\nmov w18, v0.s[1]\nmov w3, v3.s[1]\nmov w15, v2.s[2]\nmov w0, v0.s[2]\nudiv w12, w9, w8\nmov w9, v1.s[1]\nmov w4, v3.s[2]\nmov w16, v2.s[3]\nmov w1, v0.s[3]\nushll v17.4s, v16.4h, #0\nushll2 v16.4s, v16.8h, #0\nudiv w13, w13, w8\nmov v4.s[0], w12\nmov w12, v3.s[3]\nudiv w17, w17, w8\nmov v5.s[0], w13\nudiv w2, w2, w8\nmov v6.s[0], w17\nudiv w11, w9, w8\nmov w9, v1.s[2]\nmov v7.s[0], w2\nudiv w14, w14, w8\nmov v4.s[1], w11\nudiv w18, w18, w8\nmov v5.s[1], w14\nudiv w3, w3, w8\nmov v6.s[1], w18\nudiv w10, w9, w8\nmov w9, v1.s[3]\nmov v7.s[1], w3\nudiv w15, w15, w8\nmov v4.s[2], w10\nudiv w0, w0, w8\nmov v5.s[2], w15\nudiv w4, w4, w8\nmov v6.s[2], w0\nudiv w9, w9, w8\nmov v7.s[2], w4\nudiv w16, w16, w8\nmov v4.s[3], w9\nmls v1.4s, v4.4s, v17.4s\nudiv w1, w1, w8\nmov v5.s[3], w16\nmls v2.4s, v5.4s, v16.4s\nudiv w8, w12, w8\nmov v6.s[3], w1\nuzp1 v1.8h, v1.8h, v2.8h\nmls v0.4s, v6.4s, v17.4s\nmov v7.s[3], w8\nmls v3.4s, v7.4s, v16.4s\nuzp1 v0.8h, v0.8h, v3.8h\nuzp1 v0.16b, v1.16b, v0.16b\nret",
  "ll": "define <16 x i8> @test(<16 x i8> %a) {\n  %r = urem <16 x i8> %a, splat (i8 7)\n  ret <16 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = urem <16 x i8> %a, splat (i8 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i8> %r"
 },
 {
  "instr": "urem",
  "ty": "<32 x i8>",
  "variant": "binop",
  "codesize": 4,
  "thru": 224,
  "lat": 4,
  "sizelat": 4,
  "size": 250,
  "gisize": 194,
  "extrasize": 0,
  "asm": "sub sp, sp, #304\nstp x29, x30, [sp, #208]            // 16-byte Folded Spill\nstp x28, x27, [sp, #224]            // 16-byte Folded Spill\nstp x26, x25, [sp, #240]            // 16-byte Folded Spill\nstp x24, x23, [sp, #256]            // 16-byte Folded Spill\nstp x22, x21, [sp, #272]            // 16-byte Folded Spill\nstp x20, x19, [sp, #288]            // 16-byte Folded Spill\numov w8, v2.b[1]\numov w9, v0.b[1]\numov w19, v3.b[7]\numov w7, v1.b[7]\numov w6, v3.b[8]\numov w3, v1.b[8]\numov w13, v3.b[0]\numov w5, v3.b[1]\numov w0, v1.b[1]\numov w12, v3.b[2]\numov w17, v3.b[3]\numov w16, v1.b[3]\nstr w8, [sp, #80]                   // 4-byte Folded Spill\nudiv w10, w9, w8\numov w8, v2.b[0]\nstr w9, [sp, #88]                   // 4-byte Folded Spill\numov w9, v0.b[0]\nldr w30, [sp, #80]                  // 4-byte Folded Reload\numov w15, v3.b[4]\numov w14, v1.b[4]\numov w4, v3.b[5]\numov w1, v1.b[5]\numov w2, v3.b[6]\numov w18, v1.b[6]\nstr w8, [sp, #32]                   // 4-byte Folded Spill\numov w21, v3.b[9]\numov w20, v1.b[9]\nstr w9, [sp, #40]                   // 4-byte Folded Spill\nldr w29, [sp, #32]                  // 4-byte Folded Reload\nudiv w11, w9, w8\numov w8, v2.b[2]\numov w9, v0.b[2]\nstr w10, [sp, #96]                  // 4-byte Folded Spill\nstp w8, w9, [sp, #16]               // 8-byte Folded Spill\nudiv w10, w9, w8\numov w8, v2.b[3]\numov w9, v0.b[3]\nstp w11, w8, [sp, #48]              // 8-byte Folded Spill\nstr w10, [sp, #24]                  // 4-byte Folded Spill\nudiv w10, w9, w8\numov w8, v2.b[4]\nstr w8, [sp, #28]                   // 4-byte Folded Spill\nstp w9, w10, [sp, #56]              // 8-byte Folded Spill\numov w9, v0.b[4]\nudiv w27, w0, w5\nstr w9, [sp, #36]                   // 4-byte Folded Spill\nudiv w10, w9, w8\numov w8, v2.b[5]\numov w9, v0.b[5]\nstr w8, [sp, #76]                   // 4-byte Folded Spill\nstr w9, [sp, #84]                   // 4-byte Folded Spill\nstr w10, [sp, #44]                  // 4-byte Folded Spill\nudiv w10, w9, w8\numov w8, v2.b[6]\numov w9, v0.b[6]\nstp w8, w9, [sp, #64]               // 8-byte Folded Spill\nstr w10, [sp, #92]                  // 4-byte Folded Spill\nudiv w10, w9, w8\numov w8, v2.b[7]\numov w9, v0.b[7]\nstp w8, w9, [sp, #112]              // 8-byte Folded Spill\nudiv w11, w9, w8\numov w8, v2.b[8]\numov w9, v0.b[8]\nstr w10, [sp, #72]                  // 4-byte Folded Spill\nstp w8, w9, [sp, #100]              // 8-byte Folded Spill\nudiv w10, w9, w8\numov w8, v2.b[9]\numov w9, v0.b[9]\nstp w8, w9, [sp, #136]              // 8-byte Folded Spill\nstr w10, [sp, #108]                 // 4-byte Folded Spill\nudiv w10, w9, w8\numov w8, v2.b[10]\numov w9, v0.b[10]\nstp w11, w8, [sp, #120]             // 8-byte Folded Spill\nstr w10, [sp, #144]                 // 4-byte Folded Spill\nudiv w10, w9, w8\numov w8, v2.b[11]\nstp w9, w10, [sp, #128]             // 8-byte Folded Spill\numov w9, v0.b[11]\nudiv w25, w16, w17\nstp w8, w9, [sp, #172]              // 8-byte Folded Spill\nudiv w11, w9, w8\numov w8, v2.b[12]\numov w9, v0.b[12]\nstr w8, [sp, #152]                  // 4-byte Folded Spill\nstr w9, [sp, #160]                  // 4-byte Folded Spill\nudiv w10, w9, w8\numov w8, v2.b[13]\numov w9, v0.b[13]\nstp w8, w9, [sp, #196]              // 8-byte Folded Spill\nstr w10, [sp, #168]                 // 4-byte Folded Spill\nudiv w10, w9, w8\numov w8, v2.b[14]\numov w9, v0.b[14]\nstp w11, w8, [sp, #180]             // 8-byte Folded Spill\numov w11, v1.b[2]\nstr w10, [sp, #204]                 // 4-byte Folded Spill\nudiv w10, w9, w8\numov w8, v2.b[15]\nstr w8, [sp, #148]                  // 4-byte Folded Spill\nstp w9, w10, [sp, #188]             // 8-byte Folded Spill\numov w9, v0.b[15]\nudiv w22, w11, w12\nstr w9, [sp, #156]                  // 4-byte Folded Spill\nudiv w10, w9, w8\nstr w10, [sp, #164]                 // 4-byte Folded Spill\numov w10, v1.b[0]\nudiv w9, w7, w19\nudiv w8, w3, w6\nudiv w23, w10, w13\nstp w8, w9, [sp, #8]                // 8-byte Folded Spill\nldr w8, [sp, #96]                   // 4-byte Folded Reload\nldr w9, [sp, #88]                   // 4-byte Folded Reload\nmsub w9, w8, w30, w9\nldr w8, [sp, #48]                   // 4-byte Folded Reload\nldr w30, [sp, #40]                  // 4-byte Folded Reload\nmsub w8, w8, w29, w30\nldp x29, x30, [sp, #208]            // 16-byte Folded Reload\nfmov s0, w8\nmsub w10, w23, w13, w10\nudiv w24, w14, w15\nmsub w13, w27, w5, w0\nldr w5, [sp, #16]                   // 4-byte Folded Reload\nmov v0.b[1], w9\nmsub w9, w22, w12, w11\numov w11, v1.b[10]\nfmov s2, w10\nldp w10, w8, [sp, #20]              // 8-byte Folded Reload\nmov v2.b[1], w13\nmsub w8, w8, w5, w10\nldr w5, [sp, #52]                   // 4-byte Folded Reload\numov w10, v3.b[10]\nudiv w28, w1, w4\nldp w13, w12, [sp, #56]             // 8-byte Folded Reload\nmov v2.b[2], w9\nmov v0.b[2], w8\nmsub w8, w25, w17, w16\nldr w17, [sp, #28]                  // 4-byte Folded Reload\nldr w16, [sp, #36]                  // 4-byte Folded Reload\nmsub w12, w12, w5, w13\nldr w13, [sp, #44]                  // 4-byte Folded Reload\nldr w5, [sp, #136]                  // 4-byte Folded Reload\nmov v2.b[3], w8\nmsub w8, w24, w15, w14\nldr w15, [sp, #92]                  // 4-byte Folded Reload\nmov v0.b[3], w12\nmsub w13, w13, w17, w16\nldr w17, [sp, #76]                  // 4-byte Folded Reload\nudiv w26, w18, w2\nldr w16, [sp, #84]                  // 4-byte Folded Reload\numov w12, v3.b[11]\nmsub w15, w15, w17, w16\numov w14, v1.b[11]\nmov v2.b[4], w8\nmsub w8, w28, w4, w1\nldr w1, [sp, #64]                   // 4-byte Folded Reload\nmov v0.b[4], w13\nldr w4, [sp, #100]                  // 4-byte Folded Reload\nldp w17, w16, [sp, #68]             // 8-byte Folded Reload\nldp x24, x23, [sp, #256]            // 16-byte Folded Reload\nmov v2.b[5], w8\nldp x28, x27, [sp, #224]            // 16-byte Folded Reload\nmov v0.b[5], w15\nmsub w16, w16, w1, w17\numov w15, v3.b[12]\nmsub w8, w26, w2, w18\nldr w2, [sp, #112]                  // 4-byte Folded Reload\nudiv w0, w20, w21\nldp w1, w18, [sp, #116]             // 8-byte Folded Reload\numov w17, v1.b[12]\nldp x26, x25, [sp, #240]            // 16-byte Folded Reload\nmov v2.b[6], w8\nldr w8, [sp, #12]                   // 4-byte Folded Reload\nmov v0.b[6], w16\nmsub w18, w18, w2, w1\nmsub w8, w8, w19, w7\nldp w2, w1, [sp, #104]              // 8-byte Folded Reload\nmov v0.b[7], w18\numov w18, v3.b[13]\nmov v2.b[7], w8\nldr w8, [sp, #8]                    // 4-byte Folded Reload\nudiv w9, w11, w10\nmsub w1, w1, w4, w2\numov w2, v1.b[13]\nmsub w8, w8, w6, w3\nldp w4, w3, [sp, #140]              // 8-byte Folded Reload\nmov v0.b[8], w1\nmov v2.b[8], w8\nmsub w8, w0, w21, w20\nmsub w3, w3, w5, w4\nldr w5, [sp, #124]                  // 4-byte Folded Reload\nldp w4, w1, [sp, #128]              // 8-byte Folded Reload\nudiv w13, w14, w12\nldp x20, x19, [sp, #288]            // 16-byte Folded Reload\nmov v2.b[9], w8\nmov v0.b[9], w3\nmsub w8, w9, w10, w11\nmsub w1, w1, w5, w4\nldr w4, [sp, #172]                  // 4-byte Folded Reload\numov w9, v3.b[14]\nldp w3, w11, [sp, #176]             // 8-byte Folded Reload\numov w10, v1.b[14]\nldp x22, x21, [sp, #272]            // 16-byte Folded Reload\nmov v2.b[10], w8\nmov v0.b[10], w1\nldr w1, [sp, #152]                  // 4-byte Folded Reload\nmsub w11, w11, w4, w3\nudiv w16, w17, w15\nmsub w8, w13, w12, w14\nldr w13, [sp, #168]                 // 4-byte Folded Reload\nldr w14, [sp, #160]                 // 4-byte Folded Reload\nmov v0.b[11], w11\numov w11, v3.b[15]\nmsub w13, w13, w1, w14\numov w14, v1.b[15]\nmov v2.b[11], w8\nmov v0.b[12], w13\nudiv w0, w2, w18\nmsub w8, w16, w15, w17\nldr w17, [sp, #196]                 // 4-byte Folded Reload\nldp w16, w15, [sp, #200]            // 8-byte Folded Reload\nmov v2.b[12], w8\nmsub w15, w15, w17, w16\nldp w17, w16, [sp, #188]            // 8-byte Folded Reload\nmov v0.b[13], w15\nudiv w12, w10, w9\nmsub w8, w0, w18, w2\nldr w18, [sp, #184]                 // 4-byte Folded Reload\nmsub w16, w16, w18, w17\nmov v2.b[13], w8\nmov v0.b[14], w16\nudiv w13, w14, w11\nmsub w8, w12, w9, w10\nldr w9, [sp, #164]                  // 4-byte Folded Reload\nldr w12, [sp, #148]                 // 4-byte Folded Reload\nldr w10, [sp, #156]                 // 4-byte Folded Reload\nmov v2.b[14], w8\nmsub w9, w9, w12, w10\nmov v0.b[15], w9\nmsub w8, w13, w11, w14\nmov v2.b[15], w8\nmov v1.16b, v2.16b\nadd sp, sp, #304\nret",
  "giasm": "stp x29, x30, [sp, #-96]!           // 16-byte Folded Spill\nstp x28, x27, [sp, #16]             // 16-byte Folded Spill\nstp x26, x25, [sp, #32]             // 16-byte Folded Spill\nstp x24, x23, [sp, #48]             // 16-byte Folded Spill\nstp x22, x21, [sp, #64]             // 16-byte Folded Spill\nstp x20, x19, [sp, #80]             // 16-byte Folded Spill\nushll v4.8h, v0.8b, #0\nushll v5.8h, v2.8b, #0\nushll v16.8h, v1.8b, #0\nushll v17.8h, v3.8b, #0\nushll v6.4s, v4.4h, #0\nushll v7.4s, v5.4h, #0\nushll2 v4.4s, v4.8h, #0\nushll2 v5.4s, v5.8h, #0\nushll v18.4s, v16.4h, #0\nushll v19.4s, v17.4h, #0\nushll2 v16.4s, v16.8h, #0\nushll2 v17.4s, v17.8h, #0\nfmov w8, s6\nfmov w9, s7\nmov w12, v7.s[3]\nfmov w13, s5\nmov w16, v5.s[3]\nfmov w6, s19\nmov w7, v19.s[3]\nfmov w21, s17\nmov w23, v17.s[3]\nudiv w11, w8, w9\nmov w8, v6.s[1]\nmov w9, v7.s[1]\nudiv w10, w8, w9\nmov w8, v6.s[2]\nmov w9, v7.s[2]\nmov v20.s[0], w11\nudiv w9, w8, w9\nmov w8, v6.s[3]\nushll2 v6.8h, v0.16b, #0\nmov v20.s[1], w10\nushll v0.8h, v0.8b, #0\nushll v28.4s, v0.4h, #0\nushll2 v0.4s, v0.8h, #0\nudiv w8, w8, w12\nfmov w12, s4\nmov v20.s[2], w9\nudiv w15, w12, w13\nmov w12, v4.s[1]\nmov w13, v5.s[1]\nmov v20.s[3], w8\nudiv w14, w12, w13\nmov w12, v4.s[2]\nmov w13, v5.s[2]\nushll v5.4s, v6.4h, #0\nmov v21.s[0], w15\nudiv w13, w12, w13\nmov w12, v4.s[3]\nushll2 v4.8h, v2.16b, #0\nmov v21.s[1], w14\nushll v2.8h, v2.8b, #0\nushll v7.4s, v4.4h, #0\nushll v30.4s, v2.4h, #0\nushll2 v2.4s, v2.8h, #0\nfmov w17, s7\nmls v28.4s, v20.4s, v30.4s\nudiv w12, w12, w16\nfmov w16, s5\nmov v21.s[2], w13\nudiv w1, w16, w17\nmov w16, v5.s[1]\nmov w17, v7.s[1]\nmov v21.s[3], w12\nmls v0.4s, v21.4s, v2.4s\nudiv w0, w16, w17\nmov w16, v5.s[2]\nmov w17, v7.s[2]\nmov v22.s[0], w1\nuzp1 v0.8h, v28.8h, v0.8h\nudiv w18, w16, w17\nmov w16, v5.s[3]\nmov w17, v7.s[3]\nushll2 v5.4s, v6.8h, #0\nushll2 v7.4s, v4.8h, #0\nmov v22.s[1], w0\nushll v6.4s, v6.4h, #0\nushll v4.4s, v4.4h, #0\nfmov w2, s7\nmov w4, v7.s[3]\nudiv w16, w16, w17\nfmov w17, s5\nmov v22.s[2], w18\nudiv w5, w17, w2\nmov w17, v5.s[1]\nmov w2, v7.s[1]\nmov v22.s[3], w16\nmls v6.4s, v22.4s, v4.4s\nudiv w3, w17, w2\nmov w17, v5.s[2]\nmov w2, v7.s[2]\nmov v23.s[0], w5\nudiv w2, w17, w2\nmov w17, v5.s[3]\nmov v23.s[1], w3\nudiv w17, w17, w4\nfmov w4, s18\nmov v23.s[2], w2\nudiv w20, w4, w6\nmov w4, v18.s[1]\nmov w6, v19.s[1]\nmov v23.s[3], w17\nmls v5.4s, v23.4s, v7.4s\nudiv w19, w4, w6\nmov w4, v18.s[2]\nmov w6, v19.s[2]\nmov v24.s[0], w20\nuzp1 v2.8h, v6.8h, v5.8h\nuzp1 v0.16b, v0.16b, v2.16b\nudiv w6, w4, w6\nmov w4, v18.s[3]\nmov v24.s[1], w19\nldp x20, x19, [sp, #80]             // 16-byte Folded Reload\nudiv w4, w4, w7\nfmov w7, s16\nmov v24.s[2], w6\nudiv w24, w7, w21\nmov w7, v16.s[1]\nmov w21, v17.s[1]\nmov v24.s[3], w4\nudiv w22, w7, w21\nmov w7, v16.s[2]\nmov w21, v17.s[2]\nushll2 v17.8h, v1.16b, #0\nmov v25.s[0], w24\nushll v1.8h, v1.8b, #0\nushll v18.4s, v17.4h, #0\nushll v29.4s, v1.4h, #0\nushll2 v1.4s, v1.8h, #0\nudiv w21, w7, w21\nmov w7, v16.s[3]\nushll2 v16.8h, v3.16b, #0\nmov v25.s[1], w22\nushll v3.8h, v3.8b, #0\nushll v19.4s, v16.4h, #0\nushll v31.4s, v3.4h, #0\nushll2 v3.4s, v3.8h, #0\nfmov w25, s19\nmov w26, v19.s[1]\nmov w27, v19.s[2]\nmov w28, v19.s[3]\nushll2 v19.4s, v16.8h, #0\nushll v16.4s, v16.4h, #0\nudiv w7, w7, w23\nfmov w23, s18\nmov v25.s[2], w21\nmls v29.4s, v24.4s, v31.4s\nldp x22, x21, [sp, #64]             // 16-byte Folded Reload\nfmov w29, s19\nmov w30, v19.s[1]\nmov w15, v19.s[2]\nudiv w25, w23, w25\nmov w23, v18.s[1]\nmov v25.s[3], w7\nmls v1.4s, v25.4s, v3.4s\nudiv w26, w23, w26\nmov w23, v18.s[2]\nmov v26.s[0], w25\nuzp1 v1.8h, v29.8h, v1.8h\nudiv w27, w23, w27\nmov w23, v18.s[3]\nushll2 v18.4s, v17.8h, #0\nmov v26.s[1], w26\nushll v17.4s, v17.4h, #0\nldp x26, x25, [sp, #32]             // 16-byte Folded Reload\nmov w11, v18.s[2]\nmov w9, v18.s[3]\nudiv w23, w23, w28\nfmov w28, s18\nmov v26.s[2], w27\nudiv w28, w28, w29\nmov w29, v18.s[1]\nmov v26.s[3], w23\nldp x24, x23, [sp, #48]             // 16-byte Folded Reload\nmls v17.4s, v26.4s, v16.4s\nudiv w29, w29, w30\nmov v27.s[0], w28\nldp x28, x27, [sp, #16]             // 16-byte Folded Reload\nudiv w10, w11, w15\nmov w11, v19.s[3]\nmov v27.s[1], w29\nudiv w8, w9, w11\nmov v27.s[2], w10\nmov v27.s[3], w8\nmls v18.4s, v27.4s, v19.4s\nuzp1 v3.8h, v17.8h, v18.8h\nuzp1 v1.16b, v1.16b, v3.16b\nldp x29, x30, [sp], #96             // 16-byte Folded Reload\nret",
  "ll": "define <32 x i8> @test(<32 x i8> %a, <32 x i8> %b) {\n  %r = urem <32 x i8> %a, %b\n  ret <32 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = urem <32 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i8> %r"
 },
 {
  "instr": "urem",
  "ty": "<32 x i8>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 16,
  "lat": 4,
  "sizelat": 4,
  "size": 181,
  "gisize": 153,
  "extrasize": 0,
  "asm": "umov w11, v0.b[1]\numov w12, v0.b[0]\nmov w8, #43691                      // =0xaaab\numov w14, v1.b[0]\numov w13, v1.b[1]\nmov w10, #18725                     // =0x4925\nmovk w8, #10922, lsl #16\nmovk w10, #9362, lsl #16\numov w16, v0.b[2]\nmov w9, #6                          // =0x6\numov w1, v1.b[2]\numull x15, w11, w8\numull x17, w12, w10\numull x0, w14, w10\numull x18, w13, w8\nlsr x15, x15, #32\nlsr x17, x17, #32\numull x2, w16, w10\nlsr x0, x0, #32\nmsub w11, w15, w9, w11\nlsr x18, x18, #32\nsub w15, w17, w17, lsl #3\nsub w17, w0, w0, lsl #3\numull x0, w1, w10\nlsr x2, x2, #32\nmsub w13, w18, w9, w13\numov w18, v0.b[3]\nadd w12, w12, w15\numov w15, v1.b[3]\nadd w14, w14, w17\nfmov s2, w12\nfmov s3, w14\numov w17, v0.b[4]\nlsr x0, x0, #32\numov w12, v1.b[4]\nsub w2, w2, w2, lsl #3\numull x14, w18, w8\nmov v2.b[1], w11\nsub w0, w0, w0, lsl #3\numull x11, w15, w8\nmov v3.b[1], w13\nadd w16, w16, w2\numov w13, v0.b[5]\numull x2, w17, w10\nadd w0, w1, w0\nlsr x14, x14, #32\numull x1, w12, w10\nlsr x11, x11, #32\nmov v2.b[2], w16\numov w16, v1.b[5]\nmsub w14, w14, w9, w18\nmov v3.b[2], w0\nlsr x18, x2, #32\nmsub w11, w11, w9, w15\numov w15, v0.b[6]\nlsr x1, x1, #32\numull x2, w13, w8\numov w0, v1.b[6]\nsub w18, w18, w18, lsl #3\nmov v2.b[3], w14\numull x14, w16, w8\nsub w1, w1, w1, lsl #3\nmov v3.b[3], w11\nadd w17, w17, w18\numov w11, v0.b[7]\nlsr x2, x2, #32\numull x18, w15, w10\nadd w12, w12, w1\nlsr x14, x14, #32\numull x1, w0, w10\nmov v2.b[4], w17\numov w17, v1.b[7]\nmsub w13, w2, w9, w13\nmov v3.b[4], w12\nmsub w14, w14, w9, w16\nlsr x12, x18, #32\nlsr x1, x1, #32\numull x2, w11, w8\numov w16, v0.b[8]\numov w18, v1.b[8]\nsub w12, w12, w12, lsl #3\nmov v2.b[5], w13\numull x13, w17, w8\nsub w1, w1, w1, lsl #3\nmov v3.b[5], w14\nadd w12, w15, w12\nlsr x2, x2, #32\numov w14, v0.b[9]\nadd w0, w0, w1\numull x15, w16, w10\nlsr x13, x13, #32\numull x1, w18, w10\nmov v2.b[6], w12\numov w12, v1.b[9]\nmsub w11, w2, w9, w11\nmov v3.b[6], w0\nmsub w13, w13, w9, w17\nlsr x15, x15, #32\nlsr x1, x1, #32\numov w0, v0.b[10]\numov w2, v1.b[10]\nsub w15, w15, w15, lsl #3\numov w17, v0.b[11]\nmov v2.b[7], w11\numull x11, w14, w8\nsub w1, w1, w1, lsl #3\nmov v3.b[7], w13\numull x13, w12, w8\nadd w15, w16, w15\nadd w18, w18, w1\numull x16, w0, w10\nlsr x11, x11, #32\numull x1, w17, w8\nlsr x13, x13, #32\nmov v2.b[8], w15\numull x15, w2, w10\nmsub w11, w11, w9, w14\nmov v3.b[8], w18\numov w14, v1.b[11]\nmsub w12, w13, w9, w12\nlsr x16, x16, #32\numov w13, v0.b[12]\nlsr x15, x15, #32\nlsr x1, x1, #32\numov w18, v0.b[13]\nmov v2.b[9], w11\numov w11, v1.b[12]\nsub w16, w16, w16, lsl #3\nmov v3.b[9], w12\numull x12, w14, w8\nsub w15, w15, w15, lsl #3\nadd w16, w0, w16\nmsub w17, w1, w9, w17\numov w1, v1.b[13]\nadd w15, w2, w15\numull x0, w13, w10\nlsr x12, x12, #32\numull x2, w11, w10\nmov v2.b[10], w16\nmov v3.b[10], w15\numull x16, w18, w8\numov w15, v0.b[14]\nmsub w12, w12, w9, w14\nlsr x0, x0, #32\numov w14, v1.b[14]\nlsr x2, x2, #32\nmov v2.b[11], w17\numull x17, w1, w8\nsub w0, w0, w0, lsl #3\nmov v3.b[11], w12\nsub w2, w2, w2, lsl #3\nlsr x16, x16, #32\nadd w13, w13, w0\numov w12, v0.b[15]\nadd w11, w11, w2\nlsr x17, x17, #32\nmsub w16, w16, w9, w18\nmov v2.b[12], w13\numull x13, w15, w10\nmov v3.b[12], w11\numull x10, w14, w10\numov w11, v1.b[15]\nmsub w17, w17, w9, w1\nlsr x13, x13, #32\numull x18, w12, w8\nlsr x10, x10, #32\nmov v2.b[13], w16\nmov v3.b[13], w17\numull x8, w11, w8\nsub w13, w13, w13, lsl #3\nsub w10, w10, w10, lsl #3\nlsr x16, x18, #32\nadd w13, w15, w13\nadd w10, w14, w10\nlsr x8, x8, #32\nmov v2.b[14], w13\nmov v3.b[14], w10\nmsub w12, w16, w9, w12\nmsub w8, w8, w9, w11\nmov v2.b[15], w12\nmov v3.b[15], w8\nmov v0.16b, v2.16b\nmov v1.16b, v3.16b\nret",
  "giasm": "sub sp, sp, #112\nstp x29, x30, [sp, #16]             // 16-byte Folded Spill\nstp x28, x27, [sp, #32]             // 16-byte Folded Spill\nstp x26, x25, [sp, #48]             // 16-byte Folded Spill\nstp x24, x23, [sp, #64]             // 16-byte Folded Spill\nstp x22, x21, [sp, #80]             // 16-byte Folded Spill\nstp x20, x19, [sp, #96]             // 16-byte Folded Spill\nushll v2.8h, v0.8b, #0\nushll v4.8h, v1.8b, #0\nmov w8, #7                          // =0x7\nushll v3.4s, v2.4h, #0\nushll2 v2.4s, v2.8h, #0\nushll v5.4s, v4.4h, #0\nushll2 v4.4s, v4.8h, #0\nfmov w9, s3\nmov w10, v3.s[1]\nfmov w12, s2\nfmov w20, s4\nfmov w5, s5\nudiv w14, w9, w8\nmov w9, #6                          // =0x6\nudiv w1, w12, w8\nmov w12, v2.s[1]\nmov v6.s[0], w14\nudiv w15, w10, w9\nmov w10, v3.s[2]\nmov v7.s[0], w1\nudiv w0, w12, w9\nmov w12, v2.s[2]\nmov v6.s[1], w15\nudiv w25, w20, w8\nmov w20, v4.s[1]\nmov v7.s[1], w0\nudiv w11, w10, w8\nmov w10, v3.s[3]\nushll2 v3.8h, v0.16b, #0\nmov v19.s[0], w25\nushll v0.8h, v0.8b, #0\nushll v24.4s, v0.4h, #0\nushll2 v0.4s, v0.8h, #0\nudiv w23, w5, w8\nmov w5, v5.s[1]\nmov v6.s[2], w11\nadrp x11, .LCPI0_0\nldr d22, [x11, :lo12:.LCPI0_0]\nushll v22.8h, v22.8b, #0\nushll v23.4s, v22.4h, #0\nushll2 v22.4s, v22.8h, #0\nudiv w16, w12, w8\nmov w12, v2.s[3]\nushll v2.4s, v3.4h, #0\nmov v18.s[0], w23\nfmov w13, s2\nudiv w26, w20, w9\nmov w20, v4.s[2]\nmov v7.s[2], w16\nudiv w21, w5, w9\nmov w5, v5.s[2]\nmov v19.s[1], w26\nldp x26, x25, [sp, #48]             // 16-byte Folded Reload\nudiv w22, w20, w8\nmov w20, v4.s[3]\nushll2 v4.8h, v1.16b, #0\nmov v18.s[1], w21\nushll v1.8h, v1.8b, #0\nushll v25.4s, v1.4h, #0\nushll2 v1.4s, v1.8h, #0\nudiv w4, w13, w8\nmov w13, v2.s[1]\nmov v19.s[2], w22\nldp x22, x21, [sp, #80]             // 16-byte Folded Reload\nudiv w7, w5, w8\nmov w5, v5.s[3]\nushll v5.4s, v4.4h, #0\nmov v16.s[0], w4\nfmov w24, s5\nudiv w2, w13, w9\nmov w13, v2.s[2]\nmov v18.s[2], w7\nudiv w27, w24, w8\nmov w24, v5.s[1]\nmov v16.s[1], w2\nudiv w17, w13, w8\nmov w13, v2.s[3]\nushll2 v2.4s, v3.8h, #0\nmov v20.s[0], w27\nushll v3.4s, v3.4h, #0\nfmov w18, s2\nudiv w10, w10, w9\nmov v16.s[2], w17\nudiv w28, w24, w9\nmov w24, v5.s[2]\nstr w10, [sp, #12]                  // 4-byte Folded Spill\nudiv w19, w18, w8\nmov w18, v2.s[1]\nmov v20.s[1], w28\nldp x28, x27, [sp, #32]             // 16-byte Folded Reload\nudiv w29, w24, w8\nmov w24, v5.s[3]\nushll2 v5.4s, v4.8h, #0\nmov v17.s[0], w19\nushll v4.4s, v4.4h, #0\nmov w10, v5.s[2]\nfmov w30, s5\nmov w14, v5.s[3]\nudiv w6, w18, w9\nmov w18, v2.s[2]\nmov v20.s[2], w29\nudiv w3, w18, w8\nmov w18, v2.s[3]\nmov v17.s[1], w6\nudiv w30, w30, w8\nmov v17.s[2], w3\nudiv w8, w10, w8\nmov w10, v5.s[1]\nmov v21.s[0], w30\nldp x29, x30, [sp, #16]             // 16-byte Folded Reload\nudiv w10, w10, w9\nudiv w12, w12, w9\nmov v21.s[1], w10\nldr w10, [sp, #12]                  // 4-byte Folded Reload\nmov v6.s[3], w10\nmov v21.s[2], w8\nmls v24.4s, v6.4s, v23.4s\nudiv w13, w13, w9\nmov v7.s[3], w12\nmls v0.4s, v7.4s, v22.4s\nudiv w18, w18, w9\nmov v16.s[3], w13\nuzp1 v0.8h, v24.8h, v0.8h\nmls v3.4s, v16.4s, v23.4s\nudiv w5, w5, w9\nmov v17.s[3], w18\nmls v2.4s, v17.4s, v22.4s\nudiv w20, w20, w9\nmov v18.s[3], w5\nuzp1 v2.8h, v3.8h, v2.8h\nmls v25.4s, v18.4s, v23.4s\nuzp1 v0.16b, v0.16b, v2.16b\nudiv w24, w24, w9\nmov v19.s[3], w20\nldp x20, x19, [sp, #96]             // 16-byte Folded Reload\nmls v1.4s, v19.4s, v22.4s\nudiv w9, w14, w9\nmov v20.s[3], w24\nuzp1 v1.8h, v25.8h, v1.8h\nldp x24, x23, [sp, #64]             // 16-byte Folded Reload\nmls v4.4s, v20.4s, v23.4s\nmov v21.s[3], w9\nmls v5.4s, v21.4s, v22.4s\nuzp1 v3.8h, v4.8h, v5.8h\nuzp1 v1.16b, v1.16b, v3.16b\nadd sp, sp, #112\nret",
  "ll": "define <32 x i8> @test(<32 x i8> %a) {\n  %r = urem <32 x i8> %a, <i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6>\n  ret <32 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = urem <32 x i8> %a, <i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6>\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i8> %r"
 },
 {
  "instr": "urem",
  "ty": "<32 x i8>",
  "variant": "binopsplat",
  "codesize": 7,
  "thru": 228,
  "lat": 8,
  "sizelat": 8,
  "size": 177,
  "gisize": 193,
  "extrasize": 0,
  "asm": "sub sp, sp, #192\nstp x29, x30, [sp, #96]             // 16-byte Folded Spill\nstp x28, x27, [sp, #112]            // 16-byte Folded Spill\nstp x26, x25, [sp, #128]            // 16-byte Folded Spill\nstp x24, x23, [sp, #144]            // 16-byte Folded Spill\nstp x22, x21, [sp, #160]            // 16-byte Folded Spill\nstp x20, x19, [sp, #176]            // 16-byte Folded Spill\numov w29, v0.b[0]\numov w30, v0.b[2]\nand w8, w0, #0xff\numov w23, v0.b[1]\numov w25, v0.b[4]\numov w24, v0.b[3]\numov w20, v0.b[6]\numov w21, v0.b[5]\numov w22, v0.b[8]\numov w28, v0.b[9]\numov w26, v0.b[7]\numov w12, v1.b[3]\nudiv w11, w29, w8\numov w13, v1.b[4]\numov w14, v1.b[5]\numov w15, v1.b[6]\numov w16, v1.b[7]\numov w17, v1.b[8]\numov w18, v1.b[9]\nudiv w9, w30, w8\nudiv w10, w23, w8\nstp w9, w11, [sp, #8]               // 8-byte Folded Spill\nudiv w9, w25, w8\nudiv w11, w24, w8\nstp w10, w9, [sp, #20]              // 8-byte Folded Spill\nldr w27, [sp, #20]                  // 4-byte Folded Reload\nmsub w23, w27, w8, w23\nldr w27, [sp, #12]                  // 4-byte Folded Reload\nmsub w29, w27, w8, w29\nudiv w9, w20, w8\nudiv w10, w21, w8\nstp w11, w9, [sp, #28]              // 8-byte Folded Spill\nudiv w9, w22, w8\nstp w10, w9, [sp, #36]              // 8-byte Folded Spill\nudiv w9, w28, w8\nstr w9, [sp, #52]                   // 4-byte Folded Spill\numov w9, v0.b[10]\nudiv w11, w26, w8\nstr w9, [sp, #16]                   // 4-byte Folded Spill\nudiv w9, w9, w8\nstp w11, w9, [sp, #44]              // 8-byte Folded Spill\numov w9, v0.b[11]\nudiv w3, w12, w8\nstr w9, [sp, #60]                   // 4-byte Folded Spill\nudiv w11, w9, w8\numov w9, v0.b[12]\nstr w9, [sp, #56]                   // 4-byte Folded Spill\nudiv w10, w9, w8\numov w9, v0.b[13]\nstr w9, [sp, #84]                   // 4-byte Folded Spill\nstp w10, w11, [sp, #64]             // 8-byte Folded Spill\nudiv w11, w9, w8\numov w9, v0.b[14]\nstr w9, [sp, #80]                   // 4-byte Folded Spill\nudiv w10, w9, w8\numov w9, v0.b[15]\nfmov s0, w29\nmov v0.b[1], w23\nstp w10, w11, [sp, #88]             // 8-byte Folded Spill\nudiv w10, w9, w8\numov w11, v1.b[1]\nstp w9, w10, [sp, #72]              // 8-byte Folded Spill\numov w9, v1.b[0]\nudiv w4, w11, w8\numov w10, v1.b[2]\nudiv w0, w9, w8\nmsub w11, w4, w8, w11\nmsub w9, w0, w8, w9\nudiv w1, w10, w8\nfmov s2, w9\nldr w9, [sp, #8]                    // 4-byte Folded Reload\nmsub w9, w9, w8, w30\nldp x29, x30, [sp, #96]             // 16-byte Folded Reload\nmov v2.b[1], w11\numov w11, v1.b[10]\nmov v0.b[2], w9\nldr w9, [sp, #28]                   // 4-byte Folded Reload\nudiv w2, w13, w8\nmsub w10, w1, w8, w10\nmsub w9, w9, w8, w24\nldp x24, x23, [sp, #144]            // 16-byte Folded Reload\nmov v2.b[2], w10\nmsub w10, w3, w8, w12\nmov v0.b[3], w9\nldr w9, [sp, #24]                   // 4-byte Folded Reload\nmsub w9, w9, w8, w25\nudiv w6, w14, w8\nmov v2.b[3], w10\nmsub w10, w2, w8, w13\numov w13, v1.b[11]\nmov v0.b[4], w9\nldr w9, [sp, #36]                   // 4-byte Folded Reload\nmsub w9, w9, w8, w21\nmov v2.b[4], w10\nmov v0.b[5], w9\nldr w9, [sp, #32]                   // 4-byte Folded Reload\nudiv w5, w15, w8\nmsub w10, w6, w8, w14\nmsub w9, w9, w8, w20\nmov v2.b[5], w10\nmov v0.b[6], w9\nldr w9, [sp, #44]                   // 4-byte Folded Reload\nmsub w9, w9, w8, w26\nldp x26, x25, [sp, #128]            // 16-byte Folded Reload\nudiv w19, w16, w8\nmsub w10, w5, w8, w15\numov w15, v1.b[12]\nmov v0.b[7], w9\nldr w9, [sp, #40]                   // 4-byte Folded Reload\nmsub w9, w9, w8, w22\nmov v2.b[6], w10\nldp x22, x21, [sp, #160]            // 16-byte Folded Reload\nmov v0.b[8], w9\nldr w9, [sp, #52]                   // 4-byte Folded Reload\nudiv w7, w17, w8\nmsub w10, w19, w8, w16\nmsub w9, w9, w8, w28\nldp x20, x19, [sp, #176]            // 16-byte Folded Reload\nldp x28, x27, [sp, #112]            // 16-byte Folded Reload\nmov v2.b[7], w10\nmov v0.b[9], w9\nldr w9, [sp, #48]                   // 4-byte Folded Reload\nudiv w0, w18, w8\nmsub w10, w7, w8, w17\numov w17, v1.b[13]\nmov v2.b[8], w10\nudiv w12, w11, w8\nmsub w10, w0, w8, w18\nldr w0, [sp, #16]                   // 4-byte Folded Reload\nmsub w9, w9, w8, w0\nmov v2.b[9], w10\nmov v0.b[10], w9\nldr w9, [sp, #68]                   // 4-byte Folded Reload\nudiv w14, w13, w8\nmsub w10, w12, w8, w11\nldr w12, [sp, #60]                  // 4-byte Folded Reload\nmsub w9, w9, w8, w12\numov w11, v1.b[14]\nmov v2.b[10], w10\nmov v0.b[11], w9\nldr w9, [sp, #64]                   // 4-byte Folded Reload\nudiv w16, w15, w8\nmsub w10, w14, w8, w13\nldr w13, [sp, #56]                  // 4-byte Folded Reload\nmsub w9, w9, w8, w13\numov w13, v1.b[15]\nmov v2.b[11], w10\nmov v0.b[12], w9\nldr w9, [sp, #92]                   // 4-byte Folded Reload\nudiv w18, w17, w8\nmsub w10, w16, w8, w15\nldp w15, w14, [sp, #80]             // 8-byte Folded Reload\nmsub w9, w9, w8, w14\nmov v2.b[12], w10\nmov v0.b[13], w9\nldr w9, [sp, #88]                   // 4-byte Folded Reload\nmsub w9, w9, w8, w15\nudiv w12, w11, w8\nmsub w10, w18, w8, w17\nmov v0.b[14], w9\nmov v2.b[13], w10\nudiv w14, w13, w8\nmsub w10, w12, w8, w11\nldp w11, w9, [sp, #72]              // 8-byte Folded Reload\nmov v2.b[14], w10\nmsub w9, w9, w8, w11\nmov v0.b[15], w9\nmsub w8, w14, w8, w13\nmov v2.b[15], w8\nmov v1.16b, v2.16b\nadd sp, sp, #192\nret",
  "giasm": "sub sp, sp, #112\nstp x29, x30, [sp, #16]             // 16-byte Folded Spill\nstp x28, x27, [sp, #32]             // 16-byte Folded Spill\nstp x26, x25, [sp, #48]             // 16-byte Folded Spill\nstp x24, x23, [sp, #64]             // 16-byte Folded Spill\nstp x22, x21, [sp, #80]             // 16-byte Folded Spill\nstp x20, x19, [sp, #96]             // 16-byte Folded Spill\ndup v2.16b, w0\nushll v3.8h, v0.8b, #0\nushll v7.8h, v1.8b, #0\nushll v4.8h, v2.8b, #0\nushll v16.8h, v2.8b, #0\nushll v5.4s, v3.4h, #0\nushll v17.4s, v7.4h, #0\nushll2 v3.4s, v3.8h, #0\nushll2 v7.4s, v7.8h, #0\nushll v26.8h, v2.8b, #0\nushll v6.4s, v4.4h, #0\nushll v18.4s, v16.4h, #0\nfmov w8, s5\nfmov w2, s17\nushll2 v4.4s, v4.8h, #0\nushll2 v16.4s, v16.8h, #0\nushll v28.4s, v26.4h, #0\nushll2 v26.4s, v26.8h, #0\nfmov w9, s6\nfmov w5, s18\nmov w19, v18.s[3]\nfmov w13, s4\nfmov w23, s16\nmov w14, v4.s[3]\nmov w24, v16.s[3]\nudiv w12, w8, w9\nmov w8, v5.s[1]\nmov w9, v6.s[1]\nudiv w22, w2, w5\nmov w2, v17.s[1]\nmov w5, v18.s[1]\nudiv w11, w8, w9\nmov w8, v5.s[2]\nmov w9, v6.s[2]\nmov v21.s[0], w22\nudiv w21, w2, w5\nmov w2, v17.s[2]\nmov w5, v18.s[2]\nudiv w10, w8, w9\nmov w8, v5.s[3]\nmov w9, v6.s[3]\nushll2 v6.8h, v0.16b, #0\nmov v21.s[1], w21\nushll v0.8h, v0.8b, #0\nldp x22, x21, [sp, #80]             // 16-byte Folded Reload\nushll v25.4s, v0.4h, #0\nushll2 v0.4s, v0.8h, #0\nudiv w5, w2, w5\nmov w2, v17.s[3]\nudiv w8, w8, w9\nfmov w9, s3\nmov v21.s[2], w5\nudiv w2, w2, w19\nfmov w19, s7\nstr w8, [sp, #12]                   // 4-byte Folded Spill\nudiv w16, w9, w13\nmov w9, v3.s[1]\nmov w13, v4.s[1]\nmov v21.s[3], w2\nudiv w26, w19, w23\nmov w19, v7.s[1]\nmov w23, v16.s[1]\nmov v18.s[0], w16\nudiv w15, w9, w13\nmov w9, v3.s[2]\nmov w13, v4.s[2]\nushll v4.4s, v6.4h, #0\nmov v22.s[0], w26\nudiv w25, w19, w23\nmov w19, v7.s[2]\nmov w23, v16.s[2]\nmov v18.s[1], w15\nudiv w13, w9, w13\nmov w9, v3.s[3]\nushll2 v3.8h, v2.16b, #0\nmov v22.s[1], w25\nushll v2.8h, v2.8b, #0\nldp x26, x25, [sp, #48]             // 16-byte Folded Reload\nushll v5.4s, v3.4h, #0\nushll v17.4s, v3.4h, #0\nushll v29.4s, v3.4h, #0\nushll v30.4s, v2.4h, #0\nushll2 v2.4s, v2.8h, #0\nfmov w17, s5\nfmov w27, s17\nmov w28, v17.s[1]\nmov w29, v17.s[2]\nmov w1, v5.s[3]\nmov w30, v17.s[3]\nudiv w23, w19, w23\nmov w19, v7.s[3]\nushll2 v7.8h, v1.16b, #0\nmov v17.s[0], w12\nmov v18.s[2], w13\nushll v1.8h, v1.8b, #0\nushll v16.4s, v7.4h, #0\nushll v27.4s, v1.4h, #0\nushll2 v1.4s, v1.8h, #0\nmov v17.s[1], w11\nmls v27.4s, v21.4s, v30.4s\nudiv w9, w9, w14\nfmov w14, s4\nmov v22.s[2], w23\nmov v17.s[2], w10\nldr w10, [sp, #12]                  // 4-byte Folded Reload\nmov v17.s[3], w10\nudiv w19, w19, w24\nfmov w24, s16\nmov v18.s[3], w9\nmls v25.4s, v17.4s, v28.4s\nmls v0.4s, v18.4s, v26.4s\nudiv w0, w14, w17\nmov w14, v4.s[1]\nmov w17, v5.s[1]\nmov v22.s[3], w19\nuzp1 v0.8h, v25.8h, v0.8h\nmls v1.4s, v22.4s, v2.4s\nudiv w27, w24, w27\nmov w24, v16.s[1]\nmov v19.s[0], w0\nuzp1 v1.8h, v27.8h, v1.8h\nudiv w18, w14, w17\nmov w14, v4.s[2]\nmov w17, v5.s[2]\nushll2 v5.4s, v3.8h, #0\nmov v23.s[0], w27\nushll v3.4s, v3.4h, #0\nfmov w6, s5\nmov w7, v5.s[1]\nmov w20, v5.s[2]\nmov w8, v5.s[3]\nudiv w28, w24, w28\nmov w24, v16.s[2]\nmov v19.s[1], w18\nudiv w17, w14, w17\nmov w14, v4.s[3]\nushll2 v4.4s, v6.8h, #0\nmov v23.s[1], w28\nushll v6.4s, v6.4h, #0\nldp x28, x27, [sp, #32]             // 16-byte Folded Reload\nudiv w29, w24, w29\nmov w24, v16.s[3]\nushll2 v16.4s, v7.8h, #0\nmov v19.s[2], w17\nushll v7.4s, v7.4h, #0\nmov w11, v16.s[3]\nudiv w14, w14, w1\nfmov w1, s4\nmov v23.s[2], w29\nudiv w24, w24, w30\nfmov w30, s16\nmov v19.s[3], w14\nmls v6.4s, v19.4s, v29.4s\nudiv w4, w1, w6\nmov w1, v4.s[1]\nmov v23.s[3], w24\nldp x24, x23, [sp, #64]             // 16-byte Folded Reload\nmls v7.4s, v23.4s, v3.4s\nudiv w6, w30, w6\nmov w30, v16.s[1]\nmov v20.s[0], w4\nudiv w3, w1, w7\nmov w1, v4.s[2]\nmov v24.s[0], w6\nudiv w7, w30, w7\nmov w30, v16.s[2]\nmov v20.s[1], w3\nudiv w1, w1, w20\nmov v24.s[1], w7\nudiv w20, w30, w20\nmov w30, v4.s[3]\nmov v20.s[2], w1\nudiv w12, w30, w8\nmov v24.s[2], w20\nldp x20, x19, [sp, #96]             // 16-byte Folded Reload\nldp x29, x30, [sp, #16]             // 16-byte Folded Reload\nudiv w8, w11, w8\nmov v20.s[3], w12\nmls v4.4s, v20.4s, v5.4s\nmov v24.s[3], w8\nuzp1 v2.8h, v6.8h, v4.8h\nmls v16.4s, v24.4s, v5.4s\nuzp1 v0.16b, v0.16b, v2.16b\nuzp1 v3.8h, v7.8h, v16.8h\nuzp1 v1.16b, v1.16b, v3.16b\nadd sp, sp, #112\nret",
  "ll": "define <32 x i8> @test(<32 x i8> %a, i8 %bs) {\n  %i = insertelement <32 x i8> poison, i8 %bs, i64 0\n  %b = shufflevector <32 x i8> %i, <32 x i8> poison, <32 x i32> zeroinitializer\n  %r = urem <32 x i8> %a, %b\n  ret <32 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <32 x i8> poison, i8 %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <32 x i8> %i, <32 x i8> poison, <32 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = urem <32 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i8> %r"
 },
 {
  "instr": "urem",
  "ty": "<32 x i8>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 16,
  "lat": 4,
  "sizelat": 4,
  "size": 194,
  "gisize": 151,
  "extrasize": 0,
  "asm": "umov w10, v0.b[0]\numov w13, v1.b[0]\nmov w8, #18725                      // =0x4925\nmovk w8, #9362, lsl #16\numov w9, v0.b[1]\numov w12, v1.b[1]\numov w17, v0.b[2]\numov w0, v1.b[2]\numov w1, v1.b[3]\numull x14, w10, w8\numull x16, w13, w8\numull x11, w9, w8\numull x15, w12, w8\nlsr x14, x14, #32\nlsr x16, x16, #32\numull x2, w17, w8\nsub w14, w14, w14, lsl #3\nlsr x18, x11, #32\numov w11, v0.b[3]\nsub w16, w16, w16, lsl #3\nlsr x15, x15, #32\nadd w10, w10, w14\numull x14, w0, w8\nsub w18, w18, w18, lsl #3\nadd w13, w13, w16\nsub w15, w15, w15, lsl #3\nfmov s2, w10\nfmov s3, w13\nadd w18, w9, w18\nlsr x10, x2, #32\nadd w12, w12, w15\nlsr x14, x14, #32\numov w9, v0.b[4]\numov w15, v1.b[4]\numull x16, w11, w8\nmov v2.b[1], w18\numull x13, w1, w8\nmov v3.b[1], w12\nsub w2, w10, w10, lsl #3\nsub w12, w14, w14, lsl #3\numov w10, v0.b[5]\numov w18, v1.b[5]\nadd w14, w17, w2\nlsr x16, x16, #32\numull x17, w9, w8\nadd w12, w0, w12\nlsr x13, x13, #32\numull x0, w15, w8\nmov v2.b[2], w14\nmov v3.b[2], w12\nsub w16, w16, w16, lsl #3\nsub w13, w13, w13, lsl #3\nlsr x17, x17, #32\numov w12, v0.b[6]\nadd w11, w11, w16\nlsr x0, x0, #32\numov w14, v1.b[6]\nadd w13, w1, w13\numull x16, w10, w8\nsub w17, w17, w17, lsl #3\numull x1, w18, w8\nmov v2.b[3], w11\nmov v3.b[3], w13\nsub w0, w0, w0, lsl #3\nadd w9, w9, w17\numov w11, v0.b[7]\nlsr x16, x16, #32\numov w13, v1.b[7]\numull x17, w12, w8\nadd w15, w15, w0\nlsr x1, x1, #32\numull x0, w14, w8\nmov v2.b[4], w9\nmov v3.b[4], w15\nsub w16, w16, w16, lsl #3\nsub w1, w1, w1, lsl #3\nlsr x17, x17, #32\numov w9, v0.b[8]\nadd w10, w10, w16\nlsr x0, x0, #32\numov w15, v1.b[8]\nadd w18, w18, w1\numull x16, w11, w8\nsub w17, w17, w17, lsl #3\numull x1, w13, w8\nmov v2.b[5], w10\nmov v3.b[5], w18\nsub w0, w0, w0, lsl #3\nadd w12, w12, w17\numov w10, v0.b[9]\nlsr x16, x16, #32\numov w18, v1.b[9]\numull x17, w9, w8\nadd w14, w14, w0\nlsr x1, x1, #32\numull x0, w15, w8\nmov v2.b[6], w12\nmov v3.b[6], w14\nsub w16, w16, w16, lsl #3\nsub w1, w1, w1, lsl #3\numov w12, v0.b[10]\nlsr x17, x17, #32\nadd w11, w11, w16\nlsr x0, x0, #32\numov w14, v1.b[10]\nadd w13, w13, w1\numull x16, w10, w8\nsub w17, w17, w17, lsl #3\numull x1, w18, w8\nmov v2.b[7], w11\nmov v3.b[7], w13\nsub w0, w0, w0, lsl #3\nadd w9, w9, w17\numull x17, w12, w8\nlsr x16, x16, #32\numov w11, v0.b[11]\numov w13, v1.b[11]\nadd w15, w15, w0\nlsr x1, x1, #32\numull x0, w14, w8\nmov v2.b[8], w9\nmov v3.b[8], w15\nsub w16, w16, w16, lsl #3\nsub w1, w1, w1, lsl #3\numov w9, v0.b[12]\nlsr x17, x17, #32\nadd w10, w10, w16\nlsr x0, x0, #32\numov w15, v1.b[12]\nadd w18, w18, w1\numull x16, w11, w8\nsub w17, w17, w17, lsl #3\numull x1, w13, w8\nmov v2.b[9], w10\nmov v3.b[9], w18\nsub w0, w0, w0, lsl #3\nadd w12, w12, w17\numull x17, w9, w8\nlsr x16, x16, #32\numov w10, v0.b[13]\numov w18, v1.b[13]\nadd w14, w14, w0\nlsr x1, x1, #32\numull x0, w15, w8\nmov v2.b[10], w12\nmov v3.b[10], w14\nsub w12, w16, w16, lsl #3\nlsr x16, x17, #32\nsub w17, w1, w1, lsl #3\numov w14, v0.b[14]\nadd w11, w11, w12\nlsr x0, x0, #32\numull x12, w10, w8\nadd w13, w13, w17\numull x17, w18, w8\nsub w16, w16, w16, lsl #3\nmov v2.b[11], w11\nmov v3.b[11], w13\numov w11, v1.b[14]\nsub w0, w0, w0, lsl #3\nadd w9, w9, w16\nlsr x12, x12, #32\nlsr x17, x17, #32\numov w13, v0.b[15]\numov w16, v1.b[15]\nadd w15, w15, w0\nsub w12, w12, w12, lsl #3\nmov v2.b[12], w9\numull x9, w14, w8\nmov v3.b[12], w15\numull x15, w11, w8\nsub w17, w17, w17, lsl #3\nadd w10, w10, w12\nadd w12, w18, w17\nlsr x9, x9, #32\nlsr x15, x15, #32\nmov v2.b[13], w10\numull x10, w13, w8\nmov v3.b[13], w12\numull x8, w16, w8\nsub w9, w9, w9, lsl #3\nsub w12, w15, w15, lsl #3\nadd w9, w14, w9\nlsr x10, x10, #32\nadd w11, w11, w12\nlsr x8, x8, #32\nmov v2.b[14], w9\nmov v3.b[14], w11\nsub w9, w10, w10, lsl #3\nsub w8, w8, w8, lsl #3\nadd w9, w13, w9\nadd w8, w16, w8\nmov v2.b[15], w9\nmov v3.b[15], w8\nmov v0.16b, v2.16b\nmov v1.16b, v3.16b\nret",
  "giasm": "sub sp, sp, #112\nstp x29, x30, [sp, #16]             // 16-byte Folded Spill\nstp x28, x27, [sp, #32]             // 16-byte Folded Spill\nstp x26, x25, [sp, #48]             // 16-byte Folded Spill\nstp x24, x23, [sp, #64]             // 16-byte Folded Spill\nstp x22, x21, [sp, #80]             // 16-byte Folded Spill\nstp x20, x19, [sp, #96]             // 16-byte Folded Spill\nushll v2.8h, v0.8b, #0\nushll v4.8h, v1.8b, #0\nmov w8, #7                          // =0x7\nmovi v22.8b, #7\nushll v3.4s, v2.4h, #0\nushll v5.4s, v4.4h, #0\nushll2 v4.4s, v4.8h, #0\nushll2 v2.4s, v2.8h, #0\nushll v22.8h, v22.8b, #0\nfmov w9, s3\nfmov w19, s4\nfmov w4, s5\nfmov w11, s2\nushll v23.4s, v22.4h, #0\nushll2 v22.4s, v22.8h, #0\nudiv w13, w9, w8\nmov w9, v3.s[1]\nudiv w24, w19, w8\nmov w19, v4.s[1]\nmov v6.s[0], w13\nudiv w0, w11, w8\nmov w11, v2.s[1]\nmov v19.s[0], w24\nudiv w22, w4, w8\nmov w4, v5.s[1]\nmov v7.s[0], w0\nudiv w12, w9, w8\nmov w9, v3.s[2]\nmov v18.s[0], w22\nudiv w25, w19, w8\nmov w19, v4.s[2]\nmov v6.s[1], w12\nudiv w17, w11, w8\nmov w11, v2.s[2]\nmov v19.s[1], w25\nudiv w20, w4, w8\nmov w4, v5.s[2]\nmov v7.s[1], w17\nudiv w10, w9, w8\nmov w9, v3.s[3]\nushll2 v3.8h, v0.16b, #0\nmov v18.s[1], w20\nushll v0.8h, v0.8b, #0\nushll v24.4s, v0.4h, #0\nushll2 v0.4s, v0.8h, #0\nudiv w21, w19, w8\nmov w19, v4.s[3]\nushll2 v4.8h, v1.16b, #0\nmov v6.s[2], w10\nushll v1.8h, v1.8b, #0\nushll v25.4s, v1.4h, #0\nushll2 v1.4s, v1.8h, #0\nudiv w15, w11, w8\nmov w11, v2.s[3]\nushll v2.4s, v3.4h, #0\nmov v19.s[2], w21\nldp x22, x21, [sp, #80]             // 16-byte Folded Reload\nfmov w14, s2\nudiv w6, w4, w8\nmov w4, v5.s[3]\nushll v5.4s, v4.4h, #0\nmov v7.s[2], w15\nfmov w23, s5\nudiv w3, w14, w8\nmov w14, v2.s[1]\nmov v18.s[2], w6\nudiv w26, w23, w8\nmov w23, v5.s[1]\nmov v16.s[0], w3\nudiv w1, w14, w8\nmov w14, v2.s[2]\nmov v20.s[0], w26\nldp x26, x25, [sp, #48]             // 16-byte Folded Reload\nudiv w27, w23, w8\nmov w23, v5.s[2]\nmov v16.s[1], w1\nudiv w16, w14, w8\nmov w14, v2.s[3]\nushll2 v2.4s, v3.8h, #0\nmov v20.s[1], w27\nushll v3.4s, v3.4h, #0\nfmov w18, s2\nudiv w28, w23, w8\nmov w23, v5.s[3]\nushll2 v5.4s, v4.8h, #0\nmov v16.s[2], w16\nushll v4.4s, v4.4h, #0\nfmov w29, s5\nmov w30, v5.s[1]\nmov w12, v5.s[3]\nudiv w9, w9, w8\nmov v20.s[2], w28\nldp x28, x27, [sp, #32]             // 16-byte Folded Reload\nudiv w7, w18, w8\nmov w18, v2.s[1]\nstr w9, [sp, #12]                   // 4-byte Folded Spill\nmov w9, v5.s[2]\nldr w10, [sp, #12]                  // 4-byte Folded Reload\nmov v6.s[3], w10\nmls v24.4s, v6.4s, v23.4s\nudiv w29, w29, w8\nmov v17.s[0], w7\nudiv w5, w18, w8\nmov w18, v2.s[2]\nmov v21.s[0], w29\nudiv w30, w30, w8\nmov v17.s[1], w5\nudiv w2, w18, w8\nmov w18, v2.s[3]\nmov v21.s[1], w30\nldp x29, x30, [sp, #16]             // 16-byte Folded Reload\nudiv w9, w9, w8\nmov v17.s[2], w2\nudiv w11, w11, w8\nmov v21.s[2], w9\nudiv w14, w14, w8\nmov v7.s[3], w11\nmls v0.4s, v7.4s, v22.4s\nudiv w18, w18, w8\nmov v16.s[3], w14\nuzp1 v0.8h, v24.8h, v0.8h\nmls v3.4s, v16.4s, v23.4s\nudiv w4, w4, w8\nmov v17.s[3], w18\nmls v2.4s, v17.4s, v22.4s\nudiv w19, w19, w8\nmov v18.s[3], w4\nuzp1 v2.8h, v3.8h, v2.8h\nmls v25.4s, v18.4s, v23.4s\nuzp1 v0.16b, v0.16b, v2.16b\nudiv w23, w23, w8\nmov v19.s[3], w19\nldp x20, x19, [sp, #96]             // 16-byte Folded Reload\nmls v1.4s, v19.4s, v22.4s\nudiv w8, w12, w8\nmov v20.s[3], w23\nuzp1 v1.8h, v25.8h, v1.8h\nldp x24, x23, [sp, #64]             // 16-byte Folded Reload\nmls v4.4s, v20.4s, v23.4s\nmov v21.s[3], w8\nmls v5.4s, v21.4s, v22.4s\nuzp1 v3.8h, v4.8h, v5.8h\nuzp1 v1.16b, v1.16b, v3.16b\nadd sp, sp, #112\nret",
  "ll": "define <32 x i8> @test(<32 x i8> %a) {\n  %r = urem <32 x i8> %a, splat (i8 7)\n  ret <32 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = urem <32 x i8> %a, splat (i8 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i8> %r"
 },
 {
  "instr": "urem",
  "ty": "<4 x i16>",
  "variant": "binop",
  "codesize": 4,
  "thru": 28,
  "lat": 4,
  "sizelat": 4,
  "size": 20,
  "gisize": 20,
  "extrasize": 0,
  "asm": "umov w11, v1.h[0]\numov w12, v0.h[0]\numov w8, v1.h[1]\numov w9, v0.h[1]\numov w14, v1.h[2]\numov w15, v0.h[2]\numov w17, v1.h[3]\numov w18, v0.h[3]\nudiv w13, w12, w11\nudiv w10, w9, w8\nmsub w11, w13, w11, w12\nfmov s0, w11\nudiv w16, w15, w14\nmsub w8, w10, w8, w9\nmov v0.h[1], w8\nudiv w9, w18, w17\nmsub w8, w16, w14, w15\nmov v0.h[2], w8\nmsub w8, w9, w17, w18\nmov v0.h[3], w8\nret",
  "giasm": "ushll v0.4s, v0.4h, #0\nushll v1.4s, v1.4h, #0\nfmov w8, s0\nfmov w9, s1\nmov w10, v1.s[1]\nmov w11, v1.s[2]\nmov w12, v1.s[3]\nudiv w8, w8, w9\nmov w9, v0.s[1]\nudiv w9, w9, w10\nmov w10, v0.s[2]\nmov v2.s[0], w8\nudiv w10, w10, w11\nmov w11, v0.s[3]\nmov v2.s[1], w9\nudiv w8, w11, w12\nmov v2.s[2], w10\nmov v2.s[3], w8\nmls v0.4s, v2.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i16> @test(<4 x i16> %a, <4 x i16> %b) {\n  %r = urem <4 x i16> %a, %b\n  ret <4 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = urem <4 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i16> %r"
 },
 {
  "instr": "urem",
  "ty": "<4 x i16>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 7,
  "lat": 4,
  "sizelat": 4,
  "size": 13,
  "gisize": 20,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nmovi v2.2s, #128, lsl #8\nldr d1, [x8, :lo12:.LCPI0_0]\nadrp x8, .LCPI0_1\numull v1.4s, v0.4h, v1.4h\nshrn v1.4h, v1.4s, #16\nsub v3.4h, v0.4h, v1.4h\numull v2.4s, v3.4h, v2.4h\nshrn v2.4h, v2.4s, #16\nadd v1.4h, v2.4h, v1.4h\nldr d2, [x8, :lo12:.LCPI0_1]\nushr v1.4h, v1.4h, #2\nmls v0.4h, v1.4h, v2.4h\nret",
  "giasm": "ushll v0.4s, v0.4h, #0\nmov w8, #7                          // =0x7\nmov w11, #6                         // =0x6\nfmov w9, s0\nmov w10, v0.s[1]\nmov w12, v0.s[2]\nudiv w9, w9, w8\nudiv w10, w10, w11\nmov v1.s[0], w9\nudiv w8, w12, w8\nmov w12, v0.s[3]\nmov v1.s[1], w10\nudiv w9, w12, w11\nmov v1.s[2], w8\nadrp x8, .LCPI0_0\nldr d2, [x8, :lo12:.LCPI0_0]\nushll v2.4s, v2.4h, #0\nmov v1.s[3], w9\nmls v0.4s, v1.4s, v2.4s\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i16> @test(<4 x i16> %a) {\n  %r = urem <4 x i16> %a, <i16 7, i16 6, i16 7, i16 6>\n  ret <4 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = urem <4 x i16> %a, <i16 7, i16 6, i16 7, i16 6>\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i16> %r"
 },
 {
  "instr": "urem",
  "ty": "<4 x i16>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 31,
  "lat": 7,
  "sizelat": 7,
  "size": 17,
  "gisize": 21,
  "extrasize": 0,
  "asm": "umov w11, v0.h[0]\numov w8, v0.h[1]\nand w9, w0, #0xffff\numov w13, v0.h[2]\numov w15, v0.h[3]\nudiv w12, w11, w9\nudiv w10, w8, w9\nmsub w11, w12, w9, w11\nfmov s0, w11\nudiv w14, w13, w9\nmsub w8, w10, w9, w8\nmov v0.h[1], w8\nudiv w10, w15, w9\nmsub w8, w14, w9, w13\nmov v0.h[2], w8\nmsub w8, w10, w9, w15\nmov v0.h[3], w8\nret",
  "giasm": "dup v1.4h, w0\nushll v0.4s, v0.4h, #0\nfmov w8, s0\nushll v1.4s, v1.4h, #0\nfmov w9, s1\nmov w10, v1.s[1]\nmov w11, v1.s[2]\nmov w12, v1.s[3]\nudiv w8, w8, w9\nmov w9, v0.s[1]\nudiv w9, w9, w10\nmov w10, v0.s[2]\nmov v2.s[0], w8\nudiv w10, w10, w11\nmov w11, v0.s[3]\nmov v2.s[1], w9\nudiv w8, w11, w12\nmov v2.s[2], w10\nmov v2.s[3], w8\nmls v0.4s, v2.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i16> @test(<4 x i16> %a, i16 %bs) {\n  %i = insertelement <4 x i16> poison, i16 %bs, i64 0\n  %b = shufflevector <4 x i16> %i, <4 x i16> poison, <4 x i32> zeroinitializer\n  %r = urem <4 x i16> %a, %b\n  ret <4 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <4 x i16> poison, i16 %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <4 x i16> %i, <4 x i16> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = urem <4 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i16> %r"
 },
 {
  "instr": "urem",
  "ty": "<4 x i16>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 7,
  "lat": 4,
  "sizelat": 4,
  "size": 11,
  "gisize": 18,
  "extrasize": 0,
  "asm": "mov w8, #9363                       // =0x2493\ndup v1.4h, w8\numull v1.4s, v0.4h, v1.4h\nshrn v1.4h, v1.4s, #16\nsub v2.4h, v0.4h, v1.4h\nushll v2.4s, v2.4h, #0\nshrn v2.4h, v2.4s, #1\nadd v1.4h, v2.4h, v1.4h\nmovi v2.4h, #7\nushr v1.4h, v1.4h, #2\nmls v0.4h, v1.4h, v2.4h\nret",
  "giasm": "ushll v0.4s, v0.4h, #0\nmov w8, #7                          // =0x7\nmovi v2.4h, #7\nfmov w9, s0\nmov w10, v0.s[1]\nmov w11, v0.s[2]\nmov w12, v0.s[3]\nushll v2.4s, v2.4h, #0\nudiv w9, w9, w8\nudiv w10, w10, w8\nmov v1.s[0], w9\nudiv w11, w11, w8\nmov v1.s[1], w10\nudiv w8, w12, w8\nmov v1.s[2], w11\nmov v1.s[3], w8\nmls v0.4s, v1.4s, v2.4s\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i16> @test(<4 x i16> %a) {\n  %r = urem <4 x i16> %a, splat (i16 7)\n  ret <4 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = urem <4 x i16> %a, splat (i16 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i16> %r"
 },
 {
  "instr": "urem",
  "ty": "<8 x i16>",
  "variant": "binop",
  "codesize": 4,
  "thru": 56,
  "lat": 4,
  "sizelat": 4,
  "size": 40,
  "gisize": 39,
  "extrasize": 0,
  "asm": "umov w11, v1.h[0]\numov w12, v0.h[0]\numov w8, v1.h[1]\numov w9, v0.h[1]\numov w14, v1.h[2]\numov w15, v0.h[2]\numov w17, v1.h[3]\numov w18, v0.h[3]\numov w1, v1.h[4]\numov w2, v0.h[4]\numov w4, v1.h[5]\numov w5, v0.h[5]\nudiv w13, w12, w11\nudiv w10, w9, w8\nmsub w11, w13, w11, w12\numov w13, v1.h[7]\nfmov s2, w11\numov w11, v0.h[6]\nudiv w16, w15, w14\nmsub w8, w10, w8, w9\numov w10, v1.h[6]\nmov v2.h[1], w8\nudiv w0, w18, w17\nmsub w8, w16, w14, w15\numov w14, v0.h[7]\nmov v2.h[2], w8\nudiv w3, w2, w1\nmsub w8, w0, w17, w18\nmov v2.h[3], w8\nudiv w9, w5, w4\nmsub w8, w3, w1, w2\nmov v2.h[4], w8\nudiv w12, w11, w10\nmsub w8, w9, w4, w5\nmov v2.h[5], w8\nudiv w9, w14, w13\nmsub w8, w12, w10, w11\nmov v2.h[6], w8\nmsub w8, w9, w13, w14\nmov v2.h[7], w8\nmov v0.16b, v2.16b\nret",
  "giasm": "ushll v2.4s, v0.4h, #0\nushll v3.4s, v1.4h, #0\nushll2 v0.4s, v0.8h, #0\nushll2 v1.4s, v1.8h, #0\nfmov w8, s2\nfmov w9, s3\nmov w10, v3.s[1]\nmov w11, v3.s[2]\nmov w12, v3.s[3]\nfmov w13, s1\nmov w14, v1.s[1]\nmov w15, v1.s[2]\nudiv w8, w8, w9\nmov w9, v2.s[1]\nudiv w9, w9, w10\nmov w10, v2.s[2]\nmov v4.s[0], w8\nmov w8, v0.s[3]\nudiv w10, w10, w11\nmov w11, v2.s[3]\nmov v4.s[1], w9\nudiv w11, w11, w12\nfmov w12, s0\nmov v4.s[2], w10\nudiv w12, w12, w13\nmov w13, v0.s[1]\nmov v4.s[3], w11\nmls v2.4s, v4.4s, v3.4s\nudiv w13, w13, w14\nmov w14, v0.s[2]\nmov v5.s[0], w12\nmov w12, v1.s[3]\nudiv w14, w14, w15\nmov v5.s[1], w13\nudiv w8, w8, w12\nmov v5.s[2], w14\nmov v5.s[3], w8\nmls v0.4s, v5.4s, v1.4s\nuzp1 v0.8h, v2.8h, v0.8h\nret",
  "ll": "define <8 x i16> @test(<8 x i16> %a, <8 x i16> %b) {\n  %r = urem <8 x i16> %a, %b\n  ret <8 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = urem <8 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i16> %r"
 },
 {
  "instr": "urem",
  "ty": "<8 x i16>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 8,
  "lat": 4,
  "sizelat": 4,
  "size": 15,
  "gisize": 34,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nadrp x8, .LCPI0_1\numull2 v2.4s, v0.8h, v1.8h\numull v1.4s, v0.4h, v1.4h\nuzp2 v1.8h, v1.8h, v2.8h\nmovi v2.4s, #128, lsl #8\nsub v3.8h, v0.8h, v1.8h\numull2 v4.4s, v3.8h, v2.8h\numull v2.4s, v3.4h, v2.4h\nuzp2 v2.8h, v2.8h, v4.8h\nadd v1.8h, v2.8h, v1.8h\nldr q2, [x8, :lo12:.LCPI0_1]\nushr v1.8h, v1.8h, #2\nmls v0.8h, v1.8h, v2.8h\nret",
  "giasm": "ushll v1.4s, v0.4h, #0\nushll2 v0.4s, v0.8h, #0\nmov w8, #7                          // =0x7\nmov w11, #6                         // =0x6\nmov w12, v1.s[2]\nmov w15, v0.s[2]\nfmov w9, s1\nfmov w14, s0\nmov w10, v1.s[1]\nmov w13, v1.s[3]\nudiv w9, w9, w8\nudiv w12, w12, w8\nmov v2.s[0], w9\nmov w9, v0.s[3]\nudiv w14, w14, w8\nudiv w8, w15, w8\nmov w15, v0.s[1]\nmov v3.s[0], w14\nudiv w10, w10, w11\nudiv w15, w15, w11\nmov v2.s[1], w10\nmov v2.s[2], w12\nudiv w13, w13, w11\nmov v3.s[1], w15\nmov v3.s[2], w8\nadrp x8, .LCPI0_0\nldr d4, [x8, :lo12:.LCPI0_0]\nushll v4.4s, v4.4h, #0\nudiv w9, w9, w11\nmov v2.s[3], w13\nmls v1.4s, v2.4s, v4.4s\nmov v3.s[3], w9\nmls v0.4s, v3.4s, v4.4s\nuzp1 v0.8h, v1.8h, v0.8h\nret",
  "ll": "define <8 x i16> @test(<8 x i16> %a) {\n  %r = urem <8 x i16> %a, <i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6>\n  ret <8 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = urem <8 x i16> %a, <i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6>\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i16> %r"
 },
 {
  "instr": "urem",
  "ty": "<8 x i16>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 59,
  "lat": 7,
  "sizelat": 7,
  "size": 33,
  "gisize": 40,
  "extrasize": 0,
  "asm": "umov w11, v0.h[0]\numov w8, v0.h[1]\nand w9, w0, #0xffff\numov w13, v0.h[2]\numov w15, v0.h[3]\numov w17, v0.h[4]\numov w0, v0.h[5]\nudiv w12, w11, w9\nudiv w10, w8, w9\nmsub w11, w12, w9, w11\nfmov s1, w11\numov w11, v0.h[6]\nudiv w14, w13, w9\nmsub w8, w10, w9, w8\nmov v1.h[1], w8\nudiv w16, w15, w9\nmsub w8, w14, w9, w13\numov w13, v0.h[7]\nmov v1.h[2], w8\nudiv w18, w17, w9\nmsub w8, w16, w9, w15\nmov v1.h[3], w8\nudiv w10, w0, w9\nmsub w8, w18, w9, w17\nmov v1.h[4], w8\nudiv w12, w11, w9\nmsub w8, w10, w9, w0\nmov v1.h[5], w8\nudiv w10, w13, w9\nmsub w8, w12, w9, w11\nmov v1.h[6], w8\nmsub w8, w10, w9, w13\nmov v1.h[7], w8\nmov v0.16b, v1.16b\nret",
  "giasm": "dup v1.8h, w0\nushll v2.4s, v0.4h, #0\nushll2 v0.4s, v0.8h, #0\nushll v3.4s, v1.4h, #0\nfmov w8, s2\nushll2 v1.4s, v1.8h, #0\nfmov w9, s3\nmov w10, v3.s[1]\nmov w11, v3.s[2]\nmov w12, v3.s[3]\nfmov w13, s1\nmov w14, v1.s[1]\nmov w15, v1.s[2]\nudiv w8, w8, w9\nmov w9, v2.s[1]\nudiv w9, w9, w10\nmov w10, v2.s[2]\nmov v4.s[0], w8\nmov w8, v0.s[3]\nudiv w10, w10, w11\nmov w11, v2.s[3]\nmov v4.s[1], w9\nudiv w11, w11, w12\nfmov w12, s0\nmov v4.s[2], w10\nudiv w12, w12, w13\nmov w13, v0.s[1]\nmov v4.s[3], w11\nmls v2.4s, v4.4s, v3.4s\nudiv w13, w13, w14\nmov w14, v0.s[2]\nmov v5.s[0], w12\nmov w12, v1.s[3]\nudiv w14, w14, w15\nmov v5.s[1], w13\nudiv w8, w8, w12\nmov v5.s[2], w14\nmov v5.s[3], w8\nmls v0.4s, v5.4s, v1.4s\nuzp1 v0.8h, v2.8h, v0.8h\nret",
  "ll": "define <8 x i16> @test(<8 x i16> %a, i16 %bs) {\n  %i = insertelement <8 x i16> poison, i16 %bs, i64 0\n  %b = shufflevector <8 x i16> %i, <8 x i16> poison, <8 x i32> zeroinitializer\n  %r = urem <8 x i16> %a, %b\n  ret <8 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <8 x i16> poison, i16 %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <8 x i16> %i, <8 x i16> poison, <8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = urem <8 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i16> %r"
 },
 {
  "instr": "urem",
  "ty": "<8 x i16>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 8,
  "lat": 4,
  "sizelat": 4,
  "size": 10,
  "gisize": 32,
  "extrasize": 0,
  "asm": "mov w8, #9363                       // =0x2493\ndup v1.8h, w8\numull2 v2.4s, v0.8h, v1.8h\numull v1.4s, v0.4h, v1.4h\nuzp2 v1.8h, v1.8h, v2.8h\nsub v2.8h, v0.8h, v1.8h\nusra v1.8h, v2.8h, #1\nmovi v2.8h, #7\nushr v1.8h, v1.8h, #2\nmls v0.8h, v1.8h, v2.8h\nret",
  "giasm": "ushll v1.4s, v0.4h, #0\nushll2 v0.4s, v0.8h, #0\nmov w8, #7                          // =0x7\nmovi v4.4h, #7\nfmov w9, s1\nfmov w13, s0\nmov w10, v1.s[1]\nmov w14, v0.s[1]\nmov w11, v1.s[2]\nmov w15, v0.s[2]\nmov w12, v1.s[3]\nushll v4.4s, v4.4h, #0\nudiv w9, w9, w8\nudiv w13, w13, w8\nmov v2.s[0], w9\nmov w9, v0.s[3]\nudiv w10, w10, w8\nmov v3.s[0], w13\nudiv w14, w14, w8\nmov v2.s[1], w10\nudiv w11, w11, w8\nmov v3.s[1], w14\nudiv w15, w15, w8\nmov v2.s[2], w11\nudiv w12, w12, w8\nmov v3.s[2], w15\nudiv w8, w9, w8\nmov v2.s[3], w12\nmls v1.4s, v2.4s, v4.4s\nmov v3.s[3], w8\nmls v0.4s, v3.4s, v4.4s\nuzp1 v0.8h, v1.8h, v0.8h\nret",
  "ll": "define <8 x i16> @test(<8 x i16> %a) {\n  %r = urem <8 x i16> %a, splat (i16 7)\n  ret <8 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = urem <8 x i16> %a, splat (i16 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i16> %r"
 },
 {
  "instr": "urem",
  "ty": "<16 x i16>",
  "variant": "binop",
  "codesize": 4,
  "thru": 112,
  "lat": 4,
  "sizelat": 4,
  "size": 116,
  "gisize": 82,
  "extrasize": 0,
  "asm": "sub sp, sp, #160\nstp x29, x30, [sp, #64]             // 16-byte Folded Spill\nstp x28, x27, [sp, #80]             // 16-byte Folded Spill\nstp x26, x25, [sp, #96]             // 16-byte Folded Spill\nstp x24, x23, [sp, #112]            // 16-byte Folded Spill\nstp x22, x21, [sp, #128]            // 16-byte Folded Spill\nstp x20, x19, [sp, #144]            // 16-byte Folded Spill\numov w8, v2.h[1]\numov w9, v0.h[1]\numov w19, v2.h[2]\numov w22, v0.h[2]\numov w1, v2.h[0]\numov w3, v0.h[0]\numov w7, v2.h[3]\numov w18, v0.h[3]\numov w4, v0.h[6]\numov w0, v2.h[4]\numov w5, v0.h[4]\numov w2, v2.h[7]\nstr w8, [sp, #52]                   // 4-byte Folded Spill\numov w6, v0.h[7]\numov w27, v3.h[0]\nstr w9, [sp, #44]                   // 4-byte Folded Spill\nudiv w9, w9, w8\numov w28, v1.h[0]\numov w24, v3.h[1]\numov w25, v1.h[1]\nldr w21, [sp, #52]                  // 4-byte Folded Reload\nldr w23, [sp, #44]                  // 4-byte Folded Reload\numov w30, v3.h[2]\numov w12, v3.h[3]\numov w11, v1.h[3]\numov w14, v3.h[5]\numov w13, v1.h[5]\nudiv w8, w22, w19\nstr w9, [sp, #60]                   // 4-byte Folded Spill\nldr w20, [sp, #60]                  // 4-byte Folded Reload\nmsub w21, w20, w21, w23\nudiv w9, w3, w1\nstr w8, [sp, #12]                   // 4-byte Folded Spill\nudiv w8, w18, w7\nstp w9, w8, [sp, #24]               // 8-byte Folded Spill\numov w8, v2.h[5]\numov w9, v0.h[5]\nudiv w10, w5, w0\nldr w20, [sp, #24]                  // 4-byte Folded Reload\nmsub w1, w20, w1, w3\nstr w9, [sp, #40]                   // 4-byte Folded Spill\nstr w8, [sp, #48]                   // 4-byte Folded Spill\nfmov s0, w1\nldr w1, [sp, #12]                   // 4-byte Folded Reload\nmsub w1, w1, w19, w22\nldr w19, [sp, #28]                  // 4-byte Folded Reload\nudiv w9, w9, w8\numov w8, v2.h[6]\nmov v0.h[1], w21\nmsub w18, w19, w7, w18\nldp x20, x19, [sp, #144]            // 16-byte Folded Reload\nldp x22, x21, [sp, #128]            // 16-byte Folded Reload\nmov v0.h[2], w1\nstr w9, [sp, #56]                   // 4-byte Folded Spill\nudiv w9, w4, w8\nmov v0.h[3], w18\nldr w18, [sp, #40]                  // 4-byte Folded Reload\nstp w8, w9, [sp, #32]               // 8-byte Folded Spill\nudiv w8, w6, w2\numov w9, v1.h[4]\nudiv w29, w28, w27\nstp w8, w10, [sp, #16]              // 8-byte Folded Spill\numov w8, v1.h[2]\numov w10, v3.h[4]\nudiv w26, w25, w24\nmsub w3, w29, w27, w28\nldp x28, x27, [sp, #80]             // 16-byte Folded Reload\nfmov s2, w3\numov w3, v1.h[6]\nudiv w15, w8, w30\nmsub w24, w26, w24, w25\nmov v2.h[1], w24\nldp x24, x23, [sp, #112]            // 16-byte Folded Reload\nudiv w17, w11, w12\nmsub w8, w15, w30, w8\numov w15, v3.h[6]\nldp x29, x30, [sp, #64]             // 16-byte Folded Reload\nmov v2.h[2], w8\nudiv w16, w9, w10\nmsub w8, w17, w12, w11\nldr w12, [sp, #20]                  // 4-byte Folded Reload\nldr w17, [sp, #48]                  // 4-byte Folded Reload\nmsub w12, w12, w0, w5\nmov v2.h[3], w8\nmov v0.h[4], w12\nudiv w25, w13, w14\nmsub w8, w16, w10, w9\numov w9, v3.h[7]\numov w10, v1.h[7]\nldr w16, [sp, #56]                  // 4-byte Folded Reload\nmov v2.h[4], w8\nmsub w16, w16, w17, w18\nmov v0.h[5], w16\nudiv w11, w3, w15\nmsub w8, w25, w14, w13\nldp w14, w13, [sp, #32]             // 8-byte Folded Reload\nldp x26, x25, [sp, #96]             // 16-byte Folded Reload\nmov v2.h[5], w8\nmsub w13, w13, w14, w4\nmov v0.h[6], w13\nudiv w12, w10, w9\nmsub w8, w11, w15, w3\nldr w11, [sp, #16]                  // 4-byte Folded Reload\nmsub w11, w11, w2, w6\nmov v2.h[6], w8\nmov v0.h[7], w11\nmsub w8, w12, w9, w10\nmov v2.h[7], w8\nmov v1.16b, v2.16b\nadd sp, sp, #160\nret",
  "giasm": "ushll v4.4s, v0.4h, #0\nushll v5.4s, v2.4h, #0\nushll v6.4s, v1.4h, #0\nushll v7.4s, v3.4h, #0\nfmov w8, s4\nfmov w9, s5\nmov w12, v5.s[3]\nfmov w17, s7\nmov w18, v7.s[1]\nmov w0, v7.s[2]\nmov w1, v7.s[3]\nushll2 v7.4s, v3.8h, #0\nushll v3.4s, v3.4h, #0\nudiv w11, w8, w9\nmov w8, v4.s[1]\nmov w9, v5.s[1]\nfmov w2, s7\nmov w3, v7.s[1]\nmov w4, v7.s[2]\nudiv w10, w8, w9\nmov w8, v4.s[2]\nmov w9, v5.s[2]\nushll2 v5.4s, v2.8h, #0\nmov v16.s[0], w11\nushll v2.4s, v2.4h, #0\nfmov w13, s5\nmov w14, v5.s[1]\nmov w15, v5.s[2]\nmov w16, v5.s[3]\nudiv w9, w8, w9\nmov w8, v4.s[3]\nushll2 v4.4s, v0.8h, #0\nmov v16.s[1], w10\nushll v0.4s, v0.4h, #0\nudiv w8, w8, w12\nfmov w12, s4\nmov v16.s[2], w9\nudiv w13, w12, w13\nmov w12, v4.s[1]\nmov v16.s[3], w8\nmls v0.4s, v16.4s, v2.4s\nudiv w14, w12, w14\nmov w12, v4.s[2]\nmov v17.s[0], w13\nmov w13, v7.s[3]\nudiv w15, w12, w15\nmov w12, v4.s[3]\nmov v17.s[1], w14\nudiv w12, w12, w16\nfmov w16, s6\nmov v17.s[2], w15\nudiv w16, w16, w17\nmov w17, v6.s[1]\nmov v17.s[3], w12\nmls v4.4s, v17.4s, v5.4s\nudiv w17, w17, w18\nmov w18, v6.s[2]\nmov v18.s[0], w16\nuzp1 v0.8h, v0.8h, v4.8h\nudiv w18, w18, w0\nmov w0, v6.s[3]\nushll2 v6.4s, v1.8h, #0\nmov v18.s[1], w17\nushll v1.4s, v1.4h, #0\nmov w11, v6.s[3]\nudiv w0, w0, w1\nfmov w1, s6\nmov v18.s[2], w18\nudiv w1, w1, w2\nmov w2, v6.s[1]\nmov v18.s[3], w0\nmls v1.4s, v18.4s, v3.4s\nudiv w2, w2, w3\nmov w3, v6.s[2]\nmov v19.s[0], w1\nudiv w3, w3, w4\nmov v19.s[1], w2\nudiv w10, w11, w13\nmov v19.s[2], w3\nmov v19.s[3], w10\nmls v6.4s, v19.4s, v7.4s\nuzp1 v1.8h, v1.8h, v6.8h\nret",
  "ll": "define <16 x i16> @test(<16 x i16> %a, <16 x i16> %b) {\n  %r = urem <16 x i16> %a, %b\n  ret <16 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = urem <16 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i16> %r"
 },
 {
  "instr": "urem",
  "ty": "<16 x i16>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 16,
  "lat": 4,
  "sizelat": 4,
  "size": 93,
  "gisize": 65,
  "extrasize": 0,
  "asm": "umov w11, v0.h[0]\numov w13, v1.h[1]\nmov w8, #43691                      // =0xaaab\numov w14, v1.h[0]\numov w12, v0.h[1]\nmov w10, #18725                     // =0x4925\nmovk w8, #10922, lsl #16\nmovk w10, #9362, lsl #16\numov w18, v0.h[2]\numov w2, v1.h[2]\nmov w9, #6                          // =0x6\numov w1, v0.h[3]\numull x16, w11, w10\numull x17, w13, w8\numull x0, w14, w10\numull x15, w12, w8\nlsr x16, x16, #32\nlsr x17, x17, #32\nlsr x0, x0, #32\nsub w16, w16, w16, lsl #3\nlsr x15, x15, #32\nmsub w13, w17, w9, w13\nsub w17, w0, w0, lsl #3\numov w0, v1.h[3]\nadd w11, w11, w16\nmsub w12, w15, w9, w12\nfmov s2, w11\numov w11, v0.h[4]\numull x15, w18, w10\nadd w14, w14, w17\numull x16, w2, w10\nfmov s3, w14\numov w14, v0.h[5]\numull x17, w1, w8\nmov v2.h[1], w12\numov w12, v1.h[4]\nlsr x15, x15, #32\nlsr x16, x16, #32\nmov v3.h[1], w13\numull x13, w0, w8\nsub w15, w15, w15, lsl #3\nlsr x17, x17, #32\nsub w16, w16, w16, lsl #3\nadd w15, w18, w15\nlsr x13, x13, #32\nmsub w17, w17, w9, w1\nadd w16, w2, w16\numov w1, v1.h[5]\numull x18, w11, w10\numull x2, w12, w10\nmov v2.h[2], w15\nmov v3.h[2], w16\nmsub w13, w13, w9, w0\numov w16, v0.h[6]\numov w0, v1.h[6]\numull x15, w14, w8\nlsr x18, x18, #32\nlsr x2, x2, #32\nmov v2.h[3], w17\numull x17, w1, w8\nmov v3.h[3], w13\nlsr x15, x15, #32\nsub w18, w18, w18, lsl #3\nsub w2, w2, w2, lsl #3\numov w13, v0.h[7]\nmsub w14, w15, w9, w14\nadd w11, w11, w18\nadd w12, w12, w2\nlsr x15, x17, #32\nmov v2.h[4], w11\numull x11, w16, w10\nmov v3.h[4], w12\numull x10, w0, w10\numov w12, v1.h[7]\nmsub w15, w15, w9, w1\nlsr x11, x11, #32\numull x17, w13, w8\nlsr x10, x10, #32\nmov v2.h[5], w14\nmov v3.h[5], w15\numull x8, w12, w8\nsub w11, w11, w11, lsl #3\nsub w10, w10, w10, lsl #3\nlsr x14, x17, #32\nadd w11, w16, w11\nadd w10, w0, w10\nlsr x8, x8, #32\nmov v2.h[6], w11\nmov v3.h[6], w10\nmsub w11, w14, w9, w13\nmsub w8, w8, w9, w12\nmov v2.h[7], w11\nmov v3.h[7], w8\nmov v0.16b, v2.16b\nmov v1.16b, v3.16b\nret",
  "giasm": "ushll v2.4s, v0.4h, #0\nmov w8, #7                          // =0x7\nmov w10, #6                         // =0x6\nushll v3.4s, v1.4h, #0\nfmov w9, s2\nfmov w18, s3\nmov w0, v3.s[1]\nmov w1, v3.s[2]\nmov w2, v3.s[3]\nushll2 v3.4s, v1.8h, #0\nushll v1.4s, v1.4h, #0\nudiv w13, w9, w8\nmov w9, v2.s[1]\nmov w4, v3.s[2]\nfmov w3, s3\nudiv w12, w9, w10\nmov w9, v2.s[2]\nmov v4.s[0], w13\nmov w13, v3.s[3]\nudiv w11, w9, w8\nmov w9, v2.s[3]\nushll2 v2.4s, v0.8h, #0\nmov v4.s[1], w12\nushll v0.4s, v0.4h, #0\nmov w16, v2.s[2]\nfmov w14, s2\nmov w15, v2.s[1]\nmov w17, v2.s[3]\nudiv w14, w14, w8\nmov v4.s[2], w11\nadrp x11, .LCPI0_0\nldr d16, [x11, :lo12:.LCPI0_0]\nushll v16.4s, v16.4h, #0\nudiv w16, w16, w8\nmov v5.s[0], w14\nudiv w18, w18, w8\nudiv w1, w1, w8\nmov v6.s[0], w18\nudiv w3, w3, w8\nudiv w8, w4, w8\nmov w4, v3.s[1]\nmov v7.s[0], w3\nudiv w15, w15, w10\nudiv w0, w0, w10\nmov v5.s[1], w15\nmov v5.s[2], w16\nudiv w4, w4, w10\nmov v6.s[1], w0\nmov v6.s[2], w1\nudiv w9, w9, w10\nmov v7.s[1], w4\nmov v7.s[2], w8\nudiv w17, w17, w10\nmov v4.s[3], w9\nmls v0.4s, v4.4s, v16.4s\nudiv w2, w2, w10\nmov v5.s[3], w17\nmls v2.4s, v5.4s, v16.4s\nudiv w10, w13, w10\nmov v6.s[3], w2\nuzp1 v0.8h, v0.8h, v2.8h\nmls v1.4s, v6.4s, v16.4s\nmov v7.s[3], w10\nmls v3.4s, v7.4s, v16.4s\nuzp1 v1.8h, v1.8h, v3.8h\nret",
  "ll": "define <16 x i16> @test(<16 x i16> %a) {\n  %r = urem <16 x i16> %a, <i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6>\n  ret <16 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = urem <16 x i16> %a, <i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6>\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i16> %r"
 },
 {
  "instr": "urem",
  "ty": "<16 x i16>",
  "variant": "binopsplat",
  "codesize": 7,
  "thru": 116,
  "lat": 8,
  "sizelat": 8,
  "size": 75,
  "gisize": 78,
  "extrasize": 0,
  "asm": "str x27, [sp, #-80]!                // 8-byte Folded Spill\nstp x26, x25, [sp, #16]             // 16-byte Folded Spill\nstp x24, x23, [sp, #32]             // 16-byte Folded Spill\nstp x22, x21, [sp, #48]             // 16-byte Folded Spill\nstp x20, x19, [sp, #64]             // 16-byte Folded Spill\numov w15, v0.h[1]\numov w2, v0.h[0]\nand w8, w0, #0xffff\numov w19, v1.h[0]\numov w6, v1.h[1]\numov w21, v1.h[2]\numov w3, v0.h[2]\numov w16, v0.h[3]\numov w23, v1.h[3]\numov w17, v0.h[4]\numov w25, v1.h[4]\numov w9, v0.h[5]\nudiv w1, w15, w8\numov w10, v0.h[6]\numov w13, v0.h[7]\numov w27, v1.h[5]\nudiv w4, w2, w8\nmsub w15, w1, w8, w15\nudiv w20, w19, w8\nmsub w1, w4, w8, w2\nfmov s0, w1\nmov v0.h[1], w15\nudiv w7, w6, w8\nmsub w2, w20, w8, w19\nldp x20, x19, [sp, #64]             // 16-byte Folded Reload\nfmov s2, w2\numov w2, v1.h[6]\nudiv w22, w21, w8\nmsub w4, w7, w8, w6\nmov v2.h[1], w4\nudiv w5, w3, w8\nmsub w1, w22, w8, w21\nldp x22, x21, [sp, #48]             // 16-byte Folded Reload\nmov v2.h[2], w1\nudiv w18, w16, w8\nmsub w15, w5, w8, w3\nmov v0.h[2], w15\nudiv w24, w23, w8\nmsub w15, w18, w8, w16\nmov v0.h[3], w15\nudiv w0, w17, w8\nmsub w16, w24, w8, w23\nldp x24, x23, [sp, #32]             // 16-byte Folded Reload\nmov v2.h[3], w16\nudiv w26, w25, w8\nmsub w15, w0, w8, w17\numov w17, v1.h[7]\nmov v0.h[4], w15\nudiv w11, w9, w8\nmsub w16, w26, w8, w25\nldp x26, x25, [sp, #16]             // 16-byte Folded Reload\nmov v2.h[4], w16\nudiv w6, w27, w8\nmsub w9, w11, w8, w9\nmov v0.h[5], w9\nudiv w12, w10, w8\nmsub w11, w6, w8, w27\nmov v2.h[5], w11\nudiv w18, w2, w8\nmsub w9, w12, w8, w10\nmov v0.h[6], w9\nudiv w14, w13, w8\nmsub w10, w18, w8, w2\nmov v2.h[6], w10\nudiv w15, w17, w8\nmsub w9, w14, w8, w13\nmov v0.h[7], w9\nmsub w8, w15, w8, w17\nmov v2.h[7], w8\nmov v1.16b, v2.16b\nldr x27, [sp], #80                  // 8-byte Folded Reload\nret",
  "giasm": "dup v2.8h, w0\nushll v3.4s, v0.4h, #0\nushll v5.4s, v1.4h, #0\nushll v4.4s, v2.4h, #0\nushll v6.4s, v2.4h, #0\nfmov w8, s3\nfmov w18, s5\nushll v18.4s, v2.4h, #0\nfmov w9, s4\nfmov w0, s6\nmov w1, v6.s[1]\nmov w2, v6.s[2]\nmov w12, v4.s[3]\nmov w3, v6.s[3]\nudiv w11, w8, w9\nmov w8, v3.s[1]\nmov w9, v4.s[1]\nudiv w18, w18, w0\nmov w0, v5.s[1]\nmov v6.s[0], w11\nudiv w10, w8, w9\nmov w8, v3.s[2]\nmov w9, v4.s[2]\nushll2 v4.4s, v2.8h, #0\nmov v16.s[0], w18\nushll v2.4s, v2.4h, #0\nfmov w13, s4\nmov w15, v4.s[1]\nmov w17, v4.s[2]\nmov w4, v4.s[3]\nudiv w0, w0, w1\nmov w1, v5.s[2]\nmov v6.s[1], w10\nudiv w9, w8, w9\nmov w8, v3.s[3]\nushll2 v3.4s, v0.8h, #0\nmov v16.s[1], w0\nushll v0.4s, v0.4h, #0\nmov w14, v3.s[1]\nmov w16, v3.s[2]\nudiv w1, w1, w2\nmov w2, v5.s[3]\nushll2 v5.4s, v1.8h, #0\nmov v6.s[2], w9\nushll v1.4s, v1.4h, #0\nmov w11, v5.s[3]\nudiv w8, w8, w12\nfmov w12, s3\nmov v16.s[2], w1\nudiv w2, w2, w3\nfmov w3, s5\nmov v6.s[3], w8\nmls v0.4s, v6.4s, v18.4s\nudiv w12, w12, w13\nmov v16.s[3], w2\nmls v1.4s, v16.4s, v2.4s\nudiv w13, w3, w13\nmov w3, v5.s[1]\nmov v7.s[0], w12\nudiv w14, w14, w15\nmov v17.s[0], w13\nudiv w15, w3, w15\nmov w3, v5.s[2]\nmov v7.s[1], w14\nudiv w16, w16, w17\nmov v17.s[1], w15\nudiv w17, w3, w17\nmov w3, v3.s[3]\nmov v7.s[2], w16\nudiv w3, w3, w4\nmov v17.s[2], w17\nudiv w10, w11, w4\nmov v7.s[3], w3\nmls v3.4s, v7.4s, v4.4s\nmov v17.s[3], w10\nuzp1 v0.8h, v0.8h, v3.8h\nmls v5.4s, v17.4s, v4.4s\nuzp1 v1.8h, v1.8h, v5.8h\nret",
  "ll": "define <16 x i16> @test(<16 x i16> %a, i16 %bs) {\n  %i = insertelement <16 x i16> poison, i16 %bs, i64 0\n  %b = shufflevector <16 x i16> %i, <16 x i16> poison, <16 x i32> zeroinitializer\n  %r = urem <16 x i16> %a, %b\n  ret <16 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <16 x i16> poison, i16 %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <16 x i16> %i, <16 x i16> poison, <16 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = urem <16 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i16> %r"
 },
 {
  "instr": "urem",
  "ty": "<16 x i16>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 16,
  "lat": 4,
  "sizelat": 4,
  "size": 98,
  "gisize": 63,
  "extrasize": 0,
  "asm": "umov w9, v0.h[1]\numov w10, v0.h[0]\nmov w8, #18725                      // =0x4925\numov w12, v1.h[0]\nmovk w8, #9362, lsl #16\numov w11, v1.h[1]\numov w17, v0.h[2]\numov w18, v1.h[2]\numov w0, v0.h[3]\numov w1, v1.h[3]\numull x13, w9, w8\numull x14, w10, w8\numull x16, w12, w8\numull x15, w11, w8\nlsr x13, x13, #32\nlsr x14, x14, #32\nlsr x16, x16, #32\nsub w13, w13, w13, lsl #3\nsub w14, w14, w14, lsl #3\nlsr x15, x15, #32\nsub w16, w16, w16, lsl #3\nadd w9, w9, w13\numull x13, w17, w8\nadd w10, w10, w14\numull x14, w18, w8\nsub w15, w15, w15, lsl #3\nadd w12, w12, w16\nfmov s2, w10\numov w16, v1.h[4]\nfmov s3, w12\nadd w11, w11, w15\nlsr x13, x13, #32\nlsr x14, x14, #32\numov w15, v0.h[4]\numull x10, w0, w8\numull x12, w1, w8\nmov v2.h[1], w9\nsub w13, w13, w13, lsl #3\nmov v3.h[1], w11\nsub w14, w14, w14, lsl #3\numov w9, v0.h[5]\nadd w13, w17, w13\nlsr x10, x10, #32\numov w11, v1.h[5]\nadd w14, w18, w14\nlsr x12, x12, #32\numull x17, w15, w8\numull x18, w16, w8\nmov v2.h[2], w13\nsub w10, w10, w10, lsl #3\nmov v3.h[2], w14\nsub w12, w12, w12, lsl #3\numov w13, v0.h[6]\nlsr x14, x17, #32\nadd w10, w0, w10\numull x17, w9, w8\nlsr x18, x18, #32\nadd w12, w1, w12\numull x0, w11, w8\nmov v2.h[3], w10\numov w10, v1.h[6]\nsub w14, w14, w14, lsl #3\nmov v3.h[3], w12\nsub w18, w18, w18, lsl #3\nlsr x17, x17, #32\nadd w14, w15, w14\numov w12, v0.h[7]\nadd w15, w16, w18\nlsr x18, x0, #32\numov w16, v1.h[7]\nmov v2.h[4], w14\numull x14, w13, w8\nsub w17, w17, w17, lsl #3\nmov v3.h[4], w15\numull x15, w10, w8\nsub w18, w18, w18, lsl #3\nadd w9, w9, w17\nadd w11, w11, w18\nlsr x14, x14, #32\nlsr x15, x15, #32\nmov v2.h[5], w9\numull x9, w12, w8\nmov v3.h[5], w11\numull x8, w16, w8\nsub w11, w14, w14, lsl #3\nsub w14, w15, w15, lsl #3\nadd w11, w13, w11\nlsr x9, x9, #32\nadd w10, w10, w14\nlsr x8, x8, #32\nmov v2.h[6], w11\nmov v3.h[6], w10\nsub w9, w9, w9, lsl #3\nsub w8, w8, w8, lsl #3\nadd w9, w12, w9\nadd w8, w16, w8\nmov v2.h[7], w9\nmov v3.h[7], w8\nmov v0.16b, v2.16b\nmov v1.16b, v3.16b\nret",
  "giasm": "ushll v2.4s, v0.4h, #0\nmov w8, #7                          // =0x7\nushll v3.4s, v1.4h, #0\nmovi v16.4h, #7\nfmov w9, s2\nfmov w17, s3\nmov w18, v3.s[1]\nmov w0, v3.s[2]\nmov w1, v3.s[3]\nushll2 v3.4s, v1.8h, #0\nushll v16.4s, v16.4h, #0\nushll v1.4s, v1.4h, #0\nudiv w12, w9, w8\nmov w9, v2.s[1]\nfmov w2, s3\nmov w3, v3.s[1]\nmov w4, v3.s[2]\nudiv w11, w9, w8\nmov w9, v2.s[2]\nmov v4.s[0], w12\nmov w12, v3.s[3]\nudiv w10, w9, w8\nmov w9, v2.s[3]\nushll2 v2.4s, v0.8h, #0\nmov v4.s[1], w11\nushll v0.4s, v0.4h, #0\nfmov w13, s2\nmov w14, v2.s[1]\nmov w15, v2.s[2]\nmov w16, v2.s[3]\nudiv w13, w13, w8\nmov v4.s[2], w10\nudiv w17, w17, w8\nmov v5.s[0], w13\nudiv w2, w2, w8\nmov v6.s[0], w17\nudiv w14, w14, w8\nmov v7.s[0], w2\nudiv w18, w18, w8\nmov v5.s[1], w14\nudiv w3, w3, w8\nmov v6.s[1], w18\nudiv w15, w15, w8\nmov v7.s[1], w3\nudiv w0, w0, w8\nmov v5.s[2], w15\nudiv w4, w4, w8\nmov v6.s[2], w0\nudiv w9, w9, w8\nmov v7.s[2], w4\nudiv w16, w16, w8\nmov v4.s[3], w9\nmls v0.4s, v4.4s, v16.4s\nudiv w1, w1, w8\nmov v5.s[3], w16\nmls v2.4s, v5.4s, v16.4s\nudiv w8, w12, w8\nmov v6.s[3], w1\nuzp1 v0.8h, v0.8h, v2.8h\nmls v1.4s, v6.4s, v16.4s\nmov v7.s[3], w8\nmls v3.4s, v7.4s, v16.4s\nuzp1 v1.8h, v1.8h, v3.8h\nret",
  "ll": "define <16 x i16> @test(<16 x i16> %a) {\n  %r = urem <16 x i16> %a, splat (i16 7)\n  ret <16 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = urem <16 x i16> %a, splat (i16 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i16> %r"
 },
 {
  "instr": "urem",
  "ty": "<2 x i32>",
  "variant": "binop",
  "codesize": 4,
  "thru": 14,
  "lat": 4,
  "sizelat": 4,
  "size": 10,
  "gisize": 9,
  "extrasize": 0,
  "asm": "fmov w8, s1\nfmov w9, s0\nmov w11, v1.s[1]\nmov w12, v0.s[1]\nudiv w10, w9, w8\nudiv w13, w12, w11\nmsub w8, w10, w8, w9\nfmov s0, w8\nmsub w9, w13, w11, w12\nmov v0.s[1], w9\nret",
  "giasm": "fmov w8, s0\nfmov w9, s1\nmov w10, v1.s[1]\nudiv w8, w8, w9\nmov w9, v0.s[1]\nudiv w9, w9, w10\nmov v2.s[0], w8\nmov v2.s[1], w9\nmls v0.2s, v2.2s, v1.2s\nret",
  "ll": "define <2 x i32> @test(<2 x i32> %a, <2 x i32> %b) {\n  %r = urem <2 x i32> %a, %b\n  ret <2 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = urem <2 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i32> %r"
 },
 {
  "instr": "urem",
  "ty": "<2 x i32>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 7,
  "lat": 4,
  "sizelat": 4,
  "size": 14,
  "gisize": 11,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nmovi v2.2s, #128, lsl #24\nldr d1, [x8, :lo12:.LCPI0_0]\nadrp x8, .LCPI0_1\numull v1.2d, v0.2s, v1.2s\nfneg d2, d2\nshrn v1.2s, v1.2d, #32\nsub v3.2s, v0.2s, v1.2s\numull v2.2d, v3.2s, v2.2s\nshrn v2.2s, v2.2d, #32\nadd v1.2s, v2.2s, v1.2s\nldr d2, [x8, :lo12:.LCPI0_1]\nushr v1.2s, v1.2s, #2\nmls v0.2s, v1.2s, v2.2s\nret",
  "giasm": "fmov w9, s0\nmov w8, #7                          // =0x7\nmov w10, #6                         // =0x6\nudiv w8, w9, w8\nmov w9, v0.s[1]\nudiv w9, w9, w10\nmov v1.s[0], w8\nadrp x8, .LCPI0_0\nldr d2, [x8, :lo12:.LCPI0_0]\nmov v1.s[1], w9\nmls v0.2s, v1.2s, v2.2s\nret",
  "ll": "define <2 x i32> @test(<2 x i32> %a) {\n  %r = urem <2 x i32> %a, <i32 7, i32 6>\n  ret <2 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = urem <2 x i32> %a, <i32 7, i32 6>\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i32> %r"
 },
 {
  "instr": "urem",
  "ty": "<2 x i32>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 17,
  "lat": 7,
  "sizelat": 7,
  "size": 8,
  "gisize": 10,
  "extrasize": 0,
  "asm": "fmov w8, s0\nmov w10, v0.s[1]\nudiv w9, w8, w0\nudiv w11, w10, w0\nmsub w8, w9, w0, w8\nfmov s0, w8\nmsub w9, w11, w0, w10\nmov v0.s[1], w9\nret",
  "giasm": "dup v1.2s, w0\nfmov w8, s0\nfmov w9, s1\nmov w10, v1.s[1]\nudiv w8, w8, w9\nmov w9, v0.s[1]\nudiv w9, w9, w10\nmov v2.s[0], w8\nmov v2.s[1], w9\nmls v0.2s, v2.2s, v1.2s\nret",
  "ll": "define <2 x i32> @test(<2 x i32> %a, i32 %bs) {\n  %i = insertelement <2 x i32> poison, i32 %bs, i64 0\n  %b = shufflevector <2 x i32> %i, <2 x i32> poison, <2 x i32> zeroinitializer\n  %r = urem <2 x i32> %a, %b\n  ret <2 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <2 x i32> poison, i32 %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <2 x i32> %i, <2 x i32> poison, <2 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = urem <2 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i32> %r"
 },
 {
  "instr": "urem",
  "ty": "<2 x i32>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 7,
  "lat": 4,
  "sizelat": 4,
  "size": 12,
  "gisize": 9,
  "extrasize": 0,
  "asm": "mov w8, #18725                      // =0x4925\nmovk w8, #9362, lsl #16\ndup v1.2s, w8\numull v1.2d, v0.2s, v1.2s\nshrn v1.2s, v1.2d, #32\nsub v2.2s, v0.2s, v1.2s\nushll v2.2d, v2.2s, #0\nshrn v2.2s, v2.2d, #1\nadd v1.2s, v2.2s, v1.2s\nmovi v2.2s, #7\nushr v1.2s, v1.2s, #2\nmls v0.2s, v1.2s, v2.2s\nret",
  "giasm": "fmov w9, s0\nmov w8, #7                          // =0x7\nmov w10, v0.s[1]\nmovi v2.2s, #7\nudiv w9, w9, w8\nudiv w8, w10, w8\nmov v1.s[0], w9\nmov v1.s[1], w8\nmls v0.2s, v1.2s, v2.2s\nret",
  "ll": "define <2 x i32> @test(<2 x i32> %a) {\n  %r = urem <2 x i32> %a, splat (i32 7)\n  ret <2 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = urem <2 x i32> %a, splat (i32 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i32> %r"
 },
 {
  "instr": "urem",
  "ty": "<4 x i32>",
  "variant": "binop",
  "codesize": 4,
  "thru": 28,
  "lat": 4,
  "sizelat": 4,
  "size": 20,
  "gisize": 17,
  "extrasize": 0,
  "asm": "fmov w11, s1\nfmov w12, s0\nmov w8, v1.s[1]\nmov w9, v0.s[1]\nmov w14, v1.s[2]\nmov w15, v0.s[2]\nmov w17, v1.s[3]\nmov w18, v0.s[3]\nudiv w13, w12, w11\nudiv w10, w9, w8\nmsub w11, w13, w11, w12\nfmov s0, w11\nudiv w16, w15, w14\nmsub w8, w10, w8, w9\nmov v0.s[1], w8\nudiv w9, w18, w17\nmsub w8, w16, w14, w15\nmov v0.s[2], w8\nmsub w8, w9, w17, w18\nmov v0.s[3], w8\nret",
  "giasm": "fmov w8, s0\nfmov w9, s1\nmov w10, v1.s[1]\nmov w11, v1.s[2]\nmov w12, v1.s[3]\nudiv w8, w8, w9\nmov w9, v0.s[1]\nudiv w9, w9, w10\nmov w10, v0.s[2]\nmov v2.s[0], w8\nudiv w10, w10, w11\nmov w11, v0.s[3]\nmov v2.s[1], w9\nudiv w8, w11, w12\nmov v2.s[2], w10\nmov v2.s[3], w8\nmls v0.4s, v2.4s, v1.4s\nret",
  "ll": "define <4 x i32> @test(<4 x i32> %a, <4 x i32> %b) {\n  %r = urem <4 x i32> %a, %b\n  ret <4 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = urem <4 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i32> %r"
 },
 {
  "instr": "urem",
  "ty": "<4 x i32>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 8,
  "lat": 4,
  "sizelat": 4,
  "size": 16,
  "gisize": 17,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nmovi v3.4s, #128, lsl #24\nldr q1, [x8, :lo12:.LCPI0_0]\nadrp x8, .LCPI0_1\numull2 v2.2d, v0.4s, v1.4s\numull v1.2d, v0.2s, v1.2s\nuzp2 v1.4s, v1.4s, v2.4s\nfneg v2.2d, v3.2d\nsub v3.4s, v0.4s, v1.4s\numull2 v4.2d, v3.4s, v2.4s\numull v2.2d, v3.2s, v2.2s\nuzp2 v2.4s, v2.4s, v4.4s\nadd v1.4s, v2.4s, v1.4s\nldr q2, [x8, :lo12:.LCPI0_1]\nushr v1.4s, v1.4s, #2\nmls v0.4s, v1.4s, v2.4s\nret",
  "giasm": "fmov w9, s0\nmov w8, #7                          // =0x7\nmov w10, v0.s[1]\nmov w11, #6                         // =0x6\nmov w12, v0.s[2]\nudiv w9, w9, w8\nudiv w10, w10, w11\nmov v1.s[0], w9\nudiv w8, w12, w8\nmov w12, v0.s[3]\nmov v1.s[1], w10\nudiv w9, w12, w11\nmov v1.s[2], w8\nadrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nmov v1.s[3], w9\nmls v0.4s, v1.4s, v2.4s\nret",
  "ll": "define <4 x i32> @test(<4 x i32> %a) {\n  %r = urem <4 x i32> %a, <i32 7, i32 6, i32 7, i32 6>\n  ret <4 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = urem <4 x i32> %a, <i32 7, i32 6, i32 7, i32 6>\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i32> %r"
 },
 {
  "instr": "urem",
  "ty": "<4 x i32>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 31,
  "lat": 7,
  "sizelat": 7,
  "size": 16,
  "gisize": 18,
  "extrasize": 0,
  "asm": "fmov w10, s0\nmov w8, v0.s[1]\nmov w12, v0.s[2]\nmov w14, v0.s[3]\nudiv w11, w10, w0\nudiv w9, w8, w0\nmsub w10, w11, w0, w10\nfmov s0, w10\nudiv w13, w12, w0\nmsub w8, w9, w0, w8\nmov v0.s[1], w8\nudiv w9, w14, w0\nmsub w8, w13, w0, w12\nmov v0.s[2], w8\nmsub w8, w9, w0, w14\nmov v0.s[3], w8\nret",
  "giasm": "dup v1.4s, w0\nfmov w8, s0\nfmov w9, s1\nmov w10, v1.s[1]\nmov w11, v1.s[2]\nmov w12, v1.s[3]\nudiv w8, w8, w9\nmov w9, v0.s[1]\nudiv w9, w9, w10\nmov w10, v0.s[2]\nmov v2.s[0], w8\nudiv w10, w10, w11\nmov w11, v0.s[3]\nmov v2.s[1], w9\nudiv w8, w11, w12\nmov v2.s[2], w10\nmov v2.s[3], w8\nmls v0.4s, v2.4s, v1.4s\nret",
  "ll": "define <4 x i32> @test(<4 x i32> %a, i32 %bs) {\n  %i = insertelement <4 x i32> poison, i32 %bs, i64 0\n  %b = shufflevector <4 x i32> %i, <4 x i32> poison, <4 x i32> zeroinitializer\n  %r = urem <4 x i32> %a, %b\n  ret <4 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <4 x i32> poison, i32 %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <4 x i32> %i, <4 x i32> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = urem <4 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i32> %r"
 },
 {
  "instr": "urem",
  "ty": "<4 x i32>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 8,
  "lat": 4,
  "sizelat": 4,
  "size": 11,
  "gisize": 15,
  "extrasize": 0,
  "asm": "mov w8, #18725                      // =0x4925\nmovk w8, #9362, lsl #16\ndup v1.4s, w8\numull2 v2.2d, v0.4s, v1.4s\numull v1.2d, v0.2s, v1.2s\nuzp2 v1.4s, v1.4s, v2.4s\nsub v2.4s, v0.4s, v1.4s\nusra v1.4s, v2.4s, #1\nmovi v2.4s, #7\nushr v1.4s, v1.4s, #2\nmls v0.4s, v1.4s, v2.4s\nret",
  "giasm": "fmov w9, s0\nmov w8, #7                          // =0x7\nmov w10, v0.s[1]\nmov w11, v0.s[2]\nmov w12, v0.s[3]\nmovi v2.4s, #7\nudiv w9, w9, w8\nudiv w10, w10, w8\nmov v1.s[0], w9\nudiv w11, w11, w8\nmov v1.s[1], w10\nudiv w8, w12, w8\nmov v1.s[2], w11\nmov v1.s[3], w8\nmls v0.4s, v1.4s, v2.4s\nret",
  "ll": "define <4 x i32> @test(<4 x i32> %a) {\n  %r = urem <4 x i32> %a, splat (i32 7)\n  ret <4 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = urem <4 x i32> %a, splat (i32 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i32> %r"
 },
 {
  "instr": "urem",
  "ty": "<8 x i32>",
  "variant": "binop",
  "codesize": 4,
  "thru": 56,
  "lat": 4,
  "sizelat": 4,
  "size": 44,
  "gisize": 34,
  "extrasize": 0,
  "asm": "stp x22, x21, [sp, #-32]!           // 16-byte Folded Spill\nstp x20, x19, [sp, #16]             // 16-byte Folded Spill\nmov w8, v2.s[1]\nmov w9, v0.s[1]\nfmov w11, s2\nfmov w12, s0\nfmov w4, s3\nfmov w5, s1\nmov w1, v3.s[1]\nmov w2, v1.s[1]\nmov w14, v2.s[2]\nmov w15, v0.s[2]\nmov w7, v3.s[2]\nmov w19, v1.s[2]\nudiv w10, w9, w8\nmov w17, v2.s[3]\nmov w18, v0.s[3]\nmov w21, v3.s[3]\nmov w22, v1.s[3]\nudiv w13, w12, w11\nmsub w8, w10, w8, w9\nudiv w6, w5, w4\nmsub w9, w13, w11, w12\nfmov s0, w9\nmov v0.s[1], w8\nudiv w3, w2, w1\nmsub w10, w6, w4, w5\nfmov s1, w10\nudiv w16, w15, w14\nmsub w11, w3, w1, w2\nmov v1.s[1], w11\nudiv w20, w19, w7\nmsub w9, w16, w14, w15\nmov v0.s[2], w9\nudiv w0, w18, w17\nmsub w8, w20, w7, w19\nldp x20, x19, [sp, #16]             // 16-byte Folded Reload\nmov v1.s[2], w8\nudiv w12, w22, w21\nmsub w10, w0, w17, w18\nmov v0.s[3], w10\nmsub w8, w12, w21, w22\nmov v1.s[3], w8\nldp x22, x21, [sp], #32             // 16-byte Folded Reload\nret",
  "giasm": "fmov w8, s0\nfmov w9, s2\nmov w10, v2.s[1]\nmov w11, v2.s[2]\nmov w12, v2.s[3]\nfmov w13, s3\nmov w14, v3.s[1]\nmov w15, v3.s[2]\nudiv w8, w8, w9\nmov w9, v0.s[1]\nudiv w9, w9, w10\nmov w10, v0.s[2]\nmov v4.s[0], w8\nmov w8, v1.s[3]\nudiv w10, w10, w11\nmov w11, v0.s[3]\nmov v4.s[1], w9\nudiv w11, w11, w12\nfmov w12, s1\nmov v4.s[2], w10\nudiv w12, w12, w13\nmov w13, v1.s[1]\nmov v4.s[3], w11\nmls v0.4s, v4.4s, v2.4s\nudiv w13, w13, w14\nmov w14, v1.s[2]\nmov v5.s[0], w12\nmov w12, v3.s[3]\nudiv w14, w14, w15\nmov v5.s[1], w13\nudiv w8, w8, w12\nmov v5.s[2], w14\nmov v5.s[3], w8\nmls v1.4s, v5.4s, v3.4s\nret",
  "ll": "define <8 x i32> @test(<8 x i32> %a, <8 x i32> %b) {\n  %r = urem <8 x i32> %a, %b\n  ret <8 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = urem <8 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i32> %r"
 },
 {
  "instr": "urem",
  "ty": "<8 x i32>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 16,
  "lat": 4,
  "sizelat": 4,
  "size": 26,
  "gisize": 30,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nmovi v6.4s, #128, lsl #24\nldr q2, [x8, :lo12:.LCPI0_0]\nadrp x8, .LCPI0_1\numull2 v3.2d, v0.4s, v2.4s\numull v4.2d, v0.2s, v2.2s\numull2 v5.2d, v1.4s, v2.4s\numull v2.2d, v1.2s, v2.2s\nuzp2 v3.4s, v4.4s, v3.4s\nfneg v4.2d, v6.2d\nuzp2 v2.4s, v2.4s, v5.4s\nsub v5.4s, v0.4s, v3.4s\nsub v6.4s, v1.4s, v2.4s\numull2 v7.2d, v5.4s, v4.4s\numull v5.2d, v5.2s, v4.2s\numull2 v16.2d, v6.4s, v4.4s\numull v4.2d, v6.2s, v4.2s\nuzp2 v5.4s, v5.4s, v7.4s\nuzp2 v4.4s, v4.4s, v16.4s\nadd v3.4s, v5.4s, v3.4s\nadd v2.4s, v4.4s, v2.4s\nldr q4, [x8, :lo12:.LCPI0_1]\nushr v3.4s, v3.4s, #2\nushr v2.4s, v2.4s, #2\nmls v0.4s, v3.4s, v4.4s\nmls v1.4s, v2.4s, v4.4s\nret",
  "giasm": "mov w12, v0.s[2]\nmov w15, v1.s[2]\nmov w8, #7                          // =0x7\nfmov w9, s0\nfmov w14, s1\nmov w11, #6                         // =0x6\nmov w10, v0.s[1]\nmov w13, v0.s[3]\nudiv w9, w9, w8\nudiv w12, w12, w8\nmov v2.s[0], w9\nmov w9, v1.s[3]\nudiv w14, w14, w8\nudiv w8, w15, w8\nmov w15, v1.s[1]\nmov v3.s[0], w14\nudiv w10, w10, w11\nudiv w15, w15, w11\nmov v2.s[1], w10\nmov v2.s[2], w12\nudiv w13, w13, w11\nmov v3.s[1], w15\nmov v3.s[2], w8\nadrp x8, .LCPI0_0\nldr q4, [x8, :lo12:.LCPI0_0]\nudiv w9, w9, w11\nmov v2.s[3], w13\nmls v0.4s, v2.4s, v4.4s\nmov v3.s[3], w9\nmls v1.4s, v3.4s, v4.4s\nret",
  "ll": "define <8 x i32> @test(<8 x i32> %a) {\n  %r = urem <8 x i32> %a, <i32 7, i32 6, i32 7, i32 6, i32 7, i32 6, i32 7, i32 6>\n  ret <8 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = urem <8 x i32> %a, <i32 7, i32 6, i32 7, i32 6, i32 7, i32 6, i32 7, i32 6>\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i32> %r"
 },
 {
  "instr": "urem",
  "ty": "<8 x i32>",
  "variant": "binopsplat",
  "codesize": 7,
  "thru": 60,
  "lat": 8,
  "sizelat": 8,
  "size": 32,
  "gisize": 31,
  "extrasize": 0,
  "asm": "mov w8, v0.s[1]\nfmov w10, s0\nfmov w18, s1\nmov w16, v1.s[1]\nmov w12, v0.s[2]\nmov w2, v1.s[2]\nmov w14, v0.s[3]\nmov w4, v1.s[3]\nudiv w11, w10, w0\nudiv w9, w8, w0\nudiv w1, w18, w0\nmsub w8, w9, w0, w8\nmsub w9, w11, w0, w10\nfmov s0, w9\nmov v0.s[1], w8\nudiv w17, w16, w0\nmsub w10, w1, w0, w18\nfmov s1, w10\nudiv w13, w12, w0\nmsub w11, w17, w0, w16\nmov v1.s[1], w11\nudiv w3, w2, w0\nmsub w8, w13, w0, w12\nmov v0.s[2], w8\nudiv w15, w14, w0\nmsub w9, w3, w0, w2\nmov v1.s[2], w9\nudiv w16, w4, w0\nmsub w8, w15, w0, w14\nmov v0.s[3], w8\nmsub w9, w16, w0, w4\nmov v1.s[3], w9\nret",
  "giasm": "dup v2.4s, w0\nfmov w8, s0\nfmov w14, s1\nmov w10, v0.s[1]\nmov w12, v0.s[2]\nfmov w9, s2\nmov w11, v2.s[1]\nmov w13, v2.s[2]\nmov w15, v2.s[3]\nudiv w8, w8, w9\nudiv w9, w14, w9\nmov w14, v1.s[1]\nmov v3.s[0], w8\nmov w8, v1.s[3]\nudiv w10, w10, w11\nmov v4.s[0], w9\nudiv w11, w14, w11\nmov w14, v1.s[2]\nmov v3.s[1], w10\nudiv w12, w12, w13\nmov v4.s[1], w11\nudiv w13, w14, w13\nmov w14, v0.s[3]\nmov v3.s[2], w12\nudiv w14, w14, w15\nmov v4.s[2], w13\nudiv w8, w8, w15\nmov v3.s[3], w14\nmls v0.4s, v3.4s, v2.4s\nmov v4.s[3], w8\nmls v1.4s, v4.4s, v2.4s\nret",
  "ll": "define <8 x i32> @test(<8 x i32> %a, i32 %bs) {\n  %i = insertelement <8 x i32> poison, i32 %bs, i64 0\n  %b = shufflevector <8 x i32> %i, <8 x i32> poison, <8 x i32> zeroinitializer\n  %r = urem <8 x i32> %a, %b\n  ret <8 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <8 x i32> poison, i32 %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <8 x i32> %i, <8 x i32> poison, <8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = urem <8 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i32> %r"
 },
 {
  "instr": "urem",
  "ty": "<8 x i32>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 16,
  "lat": 4,
  "sizelat": 4,
  "size": 18,
  "gisize": 28,
  "extrasize": 0,
  "asm": "mov w8, #18725                      // =0x4925\nmovk w8, #9362, lsl #16\ndup v2.4s, w8\numull2 v3.2d, v0.4s, v2.4s\numull v4.2d, v0.2s, v2.2s\numull2 v5.2d, v1.4s, v2.4s\numull v2.2d, v1.2s, v2.2s\nuzp2 v3.4s, v4.4s, v3.4s\nuzp2 v2.4s, v2.4s, v5.4s\nsub v4.4s, v0.4s, v3.4s\nsub v5.4s, v1.4s, v2.4s\nusra v3.4s, v4.4s, #1\nmovi v4.4s, #7\nusra v2.4s, v5.4s, #1\nushr v3.4s, v3.4s, #2\nushr v2.4s, v2.4s, #2\nmls v0.4s, v3.4s, v4.4s\nmls v1.4s, v2.4s, v4.4s\nret",
  "giasm": "fmov w9, s0\nfmov w13, s1\nmov w8, #7                          // =0x7\nmov w10, v0.s[1]\nmov w14, v1.s[1]\nmov w11, v0.s[2]\nmov w15, v1.s[2]\nmov w12, v0.s[3]\nmovi v4.4s, #7\nudiv w9, w9, w8\nudiv w13, w13, w8\nmov v2.s[0], w9\nmov w9, v1.s[3]\nudiv w10, w10, w8\nmov v3.s[0], w13\nudiv w14, w14, w8\nmov v2.s[1], w10\nudiv w11, w11, w8\nmov v3.s[1], w14\nudiv w15, w15, w8\nmov v2.s[2], w11\nudiv w12, w12, w8\nmov v3.s[2], w15\nudiv w8, w9, w8\nmov v2.s[3], w12\nmls v0.4s, v2.4s, v4.4s\nmov v3.s[3], w8\nmls v1.4s, v3.4s, v4.4s\nret",
  "ll": "define <8 x i32> @test(<8 x i32> %a) {\n  %r = urem <8 x i32> %a, splat (i32 7)\n  ret <8 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = urem <8 x i32> %a, splat (i32 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i32> %r"
 },
 {
  "instr": "urem",
  "ty": "<2 x i64>",
  "variant": "binop",
  "codesize": 4,
  "thru": 14,
  "lat": 4,
  "sizelat": 4,
  "size": 10,
  "gisize": 15,
  "extrasize": 0,
  "asm": "fmov x8, d1\nfmov x9, d0\nmov x11, v1.d[1]\nmov x12, v0.d[1]\nudiv x10, x9, x8\nudiv x13, x12, x11\nmsub x8, x10, x8, x9\nfmov d0, x8\nmsub x9, x13, x11, x12\nmov v0.d[1], x9\nret",
  "giasm": "fmov x8, d0\nfmov x9, d1\nmov x10, v1.d[1]\nmov x11, v0.d[1]\nudiv x8, x8, x9\nudiv x11, x11, x10\nmov v1.d[0], x8\nmov v1.d[1], x11\nfmov x8, d1\nmov x11, v1.d[1]\nmul x8, x8, x9\nmul x9, x11, x10\nmov v1.d[0], x8\nmov v1.d[1], x9\nsub v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x i64> @test(<2 x i64> %a, <2 x i64> %b) {\n  %r = urem <2 x i64> %a, %b\n  ret <2 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = urem <2 x i64> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i64> %r"
 },
 {
  "instr": "urem",
  "ty": "<2 x i64>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 47,
  "lat": 4,
  "sizelat": 4,
  "size": 20,
  "gisize": 19,
  "extrasize": 0,
  "asm": "mov x8, #9363                       // =0x2493\nfmov x10, d0\nmov x9, v0.d[1]\nmovk x8, #37449, lsl #16\nmov x11, #-6148914691236517206      // =0xaaaaaaaaaaaaaaaa\nmovk x8, #18724, lsl #32\nmovk x11, #43691\nmovk x8, #9362, lsl #48\numulh x8, x10, x8\numulh x11, x9, x11\nsub x12, x10, x8\nadd x8, x8, x12, lsr #1\nmov w12, #6                         // =0x6\nlsr x11, x11, #2\nlsr x8, x8, #2\nmsub x9, x11, x12, x9\nsub x8, x8, x8, lsl #3\nadd x8, x10, x8\nfmov d0, x8\nmov v0.d[1], x9\nret",
  "giasm": "fmov x9, d0\nmov w8, #7                          // =0x7\nmov w10, #6                         // =0x6\nudiv x8, x9, x8\nmov x9, v0.d[1]\nudiv x9, x9, x10\nmov v1.d[0], x8\nadrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nmov x11, v2.d[1]\nmov v1.d[1], x9\nfmov x9, d2\nfmov x8, d1\nmov x10, v1.d[1]\nmul x8, x8, x9\nmul x9, x10, x11\nmov v1.d[0], x8\nmov v1.d[1], x9\nsub v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x i64> @test(<2 x i64> %a) {\n  %r = urem <2 x i64> %a, <i64 7, i64 6>\n  ret <2 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = urem <2 x i64> %a, <i64 7, i64 6>\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i64> %r"
 },
 {
  "instr": "urem",
  "ty": "<2 x i64>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 17,
  "lat": 7,
  "sizelat": 7,
  "size": 8,
  "gisize": 16,
  "extrasize": 0,
  "asm": "fmov x8, d0\nmov x10, v0.d[1]\nudiv x9, x8, x0\nudiv x11, x10, x0\nmsub x8, x9, x0, x8\nfmov d0, x8\nmsub x9, x11, x0, x10\nmov v0.d[1], x9\nret",
  "giasm": "dup v1.2d, x0\nfmov x8, d0\nmov x11, v0.d[1]\nfmov x9, d1\nmov x10, v1.d[1]\nudiv x8, x8, x9\nudiv x11, x11, x10\nmov v1.d[0], x8\nmov v1.d[1], x11\nfmov x8, d1\nmov x11, v1.d[1]\nmul x8, x8, x9\nmul x9, x11, x10\nmov v1.d[0], x8\nmov v1.d[1], x9\nsub v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x i64> @test(<2 x i64> %a, i64 %bs) {\n  %i = insertelement <2 x i64> poison, i64 %bs, i64 0\n  %b = shufflevector <2 x i64> %i, <2 x i64> poison, <2 x i32> zeroinitializer\n  %r = urem <2 x i64> %a, %b\n  ret <2 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <2 x i64> poison, i64 %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <2 x i64> %i, <2 x i64> poison, <2 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = urem <2 x i64> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i64> %r"
 },
 {
  "instr": "urem",
  "ty": "<2 x i64>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 47,
  "lat": 4,
  "sizelat": 4,
  "size": 20,
  "gisize": 18,
  "extrasize": 0,
  "asm": "mov x8, #9363                       // =0x2493\nfmov x10, d0\nmov x9, v0.d[1]\nmovk x8, #37449, lsl #16\nmovk x8, #18724, lsl #32\nmovk x8, #9362, lsl #48\numulh x11, x10, x8\numulh x8, x9, x8\nsub x12, x10, x11\nadd x11, x11, x12, lsr #1\nsub x12, x9, x8\nlsr x11, x11, #2\nadd x8, x8, x12, lsr #1\nsub x11, x11, x11, lsl #3\nlsr x8, x8, #2\nadd x10, x10, x11\nsub x8, x8, x8, lsl #3\nfmov d0, x10\nadd x8, x9, x8\nmov v0.d[1], x8\nret",
  "giasm": "fmov x9, d0\nmov w8, #7                          // =0x7\nmov x10, v0.d[1]\nudiv x9, x9, x8\nudiv x8, x10, x8\nmov v1.d[0], x9\nmov v1.d[1], x8\nadrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfmov x9, d2\nmov x11, v2.d[1]\nfmov x8, d1\nmov x10, v1.d[1]\nmul x8, x8, x9\nmul x9, x10, x11\nmov v1.d[0], x8\nmov v1.d[1], x9\nsub v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x i64> @test(<2 x i64> %a) {\n  %r = urem <2 x i64> %a, splat (i64 7)\n  ret <2 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = urem <2 x i64> %a, splat (i64 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i64> %r"
 },
 {
  "instr": "urem",
  "ty": "<4 x i64>",
  "variant": "binop",
  "codesize": 4,
  "thru": 28,
  "lat": 4,
  "sizelat": 4,
  "size": 20,
  "gisize": 30,
  "extrasize": 0,
  "asm": "mov x8, v2.d[1]\nmov x9, v0.d[1]\nfmov x11, d2\nfmov x12, d0\nfmov x14, d3\nfmov x15, d1\nmov x17, v3.d[1]\nmov x18, v1.d[1]\nudiv x10, x9, x8\nudiv x13, x12, x11\nmsub x8, x10, x8, x9\nudiv x16, x15, x14\nmsub x9, x13, x11, x12\nfmov d0, x9\nmov v0.d[1], x8\nudiv x0, x18, x17\nmsub x10, x16, x14, x15\nfmov d1, x10\nmsub x11, x0, x17, x18\nmov v1.d[1], x11\nret",
  "giasm": "fmov x8, d0\nfmov x9, d2\nmov x10, v2.d[1]\nmov x11, v0.d[1]\nfmov x12, d1\nfmov x13, d3\nmov x14, v3.d[1]\nmov x15, v1.d[1]\nudiv x8, x8, x9\nudiv x12, x12, x13\nmov v2.d[0], x8\nudiv x11, x11, x10\nmov v3.d[0], x12\nudiv x15, x15, x14\nmov v2.d[1], x11\nfmov x8, d2\nmov x11, v2.d[1]\nmul x8, x8, x9\nmul x10, x11, x10\nmov v2.d[0], x8\nmov v3.d[1], x15\nmov v2.d[1], x10\nfmov x9, d3\nmov x12, v3.d[1]\nsub v0.2d, v0.2d, v2.2d\nmul x9, x9, x13\nmul x11, x12, x14\nmov v3.d[0], x9\nmov v3.d[1], x11\nsub v1.2d, v1.2d, v3.2d\nret",
  "ll": "define <4 x i64> @test(<4 x i64> %a, <4 x i64> %b) {\n  %r = urem <4 x i64> %a, %b\n  ret <4 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = urem <4 x i64> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i64> %r"
 },
 {
  "instr": "urem",
  "ty": "<4 x i64>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 94,
  "lat": 4,
  "sizelat": 4,
  "size": 33,
  "gisize": 32,
  "extrasize": 0,
  "asm": "mov x8, #9363                       // =0x2493\nfmov x9, d0\nfmov x12, d1\nmovk x8, #37449, lsl #16\nmov x10, v0.d[1]\nmov x13, v1.d[1]\nmovk x8, #18724, lsl #32\nmov x14, #-6148914691236517206      // =0xaaaaaaaaaaaaaaaa\nmovk x8, #9362, lsl #48\nmovk x14, #43691\numulh x11, x9, x8\numulh x8, x12, x8\numulh x15, x10, x14\nsub x16, x9, x11\numulh x14, x13, x14\nadd x11, x11, x16, lsr #1\nmov w16, #6                         // =0x6\nsub x17, x12, x8\nadd x8, x8, x17, lsr #1\nlsr x11, x11, #2\nlsr x15, x15, #2\nlsr x8, x8, #2\nsub x11, x11, x11, lsl #3\nlsr x14, x14, #2\nmsub x10, x15, x16, x10\nsub x8, x8, x8, lsl #3\nadd x9, x9, x11\nmsub x13, x14, x16, x13\nfmov d0, x9\nadd x8, x12, x8\nfmov d1, x8\nmov v0.d[1], x10\nmov v1.d[1], x13\nret",
  "giasm": "fmov x9, d0\nfmov x12, d1\nmov w8, #7                          // =0x7\nmov x10, v0.d[1]\nmov w11, #6                         // =0x6\nudiv x9, x9, x8\nudiv x8, x12, x8\nmov x12, v1.d[1]\nmov v2.d[0], x9\nudiv x10, x10, x11\nmov v3.d[0], x8\nadrp x8, .LCPI0_0\nldr q4, [x8, :lo12:.LCPI0_0]\nfmov x9, d4\nudiv x11, x12, x11\nmov v2.d[1], x10\nfmov x8, d2\nmov x10, v2.d[1]\nmul x8, x8, x9\nmov v2.d[0], x8\nmov v3.d[1], x11\nmov x11, v4.d[1]\nfmov x12, d3\nmov x13, v3.d[1]\nmul x10, x10, x11\nmul x9, x12, x9\nmul x11, x13, x11\nmov v2.d[1], x10\nmov v3.d[0], x9\nsub v0.2d, v0.2d, v2.2d\nmov v3.d[1], x11\nsub v1.2d, v1.2d, v3.2d\nret",
  "ll": "define <4 x i64> @test(<4 x i64> %a) {\n  %r = urem <4 x i64> %a, <i64 7, i64 6, i64 7, i64 6>\n  ret <4 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = urem <4 x i64> %a, <i64 7, i64 6, i64 7, i64 6>\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i64> %r"
 },
 {
  "instr": "urem",
  "ty": "<4 x i64>",
  "variant": "binopsplat",
  "codesize": 7,
  "thru": 32,
  "lat": 8,
  "sizelat": 8,
  "size": 16,
  "gisize": 29,
  "extrasize": 0,
  "asm": "mov x8, v0.d[1]\nfmov x10, d0\nfmov x12, d1\nmov x14, v1.d[1]\nudiv x11, x10, x0\nudiv x9, x8, x0\nudiv x13, x12, x0\nmsub x8, x9, x0, x8\nmsub x9, x11, x0, x10\nfmov d0, x9\nmov v0.d[1], x8\nudiv x15, x14, x0\nmsub x10, x13, x0, x12\nfmov d1, x10\nmsub x11, x15, x0, x14\nmov v1.d[1], x11\nret",
  "giasm": "dup v2.2d, x0\nfmov x8, d0\nfmov x12, d1\nmov x11, v0.d[1]\nmov x13, v1.d[1]\nfmov x9, d2\nmov x10, v2.d[1]\nudiv x8, x8, x9\nudiv x12, x12, x9\nmov v2.d[0], x8\nudiv x11, x11, x10\nmov v3.d[0], x12\nudiv x13, x13, x10\nmov v2.d[1], x11\nfmov x8, d2\nmov x11, v2.d[1]\nmul x8, x8, x9\nmul x11, x11, x10\nmov v2.d[0], x8\nmov v3.d[1], x13\nmov v2.d[1], x11\nfmov x12, d3\nmov x13, v3.d[1]\nsub v0.2d, v0.2d, v2.2d\nmul x9, x12, x9\nmul x10, x13, x10\nmov v3.d[0], x9\nmov v3.d[1], x10\nsub v1.2d, v1.2d, v3.2d\nret",
  "ll": "define <4 x i64> @test(<4 x i64> %a, i64 %bs) {\n  %i = insertelement <4 x i64> poison, i64 %bs, i64 0\n  %b = shufflevector <4 x i64> %i, <4 x i64> poison, <4 x i32> zeroinitializer\n  %r = urem <4 x i64> %a, %b\n  ret <4 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <4 x i64> poison, i64 %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <4 x i64> %i, <4 x i64> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = urem <4 x i64> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i64> %r"
 },
 {
  "instr": "urem",
  "ty": "<4 x i64>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 94,
  "lat": 4,
  "sizelat": 4,
  "size": 36,
  "gisize": 31,
  "extrasize": 0,
  "asm": "mov x8, #9363                       // =0x2493\nfmov x9, d0\nfmov x12, d1\nmovk x8, #37449, lsl #16\nmov x10, v0.d[1]\nmov x13, v1.d[1]\nmovk x8, #18724, lsl #32\nmovk x8, #9362, lsl #48\numulh x11, x9, x8\numulh x14, x12, x8\numulh x15, x10, x8\nsub x16, x9, x11\numulh x8, x13, x8\nadd x11, x11, x16, lsr #1\nsub x17, x12, x14\nadd x14, x14, x17, lsr #1\nlsr x11, x11, #2\nsub x16, x10, x15\nadd x15, x15, x16, lsr #1\nlsr x14, x14, #2\nsub x11, x11, x11, lsl #3\nsub x16, x13, x8\nadd x8, x8, x16, lsr #1\nsub x14, x14, x14, lsl #3\nlsr x15, x15, #2\nadd x9, x9, x11\nlsr x8, x8, #2\nadd x11, x12, x14\nsub x15, x15, x15, lsl #3\nfmov d0, x9\nfmov d1, x11\nsub x8, x8, x8, lsl #3\nadd x10, x10, x15\nadd x8, x13, x8\nmov v0.d[1], x10\nmov v1.d[1], x8\nret",
  "giasm": "fmov x9, d0\nfmov x11, d1\nmov w8, #7                          // =0x7\nmov x10, v0.d[1]\nmov x12, v1.d[1]\nudiv x9, x9, x8\nudiv x11, x11, x8\nmov v2.d[0], x9\nadrp x9, .LCPI0_0\nldr q4, [x9, :lo12:.LCPI0_0]\nfmov x9, d4\nudiv x10, x10, x8\nmov v3.d[0], x11\nmov x11, v4.d[1]\nudiv x8, x12, x8\nmov v2.d[1], x10\nmov x10, v2.d[1]\nmul x10, x10, x11\nmov v3.d[1], x8\nfmov x8, d2\nmul x8, x8, x9\nfmov x12, d3\nmov x13, v3.d[1]\nmul x9, x12, x9\nmov v2.d[0], x8\nmul x11, x13, x11\nmov v3.d[0], x9\nmov v2.d[1], x10\nmov v3.d[1], x11\nsub v0.2d, v0.2d, v2.2d\nsub v1.2d, v1.2d, v3.2d\nret",
  "ll": "define <4 x i64> @test(<4 x i64> %a) {\n  %r = urem <4 x i64> %a, splat (i64 7)\n  ret <4 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = urem <4 x i64> %a, splat (i64 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i64> %r"
 },
 {
  "instr": "and",
  "ty": "i8",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "and w0, w0, w1\nret",
  "giasm": "and w0, w0, w1\nret",
  "ll": "define i8 @test(i8 %a, i8 %b) {\n  %r = and i8 %a, %b\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = and i8 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "and",
  "ty": "i16",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "and w0, w0, w1\nret",
  "giasm": "and w0, w0, w1\nret",
  "ll": "define i16 @test(i16 %a, i16 %b) {\n  %r = and i16 %a, %b\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = and i16 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "and",
  "ty": "i32",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "and w0, w0, w1\nret",
  "giasm": "and w0, w0, w1\nret",
  "ll": "define i32 @test(i32 %a, i32 %b) {\n  %r = and i32 %a, %b\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = and i32 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "and",
  "ty": "i64",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "and x0, x0, x1\nret",
  "giasm": "and x0, x0, x1\nret",
  "ll": "define i64 @test(i64 %a, i64 %b) {\n  %r = and i64 %a, %b\n  ret i64 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = and i64 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i64 %r"
 },
 {
  "instr": "and",
  "ty": "<8 x i8>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "and v0.8b, v0.8b, v1.8b\nret",
  "giasm": "and v0.8b, v0.8b, v1.8b\nret",
  "ll": "define <8 x i8> @test(<8 x i8> %a, <8 x i8> %b) {\n  %r = and <8 x i8> %a, %b\n  ret <8 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = and <8 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i8> %r"
 },
 {
  "instr": "and",
  "ty": "<16 x i8>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "and v0.16b, v0.16b, v1.16b\nret",
  "giasm": "and v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <16 x i8> @test(<16 x i8> %a, <16 x i8> %b) {\n  %r = and <16 x i8> %a, %b\n  ret <16 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = and <16 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i8> %r"
 },
 {
  "instr": "and",
  "ty": "<32 x i8>",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "and v1.16b, v1.16b, v3.16b\nand v0.16b, v0.16b, v2.16b\nret",
  "giasm": "and v0.16b, v0.16b, v2.16b\nand v1.16b, v1.16b, v3.16b\nret",
  "ll": "define <32 x i8> @test(<32 x i8> %a, <32 x i8> %b) {\n  %r = and <32 x i8> %a, %b\n  ret <32 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = and <32 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i8> %r"
 },
 {
  "instr": "and",
  "ty": "<4 x i16>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "and v0.8b, v0.8b, v1.8b\nret",
  "giasm": "and v0.8b, v0.8b, v1.8b\nret",
  "ll": "define <4 x i16> @test(<4 x i16> %a, <4 x i16> %b) {\n  %r = and <4 x i16> %a, %b\n  ret <4 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = and <4 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i16> %r"
 },
 {
  "instr": "and",
  "ty": "<8 x i16>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "and v0.16b, v0.16b, v1.16b\nret",
  "giasm": "and v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <8 x i16> @test(<8 x i16> %a, <8 x i16> %b) {\n  %r = and <8 x i16> %a, %b\n  ret <8 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = and <8 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i16> %r"
 },
 {
  "instr": "and",
  "ty": "<16 x i16>",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "and v1.16b, v1.16b, v3.16b\nand v0.16b, v0.16b, v2.16b\nret",
  "giasm": "and v0.16b, v0.16b, v2.16b\nand v1.16b, v1.16b, v3.16b\nret",
  "ll": "define <16 x i16> @test(<16 x i16> %a, <16 x i16> %b) {\n  %r = and <16 x i16> %a, %b\n  ret <16 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = and <16 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i16> %r"
 },
 {
  "instr": "and",
  "ty": "<2 x i32>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "and v0.8b, v0.8b, v1.8b\nret",
  "giasm": "and v0.8b, v0.8b, v1.8b\nret",
  "ll": "define <2 x i32> @test(<2 x i32> %a, <2 x i32> %b) {\n  %r = and <2 x i32> %a, %b\n  ret <2 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = and <2 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i32> %r"
 },
 {
  "instr": "and",
  "ty": "<4 x i32>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "and v0.16b, v0.16b, v1.16b\nret",
  "giasm": "and v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <4 x i32> @test(<4 x i32> %a, <4 x i32> %b) {\n  %r = and <4 x i32> %a, %b\n  ret <4 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = and <4 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i32> %r"
 },
 {
  "instr": "and",
  "ty": "<8 x i32>",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "and v1.16b, v1.16b, v3.16b\nand v0.16b, v0.16b, v2.16b\nret",
  "giasm": "and v0.16b, v0.16b, v2.16b\nand v1.16b, v1.16b, v3.16b\nret",
  "ll": "define <8 x i32> @test(<8 x i32> %a, <8 x i32> %b) {\n  %r = and <8 x i32> %a, %b\n  ret <8 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = and <8 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i32> %r"
 },
 {
  "instr": "and",
  "ty": "<2 x i64>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "and v0.16b, v0.16b, v1.16b\nret",
  "giasm": "and v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <2 x i64> @test(<2 x i64> %a, <2 x i64> %b) {\n  %r = and <2 x i64> %a, %b\n  ret <2 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = and <2 x i64> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i64> %r"
 },
 {
  "instr": "and",
  "ty": "<4 x i64>",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "and v1.16b, v1.16b, v3.16b\nand v0.16b, v0.16b, v2.16b\nret",
  "giasm": "and v0.16b, v0.16b, v2.16b\nand v1.16b, v1.16b, v3.16b\nret",
  "ll": "define <4 x i64> @test(<4 x i64> %a, <4 x i64> %b) {\n  %r = and <4 x i64> %a, %b\n  ret <4 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = and <4 x i64> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i64> %r"
 },
 {
  "instr": "or",
  "ty": "i8",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "orr w0, w0, w1\nret",
  "giasm": "orr w0, w0, w1\nret",
  "ll": "define i8 @test(i8 %a, i8 %b) {\n  %r = or i8 %a, %b\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = or i8 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "or",
  "ty": "i16",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "orr w0, w0, w1\nret",
  "giasm": "orr w0, w0, w1\nret",
  "ll": "define i16 @test(i16 %a, i16 %b) {\n  %r = or i16 %a, %b\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = or i16 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "or",
  "ty": "i32",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "orr w0, w0, w1\nret",
  "giasm": "orr w0, w0, w1\nret",
  "ll": "define i32 @test(i32 %a, i32 %b) {\n  %r = or i32 %a, %b\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = or i32 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "or",
  "ty": "i64",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "orr x0, x0, x1\nret",
  "giasm": "orr x0, x0, x1\nret",
  "ll": "define i64 @test(i64 %a, i64 %b) {\n  %r = or i64 %a, %b\n  ret i64 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = or i64 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i64 %r"
 },
 {
  "instr": "or",
  "ty": "<8 x i8>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "orr v0.8b, v0.8b, v1.8b\nret",
  "giasm": "orr v0.8b, v0.8b, v1.8b\nret",
  "ll": "define <8 x i8> @test(<8 x i8> %a, <8 x i8> %b) {\n  %r = or <8 x i8> %a, %b\n  ret <8 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = or <8 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i8> %r"
 },
 {
  "instr": "or",
  "ty": "<16 x i8>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "orr v0.16b, v0.16b, v1.16b\nret",
  "giasm": "orr v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <16 x i8> @test(<16 x i8> %a, <16 x i8> %b) {\n  %r = or <16 x i8> %a, %b\n  ret <16 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = or <16 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i8> %r"
 },
 {
  "instr": "or",
  "ty": "<32 x i8>",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "orr v1.16b, v1.16b, v3.16b\norr v0.16b, v0.16b, v2.16b\nret",
  "giasm": "orr v0.16b, v0.16b, v2.16b\norr v1.16b, v1.16b, v3.16b\nret",
  "ll": "define <32 x i8> @test(<32 x i8> %a, <32 x i8> %b) {\n  %r = or <32 x i8> %a, %b\n  ret <32 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = or <32 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i8> %r"
 },
 {
  "instr": "or",
  "ty": "<4 x i16>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "orr v0.8b, v0.8b, v1.8b\nret",
  "giasm": "orr v0.8b, v0.8b, v1.8b\nret",
  "ll": "define <4 x i16> @test(<4 x i16> %a, <4 x i16> %b) {\n  %r = or <4 x i16> %a, %b\n  ret <4 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = or <4 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i16> %r"
 },
 {
  "instr": "or",
  "ty": "<8 x i16>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "orr v0.16b, v0.16b, v1.16b\nret",
  "giasm": "orr v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <8 x i16> @test(<8 x i16> %a, <8 x i16> %b) {\n  %r = or <8 x i16> %a, %b\n  ret <8 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = or <8 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i16> %r"
 },
 {
  "instr": "or",
  "ty": "<16 x i16>",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "orr v1.16b, v1.16b, v3.16b\norr v0.16b, v0.16b, v2.16b\nret",
  "giasm": "orr v0.16b, v0.16b, v2.16b\norr v1.16b, v1.16b, v3.16b\nret",
  "ll": "define <16 x i16> @test(<16 x i16> %a, <16 x i16> %b) {\n  %r = or <16 x i16> %a, %b\n  ret <16 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = or <16 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i16> %r"
 },
 {
  "instr": "or",
  "ty": "<2 x i32>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "orr v0.8b, v0.8b, v1.8b\nret",
  "giasm": "orr v0.8b, v0.8b, v1.8b\nret",
  "ll": "define <2 x i32> @test(<2 x i32> %a, <2 x i32> %b) {\n  %r = or <2 x i32> %a, %b\n  ret <2 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = or <2 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i32> %r"
 },
 {
  "instr": "or",
  "ty": "<4 x i32>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "orr v0.16b, v0.16b, v1.16b\nret",
  "giasm": "orr v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <4 x i32> @test(<4 x i32> %a, <4 x i32> %b) {\n  %r = or <4 x i32> %a, %b\n  ret <4 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = or <4 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i32> %r"
 },
 {
  "instr": "or",
  "ty": "<8 x i32>",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "orr v1.16b, v1.16b, v3.16b\norr v0.16b, v0.16b, v2.16b\nret",
  "giasm": "orr v0.16b, v0.16b, v2.16b\norr v1.16b, v1.16b, v3.16b\nret",
  "ll": "define <8 x i32> @test(<8 x i32> %a, <8 x i32> %b) {\n  %r = or <8 x i32> %a, %b\n  ret <8 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = or <8 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i32> %r"
 },
 {
  "instr": "or",
  "ty": "<2 x i64>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "orr v0.16b, v0.16b, v1.16b\nret",
  "giasm": "orr v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <2 x i64> @test(<2 x i64> %a, <2 x i64> %b) {\n  %r = or <2 x i64> %a, %b\n  ret <2 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = or <2 x i64> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i64> %r"
 },
 {
  "instr": "or",
  "ty": "<4 x i64>",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "orr v1.16b, v1.16b, v3.16b\norr v0.16b, v0.16b, v2.16b\nret",
  "giasm": "orr v0.16b, v0.16b, v2.16b\norr v1.16b, v1.16b, v3.16b\nret",
  "ll": "define <4 x i64> @test(<4 x i64> %a, <4 x i64> %b) {\n  %r = or <4 x i64> %a, %b\n  ret <4 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = or <4 x i64> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i64> %r"
 },
 {
  "instr": "xor",
  "ty": "i8",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "eor w0, w0, w1\nret",
  "giasm": "eor w0, w0, w1\nret",
  "ll": "define i8 @test(i8 %a, i8 %b) {\n  %r = xor i8 %a, %b\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = xor i8 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "xor",
  "ty": "i16",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "eor w0, w0, w1\nret",
  "giasm": "eor w0, w0, w1\nret",
  "ll": "define i16 @test(i16 %a, i16 %b) {\n  %r = xor i16 %a, %b\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = xor i16 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "xor",
  "ty": "i32",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "eor w0, w0, w1\nret",
  "giasm": "eor w0, w0, w1\nret",
  "ll": "define i32 @test(i32 %a, i32 %b) {\n  %r = xor i32 %a, %b\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = xor i32 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "xor",
  "ty": "i64",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "eor x0, x0, x1\nret",
  "giasm": "eor x0, x0, x1\nret",
  "ll": "define i64 @test(i64 %a, i64 %b) {\n  %r = xor i64 %a, %b\n  ret i64 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = xor i64 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i64 %r"
 },
 {
  "instr": "xor",
  "ty": "<8 x i8>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "eor v0.8b, v0.8b, v1.8b\nret",
  "giasm": "eor v0.8b, v0.8b, v1.8b\nret",
  "ll": "define <8 x i8> @test(<8 x i8> %a, <8 x i8> %b) {\n  %r = xor <8 x i8> %a, %b\n  ret <8 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = xor <8 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i8> %r"
 },
 {
  "instr": "xor",
  "ty": "<16 x i8>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "eor v0.16b, v0.16b, v1.16b\nret",
  "giasm": "eor v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <16 x i8> @test(<16 x i8> %a, <16 x i8> %b) {\n  %r = xor <16 x i8> %a, %b\n  ret <16 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = xor <16 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i8> %r"
 },
 {
  "instr": "xor",
  "ty": "<32 x i8>",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "eor v1.16b, v1.16b, v3.16b\neor v0.16b, v0.16b, v2.16b\nret",
  "giasm": "eor v0.16b, v0.16b, v2.16b\neor v1.16b, v1.16b, v3.16b\nret",
  "ll": "define <32 x i8> @test(<32 x i8> %a, <32 x i8> %b) {\n  %r = xor <32 x i8> %a, %b\n  ret <32 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = xor <32 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i8> %r"
 },
 {
  "instr": "xor",
  "ty": "<4 x i16>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "eor v0.8b, v0.8b, v1.8b\nret",
  "giasm": "eor v0.8b, v0.8b, v1.8b\nret",
  "ll": "define <4 x i16> @test(<4 x i16> %a, <4 x i16> %b) {\n  %r = xor <4 x i16> %a, %b\n  ret <4 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = xor <4 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i16> %r"
 },
 {
  "instr": "xor",
  "ty": "<8 x i16>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "eor v0.16b, v0.16b, v1.16b\nret",
  "giasm": "eor v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <8 x i16> @test(<8 x i16> %a, <8 x i16> %b) {\n  %r = xor <8 x i16> %a, %b\n  ret <8 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = xor <8 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i16> %r"
 },
 {
  "instr": "xor",
  "ty": "<16 x i16>",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "eor v1.16b, v1.16b, v3.16b\neor v0.16b, v0.16b, v2.16b\nret",
  "giasm": "eor v0.16b, v0.16b, v2.16b\neor v1.16b, v1.16b, v3.16b\nret",
  "ll": "define <16 x i16> @test(<16 x i16> %a, <16 x i16> %b) {\n  %r = xor <16 x i16> %a, %b\n  ret <16 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = xor <16 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i16> %r"
 },
 {
  "instr": "xor",
  "ty": "<2 x i32>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "eor v0.8b, v0.8b, v1.8b\nret",
  "giasm": "eor v0.8b, v0.8b, v1.8b\nret",
  "ll": "define <2 x i32> @test(<2 x i32> %a, <2 x i32> %b) {\n  %r = xor <2 x i32> %a, %b\n  ret <2 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = xor <2 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i32> %r"
 },
 {
  "instr": "xor",
  "ty": "<4 x i32>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "eor v0.16b, v0.16b, v1.16b\nret",
  "giasm": "eor v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <4 x i32> @test(<4 x i32> %a, <4 x i32> %b) {\n  %r = xor <4 x i32> %a, %b\n  ret <4 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = xor <4 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i32> %r"
 },
 {
  "instr": "xor",
  "ty": "<8 x i32>",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "eor v1.16b, v1.16b, v3.16b\neor v0.16b, v0.16b, v2.16b\nret",
  "giasm": "eor v0.16b, v0.16b, v2.16b\neor v1.16b, v1.16b, v3.16b\nret",
  "ll": "define <8 x i32> @test(<8 x i32> %a, <8 x i32> %b) {\n  %r = xor <8 x i32> %a, %b\n  ret <8 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = xor <8 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i32> %r"
 },
 {
  "instr": "xor",
  "ty": "<2 x i64>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "eor v0.16b, v0.16b, v1.16b\nret",
  "giasm": "eor v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <2 x i64> @test(<2 x i64> %a, <2 x i64> %b) {\n  %r = xor <2 x i64> %a, %b\n  ret <2 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = xor <2 x i64> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i64> %r"
 },
 {
  "instr": "xor",
  "ty": "<4 x i64>",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "eor v1.16b, v1.16b, v3.16b\neor v0.16b, v0.16b, v2.16b\nret",
  "giasm": "eor v0.16b, v0.16b, v2.16b\neor v1.16b, v1.16b, v3.16b\nret",
  "ll": "define <4 x i64> @test(<4 x i64> %a, <4 x i64> %b) {\n  %r = xor <4 x i64> %a, %b\n  ret <4 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = xor <4 x i64> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i64> %r"
 },
 {
  "instr": "shl",
  "ty": "i8",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 2,
  "extrasize": 0,
  "asm": "lsl w0, w0, w1\nret",
  "giasm": "and w8, w1, #0xff\nlsl w0, w0, w8\nret",
  "ll": "define i8 @test(i8 %a, i8 %b) {\n  %r = shl i8 %a, %b\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = shl i8 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "shl",
  "ty": "i8",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "lsl w0, w0, #7\nret",
  "giasm": "lsl w0, w0, #7\nret",
  "ll": "define i8 @test(i8 %a) {\n  %r = shl i8 %a, 7\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = shl i8 %a, 7\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "shl",
  "ty": "i16",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 2,
  "extrasize": 0,
  "asm": "lsl w0, w0, w1\nret",
  "giasm": "and w8, w1, #0xffff\nlsl w0, w0, w8\nret",
  "ll": "define i16 @test(i16 %a, i16 %b) {\n  %r = shl i16 %a, %b\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = shl i16 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "shl",
  "ty": "i16",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "lsl w0, w0, #7\nret",
  "giasm": "lsl w0, w0, #7\nret",
  "ll": "define i16 @test(i16 %a) {\n  %r = shl i16 %a, 7\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = shl i16 %a, 7\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "shl",
  "ty": "i32",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "lsl w0, w0, w1\nret",
  "giasm": "lsl w0, w0, w1\nret",
  "ll": "define i32 @test(i32 %a, i32 %b) {\n  %r = shl i32 %a, %b\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = shl i32 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "shl",
  "ty": "i32",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "lsl w0, w0, #7\nret",
  "giasm": "lsl w0, w0, #7\nret",
  "ll": "define i32 @test(i32 %a) {\n  %r = shl i32 %a, 7\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = shl i32 %a, 7\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "shl",
  "ty": "i64",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "lsl x0, x0, x1\nret",
  "giasm": "lsl x0, x0, x1\nret",
  "ll": "define i64 @test(i64 %a, i64 %b) {\n  %r = shl i64 %a, %b\n  ret i64 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = shl i64 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i64 %r"
 },
 {
  "instr": "shl",
  "ty": "i64",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "lsl x0, x0, #7\nret",
  "giasm": "lsl x0, x0, #7\nret",
  "ll": "define i64 @test(i64 %a) {\n  %r = shl i64 %a, 7\n  ret i64 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = shl i64 %a, 7\nCost Model: Found an estimated cost of 1 for instruction:   ret i64 %r"
 },
 {
  "instr": "shl",
  "ty": "<8 x i8>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "ushl v0.8b, v0.8b, v1.8b\nret",
  "giasm": "ushl v0.8b, v0.8b, v1.8b\nret",
  "ll": "define <8 x i8> @test(<8 x i8> %a, <8 x i8> %b) {\n  %r = shl <8 x i8> %a, %b\n  ret <8 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = shl <8 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i8> %r"
 },
 {
  "instr": "shl",
  "ty": "<8 x i8>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr d1, [x8, :lo12:.LCPI0_0]\nushl v0.8b, v0.8b, v1.8b\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr d1, [x8, :lo12:.LCPI0_0]\nushl v0.8b, v0.8b, v1.8b\nret",
  "ll": "define <8 x i8> @test(<8 x i8> %a) {\n  %r = shl <8 x i8> %a, <i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6>\n  ret <8 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = shl <8 x i8> %a, <i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6>\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i8> %r"
 },
 {
  "instr": "shl",
  "ty": "<8 x i8>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "dup v1.8b, w0\nushl v0.8b, v0.8b, v1.8b\nret",
  "giasm": "dup v1.8b, w0\nushl v0.8b, v0.8b, v1.8b\nret",
  "ll": "define <8 x i8> @test(<8 x i8> %a, i8 %bs) {\n  %i = insertelement <8 x i8> poison, i8 %bs, i64 0\n  %b = shufflevector <8 x i8> %i, <8 x i8> poison, <8 x i32> zeroinitializer\n  %r = shl <8 x i8> %a, %b\n  ret <8 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <8 x i8> poison, i8 %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <8 x i8> %i, <8 x i8> poison, <8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = shl <8 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i8> %r"
 },
 {
  "instr": "shl",
  "ty": "<8 x i8>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "shl v0.8b, v0.8b, #7\nret",
  "giasm": "shl v0.8b, v0.8b, #7\nret",
  "ll": "define <8 x i8> @test(<8 x i8> %a) {\n  %r = shl <8 x i8> %a, splat (i8 7)\n  ret <8 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = shl <8 x i8> %a, splat (i8 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i8> %r"
 },
 {
  "instr": "shl",
  "ty": "<16 x i8>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "ushl v0.16b, v0.16b, v1.16b\nret",
  "giasm": "ushl v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <16 x i8> @test(<16 x i8> %a, <16 x i8> %b) {\n  %r = shl <16 x i8> %a, %b\n  ret <16 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = shl <16 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i8> %r"
 },
 {
  "instr": "shl",
  "ty": "<16 x i8>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nushl v0.16b, v0.16b, v1.16b\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nushl v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <16 x i8> @test(<16 x i8> %a) {\n  %r = shl <16 x i8> %a, <i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6>\n  ret <16 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = shl <16 x i8> %a, <i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6>\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i8> %r"
 },
 {
  "instr": "shl",
  "ty": "<16 x i8>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "dup v1.16b, w0\nushl v0.16b, v0.16b, v1.16b\nret",
  "giasm": "dup v1.16b, w0\nushl v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <16 x i8> @test(<16 x i8> %a, i8 %bs) {\n  %i = insertelement <16 x i8> poison, i8 %bs, i64 0\n  %b = shufflevector <16 x i8> %i, <16 x i8> poison, <16 x i32> zeroinitializer\n  %r = shl <16 x i8> %a, %b\n  ret <16 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <16 x i8> poison, i8 %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <16 x i8> %i, <16 x i8> poison, <16 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = shl <16 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i8> %r"
 },
 {
  "instr": "shl",
  "ty": "<16 x i8>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "shl v0.16b, v0.16b, #7\nret",
  "giasm": "shl v0.16b, v0.16b, #7\nret",
  "ll": "define <16 x i8> @test(<16 x i8> %a) {\n  %r = shl <16 x i8> %a, splat (i8 7)\n  ret <16 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = shl <16 x i8> %a, splat (i8 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i8> %r"
 },
 {
  "instr": "shl",
  "ty": "<32 x i8>",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "ushl v1.16b, v1.16b, v3.16b\nushl v0.16b, v0.16b, v2.16b\nret",
  "giasm": "ushl v0.16b, v0.16b, v2.16b\nushl v1.16b, v1.16b, v3.16b\nret",
  "ll": "define <32 x i8> @test(<32 x i8> %a, <32 x i8> %b) {\n  %r = shl <32 x i8> %a, %b\n  ret <32 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = shl <32 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i8> %r"
 },
 {
  "instr": "shl",
  "ty": "<32 x i8>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nushl v0.16b, v0.16b, v2.16b\nushl v1.16b, v1.16b, v2.16b\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nushl v0.16b, v0.16b, v2.16b\nushl v1.16b, v1.16b, v2.16b\nret",
  "ll": "define <32 x i8> @test(<32 x i8> %a) {\n  %r = shl <32 x i8> %a, <i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6>\n  ret <32 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = shl <32 x i8> %a, <i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6>\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i8> %r"
 },
 {
  "instr": "shl",
  "ty": "<32 x i8>",
  "variant": "binopsplat",
  "codesize": 4,
  "thru": 6,
  "lat": 5,
  "sizelat": 5,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "dup v2.16b, w0\nushl v0.16b, v0.16b, v2.16b\nushl v1.16b, v1.16b, v2.16b\nret",
  "giasm": "dup v2.16b, w0\nushl v0.16b, v0.16b, v2.16b\nushl v1.16b, v1.16b, v2.16b\nret",
  "ll": "define <32 x i8> @test(<32 x i8> %a, i8 %bs) {\n  %i = insertelement <32 x i8> poison, i8 %bs, i64 0\n  %b = shufflevector <32 x i8> %i, <32 x i8> poison, <32 x i32> zeroinitializer\n  %r = shl <32 x i8> %a, %b\n  ret <32 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <32 x i8> poison, i8 %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <32 x i8> %i, <32 x i8> poison, <32 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = shl <32 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i8> %r"
 },
 {
  "instr": "shl",
  "ty": "<32 x i8>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "shl v0.16b, v0.16b, #7\nshl v1.16b, v1.16b, #7\nret",
  "giasm": "shl v0.16b, v0.16b, #7\nshl v1.16b, v1.16b, #7\nret",
  "ll": "define <32 x i8> @test(<32 x i8> %a) {\n  %r = shl <32 x i8> %a, splat (i8 7)\n  ret <32 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = shl <32 x i8> %a, splat (i8 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i8> %r"
 },
 {
  "instr": "shl",
  "ty": "<4 x i16>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "ushl v0.4h, v0.4h, v1.4h\nret",
  "giasm": "ushl v0.4h, v0.4h, v1.4h\nret",
  "ll": "define <4 x i16> @test(<4 x i16> %a, <4 x i16> %b) {\n  %r = shl <4 x i16> %a, %b\n  ret <4 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = shl <4 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i16> %r"
 },
 {
  "instr": "shl",
  "ty": "<4 x i16>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr d1, [x8, :lo12:.LCPI0_0]\nushl v0.4h, v0.4h, v1.4h\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr d1, [x8, :lo12:.LCPI0_0]\nushl v0.4h, v0.4h, v1.4h\nret",
  "ll": "define <4 x i16> @test(<4 x i16> %a) {\n  %r = shl <4 x i16> %a, <i16 7, i16 6, i16 7, i16 6>\n  ret <4 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = shl <4 x i16> %a, <i16 7, i16 6, i16 7, i16 6>\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i16> %r"
 },
 {
  "instr": "shl",
  "ty": "<4 x i16>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "dup v1.4h, w0\nushl v0.4h, v0.4h, v1.4h\nret",
  "giasm": "dup v1.4h, w0\nushl v0.4h, v0.4h, v1.4h\nret",
  "ll": "define <4 x i16> @test(<4 x i16> %a, i16 %bs) {\n  %i = insertelement <4 x i16> poison, i16 %bs, i64 0\n  %b = shufflevector <4 x i16> %i, <4 x i16> poison, <4 x i32> zeroinitializer\n  %r = shl <4 x i16> %a, %b\n  ret <4 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <4 x i16> poison, i16 %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <4 x i16> %i, <4 x i16> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = shl <4 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i16> %r"
 },
 {
  "instr": "shl",
  "ty": "<4 x i16>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "shl v0.4h, v0.4h, #7\nret",
  "giasm": "shl v0.4h, v0.4h, #7\nret",
  "ll": "define <4 x i16> @test(<4 x i16> %a) {\n  %r = shl <4 x i16> %a, splat (i16 7)\n  ret <4 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = shl <4 x i16> %a, splat (i16 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i16> %r"
 },
 {
  "instr": "shl",
  "ty": "<8 x i16>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "ushl v0.8h, v0.8h, v1.8h\nret",
  "giasm": "ushl v0.8h, v0.8h, v1.8h\nret",
  "ll": "define <8 x i16> @test(<8 x i16> %a, <8 x i16> %b) {\n  %r = shl <8 x i16> %a, %b\n  ret <8 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = shl <8 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i16> %r"
 },
 {
  "instr": "shl",
  "ty": "<8 x i16>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nushl v0.8h, v0.8h, v1.8h\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nushl v0.8h, v0.8h, v1.8h\nret",
  "ll": "define <8 x i16> @test(<8 x i16> %a) {\n  %r = shl <8 x i16> %a, <i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6>\n  ret <8 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = shl <8 x i16> %a, <i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6>\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i16> %r"
 },
 {
  "instr": "shl",
  "ty": "<8 x i16>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "dup v1.8h, w0\nushl v0.8h, v0.8h, v1.8h\nret",
  "giasm": "dup v1.8h, w0\nushl v0.8h, v0.8h, v1.8h\nret",
  "ll": "define <8 x i16> @test(<8 x i16> %a, i16 %bs) {\n  %i = insertelement <8 x i16> poison, i16 %bs, i64 0\n  %b = shufflevector <8 x i16> %i, <8 x i16> poison, <8 x i32> zeroinitializer\n  %r = shl <8 x i16> %a, %b\n  ret <8 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <8 x i16> poison, i16 %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <8 x i16> %i, <8 x i16> poison, <8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = shl <8 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i16> %r"
 },
 {
  "instr": "shl",
  "ty": "<8 x i16>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "shl v0.8h, v0.8h, #7\nret",
  "giasm": "shl v0.8h, v0.8h, #7\nret",
  "ll": "define <8 x i16> @test(<8 x i16> %a) {\n  %r = shl <8 x i16> %a, splat (i16 7)\n  ret <8 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = shl <8 x i16> %a, splat (i16 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i16> %r"
 },
 {
  "instr": "shl",
  "ty": "<16 x i16>",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "ushl v1.8h, v1.8h, v3.8h\nushl v0.8h, v0.8h, v2.8h\nret",
  "giasm": "ushl v0.8h, v0.8h, v2.8h\nushl v1.8h, v1.8h, v3.8h\nret",
  "ll": "define <16 x i16> @test(<16 x i16> %a, <16 x i16> %b) {\n  %r = shl <16 x i16> %a, %b\n  ret <16 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = shl <16 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i16> %r"
 },
 {
  "instr": "shl",
  "ty": "<16 x i16>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nushl v0.8h, v0.8h, v2.8h\nushl v1.8h, v1.8h, v2.8h\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nushl v0.8h, v0.8h, v2.8h\nushl v1.8h, v1.8h, v2.8h\nret",
  "ll": "define <16 x i16> @test(<16 x i16> %a) {\n  %r = shl <16 x i16> %a, <i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6>\n  ret <16 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = shl <16 x i16> %a, <i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6>\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i16> %r"
 },
 {
  "instr": "shl",
  "ty": "<16 x i16>",
  "variant": "binopsplat",
  "codesize": 4,
  "thru": 6,
  "lat": 5,
  "sizelat": 5,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "dup v2.8h, w0\nushl v0.8h, v0.8h, v2.8h\nushl v1.8h, v1.8h, v2.8h\nret",
  "giasm": "dup v2.8h, w0\nushl v0.8h, v0.8h, v2.8h\nushl v1.8h, v1.8h, v2.8h\nret",
  "ll": "define <16 x i16> @test(<16 x i16> %a, i16 %bs) {\n  %i = insertelement <16 x i16> poison, i16 %bs, i64 0\n  %b = shufflevector <16 x i16> %i, <16 x i16> poison, <16 x i32> zeroinitializer\n  %r = shl <16 x i16> %a, %b\n  ret <16 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <16 x i16> poison, i16 %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <16 x i16> %i, <16 x i16> poison, <16 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = shl <16 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i16> %r"
 },
 {
  "instr": "shl",
  "ty": "<16 x i16>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "shl v0.8h, v0.8h, #7\nshl v1.8h, v1.8h, #7\nret",
  "giasm": "shl v0.8h, v0.8h, #7\nshl v1.8h, v1.8h, #7\nret",
  "ll": "define <16 x i16> @test(<16 x i16> %a) {\n  %r = shl <16 x i16> %a, splat (i16 7)\n  ret <16 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = shl <16 x i16> %a, splat (i16 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i16> %r"
 },
 {
  "instr": "shl",
  "ty": "<2 x i32>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "ushl v0.2s, v0.2s, v1.2s\nret",
  "giasm": "ushl v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x i32> @test(<2 x i32> %a, <2 x i32> %b) {\n  %r = shl <2 x i32> %a, %b\n  ret <2 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = shl <2 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i32> %r"
 },
 {
  "instr": "shl",
  "ty": "<2 x i32>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr d1, [x8, :lo12:.LCPI0_0]\nushl v0.2s, v0.2s, v1.2s\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr d1, [x8, :lo12:.LCPI0_0]\nushl v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x i32> @test(<2 x i32> %a) {\n  %r = shl <2 x i32> %a, <i32 7, i32 6>\n  ret <2 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = shl <2 x i32> %a, <i32 7, i32 6>\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i32> %r"
 },
 {
  "instr": "shl",
  "ty": "<2 x i32>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "dup v1.2s, w0\nushl v0.2s, v0.2s, v1.2s\nret",
  "giasm": "dup v1.2s, w0\nushl v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x i32> @test(<2 x i32> %a, i32 %bs) {\n  %i = insertelement <2 x i32> poison, i32 %bs, i64 0\n  %b = shufflevector <2 x i32> %i, <2 x i32> poison, <2 x i32> zeroinitializer\n  %r = shl <2 x i32> %a, %b\n  ret <2 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <2 x i32> poison, i32 %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <2 x i32> %i, <2 x i32> poison, <2 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = shl <2 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i32> %r"
 },
 {
  "instr": "shl",
  "ty": "<2 x i32>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "shl v0.2s, v0.2s, #7\nret",
  "giasm": "shl v0.2s, v0.2s, #7\nret",
  "ll": "define <2 x i32> @test(<2 x i32> %a) {\n  %r = shl <2 x i32> %a, splat (i32 7)\n  ret <2 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = shl <2 x i32> %a, splat (i32 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i32> %r"
 },
 {
  "instr": "shl",
  "ty": "<4 x i32>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "ushl v0.4s, v0.4s, v1.4s\nret",
  "giasm": "ushl v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x i32> @test(<4 x i32> %a, <4 x i32> %b) {\n  %r = shl <4 x i32> %a, %b\n  ret <4 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = shl <4 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i32> %r"
 },
 {
  "instr": "shl",
  "ty": "<4 x i32>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nushl v0.4s, v0.4s, v1.4s\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nushl v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x i32> @test(<4 x i32> %a) {\n  %r = shl <4 x i32> %a, <i32 7, i32 6, i32 7, i32 6>\n  ret <4 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = shl <4 x i32> %a, <i32 7, i32 6, i32 7, i32 6>\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i32> %r"
 },
 {
  "instr": "shl",
  "ty": "<4 x i32>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "dup v1.4s, w0\nushl v0.4s, v0.4s, v1.4s\nret",
  "giasm": "dup v1.4s, w0\nushl v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x i32> @test(<4 x i32> %a, i32 %bs) {\n  %i = insertelement <4 x i32> poison, i32 %bs, i64 0\n  %b = shufflevector <4 x i32> %i, <4 x i32> poison, <4 x i32> zeroinitializer\n  %r = shl <4 x i32> %a, %b\n  ret <4 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <4 x i32> poison, i32 %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <4 x i32> %i, <4 x i32> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = shl <4 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i32> %r"
 },
 {
  "instr": "shl",
  "ty": "<4 x i32>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "shl v0.4s, v0.4s, #7\nret",
  "giasm": "shl v0.4s, v0.4s, #7\nret",
  "ll": "define <4 x i32> @test(<4 x i32> %a) {\n  %r = shl <4 x i32> %a, splat (i32 7)\n  ret <4 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = shl <4 x i32> %a, splat (i32 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i32> %r"
 },
 {
  "instr": "shl",
  "ty": "<8 x i32>",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "ushl v1.4s, v1.4s, v3.4s\nushl v0.4s, v0.4s, v2.4s\nret",
  "giasm": "ushl v0.4s, v0.4s, v2.4s\nushl v1.4s, v1.4s, v3.4s\nret",
  "ll": "define <8 x i32> @test(<8 x i32> %a, <8 x i32> %b) {\n  %r = shl <8 x i32> %a, %b\n  ret <8 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = shl <8 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i32> %r"
 },
 {
  "instr": "shl",
  "ty": "<8 x i32>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nushl v0.4s, v0.4s, v2.4s\nushl v1.4s, v1.4s, v2.4s\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nushl v0.4s, v0.4s, v2.4s\nushl v1.4s, v1.4s, v2.4s\nret",
  "ll": "define <8 x i32> @test(<8 x i32> %a) {\n  %r = shl <8 x i32> %a, <i32 7, i32 6, i32 7, i32 6, i32 7, i32 6, i32 7, i32 6>\n  ret <8 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = shl <8 x i32> %a, <i32 7, i32 6, i32 7, i32 6, i32 7, i32 6, i32 7, i32 6>\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i32> %r"
 },
 {
  "instr": "shl",
  "ty": "<8 x i32>",
  "variant": "binopsplat",
  "codesize": 4,
  "thru": 6,
  "lat": 5,
  "sizelat": 5,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "dup v2.4s, w0\nushl v0.4s, v0.4s, v2.4s\nushl v1.4s, v1.4s, v2.4s\nret",
  "giasm": "dup v2.4s, w0\nushl v0.4s, v0.4s, v2.4s\nushl v1.4s, v1.4s, v2.4s\nret",
  "ll": "define <8 x i32> @test(<8 x i32> %a, i32 %bs) {\n  %i = insertelement <8 x i32> poison, i32 %bs, i64 0\n  %b = shufflevector <8 x i32> %i, <8 x i32> poison, <8 x i32> zeroinitializer\n  %r = shl <8 x i32> %a, %b\n  ret <8 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <8 x i32> poison, i32 %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <8 x i32> %i, <8 x i32> poison, <8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = shl <8 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i32> %r"
 },
 {
  "instr": "shl",
  "ty": "<8 x i32>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "shl v0.4s, v0.4s, #7\nshl v1.4s, v1.4s, #7\nret",
  "giasm": "shl v0.4s, v0.4s, #7\nshl v1.4s, v1.4s, #7\nret",
  "ll": "define <8 x i32> @test(<8 x i32> %a) {\n  %r = shl <8 x i32> %a, splat (i32 7)\n  ret <8 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = shl <8 x i32> %a, splat (i32 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i32> %r"
 },
 {
  "instr": "shl",
  "ty": "<2 x i64>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "ushl v0.2d, v0.2d, v1.2d\nret",
  "giasm": "ushl v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x i64> @test(<2 x i64> %a, <2 x i64> %b) {\n  %r = shl <2 x i64> %a, %b\n  ret <2 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = shl <2 x i64> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i64> %r"
 },
 {
  "instr": "shl",
  "ty": "<2 x i64>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nushl v0.2d, v0.2d, v1.2d\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nushl v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x i64> @test(<2 x i64> %a) {\n  %r = shl <2 x i64> %a, <i64 7, i64 6>\n  ret <2 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = shl <2 x i64> %a, <i64 7, i64 6>\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i64> %r"
 },
 {
  "instr": "shl",
  "ty": "<2 x i64>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "dup v1.2d, x0\nushl v0.2d, v0.2d, v1.2d\nret",
  "giasm": "dup v1.2d, x0\nushl v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x i64> @test(<2 x i64> %a, i64 %bs) {\n  %i = insertelement <2 x i64> poison, i64 %bs, i64 0\n  %b = shufflevector <2 x i64> %i, <2 x i64> poison, <2 x i32> zeroinitializer\n  %r = shl <2 x i64> %a, %b\n  ret <2 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <2 x i64> poison, i64 %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <2 x i64> %i, <2 x i64> poison, <2 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = shl <2 x i64> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i64> %r"
 },
 {
  "instr": "shl",
  "ty": "<2 x i64>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "shl v0.2d, v0.2d, #7\nret",
  "giasm": "shl v0.2d, v0.2d, #7\nret",
  "ll": "define <2 x i64> @test(<2 x i64> %a) {\n  %r = shl <2 x i64> %a, splat (i64 7)\n  ret <2 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = shl <2 x i64> %a, splat (i64 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i64> %r"
 },
 {
  "instr": "shl",
  "ty": "<4 x i64>",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "ushl v1.2d, v1.2d, v3.2d\nushl v0.2d, v0.2d, v2.2d\nret",
  "giasm": "ushl v0.2d, v0.2d, v2.2d\nushl v1.2d, v1.2d, v3.2d\nret",
  "ll": "define <4 x i64> @test(<4 x i64> %a, <4 x i64> %b) {\n  %r = shl <4 x i64> %a, %b\n  ret <4 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = shl <4 x i64> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i64> %r"
 },
 {
  "instr": "shl",
  "ty": "<4 x i64>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nushl v0.2d, v0.2d, v2.2d\nushl v1.2d, v1.2d, v2.2d\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nushl v0.2d, v0.2d, v2.2d\nushl v1.2d, v1.2d, v2.2d\nret",
  "ll": "define <4 x i64> @test(<4 x i64> %a) {\n  %r = shl <4 x i64> %a, <i64 7, i64 6, i64 7, i64 6>\n  ret <4 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = shl <4 x i64> %a, <i64 7, i64 6, i64 7, i64 6>\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i64> %r"
 },
 {
  "instr": "shl",
  "ty": "<4 x i64>",
  "variant": "binopsplat",
  "codesize": 4,
  "thru": 6,
  "lat": 5,
  "sizelat": 5,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "dup v2.2d, x0\nushl v0.2d, v0.2d, v2.2d\nushl v1.2d, v1.2d, v2.2d\nret",
  "giasm": "dup v2.2d, x0\nushl v0.2d, v0.2d, v2.2d\nushl v1.2d, v1.2d, v2.2d\nret",
  "ll": "define <4 x i64> @test(<4 x i64> %a, i64 %bs) {\n  %i = insertelement <4 x i64> poison, i64 %bs, i64 0\n  %b = shufflevector <4 x i64> %i, <4 x i64> poison, <4 x i32> zeroinitializer\n  %r = shl <4 x i64> %a, %b\n  ret <4 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <4 x i64> poison, i64 %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <4 x i64> %i, <4 x i64> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = shl <4 x i64> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i64> %r"
 },
 {
  "instr": "shl",
  "ty": "<4 x i64>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "shl v0.2d, v0.2d, #7\nshl v1.2d, v1.2d, #7\nret",
  "giasm": "shl v0.2d, v0.2d, #7\nshl v1.2d, v1.2d, #7\nret",
  "ll": "define <4 x i64> @test(<4 x i64> %a) {\n  %r = shl <4 x i64> %a, splat (i64 7)\n  ret <4 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = shl <4 x i64> %a, splat (i64 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i64> %r"
 },
 {
  "instr": "ashr",
  "ty": "i8",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "sxtb w8, w0\nasr w0, w8, w1\nret",
  "giasm": "sxtb w8, w0\nand w9, w1, #0xff\nasr w0, w8, w9\nret",
  "ll": "define i8 @test(i8 %a, i8 %b) {\n  %r = ashr i8 %a, %b\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = ashr i8 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "ashr",
  "ty": "i8",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "sbfx w0, w0, #7, #1\nret",
  "giasm": "sbfx w0, w0, #7, #1\nret",
  "ll": "define i8 @test(i8 %a) {\n  %r = ashr i8 %a, 7\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = ashr i8 %a, 7\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "ashr",
  "ty": "i16",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "sxth w8, w0\nasr w0, w8, w1\nret",
  "giasm": "sxth w8, w0\nand w9, w1, #0xffff\nasr w0, w8, w9\nret",
  "ll": "define i16 @test(i16 %a, i16 %b) {\n  %r = ashr i16 %a, %b\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = ashr i16 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "ashr",
  "ty": "i16",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "sbfx w0, w0, #7, #9\nret",
  "giasm": "sbfx w0, w0, #7, #9\nret",
  "ll": "define i16 @test(i16 %a) {\n  %r = ashr i16 %a, 7\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = ashr i16 %a, 7\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "ashr",
  "ty": "i32",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "asr w0, w0, w1\nret",
  "giasm": "asr w0, w0, w1\nret",
  "ll": "define i32 @test(i32 %a, i32 %b) {\n  %r = ashr i32 %a, %b\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = ashr i32 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "ashr",
  "ty": "i32",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "asr w0, w0, #7\nret",
  "giasm": "asr w0, w0, #7\nret",
  "ll": "define i32 @test(i32 %a) {\n  %r = ashr i32 %a, 7\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = ashr i32 %a, 7\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "ashr",
  "ty": "i64",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "asr x0, x0, x1\nret",
  "giasm": "asr x0, x0, x1\nret",
  "ll": "define i64 @test(i64 %a, i64 %b) {\n  %r = ashr i64 %a, %b\n  ret i64 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = ashr i64 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i64 %r"
 },
 {
  "instr": "ashr",
  "ty": "i64",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "asr x0, x0, #7\nret",
  "giasm": "asr x0, x0, #7\nret",
  "ll": "define i64 @test(i64 %a) {\n  %r = ashr i64 %a, 7\n  ret i64 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = ashr i64 %a, 7\nCost Model: Found an estimated cost of 1 for instruction:   ret i64 %r"
 },
 {
  "instr": "ashr",
  "ty": "<8 x i8>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "neg v1.8b, v1.8b\nsshl v0.8b, v0.8b, v1.8b\nret",
  "giasm": "neg v1.8b, v1.8b\nsshl v0.8b, v0.8b, v1.8b\nret",
  "ll": "define <8 x i8> @test(<8 x i8> %a, <8 x i8> %b) {\n  %r = ashr <8 x i8> %a, %b\n  ret <8 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = ashr <8 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i8> %r"
 },
 {
  "instr": "ashr",
  "ty": "<8 x i8>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 4,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr d1, [x8, :lo12:.LCPI0_0]\nsshl v0.8b, v0.8b, v1.8b\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr d1, [x8, :lo12:.LCPI0_0]\nneg v1.8b, v1.8b\nsshl v0.8b, v0.8b, v1.8b\nret",
  "ll": "define <8 x i8> @test(<8 x i8> %a) {\n  %r = ashr <8 x i8> %a, <i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6>\n  ret <8 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = ashr <8 x i8> %a, <i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6>\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i8> %r"
 },
 {
  "instr": "ashr",
  "ty": "<8 x i8>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "dup v1.8b, w0\nneg v1.8b, v1.8b\nsshl v0.8b, v0.8b, v1.8b\nret",
  "giasm": "dup v1.8b, w0\nneg v1.8b, v1.8b\nsshl v0.8b, v0.8b, v1.8b\nret",
  "ll": "define <8 x i8> @test(<8 x i8> %a, i8 %bs) {\n  %i = insertelement <8 x i8> poison, i8 %bs, i64 0\n  %b = shufflevector <8 x i8> %i, <8 x i8> poison, <8 x i32> zeroinitializer\n  %r = ashr <8 x i8> %a, %b\n  ret <8 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <8 x i8> poison, i8 %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <8 x i8> %i, <8 x i8> poison, <8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = ashr <8 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i8> %r"
 },
 {
  "instr": "ashr",
  "ty": "<8 x i8>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "cmlt v0.8b, v0.8b, #0\nret",
  "giasm": "sshr v0.8b, v0.8b, #7\nret",
  "ll": "define <8 x i8> @test(<8 x i8> %a) {\n  %r = ashr <8 x i8> %a, splat (i8 7)\n  ret <8 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = ashr <8 x i8> %a, splat (i8 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i8> %r"
 },
 {
  "instr": "ashr",
  "ty": "<16 x i8>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "neg v1.16b, v1.16b\nsshl v0.16b, v0.16b, v1.16b\nret",
  "giasm": "neg v1.16b, v1.16b\nsshl v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <16 x i8> @test(<16 x i8> %a, <16 x i8> %b) {\n  %r = ashr <16 x i8> %a, %b\n  ret <16 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = ashr <16 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i8> %r"
 },
 {
  "instr": "ashr",
  "ty": "<16 x i8>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 4,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nsshl v0.16b, v0.16b, v1.16b\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nneg v1.16b, v1.16b\nsshl v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <16 x i8> @test(<16 x i8> %a) {\n  %r = ashr <16 x i8> %a, <i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6>\n  ret <16 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = ashr <16 x i8> %a, <i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6>\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i8> %r"
 },
 {
  "instr": "ashr",
  "ty": "<16 x i8>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "dup v1.16b, w0\nneg v1.16b, v1.16b\nsshl v0.16b, v0.16b, v1.16b\nret",
  "giasm": "dup v1.16b, w0\nneg v1.16b, v1.16b\nsshl v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <16 x i8> @test(<16 x i8> %a, i8 %bs) {\n  %i = insertelement <16 x i8> poison, i8 %bs, i64 0\n  %b = shufflevector <16 x i8> %i, <16 x i8> poison, <16 x i32> zeroinitializer\n  %r = ashr <16 x i8> %a, %b\n  ret <16 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <16 x i8> poison, i8 %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <16 x i8> %i, <16 x i8> poison, <16 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = ashr <16 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i8> %r"
 },
 {
  "instr": "ashr",
  "ty": "<16 x i8>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "cmlt v0.16b, v0.16b, #0\nret",
  "giasm": "sshr v0.16b, v0.16b, #7\nret",
  "ll": "define <16 x i8> @test(<16 x i8> %a) {\n  %r = ashr <16 x i8> %a, splat (i8 7)\n  ret <16 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = ashr <16 x i8> %a, splat (i8 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i8> %r"
 },
 {
  "instr": "ashr",
  "ty": "<32 x i8>",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "neg v2.16b, v2.16b\nneg v3.16b, v3.16b\nsshl v0.16b, v0.16b, v2.16b\nsshl v1.16b, v1.16b, v3.16b\nret",
  "giasm": "neg v2.16b, v2.16b\nneg v3.16b, v3.16b\nsshl v0.16b, v0.16b, v2.16b\nsshl v1.16b, v1.16b, v3.16b\nret",
  "ll": "define <32 x i8> @test(<32 x i8> %a, <32 x i8> %b) {\n  %r = ashr <32 x i8> %a, %b\n  ret <32 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = ashr <32 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i8> %r"
 },
 {
  "instr": "ashr",
  "ty": "<32 x i8>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 5,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nsshl v0.16b, v0.16b, v2.16b\nsshl v1.16b, v1.16b, v2.16b\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nneg v2.16b, v2.16b\nsshl v0.16b, v0.16b, v2.16b\nsshl v1.16b, v1.16b, v2.16b\nret",
  "ll": "define <32 x i8> @test(<32 x i8> %a) {\n  %r = ashr <32 x i8> %a, <i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6>\n  ret <32 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = ashr <32 x i8> %a, <i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6>\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i8> %r"
 },
 {
  "instr": "ashr",
  "ty": "<32 x i8>",
  "variant": "binopsplat",
  "codesize": 4,
  "thru": 6,
  "lat": 5,
  "sizelat": 5,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "dup v2.16b, w0\nneg v2.16b, v2.16b\nsshl v0.16b, v0.16b, v2.16b\nsshl v1.16b, v1.16b, v2.16b\nret",
  "giasm": "dup v2.16b, w0\nneg v2.16b, v2.16b\nsshl v0.16b, v0.16b, v2.16b\nsshl v1.16b, v1.16b, v2.16b\nret",
  "ll": "define <32 x i8> @test(<32 x i8> %a, i8 %bs) {\n  %i = insertelement <32 x i8> poison, i8 %bs, i64 0\n  %b = shufflevector <32 x i8> %i, <32 x i8> poison, <32 x i32> zeroinitializer\n  %r = ashr <32 x i8> %a, %b\n  ret <32 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <32 x i8> poison, i8 %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <32 x i8> %i, <32 x i8> poison, <32 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = ashr <32 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i8> %r"
 },
 {
  "instr": "ashr",
  "ty": "<32 x i8>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmlt v0.16b, v0.16b, #0\ncmlt v1.16b, v1.16b, #0\nret",
  "giasm": "sshr v0.16b, v0.16b, #7\nsshr v1.16b, v1.16b, #7\nret",
  "ll": "define <32 x i8> @test(<32 x i8> %a) {\n  %r = ashr <32 x i8> %a, splat (i8 7)\n  ret <32 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = ashr <32 x i8> %a, splat (i8 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i8> %r"
 },
 {
  "instr": "ashr",
  "ty": "<4 x i16>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "neg v1.4h, v1.4h\nsshl v0.4h, v0.4h, v1.4h\nret",
  "giasm": "neg v1.4h, v1.4h\nsshl v0.4h, v0.4h, v1.4h\nret",
  "ll": "define <4 x i16> @test(<4 x i16> %a, <4 x i16> %b) {\n  %r = ashr <4 x i16> %a, %b\n  ret <4 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = ashr <4 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i16> %r"
 },
 {
  "instr": "ashr",
  "ty": "<4 x i16>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 4,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr d1, [x8, :lo12:.LCPI0_0]\nsshl v0.4h, v0.4h, v1.4h\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr d1, [x8, :lo12:.LCPI0_0]\nneg v1.4h, v1.4h\nsshl v0.4h, v0.4h, v1.4h\nret",
  "ll": "define <4 x i16> @test(<4 x i16> %a) {\n  %r = ashr <4 x i16> %a, <i16 7, i16 6, i16 7, i16 6>\n  ret <4 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = ashr <4 x i16> %a, <i16 7, i16 6, i16 7, i16 6>\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i16> %r"
 },
 {
  "instr": "ashr",
  "ty": "<4 x i16>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "dup v1.4h, w0\nneg v1.4h, v1.4h\nsshl v0.4h, v0.4h, v1.4h\nret",
  "giasm": "dup v1.4h, w0\nneg v1.4h, v1.4h\nsshl v0.4h, v0.4h, v1.4h\nret",
  "ll": "define <4 x i16> @test(<4 x i16> %a, i16 %bs) {\n  %i = insertelement <4 x i16> poison, i16 %bs, i64 0\n  %b = shufflevector <4 x i16> %i, <4 x i16> poison, <4 x i32> zeroinitializer\n  %r = ashr <4 x i16> %a, %b\n  ret <4 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <4 x i16> poison, i16 %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <4 x i16> %i, <4 x i16> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = ashr <4 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i16> %r"
 },
 {
  "instr": "ashr",
  "ty": "<4 x i16>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "sshr v0.4h, v0.4h, #7\nret",
  "giasm": "sshr v0.4h, v0.4h, #7\nret",
  "ll": "define <4 x i16> @test(<4 x i16> %a) {\n  %r = ashr <4 x i16> %a, splat (i16 7)\n  ret <4 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = ashr <4 x i16> %a, splat (i16 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i16> %r"
 },
 {
  "instr": "ashr",
  "ty": "<8 x i16>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "neg v1.8h, v1.8h\nsshl v0.8h, v0.8h, v1.8h\nret",
  "giasm": "neg v1.8h, v1.8h\nsshl v0.8h, v0.8h, v1.8h\nret",
  "ll": "define <8 x i16> @test(<8 x i16> %a, <8 x i16> %b) {\n  %r = ashr <8 x i16> %a, %b\n  ret <8 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = ashr <8 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i16> %r"
 },
 {
  "instr": "ashr",
  "ty": "<8 x i16>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 4,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nsshl v0.8h, v0.8h, v1.8h\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nneg v1.8h, v1.8h\nsshl v0.8h, v0.8h, v1.8h\nret",
  "ll": "define <8 x i16> @test(<8 x i16> %a) {\n  %r = ashr <8 x i16> %a, <i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6>\n  ret <8 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = ashr <8 x i16> %a, <i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6>\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i16> %r"
 },
 {
  "instr": "ashr",
  "ty": "<8 x i16>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "dup v1.8h, w0\nneg v1.8h, v1.8h\nsshl v0.8h, v0.8h, v1.8h\nret",
  "giasm": "dup v1.8h, w0\nneg v1.8h, v1.8h\nsshl v0.8h, v0.8h, v1.8h\nret",
  "ll": "define <8 x i16> @test(<8 x i16> %a, i16 %bs) {\n  %i = insertelement <8 x i16> poison, i16 %bs, i64 0\n  %b = shufflevector <8 x i16> %i, <8 x i16> poison, <8 x i32> zeroinitializer\n  %r = ashr <8 x i16> %a, %b\n  ret <8 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <8 x i16> poison, i16 %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <8 x i16> %i, <8 x i16> poison, <8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = ashr <8 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i16> %r"
 },
 {
  "instr": "ashr",
  "ty": "<8 x i16>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "sshr v0.8h, v0.8h, #7\nret",
  "giasm": "sshr v0.8h, v0.8h, #7\nret",
  "ll": "define <8 x i16> @test(<8 x i16> %a) {\n  %r = ashr <8 x i16> %a, splat (i16 7)\n  ret <8 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = ashr <8 x i16> %a, splat (i16 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i16> %r"
 },
 {
  "instr": "ashr",
  "ty": "<16 x i16>",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "neg v2.8h, v2.8h\nneg v3.8h, v3.8h\nsshl v0.8h, v0.8h, v2.8h\nsshl v1.8h, v1.8h, v3.8h\nret",
  "giasm": "neg v2.8h, v2.8h\nneg v3.8h, v3.8h\nsshl v0.8h, v0.8h, v2.8h\nsshl v1.8h, v1.8h, v3.8h\nret",
  "ll": "define <16 x i16> @test(<16 x i16> %a, <16 x i16> %b) {\n  %r = ashr <16 x i16> %a, %b\n  ret <16 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = ashr <16 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i16> %r"
 },
 {
  "instr": "ashr",
  "ty": "<16 x i16>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 5,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nsshl v0.8h, v0.8h, v2.8h\nsshl v1.8h, v1.8h, v2.8h\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nneg v2.8h, v2.8h\nsshl v0.8h, v0.8h, v2.8h\nsshl v1.8h, v1.8h, v2.8h\nret",
  "ll": "define <16 x i16> @test(<16 x i16> %a) {\n  %r = ashr <16 x i16> %a, <i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6>\n  ret <16 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = ashr <16 x i16> %a, <i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6>\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i16> %r"
 },
 {
  "instr": "ashr",
  "ty": "<16 x i16>",
  "variant": "binopsplat",
  "codesize": 4,
  "thru": 6,
  "lat": 5,
  "sizelat": 5,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "dup v2.8h, w0\nneg v2.8h, v2.8h\nsshl v0.8h, v0.8h, v2.8h\nsshl v1.8h, v1.8h, v2.8h\nret",
  "giasm": "dup v2.8h, w0\nneg v2.8h, v2.8h\nsshl v0.8h, v0.8h, v2.8h\nsshl v1.8h, v1.8h, v2.8h\nret",
  "ll": "define <16 x i16> @test(<16 x i16> %a, i16 %bs) {\n  %i = insertelement <16 x i16> poison, i16 %bs, i64 0\n  %b = shufflevector <16 x i16> %i, <16 x i16> poison, <16 x i32> zeroinitializer\n  %r = ashr <16 x i16> %a, %b\n  ret <16 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <16 x i16> poison, i16 %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <16 x i16> %i, <16 x i16> poison, <16 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = ashr <16 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i16> %r"
 },
 {
  "instr": "ashr",
  "ty": "<16 x i16>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "sshr v0.8h, v0.8h, #7\nsshr v1.8h, v1.8h, #7\nret",
  "giasm": "sshr v0.8h, v0.8h, #7\nsshr v1.8h, v1.8h, #7\nret",
  "ll": "define <16 x i16> @test(<16 x i16> %a) {\n  %r = ashr <16 x i16> %a, splat (i16 7)\n  ret <16 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = ashr <16 x i16> %a, splat (i16 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i16> %r"
 },
 {
  "instr": "ashr",
  "ty": "<2 x i32>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "neg v1.2s, v1.2s\nsshl v0.2s, v0.2s, v1.2s\nret",
  "giasm": "neg v1.2s, v1.2s\nsshl v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x i32> @test(<2 x i32> %a, <2 x i32> %b) {\n  %r = ashr <2 x i32> %a, %b\n  ret <2 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = ashr <2 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i32> %r"
 },
 {
  "instr": "ashr",
  "ty": "<2 x i32>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 4,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr d1, [x8, :lo12:.LCPI0_0]\nsshl v0.2s, v0.2s, v1.2s\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr d1, [x8, :lo12:.LCPI0_0]\nneg v1.2s, v1.2s\nsshl v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x i32> @test(<2 x i32> %a) {\n  %r = ashr <2 x i32> %a, <i32 7, i32 6>\n  ret <2 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = ashr <2 x i32> %a, <i32 7, i32 6>\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i32> %r"
 },
 {
  "instr": "ashr",
  "ty": "<2 x i32>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "dup v1.2s, w0\nneg v1.2s, v1.2s\nsshl v0.2s, v0.2s, v1.2s\nret",
  "giasm": "dup v1.2s, w0\nneg v1.2s, v1.2s\nsshl v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x i32> @test(<2 x i32> %a, i32 %bs) {\n  %i = insertelement <2 x i32> poison, i32 %bs, i64 0\n  %b = shufflevector <2 x i32> %i, <2 x i32> poison, <2 x i32> zeroinitializer\n  %r = ashr <2 x i32> %a, %b\n  ret <2 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <2 x i32> poison, i32 %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <2 x i32> %i, <2 x i32> poison, <2 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = ashr <2 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i32> %r"
 },
 {
  "instr": "ashr",
  "ty": "<2 x i32>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "sshr v0.2s, v0.2s, #7\nret",
  "giasm": "sshr v0.2s, v0.2s, #7\nret",
  "ll": "define <2 x i32> @test(<2 x i32> %a) {\n  %r = ashr <2 x i32> %a, splat (i32 7)\n  ret <2 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = ashr <2 x i32> %a, splat (i32 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i32> %r"
 },
 {
  "instr": "ashr",
  "ty": "<4 x i32>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "neg v1.4s, v1.4s\nsshl v0.4s, v0.4s, v1.4s\nret",
  "giasm": "neg v1.4s, v1.4s\nsshl v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x i32> @test(<4 x i32> %a, <4 x i32> %b) {\n  %r = ashr <4 x i32> %a, %b\n  ret <4 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = ashr <4 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i32> %r"
 },
 {
  "instr": "ashr",
  "ty": "<4 x i32>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 4,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nsshl v0.4s, v0.4s, v1.4s\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nneg v1.4s, v1.4s\nsshl v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x i32> @test(<4 x i32> %a) {\n  %r = ashr <4 x i32> %a, <i32 7, i32 6, i32 7, i32 6>\n  ret <4 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = ashr <4 x i32> %a, <i32 7, i32 6, i32 7, i32 6>\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i32> %r"
 },
 {
  "instr": "ashr",
  "ty": "<4 x i32>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "dup v1.4s, w0\nneg v1.4s, v1.4s\nsshl v0.4s, v0.4s, v1.4s\nret",
  "giasm": "dup v1.4s, w0\nneg v1.4s, v1.4s\nsshl v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x i32> @test(<4 x i32> %a, i32 %bs) {\n  %i = insertelement <4 x i32> poison, i32 %bs, i64 0\n  %b = shufflevector <4 x i32> %i, <4 x i32> poison, <4 x i32> zeroinitializer\n  %r = ashr <4 x i32> %a, %b\n  ret <4 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <4 x i32> poison, i32 %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <4 x i32> %i, <4 x i32> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = ashr <4 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i32> %r"
 },
 {
  "instr": "ashr",
  "ty": "<4 x i32>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "sshr v0.4s, v0.4s, #7\nret",
  "giasm": "sshr v0.4s, v0.4s, #7\nret",
  "ll": "define <4 x i32> @test(<4 x i32> %a) {\n  %r = ashr <4 x i32> %a, splat (i32 7)\n  ret <4 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = ashr <4 x i32> %a, splat (i32 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i32> %r"
 },
 {
  "instr": "ashr",
  "ty": "<8 x i32>",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "neg v2.4s, v2.4s\nneg v3.4s, v3.4s\nsshl v0.4s, v0.4s, v2.4s\nsshl v1.4s, v1.4s, v3.4s\nret",
  "giasm": "neg v2.4s, v2.4s\nneg v3.4s, v3.4s\nsshl v0.4s, v0.4s, v2.4s\nsshl v1.4s, v1.4s, v3.4s\nret",
  "ll": "define <8 x i32> @test(<8 x i32> %a, <8 x i32> %b) {\n  %r = ashr <8 x i32> %a, %b\n  ret <8 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = ashr <8 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i32> %r"
 },
 {
  "instr": "ashr",
  "ty": "<8 x i32>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 5,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nsshl v0.4s, v0.4s, v2.4s\nsshl v1.4s, v1.4s, v2.4s\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nneg v2.4s, v2.4s\nsshl v0.4s, v0.4s, v2.4s\nsshl v1.4s, v1.4s, v2.4s\nret",
  "ll": "define <8 x i32> @test(<8 x i32> %a) {\n  %r = ashr <8 x i32> %a, <i32 7, i32 6, i32 7, i32 6, i32 7, i32 6, i32 7, i32 6>\n  ret <8 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = ashr <8 x i32> %a, <i32 7, i32 6, i32 7, i32 6, i32 7, i32 6, i32 7, i32 6>\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i32> %r"
 },
 {
  "instr": "ashr",
  "ty": "<8 x i32>",
  "variant": "binopsplat",
  "codesize": 4,
  "thru": 6,
  "lat": 5,
  "sizelat": 5,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "dup v2.4s, w0\nneg v2.4s, v2.4s\nsshl v0.4s, v0.4s, v2.4s\nsshl v1.4s, v1.4s, v2.4s\nret",
  "giasm": "dup v2.4s, w0\nneg v2.4s, v2.4s\nsshl v0.4s, v0.4s, v2.4s\nsshl v1.4s, v1.4s, v2.4s\nret",
  "ll": "define <8 x i32> @test(<8 x i32> %a, i32 %bs) {\n  %i = insertelement <8 x i32> poison, i32 %bs, i64 0\n  %b = shufflevector <8 x i32> %i, <8 x i32> poison, <8 x i32> zeroinitializer\n  %r = ashr <8 x i32> %a, %b\n  ret <8 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <8 x i32> poison, i32 %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <8 x i32> %i, <8 x i32> poison, <8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = ashr <8 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i32> %r"
 },
 {
  "instr": "ashr",
  "ty": "<8 x i32>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "sshr v0.4s, v0.4s, #7\nsshr v1.4s, v1.4s, #7\nret",
  "giasm": "sshr v0.4s, v0.4s, #7\nsshr v1.4s, v1.4s, #7\nret",
  "ll": "define <8 x i32> @test(<8 x i32> %a) {\n  %r = ashr <8 x i32> %a, splat (i32 7)\n  ret <8 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = ashr <8 x i32> %a, splat (i32 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i32> %r"
 },
 {
  "instr": "ashr",
  "ty": "<2 x i64>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "neg v1.2d, v1.2d\nsshl v0.2d, v0.2d, v1.2d\nret",
  "giasm": "neg v1.2d, v1.2d\nsshl v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x i64> @test(<2 x i64> %a, <2 x i64> %b) {\n  %r = ashr <2 x i64> %a, %b\n  ret <2 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = ashr <2 x i64> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i64> %r"
 },
 {
  "instr": "ashr",
  "ty": "<2 x i64>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 4,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nsshl v0.2d, v0.2d, v1.2d\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nneg v1.2d, v1.2d\nsshl v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x i64> @test(<2 x i64> %a) {\n  %r = ashr <2 x i64> %a, <i64 7, i64 6>\n  ret <2 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = ashr <2 x i64> %a, <i64 7, i64 6>\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i64> %r"
 },
 {
  "instr": "ashr",
  "ty": "<2 x i64>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "dup v1.2d, x0\nneg v1.2d, v1.2d\nsshl v0.2d, v0.2d, v1.2d\nret",
  "giasm": "dup v1.2d, x0\nneg v1.2d, v1.2d\nsshl v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x i64> @test(<2 x i64> %a, i64 %bs) {\n  %i = insertelement <2 x i64> poison, i64 %bs, i64 0\n  %b = shufflevector <2 x i64> %i, <2 x i64> poison, <2 x i32> zeroinitializer\n  %r = ashr <2 x i64> %a, %b\n  ret <2 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <2 x i64> poison, i64 %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <2 x i64> %i, <2 x i64> poison, <2 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = ashr <2 x i64> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i64> %r"
 },
 {
  "instr": "ashr",
  "ty": "<2 x i64>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "sshr v0.2d, v0.2d, #7\nret",
  "giasm": "sshr v0.2d, v0.2d, #7\nret",
  "ll": "define <2 x i64> @test(<2 x i64> %a) {\n  %r = ashr <2 x i64> %a, splat (i64 7)\n  ret <2 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = ashr <2 x i64> %a, splat (i64 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i64> %r"
 },
 {
  "instr": "ashr",
  "ty": "<4 x i64>",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "neg v2.2d, v2.2d\nneg v3.2d, v3.2d\nsshl v0.2d, v0.2d, v2.2d\nsshl v1.2d, v1.2d, v3.2d\nret",
  "giasm": "neg v2.2d, v2.2d\nneg v3.2d, v3.2d\nsshl v0.2d, v0.2d, v2.2d\nsshl v1.2d, v1.2d, v3.2d\nret",
  "ll": "define <4 x i64> @test(<4 x i64> %a, <4 x i64> %b) {\n  %r = ashr <4 x i64> %a, %b\n  ret <4 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = ashr <4 x i64> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i64> %r"
 },
 {
  "instr": "ashr",
  "ty": "<4 x i64>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 5,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nsshl v0.2d, v0.2d, v2.2d\nsshl v1.2d, v1.2d, v2.2d\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nneg v2.2d, v2.2d\nsshl v0.2d, v0.2d, v2.2d\nsshl v1.2d, v1.2d, v2.2d\nret",
  "ll": "define <4 x i64> @test(<4 x i64> %a) {\n  %r = ashr <4 x i64> %a, <i64 7, i64 6, i64 7, i64 6>\n  ret <4 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = ashr <4 x i64> %a, <i64 7, i64 6, i64 7, i64 6>\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i64> %r"
 },
 {
  "instr": "ashr",
  "ty": "<4 x i64>",
  "variant": "binopsplat",
  "codesize": 4,
  "thru": 6,
  "lat": 5,
  "sizelat": 5,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "dup v2.2d, x0\nneg v2.2d, v2.2d\nsshl v0.2d, v0.2d, v2.2d\nsshl v1.2d, v1.2d, v2.2d\nret",
  "giasm": "dup v2.2d, x0\nneg v2.2d, v2.2d\nsshl v0.2d, v0.2d, v2.2d\nsshl v1.2d, v1.2d, v2.2d\nret",
  "ll": "define <4 x i64> @test(<4 x i64> %a, i64 %bs) {\n  %i = insertelement <4 x i64> poison, i64 %bs, i64 0\n  %b = shufflevector <4 x i64> %i, <4 x i64> poison, <4 x i32> zeroinitializer\n  %r = ashr <4 x i64> %a, %b\n  ret <4 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <4 x i64> poison, i64 %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <4 x i64> %i, <4 x i64> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = ashr <4 x i64> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i64> %r"
 },
 {
  "instr": "ashr",
  "ty": "<4 x i64>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "sshr v0.2d, v0.2d, #7\nsshr v1.2d, v1.2d, #7\nret",
  "giasm": "sshr v0.2d, v0.2d, #7\nsshr v1.2d, v1.2d, #7\nret",
  "ll": "define <4 x i64> @test(<4 x i64> %a) {\n  %r = ashr <4 x i64> %a, splat (i64 7)\n  ret <4 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = ashr <4 x i64> %a, splat (i64 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i64> %r"
 },
 {
  "instr": "lshr",
  "ty": "i8",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "and w8, w0, #0xff\nlsr w0, w8, w1\nret",
  "giasm": "and w8, w1, #0xff\nand w9, w0, #0xff\nlsr w0, w9, w8\nret",
  "ll": "define i8 @test(i8 %a, i8 %b) {\n  %r = lshr i8 %a, %b\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = lshr i8 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "lshr",
  "ty": "i8",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "ubfx w0, w0, #7, #1\nret",
  "giasm": "ubfx w0, w0, #7, #1\nret",
  "ll": "define i8 @test(i8 %a) {\n  %r = lshr i8 %a, 7\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = lshr i8 %a, 7\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "lshr",
  "ty": "i16",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "and w8, w0, #0xffff\nlsr w0, w8, w1\nret",
  "giasm": "and w8, w1, #0xffff\nand w9, w0, #0xffff\nlsr w0, w9, w8\nret",
  "ll": "define i16 @test(i16 %a, i16 %b) {\n  %r = lshr i16 %a, %b\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = lshr i16 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "lshr",
  "ty": "i16",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "ubfx w0, w0, #7, #9\nret",
  "giasm": "ubfx w0, w0, #7, #9\nret",
  "ll": "define i16 @test(i16 %a) {\n  %r = lshr i16 %a, 7\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = lshr i16 %a, 7\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "lshr",
  "ty": "i32",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "lsr w0, w0, w1\nret",
  "giasm": "lsr w0, w0, w1\nret",
  "ll": "define i32 @test(i32 %a, i32 %b) {\n  %r = lshr i32 %a, %b\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = lshr i32 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "lshr",
  "ty": "i32",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "lsr w0, w0, #7\nret",
  "giasm": "lsr w0, w0, #7\nret",
  "ll": "define i32 @test(i32 %a) {\n  %r = lshr i32 %a, 7\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = lshr i32 %a, 7\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "lshr",
  "ty": "i64",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "lsr x0, x0, x1\nret",
  "giasm": "lsr x0, x0, x1\nret",
  "ll": "define i64 @test(i64 %a, i64 %b) {\n  %r = lshr i64 %a, %b\n  ret i64 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = lshr i64 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i64 %r"
 },
 {
  "instr": "lshr",
  "ty": "i64",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "lsr x0, x0, #7\nret",
  "giasm": "lsr x0, x0, #7\nret",
  "ll": "define i64 @test(i64 %a) {\n  %r = lshr i64 %a, 7\n  ret i64 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = lshr i64 %a, 7\nCost Model: Found an estimated cost of 1 for instruction:   ret i64 %r"
 },
 {
  "instr": "lshr",
  "ty": "<8 x i8>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "neg v1.8b, v1.8b\nushl v0.8b, v0.8b, v1.8b\nret",
  "giasm": "neg v1.8b, v1.8b\nushl v0.8b, v0.8b, v1.8b\nret",
  "ll": "define <8 x i8> @test(<8 x i8> %a, <8 x i8> %b) {\n  %r = lshr <8 x i8> %a, %b\n  ret <8 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = lshr <8 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i8> %r"
 },
 {
  "instr": "lshr",
  "ty": "<8 x i8>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 4,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr d1, [x8, :lo12:.LCPI0_0]\nushl v0.8b, v0.8b, v1.8b\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr d1, [x8, :lo12:.LCPI0_0]\nneg v1.8b, v1.8b\nushl v0.8b, v0.8b, v1.8b\nret",
  "ll": "define <8 x i8> @test(<8 x i8> %a) {\n  %r = lshr <8 x i8> %a, <i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6>\n  ret <8 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = lshr <8 x i8> %a, <i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6>\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i8> %r"
 },
 {
  "instr": "lshr",
  "ty": "<8 x i8>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "dup v1.8b, w0\nneg v1.8b, v1.8b\nushl v0.8b, v0.8b, v1.8b\nret",
  "giasm": "dup v1.8b, w0\nneg v1.8b, v1.8b\nushl v0.8b, v0.8b, v1.8b\nret",
  "ll": "define <8 x i8> @test(<8 x i8> %a, i8 %bs) {\n  %i = insertelement <8 x i8> poison, i8 %bs, i64 0\n  %b = shufflevector <8 x i8> %i, <8 x i8> poison, <8 x i32> zeroinitializer\n  %r = lshr <8 x i8> %a, %b\n  ret <8 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <8 x i8> poison, i8 %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <8 x i8> %i, <8 x i8> poison, <8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = lshr <8 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i8> %r"
 },
 {
  "instr": "lshr",
  "ty": "<8 x i8>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "ushr v0.8b, v0.8b, #7\nret",
  "giasm": "ushr v0.8b, v0.8b, #7\nret",
  "ll": "define <8 x i8> @test(<8 x i8> %a) {\n  %r = lshr <8 x i8> %a, splat (i8 7)\n  ret <8 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = lshr <8 x i8> %a, splat (i8 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i8> %r"
 },
 {
  "instr": "lshr",
  "ty": "<16 x i8>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "neg v1.16b, v1.16b\nushl v0.16b, v0.16b, v1.16b\nret",
  "giasm": "neg v1.16b, v1.16b\nushl v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <16 x i8> @test(<16 x i8> %a, <16 x i8> %b) {\n  %r = lshr <16 x i8> %a, %b\n  ret <16 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = lshr <16 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i8> %r"
 },
 {
  "instr": "lshr",
  "ty": "<16 x i8>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 4,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nushl v0.16b, v0.16b, v1.16b\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nneg v1.16b, v1.16b\nushl v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <16 x i8> @test(<16 x i8> %a) {\n  %r = lshr <16 x i8> %a, <i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6>\n  ret <16 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = lshr <16 x i8> %a, <i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6>\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i8> %r"
 },
 {
  "instr": "lshr",
  "ty": "<16 x i8>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "dup v1.16b, w0\nneg v1.16b, v1.16b\nushl v0.16b, v0.16b, v1.16b\nret",
  "giasm": "dup v1.16b, w0\nneg v1.16b, v1.16b\nushl v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <16 x i8> @test(<16 x i8> %a, i8 %bs) {\n  %i = insertelement <16 x i8> poison, i8 %bs, i64 0\n  %b = shufflevector <16 x i8> %i, <16 x i8> poison, <16 x i32> zeroinitializer\n  %r = lshr <16 x i8> %a, %b\n  ret <16 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <16 x i8> poison, i8 %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <16 x i8> %i, <16 x i8> poison, <16 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = lshr <16 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i8> %r"
 },
 {
  "instr": "lshr",
  "ty": "<16 x i8>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "ushr v0.16b, v0.16b, #7\nret",
  "giasm": "ushr v0.16b, v0.16b, #7\nret",
  "ll": "define <16 x i8> @test(<16 x i8> %a) {\n  %r = lshr <16 x i8> %a, splat (i8 7)\n  ret <16 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = lshr <16 x i8> %a, splat (i8 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i8> %r"
 },
 {
  "instr": "lshr",
  "ty": "<32 x i8>",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "neg v2.16b, v2.16b\nneg v3.16b, v3.16b\nushl v0.16b, v0.16b, v2.16b\nushl v1.16b, v1.16b, v3.16b\nret",
  "giasm": "neg v2.16b, v2.16b\nneg v3.16b, v3.16b\nushl v0.16b, v0.16b, v2.16b\nushl v1.16b, v1.16b, v3.16b\nret",
  "ll": "define <32 x i8> @test(<32 x i8> %a, <32 x i8> %b) {\n  %r = lshr <32 x i8> %a, %b\n  ret <32 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = lshr <32 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i8> %r"
 },
 {
  "instr": "lshr",
  "ty": "<32 x i8>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 5,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nushl v0.16b, v0.16b, v2.16b\nushl v1.16b, v1.16b, v2.16b\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nneg v2.16b, v2.16b\nushl v0.16b, v0.16b, v2.16b\nushl v1.16b, v1.16b, v2.16b\nret",
  "ll": "define <32 x i8> @test(<32 x i8> %a) {\n  %r = lshr <32 x i8> %a, <i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6>\n  ret <32 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = lshr <32 x i8> %a, <i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6>\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i8> %r"
 },
 {
  "instr": "lshr",
  "ty": "<32 x i8>",
  "variant": "binopsplat",
  "codesize": 4,
  "thru": 6,
  "lat": 5,
  "sizelat": 5,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "dup v2.16b, w0\nneg v2.16b, v2.16b\nushl v0.16b, v0.16b, v2.16b\nushl v1.16b, v1.16b, v2.16b\nret",
  "giasm": "dup v2.16b, w0\nneg v2.16b, v2.16b\nushl v0.16b, v0.16b, v2.16b\nushl v1.16b, v1.16b, v2.16b\nret",
  "ll": "define <32 x i8> @test(<32 x i8> %a, i8 %bs) {\n  %i = insertelement <32 x i8> poison, i8 %bs, i64 0\n  %b = shufflevector <32 x i8> %i, <32 x i8> poison, <32 x i32> zeroinitializer\n  %r = lshr <32 x i8> %a, %b\n  ret <32 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <32 x i8> poison, i8 %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <32 x i8> %i, <32 x i8> poison, <32 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = lshr <32 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i8> %r"
 },
 {
  "instr": "lshr",
  "ty": "<32 x i8>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "ushr v0.16b, v0.16b, #7\nushr v1.16b, v1.16b, #7\nret",
  "giasm": "ushr v0.16b, v0.16b, #7\nushr v1.16b, v1.16b, #7\nret",
  "ll": "define <32 x i8> @test(<32 x i8> %a) {\n  %r = lshr <32 x i8> %a, splat (i8 7)\n  ret <32 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = lshr <32 x i8> %a, splat (i8 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i8> %r"
 },
 {
  "instr": "lshr",
  "ty": "<4 x i16>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "neg v1.4h, v1.4h\nushl v0.4h, v0.4h, v1.4h\nret",
  "giasm": "neg v1.4h, v1.4h\nushl v0.4h, v0.4h, v1.4h\nret",
  "ll": "define <4 x i16> @test(<4 x i16> %a, <4 x i16> %b) {\n  %r = lshr <4 x i16> %a, %b\n  ret <4 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = lshr <4 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i16> %r"
 },
 {
  "instr": "lshr",
  "ty": "<4 x i16>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 4,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr d1, [x8, :lo12:.LCPI0_0]\nushl v0.4h, v0.4h, v1.4h\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr d1, [x8, :lo12:.LCPI0_0]\nneg v1.4h, v1.4h\nushl v0.4h, v0.4h, v1.4h\nret",
  "ll": "define <4 x i16> @test(<4 x i16> %a) {\n  %r = lshr <4 x i16> %a, <i16 7, i16 6, i16 7, i16 6>\n  ret <4 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = lshr <4 x i16> %a, <i16 7, i16 6, i16 7, i16 6>\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i16> %r"
 },
 {
  "instr": "lshr",
  "ty": "<4 x i16>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "dup v1.4h, w0\nneg v1.4h, v1.4h\nushl v0.4h, v0.4h, v1.4h\nret",
  "giasm": "dup v1.4h, w0\nneg v1.4h, v1.4h\nushl v0.4h, v0.4h, v1.4h\nret",
  "ll": "define <4 x i16> @test(<4 x i16> %a, i16 %bs) {\n  %i = insertelement <4 x i16> poison, i16 %bs, i64 0\n  %b = shufflevector <4 x i16> %i, <4 x i16> poison, <4 x i32> zeroinitializer\n  %r = lshr <4 x i16> %a, %b\n  ret <4 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <4 x i16> poison, i16 %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <4 x i16> %i, <4 x i16> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = lshr <4 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i16> %r"
 },
 {
  "instr": "lshr",
  "ty": "<4 x i16>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "ushr v0.4h, v0.4h, #7\nret",
  "giasm": "ushr v0.4h, v0.4h, #7\nret",
  "ll": "define <4 x i16> @test(<4 x i16> %a) {\n  %r = lshr <4 x i16> %a, splat (i16 7)\n  ret <4 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = lshr <4 x i16> %a, splat (i16 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i16> %r"
 },
 {
  "instr": "lshr",
  "ty": "<8 x i16>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "neg v1.8h, v1.8h\nushl v0.8h, v0.8h, v1.8h\nret",
  "giasm": "neg v1.8h, v1.8h\nushl v0.8h, v0.8h, v1.8h\nret",
  "ll": "define <8 x i16> @test(<8 x i16> %a, <8 x i16> %b) {\n  %r = lshr <8 x i16> %a, %b\n  ret <8 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = lshr <8 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i16> %r"
 },
 {
  "instr": "lshr",
  "ty": "<8 x i16>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 4,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nushl v0.8h, v0.8h, v1.8h\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nneg v1.8h, v1.8h\nushl v0.8h, v0.8h, v1.8h\nret",
  "ll": "define <8 x i16> @test(<8 x i16> %a) {\n  %r = lshr <8 x i16> %a, <i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6>\n  ret <8 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = lshr <8 x i16> %a, <i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6>\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i16> %r"
 },
 {
  "instr": "lshr",
  "ty": "<8 x i16>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "dup v1.8h, w0\nneg v1.8h, v1.8h\nushl v0.8h, v0.8h, v1.8h\nret",
  "giasm": "dup v1.8h, w0\nneg v1.8h, v1.8h\nushl v0.8h, v0.8h, v1.8h\nret",
  "ll": "define <8 x i16> @test(<8 x i16> %a, i16 %bs) {\n  %i = insertelement <8 x i16> poison, i16 %bs, i64 0\n  %b = shufflevector <8 x i16> %i, <8 x i16> poison, <8 x i32> zeroinitializer\n  %r = lshr <8 x i16> %a, %b\n  ret <8 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <8 x i16> poison, i16 %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <8 x i16> %i, <8 x i16> poison, <8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = lshr <8 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i16> %r"
 },
 {
  "instr": "lshr",
  "ty": "<8 x i16>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "ushr v0.8h, v0.8h, #7\nret",
  "giasm": "ushr v0.8h, v0.8h, #7\nret",
  "ll": "define <8 x i16> @test(<8 x i16> %a) {\n  %r = lshr <8 x i16> %a, splat (i16 7)\n  ret <8 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = lshr <8 x i16> %a, splat (i16 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i16> %r"
 },
 {
  "instr": "lshr",
  "ty": "<16 x i16>",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "neg v2.8h, v2.8h\nneg v3.8h, v3.8h\nushl v0.8h, v0.8h, v2.8h\nushl v1.8h, v1.8h, v3.8h\nret",
  "giasm": "neg v2.8h, v2.8h\nneg v3.8h, v3.8h\nushl v0.8h, v0.8h, v2.8h\nushl v1.8h, v1.8h, v3.8h\nret",
  "ll": "define <16 x i16> @test(<16 x i16> %a, <16 x i16> %b) {\n  %r = lshr <16 x i16> %a, %b\n  ret <16 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = lshr <16 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i16> %r"
 },
 {
  "instr": "lshr",
  "ty": "<16 x i16>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 5,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nushl v0.8h, v0.8h, v2.8h\nushl v1.8h, v1.8h, v2.8h\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nneg v2.8h, v2.8h\nushl v0.8h, v0.8h, v2.8h\nushl v1.8h, v1.8h, v2.8h\nret",
  "ll": "define <16 x i16> @test(<16 x i16> %a) {\n  %r = lshr <16 x i16> %a, <i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6>\n  ret <16 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = lshr <16 x i16> %a, <i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6>\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i16> %r"
 },
 {
  "instr": "lshr",
  "ty": "<16 x i16>",
  "variant": "binopsplat",
  "codesize": 4,
  "thru": 6,
  "lat": 5,
  "sizelat": 5,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "dup v2.8h, w0\nneg v2.8h, v2.8h\nushl v0.8h, v0.8h, v2.8h\nushl v1.8h, v1.8h, v2.8h\nret",
  "giasm": "dup v2.8h, w0\nneg v2.8h, v2.8h\nushl v0.8h, v0.8h, v2.8h\nushl v1.8h, v1.8h, v2.8h\nret",
  "ll": "define <16 x i16> @test(<16 x i16> %a, i16 %bs) {\n  %i = insertelement <16 x i16> poison, i16 %bs, i64 0\n  %b = shufflevector <16 x i16> %i, <16 x i16> poison, <16 x i32> zeroinitializer\n  %r = lshr <16 x i16> %a, %b\n  ret <16 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <16 x i16> poison, i16 %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <16 x i16> %i, <16 x i16> poison, <16 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = lshr <16 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i16> %r"
 },
 {
  "instr": "lshr",
  "ty": "<16 x i16>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "ushr v0.8h, v0.8h, #7\nushr v1.8h, v1.8h, #7\nret",
  "giasm": "ushr v0.8h, v0.8h, #7\nushr v1.8h, v1.8h, #7\nret",
  "ll": "define <16 x i16> @test(<16 x i16> %a) {\n  %r = lshr <16 x i16> %a, splat (i16 7)\n  ret <16 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = lshr <16 x i16> %a, splat (i16 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i16> %r"
 },
 {
  "instr": "lshr",
  "ty": "<2 x i32>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "neg v1.2s, v1.2s\nushl v0.2s, v0.2s, v1.2s\nret",
  "giasm": "neg v1.2s, v1.2s\nushl v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x i32> @test(<2 x i32> %a, <2 x i32> %b) {\n  %r = lshr <2 x i32> %a, %b\n  ret <2 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = lshr <2 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i32> %r"
 },
 {
  "instr": "lshr",
  "ty": "<2 x i32>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 4,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr d1, [x8, :lo12:.LCPI0_0]\nushl v0.2s, v0.2s, v1.2s\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr d1, [x8, :lo12:.LCPI0_0]\nneg v1.2s, v1.2s\nushl v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x i32> @test(<2 x i32> %a) {\n  %r = lshr <2 x i32> %a, <i32 7, i32 6>\n  ret <2 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = lshr <2 x i32> %a, <i32 7, i32 6>\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i32> %r"
 },
 {
  "instr": "lshr",
  "ty": "<2 x i32>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "dup v1.2s, w0\nneg v1.2s, v1.2s\nushl v0.2s, v0.2s, v1.2s\nret",
  "giasm": "dup v1.2s, w0\nneg v1.2s, v1.2s\nushl v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x i32> @test(<2 x i32> %a, i32 %bs) {\n  %i = insertelement <2 x i32> poison, i32 %bs, i64 0\n  %b = shufflevector <2 x i32> %i, <2 x i32> poison, <2 x i32> zeroinitializer\n  %r = lshr <2 x i32> %a, %b\n  ret <2 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <2 x i32> poison, i32 %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <2 x i32> %i, <2 x i32> poison, <2 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = lshr <2 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i32> %r"
 },
 {
  "instr": "lshr",
  "ty": "<2 x i32>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "ushr v0.2s, v0.2s, #7\nret",
  "giasm": "ushr v0.2s, v0.2s, #7\nret",
  "ll": "define <2 x i32> @test(<2 x i32> %a) {\n  %r = lshr <2 x i32> %a, splat (i32 7)\n  ret <2 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = lshr <2 x i32> %a, splat (i32 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i32> %r"
 },
 {
  "instr": "lshr",
  "ty": "<4 x i32>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "neg v1.4s, v1.4s\nushl v0.4s, v0.4s, v1.4s\nret",
  "giasm": "neg v1.4s, v1.4s\nushl v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x i32> @test(<4 x i32> %a, <4 x i32> %b) {\n  %r = lshr <4 x i32> %a, %b\n  ret <4 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = lshr <4 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i32> %r"
 },
 {
  "instr": "lshr",
  "ty": "<4 x i32>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 4,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nushl v0.4s, v0.4s, v1.4s\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nneg v1.4s, v1.4s\nushl v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x i32> @test(<4 x i32> %a) {\n  %r = lshr <4 x i32> %a, <i32 7, i32 6, i32 7, i32 6>\n  ret <4 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = lshr <4 x i32> %a, <i32 7, i32 6, i32 7, i32 6>\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i32> %r"
 },
 {
  "instr": "lshr",
  "ty": "<4 x i32>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "dup v1.4s, w0\nneg v1.4s, v1.4s\nushl v0.4s, v0.4s, v1.4s\nret",
  "giasm": "dup v1.4s, w0\nneg v1.4s, v1.4s\nushl v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x i32> @test(<4 x i32> %a, i32 %bs) {\n  %i = insertelement <4 x i32> poison, i32 %bs, i64 0\n  %b = shufflevector <4 x i32> %i, <4 x i32> poison, <4 x i32> zeroinitializer\n  %r = lshr <4 x i32> %a, %b\n  ret <4 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <4 x i32> poison, i32 %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <4 x i32> %i, <4 x i32> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = lshr <4 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i32> %r"
 },
 {
  "instr": "lshr",
  "ty": "<4 x i32>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "ushr v0.4s, v0.4s, #7\nret",
  "giasm": "ushr v0.4s, v0.4s, #7\nret",
  "ll": "define <4 x i32> @test(<4 x i32> %a) {\n  %r = lshr <4 x i32> %a, splat (i32 7)\n  ret <4 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = lshr <4 x i32> %a, splat (i32 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i32> %r"
 },
 {
  "instr": "lshr",
  "ty": "<8 x i32>",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "neg v2.4s, v2.4s\nneg v3.4s, v3.4s\nushl v0.4s, v0.4s, v2.4s\nushl v1.4s, v1.4s, v3.4s\nret",
  "giasm": "neg v2.4s, v2.4s\nneg v3.4s, v3.4s\nushl v0.4s, v0.4s, v2.4s\nushl v1.4s, v1.4s, v3.4s\nret",
  "ll": "define <8 x i32> @test(<8 x i32> %a, <8 x i32> %b) {\n  %r = lshr <8 x i32> %a, %b\n  ret <8 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = lshr <8 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i32> %r"
 },
 {
  "instr": "lshr",
  "ty": "<8 x i32>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 5,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nushl v0.4s, v0.4s, v2.4s\nushl v1.4s, v1.4s, v2.4s\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nneg v2.4s, v2.4s\nushl v0.4s, v0.4s, v2.4s\nushl v1.4s, v1.4s, v2.4s\nret",
  "ll": "define <8 x i32> @test(<8 x i32> %a) {\n  %r = lshr <8 x i32> %a, <i32 7, i32 6, i32 7, i32 6, i32 7, i32 6, i32 7, i32 6>\n  ret <8 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = lshr <8 x i32> %a, <i32 7, i32 6, i32 7, i32 6, i32 7, i32 6, i32 7, i32 6>\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i32> %r"
 },
 {
  "instr": "lshr",
  "ty": "<8 x i32>",
  "variant": "binopsplat",
  "codesize": 4,
  "thru": 6,
  "lat": 5,
  "sizelat": 5,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "dup v2.4s, w0\nneg v2.4s, v2.4s\nushl v0.4s, v0.4s, v2.4s\nushl v1.4s, v1.4s, v2.4s\nret",
  "giasm": "dup v2.4s, w0\nneg v2.4s, v2.4s\nushl v0.4s, v0.4s, v2.4s\nushl v1.4s, v1.4s, v2.4s\nret",
  "ll": "define <8 x i32> @test(<8 x i32> %a, i32 %bs) {\n  %i = insertelement <8 x i32> poison, i32 %bs, i64 0\n  %b = shufflevector <8 x i32> %i, <8 x i32> poison, <8 x i32> zeroinitializer\n  %r = lshr <8 x i32> %a, %b\n  ret <8 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <8 x i32> poison, i32 %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <8 x i32> %i, <8 x i32> poison, <8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = lshr <8 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i32> %r"
 },
 {
  "instr": "lshr",
  "ty": "<8 x i32>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "ushr v0.4s, v0.4s, #7\nushr v1.4s, v1.4s, #7\nret",
  "giasm": "ushr v0.4s, v0.4s, #7\nushr v1.4s, v1.4s, #7\nret",
  "ll": "define <8 x i32> @test(<8 x i32> %a) {\n  %r = lshr <8 x i32> %a, splat (i32 7)\n  ret <8 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = lshr <8 x i32> %a, splat (i32 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i32> %r"
 },
 {
  "instr": "lshr",
  "ty": "<2 x i64>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "neg v1.2d, v1.2d\nushl v0.2d, v0.2d, v1.2d\nret",
  "giasm": "neg v1.2d, v1.2d\nushl v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x i64> @test(<2 x i64> %a, <2 x i64> %b) {\n  %r = lshr <2 x i64> %a, %b\n  ret <2 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = lshr <2 x i64> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i64> %r"
 },
 {
  "instr": "lshr",
  "ty": "<2 x i64>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 4,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nushl v0.2d, v0.2d, v1.2d\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nneg v1.2d, v1.2d\nushl v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x i64> @test(<2 x i64> %a) {\n  %r = lshr <2 x i64> %a, <i64 7, i64 6>\n  ret <2 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = lshr <2 x i64> %a, <i64 7, i64 6>\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i64> %r"
 },
 {
  "instr": "lshr",
  "ty": "<2 x i64>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "dup v1.2d, x0\nneg v1.2d, v1.2d\nushl v0.2d, v0.2d, v1.2d\nret",
  "giasm": "dup v1.2d, x0\nneg v1.2d, v1.2d\nushl v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x i64> @test(<2 x i64> %a, i64 %bs) {\n  %i = insertelement <2 x i64> poison, i64 %bs, i64 0\n  %b = shufflevector <2 x i64> %i, <2 x i64> poison, <2 x i32> zeroinitializer\n  %r = lshr <2 x i64> %a, %b\n  ret <2 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <2 x i64> poison, i64 %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <2 x i64> %i, <2 x i64> poison, <2 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = lshr <2 x i64> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i64> %r"
 },
 {
  "instr": "lshr",
  "ty": "<2 x i64>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "ushr v0.2d, v0.2d, #7\nret",
  "giasm": "ushr v0.2d, v0.2d, #7\nret",
  "ll": "define <2 x i64> @test(<2 x i64> %a) {\n  %r = lshr <2 x i64> %a, splat (i64 7)\n  ret <2 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = lshr <2 x i64> %a, splat (i64 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i64> %r"
 },
 {
  "instr": "lshr",
  "ty": "<4 x i64>",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "neg v2.2d, v2.2d\nneg v3.2d, v3.2d\nushl v0.2d, v0.2d, v2.2d\nushl v1.2d, v1.2d, v3.2d\nret",
  "giasm": "neg v2.2d, v2.2d\nneg v3.2d, v3.2d\nushl v0.2d, v0.2d, v2.2d\nushl v1.2d, v1.2d, v3.2d\nret",
  "ll": "define <4 x i64> @test(<4 x i64> %a, <4 x i64> %b) {\n  %r = lshr <4 x i64> %a, %b\n  ret <4 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = lshr <4 x i64> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i64> %r"
 },
 {
  "instr": "lshr",
  "ty": "<4 x i64>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 5,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nushl v0.2d, v0.2d, v2.2d\nushl v1.2d, v1.2d, v2.2d\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nneg v2.2d, v2.2d\nushl v0.2d, v0.2d, v2.2d\nushl v1.2d, v1.2d, v2.2d\nret",
  "ll": "define <4 x i64> @test(<4 x i64> %a) {\n  %r = lshr <4 x i64> %a, <i64 7, i64 6, i64 7, i64 6>\n  ret <4 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = lshr <4 x i64> %a, <i64 7, i64 6, i64 7, i64 6>\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i64> %r"
 },
 {
  "instr": "lshr",
  "ty": "<4 x i64>",
  "variant": "binopsplat",
  "codesize": 4,
  "thru": 6,
  "lat": 5,
  "sizelat": 5,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "dup v2.2d, x0\nneg v2.2d, v2.2d\nushl v0.2d, v0.2d, v2.2d\nushl v1.2d, v1.2d, v2.2d\nret",
  "giasm": "dup v2.2d, x0\nneg v2.2d, v2.2d\nushl v0.2d, v0.2d, v2.2d\nushl v1.2d, v1.2d, v2.2d\nret",
  "ll": "define <4 x i64> @test(<4 x i64> %a, i64 %bs) {\n  %i = insertelement <4 x i64> poison, i64 %bs, i64 0\n  %b = shufflevector <4 x i64> %i, <4 x i64> poison, <4 x i32> zeroinitializer\n  %r = lshr <4 x i64> %a, %b\n  ret <4 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <4 x i64> poison, i64 %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <4 x i64> %i, <4 x i64> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = lshr <4 x i64> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i64> %r"
 },
 {
  "instr": "lshr",
  "ty": "<4 x i64>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "ushr v0.2d, v0.2d, #7\nushr v1.2d, v1.2d, #7\nret",
  "giasm": "ushr v0.2d, v0.2d, #7\nushr v1.2d, v1.2d, #7\nret",
  "ll": "define <4 x i64> @test(<4 x i64> %a) {\n  %r = lshr <4 x i64> %a, splat (i64 7)\n  ret <4 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = lshr <4 x i64> %a, splat (i64 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i64> %r"
 },
 {
  "instr": "smin",
  "ty": "i8",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 3,
  "extrasize": 0,
  "asm": "sxtb w8, w1\nsxtb w9, w0\ncmp w9, w8\ncsel w0, w9, w8, lt\nret",
  "giasm": "sxtb w8, w0\ncmp w8, w1, sxtb\ncsel w0, w0, w1, lt\nret",
  "ll": "define i8 @test(i8 %a, i8 %b) {\n  %r = call i8 @llvm.smin(i8 %a, i8 %b)\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call i8 @llvm.smin.i8(i8 %a, i8 %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "smin",
  "ty": "i16",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 3,
  "extrasize": 0,
  "asm": "sxth w8, w1\nsxth w9, w0\ncmp w9, w8\ncsel w0, w9, w8, lt\nret",
  "giasm": "sxth w8, w0\ncmp w8, w1, sxth\ncsel w0, w0, w1, lt\nret",
  "ll": "define i16 @test(i16 %a, i16 %b) {\n  %r = call i16 @llvm.smin(i16 %a, i16 %b)\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call i16 @llvm.smin.i16(i16 %a, i16 %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "smin",
  "ty": "i32",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmp w0, w1\ncsel w0, w0, w1, lt\nret",
  "giasm": "cmp w0, w1\ncsel w0, w0, w1, lt\nret",
  "ll": "define i32 @test(i32 %a, i32 %b) {\n  %r = call i32 @llvm.smin(i32 %a, i32 %b)\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call i32 @llvm.smin.i32(i32 %a, i32 %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "smin",
  "ty": "i64",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmp x0, x1\ncsel x0, x0, x1, lt\nret",
  "giasm": "cmp x0, x1\ncsel x0, x0, x1, lt\nret",
  "ll": "define i64 @test(i64 %a, i64 %b) {\n  %r = call i64 @llvm.smin(i64 %a, i64 %b)\n  ret i64 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call i64 @llvm.smin.i64(i64 %a, i64 %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret i64 %r"
 },
 {
  "instr": "smin",
  "ty": "<8 x i8>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "smin v0.8b, v0.8b, v1.8b\nret",
  "giasm": "smin v0.8b, v0.8b, v1.8b\nret",
  "ll": "define <8 x i8> @test(<8 x i8> %a, <8 x i8> %b) {\n  %r = call <8 x i8> @llvm.smin(<8 x i8> %a, <8 x i8> %b)\n  ret <8 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <8 x i8> @llvm.smin.v8i8(<8 x i8> %a, <8 x i8> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i8> %r"
 },
 {
  "instr": "smin",
  "ty": "<16 x i8>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "smin v0.16b, v0.16b, v1.16b\nret",
  "giasm": "smin v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <16 x i8> @test(<16 x i8> %a, <16 x i8> %b) {\n  %r = call <16 x i8> @llvm.smin(<16 x i8> %a, <16 x i8> %b)\n  ret <16 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <16 x i8> @llvm.smin.v16i8(<16 x i8> %a, <16 x i8> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i8> %r"
 },
 {
  "instr": "smin",
  "ty": "<32 x i8>",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "smin v1.16b, v1.16b, v3.16b\nsmin v0.16b, v0.16b, v2.16b\nret",
  "giasm": "smin v0.16b, v0.16b, v2.16b\nsmin v1.16b, v1.16b, v3.16b\nret",
  "ll": "define <32 x i8> @test(<32 x i8> %a, <32 x i8> %b) {\n  %r = call <32 x i8> @llvm.smin(<32 x i8> %a, <32 x i8> %b)\n  ret <32 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <32 x i8> @llvm.smin.v32i8(<32 x i8> %a, <32 x i8> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i8> %r"
 },
 {
  "instr": "smin",
  "ty": "<4 x i16>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "smin v0.4h, v0.4h, v1.4h\nret",
  "giasm": "smin v0.4h, v0.4h, v1.4h\nret",
  "ll": "define <4 x i16> @test(<4 x i16> %a, <4 x i16> %b) {\n  %r = call <4 x i16> @llvm.smin(<4 x i16> %a, <4 x i16> %b)\n  ret <4 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x i16> @llvm.smin.v4i16(<4 x i16> %a, <4 x i16> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i16> %r"
 },
 {
  "instr": "smin",
  "ty": "<8 x i16>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "smin v0.8h, v0.8h, v1.8h\nret",
  "giasm": "smin v0.8h, v0.8h, v1.8h\nret",
  "ll": "define <8 x i16> @test(<8 x i16> %a, <8 x i16> %b) {\n  %r = call <8 x i16> @llvm.smin(<8 x i16> %a, <8 x i16> %b)\n  ret <8 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <8 x i16> @llvm.smin.v8i16(<8 x i16> %a, <8 x i16> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i16> %r"
 },
 {
  "instr": "smin",
  "ty": "<16 x i16>",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "smin v1.8h, v1.8h, v3.8h\nsmin v0.8h, v0.8h, v2.8h\nret",
  "giasm": "smin v0.8h, v0.8h, v2.8h\nsmin v1.8h, v1.8h, v3.8h\nret",
  "ll": "define <16 x i16> @test(<16 x i16> %a, <16 x i16> %b) {\n  %r = call <16 x i16> @llvm.smin(<16 x i16> %a, <16 x i16> %b)\n  ret <16 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <16 x i16> @llvm.smin.v16i16(<16 x i16> %a, <16 x i16> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i16> %r"
 },
 {
  "instr": "smin",
  "ty": "<2 x i32>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "smin v0.2s, v0.2s, v1.2s\nret",
  "giasm": "smin v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x i32> @test(<2 x i32> %a, <2 x i32> %b) {\n  %r = call <2 x i32> @llvm.smin(<2 x i32> %a, <2 x i32> %b)\n  ret <2 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x i32> @llvm.smin.v2i32(<2 x i32> %a, <2 x i32> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i32> %r"
 },
 {
  "instr": "smin",
  "ty": "<4 x i32>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "smin v0.4s, v0.4s, v1.4s\nret",
  "giasm": "smin v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x i32> @test(<4 x i32> %a, <4 x i32> %b) {\n  %r = call <4 x i32> @llvm.smin(<4 x i32> %a, <4 x i32> %b)\n  ret <4 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x i32> @llvm.smin.v4i32(<4 x i32> %a, <4 x i32> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i32> %r"
 },
 {
  "instr": "smin",
  "ty": "<8 x i32>",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "smin v1.4s, v1.4s, v3.4s\nsmin v0.4s, v0.4s, v2.4s\nret",
  "giasm": "smin v0.4s, v0.4s, v2.4s\nsmin v1.4s, v1.4s, v3.4s\nret",
  "ll": "define <8 x i32> @test(<8 x i32> %a, <8 x i32> %b) {\n  %r = call <8 x i32> @llvm.smin(<8 x i32> %a, <8 x i32> %b)\n  ret <8 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <8 x i32> @llvm.smin.v8i32(<8 x i32> %a, <8 x i32> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i32> %r"
 },
 {
  "instr": "smin",
  "ty": "<2 x i64>",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmgt v2.2d, v1.2d, v0.2d\nbif v0.16b, v1.16b, v2.16b\nret",
  "giasm": "cmgt v2.2d, v1.2d, v0.2d\nbif v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <2 x i64> @test(<2 x i64> %a, <2 x i64> %b) {\n  %r = call <2 x i64> @llvm.smin(<2 x i64> %a, <2 x i64> %b)\n  ret <2 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <2 x i64> @llvm.smin.v2i64(<2 x i64> %a, <2 x i64> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i64> %r"
 },
 {
  "instr": "smin",
  "ty": "<4 x i64>",
  "variant": "binop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmgt v4.2d, v3.2d, v1.2d\ncmgt v5.2d, v2.2d, v0.2d\nbif v1.16b, v3.16b, v4.16b\nbif v0.16b, v2.16b, v5.16b\nret",
  "giasm": "cmgt v4.2d, v2.2d, v0.2d\ncmgt v5.2d, v3.2d, v1.2d\nbif v0.16b, v2.16b, v4.16b\nbif v1.16b, v3.16b, v5.16b\nret",
  "ll": "define <4 x i64> @test(<4 x i64> %a, <4 x i64> %b) {\n  %r = call <4 x i64> @llvm.smin(<4 x i64> %a, <4 x i64> %b)\n  ret <4 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x i64> @llvm.smin.v4i64(<4 x i64> %a, <4 x i64> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i64> %r"
 },
 {
  "instr": "smax",
  "ty": "i8",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 3,
  "extrasize": 0,
  "asm": "sxtb w8, w1\nsxtb w9, w0\ncmp w9, w8\ncsel w0, w9, w8, gt\nret",
  "giasm": "sxtb w8, w0\ncmp w8, w1, sxtb\ncsel w0, w0, w1, gt\nret",
  "ll": "define i8 @test(i8 %a, i8 %b) {\n  %r = call i8 @llvm.smax(i8 %a, i8 %b)\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call i8 @llvm.smax.i8(i8 %a, i8 %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "smax",
  "ty": "i16",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 3,
  "extrasize": 0,
  "asm": "sxth w8, w1\nsxth w9, w0\ncmp w9, w8\ncsel w0, w9, w8, gt\nret",
  "giasm": "sxth w8, w0\ncmp w8, w1, sxth\ncsel w0, w0, w1, gt\nret",
  "ll": "define i16 @test(i16 %a, i16 %b) {\n  %r = call i16 @llvm.smax(i16 %a, i16 %b)\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call i16 @llvm.smax.i16(i16 %a, i16 %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "smax",
  "ty": "i32",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmp w0, w1\ncsel w0, w0, w1, gt\nret",
  "giasm": "cmp w0, w1\ncsel w0, w0, w1, gt\nret",
  "ll": "define i32 @test(i32 %a, i32 %b) {\n  %r = call i32 @llvm.smax(i32 %a, i32 %b)\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call i32 @llvm.smax.i32(i32 %a, i32 %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "smax",
  "ty": "i64",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmp x0, x1\ncsel x0, x0, x1, gt\nret",
  "giasm": "cmp x0, x1\ncsel x0, x0, x1, gt\nret",
  "ll": "define i64 @test(i64 %a, i64 %b) {\n  %r = call i64 @llvm.smax(i64 %a, i64 %b)\n  ret i64 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call i64 @llvm.smax.i64(i64 %a, i64 %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret i64 %r"
 },
 {
  "instr": "smax",
  "ty": "<8 x i8>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "smax v0.8b, v0.8b, v1.8b\nret",
  "giasm": "smax v0.8b, v0.8b, v1.8b\nret",
  "ll": "define <8 x i8> @test(<8 x i8> %a, <8 x i8> %b) {\n  %r = call <8 x i8> @llvm.smax(<8 x i8> %a, <8 x i8> %b)\n  ret <8 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <8 x i8> @llvm.smax.v8i8(<8 x i8> %a, <8 x i8> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i8> %r"
 },
 {
  "instr": "smax",
  "ty": "<16 x i8>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "smax v0.16b, v0.16b, v1.16b\nret",
  "giasm": "smax v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <16 x i8> @test(<16 x i8> %a, <16 x i8> %b) {\n  %r = call <16 x i8> @llvm.smax(<16 x i8> %a, <16 x i8> %b)\n  ret <16 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <16 x i8> @llvm.smax.v16i8(<16 x i8> %a, <16 x i8> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i8> %r"
 },
 {
  "instr": "smax",
  "ty": "<32 x i8>",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "smax v1.16b, v1.16b, v3.16b\nsmax v0.16b, v0.16b, v2.16b\nret",
  "giasm": "smax v0.16b, v0.16b, v2.16b\nsmax v1.16b, v1.16b, v3.16b\nret",
  "ll": "define <32 x i8> @test(<32 x i8> %a, <32 x i8> %b) {\n  %r = call <32 x i8> @llvm.smax(<32 x i8> %a, <32 x i8> %b)\n  ret <32 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <32 x i8> @llvm.smax.v32i8(<32 x i8> %a, <32 x i8> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i8> %r"
 },
 {
  "instr": "smax",
  "ty": "<4 x i16>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "smax v0.4h, v0.4h, v1.4h\nret",
  "giasm": "smax v0.4h, v0.4h, v1.4h\nret",
  "ll": "define <4 x i16> @test(<4 x i16> %a, <4 x i16> %b) {\n  %r = call <4 x i16> @llvm.smax(<4 x i16> %a, <4 x i16> %b)\n  ret <4 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x i16> @llvm.smax.v4i16(<4 x i16> %a, <4 x i16> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i16> %r"
 },
 {
  "instr": "smax",
  "ty": "<8 x i16>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "smax v0.8h, v0.8h, v1.8h\nret",
  "giasm": "smax v0.8h, v0.8h, v1.8h\nret",
  "ll": "define <8 x i16> @test(<8 x i16> %a, <8 x i16> %b) {\n  %r = call <8 x i16> @llvm.smax(<8 x i16> %a, <8 x i16> %b)\n  ret <8 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <8 x i16> @llvm.smax.v8i16(<8 x i16> %a, <8 x i16> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i16> %r"
 },
 {
  "instr": "smax",
  "ty": "<16 x i16>",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "smax v1.8h, v1.8h, v3.8h\nsmax v0.8h, v0.8h, v2.8h\nret",
  "giasm": "smax v0.8h, v0.8h, v2.8h\nsmax v1.8h, v1.8h, v3.8h\nret",
  "ll": "define <16 x i16> @test(<16 x i16> %a, <16 x i16> %b) {\n  %r = call <16 x i16> @llvm.smax(<16 x i16> %a, <16 x i16> %b)\n  ret <16 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <16 x i16> @llvm.smax.v16i16(<16 x i16> %a, <16 x i16> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i16> %r"
 },
 {
  "instr": "smax",
  "ty": "<2 x i32>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "smax v0.2s, v0.2s, v1.2s\nret",
  "giasm": "smax v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x i32> @test(<2 x i32> %a, <2 x i32> %b) {\n  %r = call <2 x i32> @llvm.smax(<2 x i32> %a, <2 x i32> %b)\n  ret <2 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x i32> @llvm.smax.v2i32(<2 x i32> %a, <2 x i32> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i32> %r"
 },
 {
  "instr": "smax",
  "ty": "<4 x i32>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "smax v0.4s, v0.4s, v1.4s\nret",
  "giasm": "smax v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x i32> @test(<4 x i32> %a, <4 x i32> %b) {\n  %r = call <4 x i32> @llvm.smax(<4 x i32> %a, <4 x i32> %b)\n  ret <4 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a, <4 x i32> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i32> %r"
 },
 {
  "instr": "smax",
  "ty": "<8 x i32>",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "smax v1.4s, v1.4s, v3.4s\nsmax v0.4s, v0.4s, v2.4s\nret",
  "giasm": "smax v0.4s, v0.4s, v2.4s\nsmax v1.4s, v1.4s, v3.4s\nret",
  "ll": "define <8 x i32> @test(<8 x i32> %a, <8 x i32> %b) {\n  %r = call <8 x i32> @llvm.smax(<8 x i32> %a, <8 x i32> %b)\n  ret <8 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a, <8 x i32> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i32> %r"
 },
 {
  "instr": "smax",
  "ty": "<2 x i64>",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmgt v2.2d, v0.2d, v1.2d\nbif v0.16b, v1.16b, v2.16b\nret",
  "giasm": "cmgt v2.2d, v0.2d, v1.2d\nbif v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <2 x i64> @test(<2 x i64> %a, <2 x i64> %b) {\n  %r = call <2 x i64> @llvm.smax(<2 x i64> %a, <2 x i64> %b)\n  ret <2 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <2 x i64> @llvm.smax.v2i64(<2 x i64> %a, <2 x i64> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i64> %r"
 },
 {
  "instr": "smax",
  "ty": "<4 x i64>",
  "variant": "binop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmgt v4.2d, v1.2d, v3.2d\ncmgt v5.2d, v0.2d, v2.2d\nbif v1.16b, v3.16b, v4.16b\nbif v0.16b, v2.16b, v5.16b\nret",
  "giasm": "cmgt v4.2d, v0.2d, v2.2d\ncmgt v5.2d, v1.2d, v3.2d\nbif v0.16b, v2.16b, v4.16b\nbif v1.16b, v3.16b, v5.16b\nret",
  "ll": "define <4 x i64> @test(<4 x i64> %a, <4 x i64> %b) {\n  %r = call <4 x i64> @llvm.smax(<4 x i64> %a, <4 x i64> %b)\n  ret <4 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x i64> @llvm.smax.v4i64(<4 x i64> %a, <4 x i64> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i64> %r"
 },
 {
  "instr": "umin",
  "ty": "i8",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 3,
  "extrasize": 0,
  "asm": "and w8, w1, #0xff\nand w9, w0, #0xff\ncmp w9, w8\ncsel w0, w9, w8, lo\nret",
  "giasm": "and w8, w0, #0xff\ncmp w8, w1, uxtb\ncsel w0, w0, w1, lo\nret",
  "ll": "define i8 @test(i8 %a, i8 %b) {\n  %r = call i8 @llvm.umin(i8 %a, i8 %b)\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call i8 @llvm.umin.i8(i8 %a, i8 %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "umin",
  "ty": "i16",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 3,
  "extrasize": 0,
  "asm": "and w8, w1, #0xffff\nand w9, w0, #0xffff\ncmp w9, w8\ncsel w0, w9, w8, lo\nret",
  "giasm": "and w8, w0, #0xffff\ncmp w8, w1, uxth\ncsel w0, w0, w1, lo\nret",
  "ll": "define i16 @test(i16 %a, i16 %b) {\n  %r = call i16 @llvm.umin(i16 %a, i16 %b)\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call i16 @llvm.umin.i16(i16 %a, i16 %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "umin",
  "ty": "i32",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmp w0, w1\ncsel w0, w0, w1, lo\nret",
  "giasm": "cmp w0, w1\ncsel w0, w0, w1, lo\nret",
  "ll": "define i32 @test(i32 %a, i32 %b) {\n  %r = call i32 @llvm.umin(i32 %a, i32 %b)\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call i32 @llvm.umin.i32(i32 %a, i32 %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "umin",
  "ty": "i64",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmp x0, x1\ncsel x0, x0, x1, lo\nret",
  "giasm": "cmp x0, x1\ncsel x0, x0, x1, lo\nret",
  "ll": "define i64 @test(i64 %a, i64 %b) {\n  %r = call i64 @llvm.umin(i64 %a, i64 %b)\n  ret i64 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call i64 @llvm.umin.i64(i64 %a, i64 %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret i64 %r"
 },
 {
  "instr": "umin",
  "ty": "<8 x i8>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "umin v0.8b, v0.8b, v1.8b\nret",
  "giasm": "umin v0.8b, v0.8b, v1.8b\nret",
  "ll": "define <8 x i8> @test(<8 x i8> %a, <8 x i8> %b) {\n  %r = call <8 x i8> @llvm.umin(<8 x i8> %a, <8 x i8> %b)\n  ret <8 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <8 x i8> @llvm.umin.v8i8(<8 x i8> %a, <8 x i8> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i8> %r"
 },
 {
  "instr": "umin",
  "ty": "<16 x i8>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "umin v0.16b, v0.16b, v1.16b\nret",
  "giasm": "umin v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <16 x i8> @test(<16 x i8> %a, <16 x i8> %b) {\n  %r = call <16 x i8> @llvm.umin(<16 x i8> %a, <16 x i8> %b)\n  ret <16 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <16 x i8> @llvm.umin.v16i8(<16 x i8> %a, <16 x i8> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i8> %r"
 },
 {
  "instr": "umin",
  "ty": "<32 x i8>",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "umin v1.16b, v1.16b, v3.16b\numin v0.16b, v0.16b, v2.16b\nret",
  "giasm": "umin v0.16b, v0.16b, v2.16b\numin v1.16b, v1.16b, v3.16b\nret",
  "ll": "define <32 x i8> @test(<32 x i8> %a, <32 x i8> %b) {\n  %r = call <32 x i8> @llvm.umin(<32 x i8> %a, <32 x i8> %b)\n  ret <32 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <32 x i8> @llvm.umin.v32i8(<32 x i8> %a, <32 x i8> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i8> %r"
 },
 {
  "instr": "umin",
  "ty": "<4 x i16>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "umin v0.4h, v0.4h, v1.4h\nret",
  "giasm": "umin v0.4h, v0.4h, v1.4h\nret",
  "ll": "define <4 x i16> @test(<4 x i16> %a, <4 x i16> %b) {\n  %r = call <4 x i16> @llvm.umin(<4 x i16> %a, <4 x i16> %b)\n  ret <4 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x i16> @llvm.umin.v4i16(<4 x i16> %a, <4 x i16> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i16> %r"
 },
 {
  "instr": "umin",
  "ty": "<8 x i16>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "umin v0.8h, v0.8h, v1.8h\nret",
  "giasm": "umin v0.8h, v0.8h, v1.8h\nret",
  "ll": "define <8 x i16> @test(<8 x i16> %a, <8 x i16> %b) {\n  %r = call <8 x i16> @llvm.umin(<8 x i16> %a, <8 x i16> %b)\n  ret <8 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <8 x i16> @llvm.umin.v8i16(<8 x i16> %a, <8 x i16> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i16> %r"
 },
 {
  "instr": "umin",
  "ty": "<16 x i16>",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "umin v1.8h, v1.8h, v3.8h\numin v0.8h, v0.8h, v2.8h\nret",
  "giasm": "umin v0.8h, v0.8h, v2.8h\numin v1.8h, v1.8h, v3.8h\nret",
  "ll": "define <16 x i16> @test(<16 x i16> %a, <16 x i16> %b) {\n  %r = call <16 x i16> @llvm.umin(<16 x i16> %a, <16 x i16> %b)\n  ret <16 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <16 x i16> @llvm.umin.v16i16(<16 x i16> %a, <16 x i16> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i16> %r"
 },
 {
  "instr": "umin",
  "ty": "<2 x i32>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "umin v0.2s, v0.2s, v1.2s\nret",
  "giasm": "umin v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x i32> @test(<2 x i32> %a, <2 x i32> %b) {\n  %r = call <2 x i32> @llvm.umin(<2 x i32> %a, <2 x i32> %b)\n  ret <2 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x i32> @llvm.umin.v2i32(<2 x i32> %a, <2 x i32> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i32> %r"
 },
 {
  "instr": "umin",
  "ty": "<4 x i32>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "umin v0.4s, v0.4s, v1.4s\nret",
  "giasm": "umin v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x i32> @test(<4 x i32> %a, <4 x i32> %b) {\n  %r = call <4 x i32> @llvm.umin(<4 x i32> %a, <4 x i32> %b)\n  ret <4 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x i32> @llvm.umin.v4i32(<4 x i32> %a, <4 x i32> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i32> %r"
 },
 {
  "instr": "umin",
  "ty": "<8 x i32>",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "umin v1.4s, v1.4s, v3.4s\numin v0.4s, v0.4s, v2.4s\nret",
  "giasm": "umin v0.4s, v0.4s, v2.4s\numin v1.4s, v1.4s, v3.4s\nret",
  "ll": "define <8 x i32> @test(<8 x i32> %a, <8 x i32> %b) {\n  %r = call <8 x i32> @llvm.umin(<8 x i32> %a, <8 x i32> %b)\n  ret <8 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <8 x i32> @llvm.umin.v8i32(<8 x i32> %a, <8 x i32> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i32> %r"
 },
 {
  "instr": "umin",
  "ty": "<2 x i64>",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmhi v2.2d, v1.2d, v0.2d\nbif v0.16b, v1.16b, v2.16b\nret",
  "giasm": "cmhi v2.2d, v1.2d, v0.2d\nbif v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <2 x i64> @test(<2 x i64> %a, <2 x i64> %b) {\n  %r = call <2 x i64> @llvm.umin(<2 x i64> %a, <2 x i64> %b)\n  ret <2 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <2 x i64> @llvm.umin.v2i64(<2 x i64> %a, <2 x i64> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i64> %r"
 },
 {
  "instr": "umin",
  "ty": "<4 x i64>",
  "variant": "binop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmhi v4.2d, v3.2d, v1.2d\ncmhi v5.2d, v2.2d, v0.2d\nbif v1.16b, v3.16b, v4.16b\nbif v0.16b, v2.16b, v5.16b\nret",
  "giasm": "cmhi v4.2d, v2.2d, v0.2d\ncmhi v5.2d, v3.2d, v1.2d\nbif v0.16b, v2.16b, v4.16b\nbif v1.16b, v3.16b, v5.16b\nret",
  "ll": "define <4 x i64> @test(<4 x i64> %a, <4 x i64> %b) {\n  %r = call <4 x i64> @llvm.umin(<4 x i64> %a, <4 x i64> %b)\n  ret <4 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x i64> @llvm.umin.v4i64(<4 x i64> %a, <4 x i64> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i64> %r"
 },
 {
  "instr": "umax",
  "ty": "i8",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 3,
  "extrasize": 0,
  "asm": "and w8, w1, #0xff\nand w9, w0, #0xff\ncmp w9, w8\ncsel w0, w9, w8, hi\nret",
  "giasm": "and w8, w0, #0xff\ncmp w8, w1, uxtb\ncsel w0, w0, w1, hi\nret",
  "ll": "define i8 @test(i8 %a, i8 %b) {\n  %r = call i8 @llvm.umax(i8 %a, i8 %b)\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call i8 @llvm.umax.i8(i8 %a, i8 %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "umax",
  "ty": "i16",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 3,
  "extrasize": 0,
  "asm": "and w8, w1, #0xffff\nand w9, w0, #0xffff\ncmp w9, w8\ncsel w0, w9, w8, hi\nret",
  "giasm": "and w8, w0, #0xffff\ncmp w8, w1, uxth\ncsel w0, w0, w1, hi\nret",
  "ll": "define i16 @test(i16 %a, i16 %b) {\n  %r = call i16 @llvm.umax(i16 %a, i16 %b)\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call i16 @llvm.umax.i16(i16 %a, i16 %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "umax",
  "ty": "i32",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmp w0, w1\ncsel w0, w0, w1, hi\nret",
  "giasm": "cmp w0, w1\ncsel w0, w0, w1, hi\nret",
  "ll": "define i32 @test(i32 %a, i32 %b) {\n  %r = call i32 @llvm.umax(i32 %a, i32 %b)\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call i32 @llvm.umax.i32(i32 %a, i32 %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "umax",
  "ty": "i64",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmp x0, x1\ncsel x0, x0, x1, hi\nret",
  "giasm": "cmp x0, x1\ncsel x0, x0, x1, hi\nret",
  "ll": "define i64 @test(i64 %a, i64 %b) {\n  %r = call i64 @llvm.umax(i64 %a, i64 %b)\n  ret i64 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call i64 @llvm.umax.i64(i64 %a, i64 %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret i64 %r"
 },
 {
  "instr": "umax",
  "ty": "<8 x i8>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "umax v0.8b, v0.8b, v1.8b\nret",
  "giasm": "umax v0.8b, v0.8b, v1.8b\nret",
  "ll": "define <8 x i8> @test(<8 x i8> %a, <8 x i8> %b) {\n  %r = call <8 x i8> @llvm.umax(<8 x i8> %a, <8 x i8> %b)\n  ret <8 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <8 x i8> @llvm.umax.v8i8(<8 x i8> %a, <8 x i8> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i8> %r"
 },
 {
  "instr": "umax",
  "ty": "<16 x i8>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "umax v0.16b, v0.16b, v1.16b\nret",
  "giasm": "umax v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <16 x i8> @test(<16 x i8> %a, <16 x i8> %b) {\n  %r = call <16 x i8> @llvm.umax(<16 x i8> %a, <16 x i8> %b)\n  ret <16 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <16 x i8> @llvm.umax.v16i8(<16 x i8> %a, <16 x i8> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i8> %r"
 },
 {
  "instr": "umax",
  "ty": "<32 x i8>",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "umax v1.16b, v1.16b, v3.16b\numax v0.16b, v0.16b, v2.16b\nret",
  "giasm": "umax v0.16b, v0.16b, v2.16b\numax v1.16b, v1.16b, v3.16b\nret",
  "ll": "define <32 x i8> @test(<32 x i8> %a, <32 x i8> %b) {\n  %r = call <32 x i8> @llvm.umax(<32 x i8> %a, <32 x i8> %b)\n  ret <32 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <32 x i8> @llvm.umax.v32i8(<32 x i8> %a, <32 x i8> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i8> %r"
 },
 {
  "instr": "umax",
  "ty": "<4 x i16>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "umax v0.4h, v0.4h, v1.4h\nret",
  "giasm": "umax v0.4h, v0.4h, v1.4h\nret",
  "ll": "define <4 x i16> @test(<4 x i16> %a, <4 x i16> %b) {\n  %r = call <4 x i16> @llvm.umax(<4 x i16> %a, <4 x i16> %b)\n  ret <4 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x i16> @llvm.umax.v4i16(<4 x i16> %a, <4 x i16> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i16> %r"
 },
 {
  "instr": "umax",
  "ty": "<8 x i16>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "umax v0.8h, v0.8h, v1.8h\nret",
  "giasm": "umax v0.8h, v0.8h, v1.8h\nret",
  "ll": "define <8 x i16> @test(<8 x i16> %a, <8 x i16> %b) {\n  %r = call <8 x i16> @llvm.umax(<8 x i16> %a, <8 x i16> %b)\n  ret <8 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <8 x i16> @llvm.umax.v8i16(<8 x i16> %a, <8 x i16> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i16> %r"
 },
 {
  "instr": "umax",
  "ty": "<16 x i16>",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "umax v1.8h, v1.8h, v3.8h\numax v0.8h, v0.8h, v2.8h\nret",
  "giasm": "umax v0.8h, v0.8h, v2.8h\numax v1.8h, v1.8h, v3.8h\nret",
  "ll": "define <16 x i16> @test(<16 x i16> %a, <16 x i16> %b) {\n  %r = call <16 x i16> @llvm.umax(<16 x i16> %a, <16 x i16> %b)\n  ret <16 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <16 x i16> @llvm.umax.v16i16(<16 x i16> %a, <16 x i16> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i16> %r"
 },
 {
  "instr": "umax",
  "ty": "<2 x i32>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "umax v0.2s, v0.2s, v1.2s\nret",
  "giasm": "umax v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x i32> @test(<2 x i32> %a, <2 x i32> %b) {\n  %r = call <2 x i32> @llvm.umax(<2 x i32> %a, <2 x i32> %b)\n  ret <2 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x i32> @llvm.umax.v2i32(<2 x i32> %a, <2 x i32> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i32> %r"
 },
 {
  "instr": "umax",
  "ty": "<4 x i32>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "umax v0.4s, v0.4s, v1.4s\nret",
  "giasm": "umax v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x i32> @test(<4 x i32> %a, <4 x i32> %b) {\n  %r = call <4 x i32> @llvm.umax(<4 x i32> %a, <4 x i32> %b)\n  ret <4 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x i32> @llvm.umax.v4i32(<4 x i32> %a, <4 x i32> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i32> %r"
 },
 {
  "instr": "umax",
  "ty": "<8 x i32>",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "umax v1.4s, v1.4s, v3.4s\numax v0.4s, v0.4s, v2.4s\nret",
  "giasm": "umax v0.4s, v0.4s, v2.4s\numax v1.4s, v1.4s, v3.4s\nret",
  "ll": "define <8 x i32> @test(<8 x i32> %a, <8 x i32> %b) {\n  %r = call <8 x i32> @llvm.umax(<8 x i32> %a, <8 x i32> %b)\n  ret <8 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <8 x i32> @llvm.umax.v8i32(<8 x i32> %a, <8 x i32> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i32> %r"
 },
 {
  "instr": "umax",
  "ty": "<2 x i64>",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmhi v2.2d, v0.2d, v1.2d\nbif v0.16b, v1.16b, v2.16b\nret",
  "giasm": "cmhi v2.2d, v0.2d, v1.2d\nbif v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <2 x i64> @test(<2 x i64> %a, <2 x i64> %b) {\n  %r = call <2 x i64> @llvm.umax(<2 x i64> %a, <2 x i64> %b)\n  ret <2 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <2 x i64> @llvm.umax.v2i64(<2 x i64> %a, <2 x i64> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i64> %r"
 },
 {
  "instr": "umax",
  "ty": "<4 x i64>",
  "variant": "binop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmhi v4.2d, v1.2d, v3.2d\ncmhi v5.2d, v0.2d, v2.2d\nbif v1.16b, v3.16b, v4.16b\nbif v0.16b, v2.16b, v5.16b\nret",
  "giasm": "cmhi v4.2d, v0.2d, v2.2d\ncmhi v5.2d, v1.2d, v3.2d\nbif v0.16b, v2.16b, v4.16b\nbif v1.16b, v3.16b, v5.16b\nret",
  "ll": "define <4 x i64> @test(<4 x i64> %a, <4 x i64> %b) {\n  %r = call <4 x i64> @llvm.umax(<4 x i64> %a, <4 x i64> %b)\n  ret <4 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x i64> @llvm.umax.v4i64(<4 x i64> %a, <4 x i64> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i64> %r"
 },
 {
  "instr": "uadd.sat",
  "ty": "i8",
  "variant": "binop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 5,
  "gisize": 4,
  "extrasize": 0,
  "asm": "and w9, w0, #0xff\nmov w8, #255                        // =0xff\nadd w9, w9, w1, uxtb\ncmp w9, #255\ncsel w0, w9, w8, lo\nret",
  "giasm": "and w8, w1, #0xff\nadd w8, w8, w0, uxtb\ncmp w8, w8, uxtb\ncsinv w0, w8, wzr, eq\nret",
  "ll": "define i8 @test(i8 %a, i8 %b) {\n  %r = call i8 @llvm.uadd.sat(i8 %a, i8 %b)\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call i8 @llvm.uadd.sat.i8(i8 %a, i8 %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "uadd.sat",
  "ty": "i16",
  "variant": "binop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 5,
  "gisize": 4,
  "extrasize": 0,
  "asm": "and w8, w0, #0xffff\nmov w9, #65535                      // =0xffff\nadd w8, w8, w1, uxth\ncmp w8, w9\ncsel w0, w8, w9, lo\nret",
  "giasm": "and w8, w1, #0xffff\nadd w8, w8, w0, uxth\ncmp w8, w8, uxth\ncsinv w0, w8, wzr, eq\nret",
  "ll": "define i16 @test(i16 %a, i16 %b) {\n  %r = call i16 @llvm.uadd.sat(i16 %a, i16 %b)\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call i16 @llvm.uadd.sat.i16(i16 %a, i16 %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "uadd.sat",
  "ty": "i32",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 4,
  "extrasize": 0,
  "asm": "adds w8, w0, w1\ncsinv w0, w8, wzr, lo\nret",
  "giasm": "adds w8, w0, w1\ncset w9, hs\ntst w9, #0x1\ncsinv w0, w8, wzr, eq\nret",
  "ll": "define i32 @test(i32 %a, i32 %b) {\n  %r = call i32 @llvm.uadd.sat(i32 %a, i32 %b)\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call i32 @llvm.uadd.sat.i32(i32 %a, i32 %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "uadd.sat",
  "ty": "i64",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 4,
  "extrasize": 0,
  "asm": "adds x8, x0, x1\ncsinv x0, x8, xzr, lo\nret",
  "giasm": "adds x8, x0, x1\ncset w9, hs\ntst w9, #0x1\ncsinv x0, x8, xzr, eq\nret",
  "ll": "define i64 @test(i64 %a, i64 %b) {\n  %r = call i64 @llvm.uadd.sat(i64 %a, i64 %b)\n  ret i64 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call i64 @llvm.uadd.sat.i64(i64 %a, i64 %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret i64 %r"
 },
 {
  "instr": "uadd.sat",
  "ty": "<8 x i8>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "uqadd v0.8b, v0.8b, v1.8b\nret",
  "giasm": "uqadd v0.8b, v0.8b, v1.8b\nret",
  "ll": "define <8 x i8> @test(<8 x i8> %a, <8 x i8> %b) {\n  %r = call <8 x i8> @llvm.uadd.sat(<8 x i8> %a, <8 x i8> %b)\n  ret <8 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <8 x i8> @llvm.uadd.sat.v8i8(<8 x i8> %a, <8 x i8> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i8> %r"
 },
 {
  "instr": "uadd.sat",
  "ty": "<16 x i8>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "uqadd v0.16b, v0.16b, v1.16b\nret",
  "giasm": "uqadd v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <16 x i8> @test(<16 x i8> %a, <16 x i8> %b) {\n  %r = call <16 x i8> @llvm.uadd.sat(<16 x i8> %a, <16 x i8> %b)\n  ret <16 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8> %a, <16 x i8> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i8> %r"
 },
 {
  "instr": "uadd.sat",
  "ty": "<32 x i8>",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "uqadd v1.16b, v1.16b, v3.16b\nuqadd v0.16b, v0.16b, v2.16b\nret",
  "giasm": "uqadd v0.16b, v0.16b, v2.16b\nuqadd v1.16b, v1.16b, v3.16b\nret",
  "ll": "define <32 x i8> @test(<32 x i8> %a, <32 x i8> %b) {\n  %r = call <32 x i8> @llvm.uadd.sat(<32 x i8> %a, <32 x i8> %b)\n  ret <32 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <32 x i8> @llvm.uadd.sat.v32i8(<32 x i8> %a, <32 x i8> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i8> %r"
 },
 {
  "instr": "uadd.sat",
  "ty": "<4 x i16>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "uqadd v0.4h, v0.4h, v1.4h\nret",
  "giasm": "uqadd v0.4h, v0.4h, v1.4h\nret",
  "ll": "define <4 x i16> @test(<4 x i16> %a, <4 x i16> %b) {\n  %r = call <4 x i16> @llvm.uadd.sat(<4 x i16> %a, <4 x i16> %b)\n  ret <4 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x i16> @llvm.uadd.sat.v4i16(<4 x i16> %a, <4 x i16> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i16> %r"
 },
 {
  "instr": "uadd.sat",
  "ty": "<8 x i16>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "uqadd v0.8h, v0.8h, v1.8h\nret",
  "giasm": "uqadd v0.8h, v0.8h, v1.8h\nret",
  "ll": "define <8 x i16> @test(<8 x i16> %a, <8 x i16> %b) {\n  %r = call <8 x i16> @llvm.uadd.sat(<8 x i16> %a, <8 x i16> %b)\n  ret <8 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <8 x i16> @llvm.uadd.sat.v8i16(<8 x i16> %a, <8 x i16> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i16> %r"
 },
 {
  "instr": "uadd.sat",
  "ty": "<16 x i16>",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "uqadd v1.8h, v1.8h, v3.8h\nuqadd v0.8h, v0.8h, v2.8h\nret",
  "giasm": "uqadd v0.8h, v0.8h, v2.8h\nuqadd v1.8h, v1.8h, v3.8h\nret",
  "ll": "define <16 x i16> @test(<16 x i16> %a, <16 x i16> %b) {\n  %r = call <16 x i16> @llvm.uadd.sat(<16 x i16> %a, <16 x i16> %b)\n  ret <16 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <16 x i16> @llvm.uadd.sat.v16i16(<16 x i16> %a, <16 x i16> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i16> %r"
 },
 {
  "instr": "uadd.sat",
  "ty": "<2 x i32>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "uqadd v0.2s, v0.2s, v1.2s\nret",
  "giasm": "uqadd v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x i32> @test(<2 x i32> %a, <2 x i32> %b) {\n  %r = call <2 x i32> @llvm.uadd.sat(<2 x i32> %a, <2 x i32> %b)\n  ret <2 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x i32> @llvm.uadd.sat.v2i32(<2 x i32> %a, <2 x i32> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i32> %r"
 },
 {
  "instr": "uadd.sat",
  "ty": "<4 x i32>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "uqadd v0.4s, v0.4s, v1.4s\nret",
  "giasm": "uqadd v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x i32> @test(<4 x i32> %a, <4 x i32> %b) {\n  %r = call <4 x i32> @llvm.uadd.sat(<4 x i32> %a, <4 x i32> %b)\n  ret <4 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x i32> @llvm.uadd.sat.v4i32(<4 x i32> %a, <4 x i32> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i32> %r"
 },
 {
  "instr": "uadd.sat",
  "ty": "<8 x i32>",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "uqadd v1.4s, v1.4s, v3.4s\nuqadd v0.4s, v0.4s, v2.4s\nret",
  "giasm": "uqadd v0.4s, v0.4s, v2.4s\nuqadd v1.4s, v1.4s, v3.4s\nret",
  "ll": "define <8 x i32> @test(<8 x i32> %a, <8 x i32> %b) {\n  %r = call <8 x i32> @llvm.uadd.sat(<8 x i32> %a, <8 x i32> %b)\n  ret <8 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <8 x i32> @llvm.uadd.sat.v8i32(<8 x i32> %a, <8 x i32> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i32> %r"
 },
 {
  "instr": "uadd.sat",
  "ty": "<2 x i64>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "uqadd v0.2d, v0.2d, v1.2d\nret",
  "giasm": "uqadd v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x i64> @test(<2 x i64> %a, <2 x i64> %b) {\n  %r = call <2 x i64> @llvm.uadd.sat(<2 x i64> %a, <2 x i64> %b)\n  ret <2 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x i64> @llvm.uadd.sat.v2i64(<2 x i64> %a, <2 x i64> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i64> %r"
 },
 {
  "instr": "uadd.sat",
  "ty": "<4 x i64>",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "uqadd v1.2d, v1.2d, v3.2d\nuqadd v0.2d, v0.2d, v2.2d\nret",
  "giasm": "uqadd v0.2d, v0.2d, v2.2d\nuqadd v1.2d, v1.2d, v3.2d\nret",
  "ll": "define <4 x i64> @test(<4 x i64> %a, <4 x i64> %b) {\n  %r = call <4 x i64> @llvm.uadd.sat(<4 x i64> %a, <4 x i64> %b)\n  ret <4 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <4 x i64> @llvm.uadd.sat.v4i64(<4 x i64> %a, <4 x i64> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i64> %r"
 },
 {
  "instr": "usub.sat",
  "ty": "i8",
  "variant": "binop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 3,
  "gisize": 4,
  "extrasize": 0,
  "asm": "and w8, w0, #0xff\nsubs w8, w8, w1, uxtb\ncsel w0, wzr, w8, lo\nret",
  "giasm": "and w8, w0, #0xff\nsub w8, w8, w1, uxtb\ncmp w8, w8, uxtb\ncsel w0, wzr, w8, ne\nret",
  "ll": "define i8 @test(i8 %a, i8 %b) {\n  %r = call i8 @llvm.usub.sat(i8 %a, i8 %b)\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call i8 @llvm.usub.sat.i8(i8 %a, i8 %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "usub.sat",
  "ty": "i16",
  "variant": "binop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 3,
  "gisize": 4,
  "extrasize": 0,
  "asm": "and w8, w0, #0xffff\nsubs w8, w8, w1, uxth\ncsel w0, wzr, w8, lo\nret",
  "giasm": "and w8, w0, #0xffff\nsub w8, w8, w1, uxth\ncmp w8, w8, uxth\ncsel w0, wzr, w8, ne\nret",
  "ll": "define i16 @test(i16 %a, i16 %b) {\n  %r = call i16 @llvm.usub.sat(i16 %a, i16 %b)\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call i16 @llvm.usub.sat.i16(i16 %a, i16 %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "usub.sat",
  "ty": "i32",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 4,
  "extrasize": 0,
  "asm": "subs w8, w0, w1\ncsel w0, wzr, w8, lo\nret",
  "giasm": "subs w8, w0, w1\ncset w9, lo\ntst w9, #0x1\ncsel w0, wzr, w8, ne\nret",
  "ll": "define i32 @test(i32 %a, i32 %b) {\n  %r = call i32 @llvm.usub.sat(i32 %a, i32 %b)\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call i32 @llvm.usub.sat.i32(i32 %a, i32 %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "usub.sat",
  "ty": "i64",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 4,
  "extrasize": 0,
  "asm": "subs x8, x0, x1\ncsel x0, xzr, x8, lo\nret",
  "giasm": "subs x8, x0, x1\ncset w9, lo\ntst w9, #0x1\ncsel x0, xzr, x8, ne\nret",
  "ll": "define i64 @test(i64 %a, i64 %b) {\n  %r = call i64 @llvm.usub.sat(i64 %a, i64 %b)\n  ret i64 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call i64 @llvm.usub.sat.i64(i64 %a, i64 %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret i64 %r"
 },
 {
  "instr": "usub.sat",
  "ty": "<8 x i8>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "uqsub v0.8b, v0.8b, v1.8b\nret",
  "giasm": "uqsub v0.8b, v0.8b, v1.8b\nret",
  "ll": "define <8 x i8> @test(<8 x i8> %a, <8 x i8> %b) {\n  %r = call <8 x i8> @llvm.usub.sat(<8 x i8> %a, <8 x i8> %b)\n  ret <8 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <8 x i8> @llvm.usub.sat.v8i8(<8 x i8> %a, <8 x i8> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i8> %r"
 },
 {
  "instr": "usub.sat",
  "ty": "<16 x i8>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "uqsub v0.16b, v0.16b, v1.16b\nret",
  "giasm": "uqsub v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <16 x i8> @test(<16 x i8> %a, <16 x i8> %b) {\n  %r = call <16 x i8> @llvm.usub.sat(<16 x i8> %a, <16 x i8> %b)\n  ret <16 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %a, <16 x i8> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i8> %r"
 },
 {
  "instr": "usub.sat",
  "ty": "<32 x i8>",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "uqsub v1.16b, v1.16b, v3.16b\nuqsub v0.16b, v0.16b, v2.16b\nret",
  "giasm": "uqsub v0.16b, v0.16b, v2.16b\nuqsub v1.16b, v1.16b, v3.16b\nret",
  "ll": "define <32 x i8> @test(<32 x i8> %a, <32 x i8> %b) {\n  %r = call <32 x i8> @llvm.usub.sat(<32 x i8> %a, <32 x i8> %b)\n  ret <32 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <32 x i8> @llvm.usub.sat.v32i8(<32 x i8> %a, <32 x i8> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i8> %r"
 },
 {
  "instr": "usub.sat",
  "ty": "<4 x i16>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "uqsub v0.4h, v0.4h, v1.4h\nret",
  "giasm": "uqsub v0.4h, v0.4h, v1.4h\nret",
  "ll": "define <4 x i16> @test(<4 x i16> %a, <4 x i16> %b) {\n  %r = call <4 x i16> @llvm.usub.sat(<4 x i16> %a, <4 x i16> %b)\n  ret <4 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x i16> @llvm.usub.sat.v4i16(<4 x i16> %a, <4 x i16> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i16> %r"
 },
 {
  "instr": "usub.sat",
  "ty": "<8 x i16>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "uqsub v0.8h, v0.8h, v1.8h\nret",
  "giasm": "uqsub v0.8h, v0.8h, v1.8h\nret",
  "ll": "define <8 x i16> @test(<8 x i16> %a, <8 x i16> %b) {\n  %r = call <8 x i16> @llvm.usub.sat(<8 x i16> %a, <8 x i16> %b)\n  ret <8 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %a, <8 x i16> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i16> %r"
 },
 {
  "instr": "usub.sat",
  "ty": "<16 x i16>",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "uqsub v1.8h, v1.8h, v3.8h\nuqsub v0.8h, v0.8h, v2.8h\nret",
  "giasm": "uqsub v0.8h, v0.8h, v2.8h\nuqsub v1.8h, v1.8h, v3.8h\nret",
  "ll": "define <16 x i16> @test(<16 x i16> %a, <16 x i16> %b) {\n  %r = call <16 x i16> @llvm.usub.sat(<16 x i16> %a, <16 x i16> %b)\n  ret <16 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <16 x i16> @llvm.usub.sat.v16i16(<16 x i16> %a, <16 x i16> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i16> %r"
 },
 {
  "instr": "usub.sat",
  "ty": "<2 x i32>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "uqsub v0.2s, v0.2s, v1.2s\nret",
  "giasm": "uqsub v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x i32> @test(<2 x i32> %a, <2 x i32> %b) {\n  %r = call <2 x i32> @llvm.usub.sat(<2 x i32> %a, <2 x i32> %b)\n  ret <2 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x i32> @llvm.usub.sat.v2i32(<2 x i32> %a, <2 x i32> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i32> %r"
 },
 {
  "instr": "usub.sat",
  "ty": "<4 x i32>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "uqsub v0.4s, v0.4s, v1.4s\nret",
  "giasm": "uqsub v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x i32> @test(<4 x i32> %a, <4 x i32> %b) {\n  %r = call <4 x i32> @llvm.usub.sat(<4 x i32> %a, <4 x i32> %b)\n  ret <4 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x i32> @llvm.usub.sat.v4i32(<4 x i32> %a, <4 x i32> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i32> %r"
 },
 {
  "instr": "usub.sat",
  "ty": "<8 x i32>",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "uqsub v1.4s, v1.4s, v3.4s\nuqsub v0.4s, v0.4s, v2.4s\nret",
  "giasm": "uqsub v0.4s, v0.4s, v2.4s\nuqsub v1.4s, v1.4s, v3.4s\nret",
  "ll": "define <8 x i32> @test(<8 x i32> %a, <8 x i32> %b) {\n  %r = call <8 x i32> @llvm.usub.sat(<8 x i32> %a, <8 x i32> %b)\n  ret <8 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <8 x i32> @llvm.usub.sat.v8i32(<8 x i32> %a, <8 x i32> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i32> %r"
 },
 {
  "instr": "usub.sat",
  "ty": "<2 x i64>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "uqsub v0.2d, v0.2d, v1.2d\nret",
  "giasm": "uqsub v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x i64> @test(<2 x i64> %a, <2 x i64> %b) {\n  %r = call <2 x i64> @llvm.usub.sat(<2 x i64> %a, <2 x i64> %b)\n  ret <2 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x i64> @llvm.usub.sat.v2i64(<2 x i64> %a, <2 x i64> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i64> %r"
 },
 {
  "instr": "usub.sat",
  "ty": "<4 x i64>",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "uqsub v1.2d, v1.2d, v3.2d\nuqsub v0.2d, v0.2d, v2.2d\nret",
  "giasm": "uqsub v0.2d, v0.2d, v2.2d\nuqsub v1.2d, v1.2d, v3.2d\nret",
  "ll": "define <4 x i64> @test(<4 x i64> %a, <4 x i64> %b) {\n  %r = call <4 x i64> @llvm.usub.sat(<4 x i64> %a, <4 x i64> %b)\n  ret <4 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <4 x i64> @llvm.usub.sat.v4i64(<4 x i64> %a, <4 x i64> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i64> %r"
 },
 {
  "instr": "sadd.sat",
  "ty": "i8",
  "variant": "binop",
  "codesize": 6,
  "thru": 6,
  "lat": 6,
  "sizelat": 6,
  "size": 8,
  "gisize": 7,
  "extrasize": 0,
  "asm": "sxtb w9, w0\nmov w8, #127                        // =0x7f\nadd w9, w9, w1, sxtb\ncmp w9, #127\ncsel w8, w9, w8, lt\nmov w9, #-128                       // =0xffffff80\ncmn w8, #128\ncsel w0, w8, w9, gt\nret",
  "giasm": "sxtb w8, w1\nadd w8, w8, w0, sxtb\nsxtb w9, w8\nsbfx w10, w8, #7, #1\nsub w10, w10, #128\ncmp w8, w9\ncsel w0, w10, w8, ne\nret",
  "ll": "define i8 @test(i8 %a, i8 %b) {\n  %r = call i8 @llvm.sadd.sat(i8 %a, i8 %b)\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 6 for instruction:   %r = call i8 @llvm.sadd.sat.i8(i8 %a, i8 %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "sadd.sat",
  "ty": "i16",
  "variant": "binop",
  "codesize": 6,
  "thru": 6,
  "lat": 6,
  "sizelat": 6,
  "size": 8,
  "gisize": 7,
  "extrasize": 0,
  "asm": "sxth w8, w0\nmov w9, #32767                      // =0x7fff\nadd w8, w8, w1, sxth\ncmp w8, w9\ncsel w8, w8, w9, lt\nmov w9, #-32768                     // =0xffff8000\ncmn w8, #8, lsl #12                 // =32768\ncsel w0, w8, w9, gt\nret",
  "giasm": "sxth w8, w1\nadd w8, w8, w0, sxth\nsxth w9, w8\nsbfx w10, w8, #15, #1\nsub w10, w10, #8, lsl #12           // =32768\ncmp w8, w9\ncsel w0, w10, w8, ne\nret",
  "ll": "define i16 @test(i16 %a, i16 %b) {\n  %r = call i16 @llvm.sadd.sat(i16 %a, i16 %b)\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 6 for instruction:   %r = call i16 @llvm.sadd.sat.i16(i16 %a, i16 %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "sadd.sat",
  "ty": "i32",
  "variant": "binop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 4,
  "gisize": 6,
  "extrasize": 0,
  "asm": "adds w8, w0, w1\nasr w9, w8, #31\neor w9, w9, #0x80000000\ncsel w0, w9, w8, vs\nret",
  "giasm": "mov w8, #-2147483648                // =0x80000000\nadds w9, w0, w1\ncset w10, vs\nadd w8, w8, w9, asr #31\ntst w10, #0x1\ncsel w0, w8, w9, ne\nret",
  "ll": "define i32 @test(i32 %a, i32 %b) {\n  %r = call i32 @llvm.sadd.sat(i32 %a, i32 %b)\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call i32 @llvm.sadd.sat.i32(i32 %a, i32 %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "sadd.sat",
  "ty": "i64",
  "variant": "binop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 4,
  "gisize": 6,
  "extrasize": 0,
  "asm": "adds x8, x0, x1\nasr x9, x8, #63\neor x9, x9, #0x8000000000000000\ncsel x0, x9, x8, vs\nret",
  "giasm": "mov x8, #-9223372036854775808       // =0x8000000000000000\nadds x9, x0, x1\ncset w10, vs\nadd x8, x8, x9, asr #63\ntst w10, #0x1\ncsel x0, x8, x9, ne\nret",
  "ll": "define i64 @test(i64 %a, i64 %b) {\n  %r = call i64 @llvm.sadd.sat(i64 %a, i64 %b)\n  ret i64 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call i64 @llvm.sadd.sat.i64(i64 %a, i64 %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret i64 %r"
 },
 {
  "instr": "sadd.sat",
  "ty": "<8 x i8>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "sqadd v0.8b, v0.8b, v1.8b\nret",
  "giasm": "sqadd v0.8b, v0.8b, v1.8b\nret",
  "ll": "define <8 x i8> @test(<8 x i8> %a, <8 x i8> %b) {\n  %r = call <8 x i8> @llvm.sadd.sat(<8 x i8> %a, <8 x i8> %b)\n  ret <8 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <8 x i8> @llvm.sadd.sat.v8i8(<8 x i8> %a, <8 x i8> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i8> %r"
 },
 {
  "instr": "sadd.sat",
  "ty": "<16 x i8>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "sqadd v0.16b, v0.16b, v1.16b\nret",
  "giasm": "sqadd v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <16 x i8> @test(<16 x i8> %a, <16 x i8> %b) {\n  %r = call <16 x i8> @llvm.sadd.sat(<16 x i8> %a, <16 x i8> %b)\n  ret <16 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <16 x i8> @llvm.sadd.sat.v16i8(<16 x i8> %a, <16 x i8> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i8> %r"
 },
 {
  "instr": "sadd.sat",
  "ty": "<32 x i8>",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "sqadd v1.16b, v1.16b, v3.16b\nsqadd v0.16b, v0.16b, v2.16b\nret",
  "giasm": "sqadd v0.16b, v0.16b, v2.16b\nsqadd v1.16b, v1.16b, v3.16b\nret",
  "ll": "define <32 x i8> @test(<32 x i8> %a, <32 x i8> %b) {\n  %r = call <32 x i8> @llvm.sadd.sat(<32 x i8> %a, <32 x i8> %b)\n  ret <32 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <32 x i8> @llvm.sadd.sat.v32i8(<32 x i8> %a, <32 x i8> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i8> %r"
 },
 {
  "instr": "sadd.sat",
  "ty": "<4 x i16>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "sqadd v0.4h, v0.4h, v1.4h\nret",
  "giasm": "sqadd v0.4h, v0.4h, v1.4h\nret",
  "ll": "define <4 x i16> @test(<4 x i16> %a, <4 x i16> %b) {\n  %r = call <4 x i16> @llvm.sadd.sat(<4 x i16> %a, <4 x i16> %b)\n  ret <4 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x i16> @llvm.sadd.sat.v4i16(<4 x i16> %a, <4 x i16> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i16> %r"
 },
 {
  "instr": "sadd.sat",
  "ty": "<8 x i16>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "sqadd v0.8h, v0.8h, v1.8h\nret",
  "giasm": "sqadd v0.8h, v0.8h, v1.8h\nret",
  "ll": "define <8 x i16> @test(<8 x i16> %a, <8 x i16> %b) {\n  %r = call <8 x i16> @llvm.sadd.sat(<8 x i16> %a, <8 x i16> %b)\n  ret <8 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %a, <8 x i16> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i16> %r"
 },
 {
  "instr": "sadd.sat",
  "ty": "<16 x i16>",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "sqadd v1.8h, v1.8h, v3.8h\nsqadd v0.8h, v0.8h, v2.8h\nret",
  "giasm": "sqadd v0.8h, v0.8h, v2.8h\nsqadd v1.8h, v1.8h, v3.8h\nret",
  "ll": "define <16 x i16> @test(<16 x i16> %a, <16 x i16> %b) {\n  %r = call <16 x i16> @llvm.sadd.sat(<16 x i16> %a, <16 x i16> %b)\n  ret <16 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %a, <16 x i16> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i16> %r"
 },
 {
  "instr": "sadd.sat",
  "ty": "<2 x i32>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "sqadd v0.2s, v0.2s, v1.2s\nret",
  "giasm": "sqadd v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x i32> @test(<2 x i32> %a, <2 x i32> %b) {\n  %r = call <2 x i32> @llvm.sadd.sat(<2 x i32> %a, <2 x i32> %b)\n  ret <2 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x i32> @llvm.sadd.sat.v2i32(<2 x i32> %a, <2 x i32> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i32> %r"
 },
 {
  "instr": "sadd.sat",
  "ty": "<4 x i32>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "sqadd v0.4s, v0.4s, v1.4s\nret",
  "giasm": "sqadd v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x i32> @test(<4 x i32> %a, <4 x i32> %b) {\n  %r = call <4 x i32> @llvm.sadd.sat(<4 x i32> %a, <4 x i32> %b)\n  ret <4 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x i32> @llvm.sadd.sat.v4i32(<4 x i32> %a, <4 x i32> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i32> %r"
 },
 {
  "instr": "sadd.sat",
  "ty": "<8 x i32>",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "sqadd v1.4s, v1.4s, v3.4s\nsqadd v0.4s, v0.4s, v2.4s\nret",
  "giasm": "sqadd v0.4s, v0.4s, v2.4s\nsqadd v1.4s, v1.4s, v3.4s\nret",
  "ll": "define <8 x i32> @test(<8 x i32> %a, <8 x i32> %b) {\n  %r = call <8 x i32> @llvm.sadd.sat(<8 x i32> %a, <8 x i32> %b)\n  ret <8 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <8 x i32> @llvm.sadd.sat.v8i32(<8 x i32> %a, <8 x i32> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i32> %r"
 },
 {
  "instr": "sadd.sat",
  "ty": "<2 x i64>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "sqadd v0.2d, v0.2d, v1.2d\nret",
  "giasm": "sqadd v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x i64> @test(<2 x i64> %a, <2 x i64> %b) {\n  %r = call <2 x i64> @llvm.sadd.sat(<2 x i64> %a, <2 x i64> %b)\n  ret <2 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x i64> @llvm.sadd.sat.v2i64(<2 x i64> %a, <2 x i64> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i64> %r"
 },
 {
  "instr": "sadd.sat",
  "ty": "<4 x i64>",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "sqadd v1.2d, v1.2d, v3.2d\nsqadd v0.2d, v0.2d, v2.2d\nret",
  "giasm": "sqadd v0.2d, v0.2d, v2.2d\nsqadd v1.2d, v1.2d, v3.2d\nret",
  "ll": "define <4 x i64> @test(<4 x i64> %a, <4 x i64> %b) {\n  %r = call <4 x i64> @llvm.sadd.sat(<4 x i64> %a, <4 x i64> %b)\n  ret <4 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <4 x i64> @llvm.sadd.sat.v4i64(<4 x i64> %a, <4 x i64> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i64> %r"
 },
 {
  "instr": "ssub.sat",
  "ty": "i8",
  "variant": "binop",
  "codesize": 6,
  "thru": 6,
  "lat": 6,
  "sizelat": 6,
  "size": 8,
  "gisize": 7,
  "extrasize": 0,
  "asm": "sxtb w9, w0\nmov w8, #127                        // =0x7f\nsub w9, w9, w1, sxtb\ncmp w9, #127\ncsel w8, w9, w8, lt\nmov w9, #-128                       // =0xffffff80\ncmn w8, #128\ncsel w0, w8, w9, gt\nret",
  "giasm": "sxtb w8, w0\nsub w8, w8, w1, sxtb\nsxtb w9, w8\nsbfx w10, w8, #7, #1\nsub w10, w10, #128\ncmp w8, w9\ncsel w0, w10, w8, ne\nret",
  "ll": "define i8 @test(i8 %a, i8 %b) {\n  %r = call i8 @llvm.ssub.sat(i8 %a, i8 %b)\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 6 for instruction:   %r = call i8 @llvm.ssub.sat.i8(i8 %a, i8 %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "ssub.sat",
  "ty": "i16",
  "variant": "binop",
  "codesize": 6,
  "thru": 6,
  "lat": 6,
  "sizelat": 6,
  "size": 8,
  "gisize": 7,
  "extrasize": 0,
  "asm": "sxth w8, w0\nmov w9, #32767                      // =0x7fff\nsub w8, w8, w1, sxth\ncmp w8, w9\ncsel w8, w8, w9, lt\nmov w9, #-32768                     // =0xffff8000\ncmn w8, #8, lsl #12                 // =32768\ncsel w0, w8, w9, gt\nret",
  "giasm": "sxth w8, w0\nsub w8, w8, w1, sxth\nsxth w9, w8\nsbfx w10, w8, #15, #1\nsub w10, w10, #8, lsl #12           // =32768\ncmp w8, w9\ncsel w0, w10, w8, ne\nret",
  "ll": "define i16 @test(i16 %a, i16 %b) {\n  %r = call i16 @llvm.ssub.sat(i16 %a, i16 %b)\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 6 for instruction:   %r = call i16 @llvm.ssub.sat.i16(i16 %a, i16 %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "ssub.sat",
  "ty": "i32",
  "variant": "binop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 4,
  "gisize": 6,
  "extrasize": 0,
  "asm": "subs w8, w0, w1\nasr w9, w8, #31\neor w9, w9, #0x80000000\ncsel w0, w9, w8, vs\nret",
  "giasm": "mov w8, #-2147483648                // =0x80000000\nsubs w9, w0, w1\ncset w10, vs\nadd w8, w8, w9, asr #31\ntst w10, #0x1\ncsel w0, w8, w9, ne\nret",
  "ll": "define i32 @test(i32 %a, i32 %b) {\n  %r = call i32 @llvm.ssub.sat(i32 %a, i32 %b)\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call i32 @llvm.ssub.sat.i32(i32 %a, i32 %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "ssub.sat",
  "ty": "i64",
  "variant": "binop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 4,
  "gisize": 6,
  "extrasize": 0,
  "asm": "subs x8, x0, x1\nasr x9, x8, #63\neor x9, x9, #0x8000000000000000\ncsel x0, x9, x8, vs\nret",
  "giasm": "mov x8, #-9223372036854775808       // =0x8000000000000000\nsubs x9, x0, x1\ncset w10, vs\nadd x8, x8, x9, asr #63\ntst w10, #0x1\ncsel x0, x8, x9, ne\nret",
  "ll": "define i64 @test(i64 %a, i64 %b) {\n  %r = call i64 @llvm.ssub.sat(i64 %a, i64 %b)\n  ret i64 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call i64 @llvm.ssub.sat.i64(i64 %a, i64 %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret i64 %r"
 },
 {
  "instr": "ssub.sat",
  "ty": "<8 x i8>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "sqsub v0.8b, v0.8b, v1.8b\nret",
  "giasm": "sqsub v0.8b, v0.8b, v1.8b\nret",
  "ll": "define <8 x i8> @test(<8 x i8> %a, <8 x i8> %b) {\n  %r = call <8 x i8> @llvm.ssub.sat(<8 x i8> %a, <8 x i8> %b)\n  ret <8 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <8 x i8> @llvm.ssub.sat.v8i8(<8 x i8> %a, <8 x i8> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i8> %r"
 },
 {
  "instr": "ssub.sat",
  "ty": "<16 x i8>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "sqsub v0.16b, v0.16b, v1.16b\nret",
  "giasm": "sqsub v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <16 x i8> @test(<16 x i8> %a, <16 x i8> %b) {\n  %r = call <16 x i8> @llvm.ssub.sat(<16 x i8> %a, <16 x i8> %b)\n  ret <16 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <16 x i8> @llvm.ssub.sat.v16i8(<16 x i8> %a, <16 x i8> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i8> %r"
 },
 {
  "instr": "ssub.sat",
  "ty": "<32 x i8>",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "sqsub v1.16b, v1.16b, v3.16b\nsqsub v0.16b, v0.16b, v2.16b\nret",
  "giasm": "sqsub v0.16b, v0.16b, v2.16b\nsqsub v1.16b, v1.16b, v3.16b\nret",
  "ll": "define <32 x i8> @test(<32 x i8> %a, <32 x i8> %b) {\n  %r = call <32 x i8> @llvm.ssub.sat(<32 x i8> %a, <32 x i8> %b)\n  ret <32 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <32 x i8> @llvm.ssub.sat.v32i8(<32 x i8> %a, <32 x i8> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i8> %r"
 },
 {
  "instr": "ssub.sat",
  "ty": "<4 x i16>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "sqsub v0.4h, v0.4h, v1.4h\nret",
  "giasm": "sqsub v0.4h, v0.4h, v1.4h\nret",
  "ll": "define <4 x i16> @test(<4 x i16> %a, <4 x i16> %b) {\n  %r = call <4 x i16> @llvm.ssub.sat(<4 x i16> %a, <4 x i16> %b)\n  ret <4 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x i16> @llvm.ssub.sat.v4i16(<4 x i16> %a, <4 x i16> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i16> %r"
 },
 {
  "instr": "ssub.sat",
  "ty": "<8 x i16>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "sqsub v0.8h, v0.8h, v1.8h\nret",
  "giasm": "sqsub v0.8h, v0.8h, v1.8h\nret",
  "ll": "define <8 x i16> @test(<8 x i16> %a, <8 x i16> %b) {\n  %r = call <8 x i16> @llvm.ssub.sat(<8 x i16> %a, <8 x i16> %b)\n  ret <8 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <8 x i16> @llvm.ssub.sat.v8i16(<8 x i16> %a, <8 x i16> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i16> %r"
 },
 {
  "instr": "ssub.sat",
  "ty": "<16 x i16>",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "sqsub v1.8h, v1.8h, v3.8h\nsqsub v0.8h, v0.8h, v2.8h\nret",
  "giasm": "sqsub v0.8h, v0.8h, v2.8h\nsqsub v1.8h, v1.8h, v3.8h\nret",
  "ll": "define <16 x i16> @test(<16 x i16> %a, <16 x i16> %b) {\n  %r = call <16 x i16> @llvm.ssub.sat(<16 x i16> %a, <16 x i16> %b)\n  ret <16 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <16 x i16> @llvm.ssub.sat.v16i16(<16 x i16> %a, <16 x i16> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i16> %r"
 },
 {
  "instr": "ssub.sat",
  "ty": "<2 x i32>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "sqsub v0.2s, v0.2s, v1.2s\nret",
  "giasm": "sqsub v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x i32> @test(<2 x i32> %a, <2 x i32> %b) {\n  %r = call <2 x i32> @llvm.ssub.sat(<2 x i32> %a, <2 x i32> %b)\n  ret <2 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x i32> @llvm.ssub.sat.v2i32(<2 x i32> %a, <2 x i32> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i32> %r"
 },
 {
  "instr": "ssub.sat",
  "ty": "<4 x i32>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "sqsub v0.4s, v0.4s, v1.4s\nret",
  "giasm": "sqsub v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x i32> @test(<4 x i32> %a, <4 x i32> %b) {\n  %r = call <4 x i32> @llvm.ssub.sat(<4 x i32> %a, <4 x i32> %b)\n  ret <4 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x i32> @llvm.ssub.sat.v4i32(<4 x i32> %a, <4 x i32> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i32> %r"
 },
 {
  "instr": "ssub.sat",
  "ty": "<8 x i32>",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "sqsub v1.4s, v1.4s, v3.4s\nsqsub v0.4s, v0.4s, v2.4s\nret",
  "giasm": "sqsub v0.4s, v0.4s, v2.4s\nsqsub v1.4s, v1.4s, v3.4s\nret",
  "ll": "define <8 x i32> @test(<8 x i32> %a, <8 x i32> %b) {\n  %r = call <8 x i32> @llvm.ssub.sat(<8 x i32> %a, <8 x i32> %b)\n  ret <8 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <8 x i32> @llvm.ssub.sat.v8i32(<8 x i32> %a, <8 x i32> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i32> %r"
 },
 {
  "instr": "ssub.sat",
  "ty": "<2 x i64>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "sqsub v0.2d, v0.2d, v1.2d\nret",
  "giasm": "sqsub v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x i64> @test(<2 x i64> %a, <2 x i64> %b) {\n  %r = call <2 x i64> @llvm.ssub.sat(<2 x i64> %a, <2 x i64> %b)\n  ret <2 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x i64> @llvm.ssub.sat.v2i64(<2 x i64> %a, <2 x i64> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i64> %r"
 },
 {
  "instr": "ssub.sat",
  "ty": "<4 x i64>",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "sqsub v1.2d, v1.2d, v3.2d\nsqsub v0.2d, v0.2d, v2.2d\nret",
  "giasm": "sqsub v0.2d, v0.2d, v2.2d\nsqsub v1.2d, v1.2d, v3.2d\nret",
  "ll": "define <4 x i64> @test(<4 x i64> %a, <4 x i64> %b) {\n  %r = call <4 x i64> @llvm.ssub.sat(<4 x i64> %a, <4 x i64> %b)\n  ret <4 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <4 x i64> @llvm.ssub.sat.v4i64(<4 x i64> %a, <4 x i64> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i64> %r"
 },
 {
  "instr": "rotr",
  "ty": "i8",
  "variant": "binop",
  "codesize": 5,
  "thru": 5,
  "lat": 5,
  "sizelat": 5,
  "size": 7,
  "gisize": 8,
  "extrasize": 0,
  "asm": "neg w8, w1\nand w9, w0, #0xff\nand w10, w1, #0x7\nand w8, w8, #0x7\nlsr w9, w9, w10\nlsl w8, w0, w8\norr w0, w9, w8\nret",
  "giasm": "mov x8, xzr\nand x9, x1, #0x7\nand w10, w0, #0xff\nsub x8, x8, w1, uxtb\nlsr w9, w10, w9\nand x8, x8, #0x7\nlsl w8, w0, w8\norr w0, w9, w8\nret",
  "ll": "define i8 @test(i8 %a, i8 %b) {\n  %r = call i8 @llvm.fshr(i8 %a, i8 %a, i8 %b)\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 5 for instruction:   %r = call i8 @llvm.fshr.i8(i8 %a, i8 %a, i8 %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "rotr",
  "ty": "i8",
  "variant": "binopconst",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 3,
  "gisize": 2,
  "extrasize": 0,
  "asm": "lsl w8, w0, #1\nbfxil w8, w0, #7, #1\nmov w0, w8\nret",
  "giasm": "ubfx w8, w0, #7, #1\norr w0, w8, w0, lsl #1\nret",
  "ll": "define i8 @test(i8 %a) {\n  %r = call i8 @llvm.fshr(i8 %a, i8 %a, i8 7)\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call i8 @llvm.fshr.i8(i8 %a, i8 %a, i8 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "rotr",
  "ty": "i16",
  "variant": "binop",
  "codesize": 5,
  "thru": 5,
  "lat": 5,
  "sizelat": 5,
  "size": 7,
  "gisize": 8,
  "extrasize": 0,
  "asm": "neg w8, w1\nand w9, w0, #0xffff\nand w10, w1, #0xf\nand w8, w8, #0xf\nlsr w9, w9, w10\nlsl w8, w0, w8\norr w0, w9, w8\nret",
  "giasm": "mov x8, xzr\nand x9, x1, #0xf\nand w10, w0, #0xffff\nsub x8, x8, w1, uxth\nlsr w9, w10, w9\nand x8, x8, #0xf\nlsl w8, w0, w8\norr w0, w9, w8\nret",
  "ll": "define i16 @test(i16 %a, i16 %b) {\n  %r = call i16 @llvm.fshr(i16 %a, i16 %a, i16 %b)\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 5 for instruction:   %r = call i16 @llvm.fshr.i16(i16 %a, i16 %a, i16 %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "rotr",
  "ty": "i16",
  "variant": "binopconst",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 3,
  "gisize": 2,
  "extrasize": 0,
  "asm": "lsl w8, w0, #9\nbfxil w8, w0, #7, #9\nmov w0, w8\nret",
  "giasm": "ubfx w8, w0, #7, #9\norr w0, w8, w0, lsl #9\nret",
  "ll": "define i16 @test(i16 %a) {\n  %r = call i16 @llvm.fshr(i16 %a, i16 %a, i16 7)\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call i16 @llvm.fshr.i16(i16 %a, i16 %a, i16 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "rotr",
  "ty": "i32",
  "variant": "binop",
  "codesize": 5,
  "thru": 5,
  "lat": 5,
  "sizelat": 5,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "ror w0, w0, w1\nret",
  "giasm": "ror w0, w0, w1\nret",
  "ll": "define i32 @test(i32 %a, i32 %b) {\n  %r = call i32 @llvm.fshr(i32 %a, i32 %a, i32 %b)\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 5 for instruction:   %r = call i32 @llvm.fshr.i32(i32 %a, i32 %a, i32 %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "rotr",
  "ty": "i32",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "ror w0, w0, #7\nret",
  "giasm": "ror w0, w0, #7\nret",
  "ll": "define i32 @test(i32 %a) {\n  %r = call i32 @llvm.fshr(i32 %a, i32 %a, i32 7)\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call i32 @llvm.fshr.i32(i32 %a, i32 %a, i32 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "rotr",
  "ty": "i64",
  "variant": "binop",
  "codesize": 5,
  "thru": 5,
  "lat": 5,
  "sizelat": 5,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "ror x0, x0, x1\nret",
  "giasm": "ror x0, x0, x1\nret",
  "ll": "define i64 @test(i64 %a, i64 %b) {\n  %r = call i64 @llvm.fshr(i64 %a, i64 %a, i64 %b)\n  ret i64 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 5 for instruction:   %r = call i64 @llvm.fshr.i64(i64 %a, i64 %a, i64 %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret i64 %r"
 },
 {
  "instr": "rotr",
  "ty": "i64",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "ror x0, x0, #7\nret",
  "giasm": "ror x0, x0, #7\nret",
  "ll": "define i64 @test(i64 %a) {\n  %r = call i64 @llvm.fshr(i64 %a, i64 %a, i64 7)\n  ret i64 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call i64 @llvm.fshr.i64(i64 %a, i64 %a, i64 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret i64 %r"
 },
 {
  "instr": "rotr",
  "ty": "<8 x i8>",
  "variant": "binop",
  "codesize": 5,
  "thru": 5,
  "lat": 5,
  "sizelat": 5,
  "size": 8,
  "gisize": 8,
  "extrasize": 0,
  "asm": "movi v2.8b, #7\nneg v3.8b, v1.8b\nand v1.8b, v1.8b, v2.8b\nand v2.8b, v3.8b, v2.8b\nneg v1.8b, v1.8b\nushl v2.8b, v0.8b, v2.8b\nushl v0.8b, v0.8b, v1.8b\norr v0.8b, v0.8b, v2.8b\nret",
  "giasm": "movi v2.8b, #7\nneg v3.8b, v1.8b\nand v1.8b, v1.8b, v2.8b\nand v2.8b, v3.8b, v2.8b\nneg v1.8b, v1.8b\nushl v1.8b, v0.8b, v1.8b\nushl v0.8b, v0.8b, v2.8b\norr v0.8b, v1.8b, v0.8b\nret",
  "ll": "define <8 x i8> @test(<8 x i8> %a, <8 x i8> %b) {\n  %r = call <8 x i8> @llvm.fshr(<8 x i8> %a, <8 x i8> %a, <8 x i8> %b)\n  ret <8 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 5 for instruction:   %r = call <8 x i8> @llvm.fshr.v8i8(<8 x i8> %a, <8 x i8> %a, <8 x i8> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i8> %r"
 },
 {
  "instr": "rotr",
  "ty": "<8 x i8>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 7,
  "gisize": 8,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nadrp x9, .LCPI0_1\nldr d1, [x8, :lo12:.LCPI0_0]\nldr d2, [x9, :lo12:.LCPI0_1]\nushl v1.8b, v0.8b, v1.8b\nushl v0.8b, v0.8b, v2.8b\norr v0.8b, v0.8b, v1.8b\nret",
  "giasm": "adrp x8, .LCPI0_1\nldr d1, [x8, :lo12:.LCPI0_1]\nadrp x8, .LCPI0_0\nldr d2, [x8, :lo12:.LCPI0_0]\nneg v1.8b, v1.8b\nushl v1.8b, v0.8b, v1.8b\nushl v0.8b, v0.8b, v2.8b\norr v0.8b, v1.8b, v0.8b\nret",
  "ll": "define <8 x i8> @test(<8 x i8> %a) {\n  %r = call <8 x i8> @llvm.fshr(<8 x i8> %a, <8 x i8> %a, <8 x i8> <i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6>)\n  ret <8 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x i8> @llvm.fshr.v8i8(<8 x i8> %a, <8 x i8> %a, <8 x i8> <i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i8> %r"
 },
 {
  "instr": "rotr",
  "ty": "<8 x i8>",
  "variant": "binopsplat",
  "codesize": 7,
  "thru": 8,
  "lat": 8,
  "sizelat": 8,
  "size": 9,
  "gisize": 9,
  "extrasize": 0,
  "asm": "movi v1.8b, #7\ndup v2.8b, w0\nneg v3.8b, v2.8b\nand v2.8b, v2.8b, v1.8b\nand v1.8b, v3.8b, v1.8b\nneg v2.8b, v2.8b\nushl v1.8b, v0.8b, v1.8b\nushl v0.8b, v0.8b, v2.8b\norr v0.8b, v0.8b, v1.8b\nret",
  "giasm": "movi v1.8b, #7\ndup v2.8b, w0\nneg v3.8b, v2.8b\nand v2.8b, v2.8b, v1.8b\nneg v2.8b, v2.8b\nand v1.8b, v3.8b, v1.8b\nushl v2.8b, v0.8b, v2.8b\nushl v0.8b, v0.8b, v1.8b\norr v0.8b, v2.8b, v0.8b\nret",
  "ll": "define <8 x i8> @test(<8 x i8> %a, i8 %bs) {\n  %i = insertelement <8 x i8> poison, i8 %bs, i64 0\n  %b = shufflevector <8 x i8> %i, <8 x i8> poison, <8 x i32> zeroinitializer\n  %r = call <8 x i8> @llvm.fshr(<8 x i8> %a, <8 x i8> %a, <8 x i8> %b)\n  ret <8 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <8 x i8> poison, i8 %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <8 x i8> %i, <8 x i8> poison, <8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 5 for instruction:   %r = call <8 x i8> @llvm.fshr.v8i8(<8 x i8> %a, <8 x i8> %a, <8 x i8> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i8> %r"
 },
 {
  "instr": "rotr",
  "ty": "<8 x i8>",
  "variant": "binopconstsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "add v1.8b, v0.8b, v0.8b\nusra v1.8b, v0.8b, #7\nfmov d0, d1\nret",
  "giasm": "ushr v1.8b, v0.8b, #7\nshl v0.8b, v0.8b, #1\norr v0.8b, v1.8b, v0.8b\nret",
  "ll": "define <8 x i8> @test(<8 x i8> %a) {\n  %r = call <8 x i8> @llvm.fshr(<8 x i8> %a, <8 x i8> %a, <8 x i8> splat (i8 7))\n  ret <8 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <8 x i8> @llvm.fshr.v8i8(<8 x i8> %a, <8 x i8> %a, <8 x i8> splat (i8 7))\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i8> %r"
 },
 {
  "instr": "rotr",
  "ty": "<16 x i8>",
  "variant": "binop",
  "codesize": 5,
  "thru": 5,
  "lat": 5,
  "sizelat": 5,
  "size": 8,
  "gisize": 8,
  "extrasize": 0,
  "asm": "movi v2.16b, #7\nneg v3.16b, v1.16b\nand v1.16b, v1.16b, v2.16b\nand v2.16b, v3.16b, v2.16b\nneg v1.16b, v1.16b\nushl v2.16b, v0.16b, v2.16b\nushl v0.16b, v0.16b, v1.16b\norr v0.16b, v0.16b, v2.16b\nret",
  "giasm": "movi v2.16b, #7\nneg v3.16b, v1.16b\nand v1.16b, v1.16b, v2.16b\nand v2.16b, v3.16b, v2.16b\nneg v1.16b, v1.16b\nushl v1.16b, v0.16b, v1.16b\nushl v0.16b, v0.16b, v2.16b\norr v0.16b, v1.16b, v0.16b\nret",
  "ll": "define <16 x i8> @test(<16 x i8> %a, <16 x i8> %b) {\n  %r = call <16 x i8> @llvm.fshr(<16 x i8> %a, <16 x i8> %a, <16 x i8> %b)\n  ret <16 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 5 for instruction:   %r = call <16 x i8> @llvm.fshr.v16i8(<16 x i8> %a, <16 x i8> %a, <16 x i8> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i8> %r"
 },
 {
  "instr": "rotr",
  "ty": "<16 x i8>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 7,
  "gisize": 8,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nadrp x9, .LCPI0_1\nldr q1, [x8, :lo12:.LCPI0_0]\nldr q2, [x9, :lo12:.LCPI0_1]\nushl v1.16b, v0.16b, v1.16b\nushl v0.16b, v0.16b, v2.16b\norr v0.16b, v0.16b, v1.16b\nret",
  "giasm": "adrp x8, .LCPI0_1\nldr q1, [x8, :lo12:.LCPI0_1]\nadrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nneg v1.16b, v1.16b\nushl v1.16b, v0.16b, v1.16b\nushl v0.16b, v0.16b, v2.16b\norr v0.16b, v1.16b, v0.16b\nret",
  "ll": "define <16 x i8> @test(<16 x i8> %a) {\n  %r = call <16 x i8> @llvm.fshr(<16 x i8> %a, <16 x i8> %a, <16 x i8> <i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6>)\n  ret <16 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <16 x i8> @llvm.fshr.v16i8(<16 x i8> %a, <16 x i8> %a, <16 x i8> <i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i8> %r"
 },
 {
  "instr": "rotr",
  "ty": "<16 x i8>",
  "variant": "binopsplat",
  "codesize": 7,
  "thru": 8,
  "lat": 8,
  "sizelat": 8,
  "size": 9,
  "gisize": 9,
  "extrasize": 0,
  "asm": "movi v1.16b, #7\ndup v2.16b, w0\nneg v3.16b, v2.16b\nand v2.16b, v2.16b, v1.16b\nand v1.16b, v3.16b, v1.16b\nneg v2.16b, v2.16b\nushl v1.16b, v0.16b, v1.16b\nushl v0.16b, v0.16b, v2.16b\norr v0.16b, v0.16b, v1.16b\nret",
  "giasm": "movi v1.16b, #7\ndup v2.16b, w0\nneg v3.16b, v2.16b\nand v2.16b, v2.16b, v1.16b\nand v1.16b, v3.16b, v1.16b\nneg v2.16b, v2.16b\nushl v2.16b, v0.16b, v2.16b\nushl v0.16b, v0.16b, v1.16b\norr v0.16b, v2.16b, v0.16b\nret",
  "ll": "define <16 x i8> @test(<16 x i8> %a, i8 %bs) {\n  %i = insertelement <16 x i8> poison, i8 %bs, i64 0\n  %b = shufflevector <16 x i8> %i, <16 x i8> poison, <16 x i32> zeroinitializer\n  %r = call <16 x i8> @llvm.fshr(<16 x i8> %a, <16 x i8> %a, <16 x i8> %b)\n  ret <16 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <16 x i8> poison, i8 %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <16 x i8> %i, <16 x i8> poison, <16 x i32> zeroinitializer\nCost Model: Found an estimated cost of 5 for instruction:   %r = call <16 x i8> @llvm.fshr.v16i8(<16 x i8> %a, <16 x i8> %a, <16 x i8> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i8> %r"
 },
 {
  "instr": "rotr",
  "ty": "<16 x i8>",
  "variant": "binopconstsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "add v1.16b, v0.16b, v0.16b\nusra v1.16b, v0.16b, #7\nmov v0.16b, v1.16b\nret",
  "giasm": "ushr v1.16b, v0.16b, #7\nshl v0.16b, v0.16b, #1\norr v0.16b, v1.16b, v0.16b\nret",
  "ll": "define <16 x i8> @test(<16 x i8> %a) {\n  %r = call <16 x i8> @llvm.fshr(<16 x i8> %a, <16 x i8> %a, <16 x i8> splat (i8 7))\n  ret <16 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <16 x i8> @llvm.fshr.v16i8(<16 x i8> %a, <16 x i8> %a, <16 x i8> splat (i8 7))\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i8> %r"
 },
 {
  "instr": "rotr",
  "ty": "<32 x i8>",
  "variant": "binop",
  "codesize": 5,
  "thru": 10,
  "lat": 5,
  "sizelat": 5,
  "size": 15,
  "gisize": 15,
  "extrasize": 0,
  "asm": "movi v4.16b, #7\nneg v5.16b, v2.16b\nneg v6.16b, v3.16b\nand v2.16b, v2.16b, v4.16b\nand v3.16b, v3.16b, v4.16b\nand v5.16b, v5.16b, v4.16b\nand v4.16b, v6.16b, v4.16b\nneg v2.16b, v2.16b\nneg v3.16b, v3.16b\nushl v5.16b, v0.16b, v5.16b\nushl v0.16b, v0.16b, v2.16b\nushl v2.16b, v1.16b, v4.16b\nushl v1.16b, v1.16b, v3.16b\norr v0.16b, v0.16b, v5.16b\norr v1.16b, v1.16b, v2.16b\nret",
  "giasm": "movi v4.16b, #7\nneg v6.16b, v3.16b\nand v5.16b, v2.16b, v4.16b\nneg v2.16b, v2.16b\nand v3.16b, v3.16b, v4.16b\nneg v5.16b, v5.16b\nand v2.16b, v2.16b, v4.16b\nand v4.16b, v6.16b, v4.16b\nneg v3.16b, v3.16b\nushl v5.16b, v0.16b, v5.16b\nushl v0.16b, v0.16b, v2.16b\nushl v3.16b, v1.16b, v3.16b\nushl v1.16b, v1.16b, v4.16b\norr v0.16b, v5.16b, v0.16b\norr v1.16b, v3.16b, v1.16b\nret",
  "ll": "define <32 x i8> @test(<32 x i8> %a, <32 x i8> %b) {\n  %r = call <32 x i8> @llvm.fshr(<32 x i8> %a, <32 x i8> %a, <32 x i8> %b)\n  ret <32 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 5 for instruction:   %r = call <32 x i8> @llvm.fshr.v32i8(<32 x i8> %a, <32 x i8> %a, <32 x i8> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i8> %r"
 },
 {
  "instr": "rotr",
  "ty": "<32 x i8>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 8,
  "lat": 4,
  "sizelat": 4,
  "size": 10,
  "gisize": 11,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nadrp x9, .LCPI0_1\nldr q2, [x8, :lo12:.LCPI0_0]\nldr q3, [x9, :lo12:.LCPI0_1]\nushl v4.16b, v0.16b, v2.16b\nushl v0.16b, v0.16b, v3.16b\nushl v2.16b, v1.16b, v2.16b\nushl v1.16b, v1.16b, v3.16b\norr v0.16b, v0.16b, v4.16b\norr v1.16b, v1.16b, v2.16b\nret",
  "giasm": "adrp x8, .LCPI0_1\nldr q2, [x8, :lo12:.LCPI0_1]\nadrp x8, .LCPI0_0\nldr q3, [x8, :lo12:.LCPI0_0]\nneg v2.16b, v2.16b\nushl v4.16b, v0.16b, v2.16b\nushl v2.16b, v1.16b, v2.16b\nushl v0.16b, v0.16b, v3.16b\nushl v1.16b, v1.16b, v3.16b\norr v0.16b, v4.16b, v0.16b\norr v1.16b, v2.16b, v1.16b\nret",
  "ll": "define <32 x i8> @test(<32 x i8> %a) {\n  %r = call <32 x i8> @llvm.fshr(<32 x i8> %a, <32 x i8> %a, <32 x i8> <i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6>)\n  ret <32 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <32 x i8> @llvm.fshr.v32i8(<32 x i8> %a, <32 x i8> %a, <32 x i8> <i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i8> %r"
 },
 {
  "instr": "rotr",
  "ty": "<32 x i8>",
  "variant": "binopsplat",
  "codesize": 8,
  "thru": 14,
  "lat": 9,
  "sizelat": 9,
  "size": 12,
  "gisize": 12,
  "extrasize": 0,
  "asm": "movi v2.16b, #7\ndup v3.16b, w0\nneg v4.16b, v3.16b\nand v3.16b, v3.16b, v2.16b\nand v2.16b, v4.16b, v2.16b\nneg v3.16b, v3.16b\nushl v4.16b, v0.16b, v2.16b\nushl v2.16b, v1.16b, v2.16b\nushl v0.16b, v0.16b, v3.16b\nushl v1.16b, v1.16b, v3.16b\norr v0.16b, v0.16b, v4.16b\norr v1.16b, v1.16b, v2.16b\nret",
  "giasm": "movi v2.16b, #7\ndup v3.16b, w0\nand v4.16b, v3.16b, v2.16b\nneg v3.16b, v3.16b\nneg v4.16b, v4.16b\nand v2.16b, v3.16b, v2.16b\nushl v3.16b, v0.16b, v4.16b\nushl v4.16b, v1.16b, v4.16b\nushl v0.16b, v0.16b, v2.16b\nushl v1.16b, v1.16b, v2.16b\norr v0.16b, v3.16b, v0.16b\norr v1.16b, v4.16b, v1.16b\nret",
  "ll": "define <32 x i8> @test(<32 x i8> %a, i8 %bs) {\n  %i = insertelement <32 x i8> poison, i8 %bs, i64 0\n  %b = shufflevector <32 x i8> %i, <32 x i8> poison, <32 x i32> zeroinitializer\n  %r = call <32 x i8> @llvm.fshr(<32 x i8> %a, <32 x i8> %a, <32 x i8> %b)\n  ret <32 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <32 x i8> poison, i8 %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <32 x i8> %i, <32 x i8> poison, <32 x i32> zeroinitializer\nCost Model: Found an estimated cost of 5 for instruction:   %r = call <32 x i8> @llvm.fshr.v32i8(<32 x i8> %a, <32 x i8> %a, <32 x i8> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i8> %r"
 },
 {
  "instr": "rotr",
  "ty": "<32 x i8>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 4,
  "gisize": 6,
  "extrasize": 0,
  "asm": "add v2.16b, v0.16b, v0.16b\nadd v3.16b, v1.16b, v1.16b\nusra v2.16b, v0.16b, #7\nusra v3.16b, v1.16b, #7\nmov v0.16b, v2.16b\nmov v1.16b, v3.16b\nret",
  "giasm": "ushr v2.16b, v0.16b, #7\nushr v3.16b, v1.16b, #7\nshl v0.16b, v0.16b, #1\nshl v1.16b, v1.16b, #1\norr v0.16b, v2.16b, v0.16b\norr v1.16b, v3.16b, v1.16b\nret",
  "ll": "define <32 x i8> @test(<32 x i8> %a) {\n  %r = call <32 x i8> @llvm.fshr(<32 x i8> %a, <32 x i8> %a, <32 x i8> splat (i8 7))\n  ret <32 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <32 x i8> @llvm.fshr.v32i8(<32 x i8> %a, <32 x i8> %a, <32 x i8> splat (i8 7))\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i8> %r"
 },
 {
  "instr": "rotr",
  "ty": "<4 x i16>",
  "variant": "binop",
  "codesize": 5,
  "thru": 5,
  "lat": 5,
  "sizelat": 5,
  "size": 8,
  "gisize": 8,
  "extrasize": 0,
  "asm": "movi v2.4h, #15\nneg v3.4h, v1.4h\nand v1.8b, v1.8b, v2.8b\nand v2.8b, v3.8b, v2.8b\nneg v1.4h, v1.4h\nushl v2.4h, v0.4h, v2.4h\nushl v0.4h, v0.4h, v1.4h\norr v0.8b, v0.8b, v2.8b\nret",
  "giasm": "movi v2.4h, #15\nneg v3.4h, v1.4h\nand v1.8b, v1.8b, v2.8b\nand v2.8b, v3.8b, v2.8b\nneg v1.4h, v1.4h\nushl v1.4h, v0.4h, v1.4h\nushl v0.4h, v0.4h, v2.4h\norr v0.8b, v1.8b, v0.8b\nret",
  "ll": "define <4 x i16> @test(<4 x i16> %a, <4 x i16> %b) {\n  %r = call <4 x i16> @llvm.fshr(<4 x i16> %a, <4 x i16> %a, <4 x i16> %b)\n  ret <4 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 5 for instruction:   %r = call <4 x i16> @llvm.fshr.v4i16(<4 x i16> %a, <4 x i16> %a, <4 x i16> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i16> %r"
 },
 {
  "instr": "rotr",
  "ty": "<4 x i16>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 7,
  "gisize": 8,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nadrp x9, .LCPI0_1\nldr d1, [x8, :lo12:.LCPI0_0]\nldr d2, [x9, :lo12:.LCPI0_1]\nushl v1.4h, v0.4h, v1.4h\nushl v0.4h, v0.4h, v2.4h\norr v0.8b, v0.8b, v1.8b\nret",
  "giasm": "adrp x8, .LCPI0_1\nldr d1, [x8, :lo12:.LCPI0_1]\nadrp x8, .LCPI0_0\nldr d2, [x8, :lo12:.LCPI0_0]\nneg v1.4h, v1.4h\nushl v1.4h, v0.4h, v1.4h\nushl v0.4h, v0.4h, v2.4h\norr v0.8b, v1.8b, v0.8b\nret",
  "ll": "define <4 x i16> @test(<4 x i16> %a) {\n  %r = call <4 x i16> @llvm.fshr(<4 x i16> %a, <4 x i16> %a, <4 x i16> <i16 7, i16 6, i16 7, i16 6>)\n  ret <4 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x i16> @llvm.fshr.v4i16(<4 x i16> %a, <4 x i16> %a, <4 x i16> <i16 7, i16 6, i16 7, i16 6>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i16> %r"
 },
 {
  "instr": "rotr",
  "ty": "<4 x i16>",
  "variant": "binopsplat",
  "codesize": 7,
  "thru": 8,
  "lat": 8,
  "sizelat": 8,
  "size": 9,
  "gisize": 9,
  "extrasize": 0,
  "asm": "movi v1.4h, #15\ndup v2.4h, w0\nneg v3.4h, v2.4h\nand v2.8b, v2.8b, v1.8b\nand v1.8b, v3.8b, v1.8b\nneg v2.4h, v2.4h\nushl v1.4h, v0.4h, v1.4h\nushl v0.4h, v0.4h, v2.4h\norr v0.8b, v0.8b, v1.8b\nret",
  "giasm": "movi v1.4h, #15\ndup v2.4h, w0\nneg v3.4h, v2.4h\nand v2.8b, v2.8b, v1.8b\nneg v2.4h, v2.4h\nand v1.8b, v3.8b, v1.8b\nushl v2.4h, v0.4h, v2.4h\nushl v0.4h, v0.4h, v1.4h\norr v0.8b, v2.8b, v0.8b\nret",
  "ll": "define <4 x i16> @test(<4 x i16> %a, i16 %bs) {\n  %i = insertelement <4 x i16> poison, i16 %bs, i64 0\n  %b = shufflevector <4 x i16> %i, <4 x i16> poison, <4 x i32> zeroinitializer\n  %r = call <4 x i16> @llvm.fshr(<4 x i16> %a, <4 x i16> %a, <4 x i16> %b)\n  ret <4 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <4 x i16> poison, i16 %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <4 x i16> %i, <4 x i16> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 5 for instruction:   %r = call <4 x i16> @llvm.fshr.v4i16(<4 x i16> %a, <4 x i16> %a, <4 x i16> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i16> %r"
 },
 {
  "instr": "rotr",
  "ty": "<4 x i16>",
  "variant": "binopconstsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "shl v1.4h, v0.4h, #9\nusra v1.4h, v0.4h, #7\nfmov d0, d1\nret",
  "giasm": "ushr v1.4h, v0.4h, #7\nshl v0.4h, v0.4h, #9\norr v0.8b, v1.8b, v0.8b\nret",
  "ll": "define <4 x i16> @test(<4 x i16> %a) {\n  %r = call <4 x i16> @llvm.fshr(<4 x i16> %a, <4 x i16> %a, <4 x i16> splat (i16 7))\n  ret <4 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <4 x i16> @llvm.fshr.v4i16(<4 x i16> %a, <4 x i16> %a, <4 x i16> splat (i16 7))\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i16> %r"
 },
 {
  "instr": "rotr",
  "ty": "<8 x i16>",
  "variant": "binop",
  "codesize": 5,
  "thru": 5,
  "lat": 5,
  "sizelat": 5,
  "size": 8,
  "gisize": 8,
  "extrasize": 0,
  "asm": "movi v2.8h, #15\nneg v3.8h, v1.8h\nand v1.16b, v1.16b, v2.16b\nand v2.16b, v3.16b, v2.16b\nneg v1.8h, v1.8h\nushl v2.8h, v0.8h, v2.8h\nushl v0.8h, v0.8h, v1.8h\norr v0.16b, v0.16b, v2.16b\nret",
  "giasm": "movi v2.8h, #15\nneg v3.8h, v1.8h\nand v1.16b, v1.16b, v2.16b\nand v2.16b, v3.16b, v2.16b\nneg v1.8h, v1.8h\nushl v1.8h, v0.8h, v1.8h\nushl v0.8h, v0.8h, v2.8h\norr v0.16b, v1.16b, v0.16b\nret",
  "ll": "define <8 x i16> @test(<8 x i16> %a, <8 x i16> %b) {\n  %r = call <8 x i16> @llvm.fshr(<8 x i16> %a, <8 x i16> %a, <8 x i16> %b)\n  ret <8 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 5 for instruction:   %r = call <8 x i16> @llvm.fshr.v8i16(<8 x i16> %a, <8 x i16> %a, <8 x i16> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i16> %r"
 },
 {
  "instr": "rotr",
  "ty": "<8 x i16>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 7,
  "gisize": 8,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nadrp x9, .LCPI0_1\nldr q1, [x8, :lo12:.LCPI0_0]\nldr q2, [x9, :lo12:.LCPI0_1]\nushl v1.8h, v0.8h, v1.8h\nushl v0.8h, v0.8h, v2.8h\norr v0.16b, v0.16b, v1.16b\nret",
  "giasm": "adrp x8, .LCPI0_1\nldr q1, [x8, :lo12:.LCPI0_1]\nadrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nneg v1.8h, v1.8h\nushl v1.8h, v0.8h, v1.8h\nushl v0.8h, v0.8h, v2.8h\norr v0.16b, v1.16b, v0.16b\nret",
  "ll": "define <8 x i16> @test(<8 x i16> %a) {\n  %r = call <8 x i16> @llvm.fshr(<8 x i16> %a, <8 x i16> %a, <8 x i16> <i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6>)\n  ret <8 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x i16> @llvm.fshr.v8i16(<8 x i16> %a, <8 x i16> %a, <8 x i16> <i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i16> %r"
 },
 {
  "instr": "rotr",
  "ty": "<8 x i16>",
  "variant": "binopsplat",
  "codesize": 7,
  "thru": 8,
  "lat": 8,
  "sizelat": 8,
  "size": 9,
  "gisize": 9,
  "extrasize": 0,
  "asm": "movi v1.8h, #15\ndup v2.8h, w0\nneg v3.8h, v2.8h\nand v2.16b, v2.16b, v1.16b\nand v1.16b, v3.16b, v1.16b\nneg v2.8h, v2.8h\nushl v1.8h, v0.8h, v1.8h\nushl v0.8h, v0.8h, v2.8h\norr v0.16b, v0.16b, v1.16b\nret",
  "giasm": "movi v1.8h, #15\ndup v2.8h, w0\nneg v3.8h, v2.8h\nand v2.16b, v2.16b, v1.16b\nand v1.16b, v3.16b, v1.16b\nneg v2.8h, v2.8h\nushl v2.8h, v0.8h, v2.8h\nushl v0.8h, v0.8h, v1.8h\norr v0.16b, v2.16b, v0.16b\nret",
  "ll": "define <8 x i16> @test(<8 x i16> %a, i16 %bs) {\n  %i = insertelement <8 x i16> poison, i16 %bs, i64 0\n  %b = shufflevector <8 x i16> %i, <8 x i16> poison, <8 x i32> zeroinitializer\n  %r = call <8 x i16> @llvm.fshr(<8 x i16> %a, <8 x i16> %a, <8 x i16> %b)\n  ret <8 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <8 x i16> poison, i16 %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <8 x i16> %i, <8 x i16> poison, <8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 5 for instruction:   %r = call <8 x i16> @llvm.fshr.v8i16(<8 x i16> %a, <8 x i16> %a, <8 x i16> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i16> %r"
 },
 {
  "instr": "rotr",
  "ty": "<8 x i16>",
  "variant": "binopconstsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "shl v1.8h, v0.8h, #9\nusra v1.8h, v0.8h, #7\nmov v0.16b, v1.16b\nret",
  "giasm": "ushr v1.8h, v0.8h, #7\nshl v0.8h, v0.8h, #9\norr v0.16b, v1.16b, v0.16b\nret",
  "ll": "define <8 x i16> @test(<8 x i16> %a) {\n  %r = call <8 x i16> @llvm.fshr(<8 x i16> %a, <8 x i16> %a, <8 x i16> splat (i16 7))\n  ret <8 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <8 x i16> @llvm.fshr.v8i16(<8 x i16> %a, <8 x i16> %a, <8 x i16> splat (i16 7))\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i16> %r"
 },
 {
  "instr": "rotr",
  "ty": "<16 x i16>",
  "variant": "binop",
  "codesize": 5,
  "thru": 10,
  "lat": 5,
  "sizelat": 5,
  "size": 15,
  "gisize": 15,
  "extrasize": 0,
  "asm": "movi v4.8h, #15\nneg v5.8h, v2.8h\nneg v6.8h, v3.8h\nand v2.16b, v2.16b, v4.16b\nand v3.16b, v3.16b, v4.16b\nand v5.16b, v5.16b, v4.16b\nand v4.16b, v6.16b, v4.16b\nneg v2.8h, v2.8h\nneg v3.8h, v3.8h\nushl v5.8h, v0.8h, v5.8h\nushl v0.8h, v0.8h, v2.8h\nushl v2.8h, v1.8h, v4.8h\nushl v1.8h, v1.8h, v3.8h\norr v0.16b, v0.16b, v5.16b\norr v1.16b, v1.16b, v2.16b\nret",
  "giasm": "movi v4.8h, #15\nneg v6.8h, v3.8h\nand v5.16b, v2.16b, v4.16b\nneg v2.8h, v2.8h\nand v3.16b, v3.16b, v4.16b\nneg v5.8h, v5.8h\nand v2.16b, v2.16b, v4.16b\nand v4.16b, v6.16b, v4.16b\nneg v3.8h, v3.8h\nushl v5.8h, v0.8h, v5.8h\nushl v0.8h, v0.8h, v2.8h\nushl v3.8h, v1.8h, v3.8h\nushl v1.8h, v1.8h, v4.8h\norr v0.16b, v5.16b, v0.16b\norr v1.16b, v3.16b, v1.16b\nret",
  "ll": "define <16 x i16> @test(<16 x i16> %a, <16 x i16> %b) {\n  %r = call <16 x i16> @llvm.fshr(<16 x i16> %a, <16 x i16> %a, <16 x i16> %b)\n  ret <16 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 5 for instruction:   %r = call <16 x i16> @llvm.fshr.v16i16(<16 x i16> %a, <16 x i16> %a, <16 x i16> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i16> %r"
 },
 {
  "instr": "rotr",
  "ty": "<16 x i16>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 8,
  "lat": 4,
  "sizelat": 4,
  "size": 10,
  "gisize": 11,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nadrp x9, .LCPI0_1\nldr q2, [x8, :lo12:.LCPI0_0]\nldr q3, [x9, :lo12:.LCPI0_1]\nushl v4.8h, v0.8h, v2.8h\nushl v0.8h, v0.8h, v3.8h\nushl v2.8h, v1.8h, v2.8h\nushl v1.8h, v1.8h, v3.8h\norr v0.16b, v0.16b, v4.16b\norr v1.16b, v1.16b, v2.16b\nret",
  "giasm": "adrp x8, .LCPI0_1\nldr q2, [x8, :lo12:.LCPI0_1]\nadrp x8, .LCPI0_0\nldr q3, [x8, :lo12:.LCPI0_0]\nneg v2.8h, v2.8h\nushl v4.8h, v0.8h, v2.8h\nushl v2.8h, v1.8h, v2.8h\nushl v0.8h, v0.8h, v3.8h\nushl v1.8h, v1.8h, v3.8h\norr v0.16b, v4.16b, v0.16b\norr v1.16b, v2.16b, v1.16b\nret",
  "ll": "define <16 x i16> @test(<16 x i16> %a) {\n  %r = call <16 x i16> @llvm.fshr(<16 x i16> %a, <16 x i16> %a, <16 x i16> <i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6>)\n  ret <16 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <16 x i16> @llvm.fshr.v16i16(<16 x i16> %a, <16 x i16> %a, <16 x i16> <i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i16> %r"
 },
 {
  "instr": "rotr",
  "ty": "<16 x i16>",
  "variant": "binopsplat",
  "codesize": 8,
  "thru": 14,
  "lat": 9,
  "sizelat": 9,
  "size": 12,
  "gisize": 12,
  "extrasize": 0,
  "asm": "movi v2.8h, #15\ndup v3.8h, w0\nneg v4.8h, v3.8h\nand v3.16b, v3.16b, v2.16b\nand v2.16b, v4.16b, v2.16b\nneg v3.8h, v3.8h\nushl v4.8h, v0.8h, v2.8h\nushl v2.8h, v1.8h, v2.8h\nushl v0.8h, v0.8h, v3.8h\nushl v1.8h, v1.8h, v3.8h\norr v0.16b, v0.16b, v4.16b\norr v1.16b, v1.16b, v2.16b\nret",
  "giasm": "movi v2.8h, #15\ndup v3.8h, w0\nand v4.16b, v3.16b, v2.16b\nneg v3.8h, v3.8h\nneg v4.8h, v4.8h\nand v2.16b, v3.16b, v2.16b\nushl v3.8h, v0.8h, v4.8h\nushl v4.8h, v1.8h, v4.8h\nushl v0.8h, v0.8h, v2.8h\nushl v1.8h, v1.8h, v2.8h\norr v0.16b, v3.16b, v0.16b\norr v1.16b, v4.16b, v1.16b\nret",
  "ll": "define <16 x i16> @test(<16 x i16> %a, i16 %bs) {\n  %i = insertelement <16 x i16> poison, i16 %bs, i64 0\n  %b = shufflevector <16 x i16> %i, <16 x i16> poison, <16 x i32> zeroinitializer\n  %r = call <16 x i16> @llvm.fshr(<16 x i16> %a, <16 x i16> %a, <16 x i16> %b)\n  ret <16 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <16 x i16> poison, i16 %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <16 x i16> %i, <16 x i16> poison, <16 x i32> zeroinitializer\nCost Model: Found an estimated cost of 5 for instruction:   %r = call <16 x i16> @llvm.fshr.v16i16(<16 x i16> %a, <16 x i16> %a, <16 x i16> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i16> %r"
 },
 {
  "instr": "rotr",
  "ty": "<16 x i16>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 4,
  "gisize": 6,
  "extrasize": 0,
  "asm": "shl v2.8h, v0.8h, #9\nshl v3.8h, v1.8h, #9\nusra v2.8h, v0.8h, #7\nusra v3.8h, v1.8h, #7\nmov v0.16b, v2.16b\nmov v1.16b, v3.16b\nret",
  "giasm": "ushr v2.8h, v0.8h, #7\nushr v3.8h, v1.8h, #7\nshl v0.8h, v0.8h, #9\nshl v1.8h, v1.8h, #9\norr v0.16b, v2.16b, v0.16b\norr v1.16b, v3.16b, v1.16b\nret",
  "ll": "define <16 x i16> @test(<16 x i16> %a) {\n  %r = call <16 x i16> @llvm.fshr(<16 x i16> %a, <16 x i16> %a, <16 x i16> splat (i16 7))\n  ret <16 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <16 x i16> @llvm.fshr.v16i16(<16 x i16> %a, <16 x i16> %a, <16 x i16> splat (i16 7))\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i16> %r"
 },
 {
  "instr": "rotr",
  "ty": "<2 x i32>",
  "variant": "binop",
  "codesize": 5,
  "thru": 5,
  "lat": 5,
  "sizelat": 5,
  "size": 8,
  "gisize": 8,
  "extrasize": 0,
  "asm": "movi v2.2s, #31\nneg v3.2s, v1.2s\nand v1.8b, v1.8b, v2.8b\nand v2.8b, v3.8b, v2.8b\nneg v1.2s, v1.2s\nushl v2.2s, v0.2s, v2.2s\nushl v0.2s, v0.2s, v1.2s\norr v0.8b, v0.8b, v2.8b\nret",
  "giasm": "movi v2.2s, #31\nneg v3.2s, v1.2s\nand v1.8b, v1.8b, v2.8b\nand v2.8b, v3.8b, v2.8b\nneg v1.2s, v1.2s\nushl v1.2s, v0.2s, v1.2s\nushl v0.2s, v0.2s, v2.2s\norr v0.8b, v1.8b, v0.8b\nret",
  "ll": "define <2 x i32> @test(<2 x i32> %a, <2 x i32> %b) {\n  %r = call <2 x i32> @llvm.fshr(<2 x i32> %a, <2 x i32> %a, <2 x i32> %b)\n  ret <2 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 5 for instruction:   %r = call <2 x i32> @llvm.fshr.v2i32(<2 x i32> %a, <2 x i32> %a, <2 x i32> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i32> %r"
 },
 {
  "instr": "rotr",
  "ty": "<2 x i32>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 7,
  "gisize": 8,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nadrp x9, .LCPI0_1\nldr d1, [x8, :lo12:.LCPI0_0]\nldr d2, [x9, :lo12:.LCPI0_1]\nushl v1.2s, v0.2s, v1.2s\nushl v0.2s, v0.2s, v2.2s\norr v0.8b, v0.8b, v1.8b\nret",
  "giasm": "adrp x8, .LCPI0_1\nldr d1, [x8, :lo12:.LCPI0_1]\nadrp x8, .LCPI0_0\nldr d2, [x8, :lo12:.LCPI0_0]\nneg v1.2s, v1.2s\nushl v1.2s, v0.2s, v1.2s\nushl v0.2s, v0.2s, v2.2s\norr v0.8b, v1.8b, v0.8b\nret",
  "ll": "define <2 x i32> @test(<2 x i32> %a) {\n  %r = call <2 x i32> @llvm.fshr(<2 x i32> %a, <2 x i32> %a, <2 x i32> <i32 7, i32 6>)\n  ret <2 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <2 x i32> @llvm.fshr.v2i32(<2 x i32> %a, <2 x i32> %a, <2 x i32> <i32 7, i32 6>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i32> %r"
 },
 {
  "instr": "rotr",
  "ty": "<2 x i32>",
  "variant": "binopsplat",
  "codesize": 7,
  "thru": 8,
  "lat": 8,
  "sizelat": 8,
  "size": 9,
  "gisize": 9,
  "extrasize": 0,
  "asm": "movi v1.2s, #31\ndup v2.2s, w0\nneg v3.2s, v2.2s\nand v2.8b, v2.8b, v1.8b\nand v1.8b, v3.8b, v1.8b\nneg v2.2s, v2.2s\nushl v1.2s, v0.2s, v1.2s\nushl v0.2s, v0.2s, v2.2s\norr v0.8b, v0.8b, v1.8b\nret",
  "giasm": "movi v1.2s, #31\ndup v2.2s, w0\nneg v3.2s, v2.2s\nand v2.8b, v2.8b, v1.8b\nneg v2.2s, v2.2s\nand v1.8b, v3.8b, v1.8b\nushl v2.2s, v0.2s, v2.2s\nushl v0.2s, v0.2s, v1.2s\norr v0.8b, v2.8b, v0.8b\nret",
  "ll": "define <2 x i32> @test(<2 x i32> %a, i32 %bs) {\n  %i = insertelement <2 x i32> poison, i32 %bs, i64 0\n  %b = shufflevector <2 x i32> %i, <2 x i32> poison, <2 x i32> zeroinitializer\n  %r = call <2 x i32> @llvm.fshr(<2 x i32> %a, <2 x i32> %a, <2 x i32> %b)\n  ret <2 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <2 x i32> poison, i32 %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <2 x i32> %i, <2 x i32> poison, <2 x i32> zeroinitializer\nCost Model: Found an estimated cost of 5 for instruction:   %r = call <2 x i32> @llvm.fshr.v2i32(<2 x i32> %a, <2 x i32> %a, <2 x i32> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i32> %r"
 },
 {
  "instr": "rotr",
  "ty": "<2 x i32>",
  "variant": "binopconstsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "shl v1.2s, v0.2s, #25\nusra v1.2s, v0.2s, #7\nfmov d0, d1\nret",
  "giasm": "ushr v1.2s, v0.2s, #7\nshl v0.2s, v0.2s, #25\norr v0.8b, v1.8b, v0.8b\nret",
  "ll": "define <2 x i32> @test(<2 x i32> %a) {\n  %r = call <2 x i32> @llvm.fshr(<2 x i32> %a, <2 x i32> %a, <2 x i32> splat (i32 7))\n  ret <2 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <2 x i32> @llvm.fshr.v2i32(<2 x i32> %a, <2 x i32> %a, <2 x i32> splat (i32 7))\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i32> %r"
 },
 {
  "instr": "rotr",
  "ty": "<4 x i32>",
  "variant": "binop",
  "codesize": 5,
  "thru": 5,
  "lat": 5,
  "sizelat": 5,
  "size": 8,
  "gisize": 8,
  "extrasize": 0,
  "asm": "movi v2.4s, #31\nneg v3.4s, v1.4s\nand v1.16b, v1.16b, v2.16b\nand v2.16b, v3.16b, v2.16b\nneg v1.4s, v1.4s\nushl v2.4s, v0.4s, v2.4s\nushl v0.4s, v0.4s, v1.4s\norr v0.16b, v0.16b, v2.16b\nret",
  "giasm": "movi v2.4s, #31\nneg v3.4s, v1.4s\nand v1.16b, v1.16b, v2.16b\nand v2.16b, v3.16b, v2.16b\nneg v1.4s, v1.4s\nushl v1.4s, v0.4s, v1.4s\nushl v0.4s, v0.4s, v2.4s\norr v0.16b, v1.16b, v0.16b\nret",
  "ll": "define <4 x i32> @test(<4 x i32> %a, <4 x i32> %b) {\n  %r = call <4 x i32> @llvm.fshr(<4 x i32> %a, <4 x i32> %a, <4 x i32> %b)\n  ret <4 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 5 for instruction:   %r = call <4 x i32> @llvm.fshr.v4i32(<4 x i32> %a, <4 x i32> %a, <4 x i32> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i32> %r"
 },
 {
  "instr": "rotr",
  "ty": "<4 x i32>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 7,
  "gisize": 8,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nadrp x9, .LCPI0_1\nldr q1, [x8, :lo12:.LCPI0_0]\nldr q2, [x9, :lo12:.LCPI0_1]\nushl v1.4s, v0.4s, v1.4s\nushl v0.4s, v0.4s, v2.4s\norr v0.16b, v0.16b, v1.16b\nret",
  "giasm": "adrp x8, .LCPI0_1\nldr q1, [x8, :lo12:.LCPI0_1]\nadrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nneg v1.4s, v1.4s\nushl v1.4s, v0.4s, v1.4s\nushl v0.4s, v0.4s, v2.4s\norr v0.16b, v1.16b, v0.16b\nret",
  "ll": "define <4 x i32> @test(<4 x i32> %a) {\n  %r = call <4 x i32> @llvm.fshr(<4 x i32> %a, <4 x i32> %a, <4 x i32> <i32 7, i32 6, i32 7, i32 6>)\n  ret <4 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x i32> @llvm.fshr.v4i32(<4 x i32> %a, <4 x i32> %a, <4 x i32> <i32 7, i32 6, i32 7, i32 6>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i32> %r"
 },
 {
  "instr": "rotr",
  "ty": "<4 x i32>",
  "variant": "binopsplat",
  "codesize": 7,
  "thru": 8,
  "lat": 8,
  "sizelat": 8,
  "size": 9,
  "gisize": 9,
  "extrasize": 0,
  "asm": "movi v1.4s, #31\ndup v2.4s, w0\nneg v3.4s, v2.4s\nand v2.16b, v2.16b, v1.16b\nand v1.16b, v3.16b, v1.16b\nneg v2.4s, v2.4s\nushl v1.4s, v0.4s, v1.4s\nushl v0.4s, v0.4s, v2.4s\norr v0.16b, v0.16b, v1.16b\nret",
  "giasm": "movi v1.4s, #31\ndup v2.4s, w0\nneg v3.4s, v2.4s\nand v2.16b, v2.16b, v1.16b\nand v1.16b, v3.16b, v1.16b\nneg v2.4s, v2.4s\nushl v2.4s, v0.4s, v2.4s\nushl v0.4s, v0.4s, v1.4s\norr v0.16b, v2.16b, v0.16b\nret",
  "ll": "define <4 x i32> @test(<4 x i32> %a, i32 %bs) {\n  %i = insertelement <4 x i32> poison, i32 %bs, i64 0\n  %b = shufflevector <4 x i32> %i, <4 x i32> poison, <4 x i32> zeroinitializer\n  %r = call <4 x i32> @llvm.fshr(<4 x i32> %a, <4 x i32> %a, <4 x i32> %b)\n  ret <4 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <4 x i32> poison, i32 %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <4 x i32> %i, <4 x i32> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 5 for instruction:   %r = call <4 x i32> @llvm.fshr.v4i32(<4 x i32> %a, <4 x i32> %a, <4 x i32> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i32> %r"
 },
 {
  "instr": "rotr",
  "ty": "<4 x i32>",
  "variant": "binopconstsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "shl v1.4s, v0.4s, #25\nusra v1.4s, v0.4s, #7\nmov v0.16b, v1.16b\nret",
  "giasm": "ushr v1.4s, v0.4s, #7\nshl v0.4s, v0.4s, #25\norr v0.16b, v1.16b, v0.16b\nret",
  "ll": "define <4 x i32> @test(<4 x i32> %a) {\n  %r = call <4 x i32> @llvm.fshr(<4 x i32> %a, <4 x i32> %a, <4 x i32> splat (i32 7))\n  ret <4 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <4 x i32> @llvm.fshr.v4i32(<4 x i32> %a, <4 x i32> %a, <4 x i32> splat (i32 7))\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i32> %r"
 },
 {
  "instr": "rotr",
  "ty": "<8 x i32>",
  "variant": "binop",
  "codesize": 5,
  "thru": 10,
  "lat": 5,
  "sizelat": 5,
  "size": 15,
  "gisize": 15,
  "extrasize": 0,
  "asm": "movi v4.4s, #31\nneg v5.4s, v2.4s\nneg v6.4s, v3.4s\nand v2.16b, v2.16b, v4.16b\nand v3.16b, v3.16b, v4.16b\nand v5.16b, v5.16b, v4.16b\nand v4.16b, v6.16b, v4.16b\nneg v2.4s, v2.4s\nneg v3.4s, v3.4s\nushl v5.4s, v0.4s, v5.4s\nushl v0.4s, v0.4s, v2.4s\nushl v2.4s, v1.4s, v4.4s\nushl v1.4s, v1.4s, v3.4s\norr v0.16b, v0.16b, v5.16b\norr v1.16b, v1.16b, v2.16b\nret",
  "giasm": "movi v4.4s, #31\nneg v6.4s, v3.4s\nand v5.16b, v2.16b, v4.16b\nneg v2.4s, v2.4s\nand v3.16b, v3.16b, v4.16b\nneg v5.4s, v5.4s\nand v2.16b, v2.16b, v4.16b\nand v4.16b, v6.16b, v4.16b\nneg v3.4s, v3.4s\nushl v5.4s, v0.4s, v5.4s\nushl v0.4s, v0.4s, v2.4s\nushl v3.4s, v1.4s, v3.4s\nushl v1.4s, v1.4s, v4.4s\norr v0.16b, v5.16b, v0.16b\norr v1.16b, v3.16b, v1.16b\nret",
  "ll": "define <8 x i32> @test(<8 x i32> %a, <8 x i32> %b) {\n  %r = call <8 x i32> @llvm.fshr(<8 x i32> %a, <8 x i32> %a, <8 x i32> %b)\n  ret <8 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 5 for instruction:   %r = call <8 x i32> @llvm.fshr.v8i32(<8 x i32> %a, <8 x i32> %a, <8 x i32> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i32> %r"
 },
 {
  "instr": "rotr",
  "ty": "<8 x i32>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 8,
  "lat": 4,
  "sizelat": 4,
  "size": 10,
  "gisize": 11,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nadrp x9, .LCPI0_1\nldr q2, [x8, :lo12:.LCPI0_0]\nldr q3, [x9, :lo12:.LCPI0_1]\nushl v4.4s, v0.4s, v2.4s\nushl v0.4s, v0.4s, v3.4s\nushl v2.4s, v1.4s, v2.4s\nushl v1.4s, v1.4s, v3.4s\norr v0.16b, v0.16b, v4.16b\norr v1.16b, v1.16b, v2.16b\nret",
  "giasm": "adrp x8, .LCPI0_1\nldr q2, [x8, :lo12:.LCPI0_1]\nadrp x8, .LCPI0_0\nldr q3, [x8, :lo12:.LCPI0_0]\nneg v2.4s, v2.4s\nushl v4.4s, v0.4s, v2.4s\nushl v2.4s, v1.4s, v2.4s\nushl v0.4s, v0.4s, v3.4s\nushl v1.4s, v1.4s, v3.4s\norr v0.16b, v4.16b, v0.16b\norr v1.16b, v2.16b, v1.16b\nret",
  "ll": "define <8 x i32> @test(<8 x i32> %a) {\n  %r = call <8 x i32> @llvm.fshr(<8 x i32> %a, <8 x i32> %a, <8 x i32> <i32 7, i32 6, i32 7, i32 6, i32 7, i32 6, i32 7, i32 6>)\n  ret <8 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x i32> @llvm.fshr.v8i32(<8 x i32> %a, <8 x i32> %a, <8 x i32> <i32 7, i32 6, i32 7, i32 6, i32 7, i32 6, i32 7, i32 6>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i32> %r"
 },
 {
  "instr": "rotr",
  "ty": "<8 x i32>",
  "variant": "binopsplat",
  "codesize": 8,
  "thru": 14,
  "lat": 9,
  "sizelat": 9,
  "size": 12,
  "gisize": 12,
  "extrasize": 0,
  "asm": "movi v2.4s, #31\ndup v3.4s, w0\nneg v4.4s, v3.4s\nand v3.16b, v3.16b, v2.16b\nand v2.16b, v4.16b, v2.16b\nneg v3.4s, v3.4s\nushl v4.4s, v0.4s, v2.4s\nushl v2.4s, v1.4s, v2.4s\nushl v0.4s, v0.4s, v3.4s\nushl v1.4s, v1.4s, v3.4s\norr v0.16b, v0.16b, v4.16b\norr v1.16b, v1.16b, v2.16b\nret",
  "giasm": "movi v2.4s, #31\ndup v3.4s, w0\nand v4.16b, v3.16b, v2.16b\nneg v3.4s, v3.4s\nneg v4.4s, v4.4s\nand v2.16b, v3.16b, v2.16b\nushl v3.4s, v0.4s, v4.4s\nushl v4.4s, v1.4s, v4.4s\nushl v0.4s, v0.4s, v2.4s\nushl v1.4s, v1.4s, v2.4s\norr v0.16b, v3.16b, v0.16b\norr v1.16b, v4.16b, v1.16b\nret",
  "ll": "define <8 x i32> @test(<8 x i32> %a, i32 %bs) {\n  %i = insertelement <8 x i32> poison, i32 %bs, i64 0\n  %b = shufflevector <8 x i32> %i, <8 x i32> poison, <8 x i32> zeroinitializer\n  %r = call <8 x i32> @llvm.fshr(<8 x i32> %a, <8 x i32> %a, <8 x i32> %b)\n  ret <8 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <8 x i32> poison, i32 %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <8 x i32> %i, <8 x i32> poison, <8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 5 for instruction:   %r = call <8 x i32> @llvm.fshr.v8i32(<8 x i32> %a, <8 x i32> %a, <8 x i32> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i32> %r"
 },
 {
  "instr": "rotr",
  "ty": "<8 x i32>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 4,
  "gisize": 6,
  "extrasize": 0,
  "asm": "shl v2.4s, v0.4s, #25\nshl v3.4s, v1.4s, #25\nusra v2.4s, v0.4s, #7\nusra v3.4s, v1.4s, #7\nmov v0.16b, v2.16b\nmov v1.16b, v3.16b\nret",
  "giasm": "ushr v2.4s, v0.4s, #7\nushr v3.4s, v1.4s, #7\nshl v0.4s, v0.4s, #25\nshl v1.4s, v1.4s, #25\norr v0.16b, v2.16b, v0.16b\norr v1.16b, v3.16b, v1.16b\nret",
  "ll": "define <8 x i32> @test(<8 x i32> %a) {\n  %r = call <8 x i32> @llvm.fshr(<8 x i32> %a, <8 x i32> %a, <8 x i32> splat (i32 7))\n  ret <8 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x i32> @llvm.fshr.v8i32(<8 x i32> %a, <8 x i32> %a, <8 x i32> splat (i32 7))\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i32> %r"
 },
 {
  "instr": "rotr",
  "ty": "<2 x i64>",
  "variant": "binop",
  "codesize": 5,
  "thru": 5,
  "lat": 5,
  "sizelat": 5,
  "size": 9,
  "gisize": 9,
  "extrasize": 0,
  "asm": "mov w8, #63                         // =0x3f\nneg v3.2d, v1.2d\ndup v2.2d, x8\nand v1.16b, v1.16b, v2.16b\nand v2.16b, v3.16b, v2.16b\nneg v1.2d, v1.2d\nushl v2.2d, v0.2d, v2.2d\nushl v0.2d, v0.2d, v1.2d\norr v0.16b, v0.16b, v2.16b\nret",
  "giasm": "adrp x8, .LCPI0_0\nneg v3.2d, v1.2d\nldr q2, [x8, :lo12:.LCPI0_0]\nand v1.16b, v1.16b, v2.16b\nand v2.16b, v3.16b, v2.16b\nneg v1.2d, v1.2d\nushl v1.2d, v0.2d, v1.2d\nushl v0.2d, v0.2d, v2.2d\norr v0.16b, v1.16b, v0.16b\nret",
  "ll": "define <2 x i64> @test(<2 x i64> %a, <2 x i64> %b) {\n  %r = call <2 x i64> @llvm.fshr(<2 x i64> %a, <2 x i64> %a, <2 x i64> %b)\n  ret <2 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 5 for instruction:   %r = call <2 x i64> @llvm.fshr.v2i64(<2 x i64> %a, <2 x i64> %a, <2 x i64> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i64> %r"
 },
 {
  "instr": "rotr",
  "ty": "<2 x i64>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 7,
  "gisize": 8,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nadrp x9, .LCPI0_1\nldr q1, [x8, :lo12:.LCPI0_0]\nldr q2, [x9, :lo12:.LCPI0_1]\nushl v1.2d, v0.2d, v1.2d\nushl v0.2d, v0.2d, v2.2d\norr v0.16b, v0.16b, v1.16b\nret",
  "giasm": "adrp x8, .LCPI0_1\nldr q1, [x8, :lo12:.LCPI0_1]\nadrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nneg v1.2d, v1.2d\nushl v1.2d, v0.2d, v1.2d\nushl v0.2d, v0.2d, v2.2d\norr v0.16b, v1.16b, v0.16b\nret",
  "ll": "define <2 x i64> @test(<2 x i64> %a) {\n  %r = call <2 x i64> @llvm.fshr(<2 x i64> %a, <2 x i64> %a, <2 x i64> <i64 7, i64 6>)\n  ret <2 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <2 x i64> @llvm.fshr.v2i64(<2 x i64> %a, <2 x i64> %a, <2 x i64> <i64 7, i64 6>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i64> %r"
 },
 {
  "instr": "rotr",
  "ty": "<2 x i64>",
  "variant": "binopsplat",
  "codesize": 7,
  "thru": 8,
  "lat": 8,
  "sizelat": 8,
  "size": 10,
  "gisize": 10,
  "extrasize": 0,
  "asm": "mov w8, #63                         // =0x3f\ndup v1.2d, x0\ndup v2.2d, x8\nneg v3.2d, v1.2d\nand v1.16b, v1.16b, v2.16b\nand v2.16b, v3.16b, v2.16b\nneg v1.2d, v1.2d\nushl v2.2d, v0.2d, v2.2d\nushl v0.2d, v0.2d, v1.2d\norr v0.16b, v0.16b, v2.16b\nret",
  "giasm": "adrp x8, .LCPI0_0\ndup v1.2d, x0\nldr q2, [x8, :lo12:.LCPI0_0]\nneg v3.2d, v1.2d\nand v1.16b, v1.16b, v2.16b\nneg v1.2d, v1.2d\nand v2.16b, v3.16b, v2.16b\nushl v1.2d, v0.2d, v1.2d\nushl v0.2d, v0.2d, v2.2d\norr v0.16b, v1.16b, v0.16b\nret",
  "ll": "define <2 x i64> @test(<2 x i64> %a, i64 %bs) {\n  %i = insertelement <2 x i64> poison, i64 %bs, i64 0\n  %b = shufflevector <2 x i64> %i, <2 x i64> poison, <2 x i32> zeroinitializer\n  %r = call <2 x i64> @llvm.fshr(<2 x i64> %a, <2 x i64> %a, <2 x i64> %b)\n  ret <2 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <2 x i64> poison, i64 %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <2 x i64> %i, <2 x i64> poison, <2 x i32> zeroinitializer\nCost Model: Found an estimated cost of 5 for instruction:   %r = call <2 x i64> @llvm.fshr.v2i64(<2 x i64> %a, <2 x i64> %a, <2 x i64> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i64> %r"
 },
 {
  "instr": "rotr",
  "ty": "<2 x i64>",
  "variant": "binopconstsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "shl v1.2d, v0.2d, #57\nusra v1.2d, v0.2d, #7\nmov v0.16b, v1.16b\nret",
  "giasm": "ushr v1.2d, v0.2d, #7\nshl v0.2d, v0.2d, #57\norr v0.16b, v1.16b, v0.16b\nret",
  "ll": "define <2 x i64> @test(<2 x i64> %a) {\n  %r = call <2 x i64> @llvm.fshr(<2 x i64> %a, <2 x i64> %a, <2 x i64> splat (i64 7))\n  ret <2 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <2 x i64> @llvm.fshr.v2i64(<2 x i64> %a, <2 x i64> %a, <2 x i64> splat (i64 7))\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i64> %r"
 },
 {
  "instr": "rotr",
  "ty": "<4 x i64>",
  "variant": "binop",
  "codesize": 5,
  "thru": 10,
  "lat": 5,
  "sizelat": 5,
  "size": 16,
  "gisize": 16,
  "extrasize": 0,
  "asm": "mov w8, #63                         // =0x3f\nneg v5.2d, v2.2d\nneg v6.2d, v3.2d\ndup v4.2d, x8\nand v2.16b, v2.16b, v4.16b\nand v3.16b, v3.16b, v4.16b\nand v5.16b, v5.16b, v4.16b\nand v4.16b, v6.16b, v4.16b\nneg v2.2d, v2.2d\nneg v3.2d, v3.2d\nushl v5.2d, v0.2d, v5.2d\nushl v0.2d, v0.2d, v2.2d\nushl v2.2d, v1.2d, v4.2d\nushl v1.2d, v1.2d, v3.2d\norr v0.16b, v0.16b, v5.16b\norr v1.16b, v1.16b, v2.16b\nret",
  "giasm": "adrp x8, .LCPI0_0\nneg v6.2d, v3.2d\nldr q4, [x8, :lo12:.LCPI0_0]\nand v5.16b, v2.16b, v4.16b\nneg v2.2d, v2.2d\nand v3.16b, v3.16b, v4.16b\nneg v5.2d, v5.2d\nand v2.16b, v2.16b, v4.16b\nand v4.16b, v6.16b, v4.16b\nneg v3.2d, v3.2d\nushl v5.2d, v0.2d, v5.2d\nushl v0.2d, v0.2d, v2.2d\nushl v3.2d, v1.2d, v3.2d\nushl v1.2d, v1.2d, v4.2d\norr v0.16b, v5.16b, v0.16b\norr v1.16b, v3.16b, v1.16b\nret",
  "ll": "define <4 x i64> @test(<4 x i64> %a, <4 x i64> %b) {\n  %r = call <4 x i64> @llvm.fshr(<4 x i64> %a, <4 x i64> %a, <4 x i64> %b)\n  ret <4 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 5 for instruction:   %r = call <4 x i64> @llvm.fshr.v4i64(<4 x i64> %a, <4 x i64> %a, <4 x i64> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i64> %r"
 },
 {
  "instr": "rotr",
  "ty": "<4 x i64>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 8,
  "lat": 4,
  "sizelat": 4,
  "size": 10,
  "gisize": 11,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nadrp x9, .LCPI0_1\nldr q2, [x8, :lo12:.LCPI0_0]\nldr q3, [x9, :lo12:.LCPI0_1]\nushl v4.2d, v0.2d, v2.2d\nushl v0.2d, v0.2d, v3.2d\nushl v2.2d, v1.2d, v2.2d\nushl v1.2d, v1.2d, v3.2d\norr v0.16b, v0.16b, v4.16b\norr v1.16b, v1.16b, v2.16b\nret",
  "giasm": "adrp x8, .LCPI0_1\nldr q2, [x8, :lo12:.LCPI0_1]\nadrp x8, .LCPI0_0\nldr q3, [x8, :lo12:.LCPI0_0]\nneg v2.2d, v2.2d\nushl v4.2d, v0.2d, v2.2d\nushl v2.2d, v1.2d, v2.2d\nushl v0.2d, v0.2d, v3.2d\nushl v1.2d, v1.2d, v3.2d\norr v0.16b, v4.16b, v0.16b\norr v1.16b, v2.16b, v1.16b\nret",
  "ll": "define <4 x i64> @test(<4 x i64> %a) {\n  %r = call <4 x i64> @llvm.fshr(<4 x i64> %a, <4 x i64> %a, <4 x i64> <i64 7, i64 6, i64 7, i64 6>)\n  ret <4 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x i64> @llvm.fshr.v4i64(<4 x i64> %a, <4 x i64> %a, <4 x i64> <i64 7, i64 6, i64 7, i64 6>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i64> %r"
 },
 {
  "instr": "rotr",
  "ty": "<4 x i64>",
  "variant": "binopsplat",
  "codesize": 8,
  "thru": 14,
  "lat": 9,
  "sizelat": 9,
  "size": 13,
  "gisize": 13,
  "extrasize": 0,
  "asm": "mov w8, #63                         // =0x3f\ndup v2.2d, x0\ndup v3.2d, x8\nneg v4.2d, v2.2d\nand v2.16b, v2.16b, v3.16b\nand v3.16b, v4.16b, v3.16b\nneg v2.2d, v2.2d\nushl v4.2d, v0.2d, v3.2d\nushl v3.2d, v1.2d, v3.2d\nushl v0.2d, v0.2d, v2.2d\nushl v1.2d, v1.2d, v2.2d\norr v0.16b, v0.16b, v4.16b\norr v1.16b, v1.16b, v3.16b\nret",
  "giasm": "dup v2.2d, x0\nadrp x8, .LCPI0_0\nldr q3, [x8, :lo12:.LCPI0_0]\nand v4.16b, v2.16b, v3.16b\nneg v2.2d, v2.2d\nneg v4.2d, v4.2d\nand v2.16b, v2.16b, v3.16b\nushl v3.2d, v0.2d, v4.2d\nushl v4.2d, v1.2d, v4.2d\nushl v0.2d, v0.2d, v2.2d\nushl v1.2d, v1.2d, v2.2d\norr v0.16b, v3.16b, v0.16b\norr v1.16b, v4.16b, v1.16b\nret",
  "ll": "define <4 x i64> @test(<4 x i64> %a, i64 %bs) {\n  %i = insertelement <4 x i64> poison, i64 %bs, i64 0\n  %b = shufflevector <4 x i64> %i, <4 x i64> poison, <4 x i32> zeroinitializer\n  %r = call <4 x i64> @llvm.fshr(<4 x i64> %a, <4 x i64> %a, <4 x i64> %b)\n  ret <4 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <4 x i64> poison, i64 %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <4 x i64> %i, <4 x i64> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 5 for instruction:   %r = call <4 x i64> @llvm.fshr.v4i64(<4 x i64> %a, <4 x i64> %a, <4 x i64> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i64> %r"
 },
 {
  "instr": "rotr",
  "ty": "<4 x i64>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 4,
  "gisize": 6,
  "extrasize": 0,
  "asm": "shl v2.2d, v0.2d, #57\nshl v3.2d, v1.2d, #57\nusra v2.2d, v0.2d, #7\nusra v3.2d, v1.2d, #7\nmov v0.16b, v2.16b\nmov v1.16b, v3.16b\nret",
  "giasm": "ushr v2.2d, v0.2d, #7\nushr v3.2d, v1.2d, #7\nshl v0.2d, v0.2d, #57\nshl v1.2d, v1.2d, #57\norr v0.16b, v2.16b, v0.16b\norr v1.16b, v3.16b, v1.16b\nret",
  "ll": "define <4 x i64> @test(<4 x i64> %a) {\n  %r = call <4 x i64> @llvm.fshr(<4 x i64> %a, <4 x i64> %a, <4 x i64> splat (i64 7))\n  ret <4 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x i64> @llvm.fshr.v4i64(<4 x i64> %a, <4 x i64> %a, <4 x i64> splat (i64 7))\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i64> %r"
 },
 {
  "instr": "rotl",
  "ty": "i8",
  "variant": "binop",
  "codesize": 5,
  "thru": 5,
  "lat": 5,
  "sizelat": 5,
  "size": 7,
  "gisize": 9,
  "extrasize": 0,
  "asm": "neg w8, w1\nand w9, w0, #0xff\nand w10, w1, #0x7\nand w8, w8, #0x7\nlsl w10, w0, w10\nlsr w8, w9, w8\norr w0, w10, w8\nret",
  "giasm": "mov x8, xzr\nneg w9, w1\nand w10, w0, #0xff\nsub x8, x8, w9, uxtb\nand x9, x9, #0x7\nlsr w9, w10, w9\nand x8, x8, #0x7\nlsl w8, w0, w8\norr w0, w9, w8\nret",
  "ll": "define i8 @test(i8 %a, i8 %b) {\n  %r = call i8 @llvm.fshl(i8 %a, i8 %a, i8 %b)\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 5 for instruction:   %r = call i8 @llvm.fshl.i8(i8 %a, i8 %a, i8 %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "rotl",
  "ty": "i8",
  "variant": "binopconst",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "ubfx w8, w0, #1, #7\norr w0, w8, w0, lsl #7\nret",
  "giasm": "ubfx w8, w0, #1, #7\norr w0, w8, w0, lsl #7\nret",
  "ll": "define i8 @test(i8 %a) {\n  %r = call i8 @llvm.fshl(i8 %a, i8 %a, i8 7)\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call i8 @llvm.fshl.i8(i8 %a, i8 %a, i8 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "rotl",
  "ty": "i16",
  "variant": "binop",
  "codesize": 5,
  "thru": 5,
  "lat": 5,
  "sizelat": 5,
  "size": 7,
  "gisize": 9,
  "extrasize": 0,
  "asm": "neg w8, w1\nand w9, w0, #0xffff\nand w10, w1, #0xf\nand w8, w8, #0xf\nlsl w10, w0, w10\nlsr w8, w9, w8\norr w0, w10, w8\nret",
  "giasm": "mov x8, xzr\nneg w9, w1\nand w10, w0, #0xffff\nsub x8, x8, w9, uxth\nand x9, x9, #0xf\nlsr w9, w10, w9\nand x8, x8, #0xf\nlsl w8, w0, w8\norr w0, w9, w8\nret",
  "ll": "define i16 @test(i16 %a, i16 %b) {\n  %r = call i16 @llvm.fshl(i16 %a, i16 %a, i16 %b)\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 5 for instruction:   %r = call i16 @llvm.fshl.i16(i16 %a, i16 %a, i16 %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "rotl",
  "ty": "i16",
  "variant": "binopconst",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "ubfx w8, w0, #9, #7\norr w0, w8, w0, lsl #7\nret",
  "giasm": "ubfx w8, w0, #9, #7\norr w0, w8, w0, lsl #7\nret",
  "ll": "define i16 @test(i16 %a) {\n  %r = call i16 @llvm.fshl(i16 %a, i16 %a, i16 7)\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call i16 @llvm.fshl.i16(i16 %a, i16 %a, i16 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "rotl",
  "ty": "i32",
  "variant": "binop",
  "codesize": 5,
  "thru": 5,
  "lat": 5,
  "sizelat": 5,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "neg w8, w1\nror w0, w0, w8\nret",
  "giasm": "neg w8, w1\nror w0, w0, w8\nret",
  "ll": "define i32 @test(i32 %a, i32 %b) {\n  %r = call i32 @llvm.fshl(i32 %a, i32 %a, i32 %b)\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 5 for instruction:   %r = call i32 @llvm.fshl.i32(i32 %a, i32 %a, i32 %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "rotl",
  "ty": "i32",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "ror w0, w0, #25\nret",
  "giasm": "ror w0, w0, #25\nret",
  "ll": "define i32 @test(i32 %a) {\n  %r = call i32 @llvm.fshl(i32 %a, i32 %a, i32 7)\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call i32 @llvm.fshl.i32(i32 %a, i32 %a, i32 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "rotl",
  "ty": "i64",
  "variant": "binop",
  "codesize": 5,
  "thru": 5,
  "lat": 5,
  "sizelat": 5,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "neg w8, w1\nror x0, x0, x8\nret",
  "giasm": "neg x8, x1\nror x0, x0, x8\nret",
  "ll": "define i64 @test(i64 %a, i64 %b) {\n  %r = call i64 @llvm.fshl(i64 %a, i64 %a, i64 %b)\n  ret i64 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 5 for instruction:   %r = call i64 @llvm.fshl.i64(i64 %a, i64 %a, i64 %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret i64 %r"
 },
 {
  "instr": "rotl",
  "ty": "i64",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "ror x0, x0, #57\nret",
  "giasm": "ror x0, x0, #57\nret",
  "ll": "define i64 @test(i64 %a) {\n  %r = call i64 @llvm.fshl(i64 %a, i64 %a, i64 7)\n  ret i64 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call i64 @llvm.fshl.i64(i64 %a, i64 %a, i64 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret i64 %r"
 },
 {
  "instr": "rotl",
  "ty": "<8 x i8>",
  "variant": "binop",
  "codesize": 5,
  "thru": 5,
  "lat": 5,
  "sizelat": 5,
  "size": 8,
  "gisize": 8,
  "extrasize": 0,
  "asm": "movi v2.8b, #7\nneg v3.8b, v1.8b\nand v3.8b, v3.8b, v2.8b\nand v1.8b, v1.8b, v2.8b\nneg v2.8b, v3.8b\nushl v1.8b, v0.8b, v1.8b\nushl v0.8b, v0.8b, v2.8b\norr v0.8b, v1.8b, v0.8b\nret",
  "giasm": "movi v2.8b, #7\nneg v3.8b, v1.8b\nand v3.8b, v3.8b, v2.8b\nand v1.8b, v1.8b, v2.8b\nneg v2.8b, v3.8b\nushl v1.8b, v0.8b, v1.8b\nushl v0.8b, v0.8b, v2.8b\norr v0.8b, v1.8b, v0.8b\nret",
  "ll": "define <8 x i8> @test(<8 x i8> %a, <8 x i8> %b) {\n  %r = call <8 x i8> @llvm.fshl(<8 x i8> %a, <8 x i8> %a, <8 x i8> %b)\n  ret <8 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 5 for instruction:   %r = call <8 x i8> @llvm.fshl.v8i8(<8 x i8> %a, <8 x i8> %a, <8 x i8> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i8> %r"
 },
 {
  "instr": "rotl",
  "ty": "<8 x i8>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 6,
  "gisize": 8,
  "extrasize": 0,
  "asm": "mvni v1.4h, #1, lsl #8\nadrp x8, .LCPI0_0\nldr d2, [x8, :lo12:.LCPI0_0]\nushl v1.8b, v0.8b, v1.8b\nushl v0.8b, v0.8b, v2.8b\norr v0.8b, v0.8b, v1.8b\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr d1, [x8, :lo12:.LCPI0_0]\nadrp x8, .LCPI0_1\nldr d2, [x8, :lo12:.LCPI0_1]\nneg v1.8b, v1.8b\nushl v2.8b, v0.8b, v2.8b\nushl v0.8b, v0.8b, v1.8b\norr v0.8b, v2.8b, v0.8b\nret",
  "ll": "define <8 x i8> @test(<8 x i8> %a) {\n  %r = call <8 x i8> @llvm.fshl(<8 x i8> %a, <8 x i8> %a, <8 x i8> <i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6>)\n  ret <8 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x i8> @llvm.fshl.v8i8(<8 x i8> %a, <8 x i8> %a, <8 x i8> <i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i8> %r"
 },
 {
  "instr": "rotl",
  "ty": "<8 x i8>",
  "variant": "binopsplat",
  "codesize": 7,
  "thru": 8,
  "lat": 8,
  "sizelat": 8,
  "size": 9,
  "gisize": 9,
  "extrasize": 0,
  "asm": "dup v2.8b, w0\nmovi v1.8b, #7\nneg v3.8b, v2.8b\nand v3.8b, v3.8b, v1.8b\nand v1.8b, v2.8b, v1.8b\nneg v2.8b, v3.8b\nushl v1.8b, v0.8b, v1.8b\nushl v0.8b, v0.8b, v2.8b\norr v0.8b, v1.8b, v0.8b\nret",
  "giasm": "dup v2.8b, w0\nmovi v1.8b, #7\nneg v3.8b, v2.8b\nand v3.8b, v3.8b, v1.8b\nand v1.8b, v2.8b, v1.8b\nneg v2.8b, v3.8b\nushl v1.8b, v0.8b, v1.8b\nushl v0.8b, v0.8b, v2.8b\norr v0.8b, v1.8b, v0.8b\nret",
  "ll": "define <8 x i8> @test(<8 x i8> %a, i8 %bs) {\n  %i = insertelement <8 x i8> poison, i8 %bs, i64 0\n  %b = shufflevector <8 x i8> %i, <8 x i8> poison, <8 x i32> zeroinitializer\n  %r = call <8 x i8> @llvm.fshl(<8 x i8> %a, <8 x i8> %a, <8 x i8> %b)\n  ret <8 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <8 x i8> poison, i8 %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <8 x i8> %i, <8 x i8> poison, <8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 5 for instruction:   %r = call <8 x i8> @llvm.fshl.v8i8(<8 x i8> %a, <8 x i8> %a, <8 x i8> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i8> %r"
 },
 {
  "instr": "rotl",
  "ty": "<8 x i8>",
  "variant": "binopconstsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "shl v1.8b, v0.8b, #7\nusra v1.8b, v0.8b, #1\nfmov d0, d1\nret",
  "giasm": "shl v1.8b, v0.8b, #7\nushr v0.8b, v0.8b, #1\norr v0.8b, v1.8b, v0.8b\nret",
  "ll": "define <8 x i8> @test(<8 x i8> %a) {\n  %r = call <8 x i8> @llvm.fshl(<8 x i8> %a, <8 x i8> %a, <8 x i8> splat (i8 7))\n  ret <8 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <8 x i8> @llvm.fshl.v8i8(<8 x i8> %a, <8 x i8> %a, <8 x i8> splat (i8 7))\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i8> %r"
 },
 {
  "instr": "rotl",
  "ty": "<16 x i8>",
  "variant": "binop",
  "codesize": 5,
  "thru": 5,
  "lat": 5,
  "sizelat": 5,
  "size": 8,
  "gisize": 8,
  "extrasize": 0,
  "asm": "movi v2.16b, #7\nneg v3.16b, v1.16b\nand v3.16b, v3.16b, v2.16b\nand v1.16b, v1.16b, v2.16b\nneg v2.16b, v3.16b\nushl v1.16b, v0.16b, v1.16b\nushl v0.16b, v0.16b, v2.16b\norr v0.16b, v1.16b, v0.16b\nret",
  "giasm": "movi v2.16b, #7\nneg v3.16b, v1.16b\nand v3.16b, v3.16b, v2.16b\nand v1.16b, v1.16b, v2.16b\nneg v2.16b, v3.16b\nushl v1.16b, v0.16b, v1.16b\nushl v0.16b, v0.16b, v2.16b\norr v0.16b, v1.16b, v0.16b\nret",
  "ll": "define <16 x i8> @test(<16 x i8> %a, <16 x i8> %b) {\n  %r = call <16 x i8> @llvm.fshl(<16 x i8> %a, <16 x i8> %a, <16 x i8> %b)\n  ret <16 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 5 for instruction:   %r = call <16 x i8> @llvm.fshl.v16i8(<16 x i8> %a, <16 x i8> %a, <16 x i8> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i8> %r"
 },
 {
  "instr": "rotl",
  "ty": "<16 x i8>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 6,
  "gisize": 8,
  "extrasize": 0,
  "asm": "mvni v1.8h, #1, lsl #8\nadrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nushl v1.16b, v0.16b, v1.16b\nushl v0.16b, v0.16b, v2.16b\norr v0.16b, v0.16b, v1.16b\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nadrp x8, .LCPI0_1\nldr q2, [x8, :lo12:.LCPI0_1]\nneg v1.16b, v1.16b\nushl v2.16b, v0.16b, v2.16b\nushl v0.16b, v0.16b, v1.16b\norr v0.16b, v2.16b, v0.16b\nret",
  "ll": "define <16 x i8> @test(<16 x i8> %a) {\n  %r = call <16 x i8> @llvm.fshl(<16 x i8> %a, <16 x i8> %a, <16 x i8> <i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6>)\n  ret <16 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <16 x i8> @llvm.fshl.v16i8(<16 x i8> %a, <16 x i8> %a, <16 x i8> <i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i8> %r"
 },
 {
  "instr": "rotl",
  "ty": "<16 x i8>",
  "variant": "binopsplat",
  "codesize": 7,
  "thru": 8,
  "lat": 8,
  "sizelat": 8,
  "size": 9,
  "gisize": 9,
  "extrasize": 0,
  "asm": "dup v2.16b, w0\nmovi v1.16b, #7\nneg v3.16b, v2.16b\nand v3.16b, v3.16b, v1.16b\nand v1.16b, v2.16b, v1.16b\nneg v2.16b, v3.16b\nushl v1.16b, v0.16b, v1.16b\nushl v0.16b, v0.16b, v2.16b\norr v0.16b, v1.16b, v0.16b\nret",
  "giasm": "dup v2.16b, w0\nmovi v1.16b, #7\nneg v3.16b, v2.16b\nand v3.16b, v3.16b, v1.16b\nand v1.16b, v2.16b, v1.16b\nneg v2.16b, v3.16b\nushl v1.16b, v0.16b, v1.16b\nushl v0.16b, v0.16b, v2.16b\norr v0.16b, v1.16b, v0.16b\nret",
  "ll": "define <16 x i8> @test(<16 x i8> %a, i8 %bs) {\n  %i = insertelement <16 x i8> poison, i8 %bs, i64 0\n  %b = shufflevector <16 x i8> %i, <16 x i8> poison, <16 x i32> zeroinitializer\n  %r = call <16 x i8> @llvm.fshl(<16 x i8> %a, <16 x i8> %a, <16 x i8> %b)\n  ret <16 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <16 x i8> poison, i8 %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <16 x i8> %i, <16 x i8> poison, <16 x i32> zeroinitializer\nCost Model: Found an estimated cost of 5 for instruction:   %r = call <16 x i8> @llvm.fshl.v16i8(<16 x i8> %a, <16 x i8> %a, <16 x i8> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i8> %r"
 },
 {
  "instr": "rotl",
  "ty": "<16 x i8>",
  "variant": "binopconstsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "shl v1.16b, v0.16b, #7\nusra v1.16b, v0.16b, #1\nmov v0.16b, v1.16b\nret",
  "giasm": "shl v1.16b, v0.16b, #7\nushr v0.16b, v0.16b, #1\norr v0.16b, v1.16b, v0.16b\nret",
  "ll": "define <16 x i8> @test(<16 x i8> %a) {\n  %r = call <16 x i8> @llvm.fshl(<16 x i8> %a, <16 x i8> %a, <16 x i8> splat (i8 7))\n  ret <16 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <16 x i8> @llvm.fshl.v16i8(<16 x i8> %a, <16 x i8> %a, <16 x i8> splat (i8 7))\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i8> %r"
 },
 {
  "instr": "rotl",
  "ty": "<32 x i8>",
  "variant": "binop",
  "codesize": 5,
  "thru": 10,
  "lat": 5,
  "sizelat": 5,
  "size": 15,
  "gisize": 15,
  "extrasize": 0,
  "asm": "movi v4.16b, #7\nneg v5.16b, v2.16b\nneg v6.16b, v3.16b\nand v5.16b, v5.16b, v4.16b\nand v6.16b, v6.16b, v4.16b\nand v2.16b, v2.16b, v4.16b\nand v3.16b, v3.16b, v4.16b\nneg v4.16b, v5.16b\nneg v5.16b, v6.16b\nushl v2.16b, v0.16b, v2.16b\nushl v3.16b, v1.16b, v3.16b\nushl v0.16b, v0.16b, v4.16b\nushl v1.16b, v1.16b, v5.16b\norr v0.16b, v2.16b, v0.16b\norr v1.16b, v3.16b, v1.16b\nret",
  "giasm": "movi v4.16b, #7\nneg v5.16b, v2.16b\nneg v6.16b, v3.16b\nand v5.16b, v5.16b, v4.16b\nand v6.16b, v6.16b, v4.16b\nand v2.16b, v2.16b, v4.16b\nand v3.16b, v3.16b, v4.16b\nneg v4.16b, v5.16b\nneg v5.16b, v6.16b\nushl v2.16b, v0.16b, v2.16b\nushl v3.16b, v1.16b, v3.16b\nushl v0.16b, v0.16b, v4.16b\nushl v1.16b, v1.16b, v5.16b\norr v0.16b, v2.16b, v0.16b\norr v1.16b, v3.16b, v1.16b\nret",
  "ll": "define <32 x i8> @test(<32 x i8> %a, <32 x i8> %b) {\n  %r = call <32 x i8> @llvm.fshl(<32 x i8> %a, <32 x i8> %a, <32 x i8> %b)\n  ret <32 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 5 for instruction:   %r = call <32 x i8> @llvm.fshl.v32i8(<32 x i8> %a, <32 x i8> %a, <32 x i8> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i8> %r"
 },
 {
  "instr": "rotl",
  "ty": "<32 x i8>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 8,
  "lat": 4,
  "sizelat": 4,
  "size": 9,
  "gisize": 11,
  "extrasize": 0,
  "asm": "mvni v2.8h, #1, lsl #8\nadrp x8, .LCPI0_0\nldr q3, [x8, :lo12:.LCPI0_0]\nushl v4.16b, v0.16b, v2.16b\nushl v0.16b, v0.16b, v3.16b\nushl v2.16b, v1.16b, v2.16b\nushl v1.16b, v1.16b, v3.16b\norr v0.16b, v0.16b, v4.16b\norr v1.16b, v1.16b, v2.16b\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nadrp x8, .LCPI0_1\nldr q3, [x8, :lo12:.LCPI0_1]\nneg v2.16b, v2.16b\nushl v4.16b, v0.16b, v3.16b\nushl v3.16b, v1.16b, v3.16b\nushl v0.16b, v0.16b, v2.16b\nushl v1.16b, v1.16b, v2.16b\norr v0.16b, v4.16b, v0.16b\norr v1.16b, v3.16b, v1.16b\nret",
  "ll": "define <32 x i8> @test(<32 x i8> %a) {\n  %r = call <32 x i8> @llvm.fshl(<32 x i8> %a, <32 x i8> %a, <32 x i8> <i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6>)\n  ret <32 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <32 x i8> @llvm.fshl.v32i8(<32 x i8> %a, <32 x i8> %a, <32 x i8> <i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6, i8 7, i8 6>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i8> %r"
 },
 {
  "instr": "rotl",
  "ty": "<32 x i8>",
  "variant": "binopsplat",
  "codesize": 8,
  "thru": 14,
  "lat": 9,
  "sizelat": 9,
  "size": 12,
  "gisize": 12,
  "extrasize": 0,
  "asm": "dup v2.16b, w0\nmovi v3.16b, #7\nneg v4.16b, v2.16b\nand v2.16b, v2.16b, v3.16b\nand v4.16b, v4.16b, v3.16b\nneg v3.16b, v4.16b\nushl v4.16b, v0.16b, v2.16b\nushl v2.16b, v1.16b, v2.16b\nushl v0.16b, v0.16b, v3.16b\nushl v1.16b, v1.16b, v3.16b\norr v0.16b, v4.16b, v0.16b\norr v1.16b, v2.16b, v1.16b\nret",
  "giasm": "dup v2.16b, w0\nmovi v3.16b, #7\nneg v4.16b, v2.16b\nand v2.16b, v2.16b, v3.16b\nand v4.16b, v4.16b, v3.16b\nneg v3.16b, v4.16b\nushl v4.16b, v0.16b, v2.16b\nushl v2.16b, v1.16b, v2.16b\nushl v0.16b, v0.16b, v3.16b\nushl v1.16b, v1.16b, v3.16b\norr v0.16b, v4.16b, v0.16b\norr v1.16b, v2.16b, v1.16b\nret",
  "ll": "define <32 x i8> @test(<32 x i8> %a, i8 %bs) {\n  %i = insertelement <32 x i8> poison, i8 %bs, i64 0\n  %b = shufflevector <32 x i8> %i, <32 x i8> poison, <32 x i32> zeroinitializer\n  %r = call <32 x i8> @llvm.fshl(<32 x i8> %a, <32 x i8> %a, <32 x i8> %b)\n  ret <32 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <32 x i8> poison, i8 %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <32 x i8> %i, <32 x i8> poison, <32 x i32> zeroinitializer\nCost Model: Found an estimated cost of 5 for instruction:   %r = call <32 x i8> @llvm.fshl.v32i8(<32 x i8> %a, <32 x i8> %a, <32 x i8> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i8> %r"
 },
 {
  "instr": "rotl",
  "ty": "<32 x i8>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 4,
  "gisize": 6,
  "extrasize": 0,
  "asm": "shl v2.16b, v0.16b, #7\nshl v3.16b, v1.16b, #7\nusra v2.16b, v0.16b, #1\nusra v3.16b, v1.16b, #1\nmov v0.16b, v2.16b\nmov v1.16b, v3.16b\nret",
  "giasm": "shl v2.16b, v0.16b, #7\nshl v3.16b, v1.16b, #7\nushr v0.16b, v0.16b, #1\nushr v1.16b, v1.16b, #1\norr v0.16b, v2.16b, v0.16b\norr v1.16b, v3.16b, v1.16b\nret",
  "ll": "define <32 x i8> @test(<32 x i8> %a) {\n  %r = call <32 x i8> @llvm.fshl(<32 x i8> %a, <32 x i8> %a, <32 x i8> splat (i8 7))\n  ret <32 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <32 x i8> @llvm.fshl.v32i8(<32 x i8> %a, <32 x i8> %a, <32 x i8> splat (i8 7))\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i8> %r"
 },
 {
  "instr": "rotl",
  "ty": "<4 x i16>",
  "variant": "binop",
  "codesize": 5,
  "thru": 5,
  "lat": 5,
  "sizelat": 5,
  "size": 8,
  "gisize": 8,
  "extrasize": 0,
  "asm": "movi v2.4h, #15\nneg v3.4h, v1.4h\nand v3.8b, v3.8b, v2.8b\nand v1.8b, v1.8b, v2.8b\nneg v2.4h, v3.4h\nushl v1.4h, v0.4h, v1.4h\nushl v0.4h, v0.4h, v2.4h\norr v0.8b, v1.8b, v0.8b\nret",
  "giasm": "movi v2.4h, #15\nneg v3.4h, v1.4h\nand v3.8b, v3.8b, v2.8b\nand v1.8b, v1.8b, v2.8b\nneg v2.4h, v3.4h\nushl v1.4h, v0.4h, v1.4h\nushl v0.4h, v0.4h, v2.4h\norr v0.8b, v1.8b, v0.8b\nret",
  "ll": "define <4 x i16> @test(<4 x i16> %a, <4 x i16> %b) {\n  %r = call <4 x i16> @llvm.fshl(<4 x i16> %a, <4 x i16> %a, <4 x i16> %b)\n  ret <4 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 5 for instruction:   %r = call <4 x i16> @llvm.fshl.v4i16(<4 x i16> %a, <4 x i16> %a, <4 x i16> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i16> %r"
 },
 {
  "instr": "rotl",
  "ty": "<4 x i16>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 7,
  "gisize": 8,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nadrp x9, .LCPI0_1\nldr d1, [x8, :lo12:.LCPI0_0]\nldr d2, [x9, :lo12:.LCPI0_1]\nushl v1.4h, v0.4h, v1.4h\nushl v0.4h, v0.4h, v2.4h\norr v0.8b, v0.8b, v1.8b\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr d1, [x8, :lo12:.LCPI0_0]\nadrp x8, .LCPI0_1\nldr d2, [x8, :lo12:.LCPI0_1]\nneg v1.4h, v1.4h\nushl v2.4h, v0.4h, v2.4h\nushl v0.4h, v0.4h, v1.4h\norr v0.8b, v2.8b, v0.8b\nret",
  "ll": "define <4 x i16> @test(<4 x i16> %a) {\n  %r = call <4 x i16> @llvm.fshl(<4 x i16> %a, <4 x i16> %a, <4 x i16> <i16 7, i16 6, i16 7, i16 6>)\n  ret <4 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x i16> @llvm.fshl.v4i16(<4 x i16> %a, <4 x i16> %a, <4 x i16> <i16 7, i16 6, i16 7, i16 6>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i16> %r"
 },
 {
  "instr": "rotl",
  "ty": "<4 x i16>",
  "variant": "binopsplat",
  "codesize": 7,
  "thru": 8,
  "lat": 8,
  "sizelat": 8,
  "size": 9,
  "gisize": 9,
  "extrasize": 0,
  "asm": "dup v2.4h, w0\nmovi v1.4h, #15\nneg v3.4h, v2.4h\nand v3.8b, v3.8b, v1.8b\nand v1.8b, v2.8b, v1.8b\nneg v2.4h, v3.4h\nushl v1.4h, v0.4h, v1.4h\nushl v0.4h, v0.4h, v2.4h\norr v0.8b, v1.8b, v0.8b\nret",
  "giasm": "dup v2.4h, w0\nmovi v1.4h, #15\nneg v3.4h, v2.4h\nand v3.8b, v3.8b, v1.8b\nand v1.8b, v2.8b, v1.8b\nneg v2.4h, v3.4h\nushl v1.4h, v0.4h, v1.4h\nushl v0.4h, v0.4h, v2.4h\norr v0.8b, v1.8b, v0.8b\nret",
  "ll": "define <4 x i16> @test(<4 x i16> %a, i16 %bs) {\n  %i = insertelement <4 x i16> poison, i16 %bs, i64 0\n  %b = shufflevector <4 x i16> %i, <4 x i16> poison, <4 x i32> zeroinitializer\n  %r = call <4 x i16> @llvm.fshl(<4 x i16> %a, <4 x i16> %a, <4 x i16> %b)\n  ret <4 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <4 x i16> poison, i16 %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <4 x i16> %i, <4 x i16> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 5 for instruction:   %r = call <4 x i16> @llvm.fshl.v4i16(<4 x i16> %a, <4 x i16> %a, <4 x i16> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i16> %r"
 },
 {
  "instr": "rotl",
  "ty": "<4 x i16>",
  "variant": "binopconstsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "shl v1.4h, v0.4h, #7\nusra v1.4h, v0.4h, #9\nfmov d0, d1\nret",
  "giasm": "shl v1.4h, v0.4h, #7\nushr v0.4h, v0.4h, #9\norr v0.8b, v1.8b, v0.8b\nret",
  "ll": "define <4 x i16> @test(<4 x i16> %a) {\n  %r = call <4 x i16> @llvm.fshl(<4 x i16> %a, <4 x i16> %a, <4 x i16> splat (i16 7))\n  ret <4 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <4 x i16> @llvm.fshl.v4i16(<4 x i16> %a, <4 x i16> %a, <4 x i16> splat (i16 7))\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i16> %r"
 },
 {
  "instr": "rotl",
  "ty": "<8 x i16>",
  "variant": "binop",
  "codesize": 5,
  "thru": 5,
  "lat": 5,
  "sizelat": 5,
  "size": 8,
  "gisize": 8,
  "extrasize": 0,
  "asm": "movi v2.8h, #15\nneg v3.8h, v1.8h\nand v3.16b, v3.16b, v2.16b\nand v1.16b, v1.16b, v2.16b\nneg v2.8h, v3.8h\nushl v1.8h, v0.8h, v1.8h\nushl v0.8h, v0.8h, v2.8h\norr v0.16b, v1.16b, v0.16b\nret",
  "giasm": "movi v2.8h, #15\nneg v3.8h, v1.8h\nand v3.16b, v3.16b, v2.16b\nand v1.16b, v1.16b, v2.16b\nneg v2.8h, v3.8h\nushl v1.8h, v0.8h, v1.8h\nushl v0.8h, v0.8h, v2.8h\norr v0.16b, v1.16b, v0.16b\nret",
  "ll": "define <8 x i16> @test(<8 x i16> %a, <8 x i16> %b) {\n  %r = call <8 x i16> @llvm.fshl(<8 x i16> %a, <8 x i16> %a, <8 x i16> %b)\n  ret <8 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 5 for instruction:   %r = call <8 x i16> @llvm.fshl.v8i16(<8 x i16> %a, <8 x i16> %a, <8 x i16> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i16> %r"
 },
 {
  "instr": "rotl",
  "ty": "<8 x i16>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 7,
  "gisize": 8,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nadrp x9, .LCPI0_1\nldr q1, [x8, :lo12:.LCPI0_0]\nldr q2, [x9, :lo12:.LCPI0_1]\nushl v1.8h, v0.8h, v1.8h\nushl v0.8h, v0.8h, v2.8h\norr v0.16b, v0.16b, v1.16b\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nadrp x8, .LCPI0_1\nldr q2, [x8, :lo12:.LCPI0_1]\nneg v1.8h, v1.8h\nushl v2.8h, v0.8h, v2.8h\nushl v0.8h, v0.8h, v1.8h\norr v0.16b, v2.16b, v0.16b\nret",
  "ll": "define <8 x i16> @test(<8 x i16> %a) {\n  %r = call <8 x i16> @llvm.fshl(<8 x i16> %a, <8 x i16> %a, <8 x i16> <i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6>)\n  ret <8 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x i16> @llvm.fshl.v8i16(<8 x i16> %a, <8 x i16> %a, <8 x i16> <i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i16> %r"
 },
 {
  "instr": "rotl",
  "ty": "<8 x i16>",
  "variant": "binopsplat",
  "codesize": 7,
  "thru": 8,
  "lat": 8,
  "sizelat": 8,
  "size": 9,
  "gisize": 9,
  "extrasize": 0,
  "asm": "dup v2.8h, w0\nmovi v1.8h, #15\nneg v3.8h, v2.8h\nand v3.16b, v3.16b, v1.16b\nand v1.16b, v2.16b, v1.16b\nneg v2.8h, v3.8h\nushl v1.8h, v0.8h, v1.8h\nushl v0.8h, v0.8h, v2.8h\norr v0.16b, v1.16b, v0.16b\nret",
  "giasm": "dup v2.8h, w0\nmovi v1.8h, #15\nneg v3.8h, v2.8h\nand v3.16b, v3.16b, v1.16b\nand v1.16b, v2.16b, v1.16b\nneg v2.8h, v3.8h\nushl v1.8h, v0.8h, v1.8h\nushl v0.8h, v0.8h, v2.8h\norr v0.16b, v1.16b, v0.16b\nret",
  "ll": "define <8 x i16> @test(<8 x i16> %a, i16 %bs) {\n  %i = insertelement <8 x i16> poison, i16 %bs, i64 0\n  %b = shufflevector <8 x i16> %i, <8 x i16> poison, <8 x i32> zeroinitializer\n  %r = call <8 x i16> @llvm.fshl(<8 x i16> %a, <8 x i16> %a, <8 x i16> %b)\n  ret <8 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <8 x i16> poison, i16 %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <8 x i16> %i, <8 x i16> poison, <8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 5 for instruction:   %r = call <8 x i16> @llvm.fshl.v8i16(<8 x i16> %a, <8 x i16> %a, <8 x i16> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i16> %r"
 },
 {
  "instr": "rotl",
  "ty": "<8 x i16>",
  "variant": "binopconstsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "shl v1.8h, v0.8h, #7\nusra v1.8h, v0.8h, #9\nmov v0.16b, v1.16b\nret",
  "giasm": "shl v1.8h, v0.8h, #7\nushr v0.8h, v0.8h, #9\norr v0.16b, v1.16b, v0.16b\nret",
  "ll": "define <8 x i16> @test(<8 x i16> %a) {\n  %r = call <8 x i16> @llvm.fshl(<8 x i16> %a, <8 x i16> %a, <8 x i16> splat (i16 7))\n  ret <8 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <8 x i16> @llvm.fshl.v8i16(<8 x i16> %a, <8 x i16> %a, <8 x i16> splat (i16 7))\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i16> %r"
 },
 {
  "instr": "rotl",
  "ty": "<16 x i16>",
  "variant": "binop",
  "codesize": 5,
  "thru": 10,
  "lat": 5,
  "sizelat": 5,
  "size": 15,
  "gisize": 15,
  "extrasize": 0,
  "asm": "movi v4.8h, #15\nneg v5.8h, v2.8h\nneg v6.8h, v3.8h\nand v5.16b, v5.16b, v4.16b\nand v6.16b, v6.16b, v4.16b\nand v2.16b, v2.16b, v4.16b\nand v3.16b, v3.16b, v4.16b\nneg v4.8h, v5.8h\nneg v5.8h, v6.8h\nushl v2.8h, v0.8h, v2.8h\nushl v3.8h, v1.8h, v3.8h\nushl v0.8h, v0.8h, v4.8h\nushl v1.8h, v1.8h, v5.8h\norr v0.16b, v2.16b, v0.16b\norr v1.16b, v3.16b, v1.16b\nret",
  "giasm": "movi v4.8h, #15\nneg v5.8h, v2.8h\nneg v6.8h, v3.8h\nand v5.16b, v5.16b, v4.16b\nand v6.16b, v6.16b, v4.16b\nand v2.16b, v2.16b, v4.16b\nand v3.16b, v3.16b, v4.16b\nneg v4.8h, v5.8h\nneg v5.8h, v6.8h\nushl v2.8h, v0.8h, v2.8h\nushl v3.8h, v1.8h, v3.8h\nushl v0.8h, v0.8h, v4.8h\nushl v1.8h, v1.8h, v5.8h\norr v0.16b, v2.16b, v0.16b\norr v1.16b, v3.16b, v1.16b\nret",
  "ll": "define <16 x i16> @test(<16 x i16> %a, <16 x i16> %b) {\n  %r = call <16 x i16> @llvm.fshl(<16 x i16> %a, <16 x i16> %a, <16 x i16> %b)\n  ret <16 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 5 for instruction:   %r = call <16 x i16> @llvm.fshl.v16i16(<16 x i16> %a, <16 x i16> %a, <16 x i16> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i16> %r"
 },
 {
  "instr": "rotl",
  "ty": "<16 x i16>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 8,
  "lat": 4,
  "sizelat": 4,
  "size": 10,
  "gisize": 11,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nadrp x9, .LCPI0_1\nldr q2, [x8, :lo12:.LCPI0_0]\nldr q3, [x9, :lo12:.LCPI0_1]\nushl v4.8h, v0.8h, v2.8h\nushl v0.8h, v0.8h, v3.8h\nushl v2.8h, v1.8h, v2.8h\nushl v1.8h, v1.8h, v3.8h\norr v0.16b, v0.16b, v4.16b\norr v1.16b, v1.16b, v2.16b\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nadrp x8, .LCPI0_1\nldr q3, [x8, :lo12:.LCPI0_1]\nneg v2.8h, v2.8h\nushl v4.8h, v0.8h, v3.8h\nushl v3.8h, v1.8h, v3.8h\nushl v0.8h, v0.8h, v2.8h\nushl v1.8h, v1.8h, v2.8h\norr v0.16b, v4.16b, v0.16b\norr v1.16b, v3.16b, v1.16b\nret",
  "ll": "define <16 x i16> @test(<16 x i16> %a) {\n  %r = call <16 x i16> @llvm.fshl(<16 x i16> %a, <16 x i16> %a, <16 x i16> <i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6>)\n  ret <16 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <16 x i16> @llvm.fshl.v16i16(<16 x i16> %a, <16 x i16> %a, <16 x i16> <i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6, i16 7, i16 6>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i16> %r"
 },
 {
  "instr": "rotl",
  "ty": "<16 x i16>",
  "variant": "binopsplat",
  "codesize": 8,
  "thru": 14,
  "lat": 9,
  "sizelat": 9,
  "size": 12,
  "gisize": 12,
  "extrasize": 0,
  "asm": "dup v2.8h, w0\nmovi v3.8h, #15\nneg v4.8h, v2.8h\nand v2.16b, v2.16b, v3.16b\nand v4.16b, v4.16b, v3.16b\nneg v3.8h, v4.8h\nushl v4.8h, v0.8h, v2.8h\nushl v2.8h, v1.8h, v2.8h\nushl v0.8h, v0.8h, v3.8h\nushl v1.8h, v1.8h, v3.8h\norr v0.16b, v4.16b, v0.16b\norr v1.16b, v2.16b, v1.16b\nret",
  "giasm": "dup v2.8h, w0\nmovi v3.8h, #15\nneg v4.8h, v2.8h\nand v2.16b, v2.16b, v3.16b\nand v4.16b, v4.16b, v3.16b\nneg v3.8h, v4.8h\nushl v4.8h, v0.8h, v2.8h\nushl v2.8h, v1.8h, v2.8h\nushl v0.8h, v0.8h, v3.8h\nushl v1.8h, v1.8h, v3.8h\norr v0.16b, v4.16b, v0.16b\norr v1.16b, v2.16b, v1.16b\nret",
  "ll": "define <16 x i16> @test(<16 x i16> %a, i16 %bs) {\n  %i = insertelement <16 x i16> poison, i16 %bs, i64 0\n  %b = shufflevector <16 x i16> %i, <16 x i16> poison, <16 x i32> zeroinitializer\n  %r = call <16 x i16> @llvm.fshl(<16 x i16> %a, <16 x i16> %a, <16 x i16> %b)\n  ret <16 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <16 x i16> poison, i16 %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <16 x i16> %i, <16 x i16> poison, <16 x i32> zeroinitializer\nCost Model: Found an estimated cost of 5 for instruction:   %r = call <16 x i16> @llvm.fshl.v16i16(<16 x i16> %a, <16 x i16> %a, <16 x i16> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i16> %r"
 },
 {
  "instr": "rotl",
  "ty": "<16 x i16>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 4,
  "gisize": 6,
  "extrasize": 0,
  "asm": "shl v2.8h, v0.8h, #7\nshl v3.8h, v1.8h, #7\nusra v2.8h, v0.8h, #9\nusra v3.8h, v1.8h, #9\nmov v0.16b, v2.16b\nmov v1.16b, v3.16b\nret",
  "giasm": "shl v2.8h, v0.8h, #7\nshl v3.8h, v1.8h, #7\nushr v0.8h, v0.8h, #9\nushr v1.8h, v1.8h, #9\norr v0.16b, v2.16b, v0.16b\norr v1.16b, v3.16b, v1.16b\nret",
  "ll": "define <16 x i16> @test(<16 x i16> %a) {\n  %r = call <16 x i16> @llvm.fshl(<16 x i16> %a, <16 x i16> %a, <16 x i16> splat (i16 7))\n  ret <16 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <16 x i16> @llvm.fshl.v16i16(<16 x i16> %a, <16 x i16> %a, <16 x i16> splat (i16 7))\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i16> %r"
 },
 {
  "instr": "rotl",
  "ty": "<2 x i32>",
  "variant": "binop",
  "codesize": 5,
  "thru": 5,
  "lat": 5,
  "sizelat": 5,
  "size": 8,
  "gisize": 8,
  "extrasize": 0,
  "asm": "movi v2.2s, #31\nneg v3.2s, v1.2s\nand v3.8b, v3.8b, v2.8b\nand v1.8b, v1.8b, v2.8b\nneg v2.2s, v3.2s\nushl v1.2s, v0.2s, v1.2s\nushl v0.2s, v0.2s, v2.2s\norr v0.8b, v1.8b, v0.8b\nret",
  "giasm": "movi v2.2s, #31\nneg v3.2s, v1.2s\nand v3.8b, v3.8b, v2.8b\nand v1.8b, v1.8b, v2.8b\nneg v2.2s, v3.2s\nushl v1.2s, v0.2s, v1.2s\nushl v0.2s, v0.2s, v2.2s\norr v0.8b, v1.8b, v0.8b\nret",
  "ll": "define <2 x i32> @test(<2 x i32> %a, <2 x i32> %b) {\n  %r = call <2 x i32> @llvm.fshl(<2 x i32> %a, <2 x i32> %a, <2 x i32> %b)\n  ret <2 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 5 for instruction:   %r = call <2 x i32> @llvm.fshl.v2i32(<2 x i32> %a, <2 x i32> %a, <2 x i32> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i32> %r"
 },
 {
  "instr": "rotl",
  "ty": "<2 x i32>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 7,
  "gisize": 8,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nadrp x9, .LCPI0_1\nldr d1, [x8, :lo12:.LCPI0_0]\nldr d2, [x9, :lo12:.LCPI0_1]\nushl v1.2s, v0.2s, v1.2s\nushl v0.2s, v0.2s, v2.2s\norr v0.8b, v0.8b, v1.8b\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr d1, [x8, :lo12:.LCPI0_0]\nadrp x8, .LCPI0_1\nldr d2, [x8, :lo12:.LCPI0_1]\nneg v1.2s, v1.2s\nushl v2.2s, v0.2s, v2.2s\nushl v0.2s, v0.2s, v1.2s\norr v0.8b, v2.8b, v0.8b\nret",
  "ll": "define <2 x i32> @test(<2 x i32> %a) {\n  %r = call <2 x i32> @llvm.fshl(<2 x i32> %a, <2 x i32> %a, <2 x i32> <i32 7, i32 6>)\n  ret <2 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <2 x i32> @llvm.fshl.v2i32(<2 x i32> %a, <2 x i32> %a, <2 x i32> <i32 7, i32 6>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i32> %r"
 },
 {
  "instr": "rotl",
  "ty": "<2 x i32>",
  "variant": "binopsplat",
  "codesize": 7,
  "thru": 8,
  "lat": 8,
  "sizelat": 8,
  "size": 9,
  "gisize": 9,
  "extrasize": 0,
  "asm": "dup v2.2s, w0\nmovi v1.2s, #31\nneg v3.2s, v2.2s\nand v3.8b, v3.8b, v1.8b\nand v1.8b, v2.8b, v1.8b\nneg v2.2s, v3.2s\nushl v1.2s, v0.2s, v1.2s\nushl v0.2s, v0.2s, v2.2s\norr v0.8b, v1.8b, v0.8b\nret",
  "giasm": "dup v2.2s, w0\nmovi v1.2s, #31\nneg v3.2s, v2.2s\nand v3.8b, v3.8b, v1.8b\nand v1.8b, v2.8b, v1.8b\nneg v2.2s, v3.2s\nushl v1.2s, v0.2s, v1.2s\nushl v0.2s, v0.2s, v2.2s\norr v0.8b, v1.8b, v0.8b\nret",
  "ll": "define <2 x i32> @test(<2 x i32> %a, i32 %bs) {\n  %i = insertelement <2 x i32> poison, i32 %bs, i64 0\n  %b = shufflevector <2 x i32> %i, <2 x i32> poison, <2 x i32> zeroinitializer\n  %r = call <2 x i32> @llvm.fshl(<2 x i32> %a, <2 x i32> %a, <2 x i32> %b)\n  ret <2 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <2 x i32> poison, i32 %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <2 x i32> %i, <2 x i32> poison, <2 x i32> zeroinitializer\nCost Model: Found an estimated cost of 5 for instruction:   %r = call <2 x i32> @llvm.fshl.v2i32(<2 x i32> %a, <2 x i32> %a, <2 x i32> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i32> %r"
 },
 {
  "instr": "rotl",
  "ty": "<2 x i32>",
  "variant": "binopconstsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "shl v1.2s, v0.2s, #7\nusra v1.2s, v0.2s, #25\nfmov d0, d1\nret",
  "giasm": "shl v1.2s, v0.2s, #7\nushr v0.2s, v0.2s, #25\norr v0.8b, v1.8b, v0.8b\nret",
  "ll": "define <2 x i32> @test(<2 x i32> %a) {\n  %r = call <2 x i32> @llvm.fshl(<2 x i32> %a, <2 x i32> %a, <2 x i32> splat (i32 7))\n  ret <2 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <2 x i32> @llvm.fshl.v2i32(<2 x i32> %a, <2 x i32> %a, <2 x i32> splat (i32 7))\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i32> %r"
 },
 {
  "instr": "rotl",
  "ty": "<4 x i32>",
  "variant": "binop",
  "codesize": 5,
  "thru": 5,
  "lat": 5,
  "sizelat": 5,
  "size": 8,
  "gisize": 8,
  "extrasize": 0,
  "asm": "movi v2.4s, #31\nneg v3.4s, v1.4s\nand v3.16b, v3.16b, v2.16b\nand v1.16b, v1.16b, v2.16b\nneg v2.4s, v3.4s\nushl v1.4s, v0.4s, v1.4s\nushl v0.4s, v0.4s, v2.4s\norr v0.16b, v1.16b, v0.16b\nret",
  "giasm": "movi v2.4s, #31\nneg v3.4s, v1.4s\nand v3.16b, v3.16b, v2.16b\nand v1.16b, v1.16b, v2.16b\nneg v2.4s, v3.4s\nushl v1.4s, v0.4s, v1.4s\nushl v0.4s, v0.4s, v2.4s\norr v0.16b, v1.16b, v0.16b\nret",
  "ll": "define <4 x i32> @test(<4 x i32> %a, <4 x i32> %b) {\n  %r = call <4 x i32> @llvm.fshl(<4 x i32> %a, <4 x i32> %a, <4 x i32> %b)\n  ret <4 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 5 for instruction:   %r = call <4 x i32> @llvm.fshl.v4i32(<4 x i32> %a, <4 x i32> %a, <4 x i32> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i32> %r"
 },
 {
  "instr": "rotl",
  "ty": "<4 x i32>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 7,
  "gisize": 8,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nadrp x9, .LCPI0_1\nldr q1, [x8, :lo12:.LCPI0_0]\nldr q2, [x9, :lo12:.LCPI0_1]\nushl v1.4s, v0.4s, v1.4s\nushl v0.4s, v0.4s, v2.4s\norr v0.16b, v0.16b, v1.16b\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nadrp x8, .LCPI0_1\nldr q2, [x8, :lo12:.LCPI0_1]\nneg v1.4s, v1.4s\nushl v2.4s, v0.4s, v2.4s\nushl v0.4s, v0.4s, v1.4s\norr v0.16b, v2.16b, v0.16b\nret",
  "ll": "define <4 x i32> @test(<4 x i32> %a) {\n  %r = call <4 x i32> @llvm.fshl(<4 x i32> %a, <4 x i32> %a, <4 x i32> <i32 7, i32 6, i32 7, i32 6>)\n  ret <4 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x i32> @llvm.fshl.v4i32(<4 x i32> %a, <4 x i32> %a, <4 x i32> <i32 7, i32 6, i32 7, i32 6>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i32> %r"
 },
 {
  "instr": "rotl",
  "ty": "<4 x i32>",
  "variant": "binopsplat",
  "codesize": 7,
  "thru": 8,
  "lat": 8,
  "sizelat": 8,
  "size": 9,
  "gisize": 9,
  "extrasize": 0,
  "asm": "dup v2.4s, w0\nmovi v1.4s, #31\nneg v3.4s, v2.4s\nand v3.16b, v3.16b, v1.16b\nand v1.16b, v2.16b, v1.16b\nneg v2.4s, v3.4s\nushl v1.4s, v0.4s, v1.4s\nushl v0.4s, v0.4s, v2.4s\norr v0.16b, v1.16b, v0.16b\nret",
  "giasm": "dup v2.4s, w0\nmovi v1.4s, #31\nneg v3.4s, v2.4s\nand v3.16b, v3.16b, v1.16b\nand v1.16b, v2.16b, v1.16b\nneg v2.4s, v3.4s\nushl v1.4s, v0.4s, v1.4s\nushl v0.4s, v0.4s, v2.4s\norr v0.16b, v1.16b, v0.16b\nret",
  "ll": "define <4 x i32> @test(<4 x i32> %a, i32 %bs) {\n  %i = insertelement <4 x i32> poison, i32 %bs, i64 0\n  %b = shufflevector <4 x i32> %i, <4 x i32> poison, <4 x i32> zeroinitializer\n  %r = call <4 x i32> @llvm.fshl(<4 x i32> %a, <4 x i32> %a, <4 x i32> %b)\n  ret <4 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <4 x i32> poison, i32 %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <4 x i32> %i, <4 x i32> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 5 for instruction:   %r = call <4 x i32> @llvm.fshl.v4i32(<4 x i32> %a, <4 x i32> %a, <4 x i32> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i32> %r"
 },
 {
  "instr": "rotl",
  "ty": "<4 x i32>",
  "variant": "binopconstsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "shl v1.4s, v0.4s, #7\nusra v1.4s, v0.4s, #25\nmov v0.16b, v1.16b\nret",
  "giasm": "shl v1.4s, v0.4s, #7\nushr v0.4s, v0.4s, #25\norr v0.16b, v1.16b, v0.16b\nret",
  "ll": "define <4 x i32> @test(<4 x i32> %a) {\n  %r = call <4 x i32> @llvm.fshl(<4 x i32> %a, <4 x i32> %a, <4 x i32> splat (i32 7))\n  ret <4 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <4 x i32> @llvm.fshl.v4i32(<4 x i32> %a, <4 x i32> %a, <4 x i32> splat (i32 7))\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i32> %r"
 },
 {
  "instr": "rotl",
  "ty": "<8 x i32>",
  "variant": "binop",
  "codesize": 5,
  "thru": 10,
  "lat": 5,
  "sizelat": 5,
  "size": 15,
  "gisize": 15,
  "extrasize": 0,
  "asm": "movi v4.4s, #31\nneg v5.4s, v2.4s\nneg v6.4s, v3.4s\nand v5.16b, v5.16b, v4.16b\nand v6.16b, v6.16b, v4.16b\nand v2.16b, v2.16b, v4.16b\nand v3.16b, v3.16b, v4.16b\nneg v4.4s, v5.4s\nneg v5.4s, v6.4s\nushl v2.4s, v0.4s, v2.4s\nushl v3.4s, v1.4s, v3.4s\nushl v0.4s, v0.4s, v4.4s\nushl v1.4s, v1.4s, v5.4s\norr v0.16b, v2.16b, v0.16b\norr v1.16b, v3.16b, v1.16b\nret",
  "giasm": "movi v4.4s, #31\nneg v5.4s, v2.4s\nneg v6.4s, v3.4s\nand v5.16b, v5.16b, v4.16b\nand v6.16b, v6.16b, v4.16b\nand v2.16b, v2.16b, v4.16b\nand v3.16b, v3.16b, v4.16b\nneg v4.4s, v5.4s\nneg v5.4s, v6.4s\nushl v2.4s, v0.4s, v2.4s\nushl v3.4s, v1.4s, v3.4s\nushl v0.4s, v0.4s, v4.4s\nushl v1.4s, v1.4s, v5.4s\norr v0.16b, v2.16b, v0.16b\norr v1.16b, v3.16b, v1.16b\nret",
  "ll": "define <8 x i32> @test(<8 x i32> %a, <8 x i32> %b) {\n  %r = call <8 x i32> @llvm.fshl(<8 x i32> %a, <8 x i32> %a, <8 x i32> %b)\n  ret <8 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 5 for instruction:   %r = call <8 x i32> @llvm.fshl.v8i32(<8 x i32> %a, <8 x i32> %a, <8 x i32> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i32> %r"
 },
 {
  "instr": "rotl",
  "ty": "<8 x i32>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 8,
  "lat": 4,
  "sizelat": 4,
  "size": 10,
  "gisize": 11,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nadrp x9, .LCPI0_1\nldr q2, [x8, :lo12:.LCPI0_0]\nldr q3, [x9, :lo12:.LCPI0_1]\nushl v4.4s, v0.4s, v2.4s\nushl v0.4s, v0.4s, v3.4s\nushl v2.4s, v1.4s, v2.4s\nushl v1.4s, v1.4s, v3.4s\norr v0.16b, v0.16b, v4.16b\norr v1.16b, v1.16b, v2.16b\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nadrp x8, .LCPI0_1\nldr q3, [x8, :lo12:.LCPI0_1]\nneg v2.4s, v2.4s\nushl v4.4s, v0.4s, v3.4s\nushl v3.4s, v1.4s, v3.4s\nushl v0.4s, v0.4s, v2.4s\nushl v1.4s, v1.4s, v2.4s\norr v0.16b, v4.16b, v0.16b\norr v1.16b, v3.16b, v1.16b\nret",
  "ll": "define <8 x i32> @test(<8 x i32> %a) {\n  %r = call <8 x i32> @llvm.fshl(<8 x i32> %a, <8 x i32> %a, <8 x i32> <i32 7, i32 6, i32 7, i32 6, i32 7, i32 6, i32 7, i32 6>)\n  ret <8 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x i32> @llvm.fshl.v8i32(<8 x i32> %a, <8 x i32> %a, <8 x i32> <i32 7, i32 6, i32 7, i32 6, i32 7, i32 6, i32 7, i32 6>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i32> %r"
 },
 {
  "instr": "rotl",
  "ty": "<8 x i32>",
  "variant": "binopsplat",
  "codesize": 8,
  "thru": 14,
  "lat": 9,
  "sizelat": 9,
  "size": 12,
  "gisize": 12,
  "extrasize": 0,
  "asm": "dup v2.4s, w0\nmovi v3.4s, #31\nneg v4.4s, v2.4s\nand v2.16b, v2.16b, v3.16b\nand v4.16b, v4.16b, v3.16b\nneg v3.4s, v4.4s\nushl v4.4s, v0.4s, v2.4s\nushl v2.4s, v1.4s, v2.4s\nushl v0.4s, v0.4s, v3.4s\nushl v1.4s, v1.4s, v3.4s\norr v0.16b, v4.16b, v0.16b\norr v1.16b, v2.16b, v1.16b\nret",
  "giasm": "dup v2.4s, w0\nmovi v3.4s, #31\nneg v4.4s, v2.4s\nand v2.16b, v2.16b, v3.16b\nand v4.16b, v4.16b, v3.16b\nneg v3.4s, v4.4s\nushl v4.4s, v0.4s, v2.4s\nushl v2.4s, v1.4s, v2.4s\nushl v0.4s, v0.4s, v3.4s\nushl v1.4s, v1.4s, v3.4s\norr v0.16b, v4.16b, v0.16b\norr v1.16b, v2.16b, v1.16b\nret",
  "ll": "define <8 x i32> @test(<8 x i32> %a, i32 %bs) {\n  %i = insertelement <8 x i32> poison, i32 %bs, i64 0\n  %b = shufflevector <8 x i32> %i, <8 x i32> poison, <8 x i32> zeroinitializer\n  %r = call <8 x i32> @llvm.fshl(<8 x i32> %a, <8 x i32> %a, <8 x i32> %b)\n  ret <8 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <8 x i32> poison, i32 %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <8 x i32> %i, <8 x i32> poison, <8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 5 for instruction:   %r = call <8 x i32> @llvm.fshl.v8i32(<8 x i32> %a, <8 x i32> %a, <8 x i32> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i32> %r"
 },
 {
  "instr": "rotl",
  "ty": "<8 x i32>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 4,
  "gisize": 6,
  "extrasize": 0,
  "asm": "shl v2.4s, v0.4s, #7\nshl v3.4s, v1.4s, #7\nusra v2.4s, v0.4s, #25\nusra v3.4s, v1.4s, #25\nmov v0.16b, v2.16b\nmov v1.16b, v3.16b\nret",
  "giasm": "shl v2.4s, v0.4s, #7\nshl v3.4s, v1.4s, #7\nushr v0.4s, v0.4s, #25\nushr v1.4s, v1.4s, #25\norr v0.16b, v2.16b, v0.16b\norr v1.16b, v3.16b, v1.16b\nret",
  "ll": "define <8 x i32> @test(<8 x i32> %a) {\n  %r = call <8 x i32> @llvm.fshl(<8 x i32> %a, <8 x i32> %a, <8 x i32> splat (i32 7))\n  ret <8 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x i32> @llvm.fshl.v8i32(<8 x i32> %a, <8 x i32> %a, <8 x i32> splat (i32 7))\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i32> %r"
 },
 {
  "instr": "rotl",
  "ty": "<2 x i64>",
  "variant": "binop",
  "codesize": 5,
  "thru": 5,
  "lat": 5,
  "sizelat": 5,
  "size": 9,
  "gisize": 9,
  "extrasize": 0,
  "asm": "mov w8, #63                         // =0x3f\nneg v3.2d, v1.2d\ndup v2.2d, x8\nand v3.16b, v3.16b, v2.16b\nand v1.16b, v1.16b, v2.16b\nneg v2.2d, v3.2d\nushl v1.2d, v0.2d, v1.2d\nushl v0.2d, v0.2d, v2.2d\norr v0.16b, v1.16b, v0.16b\nret",
  "giasm": "adrp x8, .LCPI0_0\nneg v2.2d, v1.2d\nldr q3, [x8, :lo12:.LCPI0_0]\nand v2.16b, v2.16b, v3.16b\nand v1.16b, v1.16b, v3.16b\nneg v2.2d, v2.2d\nushl v1.2d, v0.2d, v1.2d\nushl v0.2d, v0.2d, v2.2d\norr v0.16b, v1.16b, v0.16b\nret",
  "ll": "define <2 x i64> @test(<2 x i64> %a, <2 x i64> %b) {\n  %r = call <2 x i64> @llvm.fshl(<2 x i64> %a, <2 x i64> %a, <2 x i64> %b)\n  ret <2 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 5 for instruction:   %r = call <2 x i64> @llvm.fshl.v2i64(<2 x i64> %a, <2 x i64> %a, <2 x i64> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i64> %r"
 },
 {
  "instr": "rotl",
  "ty": "<2 x i64>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 7,
  "gisize": 8,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nadrp x9, .LCPI0_1\nldr q1, [x8, :lo12:.LCPI0_0]\nldr q2, [x9, :lo12:.LCPI0_1]\nushl v1.2d, v0.2d, v1.2d\nushl v0.2d, v0.2d, v2.2d\norr v0.16b, v0.16b, v1.16b\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nadrp x8, .LCPI0_1\nldr q2, [x8, :lo12:.LCPI0_1]\nneg v1.2d, v1.2d\nushl v2.2d, v0.2d, v2.2d\nushl v0.2d, v0.2d, v1.2d\norr v0.16b, v2.16b, v0.16b\nret",
  "ll": "define <2 x i64> @test(<2 x i64> %a) {\n  %r = call <2 x i64> @llvm.fshl(<2 x i64> %a, <2 x i64> %a, <2 x i64> <i64 7, i64 6>)\n  ret <2 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <2 x i64> @llvm.fshl.v2i64(<2 x i64> %a, <2 x i64> %a, <2 x i64> <i64 7, i64 6>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i64> %r"
 },
 {
  "instr": "rotl",
  "ty": "<2 x i64>",
  "variant": "binopsplat",
  "codesize": 7,
  "thru": 8,
  "lat": 8,
  "sizelat": 8,
  "size": 10,
  "gisize": 10,
  "extrasize": 0,
  "asm": "dup v1.2d, x0\nmov w8, #63                         // =0x3f\ndup v2.2d, x8\nneg v3.2d, v1.2d\nand v1.16b, v1.16b, v2.16b\nand v3.16b, v3.16b, v2.16b\nushl v1.2d, v0.2d, v1.2d\nneg v2.2d, v3.2d\nushl v0.2d, v0.2d, v2.2d\norr v0.16b, v1.16b, v0.16b\nret",
  "giasm": "dup v1.2d, x0\nadrp x8, .LCPI0_0\nldr q3, [x8, :lo12:.LCPI0_0]\nneg v2.2d, v1.2d\nand v1.16b, v1.16b, v3.16b\nand v2.16b, v2.16b, v3.16b\nushl v1.2d, v0.2d, v1.2d\nneg v2.2d, v2.2d\nushl v0.2d, v0.2d, v2.2d\norr v0.16b, v1.16b, v0.16b\nret",
  "ll": "define <2 x i64> @test(<2 x i64> %a, i64 %bs) {\n  %i = insertelement <2 x i64> poison, i64 %bs, i64 0\n  %b = shufflevector <2 x i64> %i, <2 x i64> poison, <2 x i32> zeroinitializer\n  %r = call <2 x i64> @llvm.fshl(<2 x i64> %a, <2 x i64> %a, <2 x i64> %b)\n  ret <2 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <2 x i64> poison, i64 %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <2 x i64> %i, <2 x i64> poison, <2 x i32> zeroinitializer\nCost Model: Found an estimated cost of 5 for instruction:   %r = call <2 x i64> @llvm.fshl.v2i64(<2 x i64> %a, <2 x i64> %a, <2 x i64> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i64> %r"
 },
 {
  "instr": "rotl",
  "ty": "<2 x i64>",
  "variant": "binopconstsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "shl v1.2d, v0.2d, #7\nusra v1.2d, v0.2d, #57\nmov v0.16b, v1.16b\nret",
  "giasm": "shl v1.2d, v0.2d, #7\nushr v0.2d, v0.2d, #57\norr v0.16b, v1.16b, v0.16b\nret",
  "ll": "define <2 x i64> @test(<2 x i64> %a) {\n  %r = call <2 x i64> @llvm.fshl(<2 x i64> %a, <2 x i64> %a, <2 x i64> splat (i64 7))\n  ret <2 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <2 x i64> @llvm.fshl.v2i64(<2 x i64> %a, <2 x i64> %a, <2 x i64> splat (i64 7))\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i64> %r"
 },
 {
  "instr": "rotl",
  "ty": "<4 x i64>",
  "variant": "binop",
  "codesize": 5,
  "thru": 10,
  "lat": 5,
  "sizelat": 5,
  "size": 16,
  "gisize": 16,
  "extrasize": 0,
  "asm": "mov w8, #63                         // =0x3f\nneg v5.2d, v2.2d\nneg v6.2d, v3.2d\ndup v4.2d, x8\nand v5.16b, v5.16b, v4.16b\nand v6.16b, v6.16b, v4.16b\nand v2.16b, v2.16b, v4.16b\nand v3.16b, v3.16b, v4.16b\nneg v4.2d, v5.2d\nneg v5.2d, v6.2d\nushl v2.2d, v0.2d, v2.2d\nushl v3.2d, v1.2d, v3.2d\nushl v0.2d, v0.2d, v4.2d\nushl v1.2d, v1.2d, v5.2d\norr v0.16b, v2.16b, v0.16b\norr v1.16b, v3.16b, v1.16b\nret",
  "giasm": "adrp x8, .LCPI0_0\nneg v4.2d, v2.2d\nneg v5.2d, v3.2d\nldr q6, [x8, :lo12:.LCPI0_0]\nand v4.16b, v4.16b, v6.16b\nand v5.16b, v5.16b, v6.16b\nand v2.16b, v2.16b, v6.16b\nand v3.16b, v3.16b, v6.16b\nneg v4.2d, v4.2d\nneg v5.2d, v5.2d\nushl v2.2d, v0.2d, v2.2d\nushl v3.2d, v1.2d, v3.2d\nushl v0.2d, v0.2d, v4.2d\nushl v1.2d, v1.2d, v5.2d\norr v0.16b, v2.16b, v0.16b\norr v1.16b, v3.16b, v1.16b\nret",
  "ll": "define <4 x i64> @test(<4 x i64> %a, <4 x i64> %b) {\n  %r = call <4 x i64> @llvm.fshl(<4 x i64> %a, <4 x i64> %a, <4 x i64> %b)\n  ret <4 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 5 for instruction:   %r = call <4 x i64> @llvm.fshl.v4i64(<4 x i64> %a, <4 x i64> %a, <4 x i64> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i64> %r"
 },
 {
  "instr": "rotl",
  "ty": "<4 x i64>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 8,
  "lat": 4,
  "sizelat": 4,
  "size": 10,
  "gisize": 11,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nadrp x9, .LCPI0_1\nldr q2, [x8, :lo12:.LCPI0_0]\nldr q3, [x9, :lo12:.LCPI0_1]\nushl v4.2d, v0.2d, v2.2d\nushl v0.2d, v0.2d, v3.2d\nushl v2.2d, v1.2d, v2.2d\nushl v1.2d, v1.2d, v3.2d\norr v0.16b, v0.16b, v4.16b\norr v1.16b, v1.16b, v2.16b\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nadrp x8, .LCPI0_1\nldr q3, [x8, :lo12:.LCPI0_1]\nneg v2.2d, v2.2d\nushl v4.2d, v0.2d, v3.2d\nushl v3.2d, v1.2d, v3.2d\nushl v0.2d, v0.2d, v2.2d\nushl v1.2d, v1.2d, v2.2d\norr v0.16b, v4.16b, v0.16b\norr v1.16b, v3.16b, v1.16b\nret",
  "ll": "define <4 x i64> @test(<4 x i64> %a) {\n  %r = call <4 x i64> @llvm.fshl(<4 x i64> %a, <4 x i64> %a, <4 x i64> <i64 7, i64 6, i64 7, i64 6>)\n  ret <4 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x i64> @llvm.fshl.v4i64(<4 x i64> %a, <4 x i64> %a, <4 x i64> <i64 7, i64 6, i64 7, i64 6>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i64> %r"
 },
 {
  "instr": "rotl",
  "ty": "<4 x i64>",
  "variant": "binopsplat",
  "codesize": 8,
  "thru": 14,
  "lat": 9,
  "sizelat": 9,
  "size": 13,
  "gisize": 13,
  "extrasize": 0,
  "asm": "dup v2.2d, x0\nmov w8, #63                         // =0x3f\ndup v3.2d, x8\nneg v4.2d, v2.2d\nand v2.16b, v2.16b, v3.16b\nand v4.16b, v4.16b, v3.16b\nneg v3.2d, v4.2d\nushl v4.2d, v0.2d, v2.2d\nushl v2.2d, v1.2d, v2.2d\nushl v0.2d, v0.2d, v3.2d\nushl v1.2d, v1.2d, v3.2d\norr v0.16b, v4.16b, v0.16b\norr v1.16b, v2.16b, v1.16b\nret",
  "giasm": "dup v2.2d, x0\nadrp x8, .LCPI0_0\nldr q4, [x8, :lo12:.LCPI0_0]\nneg v3.2d, v2.2d\nand v2.16b, v2.16b, v4.16b\nand v3.16b, v3.16b, v4.16b\nushl v4.2d, v0.2d, v2.2d\nushl v2.2d, v1.2d, v2.2d\nneg v3.2d, v3.2d\nushl v0.2d, v0.2d, v3.2d\nushl v1.2d, v1.2d, v3.2d\norr v0.16b, v4.16b, v0.16b\norr v1.16b, v2.16b, v1.16b\nret",
  "ll": "define <4 x i64> @test(<4 x i64> %a, i64 %bs) {\n  %i = insertelement <4 x i64> poison, i64 %bs, i64 0\n  %b = shufflevector <4 x i64> %i, <4 x i64> poison, <4 x i32> zeroinitializer\n  %r = call <4 x i64> @llvm.fshl(<4 x i64> %a, <4 x i64> %a, <4 x i64> %b)\n  ret <4 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %i = insertelement <4 x i64> poison, i64 %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <4 x i64> %i, <4 x i64> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 5 for instruction:   %r = call <4 x i64> @llvm.fshl.v4i64(<4 x i64> %a, <4 x i64> %a, <4 x i64> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i64> %r"
 },
 {
  "instr": "rotl",
  "ty": "<4 x i64>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 4,
  "gisize": 6,
  "extrasize": 0,
  "asm": "shl v2.2d, v0.2d, #7\nshl v3.2d, v1.2d, #7\nusra v2.2d, v0.2d, #57\nusra v3.2d, v1.2d, #57\nmov v0.16b, v2.16b\nmov v1.16b, v3.16b\nret",
  "giasm": "shl v2.2d, v0.2d, #7\nshl v3.2d, v1.2d, #7\nushr v0.2d, v0.2d, #57\nushr v1.2d, v1.2d, #57\norr v0.16b, v2.16b, v0.16b\norr v1.16b, v3.16b, v1.16b\nret",
  "ll": "define <4 x i64> @test(<4 x i64> %a) {\n  %r = call <4 x i64> @llvm.fshl(<4 x i64> %a, <4 x i64> %a, <4 x i64> splat (i64 7))\n  ret <4 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x i64> @llvm.fshl.v4i64(<4 x i64> %a, <4 x i64> %a, <4 x i64> splat (i64 7))\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i64> %r"
 },
 {
  "instr": "abs",
  "ty": "i8",
  "variant": "unop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "sxtb w8, w0\ncmp w8, #0\ncneg w0, w8, mi\nret",
  "giasm": "sxtb w8, w0\ncmp w8, #0\ncneg w0, w0, le\nret",
  "ll": "define i8 @test(i8 %a) {\n  %r = call i8 @llvm.abs(i8 %a, i1 0)\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call i8 @llvm.abs.i8(i8 %a, i1 false)\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "abs",
  "ty": "i16",
  "variant": "unop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "sxth w8, w0\ncmp w8, #0\ncneg w0, w8, mi\nret",
  "giasm": "sxth w8, w0\ncmp w8, #0\ncneg w0, w0, le\nret",
  "ll": "define i16 @test(i16 %a) {\n  %r = call i16 @llvm.abs(i16 %a, i1 0)\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call i16 @llvm.abs.i16(i16 %a, i1 false)\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "abs",
  "ty": "i32",
  "variant": "unop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmp w0, #0\ncneg w0, w0, mi\nret",
  "giasm": "cmp w0, #0\ncneg w0, w0, le\nret",
  "ll": "define i32 @test(i32 %a) {\n  %r = call i32 @llvm.abs(i32 %a, i1 0)\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call i32 @llvm.abs.i32(i32 %a, i1 false)\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "abs",
  "ty": "i64",
  "variant": "unop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmp x0, #0\ncneg x0, x0, mi\nret",
  "giasm": "cmp x0, #0\ncneg x0, x0, le\nret",
  "ll": "define i64 @test(i64 %a) {\n  %r = call i64 @llvm.abs(i64 %a, i1 0)\n  ret i64 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call i64 @llvm.abs.i64(i64 %a, i1 false)\nCost Model: Found an estimated cost of 1 for instruction:   ret i64 %r"
 },
 {
  "instr": "abs",
  "ty": "<8 x i8>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "abs v0.8b, v0.8b\nret",
  "giasm": "abs v0.8b, v0.8b\nret",
  "ll": "define <8 x i8> @test(<8 x i8> %a) {\n  %r = call <8 x i8> @llvm.abs(<8 x i8> %a, i1 0)\n  ret <8 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <8 x i8> @llvm.abs.v8i8(<8 x i8> %a, i1 false)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i8> %r"
 },
 {
  "instr": "abs",
  "ty": "<16 x i8>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "abs v0.16b, v0.16b\nret",
  "giasm": "abs v0.16b, v0.16b\nret",
  "ll": "define <16 x i8> @test(<16 x i8> %a) {\n  %r = call <16 x i8> @llvm.abs(<16 x i8> %a, i1 0)\n  ret <16 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <16 x i8> @llvm.abs.v16i8(<16 x i8> %a, i1 false)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i8> %r"
 },
 {
  "instr": "abs",
  "ty": "<32 x i8>",
  "variant": "unop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "abs v0.16b, v0.16b\nabs v1.16b, v1.16b\nret",
  "giasm": "abs v0.16b, v0.16b\nabs v1.16b, v1.16b\nret",
  "ll": "define <32 x i8> @test(<32 x i8> %a) {\n  %r = call <32 x i8> @llvm.abs(<32 x i8> %a, i1 0)\n  ret <32 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <32 x i8> @llvm.abs.v32i8(<32 x i8> %a, i1 false)\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i8> %r"
 },
 {
  "instr": "abs",
  "ty": "<4 x i16>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "abs v0.4h, v0.4h\nret",
  "giasm": "abs v0.4h, v0.4h\nret",
  "ll": "define <4 x i16> @test(<4 x i16> %a) {\n  %r = call <4 x i16> @llvm.abs(<4 x i16> %a, i1 0)\n  ret <4 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x i16> @llvm.abs.v4i16(<4 x i16> %a, i1 false)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i16> %r"
 },
 {
  "instr": "abs",
  "ty": "<8 x i16>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "abs v0.8h, v0.8h\nret",
  "giasm": "abs v0.8h, v0.8h\nret",
  "ll": "define <8 x i16> @test(<8 x i16> %a) {\n  %r = call <8 x i16> @llvm.abs(<8 x i16> %a, i1 0)\n  ret <8 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <8 x i16> @llvm.abs.v8i16(<8 x i16> %a, i1 false)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i16> %r"
 },
 {
  "instr": "abs",
  "ty": "<16 x i16>",
  "variant": "unop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "abs v0.8h, v0.8h\nabs v1.8h, v1.8h\nret",
  "giasm": "abs v0.8h, v0.8h\nabs v1.8h, v1.8h\nret",
  "ll": "define <16 x i16> @test(<16 x i16> %a) {\n  %r = call <16 x i16> @llvm.abs(<16 x i16> %a, i1 0)\n  ret <16 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <16 x i16> @llvm.abs.v16i16(<16 x i16> %a, i1 false)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i16> %r"
 },
 {
  "instr": "abs",
  "ty": "<2 x i32>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "abs v0.2s, v0.2s\nret",
  "giasm": "abs v0.2s, v0.2s\nret",
  "ll": "define <2 x i32> @test(<2 x i32> %a) {\n  %r = call <2 x i32> @llvm.abs(<2 x i32> %a, i1 0)\n  ret <2 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x i32> @llvm.abs.v2i32(<2 x i32> %a, i1 false)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i32> %r"
 },
 {
  "instr": "abs",
  "ty": "<4 x i32>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "abs v0.4s, v0.4s\nret",
  "giasm": "abs v0.4s, v0.4s\nret",
  "ll": "define <4 x i32> @test(<4 x i32> %a) {\n  %r = call <4 x i32> @llvm.abs(<4 x i32> %a, i1 0)\n  ret <4 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x i32> @llvm.abs.v4i32(<4 x i32> %a, i1 false)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i32> %r"
 },
 {
  "instr": "abs",
  "ty": "<8 x i32>",
  "variant": "unop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "abs v0.4s, v0.4s\nabs v1.4s, v1.4s\nret",
  "giasm": "abs v0.4s, v0.4s\nabs v1.4s, v1.4s\nret",
  "ll": "define <8 x i32> @test(<8 x i32> %a) {\n  %r = call <8 x i32> @llvm.abs(<8 x i32> %a, i1 0)\n  ret <8 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <8 x i32> @llvm.abs.v8i32(<8 x i32> %a, i1 false)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i32> %r"
 },
 {
  "instr": "abs",
  "ty": "<2 x i64>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "abs v0.2d, v0.2d\nret",
  "giasm": "abs v0.2d, v0.2d\nret",
  "ll": "define <2 x i64> @test(<2 x i64> %a) {\n  %r = call <2 x i64> @llvm.abs(<2 x i64> %a, i1 0)\n  ret <2 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x i64> @llvm.abs.v2i64(<2 x i64> %a, i1 false)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i64> %r"
 },
 {
  "instr": "abs",
  "ty": "<4 x i64>",
  "variant": "unop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "abs v0.2d, v0.2d\nabs v1.2d, v1.2d\nret",
  "giasm": "abs v0.2d, v0.2d\nabs v1.2d, v1.2d\nret",
  "ll": "define <4 x i64> @test(<4 x i64> %a) {\n  %r = call <4 x i64> @llvm.abs(<4 x i64> %a, i1 0)\n  ret <4 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <4 x i64> @llvm.abs.v4i64(<4 x i64> %a, i1 false)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i64> %r"
 },
 {
  "instr": "bitreverse",
  "ty": "i8",
  "variant": "unop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "rbit w8, w0\nlsr w0, w8, #24\nret",
  "giasm": "rbit w8, w0\nlsr w0, w8, #24\nret",
  "ll": "define i8 @test(i8 %a) {\n  %r = call i8 @llvm.bitreverse(i8 %a)\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call i8 @llvm.bitreverse.i8(i8 %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "bitreverse",
  "ty": "i16",
  "variant": "unop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "rbit w8, w0\nlsr w0, w8, #16\nret",
  "giasm": "rbit w8, w0\nlsr w0, w8, #16\nret",
  "ll": "define i16 @test(i16 %a) {\n  %r = call i16 @llvm.bitreverse(i16 %a)\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call i16 @llvm.bitreverse.i16(i16 %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "bitreverse",
  "ty": "i32",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "rbit w0, w0\nret",
  "giasm": "rbit w0, w0\nret",
  "ll": "define i32 @test(i32 %a) {\n  %r = call i32 @llvm.bitreverse(i32 %a)\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call i32 @llvm.bitreverse.i32(i32 %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "bitreverse",
  "ty": "i64",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "rbit x0, x0\nret",
  "giasm": "rbit x0, x0\nret",
  "ll": "define i64 @test(i64 %a) {\n  %r = call i64 @llvm.bitreverse(i64 %a)\n  ret i64 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call i64 @llvm.bitreverse.i64(i64 %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i64 %r"
 },
 {
  "instr": "bitreverse",
  "ty": "<8 x i8>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "rbit v0.8b, v0.8b\nret",
  "giasm": "rbit v0.8b, v0.8b\nret",
  "ll": "define <8 x i8> @test(<8 x i8> %a) {\n  %r = call <8 x i8> @llvm.bitreverse(<8 x i8> %a)\n  ret <8 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <8 x i8> @llvm.bitreverse.v8i8(<8 x i8> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i8> %r"
 },
 {
  "instr": "bitreverse",
  "ty": "<16 x i8>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "rbit v0.16b, v0.16b\nret",
  "giasm": "rbit v0.16b, v0.16b\nret",
  "ll": "define <16 x i8> @test(<16 x i8> %a) {\n  %r = call <16 x i8> @llvm.bitreverse(<16 x i8> %a)\n  ret <16 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <16 x i8> @llvm.bitreverse.v16i8(<16 x i8> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i8> %r"
 },
 {
  "instr": "bitreverse",
  "ty": "<32 x i8>",
  "variant": "unop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "rbit v0.16b, v0.16b\nrbit v1.16b, v1.16b\nret",
  "giasm": "LLVM ERROR: unable to legalize instruction: %6:_(<32 x s8>) = G_BSWAP %0:_ (in function: test)",
  "ll": "define <32 x i8> @test(<32 x i8> %a) {\n  %r = call <32 x i8> @llvm.bitreverse(<32 x i8> %a)\n  ret <32 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <32 x i8> @llvm.bitreverse.v32i8(<32 x i8> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i8> %r"
 },
 {
  "instr": "bitreverse",
  "ty": "<4 x i16>",
  "variant": "unop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 19,
  "extrasize": 0,
  "asm": "rev16 v0.8b, v0.8b\nrbit v0.8b, v0.8b\nret",
  "giasm": "movi v1.8b, #240\nrev16 v0.8b, v0.8b\nand v2.8b, v0.8b, v1.8b\nshl v0.4h, v0.4h, #4\nushr v2.4h, v2.4h, #4\nand v0.8b, v0.8b, v1.8b\nmovi v1.8b, #204\norr v0.8b, v2.8b, v0.8b\nand v2.8b, v0.8b, v1.8b\nshl v0.4h, v0.4h, #2\nushr v2.4h, v2.4h, #2\nand v0.8b, v0.8b, v1.8b\nmovi v1.8b, #170\norr v0.8b, v2.8b, v0.8b\nand v2.8b, v0.8b, v1.8b\nshl v0.4h, v0.4h, #1\nushr v2.4h, v2.4h, #1\nand v0.8b, v0.8b, v1.8b\norr v0.8b, v2.8b, v0.8b\nret",
  "ll": "define <4 x i16> @test(<4 x i16> %a) {\n  %r = call <4 x i16> @llvm.bitreverse(<4 x i16> %a)\n  ret <4 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <4 x i16> @llvm.bitreverse.v4i16(<4 x i16> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i16> %r"
 },
 {
  "instr": "bitreverse",
  "ty": "<8 x i16>",
  "variant": "unop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 19,
  "extrasize": 0,
  "asm": "rev16 v0.16b, v0.16b\nrbit v0.16b, v0.16b\nret",
  "giasm": "movi v1.16b, #240\nrev16 v0.16b, v0.16b\nand v2.16b, v0.16b, v1.16b\nshl v0.8h, v0.8h, #4\nushr v2.8h, v2.8h, #4\nand v0.16b, v0.16b, v1.16b\nmovi v1.16b, #204\norr v0.16b, v2.16b, v0.16b\nand v2.16b, v0.16b, v1.16b\nshl v0.8h, v0.8h, #2\nushr v2.8h, v2.8h, #2\nand v0.16b, v0.16b, v1.16b\nmovi v1.16b, #170\norr v0.16b, v2.16b, v0.16b\nand v2.16b, v0.16b, v1.16b\nshl v0.8h, v0.8h, #1\nushr v2.8h, v2.8h, #1\nand v0.16b, v0.16b, v1.16b\norr v0.16b, v2.16b, v0.16b\nret",
  "ll": "define <8 x i16> @test(<8 x i16> %a) {\n  %r = call <8 x i16> @llvm.bitreverse(<8 x i16> %a)\n  ret <8 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <8 x i16> @llvm.bitreverse.v8i16(<8 x i16> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i16> %r"
 },
 {
  "instr": "bitreverse",
  "ty": "<16 x i16>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 4,
  "gisize": 35,
  "extrasize": 0,
  "asm": "rev16 v0.16b, v0.16b\nrev16 v1.16b, v1.16b\nrbit v0.16b, v0.16b\nrbit v1.16b, v1.16b\nret",
  "giasm": "movi v2.16b, #240\nrev16 v0.16b, v0.16b\nrev16 v1.16b, v1.16b\nand v3.16b, v0.16b, v2.16b\nshl v0.8h, v0.8h, #4\nand v4.16b, v1.16b, v2.16b\nshl v1.8h, v1.8h, #4\nushr v3.8h, v3.8h, #4\nand v0.16b, v0.16b, v2.16b\nushr v4.8h, v4.8h, #4\nand v1.16b, v1.16b, v2.16b\nmovi v2.16b, #204\norr v0.16b, v3.16b, v0.16b\norr v1.16b, v4.16b, v1.16b\nand v3.16b, v0.16b, v2.16b\nshl v0.8h, v0.8h, #2\nand v4.16b, v1.16b, v2.16b\nshl v1.8h, v1.8h, #2\nushr v3.8h, v3.8h, #2\nand v0.16b, v0.16b, v2.16b\nushr v4.8h, v4.8h, #2\nand v1.16b, v1.16b, v2.16b\nmovi v2.16b, #170\norr v0.16b, v3.16b, v0.16b\norr v1.16b, v4.16b, v1.16b\nand v3.16b, v0.16b, v2.16b\nshl v0.8h, v0.8h, #1\nand v4.16b, v1.16b, v2.16b\nshl v1.8h, v1.8h, #1\nushr v3.8h, v3.8h, #1\nand v0.16b, v0.16b, v2.16b\nushr v4.8h, v4.8h, #1\nand v1.16b, v1.16b, v2.16b\norr v0.16b, v3.16b, v0.16b\norr v1.16b, v4.16b, v1.16b\nret",
  "ll": "define <16 x i16> @test(<16 x i16> %a) {\n  %r = call <16 x i16> @llvm.bitreverse(<16 x i16> %a)\n  ret <16 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <16 x i16> @llvm.bitreverse.v16i16(<16 x i16> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i16> %r"
 },
 {
  "instr": "bitreverse",
  "ty": "<2 x i32>",
  "variant": "unop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 19,
  "extrasize": 0,
  "asm": "rev32 v0.8b, v0.8b\nrbit v0.8b, v0.8b\nret",
  "giasm": "movi v1.8b, #240\nrev32 v0.8b, v0.8b\nand v2.8b, v0.8b, v1.8b\nshl v0.2s, v0.2s, #4\nushr v2.2s, v2.2s, #4\nand v0.8b, v0.8b, v1.8b\nmovi v1.8b, #204\norr v0.8b, v2.8b, v0.8b\nand v2.8b, v0.8b, v1.8b\nshl v0.2s, v0.2s, #2\nushr v2.2s, v2.2s, #2\nand v0.8b, v0.8b, v1.8b\nmovi v1.8b, #170\norr v0.8b, v2.8b, v0.8b\nand v2.8b, v0.8b, v1.8b\nshl v0.2s, v0.2s, #1\nushr v2.2s, v2.2s, #1\nand v0.8b, v0.8b, v1.8b\norr v0.8b, v2.8b, v0.8b\nret",
  "ll": "define <2 x i32> @test(<2 x i32> %a) {\n  %r = call <2 x i32> @llvm.bitreverse(<2 x i32> %a)\n  ret <2 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <2 x i32> @llvm.bitreverse.v2i32(<2 x i32> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i32> %r"
 },
 {
  "instr": "bitreverse",
  "ty": "<4 x i32>",
  "variant": "unop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 19,
  "extrasize": 0,
  "asm": "rev32 v0.16b, v0.16b\nrbit v0.16b, v0.16b\nret",
  "giasm": "movi v1.16b, #240\nrev32 v0.16b, v0.16b\nand v2.16b, v0.16b, v1.16b\nshl v0.4s, v0.4s, #4\nushr v2.4s, v2.4s, #4\nand v0.16b, v0.16b, v1.16b\nmovi v1.16b, #204\norr v0.16b, v2.16b, v0.16b\nand v2.16b, v0.16b, v1.16b\nshl v0.4s, v0.4s, #2\nushr v2.4s, v2.4s, #2\nand v0.16b, v0.16b, v1.16b\nmovi v1.16b, #170\norr v0.16b, v2.16b, v0.16b\nand v2.16b, v0.16b, v1.16b\nshl v0.4s, v0.4s, #1\nushr v2.4s, v2.4s, #1\nand v0.16b, v0.16b, v1.16b\norr v0.16b, v2.16b, v0.16b\nret",
  "ll": "define <4 x i32> @test(<4 x i32> %a) {\n  %r = call <4 x i32> @llvm.bitreverse(<4 x i32> %a)\n  ret <4 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <4 x i32> @llvm.bitreverse.v4i32(<4 x i32> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i32> %r"
 },
 {
  "instr": "bitreverse",
  "ty": "<8 x i32>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 4,
  "gisize": 35,
  "extrasize": 0,
  "asm": "rev32 v0.16b, v0.16b\nrev32 v1.16b, v1.16b\nrbit v0.16b, v0.16b\nrbit v1.16b, v1.16b\nret",
  "giasm": "movi v2.16b, #240\nrev32 v0.16b, v0.16b\nrev32 v1.16b, v1.16b\nand v3.16b, v0.16b, v2.16b\nshl v0.4s, v0.4s, #4\nand v4.16b, v1.16b, v2.16b\nshl v1.4s, v1.4s, #4\nushr v3.4s, v3.4s, #4\nand v0.16b, v0.16b, v2.16b\nushr v4.4s, v4.4s, #4\nand v1.16b, v1.16b, v2.16b\nmovi v2.16b, #204\norr v0.16b, v3.16b, v0.16b\norr v1.16b, v4.16b, v1.16b\nand v3.16b, v0.16b, v2.16b\nshl v0.4s, v0.4s, #2\nand v4.16b, v1.16b, v2.16b\nshl v1.4s, v1.4s, #2\nushr v3.4s, v3.4s, #2\nand v0.16b, v0.16b, v2.16b\nushr v4.4s, v4.4s, #2\nand v1.16b, v1.16b, v2.16b\nmovi v2.16b, #170\norr v0.16b, v3.16b, v0.16b\norr v1.16b, v4.16b, v1.16b\nand v3.16b, v0.16b, v2.16b\nshl v0.4s, v0.4s, #1\nand v4.16b, v1.16b, v2.16b\nshl v1.4s, v1.4s, #1\nushr v3.4s, v3.4s, #1\nand v0.16b, v0.16b, v2.16b\nushr v4.4s, v4.4s, #1\nand v1.16b, v1.16b, v2.16b\norr v0.16b, v3.16b, v0.16b\norr v1.16b, v4.16b, v1.16b\nret",
  "ll": "define <8 x i32> @test(<8 x i32> %a) {\n  %r = call <8 x i32> @llvm.bitreverse(<8 x i32> %a)\n  ret <8 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x i32> @llvm.bitreverse.v8i32(<8 x i32> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i32> %r"
 },
 {
  "instr": "bitreverse",
  "ty": "<2 x i64>",
  "variant": "unop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 19,
  "extrasize": 0,
  "asm": "rev64 v0.16b, v0.16b\nrbit v0.16b, v0.16b\nret",
  "giasm": "movi v1.16b, #240\nrev64 v0.16b, v0.16b\nand v2.16b, v0.16b, v1.16b\nshl v0.2d, v0.2d, #4\nushr v2.2d, v2.2d, #4\nand v0.16b, v0.16b, v1.16b\nmovi v1.16b, #204\norr v0.16b, v2.16b, v0.16b\nand v2.16b, v0.16b, v1.16b\nshl v0.2d, v0.2d, #2\nushr v2.2d, v2.2d, #2\nand v0.16b, v0.16b, v1.16b\nmovi v1.16b, #170\norr v0.16b, v2.16b, v0.16b\nand v2.16b, v0.16b, v1.16b\nshl v0.2d, v0.2d, #1\nushr v2.2d, v2.2d, #1\nand v0.16b, v0.16b, v1.16b\norr v0.16b, v2.16b, v0.16b\nret",
  "ll": "define <2 x i64> @test(<2 x i64> %a) {\n  %r = call <2 x i64> @llvm.bitreverse(<2 x i64> %a)\n  ret <2 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <2 x i64> @llvm.bitreverse.v2i64(<2 x i64> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i64> %r"
 },
 {
  "instr": "bitreverse",
  "ty": "<4 x i64>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 4,
  "gisize": 35,
  "extrasize": 0,
  "asm": "rev64 v0.16b, v0.16b\nrev64 v1.16b, v1.16b\nrbit v0.16b, v0.16b\nrbit v1.16b, v1.16b\nret",
  "giasm": "movi v2.16b, #240\nrev64 v0.16b, v0.16b\nrev64 v1.16b, v1.16b\nand v3.16b, v0.16b, v2.16b\nshl v0.2d, v0.2d, #4\nand v4.16b, v1.16b, v2.16b\nshl v1.2d, v1.2d, #4\nushr v3.2d, v3.2d, #4\nand v0.16b, v0.16b, v2.16b\nushr v4.2d, v4.2d, #4\nand v1.16b, v1.16b, v2.16b\nmovi v2.16b, #204\norr v0.16b, v3.16b, v0.16b\norr v1.16b, v4.16b, v1.16b\nand v3.16b, v0.16b, v2.16b\nshl v0.2d, v0.2d, #2\nand v4.16b, v1.16b, v2.16b\nshl v1.2d, v1.2d, #2\nushr v3.2d, v3.2d, #2\nand v0.16b, v0.16b, v2.16b\nushr v4.2d, v4.2d, #2\nand v1.16b, v1.16b, v2.16b\nmovi v2.16b, #170\norr v0.16b, v3.16b, v0.16b\norr v1.16b, v4.16b, v1.16b\nand v3.16b, v0.16b, v2.16b\nshl v0.2d, v0.2d, #1\nand v4.16b, v1.16b, v2.16b\nshl v1.2d, v1.2d, #1\nushr v3.2d, v3.2d, #1\nand v0.16b, v0.16b, v2.16b\nushr v4.2d, v4.2d, #1\nand v1.16b, v1.16b, v2.16b\norr v0.16b, v3.16b, v0.16b\norr v1.16b, v4.16b, v1.16b\nret",
  "ll": "define <4 x i64> @test(<4 x i64> %a) {\n  %r = call <4 x i64> @llvm.bitreverse(<4 x i64> %a)\n  ret <4 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x i64> @llvm.bitreverse.v4i64(<4 x i64> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i64> %r"
 },
 {
  "instr": "bswap",
  "ty": "i16",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 2,
  "extrasize": 0,
  "asm": "rev16 w0, w0\nret",
  "giasm": "rev w8, w0\nlsr w0, w8, #16\nret",
  "ll": "define i16 @test(i16 %a) {\n  %r = call i16 @llvm.bswap(i16 %a)\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call i16 @llvm.bswap.i16(i16 %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "bswap",
  "ty": "i32",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "rev w0, w0\nret",
  "giasm": "rev w0, w0\nret",
  "ll": "define i32 @test(i32 %a) {\n  %r = call i32 @llvm.bswap(i32 %a)\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call i32 @llvm.bswap.i32(i32 %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "bswap",
  "ty": "i64",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "rev x0, x0\nret",
  "giasm": "rev x0, x0\nret",
  "ll": "define i64 @test(i64 %a) {\n  %r = call i64 @llvm.bswap(i64 %a)\n  ret i64 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call i64 @llvm.bswap.i64(i64 %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i64 %r"
 },
 {
  "instr": "bswap",
  "ty": "<4 x i16>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "rev16 v0.8b, v0.8b\nret",
  "giasm": "rev16 v0.8b, v0.8b\nret",
  "ll": "define <4 x i16> @test(<4 x i16> %a) {\n  %r = call <4 x i16> @llvm.bswap(<4 x i16> %a)\n  ret <4 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x i16> @llvm.bswap.v4i16(<4 x i16> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i16> %r"
 },
 {
  "instr": "bswap",
  "ty": "<8 x i16>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "rev16 v0.16b, v0.16b\nret",
  "giasm": "rev16 v0.16b, v0.16b\nret",
  "ll": "define <8 x i16> @test(<8 x i16> %a) {\n  %r = call <8 x i16> @llvm.bswap(<8 x i16> %a)\n  ret <8 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <8 x i16> @llvm.bswap.v8i16(<8 x i16> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i16> %r"
 },
 {
  "instr": "bswap",
  "ty": "<16 x i16>",
  "variant": "unop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "rev16 v0.16b, v0.16b\nrev16 v1.16b, v1.16b\nret",
  "giasm": "rev16 v0.16b, v0.16b\nrev16 v1.16b, v1.16b\nret",
  "ll": "define <16 x i16> @test(<16 x i16> %a) {\n  %r = call <16 x i16> @llvm.bswap(<16 x i16> %a)\n  ret <16 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <16 x i16> @llvm.bswap.v16i16(<16 x i16> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i16> %r"
 },
 {
  "instr": "bswap",
  "ty": "<2 x i32>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "rev32 v0.8b, v0.8b\nret",
  "giasm": "rev32 v0.8b, v0.8b\nret",
  "ll": "define <2 x i32> @test(<2 x i32> %a) {\n  %r = call <2 x i32> @llvm.bswap(<2 x i32> %a)\n  ret <2 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x i32> @llvm.bswap.v2i32(<2 x i32> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i32> %r"
 },
 {
  "instr": "bswap",
  "ty": "<4 x i32>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "rev32 v0.16b, v0.16b\nret",
  "giasm": "rev32 v0.16b, v0.16b\nret",
  "ll": "define <4 x i32> @test(<4 x i32> %a) {\n  %r = call <4 x i32> @llvm.bswap(<4 x i32> %a)\n  ret <4 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x i32> @llvm.bswap.v4i32(<4 x i32> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i32> %r"
 },
 {
  "instr": "bswap",
  "ty": "<8 x i32>",
  "variant": "unop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "rev32 v0.16b, v0.16b\nrev32 v1.16b, v1.16b\nret",
  "giasm": "rev32 v0.16b, v0.16b\nrev32 v1.16b, v1.16b\nret",
  "ll": "define <8 x i32> @test(<8 x i32> %a) {\n  %r = call <8 x i32> @llvm.bswap(<8 x i32> %a)\n  ret <8 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <8 x i32> @llvm.bswap.v8i32(<8 x i32> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i32> %r"
 },
 {
  "instr": "bswap",
  "ty": "<2 x i64>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "rev64 v0.16b, v0.16b\nret",
  "giasm": "rev64 v0.16b, v0.16b\nret",
  "ll": "define <2 x i64> @test(<2 x i64> %a) {\n  %r = call <2 x i64> @llvm.bswap(<2 x i64> %a)\n  ret <2 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x i64> @llvm.bswap.v2i64(<2 x i64> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i64> %r"
 },
 {
  "instr": "bswap",
  "ty": "<4 x i64>",
  "variant": "unop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "rev64 v0.16b, v0.16b\nrev64 v1.16b, v1.16b\nret",
  "giasm": "rev64 v0.16b, v0.16b\nrev64 v1.16b, v1.16b\nret",
  "ll": "define <4 x i64> @test(<4 x i64> %a) {\n  %r = call <4 x i64> @llvm.bswap(<4 x i64> %a)\n  ret <4 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <4 x i64> @llvm.bswap.v4i64(<4 x i64> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i64> %r"
 },
 {
  "instr": "ctlz",
  "ty": "i8",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "and w8, w0, #0xff\nclz w8, w8\nsub w0, w8, #24\nret",
  "giasm": "and w8, w0, #0xff\nclz w8, w8\nsub w0, w8, #24\nret",
  "ll": "define i8 @test(i8 %a) {\n  %r = call i8 @llvm.ctlz(i8 %a, i1 0)\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call i8 @llvm.ctlz.i8(i8 %a, i1 false)\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "ctlz",
  "ty": "i16",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "and w8, w0, #0xffff\nclz w8, w8\nsub w0, w8, #16\nret",
  "giasm": "and w8, w0, #0xffff\nclz w8, w8\nsub w0, w8, #16\nret",
  "ll": "define i16 @test(i16 %a) {\n  %r = call i16 @llvm.ctlz(i16 %a, i1 0)\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call i16 @llvm.ctlz.i16(i16 %a, i1 false)\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "ctlz",
  "ty": "i32",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "clz w0, w0\nret",
  "giasm": "clz w0, w0\nret",
  "ll": "define i32 @test(i32 %a) {\n  %r = call i32 @llvm.ctlz(i32 %a, i1 0)\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call i32 @llvm.ctlz.i32(i32 %a, i1 false)\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "ctlz",
  "ty": "i64",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "clz x0, x0\nret",
  "giasm": "clz x0, x0\nret",
  "ll": "define i64 @test(i64 %a) {\n  %r = call i64 @llvm.ctlz(i64 %a, i1 0)\n  ret i64 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call i64 @llvm.ctlz.i64(i64 %a, i1 false)\nCost Model: Found an estimated cost of 1 for instruction:   ret i64 %r"
 },
 {
  "instr": "ctlz",
  "ty": "<8 x i8>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "clz v0.8b, v0.8b\nret",
  "giasm": "clz v0.8b, v0.8b\nret",
  "ll": "define <8 x i8> @test(<8 x i8> %a) {\n  %r = call <8 x i8> @llvm.ctlz(<8 x i8> %a, i1 0)\n  ret <8 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <8 x i8> @llvm.ctlz.v8i8(<8 x i8> %a, i1 false)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i8> %r"
 },
 {
  "instr": "ctlz",
  "ty": "<16 x i8>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "clz v0.16b, v0.16b\nret",
  "giasm": "clz v0.16b, v0.16b\nret",
  "ll": "define <16 x i8> @test(<16 x i8> %a) {\n  %r = call <16 x i8> @llvm.ctlz(<16 x i8> %a, i1 0)\n  ret <16 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <16 x i8> @llvm.ctlz.v16i8(<16 x i8> %a, i1 false)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i8> %r"
 },
 {
  "instr": "ctlz",
  "ty": "<32 x i8>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "clz v0.16b, v0.16b\nclz v1.16b, v1.16b\nret",
  "giasm": "clz v0.16b, v0.16b\nclz v1.16b, v1.16b\nret",
  "ll": "define <32 x i8> @test(<32 x i8> %a) {\n  %r = call <32 x i8> @llvm.ctlz(<32 x i8> %a, i1 0)\n  ret <32 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <32 x i8> @llvm.ctlz.v32i8(<32 x i8> %a, i1 false)\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i8> %r"
 },
 {
  "instr": "ctlz",
  "ty": "<4 x i16>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "clz v0.4h, v0.4h\nret",
  "giasm": "clz v0.4h, v0.4h\nret",
  "ll": "define <4 x i16> @test(<4 x i16> %a) {\n  %r = call <4 x i16> @llvm.ctlz(<4 x i16> %a, i1 0)\n  ret <4 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x i16> @llvm.ctlz.v4i16(<4 x i16> %a, i1 false)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i16> %r"
 },
 {
  "instr": "ctlz",
  "ty": "<8 x i16>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "clz v0.8h, v0.8h\nret",
  "giasm": "clz v0.8h, v0.8h\nret",
  "ll": "define <8 x i16> @test(<8 x i16> %a) {\n  %r = call <8 x i16> @llvm.ctlz(<8 x i16> %a, i1 0)\n  ret <8 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <8 x i16> @llvm.ctlz.v8i16(<8 x i16> %a, i1 false)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i16> %r"
 },
 {
  "instr": "ctlz",
  "ty": "<16 x i16>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "clz v0.8h, v0.8h\nclz v1.8h, v1.8h\nret",
  "giasm": "clz v0.8h, v0.8h\nclz v1.8h, v1.8h\nret",
  "ll": "define <16 x i16> @test(<16 x i16> %a) {\n  %r = call <16 x i16> @llvm.ctlz(<16 x i16> %a, i1 0)\n  ret <16 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <16 x i16> @llvm.ctlz.v16i16(<16 x i16> %a, i1 false)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i16> %r"
 },
 {
  "instr": "ctlz",
  "ty": "<2 x i32>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "clz v0.2s, v0.2s\nret",
  "giasm": "clz v0.2s, v0.2s\nret",
  "ll": "define <2 x i32> @test(<2 x i32> %a) {\n  %r = call <2 x i32> @llvm.ctlz(<2 x i32> %a, i1 0)\n  ret <2 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x i32> @llvm.ctlz.v2i32(<2 x i32> %a, i1 false)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i32> %r"
 },
 {
  "instr": "ctlz",
  "ty": "<4 x i32>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "clz v0.4s, v0.4s\nret",
  "giasm": "clz v0.4s, v0.4s\nret",
  "ll": "define <4 x i32> @test(<4 x i32> %a) {\n  %r = call <4 x i32> @llvm.ctlz(<4 x i32> %a, i1 0)\n  ret <4 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x i32> @llvm.ctlz.v4i32(<4 x i32> %a, i1 false)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i32> %r"
 },
 {
  "instr": "ctlz",
  "ty": "<8 x i32>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "clz v0.4s, v0.4s\nclz v1.4s, v1.4s\nret",
  "giasm": "clz v0.4s, v0.4s\nclz v1.4s, v1.4s\nret",
  "ll": "define <8 x i32> @test(<8 x i32> %a) {\n  %r = call <8 x i32> @llvm.ctlz(<8 x i32> %a, i1 0)\n  ret <8 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x i32> @llvm.ctlz.v8i32(<8 x i32> %a, i1 false)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i32> %r"
 },
 {
  "instr": "ctlz",
  "ty": "<2 x i64>",
  "variant": "unop",
  "codesize": 6,
  "thru": 10,
  "lat": 10,
  "sizelat": 10,
  "size": 17,
  "gisize": 6,
  "extrasize": 0,
  "asm": "ushr v1.2d, v0.2d, #1\norr v0.16b, v0.16b, v1.16b\nushr v1.2d, v0.2d, #2\norr v0.16b, v0.16b, v1.16b\nushr v1.2d, v0.2d, #4\norr v0.16b, v0.16b, v1.16b\nushr v1.2d, v0.2d, #8\norr v0.16b, v0.16b, v1.16b\nushr v1.2d, v0.2d, #16\norr v0.16b, v0.16b, v1.16b\nushr v1.2d, v0.2d, #32\norr v0.16b, v0.16b, v1.16b\nmvn v0.16b, v0.16b\ncnt v0.16b, v0.16b\nuaddlp v0.8h, v0.16b\nuaddlp v0.4s, v0.8h\nuaddlp v0.2d, v0.4s\nret",
  "giasm": "fmov x8, d0\nmov x9, v0.d[1]\nclz x8, x8\nmov v0.d[0], x8\nclz x8, x9\nmov v0.d[1], x8\nret",
  "ll": "define <2 x i64> @test(<2 x i64> %a) {\n  %r = call <2 x i64> @llvm.ctlz(<2 x i64> %a, i1 0)\n  ret <2 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 6 for instruction:   %r = call <2 x i64> @llvm.ctlz.v2i64(<2 x i64> %a, i1 false)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i64> %r"
 },
 {
  "instr": "ctlz",
  "ty": "<4 x i64>",
  "variant": "unop",
  "codesize": 12,
  "thru": 20,
  "lat": 20,
  "sizelat": 20,
  "size": 34,
  "gisize": 12,
  "extrasize": 0,
  "asm": "ushr v2.2d, v0.2d, #1\nushr v3.2d, v1.2d, #1\norr v0.16b, v0.16b, v2.16b\norr v1.16b, v1.16b, v3.16b\nushr v2.2d, v0.2d, #2\nushr v3.2d, v1.2d, #2\norr v0.16b, v0.16b, v2.16b\norr v1.16b, v1.16b, v3.16b\nushr v2.2d, v0.2d, #4\nushr v3.2d, v1.2d, #4\norr v0.16b, v0.16b, v2.16b\norr v1.16b, v1.16b, v3.16b\nushr v2.2d, v0.2d, #8\nushr v3.2d, v1.2d, #8\norr v0.16b, v0.16b, v2.16b\norr v1.16b, v1.16b, v3.16b\nushr v2.2d, v0.2d, #16\nushr v3.2d, v1.2d, #16\norr v0.16b, v0.16b, v2.16b\norr v1.16b, v1.16b, v3.16b\nushr v2.2d, v0.2d, #32\nushr v3.2d, v1.2d, #32\norr v0.16b, v0.16b, v2.16b\norr v1.16b, v1.16b, v3.16b\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\ncnt v0.16b, v0.16b\ncnt v1.16b, v1.16b\nuaddlp v0.8h, v0.16b\nuaddlp v1.8h, v1.16b\nuaddlp v0.4s, v0.8h\nuaddlp v1.4s, v1.8h\nuaddlp v0.2d, v0.4s\nuaddlp v1.2d, v1.4s\nret",
  "giasm": "fmov x9, d0\nfmov x10, d1\nmov x8, v0.d[1]\nmov x11, v1.d[1]\nclz x9, x9\nclz x10, x10\nmov v0.d[0], x9\nmov v1.d[0], x10\nclz x8, x8\nclz x9, x11\nmov v0.d[1], x8\nmov v1.d[1], x9\nret",
  "ll": "define <4 x i64> @test(<4 x i64> %a) {\n  %r = call <4 x i64> @llvm.ctlz(<4 x i64> %a, i1 0)\n  ret <4 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 12 for instruction:   %r = call <4 x i64> @llvm.ctlz.v4i64(<4 x i64> %a, i1 false)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i64> %r"
 },
 {
  "instr": "cttz",
  "ty": "i8",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "orr w8, w0, #0x100\nrbit w8, w8\nclz w0, w8\nret",
  "giasm": "orr w8, w0, #0x100\nrbit w8, w8\nclz w0, w8\nret",
  "ll": "define i8 @test(i8 %a) {\n  %r = call i8 @llvm.cttz(i8 %a, i1 0)\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call i8 @llvm.cttz.i8(i8 %a, i1 false)\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "cttz",
  "ty": "i16",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "orr w8, w0, #0x10000\nrbit w8, w8\nclz w0, w8\nret",
  "giasm": "orr w8, w0, #0x10000\nrbit w8, w8\nclz w0, w8\nret",
  "ll": "define i16 @test(i16 %a) {\n  %r = call i16 @llvm.cttz(i16 %a, i1 0)\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call i16 @llvm.cttz.i16(i16 %a, i1 false)\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "cttz",
  "ty": "i32",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "rbit w8, w0\nclz w0, w8\nret",
  "giasm": "rbit w8, w0\nclz w0, w8\nret",
  "ll": "define i32 @test(i32 %a) {\n  %r = call i32 @llvm.cttz(i32 %a, i1 0)\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call i32 @llvm.cttz.i32(i32 %a, i1 false)\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "cttz",
  "ty": "i64",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "rbit x8, x0\nclz x0, x8\nret",
  "giasm": "rbit x8, x0\nclz x0, x8\nret",
  "ll": "define i64 @test(i64 %a) {\n  %r = call i64 @llvm.cttz(i64 %a, i1 0)\n  ret i64 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call i64 @llvm.cttz.i64(i64 %a, i1 false)\nCost Model: Found an estimated cost of 1 for instruction:   ret i64 %r"
 },
 {
  "instr": "cttz",
  "ty": "<8 x i8>",
  "variant": "unop",
  "codesize": 24,
  "thru": 40,
  "lat": 40,
  "sizelat": 40,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "movi v1.8b, #1\nsub v1.8b, v0.8b, v1.8b\nbic v0.8b, v1.8b, v0.8b\ncnt v0.8b, v0.8b\nret",
  "giasm": "movi d1, #0xffffffffffffffff\nadd v1.8b, v0.8b, v1.8b\nbic v0.8b, v1.8b, v0.8b\ncnt v0.8b, v0.8b\nret",
  "ll": "define <8 x i8> @test(<8 x i8> %a) {\n  %r = call <8 x i8> @llvm.cttz(<8 x i8> %a, i1 0)\n  ret <8 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 24 for instruction:   %r = call <8 x i8> @llvm.cttz.v8i8(<8 x i8> %a, i1 false)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i8> %r"
 },
 {
  "instr": "cttz",
  "ty": "<16 x i8>",
  "variant": "unop",
  "codesize": 48,
  "thru": 80,
  "lat": 80,
  "sizelat": 80,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "movi v1.16b, #1\nsub v1.16b, v0.16b, v1.16b\nbic v0.16b, v1.16b, v0.16b\ncnt v0.16b, v0.16b\nret",
  "giasm": "movi v1.2d, #0xffffffffffffffff\nadd v1.16b, v0.16b, v1.16b\nbic v0.16b, v1.16b, v0.16b\ncnt v0.16b, v0.16b\nret",
  "ll": "define <16 x i8> @test(<16 x i8> %a) {\n  %r = call <16 x i8> @llvm.cttz(<16 x i8> %a, i1 0)\n  ret <16 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 48 for instruction:   %r = call <16 x i8> @llvm.cttz.v16i8(<16 x i8> %a, i1 false)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i8> %r"
 },
 {
  "instr": "cttz",
  "ty": "<32 x i8>",
  "variant": "unop",
  "codesize": 96,
  "thru": 160,
  "lat": 160,
  "sizelat": 160,
  "size": 7,
  "gisize": 7,
  "extrasize": 0,
  "asm": "movi v2.16b, #1\nsub v3.16b, v0.16b, v2.16b\nsub v2.16b, v1.16b, v2.16b\nbic v0.16b, v3.16b, v0.16b\nbic v1.16b, v2.16b, v1.16b\ncnt v0.16b, v0.16b\ncnt v1.16b, v1.16b\nret",
  "giasm": "movi v2.2d, #0xffffffffffffffff\nadd v3.16b, v0.16b, v2.16b\nadd v2.16b, v1.16b, v2.16b\nbic v0.16b, v3.16b, v0.16b\nbic v1.16b, v2.16b, v1.16b\ncnt v0.16b, v0.16b\ncnt v1.16b, v1.16b\nret",
  "ll": "define <32 x i8> @test(<32 x i8> %a) {\n  %r = call <32 x i8> @llvm.cttz(<32 x i8> %a, i1 0)\n  ret <32 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 96 for instruction:   %r = call <32 x i8> @llvm.cttz.v32i8(<32 x i8> %a, i1 false)\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i8> %r"
 },
 {
  "instr": "cttz",
  "ty": "<4 x i16>",
  "variant": "unop",
  "codesize": 12,
  "thru": 20,
  "lat": 20,
  "sizelat": 20,
  "size": 6,
  "gisize": 5,
  "extrasize": 0,
  "asm": "movi v1.4h, #1\nsub v1.4h, v0.4h, v1.4h\nbic v0.8b, v1.8b, v0.8b\nmovi v1.4h, #16\nclz v0.4h, v0.4h\nsub v0.4h, v1.4h, v0.4h\nret",
  "giasm": "movi d1, #0xffffffffffffffff\nadd v1.4h, v0.4h, v1.4h\nbic v0.8b, v1.8b, v0.8b\ncnt v0.8b, v0.8b\nuaddlp v0.4h, v0.8b\nret",
  "ll": "define <4 x i16> @test(<4 x i16> %a) {\n  %r = call <4 x i16> @llvm.cttz(<4 x i16> %a, i1 0)\n  ret <4 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 12 for instruction:   %r = call <4 x i16> @llvm.cttz.v4i16(<4 x i16> %a, i1 false)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i16> %r"
 },
 {
  "instr": "cttz",
  "ty": "<8 x i16>",
  "variant": "unop",
  "codesize": 24,
  "thru": 40,
  "lat": 40,
  "sizelat": 40,
  "size": 6,
  "gisize": 5,
  "extrasize": 0,
  "asm": "movi v1.8h, #1\nsub v1.8h, v0.8h, v1.8h\nbic v0.16b, v1.16b, v0.16b\nmovi v1.8h, #16\nclz v0.8h, v0.8h\nsub v0.8h, v1.8h, v0.8h\nret",
  "giasm": "movi v1.2d, #0xffffffffffffffff\nadd v1.8h, v0.8h, v1.8h\nbic v0.16b, v1.16b, v0.16b\ncnt v0.16b, v0.16b\nuaddlp v0.8h, v0.16b\nret",
  "ll": "define <8 x i16> @test(<8 x i16> %a) {\n  %r = call <8 x i16> @llvm.cttz(<8 x i16> %a, i1 0)\n  ret <8 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 24 for instruction:   %r = call <8 x i16> @llvm.cttz.v8i16(<8 x i16> %a, i1 false)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i16> %r"
 },
 {
  "instr": "cttz",
  "ty": "<16 x i16>",
  "variant": "unop",
  "codesize": 48,
  "thru": 80,
  "lat": 80,
  "sizelat": 80,
  "size": 10,
  "gisize": 9,
  "extrasize": 0,
  "asm": "movi v2.8h, #1\nsub v3.8h, v0.8h, v2.8h\nsub v2.8h, v1.8h, v2.8h\nbic v0.16b, v3.16b, v0.16b\nbic v1.16b, v2.16b, v1.16b\nmovi v2.8h, #16\nclz v0.8h, v0.8h\nclz v1.8h, v1.8h\nsub v0.8h, v2.8h, v0.8h\nsub v1.8h, v2.8h, v1.8h\nret",
  "giasm": "movi v2.2d, #0xffffffffffffffff\nadd v3.8h, v0.8h, v2.8h\nadd v2.8h, v1.8h, v2.8h\nbic v0.16b, v3.16b, v0.16b\nbic v1.16b, v2.16b, v1.16b\ncnt v0.16b, v0.16b\ncnt v1.16b, v1.16b\nuaddlp v0.8h, v0.16b\nuaddlp v1.8h, v1.16b\nret",
  "ll": "define <16 x i16> @test(<16 x i16> %a) {\n  %r = call <16 x i16> @llvm.cttz(<16 x i16> %a, i1 0)\n  ret <16 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 48 for instruction:   %r = call <16 x i16> @llvm.cttz.v16i16(<16 x i16> %a, i1 false)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i16> %r"
 },
 {
  "instr": "cttz",
  "ty": "<2 x i32>",
  "variant": "unop",
  "codesize": 6,
  "thru": 10,
  "lat": 10,
  "sizelat": 10,
  "size": 6,
  "gisize": 6,
  "extrasize": 0,
  "asm": "movi v1.2s, #1\nsub v1.2s, v0.2s, v1.2s\nbic v0.8b, v1.8b, v0.8b\nmovi v1.2s, #32\nclz v0.2s, v0.2s\nsub v0.2s, v1.2s, v0.2s\nret",
  "giasm": "movi d1, #0xffffffffffffffff\nadd v1.2s, v0.2s, v1.2s\nbic v0.8b, v1.8b, v0.8b\ncnt v0.8b, v0.8b\nuaddlp v0.4h, v0.8b\nuaddlp v0.2s, v0.4h\nret",
  "ll": "define <2 x i32> @test(<2 x i32> %a) {\n  %r = call <2 x i32> @llvm.cttz(<2 x i32> %a, i1 0)\n  ret <2 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 6 for instruction:   %r = call <2 x i32> @llvm.cttz.v2i32(<2 x i32> %a, i1 false)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i32> %r"
 },
 {
  "instr": "cttz",
  "ty": "<4 x i32>",
  "variant": "unop",
  "codesize": 12,
  "thru": 20,
  "lat": 20,
  "sizelat": 20,
  "size": 6,
  "gisize": 6,
  "extrasize": 0,
  "asm": "movi v1.4s, #1\nsub v1.4s, v0.4s, v1.4s\nbic v0.16b, v1.16b, v0.16b\nmovi v1.4s, #32\nclz v0.4s, v0.4s\nsub v0.4s, v1.4s, v0.4s\nret",
  "giasm": "movi v1.2d, #0xffffffffffffffff\nadd v1.4s, v0.4s, v1.4s\nbic v0.16b, v1.16b, v0.16b\ncnt v0.16b, v0.16b\nuaddlp v0.8h, v0.16b\nuaddlp v0.4s, v0.8h\nret",
  "ll": "define <4 x i32> @test(<4 x i32> %a) {\n  %r = call <4 x i32> @llvm.cttz(<4 x i32> %a, i1 0)\n  ret <4 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 12 for instruction:   %r = call <4 x i32> @llvm.cttz.v4i32(<4 x i32> %a, i1 false)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i32> %r"
 },
 {
  "instr": "cttz",
  "ty": "<8 x i32>",
  "variant": "unop",
  "codesize": 24,
  "thru": 40,
  "lat": 40,
  "sizelat": 40,
  "size": 10,
  "gisize": 11,
  "extrasize": 0,
  "asm": "movi v2.4s, #1\nsub v3.4s, v0.4s, v2.4s\nsub v2.4s, v1.4s, v2.4s\nbic v0.16b, v3.16b, v0.16b\nbic v1.16b, v2.16b, v1.16b\nmovi v2.4s, #32\nclz v0.4s, v0.4s\nclz v1.4s, v1.4s\nsub v0.4s, v2.4s, v0.4s\nsub v1.4s, v2.4s, v1.4s\nret",
  "giasm": "movi v2.2d, #0xffffffffffffffff\nadd v3.4s, v0.4s, v2.4s\nadd v2.4s, v1.4s, v2.4s\nbic v0.16b, v3.16b, v0.16b\nbic v1.16b, v2.16b, v1.16b\ncnt v0.16b, v0.16b\ncnt v1.16b, v1.16b\nuaddlp v0.8h, v0.16b\nuaddlp v1.8h, v1.16b\nuaddlp v0.4s, v0.8h\nuaddlp v1.4s, v1.8h\nret",
  "ll": "define <8 x i32> @test(<8 x i32> %a) {\n  %r = call <8 x i32> @llvm.cttz(<8 x i32> %a, i1 0)\n  ret <8 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 24 for instruction:   %r = call <8 x i32> @llvm.cttz.v8i32(<8 x i32> %a, i1 false)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i32> %r"
 },
 {
  "instr": "cttz",
  "ty": "<2 x i64>",
  "variant": "unop",
  "codesize": 6,
  "thru": 10,
  "lat": 10,
  "sizelat": 10,
  "size": 8,
  "gisize": 7,
  "extrasize": 0,
  "asm": "mov w8, #1                          // =0x1\ndup v1.2d, x8\nsub v1.2d, v0.2d, v1.2d\nbic v0.16b, v1.16b, v0.16b\ncnt v0.16b, v0.16b\nuaddlp v0.8h, v0.16b\nuaddlp v0.4s, v0.8h\nuaddlp v0.2d, v0.4s\nret",
  "giasm": "movi v1.2d, #0xffffffffffffffff\nadd v1.2d, v0.2d, v1.2d\nbic v0.16b, v1.16b, v0.16b\ncnt v0.16b, v0.16b\nuaddlp v0.8h, v0.16b\nuaddlp v0.4s, v0.8h\nuaddlp v0.2d, v0.4s\nret",
  "ll": "define <2 x i64> @test(<2 x i64> %a) {\n  %r = call <2 x i64> @llvm.cttz(<2 x i64> %a, i1 0)\n  ret <2 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 6 for instruction:   %r = call <2 x i64> @llvm.cttz.v2i64(<2 x i64> %a, i1 false)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i64> %r"
 },
 {
  "instr": "cttz",
  "ty": "<4 x i64>",
  "variant": "unop",
  "codesize": 12,
  "thru": 20,
  "lat": 20,
  "sizelat": 20,
  "size": 14,
  "gisize": 13,
  "extrasize": 0,
  "asm": "mov w8, #1                          // =0x1\ndup v2.2d, x8\nsub v3.2d, v0.2d, v2.2d\nsub v2.2d, v1.2d, v2.2d\nbic v0.16b, v3.16b, v0.16b\nbic v1.16b, v2.16b, v1.16b\ncnt v0.16b, v0.16b\ncnt v1.16b, v1.16b\nuaddlp v0.8h, v0.16b\nuaddlp v1.8h, v1.16b\nuaddlp v0.4s, v0.8h\nuaddlp v1.4s, v1.8h\nuaddlp v0.2d, v0.4s\nuaddlp v1.2d, v1.4s\nret",
  "giasm": "movi v2.2d, #0xffffffffffffffff\nadd v3.2d, v0.2d, v2.2d\nadd v2.2d, v1.2d, v2.2d\nbic v0.16b, v3.16b, v0.16b\nbic v1.16b, v2.16b, v1.16b\ncnt v0.16b, v0.16b\ncnt v1.16b, v1.16b\nuaddlp v0.8h, v0.16b\nuaddlp v1.8h, v1.16b\nuaddlp v0.4s, v0.8h\nuaddlp v1.4s, v1.8h\nuaddlp v0.2d, v0.4s\nuaddlp v1.2d, v1.4s\nret",
  "ll": "define <4 x i64> @test(<4 x i64> %a) {\n  %r = call <4 x i64> @llvm.cttz(<4 x i64> %a, i1 0)\n  ret <4 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 12 for instruction:   %r = call <4 x i64> @llvm.cttz.v4i64(<4 x i64> %a, i1 false)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i64> %r"
 },
 {
  "instr": "ctpop",
  "ty": "i8",
  "variant": "unop",
  "codesize": 5,
  "thru": 5,
  "lat": 5,
  "sizelat": 5,
  "size": 5,
  "gisize": 5,
  "extrasize": 0,
  "asm": "and w8, w0, #0xff\nfmov s0, w8\ncnt v0.8b, v0.8b\naddv b0, v0.8b\nfmov w0, s0\nret",
  "giasm": "and x8, x0, #0xff\nfmov d0, x8\ncnt v0.8b, v0.8b\nuaddlv h0, v0.8b\nfmov w0, s0\nret",
  "ll": "define i8 @test(i8 %a) {\n  %r = call i8 @llvm.ctpop(i8 %a)\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 5 for instruction:   %r = call i8 @llvm.ctpop.i8(i8 %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "ctpop",
  "ty": "i16",
  "variant": "unop",
  "codesize": 5,
  "thru": 5,
  "lat": 5,
  "sizelat": 5,
  "size": 5,
  "gisize": 5,
  "extrasize": 0,
  "asm": "and w8, w0, #0xffff\nfmov s0, w8\ncnt v0.8b, v0.8b\naddv b0, v0.8b\nfmov w0, s0\nret",
  "giasm": "and x8, x0, #0xffff\nfmov d0, x8\ncnt v0.8b, v0.8b\nuaddlv h0, v0.8b\nfmov w0, s0\nret",
  "ll": "define i16 @test(i16 %a) {\n  %r = call i16 @llvm.ctpop(i16 %a)\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 5 for instruction:   %r = call i16 @llvm.ctpop.i16(i16 %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "ctpop",
  "ty": "i32",
  "variant": "unop",
  "codesize": 5,
  "thru": 5,
  "lat": 5,
  "sizelat": 5,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fmov s0, w0\ncnt v0.8b, v0.8b\naddv b0, v0.8b\nfmov w0, s0\nret",
  "giasm": "fmov s0, w0\ncnt v0.8b, v0.8b\nuaddlv h0, v0.8b\nfmov w0, s0\nret",
  "ll": "define i32 @test(i32 %a) {\n  %r = call i32 @llvm.ctpop(i32 %a)\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 5 for instruction:   %r = call i32 @llvm.ctpop.i32(i32 %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "ctpop",
  "ty": "i64",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fmov d0, x0\ncnt v0.8b, v0.8b\naddv b0, v0.8b\nfmov x0, d0\nret",
  "giasm": "fmov d0, x0\ncnt v0.8b, v0.8b\nuaddlv h0, v0.8b\nmov w0, v0.s[0]\nret",
  "ll": "define i64 @test(i64 %a) {\n  %r = call i64 @llvm.ctpop(i64 %a)\n  ret i64 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call i64 @llvm.ctpop.i64(i64 %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i64 %r"
 },
 {
  "instr": "ctpop",
  "ty": "<8 x i8>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "cnt v0.8b, v0.8b\nret",
  "giasm": "cnt v0.8b, v0.8b\nret",
  "ll": "define <8 x i8> @test(<8 x i8> %a) {\n  %r = call <8 x i8> @llvm.ctpop(<8 x i8> %a)\n  ret <8 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <8 x i8> @llvm.ctpop.v8i8(<8 x i8> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i8> %r"
 },
 {
  "instr": "ctpop",
  "ty": "<16 x i8>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "cnt v0.16b, v0.16b\nret",
  "giasm": "cnt v0.16b, v0.16b\nret",
  "ll": "define <16 x i8> @test(<16 x i8> %a) {\n  %r = call <16 x i8> @llvm.ctpop(<16 x i8> %a)\n  ret <16 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <16 x i8> @llvm.ctpop.v16i8(<16 x i8> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i8> %r"
 },
 {
  "instr": "ctpop",
  "ty": "<32 x i8>",
  "variant": "unop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cnt v0.16b, v0.16b\ncnt v1.16b, v1.16b\nret",
  "giasm": "cnt v0.16b, v0.16b\ncnt v1.16b, v1.16b\nret",
  "ll": "define <32 x i8> @test(<32 x i8> %a) {\n  %r = call <32 x i8> @llvm.ctpop(<32 x i8> %a)\n  ret <32 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <32 x i8> @llvm.ctpop.v32i8(<32 x i8> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i8> %r"
 },
 {
  "instr": "ctpop",
  "ty": "<4 x i16>",
  "variant": "unop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cnt v0.8b, v0.8b\nuaddlp v0.4h, v0.8b\nret",
  "giasm": "cnt v0.8b, v0.8b\nuaddlp v0.4h, v0.8b\nret",
  "ll": "define <4 x i16> @test(<4 x i16> %a) {\n  %r = call <4 x i16> @llvm.ctpop(<4 x i16> %a)\n  ret <4 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <4 x i16> @llvm.ctpop.v4i16(<4 x i16> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i16> %r"
 },
 {
  "instr": "ctpop",
  "ty": "<8 x i16>",
  "variant": "unop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cnt v0.16b, v0.16b\nuaddlp v0.8h, v0.16b\nret",
  "giasm": "cnt v0.16b, v0.16b\nuaddlp v0.8h, v0.16b\nret",
  "ll": "define <8 x i16> @test(<8 x i16> %a) {\n  %r = call <8 x i16> @llvm.ctpop(<8 x i16> %a)\n  ret <8 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <8 x i16> @llvm.ctpop.v8i16(<8 x i16> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i16> %r"
 },
 {
  "instr": "ctpop",
  "ty": "<16 x i16>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cnt v0.16b, v0.16b\ncnt v1.16b, v1.16b\nuaddlp v0.8h, v0.16b\nuaddlp v1.8h, v1.16b\nret",
  "giasm": "cnt v0.16b, v0.16b\ncnt v1.16b, v1.16b\nuaddlp v0.8h, v0.16b\nuaddlp v1.8h, v1.16b\nret",
  "ll": "define <16 x i16> @test(<16 x i16> %a) {\n  %r = call <16 x i16> @llvm.ctpop(<16 x i16> %a)\n  ret <16 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <16 x i16> @llvm.ctpop.v16i16(<16 x i16> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i16> %r"
 },
 {
  "instr": "ctpop",
  "ty": "<2 x i32>",
  "variant": "unop",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "cnt v0.8b, v0.8b\nuaddlp v0.4h, v0.8b\nuaddlp v0.2s, v0.4h\nret",
  "giasm": "cnt v0.8b, v0.8b\nuaddlp v0.4h, v0.8b\nuaddlp v0.2s, v0.4h\nret",
  "ll": "define <2 x i32> @test(<2 x i32> %a) {\n  %r = call <2 x i32> @llvm.ctpop(<2 x i32> %a)\n  ret <2 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 3 for instruction:   %r = call <2 x i32> @llvm.ctpop.v2i32(<2 x i32> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i32> %r"
 },
 {
  "instr": "ctpop",
  "ty": "<4 x i32>",
  "variant": "unop",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "cnt v0.16b, v0.16b\nuaddlp v0.8h, v0.16b\nuaddlp v0.4s, v0.8h\nret",
  "giasm": "cnt v0.16b, v0.16b\nuaddlp v0.8h, v0.16b\nuaddlp v0.4s, v0.8h\nret",
  "ll": "define <4 x i32> @test(<4 x i32> %a) {\n  %r = call <4 x i32> @llvm.ctpop(<4 x i32> %a)\n  ret <4 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 3 for instruction:   %r = call <4 x i32> @llvm.ctpop.v4i32(<4 x i32> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i32> %r"
 },
 {
  "instr": "ctpop",
  "ty": "<8 x i32>",
  "variant": "unop",
  "codesize": 6,
  "thru": 6,
  "lat": 6,
  "sizelat": 6,
  "size": 6,
  "gisize": 6,
  "extrasize": 0,
  "asm": "cnt v0.16b, v0.16b\ncnt v1.16b, v1.16b\nuaddlp v0.8h, v0.16b\nuaddlp v1.8h, v1.16b\nuaddlp v0.4s, v0.8h\nuaddlp v1.4s, v1.8h\nret",
  "giasm": "cnt v0.16b, v0.16b\ncnt v1.16b, v1.16b\nuaddlp v0.8h, v0.16b\nuaddlp v1.8h, v1.16b\nuaddlp v0.4s, v0.8h\nuaddlp v1.4s, v1.8h\nret",
  "ll": "define <8 x i32> @test(<8 x i32> %a) {\n  %r = call <8 x i32> @llvm.ctpop(<8 x i32> %a)\n  ret <8 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 6 for instruction:   %r = call <8 x i32> @llvm.ctpop.v8i32(<8 x i32> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i32> %r"
 },
 {
  "instr": "ctpop",
  "ty": "<2 x i64>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cnt v0.16b, v0.16b\nuaddlp v0.8h, v0.16b\nuaddlp v0.4s, v0.8h\nuaddlp v0.2d, v0.4s\nret",
  "giasm": "cnt v0.16b, v0.16b\nuaddlp v0.8h, v0.16b\nuaddlp v0.4s, v0.8h\nuaddlp v0.2d, v0.4s\nret",
  "ll": "define <2 x i64> @test(<2 x i64> %a) {\n  %r = call <2 x i64> @llvm.ctpop(<2 x i64> %a)\n  ret <2 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <2 x i64> @llvm.ctpop.v2i64(<2 x i64> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i64> %r"
 },
 {
  "instr": "ctpop",
  "ty": "<4 x i64>",
  "variant": "unop",
  "codesize": 8,
  "thru": 8,
  "lat": 8,
  "sizelat": 8,
  "size": 8,
  "gisize": 8,
  "extrasize": 0,
  "asm": "cnt v0.16b, v0.16b\ncnt v1.16b, v1.16b\nuaddlp v0.8h, v0.16b\nuaddlp v1.8h, v1.16b\nuaddlp v0.4s, v0.8h\nuaddlp v1.4s, v1.8h\nuaddlp v0.2d, v0.4s\nuaddlp v1.2d, v1.4s\nret",
  "giasm": "cnt v0.16b, v0.16b\ncnt v1.16b, v1.16b\nuaddlp v0.8h, v0.16b\nuaddlp v1.8h, v1.16b\nuaddlp v0.4s, v0.8h\nuaddlp v1.4s, v1.8h\nuaddlp v0.2d, v0.4s\nuaddlp v1.2d, v1.4s\nret",
  "ll": "define <4 x i64> @test(<4 x i64> %a) {\n  %r = call <4 x i64> @llvm.ctpop(<4 x i64> %a)\n  ret <4 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 8 for instruction:   %r = call <4 x i64> @llvm.ctpop.v4i64(<4 x i64> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i64> %r"
 },
 {
  "instr": "xor",
  "ty": "i8",
  "variant": "mvn",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "mvn w0, w0\nret",
  "giasm": "mvn w0, w0\nret",
  "ll": "define i8 @test(i8 %a) {\n  %r = xor i8 %a, -1\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = xor i8 %a, -1\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "xor",
  "ty": "i16",
  "variant": "mvn",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "mvn w0, w0\nret",
  "giasm": "mvn w0, w0\nret",
  "ll": "define i16 @test(i16 %a) {\n  %r = xor i16 %a, -1\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = xor i16 %a, -1\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "xor",
  "ty": "i32",
  "variant": "mvn",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "mvn w0, w0\nret",
  "giasm": "mvn w0, w0\nret",
  "ll": "define i32 @test(i32 %a) {\n  %r = xor i32 %a, -1\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = xor i32 %a, -1\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "xor",
  "ty": "i64",
  "variant": "mvn",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "mvn x0, x0\nret",
  "giasm": "mvn x0, x0\nret",
  "ll": "define i64 @test(i64 %a) {\n  %r = xor i64 %a, -1\n  ret i64 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = xor i64 %a, -1\nCost Model: Found an estimated cost of 1 for instruction:   ret i64 %r"
 },
 {
  "instr": "xor",
  "ty": "<8 x i8>",
  "variant": "mvn",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "mvn v0.8b, v0.8b\nret",
  "giasm": "mvn v0.8b, v0.8b\nret",
  "ll": "define <8 x i8> @test(<8 x i8> %a) {\n  %r = xor <8 x i8> %a, splat (i8 -1)\n  ret <8 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = xor <8 x i8> %a, splat (i8 -1)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i8> %r"
 },
 {
  "instr": "xor",
  "ty": "<16 x i8>",
  "variant": "mvn",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "mvn v0.16b, v0.16b\nret",
  "giasm": "mvn v0.16b, v0.16b\nret",
  "ll": "define <16 x i8> @test(<16 x i8> %a) {\n  %r = xor <16 x i8> %a, splat (i8 -1)\n  ret <16 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = xor <16 x i8> %a, splat (i8 -1)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i8> %r"
 },
 {
  "instr": "xor",
  "ty": "<32 x i8>",
  "variant": "mvn",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "mvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nret",
  "giasm": "mvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nret",
  "ll": "define <32 x i8> @test(<32 x i8> %a) {\n  %r = xor <32 x i8> %a, splat (i8 -1)\n  ret <32 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = xor <32 x i8> %a, splat (i8 -1)\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i8> %r"
 },
 {
  "instr": "xor",
  "ty": "<4 x i16>",
  "variant": "mvn",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "mvn v0.8b, v0.8b\nret",
  "giasm": "mvn v0.8b, v0.8b\nret",
  "ll": "define <4 x i16> @test(<4 x i16> %a) {\n  %r = xor <4 x i16> %a, splat (i16 -1)\n  ret <4 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = xor <4 x i16> %a, splat (i16 -1)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i16> %r"
 },
 {
  "instr": "xor",
  "ty": "<8 x i16>",
  "variant": "mvn",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "mvn v0.16b, v0.16b\nret",
  "giasm": "mvn v0.16b, v0.16b\nret",
  "ll": "define <8 x i16> @test(<8 x i16> %a) {\n  %r = xor <8 x i16> %a, splat (i16 -1)\n  ret <8 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = xor <8 x i16> %a, splat (i16 -1)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i16> %r"
 },
 {
  "instr": "xor",
  "ty": "<16 x i16>",
  "variant": "mvn",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "mvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nret",
  "giasm": "mvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nret",
  "ll": "define <16 x i16> @test(<16 x i16> %a) {\n  %r = xor <16 x i16> %a, splat (i16 -1)\n  ret <16 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = xor <16 x i16> %a, splat (i16 -1)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i16> %r"
 },
 {
  "instr": "xor",
  "ty": "<2 x i32>",
  "variant": "mvn",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "mvn v0.8b, v0.8b\nret",
  "giasm": "mvn v0.8b, v0.8b\nret",
  "ll": "define <2 x i32> @test(<2 x i32> %a) {\n  %r = xor <2 x i32> %a, splat (i32 -1)\n  ret <2 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = xor <2 x i32> %a, splat (i32 -1)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i32> %r"
 },
 {
  "instr": "xor",
  "ty": "<4 x i32>",
  "variant": "mvn",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "mvn v0.16b, v0.16b\nret",
  "giasm": "mvn v0.16b, v0.16b\nret",
  "ll": "define <4 x i32> @test(<4 x i32> %a) {\n  %r = xor <4 x i32> %a, splat (i32 -1)\n  ret <4 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = xor <4 x i32> %a, splat (i32 -1)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i32> %r"
 },
 {
  "instr": "xor",
  "ty": "<8 x i32>",
  "variant": "mvn",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "mvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nret",
  "giasm": "mvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nret",
  "ll": "define <8 x i32> @test(<8 x i32> %a) {\n  %r = xor <8 x i32> %a, splat (i32 -1)\n  ret <8 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = xor <8 x i32> %a, splat (i32 -1)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i32> %r"
 },
 {
  "instr": "xor",
  "ty": "<2 x i64>",
  "variant": "mvn",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "mvn v0.16b, v0.16b\nret",
  "giasm": "mvn v0.16b, v0.16b\nret",
  "ll": "define <2 x i64> @test(<2 x i64> %a) {\n  %r = xor <2 x i64> %a, splat (i64 -1)\n  ret <2 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = xor <2 x i64> %a, splat (i64 -1)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i64> %r"
 },
 {
  "instr": "xor",
  "ty": "<4 x i64>",
  "variant": "mvn",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "mvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nret",
  "giasm": "mvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nret",
  "ll": "define <4 x i64> @test(<4 x i64> %a) {\n  %r = xor <4 x i64> %a, splat (i64 -1)\n  ret <4 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = xor <4 x i64> %a, splat (i64 -1)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i64> %r"
 },
 {
  "instr": "fshl",
  "ty": "i8",
  "variant": "triop",
  "codesize": 7,
  "thru": 7,
  "lat": 7,
  "sizelat": 7,
  "size": 6,
  "gisize": 7,
  "extrasize": 0,
  "asm": "and w8, w2, #0x7\nubfiz w9, w1, #23, #8\nmvn w10, w8\nlsl w8, w0, w8\nlsr w9, w9, w10\norr w0, w8, w9\nret",
  "giasm": "mov w8, #7                          // =0x7\nubfx w9, w1, #1, #7\nand w10, w2, #0x7\nbic w8, w8, w2\nlsl w10, w0, w10\nlsr w8, w9, w8\norr w0, w10, w8\nret",
  "ll": "define i8 @test(i8 %a, i8 %b, i8 %c) {\n  %r = call i8 @llvm.fshl(i8 %a, i8 %b, i8 %c)\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 7 for instruction:   %r = call i8 @llvm.fshl.i8(i8 %a, i8 %b, i8 %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "fshl",
  "ty": "i8",
  "variant": "triopconstsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "lsl w8, w1, #24\nextr w0, w0, w8, #25\nret",
  "giasm": "ubfx w8, w1, #1, #7\norr w0, w8, w0, lsl #7\nret",
  "ll": "define i8 @test(i8 %a, i8 %b) {\n  %r = call i8 @llvm.fshl(i8 %a, i8 %b, i8 7)\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call i8 @llvm.fshl.i8(i8 %a, i8 %b, i8 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "fshl",
  "ty": "i16",
  "variant": "triop",
  "codesize": 7,
  "thru": 7,
  "lat": 7,
  "sizelat": 7,
  "size": 6,
  "gisize": 7,
  "extrasize": 0,
  "asm": "and w8, w2, #0xf\nubfiz w9, w1, #15, #16\nmvn w10, w8\nlsl w8, w0, w8\nlsr w9, w9, w10\norr w0, w8, w9\nret",
  "giasm": "mov w8, #15                         // =0xf\nubfx w9, w1, #1, #15\nand w10, w2, #0xf\nbic w8, w8, w2\nlsl w10, w0, w10\nlsr w8, w9, w8\norr w0, w10, w8\nret",
  "ll": "define i16 @test(i16 %a, i16 %b, i16 %c) {\n  %r = call i16 @llvm.fshl(i16 %a, i16 %b, i16 %c)\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 7 for instruction:   %r = call i16 @llvm.fshl.i16(i16 %a, i16 %b, i16 %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "fshl",
  "ty": "i16",
  "variant": "triopconstsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "lsl w8, w1, #16\nextr w0, w0, w8, #25\nret",
  "giasm": "ubfx w8, w1, #9, #7\norr w0, w8, w0, lsl #7\nret",
  "ll": "define i16 @test(i16 %a, i16 %b) {\n  %r = call i16 @llvm.fshl(i16 %a, i16 %b, i16 7)\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call i16 @llvm.fshl.i16(i16 %a, i16 %b, i16 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "fshl",
  "ty": "i32",
  "variant": "triop",
  "codesize": 7,
  "thru": 7,
  "lat": 7,
  "sizelat": 7,
  "size": 5,
  "gisize": 7,
  "extrasize": 0,
  "asm": "lsr w8, w1, #1\nmvn w9, w2\nlsl w10, w0, w2\nlsr w8, w8, w9\norr w0, w10, w8\nret",
  "giasm": "mov w8, #31                         // =0x1f\nlsr w9, w1, #1\nand w10, w2, #0x1f\nbic w8, w8, w2\nlsl w10, w0, w10\nlsr w8, w9, w8\norr w0, w10, w8\nret",
  "ll": "define i32 @test(i32 %a, i32 %b, i32 %c) {\n  %r = call i32 @llvm.fshl(i32 %a, i32 %b, i32 %c)\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 7 for instruction:   %r = call i32 @llvm.fshl.i32(i32 %a, i32 %b, i32 %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "fshl",
  "ty": "i32",
  "variant": "triopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "extr w0, w0, w1, #25\nret",
  "giasm": "extr w0, w0, w1, #25\nret",
  "ll": "define i32 @test(i32 %a, i32 %b) {\n  %r = call i32 @llvm.fshl(i32 %a, i32 %b, i32 7)\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call i32 @llvm.fshl.i32(i32 %a, i32 %b, i32 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "fshl",
  "ty": "i64",
  "variant": "triop",
  "codesize": 7,
  "thru": 7,
  "lat": 7,
  "sizelat": 7,
  "size": 5,
  "gisize": 7,
  "extrasize": 0,
  "asm": "lsr x8, x1, #1\nmvn w9, w2\nlsl x10, x0, x2\nlsr x8, x8, x9\norr x0, x10, x8\nret",
  "giasm": "mov w8, #63                         // =0x3f\nlsr x9, x1, #1\nand x10, x2, #0x3f\nbic x8, x8, x2\nlsl x10, x0, x10\nlsr x8, x9, x8\norr x0, x10, x8\nret",
  "ll": "define i64 @test(i64 %a, i64 %b, i64 %c) {\n  %r = call i64 @llvm.fshl(i64 %a, i64 %b, i64 %c)\n  ret i64 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 7 for instruction:   %r = call i64 @llvm.fshl.i64(i64 %a, i64 %b, i64 %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret i64 %r"
 },
 {
  "instr": "fshl",
  "ty": "i64",
  "variant": "triopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "extr x0, x0, x1, #57\nret",
  "giasm": "extr x0, x0, x1, #57\nret",
  "ll": "define i64 @test(i64 %a, i64 %b) {\n  %r = call i64 @llvm.fshl(i64 %a, i64 %b, i64 7)\n  ret i64 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call i64 @llvm.fshl.i64(i64 %a, i64 %b, i64 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret i64 %r"
 },
 {
  "instr": "fshl",
  "ty": "<8 x i8>",
  "variant": "triop",
  "codesize": 7,
  "thru": 7,
  "lat": 7,
  "sizelat": 7,
  "size": 8,
  "gisize": 8,
  "extrasize": 0,
  "asm": "movi v3.8b, #7\nushr v1.8b, v1.8b, #1\nbic v4.8b, v3.8b, v2.8b\nand v2.8b, v2.8b, v3.8b\nneg v3.8b, v4.8b\nushl v0.8b, v0.8b, v2.8b\nushl v1.8b, v1.8b, v3.8b\norr v0.8b, v0.8b, v1.8b\nret",
  "giasm": "movi v3.8b, #7\nushr v1.8b, v1.8b, #1\nbic v4.8b, v3.8b, v2.8b\nand v2.8b, v2.8b, v3.8b\nneg v3.8b, v4.8b\nushl v0.8b, v0.8b, v2.8b\nushl v1.8b, v1.8b, v3.8b\norr v0.8b, v0.8b, v1.8b\nret",
  "ll": "define <8 x i8> @test(<8 x i8> %a, <8 x i8> %b, <8 x i8> %c) {\n  %r = call <8 x i8> @llvm.fshl(<8 x i8> %a, <8 x i8> %b, <8 x i8> %c)\n  ret <8 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 7 for instruction:   %r = call <8 x i8> @llvm.fshl.v8i8(<8 x i8> %a, <8 x i8> %b, <8 x i8> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i8> %r"
 },
 {
  "instr": "fshl",
  "ty": "<8 x i8>",
  "variant": "triopconstsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "shl v0.8b, v0.8b, #7\nusra v0.8b, v1.8b, #1\nret",
  "giasm": "shl v0.8b, v0.8b, #7\nusra v0.8b, v1.8b, #1\nret",
  "ll": "define <8 x i8> @test(<8 x i8> %a, <8 x i8> %b) {\n  %r = call <8 x i8> @llvm.fshl(<8 x i8> %a, <8 x i8> %b, <8 x i8> splat (i8 7))\n  ret <8 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <8 x i8> @llvm.fshl.v8i8(<8 x i8> %a, <8 x i8> %b, <8 x i8> splat (i8 7))\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i8> %r"
 },
 {
  "instr": "fshl",
  "ty": "<16 x i8>",
  "variant": "triop",
  "codesize": 7,
  "thru": 7,
  "lat": 7,
  "sizelat": 7,
  "size": 8,
  "gisize": 8,
  "extrasize": 0,
  "asm": "movi v3.16b, #7\nushr v1.16b, v1.16b, #1\nbic v4.16b, v3.16b, v2.16b\nand v2.16b, v2.16b, v3.16b\nneg v3.16b, v4.16b\nushl v0.16b, v0.16b, v2.16b\nushl v1.16b, v1.16b, v3.16b\norr v0.16b, v0.16b, v1.16b\nret",
  "giasm": "movi v3.16b, #7\nushr v1.16b, v1.16b, #1\nbic v4.16b, v3.16b, v2.16b\nand v2.16b, v2.16b, v3.16b\nneg v3.16b, v4.16b\nushl v0.16b, v0.16b, v2.16b\nushl v1.16b, v1.16b, v3.16b\norr v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <16 x i8> @test(<16 x i8> %a, <16 x i8> %b, <16 x i8> %c) {\n  %r = call <16 x i8> @llvm.fshl(<16 x i8> %a, <16 x i8> %b, <16 x i8> %c)\n  ret <16 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 7 for instruction:   %r = call <16 x i8> @llvm.fshl.v16i8(<16 x i8> %a, <16 x i8> %b, <16 x i8> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i8> %r"
 },
 {
  "instr": "fshl",
  "ty": "<16 x i8>",
  "variant": "triopconstsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "shl v0.16b, v0.16b, #7\nusra v0.16b, v1.16b, #1\nret",
  "giasm": "shl v0.16b, v0.16b, #7\nusra v0.16b, v1.16b, #1\nret",
  "ll": "define <16 x i8> @test(<16 x i8> %a, <16 x i8> %b) {\n  %r = call <16 x i8> @llvm.fshl(<16 x i8> %a, <16 x i8> %b, <16 x i8> splat (i8 7))\n  ret <16 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <16 x i8> @llvm.fshl.v16i8(<16 x i8> %a, <16 x i8> %b, <16 x i8> splat (i8 7))\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i8> %r"
 },
 {
  "instr": "fshl",
  "ty": "<32 x i8>",
  "variant": "triop",
  "codesize": 7,
  "thru": 14,
  "lat": 7,
  "sizelat": 7,
  "size": 15,
  "gisize": 15,
  "extrasize": 0,
  "asm": "movi v6.16b, #7\nushr v2.16b, v2.16b, #1\nushr v3.16b, v3.16b, #1\nbic v7.16b, v6.16b, v4.16b\nbic v16.16b, v6.16b, v5.16b\nand v4.16b, v4.16b, v6.16b\nand v5.16b, v5.16b, v6.16b\nneg v6.16b, v7.16b\nneg v7.16b, v16.16b\nushl v0.16b, v0.16b, v4.16b\nushl v1.16b, v1.16b, v5.16b\nushl v2.16b, v2.16b, v6.16b\nushl v3.16b, v3.16b, v7.16b\norr v0.16b, v0.16b, v2.16b\norr v1.16b, v1.16b, v3.16b\nret",
  "giasm": "movi v6.16b, #7\nushr v2.16b, v2.16b, #1\nushr v3.16b, v3.16b, #1\nbic v7.16b, v6.16b, v4.16b\nbic v16.16b, v6.16b, v5.16b\nand v4.16b, v4.16b, v6.16b\nand v5.16b, v5.16b, v6.16b\nneg v6.16b, v7.16b\nneg v7.16b, v16.16b\nushl v0.16b, v0.16b, v4.16b\nushl v1.16b, v1.16b, v5.16b\nushl v2.16b, v2.16b, v6.16b\nushl v3.16b, v3.16b, v7.16b\norr v0.16b, v0.16b, v2.16b\norr v1.16b, v1.16b, v3.16b\nret",
  "ll": "define <32 x i8> @test(<32 x i8> %a, <32 x i8> %b, <32 x i8> %c) {\n  %r = call <32 x i8> @llvm.fshl(<32 x i8> %a, <32 x i8> %b, <32 x i8> %c)\n  ret <32 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 7 for instruction:   %r = call <32 x i8> @llvm.fshl.v32i8(<32 x i8> %a, <32 x i8> %b, <32 x i8> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i8> %r"
 },
 {
  "instr": "fshl",
  "ty": "<32 x i8>",
  "variant": "triopconstsplat",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "shl v1.16b, v1.16b, #7\nshl v0.16b, v0.16b, #7\nusra v1.16b, v3.16b, #1\nusra v0.16b, v2.16b, #1\nret",
  "giasm": "shl v0.16b, v0.16b, #7\nshl v1.16b, v1.16b, #7\nusra v0.16b, v2.16b, #1\nusra v1.16b, v3.16b, #1\nret",
  "ll": "define <32 x i8> @test(<32 x i8> %a, <32 x i8> %b) {\n  %r = call <32 x i8> @llvm.fshl(<32 x i8> %a, <32 x i8> %b, <32 x i8> splat (i8 7))\n  ret <32 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <32 x i8> @llvm.fshl.v32i8(<32 x i8> %a, <32 x i8> %b, <32 x i8> splat (i8 7))\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i8> %r"
 },
 {
  "instr": "fshl",
  "ty": "<4 x i16>",
  "variant": "triop",
  "codesize": 7,
  "thru": 7,
  "lat": 7,
  "sizelat": 7,
  "size": 8,
  "gisize": 8,
  "extrasize": 0,
  "asm": "movi v3.4h, #15\nushr v1.4h, v1.4h, #1\nbic v4.8b, v3.8b, v2.8b\nand v2.8b, v2.8b, v3.8b\nneg v3.4h, v4.4h\nushl v0.4h, v0.4h, v2.4h\nushl v1.4h, v1.4h, v3.4h\norr v0.8b, v0.8b, v1.8b\nret",
  "giasm": "movi v3.4h, #15\nushr v1.4h, v1.4h, #1\nbic v4.8b, v3.8b, v2.8b\nand v2.8b, v2.8b, v3.8b\nneg v3.4h, v4.4h\nushl v0.4h, v0.4h, v2.4h\nushl v1.4h, v1.4h, v3.4h\norr v0.8b, v0.8b, v1.8b\nret",
  "ll": "define <4 x i16> @test(<4 x i16> %a, <4 x i16> %b, <4 x i16> %c) {\n  %r = call <4 x i16> @llvm.fshl(<4 x i16> %a, <4 x i16> %b, <4 x i16> %c)\n  ret <4 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 7 for instruction:   %r = call <4 x i16> @llvm.fshl.v4i16(<4 x i16> %a, <4 x i16> %b, <4 x i16> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i16> %r"
 },
 {
  "instr": "fshl",
  "ty": "<4 x i16>",
  "variant": "triopconstsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "shl v0.4h, v0.4h, #7\nusra v0.4h, v1.4h, #9\nret",
  "giasm": "shl v0.4h, v0.4h, #7\nusra v0.4h, v1.4h, #9\nret",
  "ll": "define <4 x i16> @test(<4 x i16> %a, <4 x i16> %b) {\n  %r = call <4 x i16> @llvm.fshl(<4 x i16> %a, <4 x i16> %b, <4 x i16> splat (i16 7))\n  ret <4 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <4 x i16> @llvm.fshl.v4i16(<4 x i16> %a, <4 x i16> %b, <4 x i16> splat (i16 7))\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i16> %r"
 },
 {
  "instr": "fshl",
  "ty": "<8 x i16>",
  "variant": "triop",
  "codesize": 7,
  "thru": 7,
  "lat": 7,
  "sizelat": 7,
  "size": 8,
  "gisize": 8,
  "extrasize": 0,
  "asm": "movi v3.8h, #15\nushr v1.8h, v1.8h, #1\nbic v4.16b, v3.16b, v2.16b\nand v2.16b, v2.16b, v3.16b\nneg v3.8h, v4.8h\nushl v0.8h, v0.8h, v2.8h\nushl v1.8h, v1.8h, v3.8h\norr v0.16b, v0.16b, v1.16b\nret",
  "giasm": "movi v3.8h, #15\nushr v1.8h, v1.8h, #1\nbic v4.16b, v3.16b, v2.16b\nand v2.16b, v2.16b, v3.16b\nneg v3.8h, v4.8h\nushl v0.8h, v0.8h, v2.8h\nushl v1.8h, v1.8h, v3.8h\norr v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <8 x i16> @test(<8 x i16> %a, <8 x i16> %b, <8 x i16> %c) {\n  %r = call <8 x i16> @llvm.fshl(<8 x i16> %a, <8 x i16> %b, <8 x i16> %c)\n  ret <8 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 7 for instruction:   %r = call <8 x i16> @llvm.fshl.v8i16(<8 x i16> %a, <8 x i16> %b, <8 x i16> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i16> %r"
 },
 {
  "instr": "fshl",
  "ty": "<8 x i16>",
  "variant": "triopconstsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "shl v0.8h, v0.8h, #7\nusra v0.8h, v1.8h, #9\nret",
  "giasm": "shl v0.8h, v0.8h, #7\nusra v0.8h, v1.8h, #9\nret",
  "ll": "define <8 x i16> @test(<8 x i16> %a, <8 x i16> %b) {\n  %r = call <8 x i16> @llvm.fshl(<8 x i16> %a, <8 x i16> %b, <8 x i16> splat (i16 7))\n  ret <8 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <8 x i16> @llvm.fshl.v8i16(<8 x i16> %a, <8 x i16> %b, <8 x i16> splat (i16 7))\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i16> %r"
 },
 {
  "instr": "fshl",
  "ty": "<16 x i16>",
  "variant": "triop",
  "codesize": 7,
  "thru": 14,
  "lat": 7,
  "sizelat": 7,
  "size": 15,
  "gisize": 15,
  "extrasize": 0,
  "asm": "movi v6.8h, #15\nushr v2.8h, v2.8h, #1\nushr v3.8h, v3.8h, #1\nbic v7.16b, v6.16b, v4.16b\nbic v16.16b, v6.16b, v5.16b\nand v4.16b, v4.16b, v6.16b\nand v5.16b, v5.16b, v6.16b\nneg v6.8h, v7.8h\nneg v7.8h, v16.8h\nushl v0.8h, v0.8h, v4.8h\nushl v1.8h, v1.8h, v5.8h\nushl v2.8h, v2.8h, v6.8h\nushl v3.8h, v3.8h, v7.8h\norr v0.16b, v0.16b, v2.16b\norr v1.16b, v1.16b, v3.16b\nret",
  "giasm": "movi v6.8h, #15\nushr v2.8h, v2.8h, #1\nushr v3.8h, v3.8h, #1\nbic v7.16b, v6.16b, v4.16b\nbic v16.16b, v6.16b, v5.16b\nand v4.16b, v4.16b, v6.16b\nand v5.16b, v5.16b, v6.16b\nneg v6.8h, v7.8h\nneg v7.8h, v16.8h\nushl v0.8h, v0.8h, v4.8h\nushl v1.8h, v1.8h, v5.8h\nushl v2.8h, v2.8h, v6.8h\nushl v3.8h, v3.8h, v7.8h\norr v0.16b, v0.16b, v2.16b\norr v1.16b, v1.16b, v3.16b\nret",
  "ll": "define <16 x i16> @test(<16 x i16> %a, <16 x i16> %b, <16 x i16> %c) {\n  %r = call <16 x i16> @llvm.fshl(<16 x i16> %a, <16 x i16> %b, <16 x i16> %c)\n  ret <16 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 7 for instruction:   %r = call <16 x i16> @llvm.fshl.v16i16(<16 x i16> %a, <16 x i16> %b, <16 x i16> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i16> %r"
 },
 {
  "instr": "fshl",
  "ty": "<16 x i16>",
  "variant": "triopconstsplat",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "shl v1.8h, v1.8h, #7\nshl v0.8h, v0.8h, #7\nusra v1.8h, v3.8h, #9\nusra v0.8h, v2.8h, #9\nret",
  "giasm": "shl v0.8h, v0.8h, #7\nshl v1.8h, v1.8h, #7\nusra v0.8h, v2.8h, #9\nusra v1.8h, v3.8h, #9\nret",
  "ll": "define <16 x i16> @test(<16 x i16> %a, <16 x i16> %b) {\n  %r = call <16 x i16> @llvm.fshl(<16 x i16> %a, <16 x i16> %b, <16 x i16> splat (i16 7))\n  ret <16 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <16 x i16> @llvm.fshl.v16i16(<16 x i16> %a, <16 x i16> %b, <16 x i16> splat (i16 7))\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i16> %r"
 },
 {
  "instr": "fshl",
  "ty": "<2 x i32>",
  "variant": "triop",
  "codesize": 7,
  "thru": 7,
  "lat": 7,
  "sizelat": 7,
  "size": 8,
  "gisize": 8,
  "extrasize": 0,
  "asm": "movi v3.2s, #31\nushr v1.2s, v1.2s, #1\nbic v4.8b, v3.8b, v2.8b\nand v2.8b, v2.8b, v3.8b\nneg v3.2s, v4.2s\nushl v0.2s, v0.2s, v2.2s\nushl v1.2s, v1.2s, v3.2s\norr v0.8b, v0.8b, v1.8b\nret",
  "giasm": "movi v3.2s, #31\nushr v1.2s, v1.2s, #1\nbic v4.8b, v3.8b, v2.8b\nand v2.8b, v2.8b, v3.8b\nneg v3.2s, v4.2s\nushl v0.2s, v0.2s, v2.2s\nushl v1.2s, v1.2s, v3.2s\norr v0.8b, v0.8b, v1.8b\nret",
  "ll": "define <2 x i32> @test(<2 x i32> %a, <2 x i32> %b, <2 x i32> %c) {\n  %r = call <2 x i32> @llvm.fshl(<2 x i32> %a, <2 x i32> %b, <2 x i32> %c)\n  ret <2 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 7 for instruction:   %r = call <2 x i32> @llvm.fshl.v2i32(<2 x i32> %a, <2 x i32> %b, <2 x i32> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i32> %r"
 },
 {
  "instr": "fshl",
  "ty": "<2 x i32>",
  "variant": "triopconstsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "shl v0.2s, v0.2s, #7\nusra v0.2s, v1.2s, #25\nret",
  "giasm": "shl v0.2s, v0.2s, #7\nusra v0.2s, v1.2s, #25\nret",
  "ll": "define <2 x i32> @test(<2 x i32> %a, <2 x i32> %b) {\n  %r = call <2 x i32> @llvm.fshl(<2 x i32> %a, <2 x i32> %b, <2 x i32> splat (i32 7))\n  ret <2 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <2 x i32> @llvm.fshl.v2i32(<2 x i32> %a, <2 x i32> %b, <2 x i32> splat (i32 7))\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i32> %r"
 },
 {
  "instr": "fshl",
  "ty": "<4 x i32>",
  "variant": "triop",
  "codesize": 7,
  "thru": 7,
  "lat": 7,
  "sizelat": 7,
  "size": 8,
  "gisize": 8,
  "extrasize": 0,
  "asm": "movi v3.4s, #31\nushr v1.4s, v1.4s, #1\nbic v4.16b, v3.16b, v2.16b\nand v2.16b, v2.16b, v3.16b\nneg v3.4s, v4.4s\nushl v0.4s, v0.4s, v2.4s\nushl v1.4s, v1.4s, v3.4s\norr v0.16b, v0.16b, v1.16b\nret",
  "giasm": "movi v3.4s, #31\nushr v1.4s, v1.4s, #1\nbic v4.16b, v3.16b, v2.16b\nand v2.16b, v2.16b, v3.16b\nneg v3.4s, v4.4s\nushl v0.4s, v0.4s, v2.4s\nushl v1.4s, v1.4s, v3.4s\norr v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <4 x i32> @test(<4 x i32> %a, <4 x i32> %b, <4 x i32> %c) {\n  %r = call <4 x i32> @llvm.fshl(<4 x i32> %a, <4 x i32> %b, <4 x i32> %c)\n  ret <4 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 7 for instruction:   %r = call <4 x i32> @llvm.fshl.v4i32(<4 x i32> %a, <4 x i32> %b, <4 x i32> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i32> %r"
 },
 {
  "instr": "fshl",
  "ty": "<4 x i32>",
  "variant": "triopconstsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "shl v0.4s, v0.4s, #7\nusra v0.4s, v1.4s, #25\nret",
  "giasm": "shl v0.4s, v0.4s, #7\nusra v0.4s, v1.4s, #25\nret",
  "ll": "define <4 x i32> @test(<4 x i32> %a, <4 x i32> %b) {\n  %r = call <4 x i32> @llvm.fshl(<4 x i32> %a, <4 x i32> %b, <4 x i32> splat (i32 7))\n  ret <4 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <4 x i32> @llvm.fshl.v4i32(<4 x i32> %a, <4 x i32> %b, <4 x i32> splat (i32 7))\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i32> %r"
 },
 {
  "instr": "fshl",
  "ty": "<8 x i32>",
  "variant": "triop",
  "codesize": 7,
  "thru": 14,
  "lat": 7,
  "sizelat": 7,
  "size": 15,
  "gisize": 15,
  "extrasize": 0,
  "asm": "movi v6.4s, #31\nushr v2.4s, v2.4s, #1\nushr v3.4s, v3.4s, #1\nbic v7.16b, v6.16b, v4.16b\nbic v16.16b, v6.16b, v5.16b\nand v4.16b, v4.16b, v6.16b\nand v5.16b, v5.16b, v6.16b\nneg v6.4s, v7.4s\nneg v7.4s, v16.4s\nushl v0.4s, v0.4s, v4.4s\nushl v1.4s, v1.4s, v5.4s\nushl v2.4s, v2.4s, v6.4s\nushl v3.4s, v3.4s, v7.4s\norr v0.16b, v0.16b, v2.16b\norr v1.16b, v1.16b, v3.16b\nret",
  "giasm": "movi v6.4s, #31\nushr v2.4s, v2.4s, #1\nushr v3.4s, v3.4s, #1\nbic v7.16b, v6.16b, v4.16b\nbic v16.16b, v6.16b, v5.16b\nand v4.16b, v4.16b, v6.16b\nand v5.16b, v5.16b, v6.16b\nneg v6.4s, v7.4s\nneg v7.4s, v16.4s\nushl v0.4s, v0.4s, v4.4s\nushl v1.4s, v1.4s, v5.4s\nushl v2.4s, v2.4s, v6.4s\nushl v3.4s, v3.4s, v7.4s\norr v0.16b, v0.16b, v2.16b\norr v1.16b, v1.16b, v3.16b\nret",
  "ll": "define <8 x i32> @test(<8 x i32> %a, <8 x i32> %b, <8 x i32> %c) {\n  %r = call <8 x i32> @llvm.fshl(<8 x i32> %a, <8 x i32> %b, <8 x i32> %c)\n  ret <8 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 7 for instruction:   %r = call <8 x i32> @llvm.fshl.v8i32(<8 x i32> %a, <8 x i32> %b, <8 x i32> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i32> %r"
 },
 {
  "instr": "fshl",
  "ty": "<8 x i32>",
  "variant": "triopconstsplat",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "shl v1.4s, v1.4s, #7\nshl v0.4s, v0.4s, #7\nusra v1.4s, v3.4s, #25\nusra v0.4s, v2.4s, #25\nret",
  "giasm": "shl v0.4s, v0.4s, #7\nshl v1.4s, v1.4s, #7\nusra v0.4s, v2.4s, #25\nusra v1.4s, v3.4s, #25\nret",
  "ll": "define <8 x i32> @test(<8 x i32> %a, <8 x i32> %b) {\n  %r = call <8 x i32> @llvm.fshl(<8 x i32> %a, <8 x i32> %b, <8 x i32> splat (i32 7))\n  ret <8 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x i32> @llvm.fshl.v8i32(<8 x i32> %a, <8 x i32> %b, <8 x i32> splat (i32 7))\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i32> %r"
 },
 {
  "instr": "fshl",
  "ty": "<2 x i64>",
  "variant": "triop",
  "codesize": 7,
  "thru": 7,
  "lat": 7,
  "sizelat": 7,
  "size": 9,
  "gisize": 9,
  "extrasize": 0,
  "asm": "mov w8, #63                         // =0x3f\nushr v1.2d, v1.2d, #1\ndup v3.2d, x8\nbic v4.16b, v3.16b, v2.16b\nand v2.16b, v2.16b, v3.16b\nneg v3.2d, v4.2d\nushl v0.2d, v0.2d, v2.2d\nushl v1.2d, v1.2d, v3.2d\norr v0.16b, v0.16b, v1.16b\nret",
  "giasm": "adrp x8, .LCPI0_0\nushr v1.2d, v1.2d, #1\nldr q3, [x8, :lo12:.LCPI0_0]\nbic v4.16b, v3.16b, v2.16b\nand v2.16b, v2.16b, v3.16b\nneg v3.2d, v4.2d\nushl v0.2d, v0.2d, v2.2d\nushl v1.2d, v1.2d, v3.2d\norr v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <2 x i64> @test(<2 x i64> %a, <2 x i64> %b, <2 x i64> %c) {\n  %r = call <2 x i64> @llvm.fshl(<2 x i64> %a, <2 x i64> %b, <2 x i64> %c)\n  ret <2 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 7 for instruction:   %r = call <2 x i64> @llvm.fshl.v2i64(<2 x i64> %a, <2 x i64> %b, <2 x i64> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i64> %r"
 },
 {
  "instr": "fshl",
  "ty": "<2 x i64>",
  "variant": "triopconstsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "shl v0.2d, v0.2d, #7\nusra v0.2d, v1.2d, #57\nret",
  "giasm": "shl v0.2d, v0.2d, #7\nusra v0.2d, v1.2d, #57\nret",
  "ll": "define <2 x i64> @test(<2 x i64> %a, <2 x i64> %b) {\n  %r = call <2 x i64> @llvm.fshl(<2 x i64> %a, <2 x i64> %b, <2 x i64> splat (i64 7))\n  ret <2 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <2 x i64> @llvm.fshl.v2i64(<2 x i64> %a, <2 x i64> %b, <2 x i64> splat (i64 7))\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i64> %r"
 },
 {
  "instr": "fshl",
  "ty": "<4 x i64>",
  "variant": "triop",
  "codesize": 7,
  "thru": 14,
  "lat": 7,
  "sizelat": 7,
  "size": 16,
  "gisize": 16,
  "extrasize": 0,
  "asm": "mov w8, #63                         // =0x3f\nushr v2.2d, v2.2d, #1\nushr v3.2d, v3.2d, #1\ndup v6.2d, x8\nbic v7.16b, v6.16b, v4.16b\nbic v16.16b, v6.16b, v5.16b\nand v4.16b, v4.16b, v6.16b\nand v5.16b, v5.16b, v6.16b\nneg v6.2d, v7.2d\nneg v7.2d, v16.2d\nushl v0.2d, v0.2d, v4.2d\nushl v1.2d, v1.2d, v5.2d\nushl v2.2d, v2.2d, v6.2d\nushl v3.2d, v3.2d, v7.2d\norr v0.16b, v0.16b, v2.16b\norr v1.16b, v1.16b, v3.16b\nret",
  "giasm": "adrp x8, .LCPI0_0\nushr v2.2d, v2.2d, #1\nushr v3.2d, v3.2d, #1\nldr q6, [x8, :lo12:.LCPI0_0]\nbic v7.16b, v6.16b, v4.16b\nbic v16.16b, v6.16b, v5.16b\nand v4.16b, v4.16b, v6.16b\nand v5.16b, v5.16b, v6.16b\nneg v6.2d, v7.2d\nneg v7.2d, v16.2d\nushl v0.2d, v0.2d, v4.2d\nushl v1.2d, v1.2d, v5.2d\nushl v2.2d, v2.2d, v6.2d\nushl v3.2d, v3.2d, v7.2d\norr v0.16b, v0.16b, v2.16b\norr v1.16b, v1.16b, v3.16b\nret",
  "ll": "define <4 x i64> @test(<4 x i64> %a, <4 x i64> %b, <4 x i64> %c) {\n  %r = call <4 x i64> @llvm.fshl(<4 x i64> %a, <4 x i64> %b, <4 x i64> %c)\n  ret <4 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 7 for instruction:   %r = call <4 x i64> @llvm.fshl.v4i64(<4 x i64> %a, <4 x i64> %b, <4 x i64> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i64> %r"
 },
 {
  "instr": "fshl",
  "ty": "<4 x i64>",
  "variant": "triopconstsplat",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "shl v1.2d, v1.2d, #7\nshl v0.2d, v0.2d, #7\nusra v1.2d, v3.2d, #57\nusra v0.2d, v2.2d, #57\nret",
  "giasm": "shl v0.2d, v0.2d, #7\nshl v1.2d, v1.2d, #7\nusra v0.2d, v2.2d, #57\nusra v1.2d, v3.2d, #57\nret",
  "ll": "define <4 x i64> @test(<4 x i64> %a, <4 x i64> %b) {\n  %r = call <4 x i64> @llvm.fshl(<4 x i64> %a, <4 x i64> %b, <4 x i64> splat (i64 7))\n  ret <4 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x i64> @llvm.fshl.v4i64(<4 x i64> %a, <4 x i64> %b, <4 x i64> splat (i64 7))\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i64> %r"
 },
 {
  "instr": "fshr",
  "ty": "i8",
  "variant": "triop",
  "codesize": 7,
  "thru": 7,
  "lat": 7,
  "sizelat": 7,
  "size": 9,
  "gisize": 8,
  "extrasize": 0,
  "asm": "mov w8, #24                         // =0x18\nlsl w9, w1, #24\nmvn w10, w2\nbfxil w8, w2, #0, #3\nlsl w11, w0, #1\nand x10, x10, #0x7\nlsr w8, w9, w8\nlsl w9, w11, w10\norr w0, w9, w8\nret",
  "giasm": "mov w8, #7                          // =0x7\nlsl w9, w0, #1\nand w10, w2, #0x7\nbic w8, w8, w2\nand w11, w1, #0xff\nlsl w8, w9, w8\nlsr w9, w11, w10\norr w0, w8, w9\nret",
  "ll": "define i8 @test(i8 %a, i8 %b, i8 %c) {\n  %r = call i8 @llvm.fshr(i8 %a, i8 %b, i8 %c)\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 7 for instruction:   %r = call i8 @llvm.fshr.i8(i8 %a, i8 %b, i8 %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "fshr",
  "ty": "i8",
  "variant": "triopconstsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "lsl w8, w1, #24\nextr w0, w0, w8, #31\nret",
  "giasm": "ubfx w8, w1, #7, #1\norr w0, w8, w0, lsl #1\nret",
  "ll": "define i8 @test(i8 %a, i8 %b) {\n  %r = call i8 @llvm.fshr(i8 %a, i8 %b, i8 7)\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call i8 @llvm.fshr.i8(i8 %a, i8 %b, i8 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "fshr",
  "ty": "i16",
  "variant": "triop",
  "codesize": 7,
  "thru": 7,
  "lat": 7,
  "sizelat": 7,
  "size": 9,
  "gisize": 8,
  "extrasize": 0,
  "asm": "mov w8, #16                         // =0x10\nlsl w9, w1, #16\nmvn w10, w2\nbfxil w8, w2, #0, #4\nlsl w11, w0, #1\nand x10, x10, #0xf\nlsr w8, w9, w8\nlsl w9, w11, w10\norr w0, w9, w8\nret",
  "giasm": "mov w8, #15                         // =0xf\nlsl w9, w0, #1\nand w10, w2, #0xf\nbic w8, w8, w2\nand w11, w1, #0xffff\nlsl w8, w9, w8\nlsr w9, w11, w10\norr w0, w8, w9\nret",
  "ll": "define i16 @test(i16 %a, i16 %b, i16 %c) {\n  %r = call i16 @llvm.fshr(i16 %a, i16 %b, i16 %c)\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 7 for instruction:   %r = call i16 @llvm.fshr.i16(i16 %a, i16 %b, i16 %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "fshr",
  "ty": "i16",
  "variant": "triopconstsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "lsl w8, w1, #16\nextr w0, w0, w8, #23\nret",
  "giasm": "ubfx w8, w1, #7, #9\norr w0, w8, w0, lsl #9\nret",
  "ll": "define i16 @test(i16 %a, i16 %b) {\n  %r = call i16 @llvm.fshr(i16 %a, i16 %b, i16 7)\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call i16 @llvm.fshr.i16(i16 %a, i16 %b, i16 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "fshr",
  "ty": "i32",
  "variant": "triop",
  "codesize": 7,
  "thru": 7,
  "lat": 7,
  "sizelat": 7,
  "size": 5,
  "gisize": 7,
  "extrasize": 0,
  "asm": "lsl w8, w0, #1\nmvn w9, w2\nlsr w10, w1, w2\nlsl w8, w8, w9\norr w0, w8, w10\nret",
  "giasm": "mov w8, #31                         // =0x1f\nlsl w9, w0, #1\nand w10, w2, #0x1f\nbic w8, w8, w2\nlsl w8, w9, w8\nlsr w9, w1, w10\norr w0, w8, w9\nret",
  "ll": "define i32 @test(i32 %a, i32 %b, i32 %c) {\n  %r = call i32 @llvm.fshr(i32 %a, i32 %b, i32 %c)\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 7 for instruction:   %r = call i32 @llvm.fshr.i32(i32 %a, i32 %b, i32 %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "fshr",
  "ty": "i32",
  "variant": "triopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "extr w0, w0, w1, #7\nret",
  "giasm": "extr w0, w0, w1, #7\nret",
  "ll": "define i32 @test(i32 %a, i32 %b) {\n  %r = call i32 @llvm.fshr(i32 %a, i32 %b, i32 7)\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call i32 @llvm.fshr.i32(i32 %a, i32 %b, i32 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "fshr",
  "ty": "i64",
  "variant": "triop",
  "codesize": 7,
  "thru": 7,
  "lat": 7,
  "sizelat": 7,
  "size": 5,
  "gisize": 7,
  "extrasize": 0,
  "asm": "lsl x8, x0, #1\nmvn w9, w2\nlsr x10, x1, x2\nlsl x8, x8, x9\norr x0, x8, x10\nret",
  "giasm": "mov w8, #63                         // =0x3f\nlsl x9, x0, #1\nand x10, x2, #0x3f\nbic x8, x8, x2\nlsl x8, x9, x8\nlsr x9, x1, x10\norr x0, x8, x9\nret",
  "ll": "define i64 @test(i64 %a, i64 %b, i64 %c) {\n  %r = call i64 @llvm.fshr(i64 %a, i64 %b, i64 %c)\n  ret i64 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 7 for instruction:   %r = call i64 @llvm.fshr.i64(i64 %a, i64 %b, i64 %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret i64 %r"
 },
 {
  "instr": "fshr",
  "ty": "i64",
  "variant": "triopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "extr x0, x0, x1, #7\nret",
  "giasm": "extr x0, x0, x1, #7\nret",
  "ll": "define i64 @test(i64 %a, i64 %b) {\n  %r = call i64 @llvm.fshr(i64 %a, i64 %b, i64 7)\n  ret i64 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call i64 @llvm.fshr.i64(i64 %a, i64 %b, i64 7)\nCost Model: Found an estimated cost of 1 for instruction:   ret i64 %r"
 },
 {
  "instr": "fshr",
  "ty": "<8 x i8>",
  "variant": "triop",
  "codesize": 7,
  "thru": 7,
  "lat": 7,
  "sizelat": 7,
  "size": 8,
  "gisize": 8,
  "extrasize": 0,
  "asm": "movi v3.8b, #7\nadd v0.8b, v0.8b, v0.8b\nand v4.8b, v2.8b, v3.8b\nbic v2.8b, v3.8b, v2.8b\nneg v3.8b, v4.8b\nushl v0.8b, v0.8b, v2.8b\nushl v1.8b, v1.8b, v3.8b\norr v0.8b, v0.8b, v1.8b\nret",
  "giasm": "movi v3.8b, #7\nshl v0.8b, v0.8b, #1\nand v4.8b, v2.8b, v3.8b\nbic v2.8b, v3.8b, v2.8b\nneg v3.8b, v4.8b\nushl v0.8b, v0.8b, v2.8b\nushl v1.8b, v1.8b, v3.8b\norr v0.8b, v0.8b, v1.8b\nret",
  "ll": "define <8 x i8> @test(<8 x i8> %a, <8 x i8> %b, <8 x i8> %c) {\n  %r = call <8 x i8> @llvm.fshr(<8 x i8> %a, <8 x i8> %b, <8 x i8> %c)\n  ret <8 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 7 for instruction:   %r = call <8 x i8> @llvm.fshr.v8i8(<8 x i8> %a, <8 x i8> %b, <8 x i8> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i8> %r"
 },
 {
  "instr": "fshr",
  "ty": "<8 x i8>",
  "variant": "triopconstsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "add v0.8b, v0.8b, v0.8b\nusra v0.8b, v1.8b, #7\nret",
  "giasm": "shl v0.8b, v0.8b, #1\nusra v0.8b, v1.8b, #7\nret",
  "ll": "define <8 x i8> @test(<8 x i8> %a, <8 x i8> %b) {\n  %r = call <8 x i8> @llvm.fshr(<8 x i8> %a, <8 x i8> %b, <8 x i8> splat (i8 7))\n  ret <8 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <8 x i8> @llvm.fshr.v8i8(<8 x i8> %a, <8 x i8> %b, <8 x i8> splat (i8 7))\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i8> %r"
 },
 {
  "instr": "fshr",
  "ty": "<16 x i8>",
  "variant": "triop",
  "codesize": 7,
  "thru": 7,
  "lat": 7,
  "sizelat": 7,
  "size": 8,
  "gisize": 8,
  "extrasize": 0,
  "asm": "movi v3.16b, #7\nadd v0.16b, v0.16b, v0.16b\nand v4.16b, v2.16b, v3.16b\nbic v2.16b, v3.16b, v2.16b\nneg v3.16b, v4.16b\nushl v0.16b, v0.16b, v2.16b\nushl v1.16b, v1.16b, v3.16b\norr v0.16b, v0.16b, v1.16b\nret",
  "giasm": "movi v3.16b, #7\nshl v0.16b, v0.16b, #1\nand v4.16b, v2.16b, v3.16b\nbic v2.16b, v3.16b, v2.16b\nneg v3.16b, v4.16b\nushl v0.16b, v0.16b, v2.16b\nushl v1.16b, v1.16b, v3.16b\norr v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <16 x i8> @test(<16 x i8> %a, <16 x i8> %b, <16 x i8> %c) {\n  %r = call <16 x i8> @llvm.fshr(<16 x i8> %a, <16 x i8> %b, <16 x i8> %c)\n  ret <16 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 7 for instruction:   %r = call <16 x i8> @llvm.fshr.v16i8(<16 x i8> %a, <16 x i8> %b, <16 x i8> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i8> %r"
 },
 {
  "instr": "fshr",
  "ty": "<16 x i8>",
  "variant": "triopconstsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "add v0.16b, v0.16b, v0.16b\nusra v0.16b, v1.16b, #7\nret",
  "giasm": "shl v0.16b, v0.16b, #1\nusra v0.16b, v1.16b, #7\nret",
  "ll": "define <16 x i8> @test(<16 x i8> %a, <16 x i8> %b) {\n  %r = call <16 x i8> @llvm.fshr(<16 x i8> %a, <16 x i8> %b, <16 x i8> splat (i8 7))\n  ret <16 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <16 x i8> @llvm.fshr.v16i8(<16 x i8> %a, <16 x i8> %b, <16 x i8> splat (i8 7))\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i8> %r"
 },
 {
  "instr": "fshr",
  "ty": "<32 x i8>",
  "variant": "triop",
  "codesize": 7,
  "thru": 14,
  "lat": 7,
  "sizelat": 7,
  "size": 15,
  "gisize": 15,
  "extrasize": 0,
  "asm": "movi v6.16b, #7\nadd v0.16b, v0.16b, v0.16b\nadd v1.16b, v1.16b, v1.16b\nand v7.16b, v4.16b, v6.16b\nand v16.16b, v5.16b, v6.16b\nbic v4.16b, v6.16b, v4.16b\nbic v5.16b, v6.16b, v5.16b\nneg v6.16b, v7.16b\nneg v7.16b, v16.16b\nushl v0.16b, v0.16b, v4.16b\nushl v1.16b, v1.16b, v5.16b\nushl v2.16b, v2.16b, v6.16b\nushl v3.16b, v3.16b, v7.16b\norr v0.16b, v0.16b, v2.16b\norr v1.16b, v1.16b, v3.16b\nret",
  "giasm": "movi v6.16b, #7\nshl v0.16b, v0.16b, #1\nshl v1.16b, v1.16b, #1\nand v7.16b, v4.16b, v6.16b\nand v16.16b, v5.16b, v6.16b\nbic v4.16b, v6.16b, v4.16b\nbic v5.16b, v6.16b, v5.16b\nneg v6.16b, v7.16b\nneg v7.16b, v16.16b\nushl v0.16b, v0.16b, v4.16b\nushl v1.16b, v1.16b, v5.16b\nushl v2.16b, v2.16b, v6.16b\nushl v3.16b, v3.16b, v7.16b\norr v0.16b, v0.16b, v2.16b\norr v1.16b, v1.16b, v3.16b\nret",
  "ll": "define <32 x i8> @test(<32 x i8> %a, <32 x i8> %b, <32 x i8> %c) {\n  %r = call <32 x i8> @llvm.fshr(<32 x i8> %a, <32 x i8> %b, <32 x i8> %c)\n  ret <32 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 7 for instruction:   %r = call <32 x i8> @llvm.fshr.v32i8(<32 x i8> %a, <32 x i8> %b, <32 x i8> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i8> %r"
 },
 {
  "instr": "fshr",
  "ty": "<32 x i8>",
  "variant": "triopconstsplat",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "add v1.16b, v1.16b, v1.16b\nadd v0.16b, v0.16b, v0.16b\nusra v1.16b, v3.16b, #7\nusra v0.16b, v2.16b, #7\nret",
  "giasm": "shl v0.16b, v0.16b, #1\nshl v1.16b, v1.16b, #1\nusra v0.16b, v2.16b, #7\nusra v1.16b, v3.16b, #7\nret",
  "ll": "define <32 x i8> @test(<32 x i8> %a, <32 x i8> %b) {\n  %r = call <32 x i8> @llvm.fshr(<32 x i8> %a, <32 x i8> %b, <32 x i8> splat (i8 7))\n  ret <32 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <32 x i8> @llvm.fshr.v32i8(<32 x i8> %a, <32 x i8> %b, <32 x i8> splat (i8 7))\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i8> %r"
 },
 {
  "instr": "fshr",
  "ty": "<4 x i16>",
  "variant": "triop",
  "codesize": 7,
  "thru": 7,
  "lat": 7,
  "sizelat": 7,
  "size": 8,
  "gisize": 8,
  "extrasize": 0,
  "asm": "movi v3.4h, #15\nadd v0.4h, v0.4h, v0.4h\nand v4.8b, v2.8b, v3.8b\nbic v2.8b, v3.8b, v2.8b\nneg v3.4h, v4.4h\nushl v0.4h, v0.4h, v2.4h\nushl v1.4h, v1.4h, v3.4h\norr v0.8b, v0.8b, v1.8b\nret",
  "giasm": "movi v3.4h, #15\nshl v0.4h, v0.4h, #1\nand v4.8b, v2.8b, v3.8b\nbic v2.8b, v3.8b, v2.8b\nneg v3.4h, v4.4h\nushl v0.4h, v0.4h, v2.4h\nushl v1.4h, v1.4h, v3.4h\norr v0.8b, v0.8b, v1.8b\nret",
  "ll": "define <4 x i16> @test(<4 x i16> %a, <4 x i16> %b, <4 x i16> %c) {\n  %r = call <4 x i16> @llvm.fshr(<4 x i16> %a, <4 x i16> %b, <4 x i16> %c)\n  ret <4 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 7 for instruction:   %r = call <4 x i16> @llvm.fshr.v4i16(<4 x i16> %a, <4 x i16> %b, <4 x i16> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i16> %r"
 },
 {
  "instr": "fshr",
  "ty": "<4 x i16>",
  "variant": "triopconstsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "shl v0.4h, v0.4h, #9\nusra v0.4h, v1.4h, #7\nret",
  "giasm": "shl v0.4h, v0.4h, #9\nusra v0.4h, v1.4h, #7\nret",
  "ll": "define <4 x i16> @test(<4 x i16> %a, <4 x i16> %b) {\n  %r = call <4 x i16> @llvm.fshr(<4 x i16> %a, <4 x i16> %b, <4 x i16> splat (i16 7))\n  ret <4 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <4 x i16> @llvm.fshr.v4i16(<4 x i16> %a, <4 x i16> %b, <4 x i16> splat (i16 7))\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i16> %r"
 },
 {
  "instr": "fshr",
  "ty": "<8 x i16>",
  "variant": "triop",
  "codesize": 7,
  "thru": 7,
  "lat": 7,
  "sizelat": 7,
  "size": 8,
  "gisize": 8,
  "extrasize": 0,
  "asm": "movi v3.8h, #15\nadd v0.8h, v0.8h, v0.8h\nand v4.16b, v2.16b, v3.16b\nbic v2.16b, v3.16b, v2.16b\nneg v3.8h, v4.8h\nushl v0.8h, v0.8h, v2.8h\nushl v1.8h, v1.8h, v3.8h\norr v0.16b, v0.16b, v1.16b\nret",
  "giasm": "movi v3.8h, #15\nshl v0.8h, v0.8h, #1\nand v4.16b, v2.16b, v3.16b\nbic v2.16b, v3.16b, v2.16b\nneg v3.8h, v4.8h\nushl v0.8h, v0.8h, v2.8h\nushl v1.8h, v1.8h, v3.8h\norr v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <8 x i16> @test(<8 x i16> %a, <8 x i16> %b, <8 x i16> %c) {\n  %r = call <8 x i16> @llvm.fshr(<8 x i16> %a, <8 x i16> %b, <8 x i16> %c)\n  ret <8 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 7 for instruction:   %r = call <8 x i16> @llvm.fshr.v8i16(<8 x i16> %a, <8 x i16> %b, <8 x i16> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i16> %r"
 },
 {
  "instr": "fshr",
  "ty": "<8 x i16>",
  "variant": "triopconstsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "shl v0.8h, v0.8h, #9\nusra v0.8h, v1.8h, #7\nret",
  "giasm": "shl v0.8h, v0.8h, #9\nusra v0.8h, v1.8h, #7\nret",
  "ll": "define <8 x i16> @test(<8 x i16> %a, <8 x i16> %b) {\n  %r = call <8 x i16> @llvm.fshr(<8 x i16> %a, <8 x i16> %b, <8 x i16> splat (i16 7))\n  ret <8 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <8 x i16> @llvm.fshr.v8i16(<8 x i16> %a, <8 x i16> %b, <8 x i16> splat (i16 7))\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i16> %r"
 },
 {
  "instr": "fshr",
  "ty": "<16 x i16>",
  "variant": "triop",
  "codesize": 7,
  "thru": 14,
  "lat": 7,
  "sizelat": 7,
  "size": 15,
  "gisize": 15,
  "extrasize": 0,
  "asm": "movi v6.8h, #15\nadd v0.8h, v0.8h, v0.8h\nadd v1.8h, v1.8h, v1.8h\nand v7.16b, v4.16b, v6.16b\nand v16.16b, v5.16b, v6.16b\nbic v4.16b, v6.16b, v4.16b\nbic v5.16b, v6.16b, v5.16b\nneg v6.8h, v7.8h\nneg v7.8h, v16.8h\nushl v0.8h, v0.8h, v4.8h\nushl v1.8h, v1.8h, v5.8h\nushl v2.8h, v2.8h, v6.8h\nushl v3.8h, v3.8h, v7.8h\norr v0.16b, v0.16b, v2.16b\norr v1.16b, v1.16b, v3.16b\nret",
  "giasm": "movi v6.8h, #15\nshl v0.8h, v0.8h, #1\nshl v1.8h, v1.8h, #1\nand v7.16b, v4.16b, v6.16b\nand v16.16b, v5.16b, v6.16b\nbic v4.16b, v6.16b, v4.16b\nbic v5.16b, v6.16b, v5.16b\nneg v6.8h, v7.8h\nneg v7.8h, v16.8h\nushl v0.8h, v0.8h, v4.8h\nushl v1.8h, v1.8h, v5.8h\nushl v2.8h, v2.8h, v6.8h\nushl v3.8h, v3.8h, v7.8h\norr v0.16b, v0.16b, v2.16b\norr v1.16b, v1.16b, v3.16b\nret",
  "ll": "define <16 x i16> @test(<16 x i16> %a, <16 x i16> %b, <16 x i16> %c) {\n  %r = call <16 x i16> @llvm.fshr(<16 x i16> %a, <16 x i16> %b, <16 x i16> %c)\n  ret <16 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 7 for instruction:   %r = call <16 x i16> @llvm.fshr.v16i16(<16 x i16> %a, <16 x i16> %b, <16 x i16> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i16> %r"
 },
 {
  "instr": "fshr",
  "ty": "<16 x i16>",
  "variant": "triopconstsplat",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "shl v1.8h, v1.8h, #9\nshl v0.8h, v0.8h, #9\nusra v1.8h, v3.8h, #7\nusra v0.8h, v2.8h, #7\nret",
  "giasm": "shl v0.8h, v0.8h, #9\nshl v1.8h, v1.8h, #9\nusra v0.8h, v2.8h, #7\nusra v1.8h, v3.8h, #7\nret",
  "ll": "define <16 x i16> @test(<16 x i16> %a, <16 x i16> %b) {\n  %r = call <16 x i16> @llvm.fshr(<16 x i16> %a, <16 x i16> %b, <16 x i16> splat (i16 7))\n  ret <16 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <16 x i16> @llvm.fshr.v16i16(<16 x i16> %a, <16 x i16> %b, <16 x i16> splat (i16 7))\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i16> %r"
 },
 {
  "instr": "fshr",
  "ty": "<2 x i32>",
  "variant": "triop",
  "codesize": 7,
  "thru": 7,
  "lat": 7,
  "sizelat": 7,
  "size": 8,
  "gisize": 8,
  "extrasize": 0,
  "asm": "movi v3.2s, #31\nadd v0.2s, v0.2s, v0.2s\nand v4.8b, v2.8b, v3.8b\nbic v2.8b, v3.8b, v2.8b\nneg v3.2s, v4.2s\nushl v0.2s, v0.2s, v2.2s\nushl v1.2s, v1.2s, v3.2s\norr v0.8b, v0.8b, v1.8b\nret",
  "giasm": "movi v3.2s, #31\nshl v0.2s, v0.2s, #1\nand v4.8b, v2.8b, v3.8b\nbic v2.8b, v3.8b, v2.8b\nneg v3.2s, v4.2s\nushl v0.2s, v0.2s, v2.2s\nushl v1.2s, v1.2s, v3.2s\norr v0.8b, v0.8b, v1.8b\nret",
  "ll": "define <2 x i32> @test(<2 x i32> %a, <2 x i32> %b, <2 x i32> %c) {\n  %r = call <2 x i32> @llvm.fshr(<2 x i32> %a, <2 x i32> %b, <2 x i32> %c)\n  ret <2 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 7 for instruction:   %r = call <2 x i32> @llvm.fshr.v2i32(<2 x i32> %a, <2 x i32> %b, <2 x i32> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i32> %r"
 },
 {
  "instr": "fshr",
  "ty": "<2 x i32>",
  "variant": "triopconstsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "shl v0.2s, v0.2s, #25\nusra v0.2s, v1.2s, #7\nret",
  "giasm": "shl v0.2s, v0.2s, #25\nusra v0.2s, v1.2s, #7\nret",
  "ll": "define <2 x i32> @test(<2 x i32> %a, <2 x i32> %b) {\n  %r = call <2 x i32> @llvm.fshr(<2 x i32> %a, <2 x i32> %b, <2 x i32> splat (i32 7))\n  ret <2 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <2 x i32> @llvm.fshr.v2i32(<2 x i32> %a, <2 x i32> %b, <2 x i32> splat (i32 7))\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i32> %r"
 },
 {
  "instr": "fshr",
  "ty": "<4 x i32>",
  "variant": "triop",
  "codesize": 7,
  "thru": 7,
  "lat": 7,
  "sizelat": 7,
  "size": 8,
  "gisize": 8,
  "extrasize": 0,
  "asm": "movi v3.4s, #31\nadd v0.4s, v0.4s, v0.4s\nand v4.16b, v2.16b, v3.16b\nbic v2.16b, v3.16b, v2.16b\nneg v3.4s, v4.4s\nushl v0.4s, v0.4s, v2.4s\nushl v1.4s, v1.4s, v3.4s\norr v0.16b, v0.16b, v1.16b\nret",
  "giasm": "movi v3.4s, #31\nshl v0.4s, v0.4s, #1\nand v4.16b, v2.16b, v3.16b\nbic v2.16b, v3.16b, v2.16b\nneg v3.4s, v4.4s\nushl v0.4s, v0.4s, v2.4s\nushl v1.4s, v1.4s, v3.4s\norr v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <4 x i32> @test(<4 x i32> %a, <4 x i32> %b, <4 x i32> %c) {\n  %r = call <4 x i32> @llvm.fshr(<4 x i32> %a, <4 x i32> %b, <4 x i32> %c)\n  ret <4 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 7 for instruction:   %r = call <4 x i32> @llvm.fshr.v4i32(<4 x i32> %a, <4 x i32> %b, <4 x i32> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i32> %r"
 },
 {
  "instr": "fshr",
  "ty": "<4 x i32>",
  "variant": "triopconstsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "shl v0.4s, v0.4s, #25\nusra v0.4s, v1.4s, #7\nret",
  "giasm": "shl v0.4s, v0.4s, #25\nusra v0.4s, v1.4s, #7\nret",
  "ll": "define <4 x i32> @test(<4 x i32> %a, <4 x i32> %b) {\n  %r = call <4 x i32> @llvm.fshr(<4 x i32> %a, <4 x i32> %b, <4 x i32> splat (i32 7))\n  ret <4 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <4 x i32> @llvm.fshr.v4i32(<4 x i32> %a, <4 x i32> %b, <4 x i32> splat (i32 7))\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i32> %r"
 },
 {
  "instr": "fshr",
  "ty": "<8 x i32>",
  "variant": "triop",
  "codesize": 7,
  "thru": 14,
  "lat": 7,
  "sizelat": 7,
  "size": 15,
  "gisize": 15,
  "extrasize": 0,
  "asm": "movi v6.4s, #31\nadd v0.4s, v0.4s, v0.4s\nadd v1.4s, v1.4s, v1.4s\nand v7.16b, v4.16b, v6.16b\nand v16.16b, v5.16b, v6.16b\nbic v4.16b, v6.16b, v4.16b\nbic v5.16b, v6.16b, v5.16b\nneg v6.4s, v7.4s\nneg v7.4s, v16.4s\nushl v0.4s, v0.4s, v4.4s\nushl v1.4s, v1.4s, v5.4s\nushl v2.4s, v2.4s, v6.4s\nushl v3.4s, v3.4s, v7.4s\norr v0.16b, v0.16b, v2.16b\norr v1.16b, v1.16b, v3.16b\nret",
  "giasm": "movi v6.4s, #31\nshl v0.4s, v0.4s, #1\nshl v1.4s, v1.4s, #1\nand v7.16b, v4.16b, v6.16b\nand v16.16b, v5.16b, v6.16b\nbic v4.16b, v6.16b, v4.16b\nbic v5.16b, v6.16b, v5.16b\nneg v6.4s, v7.4s\nneg v7.4s, v16.4s\nushl v0.4s, v0.4s, v4.4s\nushl v1.4s, v1.4s, v5.4s\nushl v2.4s, v2.4s, v6.4s\nushl v3.4s, v3.4s, v7.4s\norr v0.16b, v0.16b, v2.16b\norr v1.16b, v1.16b, v3.16b\nret",
  "ll": "define <8 x i32> @test(<8 x i32> %a, <8 x i32> %b, <8 x i32> %c) {\n  %r = call <8 x i32> @llvm.fshr(<8 x i32> %a, <8 x i32> %b, <8 x i32> %c)\n  ret <8 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 7 for instruction:   %r = call <8 x i32> @llvm.fshr.v8i32(<8 x i32> %a, <8 x i32> %b, <8 x i32> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i32> %r"
 },
 {
  "instr": "fshr",
  "ty": "<8 x i32>",
  "variant": "triopconstsplat",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "shl v1.4s, v1.4s, #25\nshl v0.4s, v0.4s, #25\nusra v1.4s, v3.4s, #7\nusra v0.4s, v2.4s, #7\nret",
  "giasm": "shl v0.4s, v0.4s, #25\nshl v1.4s, v1.4s, #25\nusra v0.4s, v2.4s, #7\nusra v1.4s, v3.4s, #7\nret",
  "ll": "define <8 x i32> @test(<8 x i32> %a, <8 x i32> %b) {\n  %r = call <8 x i32> @llvm.fshr(<8 x i32> %a, <8 x i32> %b, <8 x i32> splat (i32 7))\n  ret <8 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x i32> @llvm.fshr.v8i32(<8 x i32> %a, <8 x i32> %b, <8 x i32> splat (i32 7))\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i32> %r"
 },
 {
  "instr": "fshr",
  "ty": "<2 x i64>",
  "variant": "triop",
  "codesize": 7,
  "thru": 7,
  "lat": 7,
  "sizelat": 7,
  "size": 9,
  "gisize": 9,
  "extrasize": 0,
  "asm": "mov w8, #63                         // =0x3f\nadd v0.2d, v0.2d, v0.2d\ndup v3.2d, x8\nand v4.16b, v2.16b, v3.16b\nbic v2.16b, v3.16b, v2.16b\nneg v3.2d, v4.2d\nushl v0.2d, v0.2d, v2.2d\nushl v1.2d, v1.2d, v3.2d\norr v0.16b, v0.16b, v1.16b\nret",
  "giasm": "adrp x8, .LCPI0_0\nshl v0.2d, v0.2d, #1\nldr q3, [x8, :lo12:.LCPI0_0]\nand v4.16b, v2.16b, v3.16b\nbic v2.16b, v3.16b, v2.16b\nneg v3.2d, v4.2d\nushl v0.2d, v0.2d, v2.2d\nushl v1.2d, v1.2d, v3.2d\norr v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <2 x i64> @test(<2 x i64> %a, <2 x i64> %b, <2 x i64> %c) {\n  %r = call <2 x i64> @llvm.fshr(<2 x i64> %a, <2 x i64> %b, <2 x i64> %c)\n  ret <2 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 7 for instruction:   %r = call <2 x i64> @llvm.fshr.v2i64(<2 x i64> %a, <2 x i64> %b, <2 x i64> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i64> %r"
 },
 {
  "instr": "fshr",
  "ty": "<2 x i64>",
  "variant": "triopconstsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "shl v0.2d, v0.2d, #57\nusra v0.2d, v1.2d, #7\nret",
  "giasm": "shl v0.2d, v0.2d, #57\nusra v0.2d, v1.2d, #7\nret",
  "ll": "define <2 x i64> @test(<2 x i64> %a, <2 x i64> %b) {\n  %r = call <2 x i64> @llvm.fshr(<2 x i64> %a, <2 x i64> %b, <2 x i64> splat (i64 7))\n  ret <2 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <2 x i64> @llvm.fshr.v2i64(<2 x i64> %a, <2 x i64> %b, <2 x i64> splat (i64 7))\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i64> %r"
 },
 {
  "instr": "fshr",
  "ty": "<4 x i64>",
  "variant": "triop",
  "codesize": 7,
  "thru": 14,
  "lat": 7,
  "sizelat": 7,
  "size": 16,
  "gisize": 16,
  "extrasize": 0,
  "asm": "mov w8, #63                         // =0x3f\nadd v0.2d, v0.2d, v0.2d\nadd v1.2d, v1.2d, v1.2d\ndup v6.2d, x8\nand v7.16b, v4.16b, v6.16b\nand v16.16b, v5.16b, v6.16b\nbic v4.16b, v6.16b, v4.16b\nbic v5.16b, v6.16b, v5.16b\nneg v6.2d, v7.2d\nneg v7.2d, v16.2d\nushl v0.2d, v0.2d, v4.2d\nushl v1.2d, v1.2d, v5.2d\nushl v2.2d, v2.2d, v6.2d\nushl v3.2d, v3.2d, v7.2d\norr v0.16b, v0.16b, v2.16b\norr v1.16b, v1.16b, v3.16b\nret",
  "giasm": "adrp x8, .LCPI0_0\nshl v0.2d, v0.2d, #1\nshl v1.2d, v1.2d, #1\nldr q6, [x8, :lo12:.LCPI0_0]\nand v7.16b, v4.16b, v6.16b\nand v16.16b, v5.16b, v6.16b\nbic v4.16b, v6.16b, v4.16b\nbic v5.16b, v6.16b, v5.16b\nneg v6.2d, v7.2d\nneg v7.2d, v16.2d\nushl v0.2d, v0.2d, v4.2d\nushl v1.2d, v1.2d, v5.2d\nushl v2.2d, v2.2d, v6.2d\nushl v3.2d, v3.2d, v7.2d\norr v0.16b, v0.16b, v2.16b\norr v1.16b, v1.16b, v3.16b\nret",
  "ll": "define <4 x i64> @test(<4 x i64> %a, <4 x i64> %b, <4 x i64> %c) {\n  %r = call <4 x i64> @llvm.fshr(<4 x i64> %a, <4 x i64> %b, <4 x i64> %c)\n  ret <4 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 7 for instruction:   %r = call <4 x i64> @llvm.fshr.v4i64(<4 x i64> %a, <4 x i64> %b, <4 x i64> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i64> %r"
 },
 {
  "instr": "fshr",
  "ty": "<4 x i64>",
  "variant": "triopconstsplat",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "shl v1.2d, v1.2d, #57\nshl v0.2d, v0.2d, #57\nusra v1.2d, v3.2d, #7\nusra v0.2d, v2.2d, #7\nret",
  "giasm": "shl v0.2d, v0.2d, #57\nshl v1.2d, v1.2d, #57\nusra v0.2d, v2.2d, #7\nusra v1.2d, v3.2d, #7\nret",
  "ll": "define <4 x i64> @test(<4 x i64> %a, <4 x i64> %b) {\n  %r = call <4 x i64> @llvm.fshr(<4 x i64> %a, <4 x i64> %b, <4 x i64> splat (i64 7))\n  ret <4 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x i64> @llvm.fshr.v4i64(<4 x i64> %a, <4 x i64> %b, <4 x i64> splat (i64 7))\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i64> %r"
 },
 {
  "instr": "select",
  "ty": "i8",
  "variant": "triop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "tst w2, #0x1\ncsel w0, w0, w1, ne\nret",
  "giasm": "and w8, w2, #0x1\ntst w8, #0x1\ncsel w0, w0, w1, ne\nret",
  "ll": "define i8 @test(i8 %a, i8 %b, i1 %c) {\n  %r = select  i1 %c, i8 %a, i8 %b\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i8 %a, i8 %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "select",
  "ty": "i16",
  "variant": "triop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "tst w2, #0x1\ncsel w0, w0, w1, ne\nret",
  "giasm": "and w8, w2, #0x1\ntst w8, #0x1\ncsel w0, w0, w1, ne\nret",
  "ll": "define i16 @test(i16 %a, i16 %b, i1 %c) {\n  %r = select  i1 %c, i16 %a, i16 %b\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i16 %a, i16 %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "select",
  "ty": "i32",
  "variant": "triop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "tst w2, #0x1\ncsel w0, w0, w1, ne\nret",
  "giasm": "and w8, w2, #0x1\ntst w8, #0x1\ncsel w0, w0, w1, ne\nret",
  "ll": "define i32 @test(i32 %a, i32 %b, i1 %c) {\n  %r = select  i1 %c, i32 %a, i32 %b\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i32 %a, i32 %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "select",
  "ty": "i64",
  "variant": "triop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "tst w2, #0x1\ncsel x0, x0, x1, ne\nret",
  "giasm": "and w8, w2, #0x1\ntst w8, #0x1\ncsel x0, x0, x1, ne\nret",
  "ll": "define i64 @test(i64 %a, i64 %b, i1 %c) {\n  %r = select  i1 %c, i64 %a, i64 %b\n  ret i64 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i64 %a, i64 %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i64 %r"
 },
 {
  "instr": "select",
  "ty": "<8 x i8>",
  "variant": "triop",
  "codesize": 1,
  "thru": 24,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "shl v2.8b, v2.8b, #7\ncmlt v2.8b, v2.8b, #0\nbif v0.8b, v1.8b, v2.8b\nret",
  "giasm": "shl v2.8b, v2.8b, #7\nsshr v2.8b, v2.8b, #7\nbif v0.8b, v1.8b, v2.8b\nret",
  "ll": "define <8 x i8> @test(<8 x i8> %a, <8 x i8> %b, <8 x i1> %c) {\n  %r = select  <8 x i1> %c, <8 x i8> %a, <8 x i8> %b\n  ret <8 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x i8> %a, <8 x i8> %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i8> %r"
 },
 {
  "instr": "select",
  "ty": "<16 x i8>",
  "variant": "triop",
  "codesize": 1,
  "thru": 48,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "shl v2.16b, v2.16b, #7\ncmlt v2.16b, v2.16b, #0\nbif v0.16b, v1.16b, v2.16b\nret",
  "giasm": "shl v2.16b, v2.16b, #7\nsshr v2.16b, v2.16b, #7\nbif v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <16 x i8> @test(<16 x i8> %a, <16 x i8> %b, <16 x i1> %c) {\n  %r = select  <16 x i1> %c, <16 x i8> %a, <16 x i8> %b\n  ret <16 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <16 x i1> %c, <16 x i8> %a, <16 x i8> %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i8> %r"
 },
 {
  "instr": "select",
  "ty": "<32 x i8>",
  "variant": "triop",
  "codesize": 1,
  "thru": 96,
  "lat": 1,
  "sizelat": 1,
  "size": 62,
  "gisize": 62,
  "extrasize": 0,
  "asm": "ldr w8, [sp, #64]\nfmov s5, w0\nldr w9, [sp, #72]\nfmov s4, w8\nldr w8, [sp, #80]\nmov v5.b[1], w1\nmov v4.b[1], w9\nldr w9, [sp]\nmov v5.b[2], w2\nmov v4.b[2], w8\nldr w8, [sp, #88]\nmov v5.b[3], w3\nmov v4.b[3], w8\nldr w8, [sp, #96]\nmov v5.b[4], w4\nmov v4.b[4], w8\nldr w8, [sp, #104]\nmov v5.b[5], w5\nmov v4.b[5], w8\nldr w8, [sp, #112]\nmov v5.b[6], w6\nmov v4.b[6], w8\nldr w8, [sp, #120]\nmov v5.b[7], w7\nmov v4.b[7], w8\nldr w8, [sp, #128]\nmov v5.b[8], w9\nldr w9, [sp, #8]\nmov v4.b[8], w8\nldr w8, [sp, #136]\nmov v5.b[9], w9\nldr w9, [sp, #16]\nmov v4.b[9], w8\nldr w8, [sp, #144]\nmov v5.b[10], w9\nldr w9, [sp, #24]\nmov v4.b[10], w8\nldr w8, [sp, #152]\nmov v5.b[11], w9\nldr w9, [sp, #32]\nmov v4.b[11], w8\nldr w8, [sp, #160]\nmov v5.b[12], w9\nldr w9, [sp, #40]\nmov v4.b[12], w8\nldr w8, [sp, #168]\nmov v5.b[13], w9\nldr w9, [sp, #48]\nmov v4.b[13], w8\nldr w8, [sp, #176]\nmov v5.b[14], w9\nldr w9, [sp, #56]\nmov v4.b[14], w8\nldr w8, [sp, #184]\nmov v5.b[15], w9\nmov v4.b[15], w8\nshl v5.16b, v5.16b, #7\nshl v4.16b, v4.16b, #7\ncmlt v5.16b, v5.16b, #0\ncmlt v4.16b, v4.16b, #0\nbif v0.16b, v2.16b, v5.16b\nbif v1.16b, v3.16b, v4.16b\nret",
  "giasm": "ldr w8, [sp, #64]\nfmov s4, w0\nldr w9, [sp, #72]\nfmov s5, w8\nldr w8, [sp, #80]\nmov v4.b[1], w1\nmov v5.b[1], w9\nldr w9, [sp, #128]\nmov v4.b[2], w2\nmov v5.b[2], w8\nldr w8, [sp, #88]\nmov v4.b[3], w3\nmov v5.b[3], w8\nldr w8, [sp, #96]\nmov v4.b[4], w4\nmov v5.b[4], w8\nldr w8, [sp, #104]\nmov v4.b[5], w5\nmov v5.b[5], w8\nldr w8, [sp, #112]\nmov v4.b[6], w6\nmov v5.b[6], w8\nldr w8, [sp, #120]\nmov v4.b[7], w7\nmov v5.b[7], w8\nldr w8, [sp]\nmov v4.b[8], w8\nldr w8, [sp, #8]\nmov v5.b[8], w9\nldr w9, [sp, #136]\nmov v4.b[9], w8\nldr w8, [sp, #16]\nmov v5.b[9], w9\nldr w9, [sp, #144]\nmov v4.b[10], w8\nldr w8, [sp, #24]\nmov v5.b[10], w9\nldr w9, [sp, #152]\nmov v4.b[11], w8\nldr w8, [sp, #32]\nmov v5.b[11], w9\nldr w9, [sp, #160]\nmov v4.b[12], w8\nldr w8, [sp, #40]\nmov v5.b[12], w9\nldr w9, [sp, #168]\nmov v4.b[13], w8\nldr w8, [sp, #48]\nmov v5.b[13], w9\nldr w9, [sp, #176]\nmov v4.b[14], w8\nldr w8, [sp, #56]\nmov v5.b[14], w9\nldr w9, [sp, #184]\nmov v4.b[15], w8\nmov v5.b[15], w9\nshl v4.16b, v4.16b, #7\nshl v5.16b, v5.16b, #7\nsshr v4.16b, v4.16b, #7\nsshr v5.16b, v5.16b, #7\nbif v0.16b, v2.16b, v4.16b\nbif v1.16b, v3.16b, v5.16b\nret",
  "ll": "define <32 x i8> @test(<32 x i8> %a, <32 x i8> %b, <32 x i1> %c) {\n  %r = select  <32 x i1> %c, <32 x i8> %a, <32 x i8> %b\n  ret <32 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <32 x i1> %c, <32 x i8> %a, <32 x i8> %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i8> %r"
 },
 {
  "instr": "select",
  "ty": "<4 x i16>",
  "variant": "triop",
  "codesize": 1,
  "thru": 12,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "shl v2.4h, v2.4h, #15\ncmlt v2.4h, v2.4h, #0\nbif v0.8b, v1.8b, v2.8b\nret",
  "giasm": "shl v2.4h, v2.4h, #15\nsshr v2.4h, v2.4h, #15\nbif v0.8b, v1.8b, v2.8b\nret",
  "ll": "define <4 x i16> @test(<4 x i16> %a, <4 x i16> %b, <4 x i1> %c) {\n  %r = select  <4 x i1> %c, <4 x i16> %a, <4 x i16> %b\n  ret <4 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x i16> %a, <4 x i16> %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i16> %r"
 },
 {
  "instr": "select",
  "ty": "<8 x i16>",
  "variant": "triop",
  "codesize": 1,
  "thru": 24,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "ushll v2.8h, v2.8b, #0\nshl v2.8h, v2.8h, #15\ncmlt v2.8h, v2.8h, #0\nbif v0.16b, v1.16b, v2.16b\nret",
  "giasm": "ushll v2.8h, v2.8b, #0\nshl v2.8h, v2.8h, #15\nsshr v2.8h, v2.8h, #15\nbif v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <8 x i16> @test(<8 x i16> %a, <8 x i16> %b, <8 x i1> %c) {\n  %r = select  <8 x i1> %c, <8 x i16> %a, <8 x i16> %b\n  ret <8 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x i16> %a, <8 x i16> %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i16> %r"
 },
 {
  "instr": "select",
  "ty": "<16 x i16>",
  "variant": "triop",
  "codesize": 1,
  "thru": 16,
  "lat": 1,
  "sizelat": 1,
  "size": 8,
  "gisize": 8,
  "extrasize": 0,
  "asm": "ushll2 v5.8h, v4.16b, #0\nushll v4.8h, v4.8b, #0\nshl v5.8h, v5.8h, #15\nshl v4.8h, v4.8h, #15\ncmlt v5.8h, v5.8h, #0\ncmlt v4.8h, v4.8h, #0\nbif v1.16b, v3.16b, v5.16b\nbif v0.16b, v2.16b, v4.16b\nret",
  "giasm": "ushll v5.8h, v4.8b, #0\nushll2 v4.8h, v4.16b, #0\nshl v5.8h, v5.8h, #15\nshl v4.8h, v4.8h, #15\nsshr v5.8h, v5.8h, #15\nsshr v4.8h, v4.8h, #15\nbif v0.16b, v2.16b, v5.16b\nbif v1.16b, v3.16b, v4.16b\nret",
  "ll": "define <16 x i16> @test(<16 x i16> %a, <16 x i16> %b, <16 x i1> %c) {\n  %r = select  <16 x i1> %c, <16 x i16> %a, <16 x i16> %b\n  ret <16 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <16 x i1> %c, <16 x i16> %a, <16 x i16> %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i16> %r"
 },
 {
  "instr": "select",
  "ty": "<2 x i32>",
  "variant": "triop",
  "codesize": 1,
  "thru": 6,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "shl v2.2s, v2.2s, #31\ncmlt v2.2s, v2.2s, #0\nbif v0.8b, v1.8b, v2.8b\nret",
  "giasm": "shl v2.2s, v2.2s, #31\nsshr v2.2s, v2.2s, #31\nbif v0.8b, v1.8b, v2.8b\nret",
  "ll": "define <2 x i32> @test(<2 x i32> %a, <2 x i32> %b, <2 x i1> %c) {\n  %r = select  <2 x i1> %c, <2 x i32> %a, <2 x i32> %b\n  ret <2 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <2 x i1> %c, <2 x i32> %a, <2 x i32> %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i32> %r"
 },
 {
  "instr": "select",
  "ty": "<4 x i32>",
  "variant": "triop",
  "codesize": 1,
  "thru": 12,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "ushll v2.4s, v2.4h, #0\nshl v2.4s, v2.4s, #31\ncmlt v2.4s, v2.4s, #0\nbif v0.16b, v1.16b, v2.16b\nret",
  "giasm": "ushll v2.4s, v2.4h, #0\nshl v2.4s, v2.4s, #31\nsshr v2.4s, v2.4s, #31\nbif v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <4 x i32> @test(<4 x i32> %a, <4 x i32> %b, <4 x i1> %c) {\n  %r = select  <4 x i1> %c, <4 x i32> %a, <4 x i32> %b\n  ret <4 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x i32> %a, <4 x i32> %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i32> %r"
 },
 {
  "instr": "select",
  "ty": "<8 x i32>",
  "variant": "triop",
  "codesize": 1,
  "thru": 8,
  "lat": 1,
  "sizelat": 1,
  "size": 10,
  "gisize": 9,
  "extrasize": 0,
  "asm": "zip1 v5.8b, v4.8b, v0.8b\nzip2 v4.8b, v4.8b, v0.8b\nushll v5.4s, v5.4h, #0\nushll v4.4s, v4.4h, #0\nshl v5.4s, v5.4s, #31\nshl v4.4s, v4.4s, #31\ncmlt v5.4s, v5.4s, #0\ncmlt v4.4s, v4.4s, #0\nbif v0.16b, v2.16b, v5.16b\nbif v1.16b, v3.16b, v4.16b\nret",
  "giasm": "ushll v4.8h, v4.8b, #0\nushll v5.4s, v4.4h, #0\nushll2 v4.4s, v4.8h, #0\nshl v5.4s, v5.4s, #31\nshl v4.4s, v4.4s, #31\nsshr v5.4s, v5.4s, #31\nsshr v4.4s, v4.4s, #31\nbif v0.16b, v2.16b, v5.16b\nbif v1.16b, v3.16b, v4.16b\nret",
  "ll": "define <8 x i32> @test(<8 x i32> %a, <8 x i32> %b, <8 x i1> %c) {\n  %r = select  <8 x i1> %c, <8 x i32> %a, <8 x i32> %b\n  ret <8 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x i32> %a, <8 x i32> %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i32> %r"
 },
 {
  "instr": "select",
  "ty": "<2 x i64>",
  "variant": "triop",
  "codesize": 1,
  "thru": 6,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "ushll v2.2d, v2.2s, #0\nshl v2.2d, v2.2d, #63\ncmlt v2.2d, v2.2d, #0\nbif v0.16b, v1.16b, v2.16b\nret",
  "giasm": "ushll v2.2d, v2.2s, #0\nshl v2.2d, v2.2d, #63\nsshr v2.2d, v2.2d, #63\nbif v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <2 x i64> @test(<2 x i64> %a, <2 x i64> %b, <2 x i1> %c) {\n  %r = select  <2 x i1> %c, <2 x i64> %a, <2 x i64> %b\n  ret <2 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <2 x i1> %c, <2 x i64> %a, <2 x i64> %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i64> %r"
 },
 {
  "instr": "select",
  "ty": "<4 x i64>",
  "variant": "triop",
  "codesize": 1,
  "thru": 80,
  "lat": 1,
  "sizelat": 1,
  "size": 9,
  "gisize": 9,
  "extrasize": 0,
  "asm": "ushll v4.4s, v4.4h, #0\nushll2 v5.2d, v4.4s, #0\nushll v4.2d, v4.2s, #0\nshl v5.2d, v5.2d, #63\nshl v4.2d, v4.2d, #63\ncmlt v5.2d, v5.2d, #0\ncmlt v4.2d, v4.2d, #0\nbif v1.16b, v3.16b, v5.16b\nbif v0.16b, v2.16b, v4.16b\nret",
  "giasm": "ushll v4.4s, v4.4h, #0\nushll v5.2d, v4.2s, #0\nushll2 v4.2d, v4.4s, #0\nshl v5.2d, v5.2d, #63\nshl v4.2d, v4.2d, #63\nsshr v5.2d, v5.2d, #63\nsshr v4.2d, v4.2d, #63\nbif v0.16b, v2.16b, v5.16b\nbif v1.16b, v3.16b, v4.16b\nret",
  "ll": "define <4 x i64> @test(<4 x i64> %a, <4 x i64> %b, <4 x i1> %c) {\n  %r = select  <4 x i1> %c, <4 x i64> %a, <4 x i64> %b\n  ret <4 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x i64> %a, <4 x i64> %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i64> %r"
 },
 {
  "instr": "icmpeq",
  "ty": "i8",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "and w8, w0, #0xff\ncmp w8, w1, uxtb\ncset w0, eq\nret",
  "giasm": "and w8, w0, #0xff\ncmp w8, w1, uxtb\ncset w0, eq\nret",
  "ll": "define i1 @test(i8 %a, i8 %b) {\n  %r = icmp eq i8 %a, %b\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp eq i8 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "icmpeq",
  "ty": "i8",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "tst w0, #0xff\ncset w0, eq\nret",
  "giasm": "tst w0, #0xff\ncset w0, eq\nret",
  "ll": "define i1 @test(i8 %a) {\n  %r = icmp eq i8 %a, 0\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp eq i8 %a, 0\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "selecticmpeq",
  "ty": "i8",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "and w8, w0, #0xff\ncmp w8, w1, uxtb\ncsel w0, w2, w3, eq\nret",
  "giasm": "and w8, w0, #0xff\ncmp w8, w1, uxtb\ncsel w0, w2, w3, eq\nret",
  "ll": "define i8 @test(i8 %a, i8 %b, i8 %d, i8 %e) {\n  %c = icmp eq i8 %a, %b\n  %r = select i1 %c, i8 %d, i8 %e\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp eq i8 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i8 %d, i8 %e\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "selecticmpeq",
  "ty": "i8",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "tst w0, #0xff\ncsel w0, w1, w2, eq\nret",
  "giasm": "tst w0, #0xff\ncsel w0, w1, w2, eq\nret",
  "ll": "define i8 @test(i8 %a, i8 %d, i8 %e) {\n  %c = icmp eq i8 %a, 0\n  %r = select i1 %c, i8 %d, i8 %e\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp eq i8 %a, 0\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i8 %d, i8 %e\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "icmpeq",
  "ty": "i16",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "and w8, w0, #0xffff\ncmp w8, w1, uxth\ncset w0, eq\nret",
  "giasm": "and w8, w0, #0xffff\ncmp w8, w1, uxth\ncset w0, eq\nret",
  "ll": "define i1 @test(i16 %a, i16 %b) {\n  %r = icmp eq i16 %a, %b\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp eq i16 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "icmpeq",
  "ty": "i16",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "tst w0, #0xffff\ncset w0, eq\nret",
  "giasm": "tst w0, #0xffff\ncset w0, eq\nret",
  "ll": "define i1 @test(i16 %a) {\n  %r = icmp eq i16 %a, 0\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp eq i16 %a, 0\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "selecticmpeq",
  "ty": "i16",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "and w8, w0, #0xffff\ncmp w8, w1, uxth\ncsel w0, w2, w3, eq\nret",
  "giasm": "and w8, w0, #0xffff\ncmp w8, w1, uxth\ncsel w0, w2, w3, eq\nret",
  "ll": "define i16 @test(i16 %a, i16 %b, i16 %d, i16 %e) {\n  %c = icmp eq i16 %a, %b\n  %r = select i1 %c, i16 %d, i16 %e\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp eq i16 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i16 %d, i16 %e\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "selecticmpeq",
  "ty": "i16",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "tst w0, #0xffff\ncsel w0, w1, w2, eq\nret",
  "giasm": "tst w0, #0xffff\ncsel w0, w1, w2, eq\nret",
  "ll": "define i16 @test(i16 %a, i16 %d, i16 %e) {\n  %c = icmp eq i16 %a, 0\n  %r = select i1 %c, i16 %d, i16 %e\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp eq i16 %a, 0\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i16 %d, i16 %e\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "icmpeq",
  "ty": "i32",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmp w0, w1\ncset w0, eq\nret",
  "giasm": "cmp w0, w1\ncset w0, eq\nret",
  "ll": "define i1 @test(i32 %a, i32 %b) {\n  %r = icmp eq i32 %a, %b\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp eq i32 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "icmpeq",
  "ty": "i32",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmp w0, #0\ncset w0, eq\nret",
  "giasm": "cmp w0, #0\ncset w0, eq\nret",
  "ll": "define i1 @test(i32 %a) {\n  %r = icmp eq i32 %a, 0\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp eq i32 %a, 0\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "selecticmpeq",
  "ty": "i32",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmp w0, w1\ncsel w0, w2, w3, eq\nret",
  "giasm": "cmp w0, w1\ncsel w0, w2, w3, eq\nret",
  "ll": "define i32 @test(i32 %a, i32 %b, i32 %d, i32 %e) {\n  %c = icmp eq i32 %a, %b\n  %r = select i1 %c, i32 %d, i32 %e\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp eq i32 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i32 %d, i32 %e\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "selecticmpeq",
  "ty": "i32",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmp w0, #0\ncsel w0, w1, w2, eq\nret",
  "giasm": "cmp w0, #0\ncsel w0, w1, w2, eq\nret",
  "ll": "define i32 @test(i32 %a, i32 %d, i32 %e) {\n  %c = icmp eq i32 %a, 0\n  %r = select i1 %c, i32 %d, i32 %e\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp eq i32 %a, 0\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i32 %d, i32 %e\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "icmpeq",
  "ty": "i64",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmp x0, x1\ncset w0, eq\nret",
  "giasm": "cmp x0, x1\ncset w0, eq\nret",
  "ll": "define i1 @test(i64 %a, i64 %b) {\n  %r = icmp eq i64 %a, %b\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp eq i64 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "icmpeq",
  "ty": "i64",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmp x0, #0\ncset w0, eq\nret",
  "giasm": "cmp x0, #0\ncset w0, eq\nret",
  "ll": "define i1 @test(i64 %a) {\n  %r = icmp eq i64 %a, 0\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp eq i64 %a, 0\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "selecticmpeq",
  "ty": "i64",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmp x0, x1\ncsel x0, x2, x3, eq\nret",
  "giasm": "cmp x0, x1\ncsel x0, x2, x3, eq\nret",
  "ll": "define i64 @test(i64 %a, i64 %b, i64 %d, i64 %e) {\n  %c = icmp eq i64 %a, %b\n  %r = select i1 %c, i64 %d, i64 %e\n  ret i64 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp eq i64 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i64 %d, i64 %e\nCost Model: Found an estimated cost of 1 for instruction:   ret i64 %r"
 },
 {
  "instr": "selecticmpeq",
  "ty": "i64",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmp x0, #0\ncsel x0, x1, x2, eq\nret",
  "giasm": "cmp x0, #0\ncsel x0, x1, x2, eq\nret",
  "ll": "define i64 @test(i64 %a, i64 %d, i64 %e) {\n  %c = icmp eq i64 %a, 0\n  %r = select i1 %c, i64 %d, i64 %e\n  ret i64 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp eq i64 %a, 0\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i64 %d, i64 %e\nCost Model: Found an estimated cost of 1 for instruction:   ret i64 %r"
 },
 {
  "instr": "icmpeq",
  "ty": "<8 x i8>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "cmeq v0.8b, v0.8b, v1.8b\nret",
  "giasm": "cmeq v0.8b, v0.8b, v1.8b\nret",
  "ll": "define <8 x i1> @test(<8 x i8> %a, <8 x i8> %b) {\n  %r = icmp eq <8 x i8> %a, %b\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp eq <8 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "icmpeq",
  "ty": "<8 x i8>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "cmeq v0.8b, v0.8b, #0\nret",
  "giasm": "cmeq v0.8b, v0.8b, #0\nret",
  "ll": "define <8 x i1> @test(<8 x i8> %a) {\n  %r = icmp eq <8 x i8> %a, zeroinitializer\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp eq <8 x i8> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "selecticmpeq",
  "ty": "<8 x i8>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmeq v0.8b, v0.8b, v1.8b\nbsl v0.8b, v2.8b, v3.8b\nret",
  "giasm": "cmeq v0.8b, v0.8b, v1.8b\nbsl v0.8b, v2.8b, v3.8b\nret",
  "ll": "define <8 x i8> @test(<8 x i8> %a, <8 x i8> %b, <8 x i8> %d, <8 x i8> %e) {\n  %c = icmp eq <8 x i8> %a, %b\n  %r = select <8 x i1> %c, <8 x i8> %d, <8 x i8> %e\n  ret <8 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp eq <8 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x i8> %d, <8 x i8> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i8> %r"
 },
 {
  "instr": "selecticmpeq",
  "ty": "<8 x i8>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmeq v0.8b, v0.8b, #0\nbsl v0.8b, v1.8b, v2.8b\nret",
  "giasm": "cmeq v0.8b, v0.8b, #0\nbsl v0.8b, v1.8b, v2.8b\nret",
  "ll": "define <8 x i8> @test(<8 x i8> %a, <8 x i8> %d, <8 x i8> %e) {\n  %c = icmp eq <8 x i8> %a, zeroinitializer\n  %r = select <8 x i1> %c, <8 x i8> %d, <8 x i8> %e\n  ret <8 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp eq <8 x i8> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x i8> %d, <8 x i8> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i8> %r"
 },
 {
  "instr": "icmpeq",
  "ty": "<16 x i8>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "cmeq v0.16b, v0.16b, v1.16b\nret",
  "giasm": "cmeq v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <16 x i1> @test(<16 x i8> %a, <16 x i8> %b) {\n  %r = icmp eq <16 x i8> %a, %b\n  ret <16 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp eq <16 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i1> %r"
 },
 {
  "instr": "icmpeq",
  "ty": "<16 x i8>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "cmeq v0.16b, v0.16b, #0\nret",
  "giasm": "cmeq v0.16b, v0.16b, #0\nret",
  "ll": "define <16 x i1> @test(<16 x i8> %a) {\n  %r = icmp eq <16 x i8> %a, zeroinitializer\n  ret <16 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp eq <16 x i8> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i1> %r"
 },
 {
  "instr": "selecticmpeq",
  "ty": "<16 x i8>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmeq v0.16b, v0.16b, v1.16b\nbsl v0.16b, v2.16b, v3.16b\nret",
  "giasm": "cmeq v0.16b, v0.16b, v1.16b\nbsl v0.16b, v2.16b, v3.16b\nret",
  "ll": "define <16 x i8> @test(<16 x i8> %a, <16 x i8> %b, <16 x i8> %d, <16 x i8> %e) {\n  %c = icmp eq <16 x i8> %a, %b\n  %r = select <16 x i1> %c, <16 x i8> %d, <16 x i8> %e\n  ret <16 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp eq <16 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <16 x i1> %c, <16 x i8> %d, <16 x i8> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i8> %r"
 },
 {
  "instr": "selecticmpeq",
  "ty": "<16 x i8>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmeq v0.16b, v0.16b, #0\nbsl v0.16b, v1.16b, v2.16b\nret",
  "giasm": "cmeq v0.16b, v0.16b, #0\nbsl v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <16 x i8> @test(<16 x i8> %a, <16 x i8> %d, <16 x i8> %e) {\n  %c = icmp eq <16 x i8> %a, zeroinitializer\n  %r = select <16 x i1> %c, <16 x i8> %d, <16 x i8> %e\n  ret <16 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp eq <16 x i8> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <16 x i1> %c, <16 x i8> %d, <16 x i8> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i8> %r"
 },
 {
  "instr": "icmpeq",
  "ty": "<32 x i8>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 14,
  "gisize": -1,
  "extrasize": 0,
  "asm": "cmeq v1.16b, v1.16b, v3.16b\nadrp x9, .LCPI0_0\ncmeq v0.16b, v0.16b, v2.16b\nldr q2, [x9, :lo12:.LCPI0_0]\nand v1.16b, v1.16b, v2.16b\nand v0.16b, v0.16b, v2.16b\next v2.16b, v1.16b, v1.16b, #8\next v3.16b, v0.16b, v0.16b, #8\nzip1 v1.16b, v1.16b, v2.16b\nzip1 v0.16b, v0.16b, v3.16b\naddv h1, v1.8h\naddv h0, v0.8h\nstr h1, [x8, #2]\nstr h0, [x8]\nret",
  "giasm": "LLVM ERROR: unable to legalize instruction: G_STORE %8:_(<32 x s8>), %2:_(p0) :: (store (<32 x s1>)) (in function: test)",
  "ll": "define <32 x i1> @test(<32 x i8> %a, <32 x i8> %b) {\n  %r = icmp eq <32 x i8> %a, %b\n  ret <32 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp eq <32 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i1> %r"
 },
 {
  "instr": "icmpeq",
  "ty": "<32 x i8>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 14,
  "gisize": -1,
  "extrasize": 0,
  "asm": "adrp x9, .LCPI0_0\ncmeq v1.16b, v1.16b, #0\ncmeq v0.16b, v0.16b, #0\nldr q2, [x9, :lo12:.LCPI0_0]\nand v1.16b, v1.16b, v2.16b\nand v0.16b, v0.16b, v2.16b\next v2.16b, v1.16b, v1.16b, #8\next v3.16b, v0.16b, v0.16b, #8\nzip1 v1.16b, v1.16b, v2.16b\nzip1 v0.16b, v0.16b, v3.16b\naddv h1, v1.8h\naddv h0, v0.8h\nstr h1, [x8, #2]\nstr h0, [x8]\nret",
  "giasm": "LLVM ERROR: unable to legalize instruction: G_STORE %7:_(<32 x s8>), %1:_(p0) :: (store (<32 x s1>)) (in function: test)",
  "ll": "define <32 x i1> @test(<32 x i8> %a) {\n  %r = icmp eq <32 x i8> %a, zeroinitializer\n  ret <32 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp eq <32 x i8> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i1> %r"
 },
 {
  "instr": "selecticmpeq",
  "ty": "<32 x i8>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 4,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmeq v1.16b, v1.16b, v3.16b\ncmeq v0.16b, v0.16b, v2.16b\nbsl v1.16b, v5.16b, v7.16b\nbsl v0.16b, v4.16b, v6.16b\nret",
  "giasm": "cmeq v0.16b, v0.16b, v2.16b\ncmeq v1.16b, v1.16b, v3.16b\nbsl v0.16b, v4.16b, v6.16b\nbsl v1.16b, v5.16b, v7.16b\nret",
  "ll": "define <32 x i8> @test(<32 x i8> %a, <32 x i8> %b, <32 x i8> %d, <32 x i8> %e) {\n  %c = icmp eq <32 x i8> %a, %b\n  %r = select <32 x i1> %c, <32 x i8> %d, <32 x i8> %e\n  ret <32 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp eq <32 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <32 x i1> %c, <32 x i8> %d, <32 x i8> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i8> %r"
 },
 {
  "instr": "selecticmpeq",
  "ty": "<32 x i8>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 4,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmeq v1.16b, v1.16b, #0\ncmeq v0.16b, v0.16b, #0\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "giasm": "cmeq v0.16b, v0.16b, #0\ncmeq v1.16b, v1.16b, #0\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "ll": "define <32 x i8> @test(<32 x i8> %a, <32 x i8> %d, <32 x i8> %e) {\n  %c = icmp eq <32 x i8> %a, zeroinitializer\n  %r = select <32 x i1> %c, <32 x i8> %d, <32 x i8> %e\n  ret <32 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp eq <32 x i8> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <32 x i1> %c, <32 x i8> %d, <32 x i8> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i8> %r"
 },
 {
  "instr": "icmpeq",
  "ty": "<4 x i16>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "cmeq v0.4h, v0.4h, v1.4h\nret",
  "giasm": "cmeq v0.4h, v0.4h, v1.4h\nret",
  "ll": "define <4 x i1> @test(<4 x i16> %a, <4 x i16> %b) {\n  %r = icmp eq <4 x i16> %a, %b\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp eq <4 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "icmpeq",
  "ty": "<4 x i16>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "cmeq v0.4h, v0.4h, #0\nret",
  "giasm": "cmeq v0.4h, v0.4h, #0\nret",
  "ll": "define <4 x i1> @test(<4 x i16> %a) {\n  %r = icmp eq <4 x i16> %a, zeroinitializer\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp eq <4 x i16> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "selecticmpeq",
  "ty": "<4 x i16>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmeq v0.4h, v0.4h, v1.4h\nbsl v0.8b, v2.8b, v3.8b\nret",
  "giasm": "cmeq v0.4h, v0.4h, v1.4h\nbsl v0.8b, v2.8b, v3.8b\nret",
  "ll": "define <4 x i16> @test(<4 x i16> %a, <4 x i16> %b, <4 x i16> %d, <4 x i16> %e) {\n  %c = icmp eq <4 x i16> %a, %b\n  %r = select <4 x i1> %c, <4 x i16> %d, <4 x i16> %e\n  ret <4 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp eq <4 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x i16> %d, <4 x i16> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i16> %r"
 },
 {
  "instr": "selecticmpeq",
  "ty": "<4 x i16>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmeq v0.4h, v0.4h, #0\nbsl v0.8b, v1.8b, v2.8b\nret",
  "giasm": "cmeq v0.4h, v0.4h, #0\nbsl v0.8b, v1.8b, v2.8b\nret",
  "ll": "define <4 x i16> @test(<4 x i16> %a, <4 x i16> %d, <4 x i16> %e) {\n  %c = icmp eq <4 x i16> %a, zeroinitializer\n  %r = select <4 x i1> %c, <4 x i16> %d, <4 x i16> %e\n  ret <4 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp eq <4 x i16> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x i16> %d, <4 x i16> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i16> %r"
 },
 {
  "instr": "icmpeq",
  "ty": "<8 x i16>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmeq v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "giasm": "cmeq v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x i16> %a, <8 x i16> %b) {\n  %r = icmp eq <8 x i16> %a, %b\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp eq <8 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "icmpeq",
  "ty": "<8 x i16>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmeq v0.8h, v0.8h, #0\nxtn v0.8b, v0.8h\nret",
  "giasm": "cmeq v0.8h, v0.8h, #0\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x i16> %a) {\n  %r = icmp eq <8 x i16> %a, zeroinitializer\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp eq <8 x i16> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "selecticmpeq",
  "ty": "<8 x i16>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmeq v0.8h, v0.8h, v1.8h\nbsl v0.16b, v2.16b, v3.16b\nret",
  "giasm": "cmeq v0.8h, v0.8h, v1.8h\nbsl v0.16b, v2.16b, v3.16b\nret",
  "ll": "define <8 x i16> @test(<8 x i16> %a, <8 x i16> %b, <8 x i16> %d, <8 x i16> %e) {\n  %c = icmp eq <8 x i16> %a, %b\n  %r = select <8 x i1> %c, <8 x i16> %d, <8 x i16> %e\n  ret <8 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp eq <8 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x i16> %d, <8 x i16> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i16> %r"
 },
 {
  "instr": "selecticmpeq",
  "ty": "<8 x i16>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmeq v0.8h, v0.8h, #0\nbsl v0.16b, v1.16b, v2.16b\nret",
  "giasm": "cmeq v0.8h, v0.8h, #0\nbsl v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <8 x i16> @test(<8 x i16> %a, <8 x i16> %d, <8 x i16> %e) {\n  %c = icmp eq <8 x i16> %a, zeroinitializer\n  %r = select <8 x i1> %c, <8 x i16> %d, <8 x i16> %e\n  ret <8 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp eq <8 x i16> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x i16> %d, <8 x i16> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i16> %r"
 },
 {
  "instr": "icmpeq",
  "ty": "<16 x i16>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "cmeq v1.8h, v1.8h, v3.8h\ncmeq v0.8h, v0.8h, v2.8h\nuzp1 v0.16b, v0.16b, v1.16b\nret",
  "giasm": "cmeq v0.8h, v0.8h, v2.8h\ncmeq v1.8h, v1.8h, v3.8h\nuzp1 v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <16 x i1> @test(<16 x i16> %a, <16 x i16> %b) {\n  %r = icmp eq <16 x i16> %a, %b\n  ret <16 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp eq <16 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i1> %r"
 },
 {
  "instr": "icmpeq",
  "ty": "<16 x i16>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "cmeq v1.8h, v1.8h, #0\ncmeq v0.8h, v0.8h, #0\nuzp1 v0.16b, v0.16b, v1.16b\nret",
  "giasm": "cmeq v0.8h, v0.8h, #0\ncmeq v1.8h, v1.8h, #0\nuzp1 v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <16 x i1> @test(<16 x i16> %a) {\n  %r = icmp eq <16 x i16> %a, zeroinitializer\n  ret <16 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp eq <16 x i16> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i1> %r"
 },
 {
  "instr": "selecticmpeq",
  "ty": "<16 x i16>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 4,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmeq v1.8h, v1.8h, v3.8h\ncmeq v0.8h, v0.8h, v2.8h\nbsl v1.16b, v5.16b, v7.16b\nbsl v0.16b, v4.16b, v6.16b\nret",
  "giasm": "cmeq v0.8h, v0.8h, v2.8h\ncmeq v1.8h, v1.8h, v3.8h\nbsl v0.16b, v4.16b, v6.16b\nbsl v1.16b, v5.16b, v7.16b\nret",
  "ll": "define <16 x i16> @test(<16 x i16> %a, <16 x i16> %b, <16 x i16> %d, <16 x i16> %e) {\n  %c = icmp eq <16 x i16> %a, %b\n  %r = select <16 x i1> %c, <16 x i16> %d, <16 x i16> %e\n  ret <16 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp eq <16 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <16 x i1> %c, <16 x i16> %d, <16 x i16> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i16> %r"
 },
 {
  "instr": "selecticmpeq",
  "ty": "<16 x i16>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 4,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmeq v1.8h, v1.8h, #0\ncmeq v0.8h, v0.8h, #0\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "giasm": "cmeq v0.8h, v0.8h, #0\ncmeq v1.8h, v1.8h, #0\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "ll": "define <16 x i16> @test(<16 x i16> %a, <16 x i16> %d, <16 x i16> %e) {\n  %c = icmp eq <16 x i16> %a, zeroinitializer\n  %r = select <16 x i1> %c, <16 x i16> %d, <16 x i16> %e\n  ret <16 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp eq <16 x i16> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <16 x i1> %c, <16 x i16> %d, <16 x i16> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i16> %r"
 },
 {
  "instr": "icmpeq",
  "ty": "<2 x i32>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "cmeq v0.2s, v0.2s, v1.2s\nret",
  "giasm": "cmeq v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x i1> @test(<2 x i32> %a, <2 x i32> %b) {\n  %r = icmp eq <2 x i32> %a, %b\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp eq <2 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "icmpeq",
  "ty": "<2 x i32>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "cmeq v0.2s, v0.2s, #0\nret",
  "giasm": "cmeq v0.2s, v0.2s, #0\nret",
  "ll": "define <2 x i1> @test(<2 x i32> %a) {\n  %r = icmp eq <2 x i32> %a, zeroinitializer\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp eq <2 x i32> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "selecticmpeq",
  "ty": "<2 x i32>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmeq v0.2s, v0.2s, v1.2s\nbsl v0.8b, v2.8b, v3.8b\nret",
  "giasm": "cmeq v0.2s, v0.2s, v1.2s\nbsl v0.8b, v2.8b, v3.8b\nret",
  "ll": "define <2 x i32> @test(<2 x i32> %a, <2 x i32> %b, <2 x i32> %d, <2 x i32> %e) {\n  %c = icmp eq <2 x i32> %a, %b\n  %r = select <2 x i1> %c, <2 x i32> %d, <2 x i32> %e\n  ret <2 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp eq <2 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <2 x i1> %c, <2 x i32> %d, <2 x i32> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i32> %r"
 },
 {
  "instr": "selecticmpeq",
  "ty": "<2 x i32>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmeq v0.2s, v0.2s, #0\nbsl v0.8b, v1.8b, v2.8b\nret",
  "giasm": "cmeq v0.2s, v0.2s, #0\nbsl v0.8b, v1.8b, v2.8b\nret",
  "ll": "define <2 x i32> @test(<2 x i32> %a, <2 x i32> %d, <2 x i32> %e) {\n  %c = icmp eq <2 x i32> %a, zeroinitializer\n  %r = select <2 x i1> %c, <2 x i32> %d, <2 x i32> %e\n  ret <2 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp eq <2 x i32> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <2 x i1> %c, <2 x i32> %d, <2 x i32> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i32> %r"
 },
 {
  "instr": "icmpeq",
  "ty": "<4 x i32>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmeq v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "giasm": "cmeq v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x i32> %a, <4 x i32> %b) {\n  %r = icmp eq <4 x i32> %a, %b\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp eq <4 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "icmpeq",
  "ty": "<4 x i32>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmeq v0.4s, v0.4s, #0\nxtn v0.4h, v0.4s\nret",
  "giasm": "cmeq v0.4s, v0.4s, #0\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x i32> %a) {\n  %r = icmp eq <4 x i32> %a, zeroinitializer\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp eq <4 x i32> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "selecticmpeq",
  "ty": "<4 x i32>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmeq v0.4s, v0.4s, v1.4s\nbsl v0.16b, v2.16b, v3.16b\nret",
  "giasm": "cmeq v0.4s, v0.4s, v1.4s\nbsl v0.16b, v2.16b, v3.16b\nret",
  "ll": "define <4 x i32> @test(<4 x i32> %a, <4 x i32> %b, <4 x i32> %d, <4 x i32> %e) {\n  %c = icmp eq <4 x i32> %a, %b\n  %r = select <4 x i1> %c, <4 x i32> %d, <4 x i32> %e\n  ret <4 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp eq <4 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x i32> %d, <4 x i32> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i32> %r"
 },
 {
  "instr": "selecticmpeq",
  "ty": "<4 x i32>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmeq v0.4s, v0.4s, #0\nbsl v0.16b, v1.16b, v2.16b\nret",
  "giasm": "cmeq v0.4s, v0.4s, #0\nbsl v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <4 x i32> @test(<4 x i32> %a, <4 x i32> %d, <4 x i32> %e) {\n  %c = icmp eq <4 x i32> %a, zeroinitializer\n  %r = select <4 x i1> %c, <4 x i32> %d, <4 x i32> %e\n  ret <4 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp eq <4 x i32> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x i32> %d, <4 x i32> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i32> %r"
 },
 {
  "instr": "icmpeq",
  "ty": "<8 x i32>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmeq v1.4s, v1.4s, v3.4s\ncmeq v0.4s, v0.4s, v2.4s\nuzp1 v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "giasm": "cmeq v0.4s, v0.4s, v2.4s\ncmeq v1.4s, v1.4s, v3.4s\nuzp1 v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x i32> %a, <8 x i32> %b) {\n  %r = icmp eq <8 x i32> %a, %b\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp eq <8 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "icmpeq",
  "ty": "<8 x i32>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmeq v1.4s, v1.4s, #0\ncmeq v0.4s, v0.4s, #0\nuzp1 v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "giasm": "cmeq v0.4s, v0.4s, #0\ncmeq v1.4s, v1.4s, #0\nuzp1 v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x i32> %a) {\n  %r = icmp eq <8 x i32> %a, zeroinitializer\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp eq <8 x i32> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "selecticmpeq",
  "ty": "<8 x i32>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 4,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmeq v1.4s, v1.4s, v3.4s\ncmeq v0.4s, v0.4s, v2.4s\nbsl v1.16b, v5.16b, v7.16b\nbsl v0.16b, v4.16b, v6.16b\nret",
  "giasm": "cmeq v0.4s, v0.4s, v2.4s\ncmeq v1.4s, v1.4s, v3.4s\nbsl v0.16b, v4.16b, v6.16b\nbsl v1.16b, v5.16b, v7.16b\nret",
  "ll": "define <8 x i32> @test(<8 x i32> %a, <8 x i32> %b, <8 x i32> %d, <8 x i32> %e) {\n  %c = icmp eq <8 x i32> %a, %b\n  %r = select <8 x i1> %c, <8 x i32> %d, <8 x i32> %e\n  ret <8 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp eq <8 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x i32> %d, <8 x i32> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i32> %r"
 },
 {
  "instr": "selecticmpeq",
  "ty": "<8 x i32>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 4,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmeq v1.4s, v1.4s, #0\ncmeq v0.4s, v0.4s, #0\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "giasm": "cmeq v0.4s, v0.4s, #0\ncmeq v1.4s, v1.4s, #0\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "ll": "define <8 x i32> @test(<8 x i32> %a, <8 x i32> %d, <8 x i32> %e) {\n  %c = icmp eq <8 x i32> %a, zeroinitializer\n  %r = select <8 x i1> %c, <8 x i32> %d, <8 x i32> %e\n  ret <8 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp eq <8 x i32> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x i32> %d, <8 x i32> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i32> %r"
 },
 {
  "instr": "icmpeq",
  "ty": "<2 x i64>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmeq v0.2d, v0.2d, v1.2d\nxtn v0.2s, v0.2d\nret",
  "giasm": "cmeq v0.2d, v0.2d, v1.2d\nxtn v0.2s, v0.2d\nret",
  "ll": "define <2 x i1> @test(<2 x i64> %a, <2 x i64> %b) {\n  %r = icmp eq <2 x i64> %a, %b\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp eq <2 x i64> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "icmpeq",
  "ty": "<2 x i64>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmeq v0.2d, v0.2d, #0\nxtn v0.2s, v0.2d\nret",
  "giasm": "cmeq v0.2d, v0.2d, #0\nxtn v0.2s, v0.2d\nret",
  "ll": "define <2 x i1> @test(<2 x i64> %a) {\n  %r = icmp eq <2 x i64> %a, zeroinitializer\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp eq <2 x i64> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "selecticmpeq",
  "ty": "<2 x i64>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmeq v0.2d, v0.2d, v1.2d\nbsl v0.16b, v2.16b, v3.16b\nret",
  "giasm": "cmeq v0.2d, v0.2d, v1.2d\nbsl v0.16b, v2.16b, v3.16b\nret",
  "ll": "define <2 x i64> @test(<2 x i64> %a, <2 x i64> %b, <2 x i64> %d, <2 x i64> %e) {\n  %c = icmp eq <2 x i64> %a, %b\n  %r = select <2 x i1> %c, <2 x i64> %d, <2 x i64> %e\n  ret <2 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp eq <2 x i64> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <2 x i1> %c, <2 x i64> %d, <2 x i64> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i64> %r"
 },
 {
  "instr": "selecticmpeq",
  "ty": "<2 x i64>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmeq v0.2d, v0.2d, #0\nbsl v0.16b, v1.16b, v2.16b\nret",
  "giasm": "cmeq v0.2d, v0.2d, #0\nbsl v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <2 x i64> @test(<2 x i64> %a, <2 x i64> %d, <2 x i64> %e) {\n  %c = icmp eq <2 x i64> %a, zeroinitializer\n  %r = select <2 x i1> %c, <2 x i64> %d, <2 x i64> %e\n  ret <2 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp eq <2 x i64> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <2 x i1> %c, <2 x i64> %d, <2 x i64> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i64> %r"
 },
 {
  "instr": "icmpeq",
  "ty": "<4 x i64>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmeq v1.2d, v1.2d, v3.2d\ncmeq v0.2d, v0.2d, v2.2d\nuzp1 v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "giasm": "cmeq v0.2d, v0.2d, v2.2d\ncmeq v1.2d, v1.2d, v3.2d\nuzp1 v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x i64> %a, <4 x i64> %b) {\n  %r = icmp eq <4 x i64> %a, %b\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp eq <4 x i64> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "icmpeq",
  "ty": "<4 x i64>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmeq v1.2d, v1.2d, #0\ncmeq v0.2d, v0.2d, #0\nuzp1 v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "giasm": "cmeq v0.2d, v0.2d, #0\ncmeq v1.2d, v1.2d, #0\nuzp1 v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x i64> %a) {\n  %r = icmp eq <4 x i64> %a, zeroinitializer\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp eq <4 x i64> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "selecticmpeq",
  "ty": "<4 x i64>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 4,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmeq v1.2d, v1.2d, v3.2d\ncmeq v0.2d, v0.2d, v2.2d\nbsl v1.16b, v5.16b, v7.16b\nbsl v0.16b, v4.16b, v6.16b\nret",
  "giasm": "cmeq v0.2d, v0.2d, v2.2d\ncmeq v1.2d, v1.2d, v3.2d\nbsl v0.16b, v4.16b, v6.16b\nbsl v1.16b, v5.16b, v7.16b\nret",
  "ll": "define <4 x i64> @test(<4 x i64> %a, <4 x i64> %b, <4 x i64> %d, <4 x i64> %e) {\n  %c = icmp eq <4 x i64> %a, %b\n  %r = select <4 x i1> %c, <4 x i64> %d, <4 x i64> %e\n  ret <4 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp eq <4 x i64> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x i64> %d, <4 x i64> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i64> %r"
 },
 {
  "instr": "selecticmpeq",
  "ty": "<4 x i64>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 4,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmeq v1.2d, v1.2d, #0\ncmeq v0.2d, v0.2d, #0\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "giasm": "cmeq v0.2d, v0.2d, #0\ncmeq v1.2d, v1.2d, #0\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "ll": "define <4 x i64> @test(<4 x i64> %a, <4 x i64> %d, <4 x i64> %e) {\n  %c = icmp eq <4 x i64> %a, zeroinitializer\n  %r = select <4 x i1> %c, <4 x i64> %d, <4 x i64> %e\n  ret <4 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp eq <4 x i64> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x i64> %d, <4 x i64> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i64> %r"
 },
 {
  "instr": "icmpne",
  "ty": "i8",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "and w8, w0, #0xff\ncmp w8, w1, uxtb\ncset w0, ne\nret",
  "giasm": "and w8, w0, #0xff\ncmp w8, w1, uxtb\ncset w0, ne\nret",
  "ll": "define i1 @test(i8 %a, i8 %b) {\n  %r = icmp ne i8 %a, %b\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ne i8 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "icmpne",
  "ty": "i8",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "tst w0, #0xff\ncset w0, ne\nret",
  "giasm": "tst w0, #0xff\ncset w0, ne\nret",
  "ll": "define i1 @test(i8 %a) {\n  %r = icmp ne i8 %a, 0\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ne i8 %a, 0\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "selecticmpne",
  "ty": "i8",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "and w8, w0, #0xff\ncmp w8, w1, uxtb\ncsel w0, w2, w3, ne\nret",
  "giasm": "and w8, w0, #0xff\ncmp w8, w1, uxtb\ncsel w0, w2, w3, ne\nret",
  "ll": "define i8 @test(i8 %a, i8 %b, i8 %d, i8 %e) {\n  %c = icmp ne i8 %a, %b\n  %r = select i1 %c, i8 %d, i8 %e\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ne i8 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i8 %d, i8 %e\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "selecticmpne",
  "ty": "i8",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "tst w0, #0xff\ncsel w0, w1, w2, ne\nret",
  "giasm": "tst w0, #0xff\ncsel w0, w1, w2, ne\nret",
  "ll": "define i8 @test(i8 %a, i8 %d, i8 %e) {\n  %c = icmp ne i8 %a, 0\n  %r = select i1 %c, i8 %d, i8 %e\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ne i8 %a, 0\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i8 %d, i8 %e\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "icmpne",
  "ty": "i16",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "and w8, w0, #0xffff\ncmp w8, w1, uxth\ncset w0, ne\nret",
  "giasm": "and w8, w0, #0xffff\ncmp w8, w1, uxth\ncset w0, ne\nret",
  "ll": "define i1 @test(i16 %a, i16 %b) {\n  %r = icmp ne i16 %a, %b\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ne i16 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "icmpne",
  "ty": "i16",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "tst w0, #0xffff\ncset w0, ne\nret",
  "giasm": "tst w0, #0xffff\ncset w0, ne\nret",
  "ll": "define i1 @test(i16 %a) {\n  %r = icmp ne i16 %a, 0\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ne i16 %a, 0\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "selecticmpne",
  "ty": "i16",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "and w8, w0, #0xffff\ncmp w8, w1, uxth\ncsel w0, w2, w3, ne\nret",
  "giasm": "and w8, w0, #0xffff\ncmp w8, w1, uxth\ncsel w0, w2, w3, ne\nret",
  "ll": "define i16 @test(i16 %a, i16 %b, i16 %d, i16 %e) {\n  %c = icmp ne i16 %a, %b\n  %r = select i1 %c, i16 %d, i16 %e\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ne i16 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i16 %d, i16 %e\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "selecticmpne",
  "ty": "i16",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "tst w0, #0xffff\ncsel w0, w1, w2, ne\nret",
  "giasm": "tst w0, #0xffff\ncsel w0, w1, w2, ne\nret",
  "ll": "define i16 @test(i16 %a, i16 %d, i16 %e) {\n  %c = icmp ne i16 %a, 0\n  %r = select i1 %c, i16 %d, i16 %e\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ne i16 %a, 0\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i16 %d, i16 %e\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "icmpne",
  "ty": "i32",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmp w0, w1\ncset w0, ne\nret",
  "giasm": "cmp w0, w1\ncset w0, ne\nret",
  "ll": "define i1 @test(i32 %a, i32 %b) {\n  %r = icmp ne i32 %a, %b\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ne i32 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "icmpne",
  "ty": "i32",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmp w0, #0\ncset w0, ne\nret",
  "giasm": "cmp w0, #0\ncset w0, ne\nret",
  "ll": "define i1 @test(i32 %a) {\n  %r = icmp ne i32 %a, 0\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ne i32 %a, 0\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "selecticmpne",
  "ty": "i32",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmp w0, w1\ncsel w0, w2, w3, ne\nret",
  "giasm": "cmp w0, w1\ncsel w0, w2, w3, ne\nret",
  "ll": "define i32 @test(i32 %a, i32 %b, i32 %d, i32 %e) {\n  %c = icmp ne i32 %a, %b\n  %r = select i1 %c, i32 %d, i32 %e\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ne i32 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i32 %d, i32 %e\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "selecticmpne",
  "ty": "i32",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmp w0, #0\ncsel w0, w1, w2, ne\nret",
  "giasm": "cmp w0, #0\ncsel w0, w1, w2, ne\nret",
  "ll": "define i32 @test(i32 %a, i32 %d, i32 %e) {\n  %c = icmp ne i32 %a, 0\n  %r = select i1 %c, i32 %d, i32 %e\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ne i32 %a, 0\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i32 %d, i32 %e\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "icmpne",
  "ty": "i64",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmp x0, x1\ncset w0, ne\nret",
  "giasm": "cmp x0, x1\ncset w0, ne\nret",
  "ll": "define i1 @test(i64 %a, i64 %b) {\n  %r = icmp ne i64 %a, %b\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ne i64 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "icmpne",
  "ty": "i64",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmp x0, #0\ncset w0, ne\nret",
  "giasm": "cmp x0, #0\ncset w0, ne\nret",
  "ll": "define i1 @test(i64 %a) {\n  %r = icmp ne i64 %a, 0\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ne i64 %a, 0\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "selecticmpne",
  "ty": "i64",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmp x0, x1\ncsel x0, x2, x3, ne\nret",
  "giasm": "cmp x0, x1\ncsel x0, x2, x3, ne\nret",
  "ll": "define i64 @test(i64 %a, i64 %b, i64 %d, i64 %e) {\n  %c = icmp ne i64 %a, %b\n  %r = select i1 %c, i64 %d, i64 %e\n  ret i64 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ne i64 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i64 %d, i64 %e\nCost Model: Found an estimated cost of 1 for instruction:   ret i64 %r"
 },
 {
  "instr": "selecticmpne",
  "ty": "i64",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmp x0, #0\ncsel x0, x1, x2, ne\nret",
  "giasm": "cmp x0, #0\ncsel x0, x1, x2, ne\nret",
  "ll": "define i64 @test(i64 %a, i64 %d, i64 %e) {\n  %c = icmp ne i64 %a, 0\n  %r = select i1 %c, i64 %d, i64 %e\n  ret i64 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ne i64 %a, 0\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i64 %d, i64 %e\nCost Model: Found an estimated cost of 1 for instruction:   ret i64 %r"
 },
 {
  "instr": "icmpne",
  "ty": "<8 x i8>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmeq v0.8b, v0.8b, v1.8b\nmvn v0.8b, v0.8b\nret",
  "giasm": "cmeq v0.8b, v0.8b, v1.8b\nmvn v0.8b, v0.8b\nret",
  "ll": "define <8 x i1> @test(<8 x i8> %a, <8 x i8> %b) {\n  %r = icmp ne <8 x i8> %a, %b\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ne <8 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "icmpne",
  "ty": "<8 x i8>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "cmtst v0.8b, v0.8b, v0.8b\nret",
  "giasm": "cmtst v0.8b, v0.8b, v0.8b\nret",
  "ll": "define <8 x i1> @test(<8 x i8> %a) {\n  %r = icmp ne <8 x i8> %a, zeroinitializer\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ne <8 x i8> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "selecticmpne",
  "ty": "<8 x i8>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "cmeq v0.8b, v0.8b, v1.8b\nbsl v0.8b, v3.8b, v2.8b\nret",
  "giasm": "cmeq v0.8b, v0.8b, v1.8b\nmvn v0.8b, v0.8b\nbsl v0.8b, v2.8b, v3.8b\nret",
  "ll": "define <8 x i8> @test(<8 x i8> %a, <8 x i8> %b, <8 x i8> %d, <8 x i8> %e) {\n  %c = icmp ne <8 x i8> %a, %b\n  %r = select <8 x i1> %c, <8 x i8> %d, <8 x i8> %e\n  ret <8 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ne <8 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x i8> %d, <8 x i8> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i8> %r"
 },
 {
  "instr": "selecticmpne",
  "ty": "<8 x i8>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmeq v0.8b, v0.8b, #0\nbsl v0.8b, v2.8b, v1.8b\nret",
  "giasm": "cmtst v0.8b, v0.8b, v0.8b\nbsl v0.8b, v1.8b, v2.8b\nret",
  "ll": "define <8 x i8> @test(<8 x i8> %a, <8 x i8> %d, <8 x i8> %e) {\n  %c = icmp ne <8 x i8> %a, zeroinitializer\n  %r = select <8 x i1> %c, <8 x i8> %d, <8 x i8> %e\n  ret <8 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ne <8 x i8> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x i8> %d, <8 x i8> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i8> %r"
 },
 {
  "instr": "icmpne",
  "ty": "<16 x i8>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmeq v0.16b, v0.16b, v1.16b\nmvn v0.16b, v0.16b\nret",
  "giasm": "cmeq v0.16b, v0.16b, v1.16b\nmvn v0.16b, v0.16b\nret",
  "ll": "define <16 x i1> @test(<16 x i8> %a, <16 x i8> %b) {\n  %r = icmp ne <16 x i8> %a, %b\n  ret <16 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ne <16 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i1> %r"
 },
 {
  "instr": "icmpne",
  "ty": "<16 x i8>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "cmtst v0.16b, v0.16b, v0.16b\nret",
  "giasm": "cmtst v0.16b, v0.16b, v0.16b\nret",
  "ll": "define <16 x i1> @test(<16 x i8> %a) {\n  %r = icmp ne <16 x i8> %a, zeroinitializer\n  ret <16 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ne <16 x i8> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i1> %r"
 },
 {
  "instr": "selecticmpne",
  "ty": "<16 x i8>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "cmeq v0.16b, v0.16b, v1.16b\nbsl v0.16b, v3.16b, v2.16b\nret",
  "giasm": "cmeq v0.16b, v0.16b, v1.16b\nmvn v0.16b, v0.16b\nbsl v0.16b, v2.16b, v3.16b\nret",
  "ll": "define <16 x i8> @test(<16 x i8> %a, <16 x i8> %b, <16 x i8> %d, <16 x i8> %e) {\n  %c = icmp ne <16 x i8> %a, %b\n  %r = select <16 x i1> %c, <16 x i8> %d, <16 x i8> %e\n  ret <16 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ne <16 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <16 x i1> %c, <16 x i8> %d, <16 x i8> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i8> %r"
 },
 {
  "instr": "selecticmpne",
  "ty": "<16 x i8>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmeq v0.16b, v0.16b, #0\nbsl v0.16b, v2.16b, v1.16b\nret",
  "giasm": "cmtst v0.16b, v0.16b, v0.16b\nbsl v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <16 x i8> @test(<16 x i8> %a, <16 x i8> %d, <16 x i8> %e) {\n  %c = icmp ne <16 x i8> %a, zeroinitializer\n  %r = select <16 x i1> %c, <16 x i8> %d, <16 x i8> %e\n  ret <16 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ne <16 x i8> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <16 x i1> %c, <16 x i8> %d, <16 x i8> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i8> %r"
 },
 {
  "instr": "icmpne",
  "ty": "<32 x i8>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 14,
  "gisize": -1,
  "extrasize": 0,
  "asm": "cmeq v1.16b, v1.16b, v3.16b\nadrp x9, .LCPI0_0\ncmeq v0.16b, v0.16b, v2.16b\nldr q2, [x9, :lo12:.LCPI0_0]\nbic v1.16b, v2.16b, v1.16b\nbic v0.16b, v2.16b, v0.16b\next v2.16b, v1.16b, v1.16b, #8\next v3.16b, v0.16b, v0.16b, #8\nzip1 v1.16b, v1.16b, v2.16b\nzip1 v0.16b, v0.16b, v3.16b\naddv h1, v1.8h\naddv h0, v0.8h\nstr h1, [x8, #2]\nstr h0, [x8]\nret",
  "giasm": "LLVM ERROR: unable to legalize instruction: G_STORE %8:_(<32 x s8>), %2:_(p0) :: (store (<32 x s1>)) (in function: test)",
  "ll": "define <32 x i1> @test(<32 x i8> %a, <32 x i8> %b) {\n  %r = icmp ne <32 x i8> %a, %b\n  ret <32 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ne <32 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i1> %r"
 },
 {
  "instr": "icmpne",
  "ty": "<32 x i8>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 14,
  "gisize": -1,
  "extrasize": 0,
  "asm": "adrp x9, .LCPI0_0\ncmeq v1.16b, v1.16b, #0\ncmeq v0.16b, v0.16b, #0\nldr q2, [x9, :lo12:.LCPI0_0]\nbic v1.16b, v2.16b, v1.16b\nbic v0.16b, v2.16b, v0.16b\next v2.16b, v1.16b, v1.16b, #8\next v3.16b, v0.16b, v0.16b, #8\nzip1 v1.16b, v1.16b, v2.16b\nzip1 v0.16b, v0.16b, v3.16b\naddv h1, v1.8h\naddv h0, v0.8h\nstr h1, [x8, #2]\nstr h0, [x8]\nret",
  "giasm": "LLVM ERROR: unable to legalize instruction: G_STORE %7:_(<32 x s8>), %1:_(p0) :: (store (<32 x s1>)) (in function: test)",
  "ll": "define <32 x i1> @test(<32 x i8> %a) {\n  %r = icmp ne <32 x i8> %a, zeroinitializer\n  ret <32 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ne <32 x i8> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i1> %r"
 },
 {
  "instr": "selecticmpne",
  "ty": "<32 x i8>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 4,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 6,
  "extrasize": 0,
  "asm": "cmeq v1.16b, v1.16b, v3.16b\ncmeq v0.16b, v0.16b, v2.16b\nbsl v1.16b, v7.16b, v5.16b\nbsl v0.16b, v6.16b, v4.16b\nret",
  "giasm": "cmeq v0.16b, v0.16b, v2.16b\ncmeq v1.16b, v1.16b, v3.16b\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nbsl v0.16b, v4.16b, v6.16b\nbsl v1.16b, v5.16b, v7.16b\nret",
  "ll": "define <32 x i8> @test(<32 x i8> %a, <32 x i8> %b, <32 x i8> %d, <32 x i8> %e) {\n  %c = icmp ne <32 x i8> %a, %b\n  %r = select <32 x i1> %c, <32 x i8> %d, <32 x i8> %e\n  ret <32 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ne <32 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <32 x i1> %c, <32 x i8> %d, <32 x i8> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i8> %r"
 },
 {
  "instr": "selecticmpne",
  "ty": "<32 x i8>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 4,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmeq v1.16b, v1.16b, #0\ncmeq v0.16b, v0.16b, #0\nbsl v0.16b, v4.16b, v2.16b\nbsl v1.16b, v5.16b, v3.16b\nret",
  "giasm": "cmtst v0.16b, v0.16b, v0.16b\ncmtst v1.16b, v1.16b, v1.16b\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "ll": "define <32 x i8> @test(<32 x i8> %a, <32 x i8> %d, <32 x i8> %e) {\n  %c = icmp ne <32 x i8> %a, zeroinitializer\n  %r = select <32 x i1> %c, <32 x i8> %d, <32 x i8> %e\n  ret <32 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ne <32 x i8> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <32 x i1> %c, <32 x i8> %d, <32 x i8> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i8> %r"
 },
 {
  "instr": "icmpne",
  "ty": "<4 x i16>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmeq v0.4h, v0.4h, v1.4h\nmvn v0.8b, v0.8b\nret",
  "giasm": "cmeq v0.4h, v0.4h, v1.4h\nmvn v0.8b, v0.8b\nret",
  "ll": "define <4 x i1> @test(<4 x i16> %a, <4 x i16> %b) {\n  %r = icmp ne <4 x i16> %a, %b\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ne <4 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "icmpne",
  "ty": "<4 x i16>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "cmtst v0.4h, v0.4h, v0.4h\nret",
  "giasm": "cmtst v0.4h, v0.4h, v0.4h\nret",
  "ll": "define <4 x i1> @test(<4 x i16> %a) {\n  %r = icmp ne <4 x i16> %a, zeroinitializer\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ne <4 x i16> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "selecticmpne",
  "ty": "<4 x i16>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "cmeq v0.4h, v0.4h, v1.4h\nbsl v0.8b, v3.8b, v2.8b\nret",
  "giasm": "cmeq v0.4h, v0.4h, v1.4h\nmvn v0.8b, v0.8b\nbsl v0.8b, v2.8b, v3.8b\nret",
  "ll": "define <4 x i16> @test(<4 x i16> %a, <4 x i16> %b, <4 x i16> %d, <4 x i16> %e) {\n  %c = icmp ne <4 x i16> %a, %b\n  %r = select <4 x i1> %c, <4 x i16> %d, <4 x i16> %e\n  ret <4 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ne <4 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x i16> %d, <4 x i16> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i16> %r"
 },
 {
  "instr": "selecticmpne",
  "ty": "<4 x i16>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmeq v0.4h, v0.4h, #0\nbsl v0.8b, v2.8b, v1.8b\nret",
  "giasm": "cmtst v0.4h, v0.4h, v0.4h\nbsl v0.8b, v1.8b, v2.8b\nret",
  "ll": "define <4 x i16> @test(<4 x i16> %a, <4 x i16> %d, <4 x i16> %e) {\n  %c = icmp ne <4 x i16> %a, zeroinitializer\n  %r = select <4 x i1> %c, <4 x i16> %d, <4 x i16> %e\n  ret <4 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ne <4 x i16> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x i16> %d, <4 x i16> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i16> %r"
 },
 {
  "instr": "icmpne",
  "ty": "<8 x i16>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "cmeq v0.8h, v0.8h, v1.8h\nmvn v0.16b, v0.16b\nxtn v0.8b, v0.8h\nret",
  "giasm": "cmeq v0.8h, v0.8h, v1.8h\nmvn v0.16b, v0.16b\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x i16> %a, <8 x i16> %b) {\n  %r = icmp ne <8 x i16> %a, %b\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ne <8 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "icmpne",
  "ty": "<8 x i16>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmtst v0.8h, v0.8h, v0.8h\nxtn v0.8b, v0.8h\nret",
  "giasm": "cmtst v0.8h, v0.8h, v0.8h\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x i16> %a) {\n  %r = icmp ne <8 x i16> %a, zeroinitializer\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ne <8 x i16> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "selecticmpne",
  "ty": "<8 x i16>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "cmeq v0.8h, v0.8h, v1.8h\nbsl v0.16b, v3.16b, v2.16b\nret",
  "giasm": "cmeq v0.8h, v0.8h, v1.8h\nmvn v0.16b, v0.16b\nbsl v0.16b, v2.16b, v3.16b\nret",
  "ll": "define <8 x i16> @test(<8 x i16> %a, <8 x i16> %b, <8 x i16> %d, <8 x i16> %e) {\n  %c = icmp ne <8 x i16> %a, %b\n  %r = select <8 x i1> %c, <8 x i16> %d, <8 x i16> %e\n  ret <8 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ne <8 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x i16> %d, <8 x i16> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i16> %r"
 },
 {
  "instr": "selecticmpne",
  "ty": "<8 x i16>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmeq v0.8h, v0.8h, #0\nbsl v0.16b, v2.16b, v1.16b\nret",
  "giasm": "cmtst v0.8h, v0.8h, v0.8h\nbsl v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <8 x i16> @test(<8 x i16> %a, <8 x i16> %d, <8 x i16> %e) {\n  %c = icmp ne <8 x i16> %a, zeroinitializer\n  %r = select <8 x i1> %c, <8 x i16> %d, <8 x i16> %e\n  ret <8 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ne <8 x i16> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x i16> %d, <8 x i16> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i16> %r"
 },
 {
  "instr": "icmpne",
  "ty": "<16 x i16>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 5,
  "extrasize": 0,
  "asm": "cmeq v1.8h, v1.8h, v3.8h\ncmeq v0.8h, v0.8h, v2.8h\nuzp1 v0.16b, v0.16b, v1.16b\nmvn v0.16b, v0.16b\nret",
  "giasm": "cmeq v0.8h, v0.8h, v2.8h\ncmeq v1.8h, v1.8h, v3.8h\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nuzp1 v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <16 x i1> @test(<16 x i16> %a, <16 x i16> %b) {\n  %r = icmp ne <16 x i16> %a, %b\n  ret <16 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ne <16 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i1> %r"
 },
 {
  "instr": "icmpne",
  "ty": "<16 x i16>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 3,
  "extrasize": 0,
  "asm": "cmeq v1.8h, v1.8h, #0\ncmeq v0.8h, v0.8h, #0\nuzp1 v0.16b, v0.16b, v1.16b\nmvn v0.16b, v0.16b\nret",
  "giasm": "cmtst v0.8h, v0.8h, v0.8h\ncmtst v1.8h, v1.8h, v1.8h\nuzp1 v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <16 x i1> @test(<16 x i16> %a) {\n  %r = icmp ne <16 x i16> %a, zeroinitializer\n  ret <16 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ne <16 x i16> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i1> %r"
 },
 {
  "instr": "selecticmpne",
  "ty": "<16 x i16>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 4,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 6,
  "extrasize": 0,
  "asm": "cmeq v1.8h, v1.8h, v3.8h\ncmeq v0.8h, v0.8h, v2.8h\nbsl v1.16b, v7.16b, v5.16b\nbsl v0.16b, v6.16b, v4.16b\nret",
  "giasm": "cmeq v0.8h, v0.8h, v2.8h\ncmeq v1.8h, v1.8h, v3.8h\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nbsl v0.16b, v4.16b, v6.16b\nbsl v1.16b, v5.16b, v7.16b\nret",
  "ll": "define <16 x i16> @test(<16 x i16> %a, <16 x i16> %b, <16 x i16> %d, <16 x i16> %e) {\n  %c = icmp ne <16 x i16> %a, %b\n  %r = select <16 x i1> %c, <16 x i16> %d, <16 x i16> %e\n  ret <16 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ne <16 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <16 x i1> %c, <16 x i16> %d, <16 x i16> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i16> %r"
 },
 {
  "instr": "selecticmpne",
  "ty": "<16 x i16>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 4,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmeq v1.8h, v1.8h, #0\ncmeq v0.8h, v0.8h, #0\nbsl v0.16b, v4.16b, v2.16b\nbsl v1.16b, v5.16b, v3.16b\nret",
  "giasm": "cmtst v0.8h, v0.8h, v0.8h\ncmtst v1.8h, v1.8h, v1.8h\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "ll": "define <16 x i16> @test(<16 x i16> %a, <16 x i16> %d, <16 x i16> %e) {\n  %c = icmp ne <16 x i16> %a, zeroinitializer\n  %r = select <16 x i1> %c, <16 x i16> %d, <16 x i16> %e\n  ret <16 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ne <16 x i16> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <16 x i1> %c, <16 x i16> %d, <16 x i16> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i16> %r"
 },
 {
  "instr": "icmpne",
  "ty": "<2 x i32>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmeq v0.2s, v0.2s, v1.2s\nmvn v0.8b, v0.8b\nret",
  "giasm": "cmeq v0.2s, v0.2s, v1.2s\nmvn v0.8b, v0.8b\nret",
  "ll": "define <2 x i1> @test(<2 x i32> %a, <2 x i32> %b) {\n  %r = icmp ne <2 x i32> %a, %b\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ne <2 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "icmpne",
  "ty": "<2 x i32>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "cmtst v0.2s, v0.2s, v0.2s\nret",
  "giasm": "cmtst v0.2s, v0.2s, v0.2s\nret",
  "ll": "define <2 x i1> @test(<2 x i32> %a) {\n  %r = icmp ne <2 x i32> %a, zeroinitializer\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ne <2 x i32> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "selecticmpne",
  "ty": "<2 x i32>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "cmeq v0.2s, v0.2s, v1.2s\nbsl v0.8b, v3.8b, v2.8b\nret",
  "giasm": "cmeq v0.2s, v0.2s, v1.2s\nmvn v0.8b, v0.8b\nbsl v0.8b, v2.8b, v3.8b\nret",
  "ll": "define <2 x i32> @test(<2 x i32> %a, <2 x i32> %b, <2 x i32> %d, <2 x i32> %e) {\n  %c = icmp ne <2 x i32> %a, %b\n  %r = select <2 x i1> %c, <2 x i32> %d, <2 x i32> %e\n  ret <2 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ne <2 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <2 x i1> %c, <2 x i32> %d, <2 x i32> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i32> %r"
 },
 {
  "instr": "selecticmpne",
  "ty": "<2 x i32>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmeq v0.2s, v0.2s, #0\nbsl v0.8b, v2.8b, v1.8b\nret",
  "giasm": "cmtst v0.2s, v0.2s, v0.2s\nbsl v0.8b, v1.8b, v2.8b\nret",
  "ll": "define <2 x i32> @test(<2 x i32> %a, <2 x i32> %d, <2 x i32> %e) {\n  %c = icmp ne <2 x i32> %a, zeroinitializer\n  %r = select <2 x i1> %c, <2 x i32> %d, <2 x i32> %e\n  ret <2 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ne <2 x i32> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <2 x i1> %c, <2 x i32> %d, <2 x i32> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i32> %r"
 },
 {
  "instr": "icmpne",
  "ty": "<4 x i32>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "cmeq v0.4s, v0.4s, v1.4s\nmvn v0.16b, v0.16b\nxtn v0.4h, v0.4s\nret",
  "giasm": "cmeq v0.4s, v0.4s, v1.4s\nmvn v0.16b, v0.16b\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x i32> %a, <4 x i32> %b) {\n  %r = icmp ne <4 x i32> %a, %b\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ne <4 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "icmpne",
  "ty": "<4 x i32>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmtst v0.4s, v0.4s, v0.4s\nxtn v0.4h, v0.4s\nret",
  "giasm": "cmtst v0.4s, v0.4s, v0.4s\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x i32> %a) {\n  %r = icmp ne <4 x i32> %a, zeroinitializer\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ne <4 x i32> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "selecticmpne",
  "ty": "<4 x i32>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "cmeq v0.4s, v0.4s, v1.4s\nbsl v0.16b, v3.16b, v2.16b\nret",
  "giasm": "cmeq v0.4s, v0.4s, v1.4s\nmvn v0.16b, v0.16b\nbsl v0.16b, v2.16b, v3.16b\nret",
  "ll": "define <4 x i32> @test(<4 x i32> %a, <4 x i32> %b, <4 x i32> %d, <4 x i32> %e) {\n  %c = icmp ne <4 x i32> %a, %b\n  %r = select <4 x i1> %c, <4 x i32> %d, <4 x i32> %e\n  ret <4 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ne <4 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x i32> %d, <4 x i32> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i32> %r"
 },
 {
  "instr": "selecticmpne",
  "ty": "<4 x i32>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmeq v0.4s, v0.4s, #0\nbsl v0.16b, v2.16b, v1.16b\nret",
  "giasm": "cmtst v0.4s, v0.4s, v0.4s\nbsl v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <4 x i32> @test(<4 x i32> %a, <4 x i32> %d, <4 x i32> %e) {\n  %c = icmp ne <4 x i32> %a, zeroinitializer\n  %r = select <4 x i1> %c, <4 x i32> %d, <4 x i32> %e\n  ret <4 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ne <4 x i32> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x i32> %d, <4 x i32> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i32> %r"
 },
 {
  "instr": "icmpne",
  "ty": "<8 x i32>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 5,
  "gisize": 6,
  "extrasize": 0,
  "asm": "cmeq v1.4s, v1.4s, v3.4s\ncmeq v0.4s, v0.4s, v2.4s\nuzp1 v0.8h, v0.8h, v1.8h\nmvn v0.16b, v0.16b\nxtn v0.8b, v0.8h\nret",
  "giasm": "cmeq v0.4s, v0.4s, v2.4s\ncmeq v1.4s, v1.4s, v3.4s\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nuzp1 v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x i32> %a, <8 x i32> %b) {\n  %r = icmp ne <8 x i32> %a, %b\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ne <8 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "icmpne",
  "ty": "<8 x i32>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 5,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmeq v1.4s, v1.4s, #0\ncmeq v0.4s, v0.4s, #0\nuzp1 v0.8h, v0.8h, v1.8h\nmvn v0.16b, v0.16b\nxtn v0.8b, v0.8h\nret",
  "giasm": "cmtst v0.4s, v0.4s, v0.4s\ncmtst v1.4s, v1.4s, v1.4s\nuzp1 v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x i32> %a) {\n  %r = icmp ne <8 x i32> %a, zeroinitializer\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ne <8 x i32> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "selecticmpne",
  "ty": "<8 x i32>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 4,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 6,
  "extrasize": 0,
  "asm": "cmeq v1.4s, v1.4s, v3.4s\ncmeq v0.4s, v0.4s, v2.4s\nbsl v1.16b, v7.16b, v5.16b\nbsl v0.16b, v6.16b, v4.16b\nret",
  "giasm": "cmeq v0.4s, v0.4s, v2.4s\ncmeq v1.4s, v1.4s, v3.4s\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nbsl v0.16b, v4.16b, v6.16b\nbsl v1.16b, v5.16b, v7.16b\nret",
  "ll": "define <8 x i32> @test(<8 x i32> %a, <8 x i32> %b, <8 x i32> %d, <8 x i32> %e) {\n  %c = icmp ne <8 x i32> %a, %b\n  %r = select <8 x i1> %c, <8 x i32> %d, <8 x i32> %e\n  ret <8 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ne <8 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x i32> %d, <8 x i32> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i32> %r"
 },
 {
  "instr": "selecticmpne",
  "ty": "<8 x i32>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 4,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmeq v1.4s, v1.4s, #0\ncmeq v0.4s, v0.4s, #0\nbsl v0.16b, v4.16b, v2.16b\nbsl v1.16b, v5.16b, v3.16b\nret",
  "giasm": "cmtst v0.4s, v0.4s, v0.4s\ncmtst v1.4s, v1.4s, v1.4s\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "ll": "define <8 x i32> @test(<8 x i32> %a, <8 x i32> %d, <8 x i32> %e) {\n  %c = icmp ne <8 x i32> %a, zeroinitializer\n  %r = select <8 x i1> %c, <8 x i32> %d, <8 x i32> %e\n  ret <8 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ne <8 x i32> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x i32> %d, <8 x i32> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i32> %r"
 },
 {
  "instr": "icmpne",
  "ty": "<2 x i64>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "cmeq v0.2d, v0.2d, v1.2d\nmvn v0.16b, v0.16b\nxtn v0.2s, v0.2d\nret",
  "giasm": "cmeq v0.2d, v0.2d, v1.2d\nmvn v0.16b, v0.16b\nxtn v0.2s, v0.2d\nret",
  "ll": "define <2 x i1> @test(<2 x i64> %a, <2 x i64> %b) {\n  %r = icmp ne <2 x i64> %a, %b\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ne <2 x i64> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "icmpne",
  "ty": "<2 x i64>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmtst v0.2d, v0.2d, v0.2d\nxtn v0.2s, v0.2d\nret",
  "giasm": "cmtst v0.2d, v0.2d, v0.2d\nxtn v0.2s, v0.2d\nret",
  "ll": "define <2 x i1> @test(<2 x i64> %a) {\n  %r = icmp ne <2 x i64> %a, zeroinitializer\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ne <2 x i64> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "selecticmpne",
  "ty": "<2 x i64>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "cmeq v0.2d, v0.2d, v1.2d\nbsl v0.16b, v3.16b, v2.16b\nret",
  "giasm": "cmeq v0.2d, v0.2d, v1.2d\nmvn v0.16b, v0.16b\nbsl v0.16b, v2.16b, v3.16b\nret",
  "ll": "define <2 x i64> @test(<2 x i64> %a, <2 x i64> %b, <2 x i64> %d, <2 x i64> %e) {\n  %c = icmp ne <2 x i64> %a, %b\n  %r = select <2 x i1> %c, <2 x i64> %d, <2 x i64> %e\n  ret <2 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ne <2 x i64> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <2 x i1> %c, <2 x i64> %d, <2 x i64> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i64> %r"
 },
 {
  "instr": "selecticmpne",
  "ty": "<2 x i64>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmeq v0.2d, v0.2d, #0\nbsl v0.16b, v2.16b, v1.16b\nret",
  "giasm": "cmtst v0.2d, v0.2d, v0.2d\nbsl v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <2 x i64> @test(<2 x i64> %a, <2 x i64> %d, <2 x i64> %e) {\n  %c = icmp ne <2 x i64> %a, zeroinitializer\n  %r = select <2 x i1> %c, <2 x i64> %d, <2 x i64> %e\n  ret <2 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ne <2 x i64> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <2 x i1> %c, <2 x i64> %d, <2 x i64> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i64> %r"
 },
 {
  "instr": "icmpne",
  "ty": "<4 x i64>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 5,
  "gisize": 6,
  "extrasize": 0,
  "asm": "cmeq v1.2d, v1.2d, v3.2d\ncmeq v0.2d, v0.2d, v2.2d\nuzp1 v0.4s, v0.4s, v1.4s\nmvn v0.16b, v0.16b\nxtn v0.4h, v0.4s\nret",
  "giasm": "cmeq v0.2d, v0.2d, v2.2d\ncmeq v1.2d, v1.2d, v3.2d\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nuzp1 v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x i64> %a, <4 x i64> %b) {\n  %r = icmp ne <4 x i64> %a, %b\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ne <4 x i64> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "icmpne",
  "ty": "<4 x i64>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 5,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmeq v1.2d, v1.2d, #0\ncmeq v0.2d, v0.2d, #0\nuzp1 v0.4s, v0.4s, v1.4s\nmvn v0.16b, v0.16b\nxtn v0.4h, v0.4s\nret",
  "giasm": "cmtst v0.2d, v0.2d, v0.2d\ncmtst v1.2d, v1.2d, v1.2d\nuzp1 v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x i64> %a) {\n  %r = icmp ne <4 x i64> %a, zeroinitializer\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ne <4 x i64> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "selecticmpne",
  "ty": "<4 x i64>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 4,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 6,
  "extrasize": 0,
  "asm": "cmeq v1.2d, v1.2d, v3.2d\ncmeq v0.2d, v0.2d, v2.2d\nbsl v1.16b, v7.16b, v5.16b\nbsl v0.16b, v6.16b, v4.16b\nret",
  "giasm": "cmeq v0.2d, v0.2d, v2.2d\ncmeq v1.2d, v1.2d, v3.2d\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nbsl v0.16b, v4.16b, v6.16b\nbsl v1.16b, v5.16b, v7.16b\nret",
  "ll": "define <4 x i64> @test(<4 x i64> %a, <4 x i64> %b, <4 x i64> %d, <4 x i64> %e) {\n  %c = icmp ne <4 x i64> %a, %b\n  %r = select <4 x i1> %c, <4 x i64> %d, <4 x i64> %e\n  ret <4 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ne <4 x i64> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x i64> %d, <4 x i64> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i64> %r"
 },
 {
  "instr": "selecticmpne",
  "ty": "<4 x i64>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 4,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmeq v1.2d, v1.2d, #0\ncmeq v0.2d, v0.2d, #0\nbsl v0.16b, v4.16b, v2.16b\nbsl v1.16b, v5.16b, v3.16b\nret",
  "giasm": "cmtst v0.2d, v0.2d, v0.2d\ncmtst v1.2d, v1.2d, v1.2d\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "ll": "define <4 x i64> @test(<4 x i64> %a, <4 x i64> %d, <4 x i64> %e) {\n  %c = icmp ne <4 x i64> %a, zeroinitializer\n  %r = select <4 x i1> %c, <4 x i64> %d, <4 x i64> %e\n  ret <4 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ne <4 x i64> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x i64> %d, <4 x i64> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i64> %r"
 },
 {
  "instr": "icmpslt",
  "ty": "i8",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "sxtb w8, w0\ncmp w8, w1, sxtb\ncset w0, lt\nret",
  "giasm": "sxtb w8, w0\ncmp w8, w1, sxtb\ncset w0, lt\nret",
  "ll": "define i1 @test(i8 %a, i8 %b) {\n  %r = icmp slt i8 %a, %b\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp slt i8 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "icmpslt",
  "ty": "i8",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 3,
  "extrasize": 0,
  "asm": "ubfx w0, w0, #7, #1\nret",
  "giasm": "sxtb w8, w0\ncmp w8, #0\ncset w0, lt\nret",
  "ll": "define i1 @test(i8 %a) {\n  %r = icmp slt i8 %a, 0\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp slt i8 %a, 0\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "selecticmpslt",
  "ty": "i8",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "sxtb w8, w0\ncmp w8, w1, sxtb\ncsel w0, w2, w3, lt\nret",
  "giasm": "sxtb w8, w0\ncmp w8, w1, sxtb\ncsel w0, w2, w3, lt\nret",
  "ll": "define i8 @test(i8 %a, i8 %b, i8 %d, i8 %e) {\n  %c = icmp slt i8 %a, %b\n  %r = select i1 %c, i8 %d, i8 %e\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp slt i8 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i8 %d, i8 %e\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "selecticmpslt",
  "ty": "i8",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "sxtb w8, w0\ncmp w8, #0\ncsel w0, w1, w2, lt\nret",
  "giasm": "sxtb w8, w0\ncmp w8, #0\ncsel w0, w1, w2, lt\nret",
  "ll": "define i8 @test(i8 %a, i8 %d, i8 %e) {\n  %c = icmp slt i8 %a, 0\n  %r = select i1 %c, i8 %d, i8 %e\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp slt i8 %a, 0\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i8 %d, i8 %e\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "icmpslt",
  "ty": "i16",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "sxth w8, w0\ncmp w8, w1, sxth\ncset w0, lt\nret",
  "giasm": "sxth w8, w0\ncmp w8, w1, sxth\ncset w0, lt\nret",
  "ll": "define i1 @test(i16 %a, i16 %b) {\n  %r = icmp slt i16 %a, %b\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp slt i16 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "icmpslt",
  "ty": "i16",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 3,
  "extrasize": 0,
  "asm": "ubfx w0, w0, #15, #1\nret",
  "giasm": "sxth w8, w0\ncmp w8, #0\ncset w0, lt\nret",
  "ll": "define i1 @test(i16 %a) {\n  %r = icmp slt i16 %a, 0\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp slt i16 %a, 0\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "selecticmpslt",
  "ty": "i16",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "sxth w8, w0\ncmp w8, w1, sxth\ncsel w0, w2, w3, lt\nret",
  "giasm": "sxth w8, w0\ncmp w8, w1, sxth\ncsel w0, w2, w3, lt\nret",
  "ll": "define i16 @test(i16 %a, i16 %b, i16 %d, i16 %e) {\n  %c = icmp slt i16 %a, %b\n  %r = select i1 %c, i16 %d, i16 %e\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp slt i16 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i16 %d, i16 %e\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "selecticmpslt",
  "ty": "i16",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "sxth w8, w0\ncmp w8, #0\ncsel w0, w1, w2, lt\nret",
  "giasm": "sxth w8, w0\ncmp w8, #0\ncsel w0, w1, w2, lt\nret",
  "ll": "define i16 @test(i16 %a, i16 %d, i16 %e) {\n  %c = icmp slt i16 %a, 0\n  %r = select i1 %c, i16 %d, i16 %e\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp slt i16 %a, 0\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i16 %d, i16 %e\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "icmpslt",
  "ty": "i32",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmp w0, w1\ncset w0, lt\nret",
  "giasm": "cmp w0, w1\ncset w0, lt\nret",
  "ll": "define i1 @test(i32 %a, i32 %b) {\n  %r = icmp slt i32 %a, %b\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp slt i32 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "icmpslt",
  "ty": "i32",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 2,
  "extrasize": 0,
  "asm": "lsr w0, w0, #31\nret",
  "giasm": "cmp w0, #0\ncset w0, lt\nret",
  "ll": "define i1 @test(i32 %a) {\n  %r = icmp slt i32 %a, 0\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp slt i32 %a, 0\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "selecticmpslt",
  "ty": "i32",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmp w0, w1\ncsel w0, w2, w3, lt\nret",
  "giasm": "cmp w0, w1\ncsel w0, w2, w3, lt\nret",
  "ll": "define i32 @test(i32 %a, i32 %b, i32 %d, i32 %e) {\n  %c = icmp slt i32 %a, %b\n  %r = select i1 %c, i32 %d, i32 %e\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp slt i32 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i32 %d, i32 %e\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "selecticmpslt",
  "ty": "i32",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmp w0, #0\ncsel w0, w1, w2, lt\nret",
  "giasm": "cmp w0, #0\ncsel w0, w1, w2, lt\nret",
  "ll": "define i32 @test(i32 %a, i32 %d, i32 %e) {\n  %c = icmp slt i32 %a, 0\n  %r = select i1 %c, i32 %d, i32 %e\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp slt i32 %a, 0\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i32 %d, i32 %e\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "icmpslt",
  "ty": "i64",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmp x0, x1\ncset w0, lt\nret",
  "giasm": "cmp x0, x1\ncset w0, lt\nret",
  "ll": "define i1 @test(i64 %a, i64 %b) {\n  %r = icmp slt i64 %a, %b\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp slt i64 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "icmpslt",
  "ty": "i64",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 2,
  "extrasize": 0,
  "asm": "lsr x0, x0, #63\nret",
  "giasm": "cmp x0, #0\ncset w0, lt\nret",
  "ll": "define i1 @test(i64 %a) {\n  %r = icmp slt i64 %a, 0\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp slt i64 %a, 0\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "selecticmpslt",
  "ty": "i64",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmp x0, x1\ncsel x0, x2, x3, lt\nret",
  "giasm": "cmp x0, x1\ncsel x0, x2, x3, lt\nret",
  "ll": "define i64 @test(i64 %a, i64 %b, i64 %d, i64 %e) {\n  %c = icmp slt i64 %a, %b\n  %r = select i1 %c, i64 %d, i64 %e\n  ret i64 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp slt i64 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i64 %d, i64 %e\nCost Model: Found an estimated cost of 1 for instruction:   ret i64 %r"
 },
 {
  "instr": "selecticmpslt",
  "ty": "i64",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmp x0, #0\ncsel x0, x1, x2, lt\nret",
  "giasm": "cmp x0, #0\ncsel x0, x1, x2, lt\nret",
  "ll": "define i64 @test(i64 %a, i64 %d, i64 %e) {\n  %c = icmp slt i64 %a, 0\n  %r = select i1 %c, i64 %d, i64 %e\n  ret i64 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp slt i64 %a, 0\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i64 %d, i64 %e\nCost Model: Found an estimated cost of 1 for instruction:   ret i64 %r"
 },
 {
  "instr": "icmpslt",
  "ty": "<8 x i8>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "cmgt v0.8b, v1.8b, v0.8b\nret",
  "giasm": "cmgt v0.8b, v1.8b, v0.8b\nret",
  "ll": "define <8 x i1> @test(<8 x i8> %a, <8 x i8> %b) {\n  %r = icmp slt <8 x i8> %a, %b\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp slt <8 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "icmpslt",
  "ty": "<8 x i8>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "cmlt v0.8b, v0.8b, #0\nret",
  "giasm": "cmlt v0.8b, v0.8b, #0\nret",
  "ll": "define <8 x i1> @test(<8 x i8> %a) {\n  %r = icmp slt <8 x i8> %a, zeroinitializer\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp slt <8 x i8> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "selecticmpslt",
  "ty": "<8 x i8>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmgt v0.8b, v1.8b, v0.8b\nbsl v0.8b, v2.8b, v3.8b\nret",
  "giasm": "cmgt v0.8b, v1.8b, v0.8b\nbsl v0.8b, v2.8b, v3.8b\nret",
  "ll": "define <8 x i8> @test(<8 x i8> %a, <8 x i8> %b, <8 x i8> %d, <8 x i8> %e) {\n  %c = icmp slt <8 x i8> %a, %b\n  %r = select <8 x i1> %c, <8 x i8> %d, <8 x i8> %e\n  ret <8 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp slt <8 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x i8> %d, <8 x i8> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i8> %r"
 },
 {
  "instr": "selecticmpslt",
  "ty": "<8 x i8>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmlt v0.8b, v0.8b, #0\nbsl v0.8b, v1.8b, v2.8b\nret",
  "giasm": "cmlt v0.8b, v0.8b, #0\nbsl v0.8b, v1.8b, v2.8b\nret",
  "ll": "define <8 x i8> @test(<8 x i8> %a, <8 x i8> %d, <8 x i8> %e) {\n  %c = icmp slt <8 x i8> %a, zeroinitializer\n  %r = select <8 x i1> %c, <8 x i8> %d, <8 x i8> %e\n  ret <8 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp slt <8 x i8> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x i8> %d, <8 x i8> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i8> %r"
 },
 {
  "instr": "icmpslt",
  "ty": "<16 x i8>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "cmgt v0.16b, v1.16b, v0.16b\nret",
  "giasm": "cmgt v0.16b, v1.16b, v0.16b\nret",
  "ll": "define <16 x i1> @test(<16 x i8> %a, <16 x i8> %b) {\n  %r = icmp slt <16 x i8> %a, %b\n  ret <16 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp slt <16 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i1> %r"
 },
 {
  "instr": "icmpslt",
  "ty": "<16 x i8>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "cmlt v0.16b, v0.16b, #0\nret",
  "giasm": "cmlt v0.16b, v0.16b, #0\nret",
  "ll": "define <16 x i1> @test(<16 x i8> %a) {\n  %r = icmp slt <16 x i8> %a, zeroinitializer\n  ret <16 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp slt <16 x i8> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i1> %r"
 },
 {
  "instr": "selecticmpslt",
  "ty": "<16 x i8>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmgt v0.16b, v1.16b, v0.16b\nbsl v0.16b, v2.16b, v3.16b\nret",
  "giasm": "cmgt v0.16b, v1.16b, v0.16b\nbsl v0.16b, v2.16b, v3.16b\nret",
  "ll": "define <16 x i8> @test(<16 x i8> %a, <16 x i8> %b, <16 x i8> %d, <16 x i8> %e) {\n  %c = icmp slt <16 x i8> %a, %b\n  %r = select <16 x i1> %c, <16 x i8> %d, <16 x i8> %e\n  ret <16 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp slt <16 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <16 x i1> %c, <16 x i8> %d, <16 x i8> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i8> %r"
 },
 {
  "instr": "selecticmpslt",
  "ty": "<16 x i8>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmlt v0.16b, v0.16b, #0\nbsl v0.16b, v1.16b, v2.16b\nret",
  "giasm": "cmlt v0.16b, v0.16b, #0\nbsl v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <16 x i8> @test(<16 x i8> %a, <16 x i8> %d, <16 x i8> %e) {\n  %c = icmp slt <16 x i8> %a, zeroinitializer\n  %r = select <16 x i1> %c, <16 x i8> %d, <16 x i8> %e\n  ret <16 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp slt <16 x i8> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <16 x i1> %c, <16 x i8> %d, <16 x i8> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i8> %r"
 },
 {
  "instr": "icmpslt",
  "ty": "<32 x i8>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 14,
  "gisize": -1,
  "extrasize": 0,
  "asm": "cmgt v1.16b, v3.16b, v1.16b\nadrp x9, .LCPI0_0\ncmgt v0.16b, v2.16b, v0.16b\nldr q2, [x9, :lo12:.LCPI0_0]\nand v1.16b, v1.16b, v2.16b\nand v0.16b, v0.16b, v2.16b\next v2.16b, v1.16b, v1.16b, #8\next v3.16b, v0.16b, v0.16b, #8\nzip1 v1.16b, v1.16b, v2.16b\nzip1 v0.16b, v0.16b, v3.16b\naddv h1, v1.8h\naddv h0, v0.8h\nstr h1, [x8, #2]\nstr h0, [x8]\nret",
  "giasm": "LLVM ERROR: unable to legalize instruction: G_STORE %8:_(<32 x s8>), %2:_(p0) :: (store (<32 x s1>)) (in function: test)",
  "ll": "define <32 x i1> @test(<32 x i8> %a, <32 x i8> %b) {\n  %r = icmp slt <32 x i8> %a, %b\n  ret <32 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp slt <32 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i1> %r"
 },
 {
  "instr": "icmpslt",
  "ty": "<32 x i8>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 14,
  "gisize": -1,
  "extrasize": 0,
  "asm": "adrp x9, .LCPI0_0\ncmlt v1.16b, v1.16b, #0\ncmlt v0.16b, v0.16b, #0\nldr q2, [x9, :lo12:.LCPI0_0]\nand v1.16b, v1.16b, v2.16b\nand v0.16b, v0.16b, v2.16b\next v2.16b, v1.16b, v1.16b, #8\next v3.16b, v0.16b, v0.16b, #8\nzip1 v1.16b, v1.16b, v2.16b\nzip1 v0.16b, v0.16b, v3.16b\naddv h1, v1.8h\naddv h0, v0.8h\nstr h1, [x8, #2]\nstr h0, [x8]\nret",
  "giasm": "LLVM ERROR: unable to legalize instruction: G_STORE %7:_(<32 x s8>), %1:_(p0) :: (store (<32 x s1>)) (in function: test)",
  "ll": "define <32 x i1> @test(<32 x i8> %a) {\n  %r = icmp slt <32 x i8> %a, zeroinitializer\n  ret <32 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp slt <32 x i8> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i1> %r"
 },
 {
  "instr": "selecticmpslt",
  "ty": "<32 x i8>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 4,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmgt v1.16b, v3.16b, v1.16b\ncmgt v0.16b, v2.16b, v0.16b\nbsl v1.16b, v5.16b, v7.16b\nbsl v0.16b, v4.16b, v6.16b\nret",
  "giasm": "cmgt v0.16b, v2.16b, v0.16b\ncmgt v1.16b, v3.16b, v1.16b\nbsl v0.16b, v4.16b, v6.16b\nbsl v1.16b, v5.16b, v7.16b\nret",
  "ll": "define <32 x i8> @test(<32 x i8> %a, <32 x i8> %b, <32 x i8> %d, <32 x i8> %e) {\n  %c = icmp slt <32 x i8> %a, %b\n  %r = select <32 x i1> %c, <32 x i8> %d, <32 x i8> %e\n  ret <32 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp slt <32 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <32 x i1> %c, <32 x i8> %d, <32 x i8> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i8> %r"
 },
 {
  "instr": "selecticmpslt",
  "ty": "<32 x i8>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 4,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmlt v1.16b, v1.16b, #0\ncmlt v0.16b, v0.16b, #0\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "giasm": "cmlt v0.16b, v0.16b, #0\ncmlt v1.16b, v1.16b, #0\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "ll": "define <32 x i8> @test(<32 x i8> %a, <32 x i8> %d, <32 x i8> %e) {\n  %c = icmp slt <32 x i8> %a, zeroinitializer\n  %r = select <32 x i1> %c, <32 x i8> %d, <32 x i8> %e\n  ret <32 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp slt <32 x i8> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <32 x i1> %c, <32 x i8> %d, <32 x i8> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i8> %r"
 },
 {
  "instr": "icmpslt",
  "ty": "<4 x i16>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "cmgt v0.4h, v1.4h, v0.4h\nret",
  "giasm": "cmgt v0.4h, v1.4h, v0.4h\nret",
  "ll": "define <4 x i1> @test(<4 x i16> %a, <4 x i16> %b) {\n  %r = icmp slt <4 x i16> %a, %b\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp slt <4 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "icmpslt",
  "ty": "<4 x i16>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "cmlt v0.4h, v0.4h, #0\nret",
  "giasm": "cmlt v0.4h, v0.4h, #0\nret",
  "ll": "define <4 x i1> @test(<4 x i16> %a) {\n  %r = icmp slt <4 x i16> %a, zeroinitializer\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp slt <4 x i16> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "selecticmpslt",
  "ty": "<4 x i16>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmgt v0.4h, v1.4h, v0.4h\nbsl v0.8b, v2.8b, v3.8b\nret",
  "giasm": "cmgt v0.4h, v1.4h, v0.4h\nbsl v0.8b, v2.8b, v3.8b\nret",
  "ll": "define <4 x i16> @test(<4 x i16> %a, <4 x i16> %b, <4 x i16> %d, <4 x i16> %e) {\n  %c = icmp slt <4 x i16> %a, %b\n  %r = select <4 x i1> %c, <4 x i16> %d, <4 x i16> %e\n  ret <4 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp slt <4 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x i16> %d, <4 x i16> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i16> %r"
 },
 {
  "instr": "selecticmpslt",
  "ty": "<4 x i16>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmlt v0.4h, v0.4h, #0\nbsl v0.8b, v1.8b, v2.8b\nret",
  "giasm": "cmlt v0.4h, v0.4h, #0\nbsl v0.8b, v1.8b, v2.8b\nret",
  "ll": "define <4 x i16> @test(<4 x i16> %a, <4 x i16> %d, <4 x i16> %e) {\n  %c = icmp slt <4 x i16> %a, zeroinitializer\n  %r = select <4 x i1> %c, <4 x i16> %d, <4 x i16> %e\n  ret <4 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp slt <4 x i16> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x i16> %d, <4 x i16> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i16> %r"
 },
 {
  "instr": "icmpslt",
  "ty": "<8 x i16>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmgt v0.8h, v1.8h, v0.8h\nxtn v0.8b, v0.8h\nret",
  "giasm": "cmgt v0.8h, v1.8h, v0.8h\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x i16> %a, <8 x i16> %b) {\n  %r = icmp slt <8 x i16> %a, %b\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp slt <8 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "icmpslt",
  "ty": "<8 x i16>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmlt v0.8h, v0.8h, #0\nxtn v0.8b, v0.8h\nret",
  "giasm": "cmlt v0.8h, v0.8h, #0\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x i16> %a) {\n  %r = icmp slt <8 x i16> %a, zeroinitializer\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp slt <8 x i16> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "selecticmpslt",
  "ty": "<8 x i16>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmgt v0.8h, v1.8h, v0.8h\nbsl v0.16b, v2.16b, v3.16b\nret",
  "giasm": "cmgt v0.8h, v1.8h, v0.8h\nbsl v0.16b, v2.16b, v3.16b\nret",
  "ll": "define <8 x i16> @test(<8 x i16> %a, <8 x i16> %b, <8 x i16> %d, <8 x i16> %e) {\n  %c = icmp slt <8 x i16> %a, %b\n  %r = select <8 x i1> %c, <8 x i16> %d, <8 x i16> %e\n  ret <8 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp slt <8 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x i16> %d, <8 x i16> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i16> %r"
 },
 {
  "instr": "selecticmpslt",
  "ty": "<8 x i16>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmlt v0.8h, v0.8h, #0\nbsl v0.16b, v1.16b, v2.16b\nret",
  "giasm": "cmlt v0.8h, v0.8h, #0\nbsl v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <8 x i16> @test(<8 x i16> %a, <8 x i16> %d, <8 x i16> %e) {\n  %c = icmp slt <8 x i16> %a, zeroinitializer\n  %r = select <8 x i1> %c, <8 x i16> %d, <8 x i16> %e\n  ret <8 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp slt <8 x i16> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x i16> %d, <8 x i16> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i16> %r"
 },
 {
  "instr": "icmpslt",
  "ty": "<16 x i16>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "cmgt v1.8h, v3.8h, v1.8h\ncmgt v0.8h, v2.8h, v0.8h\nuzp1 v0.16b, v0.16b, v1.16b\nret",
  "giasm": "cmgt v0.8h, v2.8h, v0.8h\ncmgt v1.8h, v3.8h, v1.8h\nuzp1 v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <16 x i1> @test(<16 x i16> %a, <16 x i16> %b) {\n  %r = icmp slt <16 x i16> %a, %b\n  ret <16 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp slt <16 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i1> %r"
 },
 {
  "instr": "icmpslt",
  "ty": "<16 x i16>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "cmlt v1.8h, v1.8h, #0\ncmlt v0.8h, v0.8h, #0\nuzp1 v0.16b, v0.16b, v1.16b\nret",
  "giasm": "cmlt v0.8h, v0.8h, #0\ncmlt v1.8h, v1.8h, #0\nuzp1 v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <16 x i1> @test(<16 x i16> %a) {\n  %r = icmp slt <16 x i16> %a, zeroinitializer\n  ret <16 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp slt <16 x i16> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i1> %r"
 },
 {
  "instr": "selecticmpslt",
  "ty": "<16 x i16>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 4,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmgt v1.8h, v3.8h, v1.8h\ncmgt v0.8h, v2.8h, v0.8h\nbsl v1.16b, v5.16b, v7.16b\nbsl v0.16b, v4.16b, v6.16b\nret",
  "giasm": "cmgt v0.8h, v2.8h, v0.8h\ncmgt v1.8h, v3.8h, v1.8h\nbsl v0.16b, v4.16b, v6.16b\nbsl v1.16b, v5.16b, v7.16b\nret",
  "ll": "define <16 x i16> @test(<16 x i16> %a, <16 x i16> %b, <16 x i16> %d, <16 x i16> %e) {\n  %c = icmp slt <16 x i16> %a, %b\n  %r = select <16 x i1> %c, <16 x i16> %d, <16 x i16> %e\n  ret <16 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp slt <16 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <16 x i1> %c, <16 x i16> %d, <16 x i16> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i16> %r"
 },
 {
  "instr": "selecticmpslt",
  "ty": "<16 x i16>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 4,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmlt v1.8h, v1.8h, #0\ncmlt v0.8h, v0.8h, #0\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "giasm": "cmlt v0.8h, v0.8h, #0\ncmlt v1.8h, v1.8h, #0\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "ll": "define <16 x i16> @test(<16 x i16> %a, <16 x i16> %d, <16 x i16> %e) {\n  %c = icmp slt <16 x i16> %a, zeroinitializer\n  %r = select <16 x i1> %c, <16 x i16> %d, <16 x i16> %e\n  ret <16 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp slt <16 x i16> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <16 x i1> %c, <16 x i16> %d, <16 x i16> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i16> %r"
 },
 {
  "instr": "icmpslt",
  "ty": "<2 x i32>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "cmgt v0.2s, v1.2s, v0.2s\nret",
  "giasm": "cmgt v0.2s, v1.2s, v0.2s\nret",
  "ll": "define <2 x i1> @test(<2 x i32> %a, <2 x i32> %b) {\n  %r = icmp slt <2 x i32> %a, %b\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp slt <2 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "icmpslt",
  "ty": "<2 x i32>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "cmlt v0.2s, v0.2s, #0\nret",
  "giasm": "cmlt v0.2s, v0.2s, #0\nret",
  "ll": "define <2 x i1> @test(<2 x i32> %a) {\n  %r = icmp slt <2 x i32> %a, zeroinitializer\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp slt <2 x i32> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "selecticmpslt",
  "ty": "<2 x i32>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmgt v0.2s, v1.2s, v0.2s\nbsl v0.8b, v2.8b, v3.8b\nret",
  "giasm": "cmgt v0.2s, v1.2s, v0.2s\nbsl v0.8b, v2.8b, v3.8b\nret",
  "ll": "define <2 x i32> @test(<2 x i32> %a, <2 x i32> %b, <2 x i32> %d, <2 x i32> %e) {\n  %c = icmp slt <2 x i32> %a, %b\n  %r = select <2 x i1> %c, <2 x i32> %d, <2 x i32> %e\n  ret <2 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp slt <2 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <2 x i1> %c, <2 x i32> %d, <2 x i32> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i32> %r"
 },
 {
  "instr": "selecticmpslt",
  "ty": "<2 x i32>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmlt v0.2s, v0.2s, #0\nbsl v0.8b, v1.8b, v2.8b\nret",
  "giasm": "cmlt v0.2s, v0.2s, #0\nbsl v0.8b, v1.8b, v2.8b\nret",
  "ll": "define <2 x i32> @test(<2 x i32> %a, <2 x i32> %d, <2 x i32> %e) {\n  %c = icmp slt <2 x i32> %a, zeroinitializer\n  %r = select <2 x i1> %c, <2 x i32> %d, <2 x i32> %e\n  ret <2 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp slt <2 x i32> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <2 x i1> %c, <2 x i32> %d, <2 x i32> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i32> %r"
 },
 {
  "instr": "icmpslt",
  "ty": "<4 x i32>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmgt v0.4s, v1.4s, v0.4s\nxtn v0.4h, v0.4s\nret",
  "giasm": "cmgt v0.4s, v1.4s, v0.4s\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x i32> %a, <4 x i32> %b) {\n  %r = icmp slt <4 x i32> %a, %b\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp slt <4 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "icmpslt",
  "ty": "<4 x i32>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmlt v0.4s, v0.4s, #0\nxtn v0.4h, v0.4s\nret",
  "giasm": "cmlt v0.4s, v0.4s, #0\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x i32> %a) {\n  %r = icmp slt <4 x i32> %a, zeroinitializer\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp slt <4 x i32> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "selecticmpslt",
  "ty": "<4 x i32>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmgt v0.4s, v1.4s, v0.4s\nbsl v0.16b, v2.16b, v3.16b\nret",
  "giasm": "cmgt v0.4s, v1.4s, v0.4s\nbsl v0.16b, v2.16b, v3.16b\nret",
  "ll": "define <4 x i32> @test(<4 x i32> %a, <4 x i32> %b, <4 x i32> %d, <4 x i32> %e) {\n  %c = icmp slt <4 x i32> %a, %b\n  %r = select <4 x i1> %c, <4 x i32> %d, <4 x i32> %e\n  ret <4 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp slt <4 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x i32> %d, <4 x i32> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i32> %r"
 },
 {
  "instr": "selecticmpslt",
  "ty": "<4 x i32>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmlt v0.4s, v0.4s, #0\nbsl v0.16b, v1.16b, v2.16b\nret",
  "giasm": "cmlt v0.4s, v0.4s, #0\nbsl v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <4 x i32> @test(<4 x i32> %a, <4 x i32> %d, <4 x i32> %e) {\n  %c = icmp slt <4 x i32> %a, zeroinitializer\n  %r = select <4 x i1> %c, <4 x i32> %d, <4 x i32> %e\n  ret <4 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp slt <4 x i32> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x i32> %d, <4 x i32> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i32> %r"
 },
 {
  "instr": "icmpslt",
  "ty": "<8 x i32>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmgt v1.4s, v3.4s, v1.4s\ncmgt v0.4s, v2.4s, v0.4s\nuzp1 v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "giasm": "cmgt v0.4s, v2.4s, v0.4s\ncmgt v1.4s, v3.4s, v1.4s\nuzp1 v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x i32> %a, <8 x i32> %b) {\n  %r = icmp slt <8 x i32> %a, %b\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp slt <8 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "icmpslt",
  "ty": "<8 x i32>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmlt v1.4s, v1.4s, #0\ncmlt v0.4s, v0.4s, #0\nuzp1 v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "giasm": "cmlt v0.4s, v0.4s, #0\ncmlt v1.4s, v1.4s, #0\nuzp1 v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x i32> %a) {\n  %r = icmp slt <8 x i32> %a, zeroinitializer\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp slt <8 x i32> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "selecticmpslt",
  "ty": "<8 x i32>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 4,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmgt v1.4s, v3.4s, v1.4s\ncmgt v0.4s, v2.4s, v0.4s\nbsl v1.16b, v5.16b, v7.16b\nbsl v0.16b, v4.16b, v6.16b\nret",
  "giasm": "cmgt v0.4s, v2.4s, v0.4s\ncmgt v1.4s, v3.4s, v1.4s\nbsl v0.16b, v4.16b, v6.16b\nbsl v1.16b, v5.16b, v7.16b\nret",
  "ll": "define <8 x i32> @test(<8 x i32> %a, <8 x i32> %b, <8 x i32> %d, <8 x i32> %e) {\n  %c = icmp slt <8 x i32> %a, %b\n  %r = select <8 x i1> %c, <8 x i32> %d, <8 x i32> %e\n  ret <8 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp slt <8 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x i32> %d, <8 x i32> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i32> %r"
 },
 {
  "instr": "selecticmpslt",
  "ty": "<8 x i32>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 4,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmlt v1.4s, v1.4s, #0\ncmlt v0.4s, v0.4s, #0\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "giasm": "cmlt v0.4s, v0.4s, #0\ncmlt v1.4s, v1.4s, #0\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "ll": "define <8 x i32> @test(<8 x i32> %a, <8 x i32> %d, <8 x i32> %e) {\n  %c = icmp slt <8 x i32> %a, zeroinitializer\n  %r = select <8 x i1> %c, <8 x i32> %d, <8 x i32> %e\n  ret <8 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp slt <8 x i32> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x i32> %d, <8 x i32> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i32> %r"
 },
 {
  "instr": "icmpslt",
  "ty": "<2 x i64>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmgt v0.2d, v1.2d, v0.2d\nxtn v0.2s, v0.2d\nret",
  "giasm": "cmgt v0.2d, v1.2d, v0.2d\nxtn v0.2s, v0.2d\nret",
  "ll": "define <2 x i1> @test(<2 x i64> %a, <2 x i64> %b) {\n  %r = icmp slt <2 x i64> %a, %b\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp slt <2 x i64> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "icmpslt",
  "ty": "<2 x i64>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmlt v0.2d, v0.2d, #0\nxtn v0.2s, v0.2d\nret",
  "giasm": "cmlt v0.2d, v0.2d, #0\nxtn v0.2s, v0.2d\nret",
  "ll": "define <2 x i1> @test(<2 x i64> %a) {\n  %r = icmp slt <2 x i64> %a, zeroinitializer\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp slt <2 x i64> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "selecticmpslt",
  "ty": "<2 x i64>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmgt v0.2d, v1.2d, v0.2d\nbsl v0.16b, v2.16b, v3.16b\nret",
  "giasm": "cmgt v0.2d, v1.2d, v0.2d\nbsl v0.16b, v2.16b, v3.16b\nret",
  "ll": "define <2 x i64> @test(<2 x i64> %a, <2 x i64> %b, <2 x i64> %d, <2 x i64> %e) {\n  %c = icmp slt <2 x i64> %a, %b\n  %r = select <2 x i1> %c, <2 x i64> %d, <2 x i64> %e\n  ret <2 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp slt <2 x i64> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <2 x i1> %c, <2 x i64> %d, <2 x i64> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i64> %r"
 },
 {
  "instr": "selecticmpslt",
  "ty": "<2 x i64>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmlt v0.2d, v0.2d, #0\nbsl v0.16b, v1.16b, v2.16b\nret",
  "giasm": "cmlt v0.2d, v0.2d, #0\nbsl v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <2 x i64> @test(<2 x i64> %a, <2 x i64> %d, <2 x i64> %e) {\n  %c = icmp slt <2 x i64> %a, zeroinitializer\n  %r = select <2 x i1> %c, <2 x i64> %d, <2 x i64> %e\n  ret <2 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp slt <2 x i64> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <2 x i1> %c, <2 x i64> %d, <2 x i64> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i64> %r"
 },
 {
  "instr": "icmpslt",
  "ty": "<4 x i64>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmgt v1.2d, v3.2d, v1.2d\ncmgt v0.2d, v2.2d, v0.2d\nuzp1 v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "giasm": "cmgt v0.2d, v2.2d, v0.2d\ncmgt v1.2d, v3.2d, v1.2d\nuzp1 v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x i64> %a, <4 x i64> %b) {\n  %r = icmp slt <4 x i64> %a, %b\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp slt <4 x i64> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "icmpslt",
  "ty": "<4 x i64>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmlt v1.2d, v1.2d, #0\ncmlt v0.2d, v0.2d, #0\nuzp1 v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "giasm": "cmlt v0.2d, v0.2d, #0\ncmlt v1.2d, v1.2d, #0\nuzp1 v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x i64> %a) {\n  %r = icmp slt <4 x i64> %a, zeroinitializer\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp slt <4 x i64> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "selecticmpslt",
  "ty": "<4 x i64>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 4,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmgt v1.2d, v3.2d, v1.2d\ncmgt v0.2d, v2.2d, v0.2d\nbsl v1.16b, v5.16b, v7.16b\nbsl v0.16b, v4.16b, v6.16b\nret",
  "giasm": "cmgt v0.2d, v2.2d, v0.2d\ncmgt v1.2d, v3.2d, v1.2d\nbsl v0.16b, v4.16b, v6.16b\nbsl v1.16b, v5.16b, v7.16b\nret",
  "ll": "define <4 x i64> @test(<4 x i64> %a, <4 x i64> %b, <4 x i64> %d, <4 x i64> %e) {\n  %c = icmp slt <4 x i64> %a, %b\n  %r = select <4 x i1> %c, <4 x i64> %d, <4 x i64> %e\n  ret <4 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp slt <4 x i64> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x i64> %d, <4 x i64> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i64> %r"
 },
 {
  "instr": "selecticmpslt",
  "ty": "<4 x i64>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 4,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmlt v1.2d, v1.2d, #0\ncmlt v0.2d, v0.2d, #0\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "giasm": "cmlt v0.2d, v0.2d, #0\ncmlt v1.2d, v1.2d, #0\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "ll": "define <4 x i64> @test(<4 x i64> %a, <4 x i64> %d, <4 x i64> %e) {\n  %c = icmp slt <4 x i64> %a, zeroinitializer\n  %r = select <4 x i1> %c, <4 x i64> %d, <4 x i64> %e\n  ret <4 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp slt <4 x i64> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x i64> %d, <4 x i64> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i64> %r"
 },
 {
  "instr": "icmpsle",
  "ty": "i8",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "sxtb w8, w0\ncmp w8, w1, sxtb\ncset w0, le\nret",
  "giasm": "sxtb w8, w0\ncmp w8, w1, sxtb\ncset w0, le\nret",
  "ll": "define i1 @test(i8 %a, i8 %b) {\n  %r = icmp sle i8 %a, %b\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sle i8 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "icmpsle",
  "ty": "i8",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "sxtb w8, w0\ncmp w8, #1\ncset w0, lt\nret",
  "giasm": "sxtb w8, w0\ncmp w8, #0\ncset w0, le\nret",
  "ll": "define i1 @test(i8 %a) {\n  %r = icmp sle i8 %a, 0\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sle i8 %a, 0\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "selecticmpsle",
  "ty": "i8",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "sxtb w8, w0\ncmp w8, w1, sxtb\ncsel w0, w2, w3, le\nret",
  "giasm": "sxtb w8, w0\ncmp w8, w1, sxtb\ncsel w0, w2, w3, le\nret",
  "ll": "define i8 @test(i8 %a, i8 %b, i8 %d, i8 %e) {\n  %c = icmp sle i8 %a, %b\n  %r = select i1 %c, i8 %d, i8 %e\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sle i8 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i8 %d, i8 %e\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "selecticmpsle",
  "ty": "i8",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "sxtb w8, w0\ncmp w8, #1\ncsel w0, w1, w2, lt\nret",
  "giasm": "sxtb w8, w0\ncmp w8, #0\ncsel w0, w1, w2, le\nret",
  "ll": "define i8 @test(i8 %a, i8 %d, i8 %e) {\n  %c = icmp sle i8 %a, 0\n  %r = select i1 %c, i8 %d, i8 %e\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sle i8 %a, 0\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i8 %d, i8 %e\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "icmpsle",
  "ty": "i16",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "sxth w8, w0\ncmp w8, w1, sxth\ncset w0, le\nret",
  "giasm": "sxth w8, w0\ncmp w8, w1, sxth\ncset w0, le\nret",
  "ll": "define i1 @test(i16 %a, i16 %b) {\n  %r = icmp sle i16 %a, %b\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sle i16 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "icmpsle",
  "ty": "i16",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "sxth w8, w0\ncmp w8, #1\ncset w0, lt\nret",
  "giasm": "sxth w8, w0\ncmp w8, #0\ncset w0, le\nret",
  "ll": "define i1 @test(i16 %a) {\n  %r = icmp sle i16 %a, 0\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sle i16 %a, 0\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "selecticmpsle",
  "ty": "i16",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "sxth w8, w0\ncmp w8, w1, sxth\ncsel w0, w2, w3, le\nret",
  "giasm": "sxth w8, w0\ncmp w8, w1, sxth\ncsel w0, w2, w3, le\nret",
  "ll": "define i16 @test(i16 %a, i16 %b, i16 %d, i16 %e) {\n  %c = icmp sle i16 %a, %b\n  %r = select i1 %c, i16 %d, i16 %e\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sle i16 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i16 %d, i16 %e\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "selecticmpsle",
  "ty": "i16",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "sxth w8, w0\ncmp w8, #1\ncsel w0, w1, w2, lt\nret",
  "giasm": "sxth w8, w0\ncmp w8, #0\ncsel w0, w1, w2, le\nret",
  "ll": "define i16 @test(i16 %a, i16 %d, i16 %e) {\n  %c = icmp sle i16 %a, 0\n  %r = select i1 %c, i16 %d, i16 %e\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sle i16 %a, 0\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i16 %d, i16 %e\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "icmpsle",
  "ty": "i32",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmp w0, w1\ncset w0, le\nret",
  "giasm": "cmp w0, w1\ncset w0, le\nret",
  "ll": "define i1 @test(i32 %a, i32 %b) {\n  %r = icmp sle i32 %a, %b\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sle i32 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "icmpsle",
  "ty": "i32",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmp w0, #1\ncset w0, lt\nret",
  "giasm": "cmp w0, #0\ncset w0, le\nret",
  "ll": "define i1 @test(i32 %a) {\n  %r = icmp sle i32 %a, 0\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sle i32 %a, 0\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "selecticmpsle",
  "ty": "i32",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmp w0, w1\ncsel w0, w2, w3, le\nret",
  "giasm": "cmp w0, w1\ncsel w0, w2, w3, le\nret",
  "ll": "define i32 @test(i32 %a, i32 %b, i32 %d, i32 %e) {\n  %c = icmp sle i32 %a, %b\n  %r = select i1 %c, i32 %d, i32 %e\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sle i32 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i32 %d, i32 %e\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "selecticmpsle",
  "ty": "i32",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmp w0, #1\ncsel w0, w1, w2, lt\nret",
  "giasm": "cmp w0, #0\ncsel w0, w1, w2, le\nret",
  "ll": "define i32 @test(i32 %a, i32 %d, i32 %e) {\n  %c = icmp sle i32 %a, 0\n  %r = select i1 %c, i32 %d, i32 %e\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sle i32 %a, 0\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i32 %d, i32 %e\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "icmpsle",
  "ty": "i64",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmp x0, x1\ncset w0, le\nret",
  "giasm": "cmp x0, x1\ncset w0, le\nret",
  "ll": "define i1 @test(i64 %a, i64 %b) {\n  %r = icmp sle i64 %a, %b\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sle i64 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "icmpsle",
  "ty": "i64",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmp x0, #1\ncset w0, lt\nret",
  "giasm": "cmp x0, #0\ncset w0, le\nret",
  "ll": "define i1 @test(i64 %a) {\n  %r = icmp sle i64 %a, 0\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sle i64 %a, 0\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "selecticmpsle",
  "ty": "i64",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmp x0, x1\ncsel x0, x2, x3, le\nret",
  "giasm": "cmp x0, x1\ncsel x0, x2, x3, le\nret",
  "ll": "define i64 @test(i64 %a, i64 %b, i64 %d, i64 %e) {\n  %c = icmp sle i64 %a, %b\n  %r = select i1 %c, i64 %d, i64 %e\n  ret i64 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sle i64 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i64 %d, i64 %e\nCost Model: Found an estimated cost of 1 for instruction:   ret i64 %r"
 },
 {
  "instr": "selecticmpsle",
  "ty": "i64",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmp x0, #1\ncsel x0, x1, x2, lt\nret",
  "giasm": "cmp x0, #0\ncsel x0, x1, x2, le\nret",
  "ll": "define i64 @test(i64 %a, i64 %d, i64 %e) {\n  %c = icmp sle i64 %a, 0\n  %r = select i1 %c, i64 %d, i64 %e\n  ret i64 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sle i64 %a, 0\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i64 %d, i64 %e\nCost Model: Found an estimated cost of 1 for instruction:   ret i64 %r"
 },
 {
  "instr": "icmpsle",
  "ty": "<8 x i8>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "cmge v0.8b, v1.8b, v0.8b\nret",
  "giasm": "cmge v0.8b, v1.8b, v0.8b\nret",
  "ll": "define <8 x i1> @test(<8 x i8> %a, <8 x i8> %b) {\n  %r = icmp sle <8 x i8> %a, %b\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sle <8 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "icmpsle",
  "ty": "<8 x i8>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "cmle v0.8b, v0.8b, #0\nret",
  "giasm": "cmle v0.8b, v0.8b, #0\nret",
  "ll": "define <8 x i1> @test(<8 x i8> %a) {\n  %r = icmp sle <8 x i8> %a, zeroinitializer\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sle <8 x i8> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "selecticmpsle",
  "ty": "<8 x i8>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmge v0.8b, v1.8b, v0.8b\nbsl v0.8b, v2.8b, v3.8b\nret",
  "giasm": "cmge v0.8b, v1.8b, v0.8b\nbsl v0.8b, v2.8b, v3.8b\nret",
  "ll": "define <8 x i8> @test(<8 x i8> %a, <8 x i8> %b, <8 x i8> %d, <8 x i8> %e) {\n  %c = icmp sle <8 x i8> %a, %b\n  %r = select <8 x i1> %c, <8 x i8> %d, <8 x i8> %e\n  ret <8 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sle <8 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x i8> %d, <8 x i8> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i8> %r"
 },
 {
  "instr": "selecticmpsle",
  "ty": "<8 x i8>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmle v0.8b, v0.8b, #0\nbsl v0.8b, v1.8b, v2.8b\nret",
  "giasm": "cmle v0.8b, v0.8b, #0\nbsl v0.8b, v1.8b, v2.8b\nret",
  "ll": "define <8 x i8> @test(<8 x i8> %a, <8 x i8> %d, <8 x i8> %e) {\n  %c = icmp sle <8 x i8> %a, zeroinitializer\n  %r = select <8 x i1> %c, <8 x i8> %d, <8 x i8> %e\n  ret <8 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sle <8 x i8> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x i8> %d, <8 x i8> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i8> %r"
 },
 {
  "instr": "icmpsle",
  "ty": "<16 x i8>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "cmge v0.16b, v1.16b, v0.16b\nret",
  "giasm": "cmge v0.16b, v1.16b, v0.16b\nret",
  "ll": "define <16 x i1> @test(<16 x i8> %a, <16 x i8> %b) {\n  %r = icmp sle <16 x i8> %a, %b\n  ret <16 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sle <16 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i1> %r"
 },
 {
  "instr": "icmpsle",
  "ty": "<16 x i8>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "cmle v0.16b, v0.16b, #0\nret",
  "giasm": "cmle v0.16b, v0.16b, #0\nret",
  "ll": "define <16 x i1> @test(<16 x i8> %a) {\n  %r = icmp sle <16 x i8> %a, zeroinitializer\n  ret <16 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sle <16 x i8> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i1> %r"
 },
 {
  "instr": "selecticmpsle",
  "ty": "<16 x i8>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmge v0.16b, v1.16b, v0.16b\nbsl v0.16b, v2.16b, v3.16b\nret",
  "giasm": "cmge v0.16b, v1.16b, v0.16b\nbsl v0.16b, v2.16b, v3.16b\nret",
  "ll": "define <16 x i8> @test(<16 x i8> %a, <16 x i8> %b, <16 x i8> %d, <16 x i8> %e) {\n  %c = icmp sle <16 x i8> %a, %b\n  %r = select <16 x i1> %c, <16 x i8> %d, <16 x i8> %e\n  ret <16 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sle <16 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <16 x i1> %c, <16 x i8> %d, <16 x i8> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i8> %r"
 },
 {
  "instr": "selecticmpsle",
  "ty": "<16 x i8>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmle v0.16b, v0.16b, #0\nbsl v0.16b, v1.16b, v2.16b\nret",
  "giasm": "cmle v0.16b, v0.16b, #0\nbsl v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <16 x i8> @test(<16 x i8> %a, <16 x i8> %d, <16 x i8> %e) {\n  %c = icmp sle <16 x i8> %a, zeroinitializer\n  %r = select <16 x i1> %c, <16 x i8> %d, <16 x i8> %e\n  ret <16 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sle <16 x i8> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <16 x i1> %c, <16 x i8> %d, <16 x i8> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i8> %r"
 },
 {
  "instr": "icmpsle",
  "ty": "<32 x i8>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 14,
  "gisize": -1,
  "extrasize": 0,
  "asm": "cmge v1.16b, v3.16b, v1.16b\nadrp x9, .LCPI0_0\ncmge v0.16b, v2.16b, v0.16b\nldr q2, [x9, :lo12:.LCPI0_0]\nand v1.16b, v1.16b, v2.16b\nand v0.16b, v0.16b, v2.16b\next v2.16b, v1.16b, v1.16b, #8\next v3.16b, v0.16b, v0.16b, #8\nzip1 v1.16b, v1.16b, v2.16b\nzip1 v0.16b, v0.16b, v3.16b\naddv h1, v1.8h\naddv h0, v0.8h\nstr h1, [x8, #2]\nstr h0, [x8]\nret",
  "giasm": "LLVM ERROR: unable to legalize instruction: G_STORE %8:_(<32 x s8>), %2:_(p0) :: (store (<32 x s1>)) (in function: test)",
  "ll": "define <32 x i1> @test(<32 x i8> %a, <32 x i8> %b) {\n  %r = icmp sle <32 x i8> %a, %b\n  ret <32 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sle <32 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i1> %r"
 },
 {
  "instr": "icmpsle",
  "ty": "<32 x i8>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 14,
  "gisize": -1,
  "extrasize": 0,
  "asm": "adrp x9, .LCPI0_0\ncmle v1.16b, v1.16b, #0\ncmle v0.16b, v0.16b, #0\nldr q2, [x9, :lo12:.LCPI0_0]\nand v1.16b, v1.16b, v2.16b\nand v0.16b, v0.16b, v2.16b\next v2.16b, v1.16b, v1.16b, #8\next v3.16b, v0.16b, v0.16b, #8\nzip1 v1.16b, v1.16b, v2.16b\nzip1 v0.16b, v0.16b, v3.16b\naddv h1, v1.8h\naddv h0, v0.8h\nstr h1, [x8, #2]\nstr h0, [x8]\nret",
  "giasm": "LLVM ERROR: unable to legalize instruction: G_STORE %7:_(<32 x s8>), %1:_(p0) :: (store (<32 x s1>)) (in function: test)",
  "ll": "define <32 x i1> @test(<32 x i8> %a) {\n  %r = icmp sle <32 x i8> %a, zeroinitializer\n  ret <32 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sle <32 x i8> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i1> %r"
 },
 {
  "instr": "selecticmpsle",
  "ty": "<32 x i8>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 4,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmge v1.16b, v3.16b, v1.16b\ncmge v0.16b, v2.16b, v0.16b\nbsl v1.16b, v5.16b, v7.16b\nbsl v0.16b, v4.16b, v6.16b\nret",
  "giasm": "cmge v0.16b, v2.16b, v0.16b\ncmge v1.16b, v3.16b, v1.16b\nbsl v0.16b, v4.16b, v6.16b\nbsl v1.16b, v5.16b, v7.16b\nret",
  "ll": "define <32 x i8> @test(<32 x i8> %a, <32 x i8> %b, <32 x i8> %d, <32 x i8> %e) {\n  %c = icmp sle <32 x i8> %a, %b\n  %r = select <32 x i1> %c, <32 x i8> %d, <32 x i8> %e\n  ret <32 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sle <32 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <32 x i1> %c, <32 x i8> %d, <32 x i8> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i8> %r"
 },
 {
  "instr": "selecticmpsle",
  "ty": "<32 x i8>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 4,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmle v1.16b, v1.16b, #0\ncmle v0.16b, v0.16b, #0\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "giasm": "cmle v0.16b, v0.16b, #0\ncmle v1.16b, v1.16b, #0\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "ll": "define <32 x i8> @test(<32 x i8> %a, <32 x i8> %d, <32 x i8> %e) {\n  %c = icmp sle <32 x i8> %a, zeroinitializer\n  %r = select <32 x i1> %c, <32 x i8> %d, <32 x i8> %e\n  ret <32 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sle <32 x i8> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <32 x i1> %c, <32 x i8> %d, <32 x i8> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i8> %r"
 },
 {
  "instr": "icmpsle",
  "ty": "<4 x i16>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "cmge v0.4h, v1.4h, v0.4h\nret",
  "giasm": "cmge v0.4h, v1.4h, v0.4h\nret",
  "ll": "define <4 x i1> @test(<4 x i16> %a, <4 x i16> %b) {\n  %r = icmp sle <4 x i16> %a, %b\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sle <4 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "icmpsle",
  "ty": "<4 x i16>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "cmle v0.4h, v0.4h, #0\nret",
  "giasm": "cmle v0.4h, v0.4h, #0\nret",
  "ll": "define <4 x i1> @test(<4 x i16> %a) {\n  %r = icmp sle <4 x i16> %a, zeroinitializer\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sle <4 x i16> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "selecticmpsle",
  "ty": "<4 x i16>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmge v0.4h, v1.4h, v0.4h\nbsl v0.8b, v2.8b, v3.8b\nret",
  "giasm": "cmge v0.4h, v1.4h, v0.4h\nbsl v0.8b, v2.8b, v3.8b\nret",
  "ll": "define <4 x i16> @test(<4 x i16> %a, <4 x i16> %b, <4 x i16> %d, <4 x i16> %e) {\n  %c = icmp sle <4 x i16> %a, %b\n  %r = select <4 x i1> %c, <4 x i16> %d, <4 x i16> %e\n  ret <4 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sle <4 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x i16> %d, <4 x i16> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i16> %r"
 },
 {
  "instr": "selecticmpsle",
  "ty": "<4 x i16>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmle v0.4h, v0.4h, #0\nbsl v0.8b, v1.8b, v2.8b\nret",
  "giasm": "cmle v0.4h, v0.4h, #0\nbsl v0.8b, v1.8b, v2.8b\nret",
  "ll": "define <4 x i16> @test(<4 x i16> %a, <4 x i16> %d, <4 x i16> %e) {\n  %c = icmp sle <4 x i16> %a, zeroinitializer\n  %r = select <4 x i1> %c, <4 x i16> %d, <4 x i16> %e\n  ret <4 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sle <4 x i16> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x i16> %d, <4 x i16> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i16> %r"
 },
 {
  "instr": "icmpsle",
  "ty": "<8 x i16>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmge v0.8h, v1.8h, v0.8h\nxtn v0.8b, v0.8h\nret",
  "giasm": "cmge v0.8h, v1.8h, v0.8h\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x i16> %a, <8 x i16> %b) {\n  %r = icmp sle <8 x i16> %a, %b\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sle <8 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "icmpsle",
  "ty": "<8 x i16>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmle v0.8h, v0.8h, #0\nxtn v0.8b, v0.8h\nret",
  "giasm": "cmle v0.8h, v0.8h, #0\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x i16> %a) {\n  %r = icmp sle <8 x i16> %a, zeroinitializer\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sle <8 x i16> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "selecticmpsle",
  "ty": "<8 x i16>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmge v0.8h, v1.8h, v0.8h\nbsl v0.16b, v2.16b, v3.16b\nret",
  "giasm": "cmge v0.8h, v1.8h, v0.8h\nbsl v0.16b, v2.16b, v3.16b\nret",
  "ll": "define <8 x i16> @test(<8 x i16> %a, <8 x i16> %b, <8 x i16> %d, <8 x i16> %e) {\n  %c = icmp sle <8 x i16> %a, %b\n  %r = select <8 x i1> %c, <8 x i16> %d, <8 x i16> %e\n  ret <8 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sle <8 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x i16> %d, <8 x i16> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i16> %r"
 },
 {
  "instr": "selecticmpsle",
  "ty": "<8 x i16>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmle v0.8h, v0.8h, #0\nbsl v0.16b, v1.16b, v2.16b\nret",
  "giasm": "cmle v0.8h, v0.8h, #0\nbsl v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <8 x i16> @test(<8 x i16> %a, <8 x i16> %d, <8 x i16> %e) {\n  %c = icmp sle <8 x i16> %a, zeroinitializer\n  %r = select <8 x i1> %c, <8 x i16> %d, <8 x i16> %e\n  ret <8 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sle <8 x i16> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x i16> %d, <8 x i16> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i16> %r"
 },
 {
  "instr": "icmpsle",
  "ty": "<16 x i16>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "cmge v1.8h, v3.8h, v1.8h\ncmge v0.8h, v2.8h, v0.8h\nuzp1 v0.16b, v0.16b, v1.16b\nret",
  "giasm": "cmge v0.8h, v2.8h, v0.8h\ncmge v1.8h, v3.8h, v1.8h\nuzp1 v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <16 x i1> @test(<16 x i16> %a, <16 x i16> %b) {\n  %r = icmp sle <16 x i16> %a, %b\n  ret <16 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sle <16 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i1> %r"
 },
 {
  "instr": "icmpsle",
  "ty": "<16 x i16>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "cmle v1.8h, v1.8h, #0\ncmle v0.8h, v0.8h, #0\nuzp1 v0.16b, v0.16b, v1.16b\nret",
  "giasm": "cmle v0.8h, v0.8h, #0\ncmle v1.8h, v1.8h, #0\nuzp1 v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <16 x i1> @test(<16 x i16> %a) {\n  %r = icmp sle <16 x i16> %a, zeroinitializer\n  ret <16 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sle <16 x i16> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i1> %r"
 },
 {
  "instr": "selecticmpsle",
  "ty": "<16 x i16>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 4,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmge v1.8h, v3.8h, v1.8h\ncmge v0.8h, v2.8h, v0.8h\nbsl v1.16b, v5.16b, v7.16b\nbsl v0.16b, v4.16b, v6.16b\nret",
  "giasm": "cmge v0.8h, v2.8h, v0.8h\ncmge v1.8h, v3.8h, v1.8h\nbsl v0.16b, v4.16b, v6.16b\nbsl v1.16b, v5.16b, v7.16b\nret",
  "ll": "define <16 x i16> @test(<16 x i16> %a, <16 x i16> %b, <16 x i16> %d, <16 x i16> %e) {\n  %c = icmp sle <16 x i16> %a, %b\n  %r = select <16 x i1> %c, <16 x i16> %d, <16 x i16> %e\n  ret <16 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sle <16 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <16 x i1> %c, <16 x i16> %d, <16 x i16> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i16> %r"
 },
 {
  "instr": "selecticmpsle",
  "ty": "<16 x i16>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 4,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmle v1.8h, v1.8h, #0\ncmle v0.8h, v0.8h, #0\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "giasm": "cmle v0.8h, v0.8h, #0\ncmle v1.8h, v1.8h, #0\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "ll": "define <16 x i16> @test(<16 x i16> %a, <16 x i16> %d, <16 x i16> %e) {\n  %c = icmp sle <16 x i16> %a, zeroinitializer\n  %r = select <16 x i1> %c, <16 x i16> %d, <16 x i16> %e\n  ret <16 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sle <16 x i16> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <16 x i1> %c, <16 x i16> %d, <16 x i16> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i16> %r"
 },
 {
  "instr": "icmpsle",
  "ty": "<2 x i32>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "cmge v0.2s, v1.2s, v0.2s\nret",
  "giasm": "cmge v0.2s, v1.2s, v0.2s\nret",
  "ll": "define <2 x i1> @test(<2 x i32> %a, <2 x i32> %b) {\n  %r = icmp sle <2 x i32> %a, %b\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sle <2 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "icmpsle",
  "ty": "<2 x i32>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "cmle v0.2s, v0.2s, #0\nret",
  "giasm": "cmle v0.2s, v0.2s, #0\nret",
  "ll": "define <2 x i1> @test(<2 x i32> %a) {\n  %r = icmp sle <2 x i32> %a, zeroinitializer\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sle <2 x i32> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "selecticmpsle",
  "ty": "<2 x i32>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmge v0.2s, v1.2s, v0.2s\nbsl v0.8b, v2.8b, v3.8b\nret",
  "giasm": "cmge v0.2s, v1.2s, v0.2s\nbsl v0.8b, v2.8b, v3.8b\nret",
  "ll": "define <2 x i32> @test(<2 x i32> %a, <2 x i32> %b, <2 x i32> %d, <2 x i32> %e) {\n  %c = icmp sle <2 x i32> %a, %b\n  %r = select <2 x i1> %c, <2 x i32> %d, <2 x i32> %e\n  ret <2 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sle <2 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <2 x i1> %c, <2 x i32> %d, <2 x i32> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i32> %r"
 },
 {
  "instr": "selecticmpsle",
  "ty": "<2 x i32>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmle v0.2s, v0.2s, #0\nbsl v0.8b, v1.8b, v2.8b\nret",
  "giasm": "cmle v0.2s, v0.2s, #0\nbsl v0.8b, v1.8b, v2.8b\nret",
  "ll": "define <2 x i32> @test(<2 x i32> %a, <2 x i32> %d, <2 x i32> %e) {\n  %c = icmp sle <2 x i32> %a, zeroinitializer\n  %r = select <2 x i1> %c, <2 x i32> %d, <2 x i32> %e\n  ret <2 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sle <2 x i32> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <2 x i1> %c, <2 x i32> %d, <2 x i32> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i32> %r"
 },
 {
  "instr": "icmpsle",
  "ty": "<4 x i32>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmge v0.4s, v1.4s, v0.4s\nxtn v0.4h, v0.4s\nret",
  "giasm": "cmge v0.4s, v1.4s, v0.4s\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x i32> %a, <4 x i32> %b) {\n  %r = icmp sle <4 x i32> %a, %b\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sle <4 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "icmpsle",
  "ty": "<4 x i32>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmle v0.4s, v0.4s, #0\nxtn v0.4h, v0.4s\nret",
  "giasm": "cmle v0.4s, v0.4s, #0\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x i32> %a) {\n  %r = icmp sle <4 x i32> %a, zeroinitializer\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sle <4 x i32> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "selecticmpsle",
  "ty": "<4 x i32>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmge v0.4s, v1.4s, v0.4s\nbsl v0.16b, v2.16b, v3.16b\nret",
  "giasm": "cmge v0.4s, v1.4s, v0.4s\nbsl v0.16b, v2.16b, v3.16b\nret",
  "ll": "define <4 x i32> @test(<4 x i32> %a, <4 x i32> %b, <4 x i32> %d, <4 x i32> %e) {\n  %c = icmp sle <4 x i32> %a, %b\n  %r = select <4 x i1> %c, <4 x i32> %d, <4 x i32> %e\n  ret <4 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sle <4 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x i32> %d, <4 x i32> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i32> %r"
 },
 {
  "instr": "selecticmpsle",
  "ty": "<4 x i32>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmle v0.4s, v0.4s, #0\nbsl v0.16b, v1.16b, v2.16b\nret",
  "giasm": "cmle v0.4s, v0.4s, #0\nbsl v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <4 x i32> @test(<4 x i32> %a, <4 x i32> %d, <4 x i32> %e) {\n  %c = icmp sle <4 x i32> %a, zeroinitializer\n  %r = select <4 x i1> %c, <4 x i32> %d, <4 x i32> %e\n  ret <4 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sle <4 x i32> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x i32> %d, <4 x i32> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i32> %r"
 },
 {
  "instr": "icmpsle",
  "ty": "<8 x i32>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmge v1.4s, v3.4s, v1.4s\ncmge v0.4s, v2.4s, v0.4s\nuzp1 v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "giasm": "cmge v0.4s, v2.4s, v0.4s\ncmge v1.4s, v3.4s, v1.4s\nuzp1 v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x i32> %a, <8 x i32> %b) {\n  %r = icmp sle <8 x i32> %a, %b\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sle <8 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "icmpsle",
  "ty": "<8 x i32>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmle v1.4s, v1.4s, #0\ncmle v0.4s, v0.4s, #0\nuzp1 v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "giasm": "cmle v0.4s, v0.4s, #0\ncmle v1.4s, v1.4s, #0\nuzp1 v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x i32> %a) {\n  %r = icmp sle <8 x i32> %a, zeroinitializer\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sle <8 x i32> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "selecticmpsle",
  "ty": "<8 x i32>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 4,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmge v1.4s, v3.4s, v1.4s\ncmge v0.4s, v2.4s, v0.4s\nbsl v1.16b, v5.16b, v7.16b\nbsl v0.16b, v4.16b, v6.16b\nret",
  "giasm": "cmge v0.4s, v2.4s, v0.4s\ncmge v1.4s, v3.4s, v1.4s\nbsl v0.16b, v4.16b, v6.16b\nbsl v1.16b, v5.16b, v7.16b\nret",
  "ll": "define <8 x i32> @test(<8 x i32> %a, <8 x i32> %b, <8 x i32> %d, <8 x i32> %e) {\n  %c = icmp sle <8 x i32> %a, %b\n  %r = select <8 x i1> %c, <8 x i32> %d, <8 x i32> %e\n  ret <8 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sle <8 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x i32> %d, <8 x i32> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i32> %r"
 },
 {
  "instr": "selecticmpsle",
  "ty": "<8 x i32>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 4,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmle v1.4s, v1.4s, #0\ncmle v0.4s, v0.4s, #0\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "giasm": "cmle v0.4s, v0.4s, #0\ncmle v1.4s, v1.4s, #0\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "ll": "define <8 x i32> @test(<8 x i32> %a, <8 x i32> %d, <8 x i32> %e) {\n  %c = icmp sle <8 x i32> %a, zeroinitializer\n  %r = select <8 x i1> %c, <8 x i32> %d, <8 x i32> %e\n  ret <8 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sle <8 x i32> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x i32> %d, <8 x i32> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i32> %r"
 },
 {
  "instr": "icmpsle",
  "ty": "<2 x i64>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmge v0.2d, v1.2d, v0.2d\nxtn v0.2s, v0.2d\nret",
  "giasm": "cmge v0.2d, v1.2d, v0.2d\nxtn v0.2s, v0.2d\nret",
  "ll": "define <2 x i1> @test(<2 x i64> %a, <2 x i64> %b) {\n  %r = icmp sle <2 x i64> %a, %b\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sle <2 x i64> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "icmpsle",
  "ty": "<2 x i64>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmle v0.2d, v0.2d, #0\nxtn v0.2s, v0.2d\nret",
  "giasm": "cmle v0.2d, v0.2d, #0\nxtn v0.2s, v0.2d\nret",
  "ll": "define <2 x i1> @test(<2 x i64> %a) {\n  %r = icmp sle <2 x i64> %a, zeroinitializer\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sle <2 x i64> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "selecticmpsle",
  "ty": "<2 x i64>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmge v0.2d, v1.2d, v0.2d\nbsl v0.16b, v2.16b, v3.16b\nret",
  "giasm": "cmge v0.2d, v1.2d, v0.2d\nbsl v0.16b, v2.16b, v3.16b\nret",
  "ll": "define <2 x i64> @test(<2 x i64> %a, <2 x i64> %b, <2 x i64> %d, <2 x i64> %e) {\n  %c = icmp sle <2 x i64> %a, %b\n  %r = select <2 x i1> %c, <2 x i64> %d, <2 x i64> %e\n  ret <2 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sle <2 x i64> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <2 x i1> %c, <2 x i64> %d, <2 x i64> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i64> %r"
 },
 {
  "instr": "selecticmpsle",
  "ty": "<2 x i64>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmle v0.2d, v0.2d, #0\nbsl v0.16b, v1.16b, v2.16b\nret",
  "giasm": "cmle v0.2d, v0.2d, #0\nbsl v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <2 x i64> @test(<2 x i64> %a, <2 x i64> %d, <2 x i64> %e) {\n  %c = icmp sle <2 x i64> %a, zeroinitializer\n  %r = select <2 x i1> %c, <2 x i64> %d, <2 x i64> %e\n  ret <2 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sle <2 x i64> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <2 x i1> %c, <2 x i64> %d, <2 x i64> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i64> %r"
 },
 {
  "instr": "icmpsle",
  "ty": "<4 x i64>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmge v1.2d, v3.2d, v1.2d\ncmge v0.2d, v2.2d, v0.2d\nuzp1 v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "giasm": "cmge v0.2d, v2.2d, v0.2d\ncmge v1.2d, v3.2d, v1.2d\nuzp1 v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x i64> %a, <4 x i64> %b) {\n  %r = icmp sle <4 x i64> %a, %b\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sle <4 x i64> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "icmpsle",
  "ty": "<4 x i64>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmle v1.2d, v1.2d, #0\ncmle v0.2d, v0.2d, #0\nuzp1 v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "giasm": "cmle v0.2d, v0.2d, #0\ncmle v1.2d, v1.2d, #0\nuzp1 v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x i64> %a) {\n  %r = icmp sle <4 x i64> %a, zeroinitializer\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sle <4 x i64> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "selecticmpsle",
  "ty": "<4 x i64>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 4,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmge v1.2d, v3.2d, v1.2d\ncmge v0.2d, v2.2d, v0.2d\nbsl v1.16b, v5.16b, v7.16b\nbsl v0.16b, v4.16b, v6.16b\nret",
  "giasm": "cmge v0.2d, v2.2d, v0.2d\ncmge v1.2d, v3.2d, v1.2d\nbsl v0.16b, v4.16b, v6.16b\nbsl v1.16b, v5.16b, v7.16b\nret",
  "ll": "define <4 x i64> @test(<4 x i64> %a, <4 x i64> %b, <4 x i64> %d, <4 x i64> %e) {\n  %c = icmp sle <4 x i64> %a, %b\n  %r = select <4 x i1> %c, <4 x i64> %d, <4 x i64> %e\n  ret <4 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sle <4 x i64> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x i64> %d, <4 x i64> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i64> %r"
 },
 {
  "instr": "selecticmpsle",
  "ty": "<4 x i64>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 4,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmle v1.2d, v1.2d, #0\ncmle v0.2d, v0.2d, #0\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "giasm": "cmle v0.2d, v0.2d, #0\ncmle v1.2d, v1.2d, #0\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "ll": "define <4 x i64> @test(<4 x i64> %a, <4 x i64> %d, <4 x i64> %e) {\n  %c = icmp sle <4 x i64> %a, zeroinitializer\n  %r = select <4 x i1> %c, <4 x i64> %d, <4 x i64> %e\n  ret <4 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sle <4 x i64> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x i64> %d, <4 x i64> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i64> %r"
 },
 {
  "instr": "icmpsgt",
  "ty": "i8",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "sxtb w8, w0\ncmp w8, w1, sxtb\ncset w0, gt\nret",
  "giasm": "sxtb w8, w0\ncmp w8, w1, sxtb\ncset w0, gt\nret",
  "ll": "define i1 @test(i8 %a, i8 %b) {\n  %r = icmp sgt i8 %a, %b\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sgt i8 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "icmpsgt",
  "ty": "i8",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "sxtb w8, w0\ncmp w8, #0\ncset w0, gt\nret",
  "giasm": "sxtb w8, w0\ncmp w8, #0\ncset w0, gt\nret",
  "ll": "define i1 @test(i8 %a) {\n  %r = icmp sgt i8 %a, 0\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sgt i8 %a, 0\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "selecticmpsgt",
  "ty": "i8",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "sxtb w8, w0\ncmp w8, w1, sxtb\ncsel w0, w2, w3, gt\nret",
  "giasm": "sxtb w8, w0\ncmp w8, w1, sxtb\ncsel w0, w2, w3, gt\nret",
  "ll": "define i8 @test(i8 %a, i8 %b, i8 %d, i8 %e) {\n  %c = icmp sgt i8 %a, %b\n  %r = select i1 %c, i8 %d, i8 %e\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sgt i8 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i8 %d, i8 %e\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "selecticmpsgt",
  "ty": "i8",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "sxtb w8, w0\ncmp w8, #0\ncsel w0, w1, w2, gt\nret",
  "giasm": "sxtb w8, w0\ncmp w8, #0\ncsel w0, w1, w2, gt\nret",
  "ll": "define i8 @test(i8 %a, i8 %d, i8 %e) {\n  %c = icmp sgt i8 %a, 0\n  %r = select i1 %c, i8 %d, i8 %e\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sgt i8 %a, 0\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i8 %d, i8 %e\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "icmpsgt",
  "ty": "i16",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "sxth w8, w0\ncmp w8, w1, sxth\ncset w0, gt\nret",
  "giasm": "sxth w8, w0\ncmp w8, w1, sxth\ncset w0, gt\nret",
  "ll": "define i1 @test(i16 %a, i16 %b) {\n  %r = icmp sgt i16 %a, %b\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sgt i16 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "icmpsgt",
  "ty": "i16",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "sxth w8, w0\ncmp w8, #0\ncset w0, gt\nret",
  "giasm": "sxth w8, w0\ncmp w8, #0\ncset w0, gt\nret",
  "ll": "define i1 @test(i16 %a) {\n  %r = icmp sgt i16 %a, 0\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sgt i16 %a, 0\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "selecticmpsgt",
  "ty": "i16",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "sxth w8, w0\ncmp w8, w1, sxth\ncsel w0, w2, w3, gt\nret",
  "giasm": "sxth w8, w0\ncmp w8, w1, sxth\ncsel w0, w2, w3, gt\nret",
  "ll": "define i16 @test(i16 %a, i16 %b, i16 %d, i16 %e) {\n  %c = icmp sgt i16 %a, %b\n  %r = select i1 %c, i16 %d, i16 %e\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sgt i16 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i16 %d, i16 %e\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "selecticmpsgt",
  "ty": "i16",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "sxth w8, w0\ncmp w8, #0\ncsel w0, w1, w2, gt\nret",
  "giasm": "sxth w8, w0\ncmp w8, #0\ncsel w0, w1, w2, gt\nret",
  "ll": "define i16 @test(i16 %a, i16 %d, i16 %e) {\n  %c = icmp sgt i16 %a, 0\n  %r = select i1 %c, i16 %d, i16 %e\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sgt i16 %a, 0\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i16 %d, i16 %e\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "icmpsgt",
  "ty": "i32",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmp w0, w1\ncset w0, gt\nret",
  "giasm": "cmp w0, w1\ncset w0, gt\nret",
  "ll": "define i1 @test(i32 %a, i32 %b) {\n  %r = icmp sgt i32 %a, %b\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sgt i32 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "icmpsgt",
  "ty": "i32",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmp w0, #0\ncset w0, gt\nret",
  "giasm": "cmp w0, #0\ncset w0, gt\nret",
  "ll": "define i1 @test(i32 %a) {\n  %r = icmp sgt i32 %a, 0\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sgt i32 %a, 0\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "selecticmpsgt",
  "ty": "i32",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmp w0, w1\ncsel w0, w2, w3, gt\nret",
  "giasm": "cmp w0, w1\ncsel w0, w2, w3, gt\nret",
  "ll": "define i32 @test(i32 %a, i32 %b, i32 %d, i32 %e) {\n  %c = icmp sgt i32 %a, %b\n  %r = select i1 %c, i32 %d, i32 %e\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sgt i32 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i32 %d, i32 %e\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "selecticmpsgt",
  "ty": "i32",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmp w0, #0\ncsel w0, w1, w2, gt\nret",
  "giasm": "cmp w0, #0\ncsel w0, w1, w2, gt\nret",
  "ll": "define i32 @test(i32 %a, i32 %d, i32 %e) {\n  %c = icmp sgt i32 %a, 0\n  %r = select i1 %c, i32 %d, i32 %e\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sgt i32 %a, 0\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i32 %d, i32 %e\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "icmpsgt",
  "ty": "i64",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmp x0, x1\ncset w0, gt\nret",
  "giasm": "cmp x0, x1\ncset w0, gt\nret",
  "ll": "define i1 @test(i64 %a, i64 %b) {\n  %r = icmp sgt i64 %a, %b\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sgt i64 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "icmpsgt",
  "ty": "i64",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmp x0, #0\ncset w0, gt\nret",
  "giasm": "cmp x0, #0\ncset w0, gt\nret",
  "ll": "define i1 @test(i64 %a) {\n  %r = icmp sgt i64 %a, 0\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sgt i64 %a, 0\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "selecticmpsgt",
  "ty": "i64",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmp x0, x1\ncsel x0, x2, x3, gt\nret",
  "giasm": "cmp x0, x1\ncsel x0, x2, x3, gt\nret",
  "ll": "define i64 @test(i64 %a, i64 %b, i64 %d, i64 %e) {\n  %c = icmp sgt i64 %a, %b\n  %r = select i1 %c, i64 %d, i64 %e\n  ret i64 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sgt i64 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i64 %d, i64 %e\nCost Model: Found an estimated cost of 1 for instruction:   ret i64 %r"
 },
 {
  "instr": "selecticmpsgt",
  "ty": "i64",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmp x0, #0\ncsel x0, x1, x2, gt\nret",
  "giasm": "cmp x0, #0\ncsel x0, x1, x2, gt\nret",
  "ll": "define i64 @test(i64 %a, i64 %d, i64 %e) {\n  %c = icmp sgt i64 %a, 0\n  %r = select i1 %c, i64 %d, i64 %e\n  ret i64 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sgt i64 %a, 0\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i64 %d, i64 %e\nCost Model: Found an estimated cost of 1 for instruction:   ret i64 %r"
 },
 {
  "instr": "icmpsgt",
  "ty": "<8 x i8>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "cmgt v0.8b, v0.8b, v1.8b\nret",
  "giasm": "cmgt v0.8b, v0.8b, v1.8b\nret",
  "ll": "define <8 x i1> @test(<8 x i8> %a, <8 x i8> %b) {\n  %r = icmp sgt <8 x i8> %a, %b\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sgt <8 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "icmpsgt",
  "ty": "<8 x i8>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "cmgt v0.8b, v0.8b, #0\nret",
  "giasm": "cmgt v0.8b, v0.8b, #0\nret",
  "ll": "define <8 x i1> @test(<8 x i8> %a) {\n  %r = icmp sgt <8 x i8> %a, zeroinitializer\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sgt <8 x i8> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "selecticmpsgt",
  "ty": "<8 x i8>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmgt v0.8b, v0.8b, v1.8b\nbsl v0.8b, v2.8b, v3.8b\nret",
  "giasm": "cmgt v0.8b, v0.8b, v1.8b\nbsl v0.8b, v2.8b, v3.8b\nret",
  "ll": "define <8 x i8> @test(<8 x i8> %a, <8 x i8> %b, <8 x i8> %d, <8 x i8> %e) {\n  %c = icmp sgt <8 x i8> %a, %b\n  %r = select <8 x i1> %c, <8 x i8> %d, <8 x i8> %e\n  ret <8 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sgt <8 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x i8> %d, <8 x i8> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i8> %r"
 },
 {
  "instr": "selecticmpsgt",
  "ty": "<8 x i8>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmgt v0.8b, v0.8b, #0\nbsl v0.8b, v1.8b, v2.8b\nret",
  "giasm": "cmgt v0.8b, v0.8b, #0\nbsl v0.8b, v1.8b, v2.8b\nret",
  "ll": "define <8 x i8> @test(<8 x i8> %a, <8 x i8> %d, <8 x i8> %e) {\n  %c = icmp sgt <8 x i8> %a, zeroinitializer\n  %r = select <8 x i1> %c, <8 x i8> %d, <8 x i8> %e\n  ret <8 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sgt <8 x i8> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x i8> %d, <8 x i8> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i8> %r"
 },
 {
  "instr": "icmpsgt",
  "ty": "<16 x i8>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "cmgt v0.16b, v0.16b, v1.16b\nret",
  "giasm": "cmgt v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <16 x i1> @test(<16 x i8> %a, <16 x i8> %b) {\n  %r = icmp sgt <16 x i8> %a, %b\n  ret <16 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sgt <16 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i1> %r"
 },
 {
  "instr": "icmpsgt",
  "ty": "<16 x i8>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "cmgt v0.16b, v0.16b, #0\nret",
  "giasm": "cmgt v0.16b, v0.16b, #0\nret",
  "ll": "define <16 x i1> @test(<16 x i8> %a) {\n  %r = icmp sgt <16 x i8> %a, zeroinitializer\n  ret <16 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sgt <16 x i8> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i1> %r"
 },
 {
  "instr": "selecticmpsgt",
  "ty": "<16 x i8>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmgt v0.16b, v0.16b, v1.16b\nbsl v0.16b, v2.16b, v3.16b\nret",
  "giasm": "cmgt v0.16b, v0.16b, v1.16b\nbsl v0.16b, v2.16b, v3.16b\nret",
  "ll": "define <16 x i8> @test(<16 x i8> %a, <16 x i8> %b, <16 x i8> %d, <16 x i8> %e) {\n  %c = icmp sgt <16 x i8> %a, %b\n  %r = select <16 x i1> %c, <16 x i8> %d, <16 x i8> %e\n  ret <16 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sgt <16 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <16 x i1> %c, <16 x i8> %d, <16 x i8> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i8> %r"
 },
 {
  "instr": "selecticmpsgt",
  "ty": "<16 x i8>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmgt v0.16b, v0.16b, #0\nbsl v0.16b, v1.16b, v2.16b\nret",
  "giasm": "cmgt v0.16b, v0.16b, #0\nbsl v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <16 x i8> @test(<16 x i8> %a, <16 x i8> %d, <16 x i8> %e) {\n  %c = icmp sgt <16 x i8> %a, zeroinitializer\n  %r = select <16 x i1> %c, <16 x i8> %d, <16 x i8> %e\n  ret <16 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sgt <16 x i8> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <16 x i1> %c, <16 x i8> %d, <16 x i8> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i8> %r"
 },
 {
  "instr": "icmpsgt",
  "ty": "<32 x i8>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 14,
  "gisize": -1,
  "extrasize": 0,
  "asm": "cmgt v1.16b, v1.16b, v3.16b\nadrp x9, .LCPI0_0\ncmgt v0.16b, v0.16b, v2.16b\nldr q2, [x9, :lo12:.LCPI0_0]\nand v1.16b, v1.16b, v2.16b\nand v0.16b, v0.16b, v2.16b\next v2.16b, v1.16b, v1.16b, #8\next v3.16b, v0.16b, v0.16b, #8\nzip1 v1.16b, v1.16b, v2.16b\nzip1 v0.16b, v0.16b, v3.16b\naddv h1, v1.8h\naddv h0, v0.8h\nstr h1, [x8, #2]\nstr h0, [x8]\nret",
  "giasm": "LLVM ERROR: unable to legalize instruction: G_STORE %8:_(<32 x s8>), %2:_(p0) :: (store (<32 x s1>)) (in function: test)",
  "ll": "define <32 x i1> @test(<32 x i8> %a, <32 x i8> %b) {\n  %r = icmp sgt <32 x i8> %a, %b\n  ret <32 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sgt <32 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i1> %r"
 },
 {
  "instr": "icmpsgt",
  "ty": "<32 x i8>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 14,
  "gisize": -1,
  "extrasize": 0,
  "asm": "adrp x9, .LCPI0_0\ncmgt v1.16b, v1.16b, #0\ncmgt v0.16b, v0.16b, #0\nldr q2, [x9, :lo12:.LCPI0_0]\nand v1.16b, v1.16b, v2.16b\nand v0.16b, v0.16b, v2.16b\next v2.16b, v1.16b, v1.16b, #8\next v3.16b, v0.16b, v0.16b, #8\nzip1 v1.16b, v1.16b, v2.16b\nzip1 v0.16b, v0.16b, v3.16b\naddv h1, v1.8h\naddv h0, v0.8h\nstr h1, [x8, #2]\nstr h0, [x8]\nret",
  "giasm": "LLVM ERROR: unable to legalize instruction: G_STORE %7:_(<32 x s8>), %1:_(p0) :: (store (<32 x s1>)) (in function: test)",
  "ll": "define <32 x i1> @test(<32 x i8> %a) {\n  %r = icmp sgt <32 x i8> %a, zeroinitializer\n  ret <32 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sgt <32 x i8> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i1> %r"
 },
 {
  "instr": "selecticmpsgt",
  "ty": "<32 x i8>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 4,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmgt v1.16b, v1.16b, v3.16b\ncmgt v0.16b, v0.16b, v2.16b\nbsl v1.16b, v5.16b, v7.16b\nbsl v0.16b, v4.16b, v6.16b\nret",
  "giasm": "cmgt v0.16b, v0.16b, v2.16b\ncmgt v1.16b, v1.16b, v3.16b\nbsl v0.16b, v4.16b, v6.16b\nbsl v1.16b, v5.16b, v7.16b\nret",
  "ll": "define <32 x i8> @test(<32 x i8> %a, <32 x i8> %b, <32 x i8> %d, <32 x i8> %e) {\n  %c = icmp sgt <32 x i8> %a, %b\n  %r = select <32 x i1> %c, <32 x i8> %d, <32 x i8> %e\n  ret <32 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sgt <32 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <32 x i1> %c, <32 x i8> %d, <32 x i8> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i8> %r"
 },
 {
  "instr": "selecticmpsgt",
  "ty": "<32 x i8>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 4,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmgt v1.16b, v1.16b, #0\ncmgt v0.16b, v0.16b, #0\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "giasm": "cmgt v0.16b, v0.16b, #0\ncmgt v1.16b, v1.16b, #0\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "ll": "define <32 x i8> @test(<32 x i8> %a, <32 x i8> %d, <32 x i8> %e) {\n  %c = icmp sgt <32 x i8> %a, zeroinitializer\n  %r = select <32 x i1> %c, <32 x i8> %d, <32 x i8> %e\n  ret <32 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sgt <32 x i8> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <32 x i1> %c, <32 x i8> %d, <32 x i8> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i8> %r"
 },
 {
  "instr": "icmpsgt",
  "ty": "<4 x i16>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "cmgt v0.4h, v0.4h, v1.4h\nret",
  "giasm": "cmgt v0.4h, v0.4h, v1.4h\nret",
  "ll": "define <4 x i1> @test(<4 x i16> %a, <4 x i16> %b) {\n  %r = icmp sgt <4 x i16> %a, %b\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sgt <4 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "icmpsgt",
  "ty": "<4 x i16>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "cmgt v0.4h, v0.4h, #0\nret",
  "giasm": "cmgt v0.4h, v0.4h, #0\nret",
  "ll": "define <4 x i1> @test(<4 x i16> %a) {\n  %r = icmp sgt <4 x i16> %a, zeroinitializer\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sgt <4 x i16> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "selecticmpsgt",
  "ty": "<4 x i16>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmgt v0.4h, v0.4h, v1.4h\nbsl v0.8b, v2.8b, v3.8b\nret",
  "giasm": "cmgt v0.4h, v0.4h, v1.4h\nbsl v0.8b, v2.8b, v3.8b\nret",
  "ll": "define <4 x i16> @test(<4 x i16> %a, <4 x i16> %b, <4 x i16> %d, <4 x i16> %e) {\n  %c = icmp sgt <4 x i16> %a, %b\n  %r = select <4 x i1> %c, <4 x i16> %d, <4 x i16> %e\n  ret <4 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sgt <4 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x i16> %d, <4 x i16> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i16> %r"
 },
 {
  "instr": "selecticmpsgt",
  "ty": "<4 x i16>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmgt v0.4h, v0.4h, #0\nbsl v0.8b, v1.8b, v2.8b\nret",
  "giasm": "cmgt v0.4h, v0.4h, #0\nbsl v0.8b, v1.8b, v2.8b\nret",
  "ll": "define <4 x i16> @test(<4 x i16> %a, <4 x i16> %d, <4 x i16> %e) {\n  %c = icmp sgt <4 x i16> %a, zeroinitializer\n  %r = select <4 x i1> %c, <4 x i16> %d, <4 x i16> %e\n  ret <4 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sgt <4 x i16> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x i16> %d, <4 x i16> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i16> %r"
 },
 {
  "instr": "icmpsgt",
  "ty": "<8 x i16>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmgt v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "giasm": "cmgt v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x i16> %a, <8 x i16> %b) {\n  %r = icmp sgt <8 x i16> %a, %b\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sgt <8 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "icmpsgt",
  "ty": "<8 x i16>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmgt v0.8h, v0.8h, #0\nxtn v0.8b, v0.8h\nret",
  "giasm": "cmgt v0.8h, v0.8h, #0\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x i16> %a) {\n  %r = icmp sgt <8 x i16> %a, zeroinitializer\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sgt <8 x i16> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "selecticmpsgt",
  "ty": "<8 x i16>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmgt v0.8h, v0.8h, v1.8h\nbsl v0.16b, v2.16b, v3.16b\nret",
  "giasm": "cmgt v0.8h, v0.8h, v1.8h\nbsl v0.16b, v2.16b, v3.16b\nret",
  "ll": "define <8 x i16> @test(<8 x i16> %a, <8 x i16> %b, <8 x i16> %d, <8 x i16> %e) {\n  %c = icmp sgt <8 x i16> %a, %b\n  %r = select <8 x i1> %c, <8 x i16> %d, <8 x i16> %e\n  ret <8 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sgt <8 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x i16> %d, <8 x i16> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i16> %r"
 },
 {
  "instr": "selecticmpsgt",
  "ty": "<8 x i16>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmgt v0.8h, v0.8h, #0\nbsl v0.16b, v1.16b, v2.16b\nret",
  "giasm": "cmgt v0.8h, v0.8h, #0\nbsl v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <8 x i16> @test(<8 x i16> %a, <8 x i16> %d, <8 x i16> %e) {\n  %c = icmp sgt <8 x i16> %a, zeroinitializer\n  %r = select <8 x i1> %c, <8 x i16> %d, <8 x i16> %e\n  ret <8 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sgt <8 x i16> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x i16> %d, <8 x i16> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i16> %r"
 },
 {
  "instr": "icmpsgt",
  "ty": "<16 x i16>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "cmgt v1.8h, v1.8h, v3.8h\ncmgt v0.8h, v0.8h, v2.8h\nuzp1 v0.16b, v0.16b, v1.16b\nret",
  "giasm": "cmgt v0.8h, v0.8h, v2.8h\ncmgt v1.8h, v1.8h, v3.8h\nuzp1 v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <16 x i1> @test(<16 x i16> %a, <16 x i16> %b) {\n  %r = icmp sgt <16 x i16> %a, %b\n  ret <16 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sgt <16 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i1> %r"
 },
 {
  "instr": "icmpsgt",
  "ty": "<16 x i16>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "cmgt v1.8h, v1.8h, #0\ncmgt v0.8h, v0.8h, #0\nuzp1 v0.16b, v0.16b, v1.16b\nret",
  "giasm": "cmgt v0.8h, v0.8h, #0\ncmgt v1.8h, v1.8h, #0\nuzp1 v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <16 x i1> @test(<16 x i16> %a) {\n  %r = icmp sgt <16 x i16> %a, zeroinitializer\n  ret <16 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sgt <16 x i16> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i1> %r"
 },
 {
  "instr": "selecticmpsgt",
  "ty": "<16 x i16>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 4,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmgt v1.8h, v1.8h, v3.8h\ncmgt v0.8h, v0.8h, v2.8h\nbsl v1.16b, v5.16b, v7.16b\nbsl v0.16b, v4.16b, v6.16b\nret",
  "giasm": "cmgt v0.8h, v0.8h, v2.8h\ncmgt v1.8h, v1.8h, v3.8h\nbsl v0.16b, v4.16b, v6.16b\nbsl v1.16b, v5.16b, v7.16b\nret",
  "ll": "define <16 x i16> @test(<16 x i16> %a, <16 x i16> %b, <16 x i16> %d, <16 x i16> %e) {\n  %c = icmp sgt <16 x i16> %a, %b\n  %r = select <16 x i1> %c, <16 x i16> %d, <16 x i16> %e\n  ret <16 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sgt <16 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <16 x i1> %c, <16 x i16> %d, <16 x i16> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i16> %r"
 },
 {
  "instr": "selecticmpsgt",
  "ty": "<16 x i16>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 4,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmgt v1.8h, v1.8h, #0\ncmgt v0.8h, v0.8h, #0\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "giasm": "cmgt v0.8h, v0.8h, #0\ncmgt v1.8h, v1.8h, #0\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "ll": "define <16 x i16> @test(<16 x i16> %a, <16 x i16> %d, <16 x i16> %e) {\n  %c = icmp sgt <16 x i16> %a, zeroinitializer\n  %r = select <16 x i1> %c, <16 x i16> %d, <16 x i16> %e\n  ret <16 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sgt <16 x i16> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <16 x i1> %c, <16 x i16> %d, <16 x i16> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i16> %r"
 },
 {
  "instr": "icmpsgt",
  "ty": "<2 x i32>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "cmgt v0.2s, v0.2s, v1.2s\nret",
  "giasm": "cmgt v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x i1> @test(<2 x i32> %a, <2 x i32> %b) {\n  %r = icmp sgt <2 x i32> %a, %b\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sgt <2 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "icmpsgt",
  "ty": "<2 x i32>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "cmgt v0.2s, v0.2s, #0\nret",
  "giasm": "cmgt v0.2s, v0.2s, #0\nret",
  "ll": "define <2 x i1> @test(<2 x i32> %a) {\n  %r = icmp sgt <2 x i32> %a, zeroinitializer\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sgt <2 x i32> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "selecticmpsgt",
  "ty": "<2 x i32>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmgt v0.2s, v0.2s, v1.2s\nbsl v0.8b, v2.8b, v3.8b\nret",
  "giasm": "cmgt v0.2s, v0.2s, v1.2s\nbsl v0.8b, v2.8b, v3.8b\nret",
  "ll": "define <2 x i32> @test(<2 x i32> %a, <2 x i32> %b, <2 x i32> %d, <2 x i32> %e) {\n  %c = icmp sgt <2 x i32> %a, %b\n  %r = select <2 x i1> %c, <2 x i32> %d, <2 x i32> %e\n  ret <2 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sgt <2 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <2 x i1> %c, <2 x i32> %d, <2 x i32> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i32> %r"
 },
 {
  "instr": "selecticmpsgt",
  "ty": "<2 x i32>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmgt v0.2s, v0.2s, #0\nbsl v0.8b, v1.8b, v2.8b\nret",
  "giasm": "cmgt v0.2s, v0.2s, #0\nbsl v0.8b, v1.8b, v2.8b\nret",
  "ll": "define <2 x i32> @test(<2 x i32> %a, <2 x i32> %d, <2 x i32> %e) {\n  %c = icmp sgt <2 x i32> %a, zeroinitializer\n  %r = select <2 x i1> %c, <2 x i32> %d, <2 x i32> %e\n  ret <2 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sgt <2 x i32> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <2 x i1> %c, <2 x i32> %d, <2 x i32> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i32> %r"
 },
 {
  "instr": "icmpsgt",
  "ty": "<4 x i32>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmgt v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "giasm": "cmgt v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x i32> %a, <4 x i32> %b) {\n  %r = icmp sgt <4 x i32> %a, %b\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sgt <4 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "icmpsgt",
  "ty": "<4 x i32>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmgt v0.4s, v0.4s, #0\nxtn v0.4h, v0.4s\nret",
  "giasm": "cmgt v0.4s, v0.4s, #0\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x i32> %a) {\n  %r = icmp sgt <4 x i32> %a, zeroinitializer\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sgt <4 x i32> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "selecticmpsgt",
  "ty": "<4 x i32>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmgt v0.4s, v0.4s, v1.4s\nbsl v0.16b, v2.16b, v3.16b\nret",
  "giasm": "cmgt v0.4s, v0.4s, v1.4s\nbsl v0.16b, v2.16b, v3.16b\nret",
  "ll": "define <4 x i32> @test(<4 x i32> %a, <4 x i32> %b, <4 x i32> %d, <4 x i32> %e) {\n  %c = icmp sgt <4 x i32> %a, %b\n  %r = select <4 x i1> %c, <4 x i32> %d, <4 x i32> %e\n  ret <4 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sgt <4 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x i32> %d, <4 x i32> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i32> %r"
 },
 {
  "instr": "selecticmpsgt",
  "ty": "<4 x i32>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmgt v0.4s, v0.4s, #0\nbsl v0.16b, v1.16b, v2.16b\nret",
  "giasm": "cmgt v0.4s, v0.4s, #0\nbsl v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <4 x i32> @test(<4 x i32> %a, <4 x i32> %d, <4 x i32> %e) {\n  %c = icmp sgt <4 x i32> %a, zeroinitializer\n  %r = select <4 x i1> %c, <4 x i32> %d, <4 x i32> %e\n  ret <4 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sgt <4 x i32> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x i32> %d, <4 x i32> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i32> %r"
 },
 {
  "instr": "icmpsgt",
  "ty": "<8 x i32>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmgt v1.4s, v1.4s, v3.4s\ncmgt v0.4s, v0.4s, v2.4s\nuzp1 v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "giasm": "cmgt v0.4s, v0.4s, v2.4s\ncmgt v1.4s, v1.4s, v3.4s\nuzp1 v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x i32> %a, <8 x i32> %b) {\n  %r = icmp sgt <8 x i32> %a, %b\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sgt <8 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "icmpsgt",
  "ty": "<8 x i32>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmgt v1.4s, v1.4s, #0\ncmgt v0.4s, v0.4s, #0\nuzp1 v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "giasm": "cmgt v0.4s, v0.4s, #0\ncmgt v1.4s, v1.4s, #0\nuzp1 v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x i32> %a) {\n  %r = icmp sgt <8 x i32> %a, zeroinitializer\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sgt <8 x i32> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "selecticmpsgt",
  "ty": "<8 x i32>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 4,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmgt v1.4s, v1.4s, v3.4s\ncmgt v0.4s, v0.4s, v2.4s\nbsl v1.16b, v5.16b, v7.16b\nbsl v0.16b, v4.16b, v6.16b\nret",
  "giasm": "cmgt v0.4s, v0.4s, v2.4s\ncmgt v1.4s, v1.4s, v3.4s\nbsl v0.16b, v4.16b, v6.16b\nbsl v1.16b, v5.16b, v7.16b\nret",
  "ll": "define <8 x i32> @test(<8 x i32> %a, <8 x i32> %b, <8 x i32> %d, <8 x i32> %e) {\n  %c = icmp sgt <8 x i32> %a, %b\n  %r = select <8 x i1> %c, <8 x i32> %d, <8 x i32> %e\n  ret <8 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sgt <8 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x i32> %d, <8 x i32> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i32> %r"
 },
 {
  "instr": "selecticmpsgt",
  "ty": "<8 x i32>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 4,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmgt v1.4s, v1.4s, #0\ncmgt v0.4s, v0.4s, #0\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "giasm": "cmgt v0.4s, v0.4s, #0\ncmgt v1.4s, v1.4s, #0\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "ll": "define <8 x i32> @test(<8 x i32> %a, <8 x i32> %d, <8 x i32> %e) {\n  %c = icmp sgt <8 x i32> %a, zeroinitializer\n  %r = select <8 x i1> %c, <8 x i32> %d, <8 x i32> %e\n  ret <8 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sgt <8 x i32> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x i32> %d, <8 x i32> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i32> %r"
 },
 {
  "instr": "icmpsgt",
  "ty": "<2 x i64>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmgt v0.2d, v0.2d, v1.2d\nxtn v0.2s, v0.2d\nret",
  "giasm": "cmgt v0.2d, v0.2d, v1.2d\nxtn v0.2s, v0.2d\nret",
  "ll": "define <2 x i1> @test(<2 x i64> %a, <2 x i64> %b) {\n  %r = icmp sgt <2 x i64> %a, %b\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sgt <2 x i64> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "icmpsgt",
  "ty": "<2 x i64>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmgt v0.2d, v0.2d, #0\nxtn v0.2s, v0.2d\nret",
  "giasm": "cmgt v0.2d, v0.2d, #0\nxtn v0.2s, v0.2d\nret",
  "ll": "define <2 x i1> @test(<2 x i64> %a) {\n  %r = icmp sgt <2 x i64> %a, zeroinitializer\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sgt <2 x i64> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "selecticmpsgt",
  "ty": "<2 x i64>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmgt v0.2d, v0.2d, v1.2d\nbsl v0.16b, v2.16b, v3.16b\nret",
  "giasm": "cmgt v0.2d, v0.2d, v1.2d\nbsl v0.16b, v2.16b, v3.16b\nret",
  "ll": "define <2 x i64> @test(<2 x i64> %a, <2 x i64> %b, <2 x i64> %d, <2 x i64> %e) {\n  %c = icmp sgt <2 x i64> %a, %b\n  %r = select <2 x i1> %c, <2 x i64> %d, <2 x i64> %e\n  ret <2 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sgt <2 x i64> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <2 x i1> %c, <2 x i64> %d, <2 x i64> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i64> %r"
 },
 {
  "instr": "selecticmpsgt",
  "ty": "<2 x i64>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmgt v0.2d, v0.2d, #0\nbsl v0.16b, v1.16b, v2.16b\nret",
  "giasm": "cmgt v0.2d, v0.2d, #0\nbsl v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <2 x i64> @test(<2 x i64> %a, <2 x i64> %d, <2 x i64> %e) {\n  %c = icmp sgt <2 x i64> %a, zeroinitializer\n  %r = select <2 x i1> %c, <2 x i64> %d, <2 x i64> %e\n  ret <2 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sgt <2 x i64> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <2 x i1> %c, <2 x i64> %d, <2 x i64> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i64> %r"
 },
 {
  "instr": "icmpsgt",
  "ty": "<4 x i64>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmgt v1.2d, v1.2d, v3.2d\ncmgt v0.2d, v0.2d, v2.2d\nuzp1 v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "giasm": "cmgt v0.2d, v0.2d, v2.2d\ncmgt v1.2d, v1.2d, v3.2d\nuzp1 v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x i64> %a, <4 x i64> %b) {\n  %r = icmp sgt <4 x i64> %a, %b\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sgt <4 x i64> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "icmpsgt",
  "ty": "<4 x i64>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmgt v1.2d, v1.2d, #0\ncmgt v0.2d, v0.2d, #0\nuzp1 v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "giasm": "cmgt v0.2d, v0.2d, #0\ncmgt v1.2d, v1.2d, #0\nuzp1 v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x i64> %a) {\n  %r = icmp sgt <4 x i64> %a, zeroinitializer\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sgt <4 x i64> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "selecticmpsgt",
  "ty": "<4 x i64>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 4,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmgt v1.2d, v1.2d, v3.2d\ncmgt v0.2d, v0.2d, v2.2d\nbsl v1.16b, v5.16b, v7.16b\nbsl v0.16b, v4.16b, v6.16b\nret",
  "giasm": "cmgt v0.2d, v0.2d, v2.2d\ncmgt v1.2d, v1.2d, v3.2d\nbsl v0.16b, v4.16b, v6.16b\nbsl v1.16b, v5.16b, v7.16b\nret",
  "ll": "define <4 x i64> @test(<4 x i64> %a, <4 x i64> %b, <4 x i64> %d, <4 x i64> %e) {\n  %c = icmp sgt <4 x i64> %a, %b\n  %r = select <4 x i1> %c, <4 x i64> %d, <4 x i64> %e\n  ret <4 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sgt <4 x i64> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x i64> %d, <4 x i64> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i64> %r"
 },
 {
  "instr": "selecticmpsgt",
  "ty": "<4 x i64>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 4,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmgt v1.2d, v1.2d, #0\ncmgt v0.2d, v0.2d, #0\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "giasm": "cmgt v0.2d, v0.2d, #0\ncmgt v1.2d, v1.2d, #0\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "ll": "define <4 x i64> @test(<4 x i64> %a, <4 x i64> %d, <4 x i64> %e) {\n  %c = icmp sgt <4 x i64> %a, zeroinitializer\n  %r = select <4 x i1> %c, <4 x i64> %d, <4 x i64> %e\n  ret <4 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sgt <4 x i64> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x i64> %d, <4 x i64> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i64> %r"
 },
 {
  "instr": "icmpsge",
  "ty": "i8",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "sxtb w8, w0\ncmp w8, w1, sxtb\ncset w0, ge\nret",
  "giasm": "sxtb w8, w0\ncmp w8, w1, sxtb\ncset w0, ge\nret",
  "ll": "define i1 @test(i8 %a, i8 %b) {\n  %r = icmp sge i8 %a, %b\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sge i8 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "icmpsge",
  "ty": "i8",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "ubfx w8, w0, #7, #1\neor w0, w8, #0x1\nret",
  "giasm": "sxtb w8, w0\ncmp w8, #0\ncset w0, ge\nret",
  "ll": "define i1 @test(i8 %a) {\n  %r = icmp sge i8 %a, 0\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sge i8 %a, 0\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "selecticmpsge",
  "ty": "i8",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "sxtb w8, w0\ncmp w8, w1, sxtb\ncsel w0, w2, w3, ge\nret",
  "giasm": "sxtb w8, w0\ncmp w8, w1, sxtb\ncsel w0, w2, w3, ge\nret",
  "ll": "define i8 @test(i8 %a, i8 %b, i8 %d, i8 %e) {\n  %c = icmp sge i8 %a, %b\n  %r = select i1 %c, i8 %d, i8 %e\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sge i8 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i8 %d, i8 %e\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "selecticmpsge",
  "ty": "i8",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "sxtb w8, w0\ncmp w8, #0\ncsel w0, w1, w2, ge\nret",
  "giasm": "sxtb w8, w0\ncmp w8, #0\ncsel w0, w1, w2, ge\nret",
  "ll": "define i8 @test(i8 %a, i8 %d, i8 %e) {\n  %c = icmp sge i8 %a, 0\n  %r = select i1 %c, i8 %d, i8 %e\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sge i8 %a, 0\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i8 %d, i8 %e\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "icmpsge",
  "ty": "i16",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "sxth w8, w0\ncmp w8, w1, sxth\ncset w0, ge\nret",
  "giasm": "sxth w8, w0\ncmp w8, w1, sxth\ncset w0, ge\nret",
  "ll": "define i1 @test(i16 %a, i16 %b) {\n  %r = icmp sge i16 %a, %b\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sge i16 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "icmpsge",
  "ty": "i16",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "ubfx w8, w0, #15, #1\neor w0, w8, #0x1\nret",
  "giasm": "sxth w8, w0\ncmp w8, #0\ncset w0, ge\nret",
  "ll": "define i1 @test(i16 %a) {\n  %r = icmp sge i16 %a, 0\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sge i16 %a, 0\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "selecticmpsge",
  "ty": "i16",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "sxth w8, w0\ncmp w8, w1, sxth\ncsel w0, w2, w3, ge\nret",
  "giasm": "sxth w8, w0\ncmp w8, w1, sxth\ncsel w0, w2, w3, ge\nret",
  "ll": "define i16 @test(i16 %a, i16 %b, i16 %d, i16 %e) {\n  %c = icmp sge i16 %a, %b\n  %r = select i1 %c, i16 %d, i16 %e\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sge i16 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i16 %d, i16 %e\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "selecticmpsge",
  "ty": "i16",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "sxth w8, w0\ncmp w8, #0\ncsel w0, w1, w2, ge\nret",
  "giasm": "sxth w8, w0\ncmp w8, #0\ncsel w0, w1, w2, ge\nret",
  "ll": "define i16 @test(i16 %a, i16 %d, i16 %e) {\n  %c = icmp sge i16 %a, 0\n  %r = select i1 %c, i16 %d, i16 %e\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sge i16 %a, 0\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i16 %d, i16 %e\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "icmpsge",
  "ty": "i32",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmp w0, w1\ncset w0, ge\nret",
  "giasm": "cmp w0, w1\ncset w0, ge\nret",
  "ll": "define i1 @test(i32 %a, i32 %b) {\n  %r = icmp sge i32 %a, %b\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sge i32 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "icmpsge",
  "ty": "i32",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "mvn w8, w0\nlsr w0, w8, #31\nret",
  "giasm": "cmp w0, #0\ncset w0, ge\nret",
  "ll": "define i1 @test(i32 %a) {\n  %r = icmp sge i32 %a, 0\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sge i32 %a, 0\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "selecticmpsge",
  "ty": "i32",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmp w0, w1\ncsel w0, w2, w3, ge\nret",
  "giasm": "cmp w0, w1\ncsel w0, w2, w3, ge\nret",
  "ll": "define i32 @test(i32 %a, i32 %b, i32 %d, i32 %e) {\n  %c = icmp sge i32 %a, %b\n  %r = select i1 %c, i32 %d, i32 %e\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sge i32 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i32 %d, i32 %e\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "selecticmpsge",
  "ty": "i32",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmp w0, #0\ncsel w0, w1, w2, ge\nret",
  "giasm": "cmp w0, #0\ncsel w0, w1, w2, ge\nret",
  "ll": "define i32 @test(i32 %a, i32 %d, i32 %e) {\n  %c = icmp sge i32 %a, 0\n  %r = select i1 %c, i32 %d, i32 %e\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sge i32 %a, 0\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i32 %d, i32 %e\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "icmpsge",
  "ty": "i64",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmp x0, x1\ncset w0, ge\nret",
  "giasm": "cmp x0, x1\ncset w0, ge\nret",
  "ll": "define i1 @test(i64 %a, i64 %b) {\n  %r = icmp sge i64 %a, %b\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sge i64 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "icmpsge",
  "ty": "i64",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "lsr x8, x0, #63\neor w0, w8, #0x1\nret",
  "giasm": "cmp x0, #0\ncset w0, ge\nret",
  "ll": "define i1 @test(i64 %a) {\n  %r = icmp sge i64 %a, 0\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sge i64 %a, 0\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "selecticmpsge",
  "ty": "i64",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmp x0, x1\ncsel x0, x2, x3, ge\nret",
  "giasm": "cmp x0, x1\ncsel x0, x2, x3, ge\nret",
  "ll": "define i64 @test(i64 %a, i64 %b, i64 %d, i64 %e) {\n  %c = icmp sge i64 %a, %b\n  %r = select i1 %c, i64 %d, i64 %e\n  ret i64 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sge i64 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i64 %d, i64 %e\nCost Model: Found an estimated cost of 1 for instruction:   ret i64 %r"
 },
 {
  "instr": "selecticmpsge",
  "ty": "i64",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmp x0, #0\ncsel x0, x1, x2, ge\nret",
  "giasm": "cmp x0, #0\ncsel x0, x1, x2, ge\nret",
  "ll": "define i64 @test(i64 %a, i64 %d, i64 %e) {\n  %c = icmp sge i64 %a, 0\n  %r = select i1 %c, i64 %d, i64 %e\n  ret i64 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sge i64 %a, 0\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i64 %d, i64 %e\nCost Model: Found an estimated cost of 1 for instruction:   ret i64 %r"
 },
 {
  "instr": "icmpsge",
  "ty": "<8 x i8>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "cmge v0.8b, v0.8b, v1.8b\nret",
  "giasm": "cmge v0.8b, v0.8b, v1.8b\nret",
  "ll": "define <8 x i1> @test(<8 x i8> %a, <8 x i8> %b) {\n  %r = icmp sge <8 x i8> %a, %b\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sge <8 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "icmpsge",
  "ty": "<8 x i8>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "cmge v0.8b, v0.8b, #0\nret",
  "giasm": "cmge v0.8b, v0.8b, #0\nret",
  "ll": "define <8 x i1> @test(<8 x i8> %a) {\n  %r = icmp sge <8 x i8> %a, zeroinitializer\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sge <8 x i8> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "selecticmpsge",
  "ty": "<8 x i8>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmge v0.8b, v0.8b, v1.8b\nbsl v0.8b, v2.8b, v3.8b\nret",
  "giasm": "cmge v0.8b, v0.8b, v1.8b\nbsl v0.8b, v2.8b, v3.8b\nret",
  "ll": "define <8 x i8> @test(<8 x i8> %a, <8 x i8> %b, <8 x i8> %d, <8 x i8> %e) {\n  %c = icmp sge <8 x i8> %a, %b\n  %r = select <8 x i1> %c, <8 x i8> %d, <8 x i8> %e\n  ret <8 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sge <8 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x i8> %d, <8 x i8> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i8> %r"
 },
 {
  "instr": "selecticmpsge",
  "ty": "<8 x i8>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmge v0.8b, v0.8b, #0\nbsl v0.8b, v1.8b, v2.8b\nret",
  "giasm": "cmge v0.8b, v0.8b, #0\nbsl v0.8b, v1.8b, v2.8b\nret",
  "ll": "define <8 x i8> @test(<8 x i8> %a, <8 x i8> %d, <8 x i8> %e) {\n  %c = icmp sge <8 x i8> %a, zeroinitializer\n  %r = select <8 x i1> %c, <8 x i8> %d, <8 x i8> %e\n  ret <8 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sge <8 x i8> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x i8> %d, <8 x i8> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i8> %r"
 },
 {
  "instr": "icmpsge",
  "ty": "<16 x i8>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "cmge v0.16b, v0.16b, v1.16b\nret",
  "giasm": "cmge v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <16 x i1> @test(<16 x i8> %a, <16 x i8> %b) {\n  %r = icmp sge <16 x i8> %a, %b\n  ret <16 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sge <16 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i1> %r"
 },
 {
  "instr": "icmpsge",
  "ty": "<16 x i8>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "cmge v0.16b, v0.16b, #0\nret",
  "giasm": "cmge v0.16b, v0.16b, #0\nret",
  "ll": "define <16 x i1> @test(<16 x i8> %a) {\n  %r = icmp sge <16 x i8> %a, zeroinitializer\n  ret <16 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sge <16 x i8> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i1> %r"
 },
 {
  "instr": "selecticmpsge",
  "ty": "<16 x i8>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmge v0.16b, v0.16b, v1.16b\nbsl v0.16b, v2.16b, v3.16b\nret",
  "giasm": "cmge v0.16b, v0.16b, v1.16b\nbsl v0.16b, v2.16b, v3.16b\nret",
  "ll": "define <16 x i8> @test(<16 x i8> %a, <16 x i8> %b, <16 x i8> %d, <16 x i8> %e) {\n  %c = icmp sge <16 x i8> %a, %b\n  %r = select <16 x i1> %c, <16 x i8> %d, <16 x i8> %e\n  ret <16 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sge <16 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <16 x i1> %c, <16 x i8> %d, <16 x i8> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i8> %r"
 },
 {
  "instr": "selecticmpsge",
  "ty": "<16 x i8>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmge v0.16b, v0.16b, #0\nbsl v0.16b, v1.16b, v2.16b\nret",
  "giasm": "cmge v0.16b, v0.16b, #0\nbsl v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <16 x i8> @test(<16 x i8> %a, <16 x i8> %d, <16 x i8> %e) {\n  %c = icmp sge <16 x i8> %a, zeroinitializer\n  %r = select <16 x i1> %c, <16 x i8> %d, <16 x i8> %e\n  ret <16 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sge <16 x i8> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <16 x i1> %c, <16 x i8> %d, <16 x i8> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i8> %r"
 },
 {
  "instr": "icmpsge",
  "ty": "<32 x i8>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 14,
  "gisize": -1,
  "extrasize": 0,
  "asm": "cmge v1.16b, v1.16b, v3.16b\nadrp x9, .LCPI0_0\ncmge v0.16b, v0.16b, v2.16b\nldr q2, [x9, :lo12:.LCPI0_0]\nand v1.16b, v1.16b, v2.16b\nand v0.16b, v0.16b, v2.16b\next v2.16b, v1.16b, v1.16b, #8\next v3.16b, v0.16b, v0.16b, #8\nzip1 v1.16b, v1.16b, v2.16b\nzip1 v0.16b, v0.16b, v3.16b\naddv h1, v1.8h\naddv h0, v0.8h\nstr h1, [x8, #2]\nstr h0, [x8]\nret",
  "giasm": "LLVM ERROR: unable to legalize instruction: G_STORE %8:_(<32 x s8>), %2:_(p0) :: (store (<32 x s1>)) (in function: test)",
  "ll": "define <32 x i1> @test(<32 x i8> %a, <32 x i8> %b) {\n  %r = icmp sge <32 x i8> %a, %b\n  ret <32 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sge <32 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i1> %r"
 },
 {
  "instr": "icmpsge",
  "ty": "<32 x i8>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 14,
  "gisize": -1,
  "extrasize": 0,
  "asm": "adrp x9, .LCPI0_0\ncmge v1.16b, v1.16b, #0\ncmge v0.16b, v0.16b, #0\nldr q2, [x9, :lo12:.LCPI0_0]\nand v1.16b, v1.16b, v2.16b\nand v0.16b, v0.16b, v2.16b\next v2.16b, v1.16b, v1.16b, #8\next v3.16b, v0.16b, v0.16b, #8\nzip1 v1.16b, v1.16b, v2.16b\nzip1 v0.16b, v0.16b, v3.16b\naddv h1, v1.8h\naddv h0, v0.8h\nstr h1, [x8, #2]\nstr h0, [x8]\nret",
  "giasm": "LLVM ERROR: unable to legalize instruction: G_STORE %7:_(<32 x s8>), %1:_(p0) :: (store (<32 x s1>)) (in function: test)",
  "ll": "define <32 x i1> @test(<32 x i8> %a) {\n  %r = icmp sge <32 x i8> %a, zeroinitializer\n  ret <32 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sge <32 x i8> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i1> %r"
 },
 {
  "instr": "selecticmpsge",
  "ty": "<32 x i8>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 4,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmge v1.16b, v1.16b, v3.16b\ncmge v0.16b, v0.16b, v2.16b\nbsl v1.16b, v5.16b, v7.16b\nbsl v0.16b, v4.16b, v6.16b\nret",
  "giasm": "cmge v0.16b, v0.16b, v2.16b\ncmge v1.16b, v1.16b, v3.16b\nbsl v0.16b, v4.16b, v6.16b\nbsl v1.16b, v5.16b, v7.16b\nret",
  "ll": "define <32 x i8> @test(<32 x i8> %a, <32 x i8> %b, <32 x i8> %d, <32 x i8> %e) {\n  %c = icmp sge <32 x i8> %a, %b\n  %r = select <32 x i1> %c, <32 x i8> %d, <32 x i8> %e\n  ret <32 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sge <32 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <32 x i1> %c, <32 x i8> %d, <32 x i8> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i8> %r"
 },
 {
  "instr": "selecticmpsge",
  "ty": "<32 x i8>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 4,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmge v1.16b, v1.16b, #0\ncmge v0.16b, v0.16b, #0\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "giasm": "cmge v0.16b, v0.16b, #0\ncmge v1.16b, v1.16b, #0\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "ll": "define <32 x i8> @test(<32 x i8> %a, <32 x i8> %d, <32 x i8> %e) {\n  %c = icmp sge <32 x i8> %a, zeroinitializer\n  %r = select <32 x i1> %c, <32 x i8> %d, <32 x i8> %e\n  ret <32 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sge <32 x i8> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <32 x i1> %c, <32 x i8> %d, <32 x i8> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i8> %r"
 },
 {
  "instr": "icmpsge",
  "ty": "<4 x i16>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "cmge v0.4h, v0.4h, v1.4h\nret",
  "giasm": "cmge v0.4h, v0.4h, v1.4h\nret",
  "ll": "define <4 x i1> @test(<4 x i16> %a, <4 x i16> %b) {\n  %r = icmp sge <4 x i16> %a, %b\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sge <4 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "icmpsge",
  "ty": "<4 x i16>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "cmge v0.4h, v0.4h, #0\nret",
  "giasm": "cmge v0.4h, v0.4h, #0\nret",
  "ll": "define <4 x i1> @test(<4 x i16> %a) {\n  %r = icmp sge <4 x i16> %a, zeroinitializer\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sge <4 x i16> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "selecticmpsge",
  "ty": "<4 x i16>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmge v0.4h, v0.4h, v1.4h\nbsl v0.8b, v2.8b, v3.8b\nret",
  "giasm": "cmge v0.4h, v0.4h, v1.4h\nbsl v0.8b, v2.8b, v3.8b\nret",
  "ll": "define <4 x i16> @test(<4 x i16> %a, <4 x i16> %b, <4 x i16> %d, <4 x i16> %e) {\n  %c = icmp sge <4 x i16> %a, %b\n  %r = select <4 x i1> %c, <4 x i16> %d, <4 x i16> %e\n  ret <4 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sge <4 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x i16> %d, <4 x i16> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i16> %r"
 },
 {
  "instr": "selecticmpsge",
  "ty": "<4 x i16>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmge v0.4h, v0.4h, #0\nbsl v0.8b, v1.8b, v2.8b\nret",
  "giasm": "cmge v0.4h, v0.4h, #0\nbsl v0.8b, v1.8b, v2.8b\nret",
  "ll": "define <4 x i16> @test(<4 x i16> %a, <4 x i16> %d, <4 x i16> %e) {\n  %c = icmp sge <4 x i16> %a, zeroinitializer\n  %r = select <4 x i1> %c, <4 x i16> %d, <4 x i16> %e\n  ret <4 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sge <4 x i16> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x i16> %d, <4 x i16> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i16> %r"
 },
 {
  "instr": "icmpsge",
  "ty": "<8 x i16>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmge v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "giasm": "cmge v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x i16> %a, <8 x i16> %b) {\n  %r = icmp sge <8 x i16> %a, %b\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sge <8 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "icmpsge",
  "ty": "<8 x i16>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmge v0.8h, v0.8h, #0\nxtn v0.8b, v0.8h\nret",
  "giasm": "cmge v0.8h, v0.8h, #0\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x i16> %a) {\n  %r = icmp sge <8 x i16> %a, zeroinitializer\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sge <8 x i16> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "selecticmpsge",
  "ty": "<8 x i16>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmge v0.8h, v0.8h, v1.8h\nbsl v0.16b, v2.16b, v3.16b\nret",
  "giasm": "cmge v0.8h, v0.8h, v1.8h\nbsl v0.16b, v2.16b, v3.16b\nret",
  "ll": "define <8 x i16> @test(<8 x i16> %a, <8 x i16> %b, <8 x i16> %d, <8 x i16> %e) {\n  %c = icmp sge <8 x i16> %a, %b\n  %r = select <8 x i1> %c, <8 x i16> %d, <8 x i16> %e\n  ret <8 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sge <8 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x i16> %d, <8 x i16> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i16> %r"
 },
 {
  "instr": "selecticmpsge",
  "ty": "<8 x i16>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmge v0.8h, v0.8h, #0\nbsl v0.16b, v1.16b, v2.16b\nret",
  "giasm": "cmge v0.8h, v0.8h, #0\nbsl v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <8 x i16> @test(<8 x i16> %a, <8 x i16> %d, <8 x i16> %e) {\n  %c = icmp sge <8 x i16> %a, zeroinitializer\n  %r = select <8 x i1> %c, <8 x i16> %d, <8 x i16> %e\n  ret <8 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sge <8 x i16> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x i16> %d, <8 x i16> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i16> %r"
 },
 {
  "instr": "icmpsge",
  "ty": "<16 x i16>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "cmge v1.8h, v1.8h, v3.8h\ncmge v0.8h, v0.8h, v2.8h\nuzp1 v0.16b, v0.16b, v1.16b\nret",
  "giasm": "cmge v0.8h, v0.8h, v2.8h\ncmge v1.8h, v1.8h, v3.8h\nuzp1 v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <16 x i1> @test(<16 x i16> %a, <16 x i16> %b) {\n  %r = icmp sge <16 x i16> %a, %b\n  ret <16 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sge <16 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i1> %r"
 },
 {
  "instr": "icmpsge",
  "ty": "<16 x i16>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "cmge v1.8h, v1.8h, #0\ncmge v0.8h, v0.8h, #0\nuzp1 v0.16b, v0.16b, v1.16b\nret",
  "giasm": "cmge v0.8h, v0.8h, #0\ncmge v1.8h, v1.8h, #0\nuzp1 v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <16 x i1> @test(<16 x i16> %a) {\n  %r = icmp sge <16 x i16> %a, zeroinitializer\n  ret <16 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sge <16 x i16> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i1> %r"
 },
 {
  "instr": "selecticmpsge",
  "ty": "<16 x i16>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 4,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmge v1.8h, v1.8h, v3.8h\ncmge v0.8h, v0.8h, v2.8h\nbsl v1.16b, v5.16b, v7.16b\nbsl v0.16b, v4.16b, v6.16b\nret",
  "giasm": "cmge v0.8h, v0.8h, v2.8h\ncmge v1.8h, v1.8h, v3.8h\nbsl v0.16b, v4.16b, v6.16b\nbsl v1.16b, v5.16b, v7.16b\nret",
  "ll": "define <16 x i16> @test(<16 x i16> %a, <16 x i16> %b, <16 x i16> %d, <16 x i16> %e) {\n  %c = icmp sge <16 x i16> %a, %b\n  %r = select <16 x i1> %c, <16 x i16> %d, <16 x i16> %e\n  ret <16 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sge <16 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <16 x i1> %c, <16 x i16> %d, <16 x i16> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i16> %r"
 },
 {
  "instr": "selecticmpsge",
  "ty": "<16 x i16>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 4,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmge v1.8h, v1.8h, #0\ncmge v0.8h, v0.8h, #0\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "giasm": "cmge v0.8h, v0.8h, #0\ncmge v1.8h, v1.8h, #0\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "ll": "define <16 x i16> @test(<16 x i16> %a, <16 x i16> %d, <16 x i16> %e) {\n  %c = icmp sge <16 x i16> %a, zeroinitializer\n  %r = select <16 x i1> %c, <16 x i16> %d, <16 x i16> %e\n  ret <16 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sge <16 x i16> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <16 x i1> %c, <16 x i16> %d, <16 x i16> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i16> %r"
 },
 {
  "instr": "icmpsge",
  "ty": "<2 x i32>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "cmge v0.2s, v0.2s, v1.2s\nret",
  "giasm": "cmge v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x i1> @test(<2 x i32> %a, <2 x i32> %b) {\n  %r = icmp sge <2 x i32> %a, %b\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sge <2 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "icmpsge",
  "ty": "<2 x i32>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "cmge v0.2s, v0.2s, #0\nret",
  "giasm": "cmge v0.2s, v0.2s, #0\nret",
  "ll": "define <2 x i1> @test(<2 x i32> %a) {\n  %r = icmp sge <2 x i32> %a, zeroinitializer\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sge <2 x i32> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "selecticmpsge",
  "ty": "<2 x i32>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmge v0.2s, v0.2s, v1.2s\nbsl v0.8b, v2.8b, v3.8b\nret",
  "giasm": "cmge v0.2s, v0.2s, v1.2s\nbsl v0.8b, v2.8b, v3.8b\nret",
  "ll": "define <2 x i32> @test(<2 x i32> %a, <2 x i32> %b, <2 x i32> %d, <2 x i32> %e) {\n  %c = icmp sge <2 x i32> %a, %b\n  %r = select <2 x i1> %c, <2 x i32> %d, <2 x i32> %e\n  ret <2 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sge <2 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <2 x i1> %c, <2 x i32> %d, <2 x i32> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i32> %r"
 },
 {
  "instr": "selecticmpsge",
  "ty": "<2 x i32>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmge v0.2s, v0.2s, #0\nbsl v0.8b, v1.8b, v2.8b\nret",
  "giasm": "cmge v0.2s, v0.2s, #0\nbsl v0.8b, v1.8b, v2.8b\nret",
  "ll": "define <2 x i32> @test(<2 x i32> %a, <2 x i32> %d, <2 x i32> %e) {\n  %c = icmp sge <2 x i32> %a, zeroinitializer\n  %r = select <2 x i1> %c, <2 x i32> %d, <2 x i32> %e\n  ret <2 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sge <2 x i32> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <2 x i1> %c, <2 x i32> %d, <2 x i32> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i32> %r"
 },
 {
  "instr": "icmpsge",
  "ty": "<4 x i32>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmge v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "giasm": "cmge v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x i32> %a, <4 x i32> %b) {\n  %r = icmp sge <4 x i32> %a, %b\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sge <4 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "icmpsge",
  "ty": "<4 x i32>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmge v0.4s, v0.4s, #0\nxtn v0.4h, v0.4s\nret",
  "giasm": "cmge v0.4s, v0.4s, #0\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x i32> %a) {\n  %r = icmp sge <4 x i32> %a, zeroinitializer\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sge <4 x i32> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "selecticmpsge",
  "ty": "<4 x i32>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmge v0.4s, v0.4s, v1.4s\nbsl v0.16b, v2.16b, v3.16b\nret",
  "giasm": "cmge v0.4s, v0.4s, v1.4s\nbsl v0.16b, v2.16b, v3.16b\nret",
  "ll": "define <4 x i32> @test(<4 x i32> %a, <4 x i32> %b, <4 x i32> %d, <4 x i32> %e) {\n  %c = icmp sge <4 x i32> %a, %b\n  %r = select <4 x i1> %c, <4 x i32> %d, <4 x i32> %e\n  ret <4 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sge <4 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x i32> %d, <4 x i32> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i32> %r"
 },
 {
  "instr": "selecticmpsge",
  "ty": "<4 x i32>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmge v0.4s, v0.4s, #0\nbsl v0.16b, v1.16b, v2.16b\nret",
  "giasm": "cmge v0.4s, v0.4s, #0\nbsl v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <4 x i32> @test(<4 x i32> %a, <4 x i32> %d, <4 x i32> %e) {\n  %c = icmp sge <4 x i32> %a, zeroinitializer\n  %r = select <4 x i1> %c, <4 x i32> %d, <4 x i32> %e\n  ret <4 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sge <4 x i32> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x i32> %d, <4 x i32> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i32> %r"
 },
 {
  "instr": "icmpsge",
  "ty": "<8 x i32>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmge v1.4s, v1.4s, v3.4s\ncmge v0.4s, v0.4s, v2.4s\nuzp1 v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "giasm": "cmge v0.4s, v0.4s, v2.4s\ncmge v1.4s, v1.4s, v3.4s\nuzp1 v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x i32> %a, <8 x i32> %b) {\n  %r = icmp sge <8 x i32> %a, %b\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sge <8 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "icmpsge",
  "ty": "<8 x i32>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmge v1.4s, v1.4s, #0\ncmge v0.4s, v0.4s, #0\nuzp1 v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "giasm": "cmge v0.4s, v0.4s, #0\ncmge v1.4s, v1.4s, #0\nuzp1 v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x i32> %a) {\n  %r = icmp sge <8 x i32> %a, zeroinitializer\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sge <8 x i32> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "selecticmpsge",
  "ty": "<8 x i32>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 4,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmge v1.4s, v1.4s, v3.4s\ncmge v0.4s, v0.4s, v2.4s\nbsl v1.16b, v5.16b, v7.16b\nbsl v0.16b, v4.16b, v6.16b\nret",
  "giasm": "cmge v0.4s, v0.4s, v2.4s\ncmge v1.4s, v1.4s, v3.4s\nbsl v0.16b, v4.16b, v6.16b\nbsl v1.16b, v5.16b, v7.16b\nret",
  "ll": "define <8 x i32> @test(<8 x i32> %a, <8 x i32> %b, <8 x i32> %d, <8 x i32> %e) {\n  %c = icmp sge <8 x i32> %a, %b\n  %r = select <8 x i1> %c, <8 x i32> %d, <8 x i32> %e\n  ret <8 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sge <8 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x i32> %d, <8 x i32> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i32> %r"
 },
 {
  "instr": "selecticmpsge",
  "ty": "<8 x i32>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 4,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmge v1.4s, v1.4s, #0\ncmge v0.4s, v0.4s, #0\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "giasm": "cmge v0.4s, v0.4s, #0\ncmge v1.4s, v1.4s, #0\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "ll": "define <8 x i32> @test(<8 x i32> %a, <8 x i32> %d, <8 x i32> %e) {\n  %c = icmp sge <8 x i32> %a, zeroinitializer\n  %r = select <8 x i1> %c, <8 x i32> %d, <8 x i32> %e\n  ret <8 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sge <8 x i32> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x i32> %d, <8 x i32> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i32> %r"
 },
 {
  "instr": "icmpsge",
  "ty": "<2 x i64>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmge v0.2d, v0.2d, v1.2d\nxtn v0.2s, v0.2d\nret",
  "giasm": "cmge v0.2d, v0.2d, v1.2d\nxtn v0.2s, v0.2d\nret",
  "ll": "define <2 x i1> @test(<2 x i64> %a, <2 x i64> %b) {\n  %r = icmp sge <2 x i64> %a, %b\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sge <2 x i64> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "icmpsge",
  "ty": "<2 x i64>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmge v0.2d, v0.2d, #0\nxtn v0.2s, v0.2d\nret",
  "giasm": "cmge v0.2d, v0.2d, #0\nxtn v0.2s, v0.2d\nret",
  "ll": "define <2 x i1> @test(<2 x i64> %a) {\n  %r = icmp sge <2 x i64> %a, zeroinitializer\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sge <2 x i64> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "selecticmpsge",
  "ty": "<2 x i64>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmge v0.2d, v0.2d, v1.2d\nbsl v0.16b, v2.16b, v3.16b\nret",
  "giasm": "cmge v0.2d, v0.2d, v1.2d\nbsl v0.16b, v2.16b, v3.16b\nret",
  "ll": "define <2 x i64> @test(<2 x i64> %a, <2 x i64> %b, <2 x i64> %d, <2 x i64> %e) {\n  %c = icmp sge <2 x i64> %a, %b\n  %r = select <2 x i1> %c, <2 x i64> %d, <2 x i64> %e\n  ret <2 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sge <2 x i64> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <2 x i1> %c, <2 x i64> %d, <2 x i64> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i64> %r"
 },
 {
  "instr": "selecticmpsge",
  "ty": "<2 x i64>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmge v0.2d, v0.2d, #0\nbsl v0.16b, v1.16b, v2.16b\nret",
  "giasm": "cmge v0.2d, v0.2d, #0\nbsl v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <2 x i64> @test(<2 x i64> %a, <2 x i64> %d, <2 x i64> %e) {\n  %c = icmp sge <2 x i64> %a, zeroinitializer\n  %r = select <2 x i1> %c, <2 x i64> %d, <2 x i64> %e\n  ret <2 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sge <2 x i64> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <2 x i1> %c, <2 x i64> %d, <2 x i64> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i64> %r"
 },
 {
  "instr": "icmpsge",
  "ty": "<4 x i64>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmge v1.2d, v1.2d, v3.2d\ncmge v0.2d, v0.2d, v2.2d\nuzp1 v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "giasm": "cmge v0.2d, v0.2d, v2.2d\ncmge v1.2d, v1.2d, v3.2d\nuzp1 v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x i64> %a, <4 x i64> %b) {\n  %r = icmp sge <4 x i64> %a, %b\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sge <4 x i64> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "icmpsge",
  "ty": "<4 x i64>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmge v1.2d, v1.2d, #0\ncmge v0.2d, v0.2d, #0\nuzp1 v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "giasm": "cmge v0.2d, v0.2d, #0\ncmge v1.2d, v1.2d, #0\nuzp1 v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x i64> %a) {\n  %r = icmp sge <4 x i64> %a, zeroinitializer\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp sge <4 x i64> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "selecticmpsge",
  "ty": "<4 x i64>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 4,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmge v1.2d, v1.2d, v3.2d\ncmge v0.2d, v0.2d, v2.2d\nbsl v1.16b, v5.16b, v7.16b\nbsl v0.16b, v4.16b, v6.16b\nret",
  "giasm": "cmge v0.2d, v0.2d, v2.2d\ncmge v1.2d, v1.2d, v3.2d\nbsl v0.16b, v4.16b, v6.16b\nbsl v1.16b, v5.16b, v7.16b\nret",
  "ll": "define <4 x i64> @test(<4 x i64> %a, <4 x i64> %b, <4 x i64> %d, <4 x i64> %e) {\n  %c = icmp sge <4 x i64> %a, %b\n  %r = select <4 x i1> %c, <4 x i64> %d, <4 x i64> %e\n  ret <4 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sge <4 x i64> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x i64> %d, <4 x i64> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i64> %r"
 },
 {
  "instr": "selecticmpsge",
  "ty": "<4 x i64>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 4,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmge v1.2d, v1.2d, #0\ncmge v0.2d, v0.2d, #0\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "giasm": "cmge v0.2d, v0.2d, #0\ncmge v1.2d, v1.2d, #0\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "ll": "define <4 x i64> @test(<4 x i64> %a, <4 x i64> %d, <4 x i64> %e) {\n  %c = icmp sge <4 x i64> %a, zeroinitializer\n  %r = select <4 x i1> %c, <4 x i64> %d, <4 x i64> %e\n  ret <4 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp sge <4 x i64> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x i64> %d, <4 x i64> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i64> %r"
 },
 {
  "instr": "icmpult",
  "ty": "i8",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "and w8, w0, #0xff\ncmp w8, w1, uxtb\ncset w0, lo\nret",
  "giasm": "and w8, w0, #0xff\ncmp w8, w1, uxtb\ncset w0, lo\nret",
  "ll": "define i1 @test(i8 %a, i8 %b) {\n  %r = icmp ult i8 %a, %b\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ult i8 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "icmpult",
  "ty": "i8",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "mov w0, wzr\nret",
  "giasm": "mov w0, wzr\nret",
  "ll": "define i1 @test(i8 %a) {\n  %r = icmp ult i8 %a, 0\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ult i8 %a, 0\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "selecticmpult",
  "ty": "i8",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "and w8, w0, #0xff\ncmp w8, w1, uxtb\ncsel w0, w2, w3, lo\nret",
  "giasm": "and w8, w0, #0xff\ncmp w8, w1, uxtb\ncsel w0, w2, w3, lo\nret",
  "ll": "define i8 @test(i8 %a, i8 %b, i8 %d, i8 %e) {\n  %c = icmp ult i8 %a, %b\n  %r = select i1 %c, i8 %d, i8 %e\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ult i8 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i8 %d, i8 %e\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "selecticmpult",
  "ty": "i8",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "mov w0, w2\nret",
  "giasm": "mov w0, w2\nret",
  "ll": "define i8 @test(i8 %a, i8 %d, i8 %e) {\n  %c = icmp ult i8 %a, 0\n  %r = select i1 %c, i8 %d, i8 %e\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ult i8 %a, 0\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i8 %d, i8 %e\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "icmpult",
  "ty": "i16",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "and w8, w0, #0xffff\ncmp w8, w1, uxth\ncset w0, lo\nret",
  "giasm": "and w8, w0, #0xffff\ncmp w8, w1, uxth\ncset w0, lo\nret",
  "ll": "define i1 @test(i16 %a, i16 %b) {\n  %r = icmp ult i16 %a, %b\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ult i16 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "icmpult",
  "ty": "i16",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "mov w0, wzr\nret",
  "giasm": "mov w0, wzr\nret",
  "ll": "define i1 @test(i16 %a) {\n  %r = icmp ult i16 %a, 0\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ult i16 %a, 0\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "selecticmpult",
  "ty": "i16",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "and w8, w0, #0xffff\ncmp w8, w1, uxth\ncsel w0, w2, w3, lo\nret",
  "giasm": "and w8, w0, #0xffff\ncmp w8, w1, uxth\ncsel w0, w2, w3, lo\nret",
  "ll": "define i16 @test(i16 %a, i16 %b, i16 %d, i16 %e) {\n  %c = icmp ult i16 %a, %b\n  %r = select i1 %c, i16 %d, i16 %e\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ult i16 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i16 %d, i16 %e\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "selecticmpult",
  "ty": "i16",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "mov w0, w2\nret",
  "giasm": "mov w0, w2\nret",
  "ll": "define i16 @test(i16 %a, i16 %d, i16 %e) {\n  %c = icmp ult i16 %a, 0\n  %r = select i1 %c, i16 %d, i16 %e\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ult i16 %a, 0\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i16 %d, i16 %e\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "icmpult",
  "ty": "i32",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmp w0, w1\ncset w0, lo\nret",
  "giasm": "cmp w0, w1\ncset w0, lo\nret",
  "ll": "define i1 @test(i32 %a, i32 %b) {\n  %r = icmp ult i32 %a, %b\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ult i32 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "icmpult",
  "ty": "i32",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "mov w0, wzr\nret",
  "giasm": "mov w0, wzr\nret",
  "ll": "define i1 @test(i32 %a) {\n  %r = icmp ult i32 %a, 0\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ult i32 %a, 0\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "selecticmpult",
  "ty": "i32",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmp w0, w1\ncsel w0, w2, w3, lo\nret",
  "giasm": "cmp w0, w1\ncsel w0, w2, w3, lo\nret",
  "ll": "define i32 @test(i32 %a, i32 %b, i32 %d, i32 %e) {\n  %c = icmp ult i32 %a, %b\n  %r = select i1 %c, i32 %d, i32 %e\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ult i32 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i32 %d, i32 %e\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "selecticmpult",
  "ty": "i32",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "mov w0, w2\nret",
  "giasm": "mov w0, w2\nret",
  "ll": "define i32 @test(i32 %a, i32 %d, i32 %e) {\n  %c = icmp ult i32 %a, 0\n  %r = select i1 %c, i32 %d, i32 %e\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ult i32 %a, 0\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i32 %d, i32 %e\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "icmpult",
  "ty": "i64",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmp x0, x1\ncset w0, lo\nret",
  "giasm": "cmp x0, x1\ncset w0, lo\nret",
  "ll": "define i1 @test(i64 %a, i64 %b) {\n  %r = icmp ult i64 %a, %b\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ult i64 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "icmpult",
  "ty": "i64",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "mov w0, wzr\nret",
  "giasm": "mov w0, wzr\nret",
  "ll": "define i1 @test(i64 %a) {\n  %r = icmp ult i64 %a, 0\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ult i64 %a, 0\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "selecticmpult",
  "ty": "i64",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmp x0, x1\ncsel x0, x2, x3, lo\nret",
  "giasm": "cmp x0, x1\ncsel x0, x2, x3, lo\nret",
  "ll": "define i64 @test(i64 %a, i64 %b, i64 %d, i64 %e) {\n  %c = icmp ult i64 %a, %b\n  %r = select i1 %c, i64 %d, i64 %e\n  ret i64 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ult i64 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i64 %d, i64 %e\nCost Model: Found an estimated cost of 1 for instruction:   ret i64 %r"
 },
 {
  "instr": "selecticmpult",
  "ty": "i64",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "mov x0, x2\nret",
  "giasm": "mov x0, x2\nret",
  "ll": "define i64 @test(i64 %a, i64 %d, i64 %e) {\n  %c = icmp ult i64 %a, 0\n  %r = select i1 %c, i64 %d, i64 %e\n  ret i64 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ult i64 %a, 0\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i64 %d, i64 %e\nCost Model: Found an estimated cost of 1 for instruction:   ret i64 %r"
 },
 {
  "instr": "icmpult",
  "ty": "<8 x i8>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "cmhi v0.8b, v1.8b, v0.8b\nret",
  "giasm": "cmhi v0.8b, v1.8b, v0.8b\nret",
  "ll": "define <8 x i1> @test(<8 x i8> %a, <8 x i8> %b) {\n  %r = icmp ult <8 x i8> %a, %b\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ult <8 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "icmpult",
  "ty": "<8 x i8>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "movi v0.2d, #0000000000000000\nret",
  "giasm": "movi v0.2d, #0000000000000000\nret",
  "ll": "define <8 x i1> @test(<8 x i8> %a) {\n  %r = icmp ult <8 x i8> %a, zeroinitializer\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ult <8 x i8> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "selecticmpult",
  "ty": "<8 x i8>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmhi v0.8b, v1.8b, v0.8b\nbsl v0.8b, v2.8b, v3.8b\nret",
  "giasm": "cmhi v0.8b, v1.8b, v0.8b\nbsl v0.8b, v2.8b, v3.8b\nret",
  "ll": "define <8 x i8> @test(<8 x i8> %a, <8 x i8> %b, <8 x i8> %d, <8 x i8> %e) {\n  %c = icmp ult <8 x i8> %a, %b\n  %r = select <8 x i1> %c, <8 x i8> %d, <8 x i8> %e\n  ret <8 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ult <8 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x i8> %d, <8 x i8> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i8> %r"
 },
 {
  "instr": "selecticmpult",
  "ty": "<8 x i8>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 0,
  "gisize": 0,
  "extrasize": 0,
  "asm": "fmov d0, d2\nret",
  "giasm": "fmov d0, d2\nret",
  "ll": "define <8 x i8> @test(<8 x i8> %a, <8 x i8> %d, <8 x i8> %e) {\n  %c = icmp ult <8 x i8> %a, zeroinitializer\n  %r = select <8 x i1> %c, <8 x i8> %d, <8 x i8> %e\n  ret <8 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ult <8 x i8> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x i8> %d, <8 x i8> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i8> %r"
 },
 {
  "instr": "icmpult",
  "ty": "<16 x i8>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "cmhi v0.16b, v1.16b, v0.16b\nret",
  "giasm": "cmhi v0.16b, v1.16b, v0.16b\nret",
  "ll": "define <16 x i1> @test(<16 x i8> %a, <16 x i8> %b) {\n  %r = icmp ult <16 x i8> %a, %b\n  ret <16 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ult <16 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i1> %r"
 },
 {
  "instr": "icmpult",
  "ty": "<16 x i8>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "movi v0.2d, #0000000000000000\nret",
  "giasm": "movi v0.2d, #0000000000000000\nret",
  "ll": "define <16 x i1> @test(<16 x i8> %a) {\n  %r = icmp ult <16 x i8> %a, zeroinitializer\n  ret <16 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ult <16 x i8> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i1> %r"
 },
 {
  "instr": "selecticmpult",
  "ty": "<16 x i8>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmhi v0.16b, v1.16b, v0.16b\nbsl v0.16b, v2.16b, v3.16b\nret",
  "giasm": "cmhi v0.16b, v1.16b, v0.16b\nbsl v0.16b, v2.16b, v3.16b\nret",
  "ll": "define <16 x i8> @test(<16 x i8> %a, <16 x i8> %b, <16 x i8> %d, <16 x i8> %e) {\n  %c = icmp ult <16 x i8> %a, %b\n  %r = select <16 x i1> %c, <16 x i8> %d, <16 x i8> %e\n  ret <16 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ult <16 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <16 x i1> %c, <16 x i8> %d, <16 x i8> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i8> %r"
 },
 {
  "instr": "selecticmpult",
  "ty": "<16 x i8>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 0,
  "gisize": 0,
  "extrasize": 0,
  "asm": "mov v0.16b, v2.16b\nret",
  "giasm": "mov v0.16b, v2.16b\nret",
  "ll": "define <16 x i8> @test(<16 x i8> %a, <16 x i8> %d, <16 x i8> %e) {\n  %c = icmp ult <16 x i8> %a, zeroinitializer\n  %r = select <16 x i1> %c, <16 x i8> %d, <16 x i8> %e\n  ret <16 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ult <16 x i8> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <16 x i1> %c, <16 x i8> %d, <16 x i8> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i8> %r"
 },
 {
  "instr": "icmpult",
  "ty": "<32 x i8>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 14,
  "gisize": -1,
  "extrasize": 0,
  "asm": "cmhi v1.16b, v3.16b, v1.16b\nadrp x9, .LCPI0_0\ncmhi v0.16b, v2.16b, v0.16b\nldr q2, [x9, :lo12:.LCPI0_0]\nand v1.16b, v1.16b, v2.16b\nand v0.16b, v0.16b, v2.16b\next v2.16b, v1.16b, v1.16b, #8\next v3.16b, v0.16b, v0.16b, #8\nzip1 v1.16b, v1.16b, v2.16b\nzip1 v0.16b, v0.16b, v3.16b\naddv h1, v1.8h\naddv h0, v0.8h\nstr h1, [x8, #2]\nstr h0, [x8]\nret",
  "giasm": "LLVM ERROR: unable to legalize instruction: G_STORE %8:_(<32 x s8>), %2:_(p0) :: (store (<32 x s1>)) (in function: test)",
  "ll": "define <32 x i1> @test(<32 x i8> %a, <32 x i8> %b) {\n  %r = icmp ult <32 x i8> %a, %b\n  ret <32 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ult <32 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i1> %r"
 },
 {
  "instr": "icmpult",
  "ty": "<32 x i8>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "str wzr, [x8]\nret",
  "giasm": "LLVM ERROR: unable to legalize instruction: G_STORE %8:_(<32 x s8>), %1:_(p0) :: (store (<32 x s1>)) (in function: test)",
  "ll": "define <32 x i1> @test(<32 x i8> %a) {\n  %r = icmp ult <32 x i8> %a, zeroinitializer\n  ret <32 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ult <32 x i8> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i1> %r"
 },
 {
  "instr": "selecticmpult",
  "ty": "<32 x i8>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 4,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmhi v1.16b, v3.16b, v1.16b\ncmhi v0.16b, v2.16b, v0.16b\nbsl v1.16b, v5.16b, v7.16b\nbsl v0.16b, v4.16b, v6.16b\nret",
  "giasm": "cmhi v0.16b, v2.16b, v0.16b\ncmhi v1.16b, v3.16b, v1.16b\nbsl v0.16b, v4.16b, v6.16b\nbsl v1.16b, v5.16b, v7.16b\nret",
  "ll": "define <32 x i8> @test(<32 x i8> %a, <32 x i8> %b, <32 x i8> %d, <32 x i8> %e) {\n  %c = icmp ult <32 x i8> %a, %b\n  %r = select <32 x i1> %c, <32 x i8> %d, <32 x i8> %e\n  ret <32 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ult <32 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <32 x i1> %c, <32 x i8> %d, <32 x i8> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i8> %r"
 },
 {
  "instr": "selecticmpult",
  "ty": "<32 x i8>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 4,
  "lat": 2,
  "sizelat": 2,
  "size": 0,
  "gisize": 0,
  "extrasize": 0,
  "asm": "mov v1.16b, v5.16b\nmov v0.16b, v4.16b\nret",
  "giasm": "mov v0.16b, v4.16b\nmov v1.16b, v5.16b\nret",
  "ll": "define <32 x i8> @test(<32 x i8> %a, <32 x i8> %d, <32 x i8> %e) {\n  %c = icmp ult <32 x i8> %a, zeroinitializer\n  %r = select <32 x i1> %c, <32 x i8> %d, <32 x i8> %e\n  ret <32 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ult <32 x i8> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <32 x i1> %c, <32 x i8> %d, <32 x i8> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i8> %r"
 },
 {
  "instr": "icmpult",
  "ty": "<4 x i16>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "cmhi v0.4h, v1.4h, v0.4h\nret",
  "giasm": "cmhi v0.4h, v1.4h, v0.4h\nret",
  "ll": "define <4 x i1> @test(<4 x i16> %a, <4 x i16> %b) {\n  %r = icmp ult <4 x i16> %a, %b\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ult <4 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "icmpult",
  "ty": "<4 x i16>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 5,
  "extrasize": 0,
  "asm": "movi v0.2d, #0000000000000000\nret",
  "giasm": "mov w8, #0                          // =0x0\nfmov s0, w8\nmov v0.h[1], w8\nmov v0.h[2], w8\nmov v0.h[3], w8\nret",
  "ll": "define <4 x i1> @test(<4 x i16> %a) {\n  %r = icmp ult <4 x i16> %a, zeroinitializer\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ult <4 x i16> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "selecticmpult",
  "ty": "<4 x i16>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmhi v0.4h, v1.4h, v0.4h\nbsl v0.8b, v2.8b, v3.8b\nret",
  "giasm": "cmhi v0.4h, v1.4h, v0.4h\nbsl v0.8b, v2.8b, v3.8b\nret",
  "ll": "define <4 x i16> @test(<4 x i16> %a, <4 x i16> %b, <4 x i16> %d, <4 x i16> %e) {\n  %c = icmp ult <4 x i16> %a, %b\n  %r = select <4 x i1> %c, <4 x i16> %d, <4 x i16> %e\n  ret <4 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ult <4 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x i16> %d, <4 x i16> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i16> %r"
 },
 {
  "instr": "selecticmpult",
  "ty": "<4 x i16>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 0,
  "gisize": 0,
  "extrasize": 0,
  "asm": "fmov d0, d2\nret",
  "giasm": "fmov d0, d2\nret",
  "ll": "define <4 x i16> @test(<4 x i16> %a, <4 x i16> %d, <4 x i16> %e) {\n  %c = icmp ult <4 x i16> %a, zeroinitializer\n  %r = select <4 x i1> %c, <4 x i16> %d, <4 x i16> %e\n  ret <4 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ult <4 x i16> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x i16> %d, <4 x i16> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i16> %r"
 },
 {
  "instr": "icmpult",
  "ty": "<8 x i16>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmhi v0.8h, v1.8h, v0.8h\nxtn v0.8b, v0.8h\nret",
  "giasm": "cmhi v0.8h, v1.8h, v0.8h\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x i16> %a, <8 x i16> %b) {\n  %r = icmp ult <8 x i16> %a, %b\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ult <8 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "icmpult",
  "ty": "<8 x i16>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "movi v0.2d, #0000000000000000\nret",
  "giasm": "movi v0.2d, #0000000000000000\nret",
  "ll": "define <8 x i1> @test(<8 x i16> %a) {\n  %r = icmp ult <8 x i16> %a, zeroinitializer\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ult <8 x i16> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "selecticmpult",
  "ty": "<8 x i16>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmhi v0.8h, v1.8h, v0.8h\nbsl v0.16b, v2.16b, v3.16b\nret",
  "giasm": "cmhi v0.8h, v1.8h, v0.8h\nbsl v0.16b, v2.16b, v3.16b\nret",
  "ll": "define <8 x i16> @test(<8 x i16> %a, <8 x i16> %b, <8 x i16> %d, <8 x i16> %e) {\n  %c = icmp ult <8 x i16> %a, %b\n  %r = select <8 x i1> %c, <8 x i16> %d, <8 x i16> %e\n  ret <8 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ult <8 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x i16> %d, <8 x i16> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i16> %r"
 },
 {
  "instr": "selecticmpult",
  "ty": "<8 x i16>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 0,
  "gisize": 0,
  "extrasize": 0,
  "asm": "mov v0.16b, v2.16b\nret",
  "giasm": "mov v0.16b, v2.16b\nret",
  "ll": "define <8 x i16> @test(<8 x i16> %a, <8 x i16> %d, <8 x i16> %e) {\n  %c = icmp ult <8 x i16> %a, zeroinitializer\n  %r = select <8 x i1> %c, <8 x i16> %d, <8 x i16> %e\n  ret <8 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ult <8 x i16> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x i16> %d, <8 x i16> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i16> %r"
 },
 {
  "instr": "icmpult",
  "ty": "<16 x i16>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "cmhi v1.8h, v3.8h, v1.8h\ncmhi v0.8h, v2.8h, v0.8h\nuzp1 v0.16b, v0.16b, v1.16b\nret",
  "giasm": "cmhi v0.8h, v2.8h, v0.8h\ncmhi v1.8h, v3.8h, v1.8h\nuzp1 v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <16 x i1> @test(<16 x i16> %a, <16 x i16> %b) {\n  %r = icmp ult <16 x i16> %a, %b\n  ret <16 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ult <16 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i1> %r"
 },
 {
  "instr": "icmpult",
  "ty": "<16 x i16>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "movi v0.2d, #0000000000000000\nret",
  "giasm": "movi v0.2d, #0000000000000000\nret",
  "ll": "define <16 x i1> @test(<16 x i16> %a) {\n  %r = icmp ult <16 x i16> %a, zeroinitializer\n  ret <16 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ult <16 x i16> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i1> %r"
 },
 {
  "instr": "selecticmpult",
  "ty": "<16 x i16>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 4,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmhi v1.8h, v3.8h, v1.8h\ncmhi v0.8h, v2.8h, v0.8h\nbsl v1.16b, v5.16b, v7.16b\nbsl v0.16b, v4.16b, v6.16b\nret",
  "giasm": "cmhi v0.8h, v2.8h, v0.8h\ncmhi v1.8h, v3.8h, v1.8h\nbsl v0.16b, v4.16b, v6.16b\nbsl v1.16b, v5.16b, v7.16b\nret",
  "ll": "define <16 x i16> @test(<16 x i16> %a, <16 x i16> %b, <16 x i16> %d, <16 x i16> %e) {\n  %c = icmp ult <16 x i16> %a, %b\n  %r = select <16 x i1> %c, <16 x i16> %d, <16 x i16> %e\n  ret <16 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ult <16 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <16 x i1> %c, <16 x i16> %d, <16 x i16> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i16> %r"
 },
 {
  "instr": "selecticmpult",
  "ty": "<16 x i16>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 4,
  "lat": 2,
  "sizelat": 2,
  "size": 0,
  "gisize": 0,
  "extrasize": 0,
  "asm": "mov v1.16b, v5.16b\nmov v0.16b, v4.16b\nret",
  "giasm": "mov v0.16b, v4.16b\nmov v1.16b, v5.16b\nret",
  "ll": "define <16 x i16> @test(<16 x i16> %a, <16 x i16> %d, <16 x i16> %e) {\n  %c = icmp ult <16 x i16> %a, zeroinitializer\n  %r = select <16 x i1> %c, <16 x i16> %d, <16 x i16> %e\n  ret <16 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ult <16 x i16> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <16 x i1> %c, <16 x i16> %d, <16 x i16> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i16> %r"
 },
 {
  "instr": "icmpult",
  "ty": "<2 x i32>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "cmhi v0.2s, v1.2s, v0.2s\nret",
  "giasm": "cmhi v0.2s, v1.2s, v0.2s\nret",
  "ll": "define <2 x i1> @test(<2 x i32> %a, <2 x i32> %b) {\n  %r = icmp ult <2 x i32> %a, %b\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ult <2 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "icmpult",
  "ty": "<2 x i32>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "movi v0.2d, #0000000000000000\nret",
  "giasm": "movi v0.2d, #0000000000000000\nret",
  "ll": "define <2 x i1> @test(<2 x i32> %a) {\n  %r = icmp ult <2 x i32> %a, zeroinitializer\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ult <2 x i32> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "selecticmpult",
  "ty": "<2 x i32>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmhi v0.2s, v1.2s, v0.2s\nbsl v0.8b, v2.8b, v3.8b\nret",
  "giasm": "cmhi v0.2s, v1.2s, v0.2s\nbsl v0.8b, v2.8b, v3.8b\nret",
  "ll": "define <2 x i32> @test(<2 x i32> %a, <2 x i32> %b, <2 x i32> %d, <2 x i32> %e) {\n  %c = icmp ult <2 x i32> %a, %b\n  %r = select <2 x i1> %c, <2 x i32> %d, <2 x i32> %e\n  ret <2 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ult <2 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <2 x i1> %c, <2 x i32> %d, <2 x i32> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i32> %r"
 },
 {
  "instr": "selecticmpult",
  "ty": "<2 x i32>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 0,
  "gisize": 0,
  "extrasize": 0,
  "asm": "fmov d0, d2\nret",
  "giasm": "fmov d0, d2\nret",
  "ll": "define <2 x i32> @test(<2 x i32> %a, <2 x i32> %d, <2 x i32> %e) {\n  %c = icmp ult <2 x i32> %a, zeroinitializer\n  %r = select <2 x i1> %c, <2 x i32> %d, <2 x i32> %e\n  ret <2 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ult <2 x i32> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <2 x i1> %c, <2 x i32> %d, <2 x i32> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i32> %r"
 },
 {
  "instr": "icmpult",
  "ty": "<4 x i32>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmhi v0.4s, v1.4s, v0.4s\nxtn v0.4h, v0.4s\nret",
  "giasm": "cmhi v0.4s, v1.4s, v0.4s\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x i32> %a, <4 x i32> %b) {\n  %r = icmp ult <4 x i32> %a, %b\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ult <4 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "icmpult",
  "ty": "<4 x i32>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 5,
  "extrasize": 0,
  "asm": "movi v0.2d, #0000000000000000\nret",
  "giasm": "mov w8, #0                          // =0x0\nfmov s0, w8\nmov v0.h[1], w8\nmov v0.h[2], w8\nmov v0.h[3], w8\nret",
  "ll": "define <4 x i1> @test(<4 x i32> %a) {\n  %r = icmp ult <4 x i32> %a, zeroinitializer\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ult <4 x i32> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "selecticmpult",
  "ty": "<4 x i32>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmhi v0.4s, v1.4s, v0.4s\nbsl v0.16b, v2.16b, v3.16b\nret",
  "giasm": "cmhi v0.4s, v1.4s, v0.4s\nbsl v0.16b, v2.16b, v3.16b\nret",
  "ll": "define <4 x i32> @test(<4 x i32> %a, <4 x i32> %b, <4 x i32> %d, <4 x i32> %e) {\n  %c = icmp ult <4 x i32> %a, %b\n  %r = select <4 x i1> %c, <4 x i32> %d, <4 x i32> %e\n  ret <4 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ult <4 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x i32> %d, <4 x i32> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i32> %r"
 },
 {
  "instr": "selecticmpult",
  "ty": "<4 x i32>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 0,
  "gisize": 0,
  "extrasize": 0,
  "asm": "mov v0.16b, v2.16b\nret",
  "giasm": "mov v0.16b, v2.16b\nret",
  "ll": "define <4 x i32> @test(<4 x i32> %a, <4 x i32> %d, <4 x i32> %e) {\n  %c = icmp ult <4 x i32> %a, zeroinitializer\n  %r = select <4 x i1> %c, <4 x i32> %d, <4 x i32> %e\n  ret <4 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ult <4 x i32> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x i32> %d, <4 x i32> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i32> %r"
 },
 {
  "instr": "icmpult",
  "ty": "<8 x i32>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmhi v1.4s, v3.4s, v1.4s\ncmhi v0.4s, v2.4s, v0.4s\nuzp1 v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "giasm": "cmhi v0.4s, v2.4s, v0.4s\ncmhi v1.4s, v3.4s, v1.4s\nuzp1 v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x i32> %a, <8 x i32> %b) {\n  %r = icmp ult <8 x i32> %a, %b\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ult <8 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "icmpult",
  "ty": "<8 x i32>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "movi v0.2d, #0000000000000000\nret",
  "giasm": "movi v0.2d, #0000000000000000\nret",
  "ll": "define <8 x i1> @test(<8 x i32> %a) {\n  %r = icmp ult <8 x i32> %a, zeroinitializer\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ult <8 x i32> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "selecticmpult",
  "ty": "<8 x i32>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 4,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmhi v1.4s, v3.4s, v1.4s\ncmhi v0.4s, v2.4s, v0.4s\nbsl v1.16b, v5.16b, v7.16b\nbsl v0.16b, v4.16b, v6.16b\nret",
  "giasm": "cmhi v0.4s, v2.4s, v0.4s\ncmhi v1.4s, v3.4s, v1.4s\nbsl v0.16b, v4.16b, v6.16b\nbsl v1.16b, v5.16b, v7.16b\nret",
  "ll": "define <8 x i32> @test(<8 x i32> %a, <8 x i32> %b, <8 x i32> %d, <8 x i32> %e) {\n  %c = icmp ult <8 x i32> %a, %b\n  %r = select <8 x i1> %c, <8 x i32> %d, <8 x i32> %e\n  ret <8 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ult <8 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x i32> %d, <8 x i32> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i32> %r"
 },
 {
  "instr": "selecticmpult",
  "ty": "<8 x i32>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 4,
  "lat": 2,
  "sizelat": 2,
  "size": 0,
  "gisize": 0,
  "extrasize": 0,
  "asm": "mov v1.16b, v5.16b\nmov v0.16b, v4.16b\nret",
  "giasm": "mov v0.16b, v4.16b\nmov v1.16b, v5.16b\nret",
  "ll": "define <8 x i32> @test(<8 x i32> %a, <8 x i32> %d, <8 x i32> %e) {\n  %c = icmp ult <8 x i32> %a, zeroinitializer\n  %r = select <8 x i1> %c, <8 x i32> %d, <8 x i32> %e\n  ret <8 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ult <8 x i32> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x i32> %d, <8 x i32> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i32> %r"
 },
 {
  "instr": "icmpult",
  "ty": "<2 x i64>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmhi v0.2d, v1.2d, v0.2d\nxtn v0.2s, v0.2d\nret",
  "giasm": "cmhi v0.2d, v1.2d, v0.2d\nxtn v0.2s, v0.2d\nret",
  "ll": "define <2 x i1> @test(<2 x i64> %a, <2 x i64> %b) {\n  %r = icmp ult <2 x i64> %a, %b\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ult <2 x i64> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "icmpult",
  "ty": "<2 x i64>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "movi v0.2d, #0000000000000000\nret",
  "giasm": "movi v0.2d, #0000000000000000\nret",
  "ll": "define <2 x i1> @test(<2 x i64> %a) {\n  %r = icmp ult <2 x i64> %a, zeroinitializer\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ult <2 x i64> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "selecticmpult",
  "ty": "<2 x i64>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmhi v0.2d, v1.2d, v0.2d\nbsl v0.16b, v2.16b, v3.16b\nret",
  "giasm": "cmhi v0.2d, v1.2d, v0.2d\nbsl v0.16b, v2.16b, v3.16b\nret",
  "ll": "define <2 x i64> @test(<2 x i64> %a, <2 x i64> %b, <2 x i64> %d, <2 x i64> %e) {\n  %c = icmp ult <2 x i64> %a, %b\n  %r = select <2 x i1> %c, <2 x i64> %d, <2 x i64> %e\n  ret <2 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ult <2 x i64> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <2 x i1> %c, <2 x i64> %d, <2 x i64> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i64> %r"
 },
 {
  "instr": "selecticmpult",
  "ty": "<2 x i64>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 0,
  "gisize": 0,
  "extrasize": 0,
  "asm": "mov v0.16b, v2.16b\nret",
  "giasm": "mov v0.16b, v2.16b\nret",
  "ll": "define <2 x i64> @test(<2 x i64> %a, <2 x i64> %d, <2 x i64> %e) {\n  %c = icmp ult <2 x i64> %a, zeroinitializer\n  %r = select <2 x i1> %c, <2 x i64> %d, <2 x i64> %e\n  ret <2 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ult <2 x i64> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <2 x i1> %c, <2 x i64> %d, <2 x i64> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i64> %r"
 },
 {
  "instr": "icmpult",
  "ty": "<4 x i64>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmhi v1.2d, v3.2d, v1.2d\ncmhi v0.2d, v2.2d, v0.2d\nuzp1 v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "giasm": "cmhi v0.2d, v2.2d, v0.2d\ncmhi v1.2d, v3.2d, v1.2d\nuzp1 v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x i64> %a, <4 x i64> %b) {\n  %r = icmp ult <4 x i64> %a, %b\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ult <4 x i64> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "icmpult",
  "ty": "<4 x i64>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 5,
  "extrasize": 0,
  "asm": "movi v0.2d, #0000000000000000\nret",
  "giasm": "mov w8, #0                          // =0x0\nfmov s0, w8\nmov v0.h[1], w8\nmov v0.h[2], w8\nmov v0.h[3], w8\nret",
  "ll": "define <4 x i1> @test(<4 x i64> %a) {\n  %r = icmp ult <4 x i64> %a, zeroinitializer\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ult <4 x i64> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "selecticmpult",
  "ty": "<4 x i64>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 4,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmhi v1.2d, v3.2d, v1.2d\ncmhi v0.2d, v2.2d, v0.2d\nbsl v1.16b, v5.16b, v7.16b\nbsl v0.16b, v4.16b, v6.16b\nret",
  "giasm": "cmhi v0.2d, v2.2d, v0.2d\ncmhi v1.2d, v3.2d, v1.2d\nbsl v0.16b, v4.16b, v6.16b\nbsl v1.16b, v5.16b, v7.16b\nret",
  "ll": "define <4 x i64> @test(<4 x i64> %a, <4 x i64> %b, <4 x i64> %d, <4 x i64> %e) {\n  %c = icmp ult <4 x i64> %a, %b\n  %r = select <4 x i1> %c, <4 x i64> %d, <4 x i64> %e\n  ret <4 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ult <4 x i64> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x i64> %d, <4 x i64> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i64> %r"
 },
 {
  "instr": "selecticmpult",
  "ty": "<4 x i64>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 4,
  "lat": 2,
  "sizelat": 2,
  "size": 0,
  "gisize": 0,
  "extrasize": 0,
  "asm": "mov v1.16b, v5.16b\nmov v0.16b, v4.16b\nret",
  "giasm": "mov v0.16b, v4.16b\nmov v1.16b, v5.16b\nret",
  "ll": "define <4 x i64> @test(<4 x i64> %a, <4 x i64> %d, <4 x i64> %e) {\n  %c = icmp ult <4 x i64> %a, zeroinitializer\n  %r = select <4 x i1> %c, <4 x i64> %d, <4 x i64> %e\n  ret <4 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ult <4 x i64> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x i64> %d, <4 x i64> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i64> %r"
 },
 {
  "instr": "icmpule",
  "ty": "i8",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "and w8, w0, #0xff\ncmp w8, w1, uxtb\ncset w0, ls\nret",
  "giasm": "and w8, w0, #0xff\ncmp w8, w1, uxtb\ncset w0, ls\nret",
  "ll": "define i1 @test(i8 %a, i8 %b) {\n  %r = icmp ule i8 %a, %b\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ule i8 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "icmpule",
  "ty": "i8",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "tst w0, #0xff\ncset w0, eq\nret",
  "giasm": "and w8, w0, #0xff\ncmp w8, #0\ncset w0, ls\nret",
  "ll": "define i1 @test(i8 %a) {\n  %r = icmp ule i8 %a, 0\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ule i8 %a, 0\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "selecticmpule",
  "ty": "i8",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "and w8, w0, #0xff\ncmp w8, w1, uxtb\ncsel w0, w2, w3, ls\nret",
  "giasm": "and w8, w0, #0xff\ncmp w8, w1, uxtb\ncsel w0, w2, w3, ls\nret",
  "ll": "define i8 @test(i8 %a, i8 %b, i8 %d, i8 %e) {\n  %c = icmp ule i8 %a, %b\n  %r = select i1 %c, i8 %d, i8 %e\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ule i8 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i8 %d, i8 %e\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "selecticmpule",
  "ty": "i8",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "tst w0, #0xff\ncsel w0, w1, w2, eq\nret",
  "giasm": "and w8, w0, #0xff\ncmp w8, #0\ncsel w0, w1, w2, ls\nret",
  "ll": "define i8 @test(i8 %a, i8 %d, i8 %e) {\n  %c = icmp ule i8 %a, 0\n  %r = select i1 %c, i8 %d, i8 %e\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ule i8 %a, 0\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i8 %d, i8 %e\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "icmpule",
  "ty": "i16",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "and w8, w0, #0xffff\ncmp w8, w1, uxth\ncset w0, ls\nret",
  "giasm": "and w8, w0, #0xffff\ncmp w8, w1, uxth\ncset w0, ls\nret",
  "ll": "define i1 @test(i16 %a, i16 %b) {\n  %r = icmp ule i16 %a, %b\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ule i16 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "icmpule",
  "ty": "i16",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "tst w0, #0xffff\ncset w0, eq\nret",
  "giasm": "and w8, w0, #0xffff\ncmp w8, #0\ncset w0, ls\nret",
  "ll": "define i1 @test(i16 %a) {\n  %r = icmp ule i16 %a, 0\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ule i16 %a, 0\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "selecticmpule",
  "ty": "i16",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "and w8, w0, #0xffff\ncmp w8, w1, uxth\ncsel w0, w2, w3, ls\nret",
  "giasm": "and w8, w0, #0xffff\ncmp w8, w1, uxth\ncsel w0, w2, w3, ls\nret",
  "ll": "define i16 @test(i16 %a, i16 %b, i16 %d, i16 %e) {\n  %c = icmp ule i16 %a, %b\n  %r = select i1 %c, i16 %d, i16 %e\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ule i16 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i16 %d, i16 %e\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "selecticmpule",
  "ty": "i16",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "tst w0, #0xffff\ncsel w0, w1, w2, eq\nret",
  "giasm": "and w8, w0, #0xffff\ncmp w8, #0\ncsel w0, w1, w2, ls\nret",
  "ll": "define i16 @test(i16 %a, i16 %d, i16 %e) {\n  %c = icmp ule i16 %a, 0\n  %r = select i1 %c, i16 %d, i16 %e\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ule i16 %a, 0\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i16 %d, i16 %e\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "icmpule",
  "ty": "i32",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmp w0, w1\ncset w0, ls\nret",
  "giasm": "cmp w0, w1\ncset w0, ls\nret",
  "ll": "define i1 @test(i32 %a, i32 %b) {\n  %r = icmp ule i32 %a, %b\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ule i32 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "icmpule",
  "ty": "i32",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmp w0, #0\ncset w0, eq\nret",
  "giasm": "cmp w0, #0\ncset w0, ls\nret",
  "ll": "define i1 @test(i32 %a) {\n  %r = icmp ule i32 %a, 0\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ule i32 %a, 0\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "selecticmpule",
  "ty": "i32",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmp w0, w1\ncsel w0, w2, w3, ls\nret",
  "giasm": "cmp w0, w1\ncsel w0, w2, w3, ls\nret",
  "ll": "define i32 @test(i32 %a, i32 %b, i32 %d, i32 %e) {\n  %c = icmp ule i32 %a, %b\n  %r = select i1 %c, i32 %d, i32 %e\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ule i32 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i32 %d, i32 %e\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "selecticmpule",
  "ty": "i32",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmp w0, #0\ncsel w0, w1, w2, eq\nret",
  "giasm": "cmp w0, #0\ncsel w0, w1, w2, ls\nret",
  "ll": "define i32 @test(i32 %a, i32 %d, i32 %e) {\n  %c = icmp ule i32 %a, 0\n  %r = select i1 %c, i32 %d, i32 %e\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ule i32 %a, 0\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i32 %d, i32 %e\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "icmpule",
  "ty": "i64",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmp x0, x1\ncset w0, ls\nret",
  "giasm": "cmp x0, x1\ncset w0, ls\nret",
  "ll": "define i1 @test(i64 %a, i64 %b) {\n  %r = icmp ule i64 %a, %b\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ule i64 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "icmpule",
  "ty": "i64",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmp x0, #0\ncset w0, eq\nret",
  "giasm": "cmp x0, #0\ncset w0, ls\nret",
  "ll": "define i1 @test(i64 %a) {\n  %r = icmp ule i64 %a, 0\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ule i64 %a, 0\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "selecticmpule",
  "ty": "i64",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmp x0, x1\ncsel x0, x2, x3, ls\nret",
  "giasm": "cmp x0, x1\ncsel x0, x2, x3, ls\nret",
  "ll": "define i64 @test(i64 %a, i64 %b, i64 %d, i64 %e) {\n  %c = icmp ule i64 %a, %b\n  %r = select i1 %c, i64 %d, i64 %e\n  ret i64 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ule i64 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i64 %d, i64 %e\nCost Model: Found an estimated cost of 1 for instruction:   ret i64 %r"
 },
 {
  "instr": "selecticmpule",
  "ty": "i64",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmp x0, #0\ncsel x0, x1, x2, eq\nret",
  "giasm": "cmp x0, #0\ncsel x0, x1, x2, ls\nret",
  "ll": "define i64 @test(i64 %a, i64 %d, i64 %e) {\n  %c = icmp ule i64 %a, 0\n  %r = select i1 %c, i64 %d, i64 %e\n  ret i64 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ule i64 %a, 0\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i64 %d, i64 %e\nCost Model: Found an estimated cost of 1 for instruction:   ret i64 %r"
 },
 {
  "instr": "icmpule",
  "ty": "<8 x i8>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "cmhs v0.8b, v1.8b, v0.8b\nret",
  "giasm": "cmhs v0.8b, v1.8b, v0.8b\nret",
  "ll": "define <8 x i1> @test(<8 x i8> %a, <8 x i8> %b) {\n  %r = icmp ule <8 x i8> %a, %b\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ule <8 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "icmpule",
  "ty": "<8 x i8>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "movi v1.2d, #0000000000000000\ncmhs v0.8b, v1.8b, v0.8b\nret",
  "giasm": "movi v1.2d, #0000000000000000\ncmhs v0.8b, v1.8b, v0.8b\nret",
  "ll": "define <8 x i1> @test(<8 x i8> %a) {\n  %r = icmp ule <8 x i8> %a, zeroinitializer\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ule <8 x i8> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "selecticmpule",
  "ty": "<8 x i8>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmhs v0.8b, v1.8b, v0.8b\nbsl v0.8b, v2.8b, v3.8b\nret",
  "giasm": "cmhs v0.8b, v1.8b, v0.8b\nbsl v0.8b, v2.8b, v3.8b\nret",
  "ll": "define <8 x i8> @test(<8 x i8> %a, <8 x i8> %b, <8 x i8> %d, <8 x i8> %e) {\n  %c = icmp ule <8 x i8> %a, %b\n  %r = select <8 x i1> %c, <8 x i8> %d, <8 x i8> %e\n  ret <8 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ule <8 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x i8> %d, <8 x i8> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i8> %r"
 },
 {
  "instr": "selecticmpule",
  "ty": "<8 x i8>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "movi v3.2d, #0000000000000000\ncmhs v0.8b, v3.8b, v0.8b\nbsl v0.8b, v1.8b, v2.8b\nret",
  "giasm": "movi v3.2d, #0000000000000000\ncmhs v0.8b, v3.8b, v0.8b\nbsl v0.8b, v1.8b, v2.8b\nret",
  "ll": "define <8 x i8> @test(<8 x i8> %a, <8 x i8> %d, <8 x i8> %e) {\n  %c = icmp ule <8 x i8> %a, zeroinitializer\n  %r = select <8 x i1> %c, <8 x i8> %d, <8 x i8> %e\n  ret <8 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ule <8 x i8> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x i8> %d, <8 x i8> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i8> %r"
 },
 {
  "instr": "icmpule",
  "ty": "<16 x i8>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "cmhs v0.16b, v1.16b, v0.16b\nret",
  "giasm": "cmhs v0.16b, v1.16b, v0.16b\nret",
  "ll": "define <16 x i1> @test(<16 x i8> %a, <16 x i8> %b) {\n  %r = icmp ule <16 x i8> %a, %b\n  ret <16 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ule <16 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i1> %r"
 },
 {
  "instr": "icmpule",
  "ty": "<16 x i8>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "movi v1.2d, #0000000000000000\ncmhs v0.16b, v1.16b, v0.16b\nret",
  "giasm": "movi v1.2d, #0000000000000000\ncmhs v0.16b, v1.16b, v0.16b\nret",
  "ll": "define <16 x i1> @test(<16 x i8> %a) {\n  %r = icmp ule <16 x i8> %a, zeroinitializer\n  ret <16 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ule <16 x i8> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i1> %r"
 },
 {
  "instr": "selecticmpule",
  "ty": "<16 x i8>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmhs v0.16b, v1.16b, v0.16b\nbsl v0.16b, v2.16b, v3.16b\nret",
  "giasm": "cmhs v0.16b, v1.16b, v0.16b\nbsl v0.16b, v2.16b, v3.16b\nret",
  "ll": "define <16 x i8> @test(<16 x i8> %a, <16 x i8> %b, <16 x i8> %d, <16 x i8> %e) {\n  %c = icmp ule <16 x i8> %a, %b\n  %r = select <16 x i1> %c, <16 x i8> %d, <16 x i8> %e\n  ret <16 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ule <16 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <16 x i1> %c, <16 x i8> %d, <16 x i8> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i8> %r"
 },
 {
  "instr": "selecticmpule",
  "ty": "<16 x i8>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "movi v3.2d, #0000000000000000\ncmhs v0.16b, v3.16b, v0.16b\nbsl v0.16b, v1.16b, v2.16b\nret",
  "giasm": "movi v3.2d, #0000000000000000\ncmhs v0.16b, v3.16b, v0.16b\nbsl v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <16 x i8> @test(<16 x i8> %a, <16 x i8> %d, <16 x i8> %e) {\n  %c = icmp ule <16 x i8> %a, zeroinitializer\n  %r = select <16 x i1> %c, <16 x i8> %d, <16 x i8> %e\n  ret <16 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ule <16 x i8> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <16 x i1> %c, <16 x i8> %d, <16 x i8> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i8> %r"
 },
 {
  "instr": "icmpule",
  "ty": "<32 x i8>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 14,
  "gisize": -1,
  "extrasize": 0,
  "asm": "cmhs v1.16b, v3.16b, v1.16b\nadrp x9, .LCPI0_0\ncmhs v0.16b, v2.16b, v0.16b\nldr q2, [x9, :lo12:.LCPI0_0]\nand v1.16b, v1.16b, v2.16b\nand v0.16b, v0.16b, v2.16b\next v2.16b, v1.16b, v1.16b, #8\next v3.16b, v0.16b, v0.16b, #8\nzip1 v1.16b, v1.16b, v2.16b\nzip1 v0.16b, v0.16b, v3.16b\naddv h1, v1.8h\naddv h0, v0.8h\nstr h1, [x8, #2]\nstr h0, [x8]\nret",
  "giasm": "LLVM ERROR: unable to legalize instruction: G_STORE %8:_(<32 x s8>), %2:_(p0) :: (store (<32 x s1>)) (in function: test)",
  "ll": "define <32 x i1> @test(<32 x i8> %a, <32 x i8> %b) {\n  %r = icmp ule <32 x i8> %a, %b\n  ret <32 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ule <32 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i1> %r"
 },
 {
  "instr": "icmpule",
  "ty": "<32 x i8>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 15,
  "gisize": -1,
  "extrasize": 0,
  "asm": "movi v2.2d, #0000000000000000\nadrp x9, .LCPI0_0\nldr q3, [x9, :lo12:.LCPI0_0]\ncmhs v1.16b, v2.16b, v1.16b\ncmhs v0.16b, v2.16b, v0.16b\nand v1.16b, v1.16b, v3.16b\nand v0.16b, v0.16b, v3.16b\next v2.16b, v1.16b, v1.16b, #8\next v3.16b, v0.16b, v0.16b, #8\nzip1 v1.16b, v1.16b, v2.16b\nzip1 v0.16b, v0.16b, v3.16b\naddv h1, v1.8h\naddv h0, v0.8h\nstr h1, [x8, #2]\nstr h0, [x8]\nret",
  "giasm": "LLVM ERROR: unable to legalize instruction: G_STORE %7:_(<32 x s8>), %1:_(p0) :: (store (<32 x s1>)) (in function: test)",
  "ll": "define <32 x i1> @test(<32 x i8> %a) {\n  %r = icmp ule <32 x i8> %a, zeroinitializer\n  ret <32 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ule <32 x i8> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i1> %r"
 },
 {
  "instr": "selecticmpule",
  "ty": "<32 x i8>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 4,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmhs v1.16b, v3.16b, v1.16b\ncmhs v0.16b, v2.16b, v0.16b\nbsl v1.16b, v5.16b, v7.16b\nbsl v0.16b, v4.16b, v6.16b\nret",
  "giasm": "cmhs v0.16b, v2.16b, v0.16b\ncmhs v1.16b, v3.16b, v1.16b\nbsl v0.16b, v4.16b, v6.16b\nbsl v1.16b, v5.16b, v7.16b\nret",
  "ll": "define <32 x i8> @test(<32 x i8> %a, <32 x i8> %b, <32 x i8> %d, <32 x i8> %e) {\n  %c = icmp ule <32 x i8> %a, %b\n  %r = select <32 x i1> %c, <32 x i8> %d, <32 x i8> %e\n  ret <32 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ule <32 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <32 x i1> %c, <32 x i8> %d, <32 x i8> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i8> %r"
 },
 {
  "instr": "selecticmpule",
  "ty": "<32 x i8>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 4,
  "lat": 2,
  "sizelat": 2,
  "size": 5,
  "gisize": 5,
  "extrasize": 0,
  "asm": "movi v6.2d, #0000000000000000\ncmhs v1.16b, v6.16b, v1.16b\ncmhs v0.16b, v6.16b, v0.16b\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "giasm": "movi v6.2d, #0000000000000000\ncmhs v0.16b, v6.16b, v0.16b\ncmhs v1.16b, v6.16b, v1.16b\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "ll": "define <32 x i8> @test(<32 x i8> %a, <32 x i8> %d, <32 x i8> %e) {\n  %c = icmp ule <32 x i8> %a, zeroinitializer\n  %r = select <32 x i1> %c, <32 x i8> %d, <32 x i8> %e\n  ret <32 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ule <32 x i8> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <32 x i1> %c, <32 x i8> %d, <32 x i8> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i8> %r"
 },
 {
  "instr": "icmpule",
  "ty": "<4 x i16>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "cmhs v0.4h, v1.4h, v0.4h\nret",
  "giasm": "cmhs v0.4h, v1.4h, v0.4h\nret",
  "ll": "define <4 x i1> @test(<4 x i16> %a, <4 x i16> %b) {\n  %r = icmp ule <4 x i16> %a, %b\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ule <4 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "icmpule",
  "ty": "<4 x i16>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "movi v1.2d, #0000000000000000\ncmhs v0.4h, v1.4h, v0.4h\nret",
  "giasm": "movi v1.2d, #0000000000000000\ncmhs v0.4h, v1.4h, v0.4h\nret",
  "ll": "define <4 x i1> @test(<4 x i16> %a) {\n  %r = icmp ule <4 x i16> %a, zeroinitializer\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ule <4 x i16> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "selecticmpule",
  "ty": "<4 x i16>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmhs v0.4h, v1.4h, v0.4h\nbsl v0.8b, v2.8b, v3.8b\nret",
  "giasm": "cmhs v0.4h, v1.4h, v0.4h\nbsl v0.8b, v2.8b, v3.8b\nret",
  "ll": "define <4 x i16> @test(<4 x i16> %a, <4 x i16> %b, <4 x i16> %d, <4 x i16> %e) {\n  %c = icmp ule <4 x i16> %a, %b\n  %r = select <4 x i1> %c, <4 x i16> %d, <4 x i16> %e\n  ret <4 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ule <4 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x i16> %d, <4 x i16> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i16> %r"
 },
 {
  "instr": "selecticmpule",
  "ty": "<4 x i16>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "movi v3.2d, #0000000000000000\ncmhs v0.4h, v3.4h, v0.4h\nbsl v0.8b, v1.8b, v2.8b\nret",
  "giasm": "movi v3.2d, #0000000000000000\ncmhs v0.4h, v3.4h, v0.4h\nbsl v0.8b, v1.8b, v2.8b\nret",
  "ll": "define <4 x i16> @test(<4 x i16> %a, <4 x i16> %d, <4 x i16> %e) {\n  %c = icmp ule <4 x i16> %a, zeroinitializer\n  %r = select <4 x i1> %c, <4 x i16> %d, <4 x i16> %e\n  ret <4 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ule <4 x i16> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x i16> %d, <4 x i16> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i16> %r"
 },
 {
  "instr": "icmpule",
  "ty": "<8 x i16>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmhs v0.8h, v1.8h, v0.8h\nxtn v0.8b, v0.8h\nret",
  "giasm": "cmhs v0.8h, v1.8h, v0.8h\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x i16> %a, <8 x i16> %b) {\n  %r = icmp ule <8 x i16> %a, %b\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ule <8 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "icmpule",
  "ty": "<8 x i16>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "movi v1.2d, #0000000000000000\ncmhs v0.8h, v1.8h, v0.8h\nxtn v0.8b, v0.8h\nret",
  "giasm": "movi v1.2d, #0000000000000000\ncmhs v0.8h, v1.8h, v0.8h\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x i16> %a) {\n  %r = icmp ule <8 x i16> %a, zeroinitializer\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ule <8 x i16> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "selecticmpule",
  "ty": "<8 x i16>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmhs v0.8h, v1.8h, v0.8h\nbsl v0.16b, v2.16b, v3.16b\nret",
  "giasm": "cmhs v0.8h, v1.8h, v0.8h\nbsl v0.16b, v2.16b, v3.16b\nret",
  "ll": "define <8 x i16> @test(<8 x i16> %a, <8 x i16> %b, <8 x i16> %d, <8 x i16> %e) {\n  %c = icmp ule <8 x i16> %a, %b\n  %r = select <8 x i1> %c, <8 x i16> %d, <8 x i16> %e\n  ret <8 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ule <8 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x i16> %d, <8 x i16> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i16> %r"
 },
 {
  "instr": "selecticmpule",
  "ty": "<8 x i16>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "movi v3.2d, #0000000000000000\ncmhs v0.8h, v3.8h, v0.8h\nbsl v0.16b, v1.16b, v2.16b\nret",
  "giasm": "movi v3.2d, #0000000000000000\ncmhs v0.8h, v3.8h, v0.8h\nbsl v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <8 x i16> @test(<8 x i16> %a, <8 x i16> %d, <8 x i16> %e) {\n  %c = icmp ule <8 x i16> %a, zeroinitializer\n  %r = select <8 x i1> %c, <8 x i16> %d, <8 x i16> %e\n  ret <8 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ule <8 x i16> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x i16> %d, <8 x i16> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i16> %r"
 },
 {
  "instr": "icmpule",
  "ty": "<16 x i16>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "cmhs v1.8h, v3.8h, v1.8h\ncmhs v0.8h, v2.8h, v0.8h\nuzp1 v0.16b, v0.16b, v1.16b\nret",
  "giasm": "cmhs v0.8h, v2.8h, v0.8h\ncmhs v1.8h, v3.8h, v1.8h\nuzp1 v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <16 x i1> @test(<16 x i16> %a, <16 x i16> %b) {\n  %r = icmp ule <16 x i16> %a, %b\n  ret <16 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ule <16 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i1> %r"
 },
 {
  "instr": "icmpule",
  "ty": "<16 x i16>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "movi v2.2d, #0000000000000000\ncmhs v1.8h, v2.8h, v1.8h\ncmhs v0.8h, v2.8h, v0.8h\nuzp1 v0.16b, v0.16b, v1.16b\nret",
  "giasm": "movi v2.2d, #0000000000000000\ncmhs v0.8h, v2.8h, v0.8h\ncmhs v1.8h, v2.8h, v1.8h\nuzp1 v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <16 x i1> @test(<16 x i16> %a) {\n  %r = icmp ule <16 x i16> %a, zeroinitializer\n  ret <16 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ule <16 x i16> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i1> %r"
 },
 {
  "instr": "selecticmpule",
  "ty": "<16 x i16>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 4,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmhs v1.8h, v3.8h, v1.8h\ncmhs v0.8h, v2.8h, v0.8h\nbsl v1.16b, v5.16b, v7.16b\nbsl v0.16b, v4.16b, v6.16b\nret",
  "giasm": "cmhs v0.8h, v2.8h, v0.8h\ncmhs v1.8h, v3.8h, v1.8h\nbsl v0.16b, v4.16b, v6.16b\nbsl v1.16b, v5.16b, v7.16b\nret",
  "ll": "define <16 x i16> @test(<16 x i16> %a, <16 x i16> %b, <16 x i16> %d, <16 x i16> %e) {\n  %c = icmp ule <16 x i16> %a, %b\n  %r = select <16 x i1> %c, <16 x i16> %d, <16 x i16> %e\n  ret <16 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ule <16 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <16 x i1> %c, <16 x i16> %d, <16 x i16> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i16> %r"
 },
 {
  "instr": "selecticmpule",
  "ty": "<16 x i16>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 4,
  "lat": 2,
  "sizelat": 2,
  "size": 5,
  "gisize": 5,
  "extrasize": 0,
  "asm": "movi v6.2d, #0000000000000000\ncmhs v1.8h, v6.8h, v1.8h\ncmhs v0.8h, v6.8h, v0.8h\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "giasm": "movi v6.2d, #0000000000000000\ncmhs v0.8h, v6.8h, v0.8h\ncmhs v1.8h, v6.8h, v1.8h\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "ll": "define <16 x i16> @test(<16 x i16> %a, <16 x i16> %d, <16 x i16> %e) {\n  %c = icmp ule <16 x i16> %a, zeroinitializer\n  %r = select <16 x i1> %c, <16 x i16> %d, <16 x i16> %e\n  ret <16 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ule <16 x i16> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <16 x i1> %c, <16 x i16> %d, <16 x i16> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i16> %r"
 },
 {
  "instr": "icmpule",
  "ty": "<2 x i32>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "cmhs v0.2s, v1.2s, v0.2s\nret",
  "giasm": "cmhs v0.2s, v1.2s, v0.2s\nret",
  "ll": "define <2 x i1> @test(<2 x i32> %a, <2 x i32> %b) {\n  %r = icmp ule <2 x i32> %a, %b\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ule <2 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "icmpule",
  "ty": "<2 x i32>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "movi v1.2d, #0000000000000000\ncmhs v0.2s, v1.2s, v0.2s\nret",
  "giasm": "movi v1.2d, #0000000000000000\ncmhs v0.2s, v1.2s, v0.2s\nret",
  "ll": "define <2 x i1> @test(<2 x i32> %a) {\n  %r = icmp ule <2 x i32> %a, zeroinitializer\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ule <2 x i32> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "selecticmpule",
  "ty": "<2 x i32>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmhs v0.2s, v1.2s, v0.2s\nbsl v0.8b, v2.8b, v3.8b\nret",
  "giasm": "cmhs v0.2s, v1.2s, v0.2s\nbsl v0.8b, v2.8b, v3.8b\nret",
  "ll": "define <2 x i32> @test(<2 x i32> %a, <2 x i32> %b, <2 x i32> %d, <2 x i32> %e) {\n  %c = icmp ule <2 x i32> %a, %b\n  %r = select <2 x i1> %c, <2 x i32> %d, <2 x i32> %e\n  ret <2 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ule <2 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <2 x i1> %c, <2 x i32> %d, <2 x i32> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i32> %r"
 },
 {
  "instr": "selecticmpule",
  "ty": "<2 x i32>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "movi v3.2d, #0000000000000000\ncmhs v0.2s, v3.2s, v0.2s\nbsl v0.8b, v1.8b, v2.8b\nret",
  "giasm": "movi v3.2d, #0000000000000000\ncmhs v0.2s, v3.2s, v0.2s\nbsl v0.8b, v1.8b, v2.8b\nret",
  "ll": "define <2 x i32> @test(<2 x i32> %a, <2 x i32> %d, <2 x i32> %e) {\n  %c = icmp ule <2 x i32> %a, zeroinitializer\n  %r = select <2 x i1> %c, <2 x i32> %d, <2 x i32> %e\n  ret <2 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ule <2 x i32> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <2 x i1> %c, <2 x i32> %d, <2 x i32> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i32> %r"
 },
 {
  "instr": "icmpule",
  "ty": "<4 x i32>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmhs v0.4s, v1.4s, v0.4s\nxtn v0.4h, v0.4s\nret",
  "giasm": "cmhs v0.4s, v1.4s, v0.4s\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x i32> %a, <4 x i32> %b) {\n  %r = icmp ule <4 x i32> %a, %b\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ule <4 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "icmpule",
  "ty": "<4 x i32>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "movi v1.2d, #0000000000000000\ncmhs v0.4s, v1.4s, v0.4s\nxtn v0.4h, v0.4s\nret",
  "giasm": "movi v1.2d, #0000000000000000\ncmhs v0.4s, v1.4s, v0.4s\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x i32> %a) {\n  %r = icmp ule <4 x i32> %a, zeroinitializer\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ule <4 x i32> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "selecticmpule",
  "ty": "<4 x i32>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmhs v0.4s, v1.4s, v0.4s\nbsl v0.16b, v2.16b, v3.16b\nret",
  "giasm": "cmhs v0.4s, v1.4s, v0.4s\nbsl v0.16b, v2.16b, v3.16b\nret",
  "ll": "define <4 x i32> @test(<4 x i32> %a, <4 x i32> %b, <4 x i32> %d, <4 x i32> %e) {\n  %c = icmp ule <4 x i32> %a, %b\n  %r = select <4 x i1> %c, <4 x i32> %d, <4 x i32> %e\n  ret <4 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ule <4 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x i32> %d, <4 x i32> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i32> %r"
 },
 {
  "instr": "selecticmpule",
  "ty": "<4 x i32>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "movi v3.2d, #0000000000000000\ncmhs v0.4s, v3.4s, v0.4s\nbsl v0.16b, v1.16b, v2.16b\nret",
  "giasm": "movi v3.2d, #0000000000000000\ncmhs v0.4s, v3.4s, v0.4s\nbsl v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <4 x i32> @test(<4 x i32> %a, <4 x i32> %d, <4 x i32> %e) {\n  %c = icmp ule <4 x i32> %a, zeroinitializer\n  %r = select <4 x i1> %c, <4 x i32> %d, <4 x i32> %e\n  ret <4 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ule <4 x i32> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x i32> %d, <4 x i32> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i32> %r"
 },
 {
  "instr": "icmpule",
  "ty": "<8 x i32>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmhs v1.4s, v3.4s, v1.4s\ncmhs v0.4s, v2.4s, v0.4s\nuzp1 v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "giasm": "cmhs v0.4s, v2.4s, v0.4s\ncmhs v1.4s, v3.4s, v1.4s\nuzp1 v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x i32> %a, <8 x i32> %b) {\n  %r = icmp ule <8 x i32> %a, %b\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ule <8 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "icmpule",
  "ty": "<8 x i32>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 5,
  "gisize": 5,
  "extrasize": 0,
  "asm": "movi v2.2d, #0000000000000000\ncmhs v1.4s, v2.4s, v1.4s\ncmhs v0.4s, v2.4s, v0.4s\nuzp1 v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "giasm": "movi v2.2d, #0000000000000000\ncmhs v0.4s, v2.4s, v0.4s\ncmhs v1.4s, v2.4s, v1.4s\nuzp1 v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x i32> %a) {\n  %r = icmp ule <8 x i32> %a, zeroinitializer\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ule <8 x i32> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "selecticmpule",
  "ty": "<8 x i32>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 4,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmhs v1.4s, v3.4s, v1.4s\ncmhs v0.4s, v2.4s, v0.4s\nbsl v1.16b, v5.16b, v7.16b\nbsl v0.16b, v4.16b, v6.16b\nret",
  "giasm": "cmhs v0.4s, v2.4s, v0.4s\ncmhs v1.4s, v3.4s, v1.4s\nbsl v0.16b, v4.16b, v6.16b\nbsl v1.16b, v5.16b, v7.16b\nret",
  "ll": "define <8 x i32> @test(<8 x i32> %a, <8 x i32> %b, <8 x i32> %d, <8 x i32> %e) {\n  %c = icmp ule <8 x i32> %a, %b\n  %r = select <8 x i1> %c, <8 x i32> %d, <8 x i32> %e\n  ret <8 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ule <8 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x i32> %d, <8 x i32> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i32> %r"
 },
 {
  "instr": "selecticmpule",
  "ty": "<8 x i32>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 4,
  "lat": 2,
  "sizelat": 2,
  "size": 5,
  "gisize": 5,
  "extrasize": 0,
  "asm": "movi v6.2d, #0000000000000000\ncmhs v1.4s, v6.4s, v1.4s\ncmhs v0.4s, v6.4s, v0.4s\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "giasm": "movi v6.2d, #0000000000000000\ncmhs v0.4s, v6.4s, v0.4s\ncmhs v1.4s, v6.4s, v1.4s\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "ll": "define <8 x i32> @test(<8 x i32> %a, <8 x i32> %d, <8 x i32> %e) {\n  %c = icmp ule <8 x i32> %a, zeroinitializer\n  %r = select <8 x i1> %c, <8 x i32> %d, <8 x i32> %e\n  ret <8 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ule <8 x i32> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x i32> %d, <8 x i32> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i32> %r"
 },
 {
  "instr": "icmpule",
  "ty": "<2 x i64>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmhs v0.2d, v1.2d, v0.2d\nxtn v0.2s, v0.2d\nret",
  "giasm": "cmhs v0.2d, v1.2d, v0.2d\nxtn v0.2s, v0.2d\nret",
  "ll": "define <2 x i1> @test(<2 x i64> %a, <2 x i64> %b) {\n  %r = icmp ule <2 x i64> %a, %b\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ule <2 x i64> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "icmpule",
  "ty": "<2 x i64>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "movi v1.2d, #0000000000000000\ncmhs v0.2d, v1.2d, v0.2d\nxtn v0.2s, v0.2d\nret",
  "giasm": "movi v1.2d, #0000000000000000\ncmhs v0.2d, v1.2d, v0.2d\nxtn v0.2s, v0.2d\nret",
  "ll": "define <2 x i1> @test(<2 x i64> %a) {\n  %r = icmp ule <2 x i64> %a, zeroinitializer\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ule <2 x i64> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "selecticmpule",
  "ty": "<2 x i64>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmhs v0.2d, v1.2d, v0.2d\nbsl v0.16b, v2.16b, v3.16b\nret",
  "giasm": "cmhs v0.2d, v1.2d, v0.2d\nbsl v0.16b, v2.16b, v3.16b\nret",
  "ll": "define <2 x i64> @test(<2 x i64> %a, <2 x i64> %b, <2 x i64> %d, <2 x i64> %e) {\n  %c = icmp ule <2 x i64> %a, %b\n  %r = select <2 x i1> %c, <2 x i64> %d, <2 x i64> %e\n  ret <2 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ule <2 x i64> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <2 x i1> %c, <2 x i64> %d, <2 x i64> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i64> %r"
 },
 {
  "instr": "selecticmpule",
  "ty": "<2 x i64>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "movi v3.2d, #0000000000000000\ncmhs v0.2d, v3.2d, v0.2d\nbsl v0.16b, v1.16b, v2.16b\nret",
  "giasm": "movi v3.2d, #0000000000000000\ncmhs v0.2d, v3.2d, v0.2d\nbsl v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <2 x i64> @test(<2 x i64> %a, <2 x i64> %d, <2 x i64> %e) {\n  %c = icmp ule <2 x i64> %a, zeroinitializer\n  %r = select <2 x i1> %c, <2 x i64> %d, <2 x i64> %e\n  ret <2 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ule <2 x i64> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <2 x i1> %c, <2 x i64> %d, <2 x i64> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i64> %r"
 },
 {
  "instr": "icmpule",
  "ty": "<4 x i64>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmhs v1.2d, v3.2d, v1.2d\ncmhs v0.2d, v2.2d, v0.2d\nuzp1 v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "giasm": "cmhs v0.2d, v2.2d, v0.2d\ncmhs v1.2d, v3.2d, v1.2d\nuzp1 v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x i64> %a, <4 x i64> %b) {\n  %r = icmp ule <4 x i64> %a, %b\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ule <4 x i64> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "icmpule",
  "ty": "<4 x i64>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 5,
  "gisize": 5,
  "extrasize": 0,
  "asm": "movi v2.2d, #0000000000000000\ncmhs v1.2d, v2.2d, v1.2d\ncmhs v0.2d, v2.2d, v0.2d\nuzp1 v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "giasm": "movi v2.2d, #0000000000000000\ncmhs v0.2d, v2.2d, v0.2d\ncmhs v1.2d, v2.2d, v1.2d\nuzp1 v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x i64> %a) {\n  %r = icmp ule <4 x i64> %a, zeroinitializer\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ule <4 x i64> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "selecticmpule",
  "ty": "<4 x i64>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 4,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmhs v1.2d, v3.2d, v1.2d\ncmhs v0.2d, v2.2d, v0.2d\nbsl v1.16b, v5.16b, v7.16b\nbsl v0.16b, v4.16b, v6.16b\nret",
  "giasm": "cmhs v0.2d, v2.2d, v0.2d\ncmhs v1.2d, v3.2d, v1.2d\nbsl v0.16b, v4.16b, v6.16b\nbsl v1.16b, v5.16b, v7.16b\nret",
  "ll": "define <4 x i64> @test(<4 x i64> %a, <4 x i64> %b, <4 x i64> %d, <4 x i64> %e) {\n  %c = icmp ule <4 x i64> %a, %b\n  %r = select <4 x i1> %c, <4 x i64> %d, <4 x i64> %e\n  ret <4 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ule <4 x i64> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x i64> %d, <4 x i64> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i64> %r"
 },
 {
  "instr": "selecticmpule",
  "ty": "<4 x i64>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 4,
  "lat": 2,
  "sizelat": 2,
  "size": 5,
  "gisize": 5,
  "extrasize": 0,
  "asm": "movi v6.2d, #0000000000000000\ncmhs v1.2d, v6.2d, v1.2d\ncmhs v0.2d, v6.2d, v0.2d\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "giasm": "movi v6.2d, #0000000000000000\ncmhs v0.2d, v6.2d, v0.2d\ncmhs v1.2d, v6.2d, v1.2d\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "ll": "define <4 x i64> @test(<4 x i64> %a, <4 x i64> %d, <4 x i64> %e) {\n  %c = icmp ule <4 x i64> %a, zeroinitializer\n  %r = select <4 x i1> %c, <4 x i64> %d, <4 x i64> %e\n  ret <4 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ule <4 x i64> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x i64> %d, <4 x i64> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i64> %r"
 },
 {
  "instr": "icmpugt",
  "ty": "i8",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "and w8, w0, #0xff\ncmp w8, w1, uxtb\ncset w0, hi\nret",
  "giasm": "and w8, w0, #0xff\ncmp w8, w1, uxtb\ncset w0, hi\nret",
  "ll": "define i1 @test(i8 %a, i8 %b) {\n  %r = icmp ugt i8 %a, %b\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ugt i8 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "icmpugt",
  "ty": "i8",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "tst w0, #0xff\ncset w0, ne\nret",
  "giasm": "and w8, w0, #0xff\ncmp w8, #0\ncset w0, hi\nret",
  "ll": "define i1 @test(i8 %a) {\n  %r = icmp ugt i8 %a, 0\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ugt i8 %a, 0\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "selecticmpugt",
  "ty": "i8",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "and w8, w0, #0xff\ncmp w8, w1, uxtb\ncsel w0, w2, w3, hi\nret",
  "giasm": "and w8, w0, #0xff\ncmp w8, w1, uxtb\ncsel w0, w2, w3, hi\nret",
  "ll": "define i8 @test(i8 %a, i8 %b, i8 %d, i8 %e) {\n  %c = icmp ugt i8 %a, %b\n  %r = select i1 %c, i8 %d, i8 %e\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ugt i8 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i8 %d, i8 %e\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "selecticmpugt",
  "ty": "i8",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "tst w0, #0xff\ncsel w0, w1, w2, ne\nret",
  "giasm": "and w8, w0, #0xff\ncmp w8, #0\ncsel w0, w1, w2, hi\nret",
  "ll": "define i8 @test(i8 %a, i8 %d, i8 %e) {\n  %c = icmp ugt i8 %a, 0\n  %r = select i1 %c, i8 %d, i8 %e\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ugt i8 %a, 0\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i8 %d, i8 %e\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "icmpugt",
  "ty": "i16",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "and w8, w0, #0xffff\ncmp w8, w1, uxth\ncset w0, hi\nret",
  "giasm": "and w8, w0, #0xffff\ncmp w8, w1, uxth\ncset w0, hi\nret",
  "ll": "define i1 @test(i16 %a, i16 %b) {\n  %r = icmp ugt i16 %a, %b\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ugt i16 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "icmpugt",
  "ty": "i16",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "tst w0, #0xffff\ncset w0, ne\nret",
  "giasm": "and w8, w0, #0xffff\ncmp w8, #0\ncset w0, hi\nret",
  "ll": "define i1 @test(i16 %a) {\n  %r = icmp ugt i16 %a, 0\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ugt i16 %a, 0\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "selecticmpugt",
  "ty": "i16",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "and w8, w0, #0xffff\ncmp w8, w1, uxth\ncsel w0, w2, w3, hi\nret",
  "giasm": "and w8, w0, #0xffff\ncmp w8, w1, uxth\ncsel w0, w2, w3, hi\nret",
  "ll": "define i16 @test(i16 %a, i16 %b, i16 %d, i16 %e) {\n  %c = icmp ugt i16 %a, %b\n  %r = select i1 %c, i16 %d, i16 %e\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ugt i16 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i16 %d, i16 %e\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "selecticmpugt",
  "ty": "i16",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "tst w0, #0xffff\ncsel w0, w1, w2, ne\nret",
  "giasm": "and w8, w0, #0xffff\ncmp w8, #0\ncsel w0, w1, w2, hi\nret",
  "ll": "define i16 @test(i16 %a, i16 %d, i16 %e) {\n  %c = icmp ugt i16 %a, 0\n  %r = select i1 %c, i16 %d, i16 %e\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ugt i16 %a, 0\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i16 %d, i16 %e\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "icmpugt",
  "ty": "i32",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmp w0, w1\ncset w0, hi\nret",
  "giasm": "cmp w0, w1\ncset w0, hi\nret",
  "ll": "define i1 @test(i32 %a, i32 %b) {\n  %r = icmp ugt i32 %a, %b\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ugt i32 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "icmpugt",
  "ty": "i32",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmp w0, #0\ncset w0, ne\nret",
  "giasm": "cmp w0, #0\ncset w0, hi\nret",
  "ll": "define i1 @test(i32 %a) {\n  %r = icmp ugt i32 %a, 0\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ugt i32 %a, 0\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "selecticmpugt",
  "ty": "i32",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmp w0, w1\ncsel w0, w2, w3, hi\nret",
  "giasm": "cmp w0, w1\ncsel w0, w2, w3, hi\nret",
  "ll": "define i32 @test(i32 %a, i32 %b, i32 %d, i32 %e) {\n  %c = icmp ugt i32 %a, %b\n  %r = select i1 %c, i32 %d, i32 %e\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ugt i32 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i32 %d, i32 %e\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "selecticmpugt",
  "ty": "i32",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmp w0, #0\ncsel w0, w1, w2, ne\nret",
  "giasm": "cmp w0, #0\ncsel w0, w1, w2, hi\nret",
  "ll": "define i32 @test(i32 %a, i32 %d, i32 %e) {\n  %c = icmp ugt i32 %a, 0\n  %r = select i1 %c, i32 %d, i32 %e\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ugt i32 %a, 0\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i32 %d, i32 %e\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "icmpugt",
  "ty": "i64",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmp x0, x1\ncset w0, hi\nret",
  "giasm": "cmp x0, x1\ncset w0, hi\nret",
  "ll": "define i1 @test(i64 %a, i64 %b) {\n  %r = icmp ugt i64 %a, %b\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ugt i64 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "icmpugt",
  "ty": "i64",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmp x0, #0\ncset w0, ne\nret",
  "giasm": "cmp x0, #0\ncset w0, hi\nret",
  "ll": "define i1 @test(i64 %a) {\n  %r = icmp ugt i64 %a, 0\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ugt i64 %a, 0\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "selecticmpugt",
  "ty": "i64",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmp x0, x1\ncsel x0, x2, x3, hi\nret",
  "giasm": "cmp x0, x1\ncsel x0, x2, x3, hi\nret",
  "ll": "define i64 @test(i64 %a, i64 %b, i64 %d, i64 %e) {\n  %c = icmp ugt i64 %a, %b\n  %r = select i1 %c, i64 %d, i64 %e\n  ret i64 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ugt i64 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i64 %d, i64 %e\nCost Model: Found an estimated cost of 1 for instruction:   ret i64 %r"
 },
 {
  "instr": "selecticmpugt",
  "ty": "i64",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmp x0, #0\ncsel x0, x1, x2, ne\nret",
  "giasm": "cmp x0, #0\ncsel x0, x1, x2, hi\nret",
  "ll": "define i64 @test(i64 %a, i64 %d, i64 %e) {\n  %c = icmp ugt i64 %a, 0\n  %r = select i1 %c, i64 %d, i64 %e\n  ret i64 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ugt i64 %a, 0\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i64 %d, i64 %e\nCost Model: Found an estimated cost of 1 for instruction:   ret i64 %r"
 },
 {
  "instr": "icmpugt",
  "ty": "<8 x i8>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "cmhi v0.8b, v0.8b, v1.8b\nret",
  "giasm": "cmhi v0.8b, v0.8b, v1.8b\nret",
  "ll": "define <8 x i1> @test(<8 x i8> %a, <8 x i8> %b) {\n  %r = icmp ugt <8 x i8> %a, %b\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ugt <8 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "icmpugt",
  "ty": "<8 x i8>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmtst v0.8b, v0.8b, v0.8b\nret",
  "giasm": "movi v1.2d, #0000000000000000\ncmhi v0.8b, v0.8b, v1.8b\nret",
  "ll": "define <8 x i1> @test(<8 x i8> %a) {\n  %r = icmp ugt <8 x i8> %a, zeroinitializer\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ugt <8 x i8> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "selecticmpugt",
  "ty": "<8 x i8>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmhi v0.8b, v0.8b, v1.8b\nbsl v0.8b, v2.8b, v3.8b\nret",
  "giasm": "cmhi v0.8b, v0.8b, v1.8b\nbsl v0.8b, v2.8b, v3.8b\nret",
  "ll": "define <8 x i8> @test(<8 x i8> %a, <8 x i8> %b, <8 x i8> %d, <8 x i8> %e) {\n  %c = icmp ugt <8 x i8> %a, %b\n  %r = select <8 x i1> %c, <8 x i8> %d, <8 x i8> %e\n  ret <8 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ugt <8 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x i8> %d, <8 x i8> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i8> %r"
 },
 {
  "instr": "selecticmpugt",
  "ty": "<8 x i8>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "cmeq v0.8b, v0.8b, #0\nbsl v0.8b, v2.8b, v1.8b\nret",
  "giasm": "movi v3.2d, #0000000000000000\ncmhi v0.8b, v0.8b, v3.8b\nbsl v0.8b, v1.8b, v2.8b\nret",
  "ll": "define <8 x i8> @test(<8 x i8> %a, <8 x i8> %d, <8 x i8> %e) {\n  %c = icmp ugt <8 x i8> %a, zeroinitializer\n  %r = select <8 x i1> %c, <8 x i8> %d, <8 x i8> %e\n  ret <8 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ugt <8 x i8> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x i8> %d, <8 x i8> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i8> %r"
 },
 {
  "instr": "icmpugt",
  "ty": "<16 x i8>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "cmhi v0.16b, v0.16b, v1.16b\nret",
  "giasm": "cmhi v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <16 x i1> @test(<16 x i8> %a, <16 x i8> %b) {\n  %r = icmp ugt <16 x i8> %a, %b\n  ret <16 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ugt <16 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i1> %r"
 },
 {
  "instr": "icmpugt",
  "ty": "<16 x i8>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmtst v0.16b, v0.16b, v0.16b\nret",
  "giasm": "movi v1.2d, #0000000000000000\ncmhi v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <16 x i1> @test(<16 x i8> %a) {\n  %r = icmp ugt <16 x i8> %a, zeroinitializer\n  ret <16 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ugt <16 x i8> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i1> %r"
 },
 {
  "instr": "selecticmpugt",
  "ty": "<16 x i8>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmhi v0.16b, v0.16b, v1.16b\nbsl v0.16b, v2.16b, v3.16b\nret",
  "giasm": "cmhi v0.16b, v0.16b, v1.16b\nbsl v0.16b, v2.16b, v3.16b\nret",
  "ll": "define <16 x i8> @test(<16 x i8> %a, <16 x i8> %b, <16 x i8> %d, <16 x i8> %e) {\n  %c = icmp ugt <16 x i8> %a, %b\n  %r = select <16 x i1> %c, <16 x i8> %d, <16 x i8> %e\n  ret <16 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ugt <16 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <16 x i1> %c, <16 x i8> %d, <16 x i8> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i8> %r"
 },
 {
  "instr": "selecticmpugt",
  "ty": "<16 x i8>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "cmeq v0.16b, v0.16b, #0\nbsl v0.16b, v2.16b, v1.16b\nret",
  "giasm": "movi v3.2d, #0000000000000000\ncmhi v0.16b, v0.16b, v3.16b\nbsl v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <16 x i8> @test(<16 x i8> %a, <16 x i8> %d, <16 x i8> %e) {\n  %c = icmp ugt <16 x i8> %a, zeroinitializer\n  %r = select <16 x i1> %c, <16 x i8> %d, <16 x i8> %e\n  ret <16 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ugt <16 x i8> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <16 x i1> %c, <16 x i8> %d, <16 x i8> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i8> %r"
 },
 {
  "instr": "icmpugt",
  "ty": "<32 x i8>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 14,
  "gisize": -1,
  "extrasize": 0,
  "asm": "cmhi v1.16b, v1.16b, v3.16b\nadrp x9, .LCPI0_0\ncmhi v0.16b, v0.16b, v2.16b\nldr q2, [x9, :lo12:.LCPI0_0]\nand v1.16b, v1.16b, v2.16b\nand v0.16b, v0.16b, v2.16b\next v2.16b, v1.16b, v1.16b, #8\next v3.16b, v0.16b, v0.16b, #8\nzip1 v1.16b, v1.16b, v2.16b\nzip1 v0.16b, v0.16b, v3.16b\naddv h1, v1.8h\naddv h0, v0.8h\nstr h1, [x8, #2]\nstr h0, [x8]\nret",
  "giasm": "LLVM ERROR: unable to legalize instruction: G_STORE %8:_(<32 x s8>), %2:_(p0) :: (store (<32 x s1>)) (in function: test)",
  "ll": "define <32 x i1> @test(<32 x i8> %a, <32 x i8> %b) {\n  %r = icmp ugt <32 x i8> %a, %b\n  ret <32 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ugt <32 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i1> %r"
 },
 {
  "instr": "icmpugt",
  "ty": "<32 x i8>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 14,
  "gisize": -1,
  "extrasize": 0,
  "asm": "adrp x9, .LCPI0_0\ncmeq v1.16b, v1.16b, #0\ncmeq v0.16b, v0.16b, #0\nldr q2, [x9, :lo12:.LCPI0_0]\nbic v1.16b, v2.16b, v1.16b\nbic v0.16b, v2.16b, v0.16b\next v2.16b, v1.16b, v1.16b, #8\next v3.16b, v0.16b, v0.16b, #8\nzip1 v1.16b, v1.16b, v2.16b\nzip1 v0.16b, v0.16b, v3.16b\naddv h1, v1.8h\naddv h0, v0.8h\nstr h1, [x8, #2]\nstr h0, [x8]\nret",
  "giasm": "LLVM ERROR: unable to legalize instruction: G_STORE %7:_(<32 x s8>), %1:_(p0) :: (store (<32 x s1>)) (in function: test)",
  "ll": "define <32 x i1> @test(<32 x i8> %a) {\n  %r = icmp ugt <32 x i8> %a, zeroinitializer\n  ret <32 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ugt <32 x i8> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i1> %r"
 },
 {
  "instr": "selecticmpugt",
  "ty": "<32 x i8>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 4,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmhi v1.16b, v1.16b, v3.16b\ncmhi v0.16b, v0.16b, v2.16b\nbsl v1.16b, v5.16b, v7.16b\nbsl v0.16b, v4.16b, v6.16b\nret",
  "giasm": "cmhi v0.16b, v0.16b, v2.16b\ncmhi v1.16b, v1.16b, v3.16b\nbsl v0.16b, v4.16b, v6.16b\nbsl v1.16b, v5.16b, v7.16b\nret",
  "ll": "define <32 x i8> @test(<32 x i8> %a, <32 x i8> %b, <32 x i8> %d, <32 x i8> %e) {\n  %c = icmp ugt <32 x i8> %a, %b\n  %r = select <32 x i1> %c, <32 x i8> %d, <32 x i8> %e\n  ret <32 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ugt <32 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <32 x i1> %c, <32 x i8> %d, <32 x i8> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i8> %r"
 },
 {
  "instr": "selecticmpugt",
  "ty": "<32 x i8>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 4,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 5,
  "extrasize": 0,
  "asm": "cmeq v1.16b, v1.16b, #0\ncmeq v0.16b, v0.16b, #0\nbsl v0.16b, v4.16b, v2.16b\nbsl v1.16b, v5.16b, v3.16b\nret",
  "giasm": "movi v6.2d, #0000000000000000\ncmhi v0.16b, v0.16b, v6.16b\ncmhi v1.16b, v1.16b, v6.16b\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "ll": "define <32 x i8> @test(<32 x i8> %a, <32 x i8> %d, <32 x i8> %e) {\n  %c = icmp ugt <32 x i8> %a, zeroinitializer\n  %r = select <32 x i1> %c, <32 x i8> %d, <32 x i8> %e\n  ret <32 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ugt <32 x i8> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <32 x i1> %c, <32 x i8> %d, <32 x i8> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i8> %r"
 },
 {
  "instr": "icmpugt",
  "ty": "<4 x i16>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "cmhi v0.4h, v0.4h, v1.4h\nret",
  "giasm": "cmhi v0.4h, v0.4h, v1.4h\nret",
  "ll": "define <4 x i1> @test(<4 x i16> %a, <4 x i16> %b) {\n  %r = icmp ugt <4 x i16> %a, %b\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ugt <4 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "icmpugt",
  "ty": "<4 x i16>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmtst v0.4h, v0.4h, v0.4h\nret",
  "giasm": "movi v1.2d, #0000000000000000\ncmhi v0.4h, v0.4h, v1.4h\nret",
  "ll": "define <4 x i1> @test(<4 x i16> %a) {\n  %r = icmp ugt <4 x i16> %a, zeroinitializer\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ugt <4 x i16> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "selecticmpugt",
  "ty": "<4 x i16>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmhi v0.4h, v0.4h, v1.4h\nbsl v0.8b, v2.8b, v3.8b\nret",
  "giasm": "cmhi v0.4h, v0.4h, v1.4h\nbsl v0.8b, v2.8b, v3.8b\nret",
  "ll": "define <4 x i16> @test(<4 x i16> %a, <4 x i16> %b, <4 x i16> %d, <4 x i16> %e) {\n  %c = icmp ugt <4 x i16> %a, %b\n  %r = select <4 x i1> %c, <4 x i16> %d, <4 x i16> %e\n  ret <4 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ugt <4 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x i16> %d, <4 x i16> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i16> %r"
 },
 {
  "instr": "selecticmpugt",
  "ty": "<4 x i16>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "cmeq v0.4h, v0.4h, #0\nbsl v0.8b, v2.8b, v1.8b\nret",
  "giasm": "movi v3.2d, #0000000000000000\ncmhi v0.4h, v0.4h, v3.4h\nbsl v0.8b, v1.8b, v2.8b\nret",
  "ll": "define <4 x i16> @test(<4 x i16> %a, <4 x i16> %d, <4 x i16> %e) {\n  %c = icmp ugt <4 x i16> %a, zeroinitializer\n  %r = select <4 x i1> %c, <4 x i16> %d, <4 x i16> %e\n  ret <4 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ugt <4 x i16> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x i16> %d, <4 x i16> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i16> %r"
 },
 {
  "instr": "icmpugt",
  "ty": "<8 x i16>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmhi v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "giasm": "cmhi v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x i16> %a, <8 x i16> %b) {\n  %r = icmp ugt <8 x i16> %a, %b\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ugt <8 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "icmpugt",
  "ty": "<8 x i16>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "cmtst v0.8h, v0.8h, v0.8h\nxtn v0.8b, v0.8h\nret",
  "giasm": "movi v1.2d, #0000000000000000\ncmhi v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x i16> %a) {\n  %r = icmp ugt <8 x i16> %a, zeroinitializer\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ugt <8 x i16> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "selecticmpugt",
  "ty": "<8 x i16>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmhi v0.8h, v0.8h, v1.8h\nbsl v0.16b, v2.16b, v3.16b\nret",
  "giasm": "cmhi v0.8h, v0.8h, v1.8h\nbsl v0.16b, v2.16b, v3.16b\nret",
  "ll": "define <8 x i16> @test(<8 x i16> %a, <8 x i16> %b, <8 x i16> %d, <8 x i16> %e) {\n  %c = icmp ugt <8 x i16> %a, %b\n  %r = select <8 x i1> %c, <8 x i16> %d, <8 x i16> %e\n  ret <8 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ugt <8 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x i16> %d, <8 x i16> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i16> %r"
 },
 {
  "instr": "selecticmpugt",
  "ty": "<8 x i16>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "cmeq v0.8h, v0.8h, #0\nbsl v0.16b, v2.16b, v1.16b\nret",
  "giasm": "movi v3.2d, #0000000000000000\ncmhi v0.8h, v0.8h, v3.8h\nbsl v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <8 x i16> @test(<8 x i16> %a, <8 x i16> %d, <8 x i16> %e) {\n  %c = icmp ugt <8 x i16> %a, zeroinitializer\n  %r = select <8 x i1> %c, <8 x i16> %d, <8 x i16> %e\n  ret <8 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ugt <8 x i16> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x i16> %d, <8 x i16> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i16> %r"
 },
 {
  "instr": "icmpugt",
  "ty": "<16 x i16>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "cmhi v1.8h, v1.8h, v3.8h\ncmhi v0.8h, v0.8h, v2.8h\nuzp1 v0.16b, v0.16b, v1.16b\nret",
  "giasm": "cmhi v0.8h, v0.8h, v2.8h\ncmhi v1.8h, v1.8h, v3.8h\nuzp1 v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <16 x i1> @test(<16 x i16> %a, <16 x i16> %b) {\n  %r = icmp ugt <16 x i16> %a, %b\n  ret <16 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ugt <16 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i1> %r"
 },
 {
  "instr": "icmpugt",
  "ty": "<16 x i16>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmeq v1.8h, v1.8h, #0\ncmeq v0.8h, v0.8h, #0\nuzp1 v0.16b, v0.16b, v1.16b\nmvn v0.16b, v0.16b\nret",
  "giasm": "movi v2.2d, #0000000000000000\ncmhi v0.8h, v0.8h, v2.8h\ncmhi v1.8h, v1.8h, v2.8h\nuzp1 v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <16 x i1> @test(<16 x i16> %a) {\n  %r = icmp ugt <16 x i16> %a, zeroinitializer\n  ret <16 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ugt <16 x i16> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i1> %r"
 },
 {
  "instr": "selecticmpugt",
  "ty": "<16 x i16>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 4,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmhi v1.8h, v1.8h, v3.8h\ncmhi v0.8h, v0.8h, v2.8h\nbsl v1.16b, v5.16b, v7.16b\nbsl v0.16b, v4.16b, v6.16b\nret",
  "giasm": "cmhi v0.8h, v0.8h, v2.8h\ncmhi v1.8h, v1.8h, v3.8h\nbsl v0.16b, v4.16b, v6.16b\nbsl v1.16b, v5.16b, v7.16b\nret",
  "ll": "define <16 x i16> @test(<16 x i16> %a, <16 x i16> %b, <16 x i16> %d, <16 x i16> %e) {\n  %c = icmp ugt <16 x i16> %a, %b\n  %r = select <16 x i1> %c, <16 x i16> %d, <16 x i16> %e\n  ret <16 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ugt <16 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <16 x i1> %c, <16 x i16> %d, <16 x i16> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i16> %r"
 },
 {
  "instr": "selecticmpugt",
  "ty": "<16 x i16>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 4,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 5,
  "extrasize": 0,
  "asm": "cmeq v1.8h, v1.8h, #0\ncmeq v0.8h, v0.8h, #0\nbsl v0.16b, v4.16b, v2.16b\nbsl v1.16b, v5.16b, v3.16b\nret",
  "giasm": "movi v6.2d, #0000000000000000\ncmhi v0.8h, v0.8h, v6.8h\ncmhi v1.8h, v1.8h, v6.8h\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "ll": "define <16 x i16> @test(<16 x i16> %a, <16 x i16> %d, <16 x i16> %e) {\n  %c = icmp ugt <16 x i16> %a, zeroinitializer\n  %r = select <16 x i1> %c, <16 x i16> %d, <16 x i16> %e\n  ret <16 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ugt <16 x i16> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <16 x i1> %c, <16 x i16> %d, <16 x i16> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i16> %r"
 },
 {
  "instr": "icmpugt",
  "ty": "<2 x i32>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "cmhi v0.2s, v0.2s, v1.2s\nret",
  "giasm": "cmhi v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x i1> @test(<2 x i32> %a, <2 x i32> %b) {\n  %r = icmp ugt <2 x i32> %a, %b\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ugt <2 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "icmpugt",
  "ty": "<2 x i32>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmtst v0.2s, v0.2s, v0.2s\nret",
  "giasm": "movi v1.2d, #0000000000000000\ncmhi v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x i1> @test(<2 x i32> %a) {\n  %r = icmp ugt <2 x i32> %a, zeroinitializer\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ugt <2 x i32> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "selecticmpugt",
  "ty": "<2 x i32>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmhi v0.2s, v0.2s, v1.2s\nbsl v0.8b, v2.8b, v3.8b\nret",
  "giasm": "cmhi v0.2s, v0.2s, v1.2s\nbsl v0.8b, v2.8b, v3.8b\nret",
  "ll": "define <2 x i32> @test(<2 x i32> %a, <2 x i32> %b, <2 x i32> %d, <2 x i32> %e) {\n  %c = icmp ugt <2 x i32> %a, %b\n  %r = select <2 x i1> %c, <2 x i32> %d, <2 x i32> %e\n  ret <2 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ugt <2 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <2 x i1> %c, <2 x i32> %d, <2 x i32> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i32> %r"
 },
 {
  "instr": "selecticmpugt",
  "ty": "<2 x i32>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "cmeq v0.2s, v0.2s, #0\nbsl v0.8b, v2.8b, v1.8b\nret",
  "giasm": "movi v3.2d, #0000000000000000\ncmhi v0.2s, v0.2s, v3.2s\nbsl v0.8b, v1.8b, v2.8b\nret",
  "ll": "define <2 x i32> @test(<2 x i32> %a, <2 x i32> %d, <2 x i32> %e) {\n  %c = icmp ugt <2 x i32> %a, zeroinitializer\n  %r = select <2 x i1> %c, <2 x i32> %d, <2 x i32> %e\n  ret <2 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ugt <2 x i32> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <2 x i1> %c, <2 x i32> %d, <2 x i32> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i32> %r"
 },
 {
  "instr": "icmpugt",
  "ty": "<4 x i32>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmhi v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "giasm": "cmhi v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x i32> %a, <4 x i32> %b) {\n  %r = icmp ugt <4 x i32> %a, %b\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ugt <4 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "icmpugt",
  "ty": "<4 x i32>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "cmtst v0.4s, v0.4s, v0.4s\nxtn v0.4h, v0.4s\nret",
  "giasm": "movi v1.2d, #0000000000000000\ncmhi v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x i32> %a) {\n  %r = icmp ugt <4 x i32> %a, zeroinitializer\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ugt <4 x i32> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "selecticmpugt",
  "ty": "<4 x i32>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmhi v0.4s, v0.4s, v1.4s\nbsl v0.16b, v2.16b, v3.16b\nret",
  "giasm": "cmhi v0.4s, v0.4s, v1.4s\nbsl v0.16b, v2.16b, v3.16b\nret",
  "ll": "define <4 x i32> @test(<4 x i32> %a, <4 x i32> %b, <4 x i32> %d, <4 x i32> %e) {\n  %c = icmp ugt <4 x i32> %a, %b\n  %r = select <4 x i1> %c, <4 x i32> %d, <4 x i32> %e\n  ret <4 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ugt <4 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x i32> %d, <4 x i32> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i32> %r"
 },
 {
  "instr": "selecticmpugt",
  "ty": "<4 x i32>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "cmeq v0.4s, v0.4s, #0\nbsl v0.16b, v2.16b, v1.16b\nret",
  "giasm": "movi v3.2d, #0000000000000000\ncmhi v0.4s, v0.4s, v3.4s\nbsl v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <4 x i32> @test(<4 x i32> %a, <4 x i32> %d, <4 x i32> %e) {\n  %c = icmp ugt <4 x i32> %a, zeroinitializer\n  %r = select <4 x i1> %c, <4 x i32> %d, <4 x i32> %e\n  ret <4 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ugt <4 x i32> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x i32> %d, <4 x i32> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i32> %r"
 },
 {
  "instr": "icmpugt",
  "ty": "<8 x i32>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmhi v1.4s, v1.4s, v3.4s\ncmhi v0.4s, v0.4s, v2.4s\nuzp1 v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "giasm": "cmhi v0.4s, v0.4s, v2.4s\ncmhi v1.4s, v1.4s, v3.4s\nuzp1 v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x i32> %a, <8 x i32> %b) {\n  %r = icmp ugt <8 x i32> %a, %b\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ugt <8 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "icmpugt",
  "ty": "<8 x i32>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 5,
  "gisize": 5,
  "extrasize": 0,
  "asm": "cmeq v1.4s, v1.4s, #0\ncmeq v0.4s, v0.4s, #0\nuzp1 v0.8h, v0.8h, v1.8h\nmvn v0.16b, v0.16b\nxtn v0.8b, v0.8h\nret",
  "giasm": "movi v2.2d, #0000000000000000\ncmhi v0.4s, v0.4s, v2.4s\ncmhi v1.4s, v1.4s, v2.4s\nuzp1 v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x i32> %a) {\n  %r = icmp ugt <8 x i32> %a, zeroinitializer\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ugt <8 x i32> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "selecticmpugt",
  "ty": "<8 x i32>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 4,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmhi v1.4s, v1.4s, v3.4s\ncmhi v0.4s, v0.4s, v2.4s\nbsl v1.16b, v5.16b, v7.16b\nbsl v0.16b, v4.16b, v6.16b\nret",
  "giasm": "cmhi v0.4s, v0.4s, v2.4s\ncmhi v1.4s, v1.4s, v3.4s\nbsl v0.16b, v4.16b, v6.16b\nbsl v1.16b, v5.16b, v7.16b\nret",
  "ll": "define <8 x i32> @test(<8 x i32> %a, <8 x i32> %b, <8 x i32> %d, <8 x i32> %e) {\n  %c = icmp ugt <8 x i32> %a, %b\n  %r = select <8 x i1> %c, <8 x i32> %d, <8 x i32> %e\n  ret <8 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ugt <8 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x i32> %d, <8 x i32> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i32> %r"
 },
 {
  "instr": "selecticmpugt",
  "ty": "<8 x i32>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 4,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 5,
  "extrasize": 0,
  "asm": "cmeq v1.4s, v1.4s, #0\ncmeq v0.4s, v0.4s, #0\nbsl v0.16b, v4.16b, v2.16b\nbsl v1.16b, v5.16b, v3.16b\nret",
  "giasm": "movi v6.2d, #0000000000000000\ncmhi v0.4s, v0.4s, v6.4s\ncmhi v1.4s, v1.4s, v6.4s\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "ll": "define <8 x i32> @test(<8 x i32> %a, <8 x i32> %d, <8 x i32> %e) {\n  %c = icmp ugt <8 x i32> %a, zeroinitializer\n  %r = select <8 x i1> %c, <8 x i32> %d, <8 x i32> %e\n  ret <8 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ugt <8 x i32> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x i32> %d, <8 x i32> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i32> %r"
 },
 {
  "instr": "icmpugt",
  "ty": "<2 x i64>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmhi v0.2d, v0.2d, v1.2d\nxtn v0.2s, v0.2d\nret",
  "giasm": "cmhi v0.2d, v0.2d, v1.2d\nxtn v0.2s, v0.2d\nret",
  "ll": "define <2 x i1> @test(<2 x i64> %a, <2 x i64> %b) {\n  %r = icmp ugt <2 x i64> %a, %b\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ugt <2 x i64> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "icmpugt",
  "ty": "<2 x i64>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "cmtst v0.2d, v0.2d, v0.2d\nxtn v0.2s, v0.2d\nret",
  "giasm": "movi v1.2d, #0000000000000000\ncmhi v0.2d, v0.2d, v1.2d\nxtn v0.2s, v0.2d\nret",
  "ll": "define <2 x i1> @test(<2 x i64> %a) {\n  %r = icmp ugt <2 x i64> %a, zeroinitializer\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ugt <2 x i64> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "selecticmpugt",
  "ty": "<2 x i64>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmhi v0.2d, v0.2d, v1.2d\nbsl v0.16b, v2.16b, v3.16b\nret",
  "giasm": "cmhi v0.2d, v0.2d, v1.2d\nbsl v0.16b, v2.16b, v3.16b\nret",
  "ll": "define <2 x i64> @test(<2 x i64> %a, <2 x i64> %b, <2 x i64> %d, <2 x i64> %e) {\n  %c = icmp ugt <2 x i64> %a, %b\n  %r = select <2 x i1> %c, <2 x i64> %d, <2 x i64> %e\n  ret <2 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ugt <2 x i64> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <2 x i1> %c, <2 x i64> %d, <2 x i64> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i64> %r"
 },
 {
  "instr": "selecticmpugt",
  "ty": "<2 x i64>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "cmeq v0.2d, v0.2d, #0\nbsl v0.16b, v2.16b, v1.16b\nret",
  "giasm": "movi v3.2d, #0000000000000000\ncmhi v0.2d, v0.2d, v3.2d\nbsl v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <2 x i64> @test(<2 x i64> %a, <2 x i64> %d, <2 x i64> %e) {\n  %c = icmp ugt <2 x i64> %a, zeroinitializer\n  %r = select <2 x i1> %c, <2 x i64> %d, <2 x i64> %e\n  ret <2 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ugt <2 x i64> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <2 x i1> %c, <2 x i64> %d, <2 x i64> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i64> %r"
 },
 {
  "instr": "icmpugt",
  "ty": "<4 x i64>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmhi v1.2d, v1.2d, v3.2d\ncmhi v0.2d, v0.2d, v2.2d\nuzp1 v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "giasm": "cmhi v0.2d, v0.2d, v2.2d\ncmhi v1.2d, v1.2d, v3.2d\nuzp1 v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x i64> %a, <4 x i64> %b) {\n  %r = icmp ugt <4 x i64> %a, %b\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ugt <4 x i64> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "icmpugt",
  "ty": "<4 x i64>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 5,
  "gisize": 5,
  "extrasize": 0,
  "asm": "cmeq v1.2d, v1.2d, #0\ncmeq v0.2d, v0.2d, #0\nuzp1 v0.4s, v0.4s, v1.4s\nmvn v0.16b, v0.16b\nxtn v0.4h, v0.4s\nret",
  "giasm": "movi v2.2d, #0000000000000000\ncmhi v0.2d, v0.2d, v2.2d\ncmhi v1.2d, v1.2d, v2.2d\nuzp1 v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x i64> %a) {\n  %r = icmp ugt <4 x i64> %a, zeroinitializer\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp ugt <4 x i64> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "selecticmpugt",
  "ty": "<4 x i64>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 4,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmhi v1.2d, v1.2d, v3.2d\ncmhi v0.2d, v0.2d, v2.2d\nbsl v1.16b, v5.16b, v7.16b\nbsl v0.16b, v4.16b, v6.16b\nret",
  "giasm": "cmhi v0.2d, v0.2d, v2.2d\ncmhi v1.2d, v1.2d, v3.2d\nbsl v0.16b, v4.16b, v6.16b\nbsl v1.16b, v5.16b, v7.16b\nret",
  "ll": "define <4 x i64> @test(<4 x i64> %a, <4 x i64> %b, <4 x i64> %d, <4 x i64> %e) {\n  %c = icmp ugt <4 x i64> %a, %b\n  %r = select <4 x i1> %c, <4 x i64> %d, <4 x i64> %e\n  ret <4 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ugt <4 x i64> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x i64> %d, <4 x i64> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i64> %r"
 },
 {
  "instr": "selecticmpugt",
  "ty": "<4 x i64>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 4,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 5,
  "extrasize": 0,
  "asm": "cmeq v1.2d, v1.2d, #0\ncmeq v0.2d, v0.2d, #0\nbsl v0.16b, v4.16b, v2.16b\nbsl v1.16b, v5.16b, v3.16b\nret",
  "giasm": "movi v6.2d, #0000000000000000\ncmhi v0.2d, v0.2d, v6.2d\ncmhi v1.2d, v1.2d, v6.2d\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "ll": "define <4 x i64> @test(<4 x i64> %a, <4 x i64> %d, <4 x i64> %e) {\n  %c = icmp ugt <4 x i64> %a, zeroinitializer\n  %r = select <4 x i1> %c, <4 x i64> %d, <4 x i64> %e\n  ret <4 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp ugt <4 x i64> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x i64> %d, <4 x i64> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i64> %r"
 },
 {
  "instr": "icmpuge",
  "ty": "i8",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "and w8, w0, #0xff\ncmp w8, w1, uxtb\ncset w0, hs\nret",
  "giasm": "and w8, w0, #0xff\ncmp w8, w1, uxtb\ncset w0, hs\nret",
  "ll": "define i1 @test(i8 %a, i8 %b) {\n  %r = icmp uge i8 %a, %b\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp uge i8 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "icmpuge",
  "ty": "i8",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "mov w0, #1                          // =0x1\nret",
  "giasm": "mov w0, #1                          // =0x1\nret",
  "ll": "define i1 @test(i8 %a) {\n  %r = icmp uge i8 %a, 0\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp uge i8 %a, 0\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "selecticmpuge",
  "ty": "i8",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "and w8, w0, #0xff\ncmp w8, w1, uxtb\ncsel w0, w2, w3, hs\nret",
  "giasm": "and w8, w0, #0xff\ncmp w8, w1, uxtb\ncsel w0, w2, w3, hs\nret",
  "ll": "define i8 @test(i8 %a, i8 %b, i8 %d, i8 %e) {\n  %c = icmp uge i8 %a, %b\n  %r = select i1 %c, i8 %d, i8 %e\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp uge i8 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i8 %d, i8 %e\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "selecticmpuge",
  "ty": "i8",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "mov w0, w1\nret",
  "giasm": "mov w0, w1\nret",
  "ll": "define i8 @test(i8 %a, i8 %d, i8 %e) {\n  %c = icmp uge i8 %a, 0\n  %r = select i1 %c, i8 %d, i8 %e\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp uge i8 %a, 0\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i8 %d, i8 %e\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "icmpuge",
  "ty": "i16",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "and w8, w0, #0xffff\ncmp w8, w1, uxth\ncset w0, hs\nret",
  "giasm": "and w8, w0, #0xffff\ncmp w8, w1, uxth\ncset w0, hs\nret",
  "ll": "define i1 @test(i16 %a, i16 %b) {\n  %r = icmp uge i16 %a, %b\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp uge i16 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "icmpuge",
  "ty": "i16",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "mov w0, #1                          // =0x1\nret",
  "giasm": "mov w0, #1                          // =0x1\nret",
  "ll": "define i1 @test(i16 %a) {\n  %r = icmp uge i16 %a, 0\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp uge i16 %a, 0\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "selecticmpuge",
  "ty": "i16",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "and w8, w0, #0xffff\ncmp w8, w1, uxth\ncsel w0, w2, w3, hs\nret",
  "giasm": "and w8, w0, #0xffff\ncmp w8, w1, uxth\ncsel w0, w2, w3, hs\nret",
  "ll": "define i16 @test(i16 %a, i16 %b, i16 %d, i16 %e) {\n  %c = icmp uge i16 %a, %b\n  %r = select i1 %c, i16 %d, i16 %e\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp uge i16 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i16 %d, i16 %e\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "selecticmpuge",
  "ty": "i16",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "mov w0, w1\nret",
  "giasm": "mov w0, w1\nret",
  "ll": "define i16 @test(i16 %a, i16 %d, i16 %e) {\n  %c = icmp uge i16 %a, 0\n  %r = select i1 %c, i16 %d, i16 %e\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp uge i16 %a, 0\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i16 %d, i16 %e\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "icmpuge",
  "ty": "i32",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmp w0, w1\ncset w0, hs\nret",
  "giasm": "cmp w0, w1\ncset w0, hs\nret",
  "ll": "define i1 @test(i32 %a, i32 %b) {\n  %r = icmp uge i32 %a, %b\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp uge i32 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "icmpuge",
  "ty": "i32",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "mov w0, #1                          // =0x1\nret",
  "giasm": "mov w0, #1                          // =0x1\nret",
  "ll": "define i1 @test(i32 %a) {\n  %r = icmp uge i32 %a, 0\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp uge i32 %a, 0\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "selecticmpuge",
  "ty": "i32",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmp w0, w1\ncsel w0, w2, w3, hs\nret",
  "giasm": "cmp w0, w1\ncsel w0, w2, w3, hs\nret",
  "ll": "define i32 @test(i32 %a, i32 %b, i32 %d, i32 %e) {\n  %c = icmp uge i32 %a, %b\n  %r = select i1 %c, i32 %d, i32 %e\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp uge i32 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i32 %d, i32 %e\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "selecticmpuge",
  "ty": "i32",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "mov w0, w1\nret",
  "giasm": "mov w0, w1\nret",
  "ll": "define i32 @test(i32 %a, i32 %d, i32 %e) {\n  %c = icmp uge i32 %a, 0\n  %r = select i1 %c, i32 %d, i32 %e\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp uge i32 %a, 0\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i32 %d, i32 %e\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "icmpuge",
  "ty": "i64",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmp x0, x1\ncset w0, hs\nret",
  "giasm": "cmp x0, x1\ncset w0, hs\nret",
  "ll": "define i1 @test(i64 %a, i64 %b) {\n  %r = icmp uge i64 %a, %b\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp uge i64 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "icmpuge",
  "ty": "i64",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "mov w0, #1                          // =0x1\nret",
  "giasm": "mov w0, #1                          // =0x1\nret",
  "ll": "define i1 @test(i64 %a) {\n  %r = icmp uge i64 %a, 0\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp uge i64 %a, 0\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "selecticmpuge",
  "ty": "i64",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmp x0, x1\ncsel x0, x2, x3, hs\nret",
  "giasm": "cmp x0, x1\ncsel x0, x2, x3, hs\nret",
  "ll": "define i64 @test(i64 %a, i64 %b, i64 %d, i64 %e) {\n  %c = icmp uge i64 %a, %b\n  %r = select i1 %c, i64 %d, i64 %e\n  ret i64 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp uge i64 %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i64 %d, i64 %e\nCost Model: Found an estimated cost of 1 for instruction:   ret i64 %r"
 },
 {
  "instr": "selecticmpuge",
  "ty": "i64",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "mov x0, x1\nret",
  "giasm": "mov x0, x1\nret",
  "ll": "define i64 @test(i64 %a, i64 %d, i64 %e) {\n  %c = icmp uge i64 %a, 0\n  %r = select i1 %c, i64 %d, i64 %e\n  ret i64 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp uge i64 %a, 0\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, i64 %d, i64 %e\nCost Model: Found an estimated cost of 1 for instruction:   ret i64 %r"
 },
 {
  "instr": "icmpuge",
  "ty": "<8 x i8>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "cmhs v0.8b, v0.8b, v1.8b\nret",
  "giasm": "cmhs v0.8b, v0.8b, v1.8b\nret",
  "ll": "define <8 x i1> @test(<8 x i8> %a, <8 x i8> %b) {\n  %r = icmp uge <8 x i8> %a, %b\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp uge <8 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "icmpuge",
  "ty": "<8 x i8>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "movi v0.2d, #0xffffffffffffffff\nret",
  "giasm": "movi v0.8b, #1\nret",
  "ll": "define <8 x i1> @test(<8 x i8> %a) {\n  %r = icmp uge <8 x i8> %a, zeroinitializer\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp uge <8 x i8> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "selecticmpuge",
  "ty": "<8 x i8>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmhs v0.8b, v0.8b, v1.8b\nbsl v0.8b, v2.8b, v3.8b\nret",
  "giasm": "cmhs v0.8b, v0.8b, v1.8b\nbsl v0.8b, v2.8b, v3.8b\nret",
  "ll": "define <8 x i8> @test(<8 x i8> %a, <8 x i8> %b, <8 x i8> %d, <8 x i8> %e) {\n  %c = icmp uge <8 x i8> %a, %b\n  %r = select <8 x i1> %c, <8 x i8> %d, <8 x i8> %e\n  ret <8 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp uge <8 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x i8> %d, <8 x i8> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i8> %r"
 },
 {
  "instr": "selecticmpuge",
  "ty": "<8 x i8>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 0,
  "gisize": 0,
  "extrasize": 0,
  "asm": "fmov d0, d1\nret",
  "giasm": "fmov d0, d1\nret",
  "ll": "define <8 x i8> @test(<8 x i8> %a, <8 x i8> %d, <8 x i8> %e) {\n  %c = icmp uge <8 x i8> %a, zeroinitializer\n  %r = select <8 x i1> %c, <8 x i8> %d, <8 x i8> %e\n  ret <8 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp uge <8 x i8> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x i8> %d, <8 x i8> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i8> %r"
 },
 {
  "instr": "icmpuge",
  "ty": "<16 x i8>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "cmhs v0.16b, v0.16b, v1.16b\nret",
  "giasm": "cmhs v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <16 x i1> @test(<16 x i8> %a, <16 x i8> %b) {\n  %r = icmp uge <16 x i8> %a, %b\n  ret <16 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp uge <16 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i1> %r"
 },
 {
  "instr": "icmpuge",
  "ty": "<16 x i8>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "movi v0.2d, #0xffffffffffffffff\nret",
  "giasm": "movi v0.16b, #1\nret",
  "ll": "define <16 x i1> @test(<16 x i8> %a) {\n  %r = icmp uge <16 x i8> %a, zeroinitializer\n  ret <16 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp uge <16 x i8> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i1> %r"
 },
 {
  "instr": "selecticmpuge",
  "ty": "<16 x i8>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmhs v0.16b, v0.16b, v1.16b\nbsl v0.16b, v2.16b, v3.16b\nret",
  "giasm": "cmhs v0.16b, v0.16b, v1.16b\nbsl v0.16b, v2.16b, v3.16b\nret",
  "ll": "define <16 x i8> @test(<16 x i8> %a, <16 x i8> %b, <16 x i8> %d, <16 x i8> %e) {\n  %c = icmp uge <16 x i8> %a, %b\n  %r = select <16 x i1> %c, <16 x i8> %d, <16 x i8> %e\n  ret <16 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp uge <16 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <16 x i1> %c, <16 x i8> %d, <16 x i8> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i8> %r"
 },
 {
  "instr": "selecticmpuge",
  "ty": "<16 x i8>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 0,
  "gisize": 0,
  "extrasize": 0,
  "asm": "mov v0.16b, v1.16b\nret",
  "giasm": "mov v0.16b, v1.16b\nret",
  "ll": "define <16 x i8> @test(<16 x i8> %a, <16 x i8> %d, <16 x i8> %e) {\n  %c = icmp uge <16 x i8> %a, zeroinitializer\n  %r = select <16 x i1> %c, <16 x i8> %d, <16 x i8> %e\n  ret <16 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp uge <16 x i8> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <16 x i1> %c, <16 x i8> %d, <16 x i8> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i8> %r"
 },
 {
  "instr": "icmpuge",
  "ty": "<32 x i8>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 14,
  "gisize": -1,
  "extrasize": 0,
  "asm": "cmhs v1.16b, v1.16b, v3.16b\nadrp x9, .LCPI0_0\ncmhs v0.16b, v0.16b, v2.16b\nldr q2, [x9, :lo12:.LCPI0_0]\nand v1.16b, v1.16b, v2.16b\nand v0.16b, v0.16b, v2.16b\next v2.16b, v1.16b, v1.16b, #8\next v3.16b, v0.16b, v0.16b, #8\nzip1 v1.16b, v1.16b, v2.16b\nzip1 v0.16b, v0.16b, v3.16b\naddv h1, v1.8h\naddv h0, v0.8h\nstr h1, [x8, #2]\nstr h0, [x8]\nret",
  "giasm": "LLVM ERROR: unable to legalize instruction: G_STORE %8:_(<32 x s8>), %2:_(p0) :: (store (<32 x s1>)) (in function: test)",
  "ll": "define <32 x i1> @test(<32 x i8> %a, <32 x i8> %b) {\n  %r = icmp uge <32 x i8> %a, %b\n  ret <32 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp uge <32 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i1> %r"
 },
 {
  "instr": "icmpuge",
  "ty": "<32 x i8>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "mov w9, #-1                         // =0xffffffff\nstr w9, [x8]\nret",
  "giasm": "LLVM ERROR: unable to legalize instruction: G_STORE %8:_(<32 x s8>), %1:_(p0) :: (store (<32 x s1>)) (in function: test)",
  "ll": "define <32 x i1> @test(<32 x i8> %a) {\n  %r = icmp uge <32 x i8> %a, zeroinitializer\n  ret <32 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp uge <32 x i8> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i1> %r"
 },
 {
  "instr": "selecticmpuge",
  "ty": "<32 x i8>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 4,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmhs v1.16b, v1.16b, v3.16b\ncmhs v0.16b, v0.16b, v2.16b\nbsl v1.16b, v5.16b, v7.16b\nbsl v0.16b, v4.16b, v6.16b\nret",
  "giasm": "cmhs v0.16b, v0.16b, v2.16b\ncmhs v1.16b, v1.16b, v3.16b\nbsl v0.16b, v4.16b, v6.16b\nbsl v1.16b, v5.16b, v7.16b\nret",
  "ll": "define <32 x i8> @test(<32 x i8> %a, <32 x i8> %b, <32 x i8> %d, <32 x i8> %e) {\n  %c = icmp uge <32 x i8> %a, %b\n  %r = select <32 x i1> %c, <32 x i8> %d, <32 x i8> %e\n  ret <32 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp uge <32 x i8> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <32 x i1> %c, <32 x i8> %d, <32 x i8> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i8> %r"
 },
 {
  "instr": "selecticmpuge",
  "ty": "<32 x i8>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 4,
  "lat": 2,
  "sizelat": 2,
  "size": 0,
  "gisize": 0,
  "extrasize": 0,
  "asm": "mov v1.16b, v3.16b\nmov v0.16b, v2.16b\nret",
  "giasm": "mov v0.16b, v2.16b\nmov v1.16b, v3.16b\nret",
  "ll": "define <32 x i8> @test(<32 x i8> %a, <32 x i8> %d, <32 x i8> %e) {\n  %c = icmp uge <32 x i8> %a, zeroinitializer\n  %r = select <32 x i1> %c, <32 x i8> %d, <32 x i8> %e\n  ret <32 x i8> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp uge <32 x i8> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <32 x i1> %c, <32 x i8> %d, <32 x i8> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <32 x i8> %r"
 },
 {
  "instr": "icmpuge",
  "ty": "<4 x i16>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "cmhs v0.4h, v0.4h, v1.4h\nret",
  "giasm": "cmhs v0.4h, v0.4h, v1.4h\nret",
  "ll": "define <4 x i1> @test(<4 x i16> %a, <4 x i16> %b) {\n  %r = icmp uge <4 x i16> %a, %b\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp uge <4 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "icmpuge",
  "ty": "<4 x i16>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 2,
  "extrasize": 0,
  "asm": "movi v0.2d, #0xffffffffffffffff\nret",
  "giasm": "mov w8, #1                          // =0x1\ndup v0.4h, w8\nret",
  "ll": "define <4 x i1> @test(<4 x i16> %a) {\n  %r = icmp uge <4 x i16> %a, zeroinitializer\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp uge <4 x i16> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "selecticmpuge",
  "ty": "<4 x i16>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmhs v0.4h, v0.4h, v1.4h\nbsl v0.8b, v2.8b, v3.8b\nret",
  "giasm": "cmhs v0.4h, v0.4h, v1.4h\nbsl v0.8b, v2.8b, v3.8b\nret",
  "ll": "define <4 x i16> @test(<4 x i16> %a, <4 x i16> %b, <4 x i16> %d, <4 x i16> %e) {\n  %c = icmp uge <4 x i16> %a, %b\n  %r = select <4 x i1> %c, <4 x i16> %d, <4 x i16> %e\n  ret <4 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp uge <4 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x i16> %d, <4 x i16> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i16> %r"
 },
 {
  "instr": "selecticmpuge",
  "ty": "<4 x i16>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 0,
  "gisize": 0,
  "extrasize": 0,
  "asm": "fmov d0, d1\nret",
  "giasm": "fmov d0, d1\nret",
  "ll": "define <4 x i16> @test(<4 x i16> %a, <4 x i16> %d, <4 x i16> %e) {\n  %c = icmp uge <4 x i16> %a, zeroinitializer\n  %r = select <4 x i1> %c, <4 x i16> %d, <4 x i16> %e\n  ret <4 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp uge <4 x i16> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x i16> %d, <4 x i16> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i16> %r"
 },
 {
  "instr": "icmpuge",
  "ty": "<8 x i16>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmhs v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "giasm": "cmhs v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x i16> %a, <8 x i16> %b) {\n  %r = icmp uge <8 x i16> %a, %b\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp uge <8 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "icmpuge",
  "ty": "<8 x i16>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "movi v0.2d, #0xffffffffffffffff\nret",
  "giasm": "movi v0.8b, #1\nret",
  "ll": "define <8 x i1> @test(<8 x i16> %a) {\n  %r = icmp uge <8 x i16> %a, zeroinitializer\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp uge <8 x i16> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "selecticmpuge",
  "ty": "<8 x i16>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmhs v0.8h, v0.8h, v1.8h\nbsl v0.16b, v2.16b, v3.16b\nret",
  "giasm": "cmhs v0.8h, v0.8h, v1.8h\nbsl v0.16b, v2.16b, v3.16b\nret",
  "ll": "define <8 x i16> @test(<8 x i16> %a, <8 x i16> %b, <8 x i16> %d, <8 x i16> %e) {\n  %c = icmp uge <8 x i16> %a, %b\n  %r = select <8 x i1> %c, <8 x i16> %d, <8 x i16> %e\n  ret <8 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp uge <8 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x i16> %d, <8 x i16> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i16> %r"
 },
 {
  "instr": "selecticmpuge",
  "ty": "<8 x i16>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 0,
  "gisize": 0,
  "extrasize": 0,
  "asm": "mov v0.16b, v1.16b\nret",
  "giasm": "mov v0.16b, v1.16b\nret",
  "ll": "define <8 x i16> @test(<8 x i16> %a, <8 x i16> %d, <8 x i16> %e) {\n  %c = icmp uge <8 x i16> %a, zeroinitializer\n  %r = select <8 x i1> %c, <8 x i16> %d, <8 x i16> %e\n  ret <8 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp uge <8 x i16> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x i16> %d, <8 x i16> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i16> %r"
 },
 {
  "instr": "icmpuge",
  "ty": "<16 x i16>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "cmhs v1.8h, v1.8h, v3.8h\ncmhs v0.8h, v0.8h, v2.8h\nuzp1 v0.16b, v0.16b, v1.16b\nret",
  "giasm": "cmhs v0.8h, v0.8h, v2.8h\ncmhs v1.8h, v1.8h, v3.8h\nuzp1 v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <16 x i1> @test(<16 x i16> %a, <16 x i16> %b) {\n  %r = icmp uge <16 x i16> %a, %b\n  ret <16 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp uge <16 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i1> %r"
 },
 {
  "instr": "icmpuge",
  "ty": "<16 x i16>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "movi v0.2d, #0xffffffffffffffff\nret",
  "giasm": "movi v0.16b, #1\nret",
  "ll": "define <16 x i1> @test(<16 x i16> %a) {\n  %r = icmp uge <16 x i16> %a, zeroinitializer\n  ret <16 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp uge <16 x i16> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i1> %r"
 },
 {
  "instr": "selecticmpuge",
  "ty": "<16 x i16>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 4,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmhs v1.8h, v1.8h, v3.8h\ncmhs v0.8h, v0.8h, v2.8h\nbsl v1.16b, v5.16b, v7.16b\nbsl v0.16b, v4.16b, v6.16b\nret",
  "giasm": "cmhs v0.8h, v0.8h, v2.8h\ncmhs v1.8h, v1.8h, v3.8h\nbsl v0.16b, v4.16b, v6.16b\nbsl v1.16b, v5.16b, v7.16b\nret",
  "ll": "define <16 x i16> @test(<16 x i16> %a, <16 x i16> %b, <16 x i16> %d, <16 x i16> %e) {\n  %c = icmp uge <16 x i16> %a, %b\n  %r = select <16 x i1> %c, <16 x i16> %d, <16 x i16> %e\n  ret <16 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp uge <16 x i16> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <16 x i1> %c, <16 x i16> %d, <16 x i16> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i16> %r"
 },
 {
  "instr": "selecticmpuge",
  "ty": "<16 x i16>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 4,
  "lat": 2,
  "sizelat": 2,
  "size": 0,
  "gisize": 0,
  "extrasize": 0,
  "asm": "mov v1.16b, v3.16b\nmov v0.16b, v2.16b\nret",
  "giasm": "mov v0.16b, v2.16b\nmov v1.16b, v3.16b\nret",
  "ll": "define <16 x i16> @test(<16 x i16> %a, <16 x i16> %d, <16 x i16> %e) {\n  %c = icmp uge <16 x i16> %a, zeroinitializer\n  %r = select <16 x i1> %c, <16 x i16> %d, <16 x i16> %e\n  ret <16 x i16> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp uge <16 x i16> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <16 x i1> %c, <16 x i16> %d, <16 x i16> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i16> %r"
 },
 {
  "instr": "icmpuge",
  "ty": "<2 x i32>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "cmhs v0.2s, v0.2s, v1.2s\nret",
  "giasm": "cmhs v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x i1> @test(<2 x i32> %a, <2 x i32> %b) {\n  %r = icmp uge <2 x i32> %a, %b\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp uge <2 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "icmpuge",
  "ty": "<2 x i32>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "movi v0.2d, #0xffffffffffffffff\nret",
  "giasm": "movi v0.2s, #1\nret",
  "ll": "define <2 x i1> @test(<2 x i32> %a) {\n  %r = icmp uge <2 x i32> %a, zeroinitializer\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp uge <2 x i32> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "selecticmpuge",
  "ty": "<2 x i32>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmhs v0.2s, v0.2s, v1.2s\nbsl v0.8b, v2.8b, v3.8b\nret",
  "giasm": "cmhs v0.2s, v0.2s, v1.2s\nbsl v0.8b, v2.8b, v3.8b\nret",
  "ll": "define <2 x i32> @test(<2 x i32> %a, <2 x i32> %b, <2 x i32> %d, <2 x i32> %e) {\n  %c = icmp uge <2 x i32> %a, %b\n  %r = select <2 x i1> %c, <2 x i32> %d, <2 x i32> %e\n  ret <2 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp uge <2 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <2 x i1> %c, <2 x i32> %d, <2 x i32> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i32> %r"
 },
 {
  "instr": "selecticmpuge",
  "ty": "<2 x i32>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 0,
  "gisize": 0,
  "extrasize": 0,
  "asm": "fmov d0, d1\nret",
  "giasm": "fmov d0, d1\nret",
  "ll": "define <2 x i32> @test(<2 x i32> %a, <2 x i32> %d, <2 x i32> %e) {\n  %c = icmp uge <2 x i32> %a, zeroinitializer\n  %r = select <2 x i1> %c, <2 x i32> %d, <2 x i32> %e\n  ret <2 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp uge <2 x i32> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <2 x i1> %c, <2 x i32> %d, <2 x i32> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i32> %r"
 },
 {
  "instr": "icmpuge",
  "ty": "<4 x i32>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmhs v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "giasm": "cmhs v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x i32> %a, <4 x i32> %b) {\n  %r = icmp uge <4 x i32> %a, %b\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp uge <4 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "icmpuge",
  "ty": "<4 x i32>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 2,
  "extrasize": 0,
  "asm": "movi v0.2d, #0xffffffffffffffff\nret",
  "giasm": "mov w8, #1                          // =0x1\ndup v0.4h, w8\nret",
  "ll": "define <4 x i1> @test(<4 x i32> %a) {\n  %r = icmp uge <4 x i32> %a, zeroinitializer\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp uge <4 x i32> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "selecticmpuge",
  "ty": "<4 x i32>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmhs v0.4s, v0.4s, v1.4s\nbsl v0.16b, v2.16b, v3.16b\nret",
  "giasm": "cmhs v0.4s, v0.4s, v1.4s\nbsl v0.16b, v2.16b, v3.16b\nret",
  "ll": "define <4 x i32> @test(<4 x i32> %a, <4 x i32> %b, <4 x i32> %d, <4 x i32> %e) {\n  %c = icmp uge <4 x i32> %a, %b\n  %r = select <4 x i1> %c, <4 x i32> %d, <4 x i32> %e\n  ret <4 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp uge <4 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x i32> %d, <4 x i32> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i32> %r"
 },
 {
  "instr": "selecticmpuge",
  "ty": "<4 x i32>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 0,
  "gisize": 0,
  "extrasize": 0,
  "asm": "mov v0.16b, v1.16b\nret",
  "giasm": "mov v0.16b, v1.16b\nret",
  "ll": "define <4 x i32> @test(<4 x i32> %a, <4 x i32> %d, <4 x i32> %e) {\n  %c = icmp uge <4 x i32> %a, zeroinitializer\n  %r = select <4 x i1> %c, <4 x i32> %d, <4 x i32> %e\n  ret <4 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp uge <4 x i32> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x i32> %d, <4 x i32> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i32> %r"
 },
 {
  "instr": "icmpuge",
  "ty": "<8 x i32>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmhs v1.4s, v1.4s, v3.4s\ncmhs v0.4s, v0.4s, v2.4s\nuzp1 v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "giasm": "cmhs v0.4s, v0.4s, v2.4s\ncmhs v1.4s, v1.4s, v3.4s\nuzp1 v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x i32> %a, <8 x i32> %b) {\n  %r = icmp uge <8 x i32> %a, %b\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp uge <8 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "icmpuge",
  "ty": "<8 x i32>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "movi v0.2d, #0xffffffffffffffff\nret",
  "giasm": "movi v0.8b, #1\nret",
  "ll": "define <8 x i1> @test(<8 x i32> %a) {\n  %r = icmp uge <8 x i32> %a, zeroinitializer\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp uge <8 x i32> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "selecticmpuge",
  "ty": "<8 x i32>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 4,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmhs v1.4s, v1.4s, v3.4s\ncmhs v0.4s, v0.4s, v2.4s\nbsl v1.16b, v5.16b, v7.16b\nbsl v0.16b, v4.16b, v6.16b\nret",
  "giasm": "cmhs v0.4s, v0.4s, v2.4s\ncmhs v1.4s, v1.4s, v3.4s\nbsl v0.16b, v4.16b, v6.16b\nbsl v1.16b, v5.16b, v7.16b\nret",
  "ll": "define <8 x i32> @test(<8 x i32> %a, <8 x i32> %b, <8 x i32> %d, <8 x i32> %e) {\n  %c = icmp uge <8 x i32> %a, %b\n  %r = select <8 x i1> %c, <8 x i32> %d, <8 x i32> %e\n  ret <8 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp uge <8 x i32> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x i32> %d, <8 x i32> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i32> %r"
 },
 {
  "instr": "selecticmpuge",
  "ty": "<8 x i32>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 4,
  "lat": 2,
  "sizelat": 2,
  "size": 0,
  "gisize": 0,
  "extrasize": 0,
  "asm": "mov v1.16b, v3.16b\nmov v0.16b, v2.16b\nret",
  "giasm": "mov v0.16b, v2.16b\nmov v1.16b, v3.16b\nret",
  "ll": "define <8 x i32> @test(<8 x i32> %a, <8 x i32> %d, <8 x i32> %e) {\n  %c = icmp uge <8 x i32> %a, zeroinitializer\n  %r = select <8 x i1> %c, <8 x i32> %d, <8 x i32> %e\n  ret <8 x i32> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp uge <8 x i32> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x i32> %d, <8 x i32> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i32> %r"
 },
 {
  "instr": "icmpuge",
  "ty": "<2 x i64>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmhs v0.2d, v0.2d, v1.2d\nxtn v0.2s, v0.2d\nret",
  "giasm": "cmhs v0.2d, v0.2d, v1.2d\nxtn v0.2s, v0.2d\nret",
  "ll": "define <2 x i1> @test(<2 x i64> %a, <2 x i64> %b) {\n  %r = icmp uge <2 x i64> %a, %b\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp uge <2 x i64> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "icmpuge",
  "ty": "<2 x i64>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "movi v0.2d, #0xffffffffffffffff\nret",
  "giasm": "movi v0.2s, #1\nret",
  "ll": "define <2 x i1> @test(<2 x i64> %a) {\n  %r = icmp uge <2 x i64> %a, zeroinitializer\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp uge <2 x i64> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "selecticmpuge",
  "ty": "<2 x i64>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "cmhs v0.2d, v0.2d, v1.2d\nbsl v0.16b, v2.16b, v3.16b\nret",
  "giasm": "cmhs v0.2d, v0.2d, v1.2d\nbsl v0.16b, v2.16b, v3.16b\nret",
  "ll": "define <2 x i64> @test(<2 x i64> %a, <2 x i64> %b, <2 x i64> %d, <2 x i64> %e) {\n  %c = icmp uge <2 x i64> %a, %b\n  %r = select <2 x i1> %c, <2 x i64> %d, <2 x i64> %e\n  ret <2 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp uge <2 x i64> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <2 x i1> %c, <2 x i64> %d, <2 x i64> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i64> %r"
 },
 {
  "instr": "selecticmpuge",
  "ty": "<2 x i64>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 0,
  "gisize": 0,
  "extrasize": 0,
  "asm": "mov v0.16b, v1.16b\nret",
  "giasm": "mov v0.16b, v1.16b\nret",
  "ll": "define <2 x i64> @test(<2 x i64> %a, <2 x i64> %d, <2 x i64> %e) {\n  %c = icmp uge <2 x i64> %a, zeroinitializer\n  %r = select <2 x i1> %c, <2 x i64> %d, <2 x i64> %e\n  ret <2 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp uge <2 x i64> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <2 x i1> %c, <2 x i64> %d, <2 x i64> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i64> %r"
 },
 {
  "instr": "icmpuge",
  "ty": "<4 x i64>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmhs v1.2d, v1.2d, v3.2d\ncmhs v0.2d, v0.2d, v2.2d\nuzp1 v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "giasm": "cmhs v0.2d, v0.2d, v2.2d\ncmhs v1.2d, v1.2d, v3.2d\nuzp1 v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x i64> %a, <4 x i64> %b) {\n  %r = icmp uge <4 x i64> %a, %b\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp uge <4 x i64> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "icmpuge",
  "ty": "<4 x i64>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 2,
  "extrasize": 0,
  "asm": "movi v0.2d, #0xffffffffffffffff\nret",
  "giasm": "mov w8, #1                          // =0x1\ndup v0.4h, w8\nret",
  "ll": "define <4 x i1> @test(<4 x i64> %a) {\n  %r = icmp uge <4 x i64> %a, zeroinitializer\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = icmp uge <4 x i64> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "selecticmpuge",
  "ty": "<4 x i64>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 4,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "cmhs v1.2d, v1.2d, v3.2d\ncmhs v0.2d, v0.2d, v2.2d\nbsl v1.16b, v5.16b, v7.16b\nbsl v0.16b, v4.16b, v6.16b\nret",
  "giasm": "cmhs v0.2d, v0.2d, v2.2d\ncmhs v1.2d, v1.2d, v3.2d\nbsl v0.16b, v4.16b, v6.16b\nbsl v1.16b, v5.16b, v7.16b\nret",
  "ll": "define <4 x i64> @test(<4 x i64> %a, <4 x i64> %b, <4 x i64> %d, <4 x i64> %e) {\n  %c = icmp uge <4 x i64> %a, %b\n  %r = select <4 x i1> %c, <4 x i64> %d, <4 x i64> %e\n  ret <4 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp uge <4 x i64> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x i64> %d, <4 x i64> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i64> %r"
 },
 {
  "instr": "selecticmpuge",
  "ty": "<4 x i64>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 4,
  "lat": 2,
  "sizelat": 2,
  "size": 0,
  "gisize": 0,
  "extrasize": 0,
  "asm": "mov v1.16b, v3.16b\nmov v0.16b, v2.16b\nret",
  "giasm": "mov v0.16b, v2.16b\nmov v1.16b, v3.16b\nret",
  "ll": "define <4 x i64> @test(<4 x i64> %a, <4 x i64> %d, <4 x i64> %e) {\n  %c = icmp uge <4 x i64> %a, zeroinitializer\n  %r = select <4 x i1> %c, <4 x i64> %d, <4 x i64> %e\n  ret <4 x i64> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = icmp uge <4 x i64> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x i64> %d, <4 x i64> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i64> %r"
 },
 {
  "instr": "reduce.add",
  "ty": "<8 x i8>",
  "variant": "reduce",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "addv b0, v0.8b\nfmov w0, s0\nret",
  "giasm": "addv b0, v0.8b\nfmov w0, s0\nret",
  "ll": "define i8 @test(<8 x i8> %a) {\n  %r = call i8 @llvm.vector.reduce.add(<8 x i8> %a)\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "reduce.add",
  "ty": "<16 x i8>",
  "variant": "reduce",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "addv b0, v0.16b\nfmov w0, s0\nret",
  "giasm": "addv b0, v0.16b\nfmov w0, s0\nret",
  "ll": "define i8 @test(<16 x i8> %a) {\n  %r = call i8 @llvm.vector.reduce.add(<16 x i8> %a)\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "reduce.add",
  "ty": "<32 x i8>",
  "variant": "reduce",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "add v0.16b, v0.16b, v1.16b\naddv b0, v0.16b\nfmov w0, s0\nret",
  "giasm": "add v0.16b, v0.16b, v1.16b\naddv b0, v0.16b\nfmov w0, s0\nret",
  "ll": "define i8 @test(<32 x i8> %a) {\n  %r = call i8 @llvm.vector.reduce.add(<32 x i8> %a)\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 3 for instruction:   %r = call i8 @llvm.vector.reduce.add.v32i8(<32 x i8> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "reduce.add",
  "ty": "<4 x i16>",
  "variant": "reduce",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "addv h0, v0.4h\nfmov w0, s0\nret",
  "giasm": "addv h0, v0.4h\nfmov w0, s0\nret",
  "ll": "define i16 @test(<4 x i16> %a) {\n  %r = call i16 @llvm.vector.reduce.add(<4 x i16> %a)\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call i16 @llvm.vector.reduce.add.v4i16(<4 x i16> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "reduce.add",
  "ty": "<8 x i16>",
  "variant": "reduce",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "addv h0, v0.8h\nfmov w0, s0\nret",
  "giasm": "addv h0, v0.8h\nfmov w0, s0\nret",
  "ll": "define i16 @test(<8 x i16> %a) {\n  %r = call i16 @llvm.vector.reduce.add(<8 x i16> %a)\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "reduce.add",
  "ty": "<16 x i16>",
  "variant": "reduce",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "add v0.8h, v0.8h, v1.8h\naddv h0, v0.8h\nfmov w0, s0\nret",
  "giasm": "add v0.8h, v0.8h, v1.8h\naddv h0, v0.8h\nfmov w0, s0\nret",
  "ll": "define i16 @test(<16 x i16> %a) {\n  %r = call i16 @llvm.vector.reduce.add(<16 x i16> %a)\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 3 for instruction:   %r = call i16 @llvm.vector.reduce.add.v16i16(<16 x i16> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "reduce.add",
  "ty": "<2 x i32>",
  "variant": "reduce",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "addp v0.2s, v0.2s, v0.2s\nfmov w0, s0\nret",
  "giasm": "addp v0.2s, v0.2s, v0.2s\nfmov w0, s0\nret",
  "ll": "define i32 @test(<2 x i32> %a) {\n  %r = call i32 @llvm.vector.reduce.add(<2 x i32> %a)\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call i32 @llvm.vector.reduce.add.v2i32(<2 x i32> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "reduce.add",
  "ty": "<4 x i32>",
  "variant": "reduce",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "addv s0, v0.4s\nfmov w0, s0\nret",
  "giasm": "addv s0, v0.4s\nfmov w0, s0\nret",
  "ll": "define i32 @test(<4 x i32> %a) {\n  %r = call i32 @llvm.vector.reduce.add(<4 x i32> %a)\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "reduce.add",
  "ty": "<8 x i32>",
  "variant": "reduce",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "add v0.4s, v0.4s, v1.4s\naddv s0, v0.4s\nfmov w0, s0\nret",
  "giasm": "add v0.4s, v0.4s, v1.4s\naddv s0, v0.4s\nfmov w0, s0\nret",
  "ll": "define i32 @test(<8 x i32> %a) {\n  %r = call i32 @llvm.vector.reduce.add(<8 x i32> %a)\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 3 for instruction:   %r = call i32 @llvm.vector.reduce.add.v8i32(<8 x i32> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "reduce.add",
  "ty": "<2 x i64>",
  "variant": "reduce",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "addp d0, v0.2d\nfmov x0, d0\nret",
  "giasm": "addp d0, v0.2d\nfmov x0, d0\nret",
  "ll": "define i64 @test(<2 x i64> %a) {\n  %r = call i64 @llvm.vector.reduce.add(<2 x i64> %a)\n  ret i64 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i64 %r"
 },
 {
  "instr": "reduce.add",
  "ty": "<4 x i64>",
  "variant": "reduce",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "add v0.2d, v0.2d, v1.2d\naddp d0, v0.2d\nfmov x0, d0\nret",
  "giasm": "add v0.2d, v0.2d, v1.2d\naddp d0, v0.2d\nfmov x0, d0\nret",
  "ll": "define i64 @test(<4 x i64> %a) {\n  %r = call i64 @llvm.vector.reduce.add(<4 x i64> %a)\n  ret i64 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 3 for instruction:   %r = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i64 %r"
 },
 {
  "instr": "reduce.mul",
  "ty": "<8 x i8>",
  "variant": "reduce",
  "codesize": 27,
  "thru": 27,
  "lat": 27,
  "sizelat": 27,
  "size": 15,
  "gisize": 15,
  "extrasize": 0,
  "asm": "umov w8, v0.b[1]\numov w9, v0.b[0]\numov w10, v0.b[2]\nmul w8, w9, w8\numov w9, v0.b[3]\nmul w8, w8, w10\numov w10, v0.b[4]\nmul w8, w8, w9\numov w9, v0.b[5]\nmul w8, w8, w10\numov w10, v0.b[6]\nmul w8, w8, w9\numov w9, v0.b[7]\nmul w8, w8, w10\nmul w0, w8, w9\nret",
  "giasm": "umov w8, v0.b[0]\numov w9, v0.b[1]\numov w10, v0.b[2]\numov w11, v0.b[3]\numov w12, v0.b[4]\numov w13, v0.b[5]\numov w14, v0.b[6]\numov w15, v0.b[7]\nmul w8, w8, w9\nmul w9, w10, w11\nmul w10, w12, w13\nmul w11, w14, w15\nmul w8, w8, w9\nmul w9, w10, w11\nmul w0, w8, w9\nret",
  "ll": "define i8 @test(<8 x i8> %a) {\n  %r = call i8 @llvm.vector.reduce.mul(<8 x i8> %a)\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 27 for instruction:   %r = call i8 @llvm.vector.reduce.mul.v8i8(<8 x i8> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "reduce.mul",
  "ty": "<16 x i8>",
  "variant": "reduce",
  "codesize": 36,
  "thru": 36,
  "lat": 36,
  "sizelat": 36,
  "size": 17,
  "gisize": 17,
  "extrasize": 0,
  "asm": "ext v1.16b, v0.16b, v0.16b, #8\nmul v0.8b, v0.8b, v1.8b\numov w8, v0.b[1]\numov w9, v0.b[0]\numov w10, v0.b[2]\nmul w8, w9, w8\numov w9, v0.b[3]\nmul w8, w8, w10\numov w10, v0.b[4]\nmul w8, w8, w9\numov w9, v0.b[5]\nmul w8, w8, w10\numov w10, v0.b[6]\nmul w8, w8, w9\numov w9, v0.b[7]\nmul w8, w8, w10\nmul w0, w8, w9\nret",
  "giasm": "mov d1, v0.d[1]\nmul v0.8b, v0.8b, v1.8b\numov w8, v0.b[0]\numov w9, v0.b[1]\numov w10, v0.b[2]\numov w11, v0.b[3]\numov w12, v0.b[4]\numov w13, v0.b[5]\numov w14, v0.b[6]\numov w15, v0.b[7]\nmul w8, w8, w9\nmul w9, w10, w11\nmul w10, w12, w13\nmul w11, w14, w15\nmul w8, w8, w9\nmul w9, w10, w11\nmul w0, w8, w9\nret",
  "ll": "define i8 @test(<16 x i8> %a) {\n  %r = call i8 @llvm.vector.reduce.mul(<16 x i8> %a)\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 36 for instruction:   %r = call i8 @llvm.vector.reduce.mul.v16i8(<16 x i8> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "reduce.mul",
  "ty": "<32 x i8>",
  "variant": "reduce",
  "codesize": 53,
  "thru": 53,
  "lat": 53,
  "sizelat": 53,
  "size": 18,
  "gisize": 20,
  "extrasize": 0,
  "asm": "mul v0.16b, v0.16b, v1.16b\next v1.16b, v0.16b, v0.16b, #8\nmul v0.8b, v0.8b, v1.8b\numov w8, v0.b[1]\numov w9, v0.b[0]\numov w10, v0.b[2]\nmul w8, w9, w8\numov w9, v0.b[3]\nmul w8, w8, w10\numov w10, v0.b[4]\nmul w8, w8, w9\numov w9, v0.b[5]\nmul w8, w8, w10\numov w10, v0.b[6]\nmul w8, w8, w9\numov w9, v0.b[7]\nmul w8, w8, w10\nmul w0, w8, w9\nret",
  "giasm": "mov d2, v0.d[1]\nmov d3, v1.d[1]\nmul v0.8b, v0.8b, v2.8b\nmul v1.8b, v1.8b, v3.8b\nmul v0.8b, v0.8b, v1.8b\numov w8, v0.b[0]\numov w9, v0.b[1]\numov w10, v0.b[2]\numov w11, v0.b[3]\numov w12, v0.b[4]\numov w13, v0.b[5]\numov w14, v0.b[6]\numov w15, v0.b[7]\nmul w8, w8, w9\nmul w9, w10, w11\nmul w10, w12, w13\nmul w11, w14, w15\nmul w8, w8, w9\nmul w9, w10, w11\nmul w0, w8, w9\nret",
  "ll": "define i8 @test(<32 x i8> %a) {\n  %r = call i8 @llvm.vector.reduce.mul(<32 x i8> %a)\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 53 for instruction:   %r = call i8 @llvm.vector.reduce.mul.v32i8(<32 x i8> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "reduce.mul",
  "ty": "<4 x i16>",
  "variant": "reduce",
  "codesize": 8,
  "thru": 8,
  "lat": 8,
  "sizelat": 8,
  "size": 7,
  "gisize": 7,
  "extrasize": 0,
  "asm": "umov w8, v0.h[1]\numov w9, v0.h[0]\numov w10, v0.h[2]\nmul w8, w9, w8\numov w9, v0.h[3]\nmul w8, w8, w10\nmul w0, w8, w9\nret",
  "giasm": "umov w8, v0.h[0]\numov w9, v0.h[1]\numov w10, v0.h[2]\numov w11, v0.h[3]\nmul w8, w8, w9\nmul w9, w10, w11\nmul w0, w8, w9\nret",
  "ll": "define i16 @test(<4 x i16> %a) {\n  %r = call i16 @llvm.vector.reduce.mul(<4 x i16> %a)\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 8 for instruction:   %r = call i16 @llvm.vector.reduce.mul.v4i16(<4 x i16> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "reduce.mul",
  "ty": "<8 x i16>",
  "variant": "reduce",
  "codesize": 27,
  "thru": 27,
  "lat": 27,
  "sizelat": 27,
  "size": 9,
  "gisize": 9,
  "extrasize": 0,
  "asm": "ext v1.16b, v0.16b, v0.16b, #8\nmul v0.4h, v0.4h, v1.4h\numov w8, v0.h[1]\numov w9, v0.h[0]\numov w10, v0.h[2]\nmul w8, w9, w8\numov w9, v0.h[3]\nmul w8, w8, w10\nmul w0, w8, w9\nret",
  "giasm": "mov d1, v0.d[1]\nmul v0.4h, v0.4h, v1.4h\numov w8, v0.h[0]\numov w9, v0.h[1]\numov w10, v0.h[2]\numov w11, v0.h[3]\nmul w8, w8, w9\nmul w9, w10, w11\nmul w0, w8, w9\nret",
  "ll": "define i16 @test(<8 x i16> %a) {\n  %r = call i16 @llvm.vector.reduce.mul(<8 x i16> %a)\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 27 for instruction:   %r = call i16 @llvm.vector.reduce.mul.v8i16(<8 x i16> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "reduce.mul",
  "ty": "<16 x i16>",
  "variant": "reduce",
  "codesize": 44,
  "thru": 44,
  "lat": 44,
  "sizelat": 44,
  "size": 10,
  "gisize": 12,
  "extrasize": 0,
  "asm": "mul v0.8h, v0.8h, v1.8h\next v1.16b, v0.16b, v0.16b, #8\nmul v0.4h, v0.4h, v1.4h\numov w8, v0.h[1]\numov w9, v0.h[0]\numov w10, v0.h[2]\nmul w8, w9, w8\numov w9, v0.h[3]\nmul w8, w8, w10\nmul w0, w8, w9\nret",
  "giasm": "mov d2, v0.d[1]\nmov d3, v1.d[1]\nmul v0.4h, v0.4h, v2.4h\nmul v1.4h, v1.4h, v3.4h\nmul v0.4h, v0.4h, v1.4h\numov w8, v0.h[0]\numov w9, v0.h[1]\numov w10, v0.h[2]\numov w11, v0.h[3]\nmul w8, w8, w9\nmul w9, w10, w11\nmul w0, w8, w9\nret",
  "ll": "define i16 @test(<16 x i16> %a) {\n  %r = call i16 @llvm.vector.reduce.mul(<16 x i16> %a)\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 44 for instruction:   %r = call i16 @llvm.vector.reduce.mul.v16i16(<16 x i16> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "reduce.mul",
  "ty": "<2 x i32>",
  "variant": "reduce",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "mov w8, v0.s[1]\nfmov w9, s0\nmul w0, w9, w8\nret",
  "giasm": "mov w8, v0.s[1]\nfmov w9, s0\nmul w0, w9, w8\nret",
  "ll": "define i32 @test(<2 x i32> %a) {\n  %r = call i32 @llvm.vector.reduce.mul(<2 x i32> %a)\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call i32 @llvm.vector.reduce.mul.v2i32(<2 x i32> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "reduce.mul",
  "ty": "<4 x i32>",
  "variant": "reduce",
  "codesize": 8,
  "thru": 8,
  "lat": 8,
  "sizelat": 8,
  "size": 5,
  "gisize": 5,
  "extrasize": 0,
  "asm": "ext v1.16b, v0.16b, v0.16b, #8\nmul v0.2s, v0.2s, v1.2s\nmov w8, v0.s[1]\nfmov w9, s0\nmul w0, w9, w8\nret",
  "giasm": "mov d1, v0.d[1]\nmul v0.2s, v0.2s, v1.2s\nmov w8, v0.s[1]\nfmov w9, s0\nmul w0, w9, w8\nret",
  "ll": "define i32 @test(<4 x i32> %a) {\n  %r = call i32 @llvm.vector.reduce.mul(<4 x i32> %a)\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 8 for instruction:   %r = call i32 @llvm.vector.reduce.mul.v4i32(<4 x i32> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "reduce.mul",
  "ty": "<8 x i32>",
  "variant": "reduce",
  "codesize": 15,
  "thru": 15,
  "lat": 15,
  "sizelat": 15,
  "size": 6,
  "gisize": 8,
  "extrasize": 0,
  "asm": "mul v0.4s, v0.4s, v1.4s\next v1.16b, v0.16b, v0.16b, #8\nmul v0.2s, v0.2s, v1.2s\nmov w8, v0.s[1]\nfmov w9, s0\nmul w0, w9, w8\nret",
  "giasm": "mov d2, v0.d[1]\nmov d3, v1.d[1]\nmul v0.2s, v0.2s, v2.2s\nmul v1.2s, v1.2s, v3.2s\nmul v0.2s, v0.2s, v1.2s\nmov w8, v0.s[1]\nfmov w9, s0\nmul w0, w9, w8\nret",
  "ll": "define i32 @test(<8 x i32> %a) {\n  %r = call i32 @llvm.vector.reduce.mul(<8 x i32> %a)\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 15 for instruction:   %r = call i32 @llvm.vector.reduce.mul.v8i32(<8 x i32> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "reduce.mul",
  "ty": "<2 x i64>",
  "variant": "reduce",
  "codesize": 2,
  "thru": 15,
  "lat": 2,
  "sizelat": 2,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "mov x8, v0.d[1]\nfmov x9, d0\nmul x0, x9, x8\nret",
  "giasm": "mov x8, v0.d[1]\nfmov x9, d0\nmul x0, x9, x8\nret",
  "ll": "define i64 @test(<2 x i64> %a) {\n  %r = call i64 @llvm.vector.reduce.mul(<2 x i64> %a)\n  ret i64 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call i64 @llvm.vector.reduce.mul.v2i64(<2 x i64> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i64 %r"
 },
 {
  "instr": "reduce.mul",
  "ty": "<4 x i64>",
  "variant": "reduce",
  "codesize": 5,
  "thru": 31,
  "lat": 5,
  "sizelat": 5,
  "size": 7,
  "gisize": 7,
  "extrasize": 0,
  "asm": "mov x8, v1.d[1]\nmov x9, v0.d[1]\nfmov x10, d0\nmul x8, x9, x8\nfmov x9, d1\nmul x9, x10, x9\nmul x0, x9, x8\nret",
  "giasm": "mov x8, v0.d[1]\nfmov x10, d0\nmov x9, v1.d[1]\nmul x8, x10, x8\nfmov x10, d1\nmul x9, x10, x9\nmul x0, x8, x9\nret",
  "ll": "define i64 @test(<4 x i64> %a) {\n  %r = call i64 @llvm.vector.reduce.mul(<4 x i64> %a)\n  ret i64 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 5 for instruction:   %r = call i64 @llvm.vector.reduce.mul.v4i64(<4 x i64> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i64 %r"
 },
 {
  "instr": "reduce.and",
  "ty": "<8 x i8>",
  "variant": "reduce",
  "codesize": 15,
  "thru": 15,
  "lat": 15,
  "sizelat": 15,
  "size": 5,
  "gisize": 15,
  "extrasize": 0,
  "asm": "fmov x8, d0\nand x8, x8, x8, lsr #32\nand x8, x8, x8, lsr #16\nlsr x9, x8, #8\nand w0, w8, w9\nret",
  "giasm": "umov w8, v0.b[0]\numov w9, v0.b[1]\numov w10, v0.b[2]\numov w11, v0.b[3]\numov w12, v0.b[4]\numov w13, v0.b[5]\numov w14, v0.b[6]\numov w15, v0.b[7]\nand w8, w8, w9\nand w9, w10, w11\nand w10, w12, w13\nand w11, w14, w15\nand w8, w8, w9\nand w9, w10, w11\nand w0, w8, w9\nret",
  "ll": "define i8 @test(<8 x i8> %a) {\n  %r = call i8 @llvm.vector.reduce.and(<8 x i8> %a)\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 15 for instruction:   %r = call i8 @llvm.vector.reduce.and.v8i8(<8 x i8> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "reduce.and",
  "ty": "<16 x i8>",
  "variant": "reduce",
  "codesize": 17,
  "thru": 17,
  "lat": 17,
  "sizelat": 17,
  "size": 7,
  "gisize": 17,
  "extrasize": 0,
  "asm": "ext v1.16b, v0.16b, v0.16b, #8\nand v0.8b, v0.8b, v1.8b\nfmov x8, d0\nand x8, x8, x8, lsr #32\nand x8, x8, x8, lsr #16\nlsr x9, x8, #8\nand w0, w8, w9\nret",
  "giasm": "mov d1, v0.d[1]\nand v0.8b, v0.8b, v1.8b\numov w8, v0.b[0]\numov w9, v0.b[1]\numov w10, v0.b[2]\numov w11, v0.b[3]\numov w12, v0.b[4]\numov w13, v0.b[5]\numov w14, v0.b[6]\numov w15, v0.b[7]\nand w8, w8, w9\nand w9, w10, w11\nand w10, w12, w13\nand w11, w14, w15\nand w8, w8, w9\nand w9, w10, w11\nand w0, w8, w9\nret",
  "ll": "define i8 @test(<16 x i8> %a) {\n  %r = call i8 @llvm.vector.reduce.and(<16 x i8> %a)\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 17 for instruction:   %r = call i8 @llvm.vector.reduce.and.v16i8(<16 x i8> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "reduce.and",
  "ty": "<32 x i8>",
  "variant": "reduce",
  "codesize": 18,
  "thru": 18,
  "lat": 18,
  "sizelat": 18,
  "size": 8,
  "gisize": 18,
  "extrasize": 0,
  "asm": "and v0.16b, v0.16b, v1.16b\next v1.16b, v0.16b, v0.16b, #8\nand v0.8b, v0.8b, v1.8b\nfmov x8, d0\nand x8, x8, x8, lsr #32\nand x8, x8, x8, lsr #16\nlsr x9, x8, #8\nand w0, w8, w9\nret",
  "giasm": "and v0.16b, v0.16b, v1.16b\nmov d1, v0.d[1]\nand v0.8b, v0.8b, v1.8b\numov w8, v0.b[0]\numov w9, v0.b[1]\numov w10, v0.b[2]\numov w11, v0.b[3]\numov w12, v0.b[4]\numov w13, v0.b[5]\numov w14, v0.b[6]\numov w15, v0.b[7]\nand w8, w8, w9\nand w9, w10, w11\nand w10, w12, w13\nand w11, w14, w15\nand w8, w8, w9\nand w9, w10, w11\nand w0, w8, w9\nret",
  "ll": "define i8 @test(<32 x i8> %a) {\n  %r = call i8 @llvm.vector.reduce.and(<32 x i8> %a)\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 18 for instruction:   %r = call i8 @llvm.vector.reduce.and.v32i8(<32 x i8> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "reduce.and",
  "ty": "<4 x i16>",
  "variant": "reduce",
  "codesize": 7,
  "thru": 7,
  "lat": 7,
  "sizelat": 7,
  "size": 4,
  "gisize": 7,
  "extrasize": 0,
  "asm": "fmov x8, d0\nand x8, x8, x8, lsr #32\nlsr x9, x8, #16\nand w0, w8, w9\nret",
  "giasm": "umov w8, v0.h[0]\numov w9, v0.h[1]\numov w10, v0.h[2]\numov w11, v0.h[3]\nand w8, w8, w9\nand w9, w10, w11\nand w0, w8, w9\nret",
  "ll": "define i16 @test(<4 x i16> %a) {\n  %r = call i16 @llvm.vector.reduce.and(<4 x i16> %a)\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 7 for instruction:   %r = call i16 @llvm.vector.reduce.and.v4i16(<4 x i16> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "reduce.and",
  "ty": "<8 x i16>",
  "variant": "reduce",
  "codesize": 9,
  "thru": 9,
  "lat": 9,
  "sizelat": 9,
  "size": 6,
  "gisize": 9,
  "extrasize": 0,
  "asm": "ext v1.16b, v0.16b, v0.16b, #8\nand v0.8b, v0.8b, v1.8b\nfmov x8, d0\nand x8, x8, x8, lsr #32\nlsr x9, x8, #16\nand w0, w8, w9\nret",
  "giasm": "mov d1, v0.d[1]\nand v0.8b, v0.8b, v1.8b\numov w8, v0.h[0]\numov w9, v0.h[1]\numov w10, v0.h[2]\numov w11, v0.h[3]\nand w8, w8, w9\nand w9, w10, w11\nand w0, w8, w9\nret",
  "ll": "define i16 @test(<8 x i16> %a) {\n  %r = call i16 @llvm.vector.reduce.and(<8 x i16> %a)\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 9 for instruction:   %r = call i16 @llvm.vector.reduce.and.v8i16(<8 x i16> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "reduce.and",
  "ty": "<16 x i16>",
  "variant": "reduce",
  "codesize": 10,
  "thru": 10,
  "lat": 10,
  "sizelat": 10,
  "size": 7,
  "gisize": 10,
  "extrasize": 0,
  "asm": "and v0.16b, v0.16b, v1.16b\next v1.16b, v0.16b, v0.16b, #8\nand v0.8b, v0.8b, v1.8b\nfmov x8, d0\nand x8, x8, x8, lsr #32\nlsr x9, x8, #16\nand w0, w8, w9\nret",
  "giasm": "and v0.16b, v0.16b, v1.16b\nmov d1, v0.d[1]\nand v0.8b, v0.8b, v1.8b\numov w8, v0.h[0]\numov w9, v0.h[1]\numov w10, v0.h[2]\numov w11, v0.h[3]\nand w8, w8, w9\nand w9, w10, w11\nand w0, w8, w9\nret",
  "ll": "define i16 @test(<16 x i16> %a) {\n  %r = call i16 @llvm.vector.reduce.and(<16 x i16> %a)\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 10 for instruction:   %r = call i16 @llvm.vector.reduce.and.v16i16(<16 x i16> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "reduce.and",
  "ty": "<2 x i32>",
  "variant": "reduce",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fmov x8, d0\nlsr x9, x8, #32\nand w0, w8, w9\nret",
  "giasm": "mov w8, v0.s[1]\nfmov w9, s0\nand w0, w9, w8\nret",
  "ll": "define i32 @test(<2 x i32> %a) {\n  %r = call i32 @llvm.vector.reduce.and(<2 x i32> %a)\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 3 for instruction:   %r = call i32 @llvm.vector.reduce.and.v2i32(<2 x i32> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "reduce.and",
  "ty": "<4 x i32>",
  "variant": "reduce",
  "codesize": 5,
  "thru": 5,
  "lat": 5,
  "sizelat": 5,
  "size": 5,
  "gisize": 5,
  "extrasize": 0,
  "asm": "ext v1.16b, v0.16b, v0.16b, #8\nand v0.8b, v0.8b, v1.8b\nfmov x8, d0\nlsr x9, x8, #32\nand w0, w8, w9\nret",
  "giasm": "mov d1, v0.d[1]\nand v0.8b, v0.8b, v1.8b\nmov w8, v0.s[1]\nfmov w9, s0\nand w0, w9, w8\nret",
  "ll": "define i32 @test(<4 x i32> %a) {\n  %r = call i32 @llvm.vector.reduce.and(<4 x i32> %a)\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 5 for instruction:   %r = call i32 @llvm.vector.reduce.and.v4i32(<4 x i32> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "reduce.and",
  "ty": "<8 x i32>",
  "variant": "reduce",
  "codesize": 6,
  "thru": 6,
  "lat": 6,
  "sizelat": 6,
  "size": 6,
  "gisize": 6,
  "extrasize": 0,
  "asm": "and v0.16b, v0.16b, v1.16b\next v1.16b, v0.16b, v0.16b, #8\nand v0.8b, v0.8b, v1.8b\nfmov x8, d0\nlsr x9, x8, #32\nand w0, w8, w9\nret",
  "giasm": "and v0.16b, v0.16b, v1.16b\nmov d1, v0.d[1]\nand v0.8b, v0.8b, v1.8b\nmov w8, v0.s[1]\nfmov w9, s0\nand w0, w9, w8\nret",
  "ll": "define i32 @test(<8 x i32> %a) {\n  %r = call i32 @llvm.vector.reduce.and(<8 x i32> %a)\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 6 for instruction:   %r = call i32 @llvm.vector.reduce.and.v8i32(<8 x i32> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "reduce.and",
  "ty": "<2 x i64>",
  "variant": "reduce",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "ext v1.16b, v0.16b, v0.16b, #8\nand v0.8b, v0.8b, v1.8b\nfmov x0, d0\nret",
  "giasm": "mov x8, v0.d[1]\nfmov x9, d0\nand x0, x9, x8\nret",
  "ll": "define i64 @test(<2 x i64> %a) {\n  %r = call i64 @llvm.vector.reduce.and(<2 x i64> %a)\n  ret i64 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 3 for instruction:   %r = call i64 @llvm.vector.reduce.and.v2i64(<2 x i64> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i64 %r"
 },
 {
  "instr": "reduce.and",
  "ty": "<4 x i64>",
  "variant": "reduce",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "and v0.16b, v0.16b, v1.16b\next v1.16b, v0.16b, v0.16b, #8\nand v0.8b, v0.8b, v1.8b\nfmov x0, d0\nret",
  "giasm": "and v0.16b, v0.16b, v1.16b\nmov x8, v0.d[1]\nfmov x9, d0\nand x0, x9, x8\nret",
  "ll": "define i64 @test(<4 x i64> %a) {\n  %r = call i64 @llvm.vector.reduce.and(<4 x i64> %a)\n  ret i64 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call i64 @llvm.vector.reduce.and.v4i64(<4 x i64> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i64 %r"
 },
 {
  "instr": "reduce.or",
  "ty": "<8 x i8>",
  "variant": "reduce",
  "codesize": 15,
  "thru": 15,
  "lat": 15,
  "sizelat": 15,
  "size": 5,
  "gisize": 15,
  "extrasize": 0,
  "asm": "fmov x8, d0\norr x8, x8, x8, lsr #32\norr x8, x8, x8, lsr #16\nlsr x9, x8, #8\norr w0, w8, w9\nret",
  "giasm": "umov w8, v0.b[0]\numov w9, v0.b[1]\numov w10, v0.b[2]\numov w11, v0.b[3]\numov w12, v0.b[4]\numov w13, v0.b[5]\numov w14, v0.b[6]\numov w15, v0.b[7]\norr w8, w8, w9\norr w9, w10, w11\norr w10, w12, w13\norr w11, w14, w15\norr w8, w8, w9\norr w9, w10, w11\norr w0, w8, w9\nret",
  "ll": "define i8 @test(<8 x i8> %a) {\n  %r = call i8 @llvm.vector.reduce.or(<8 x i8> %a)\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 15 for instruction:   %r = call i8 @llvm.vector.reduce.or.v8i8(<8 x i8> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "reduce.or",
  "ty": "<16 x i8>",
  "variant": "reduce",
  "codesize": 17,
  "thru": 17,
  "lat": 17,
  "sizelat": 17,
  "size": 7,
  "gisize": 17,
  "extrasize": 0,
  "asm": "ext v1.16b, v0.16b, v0.16b, #8\norr v0.8b, v0.8b, v1.8b\nfmov x8, d0\norr x8, x8, x8, lsr #32\norr x8, x8, x8, lsr #16\nlsr x9, x8, #8\norr w0, w8, w9\nret",
  "giasm": "mov d1, v0.d[1]\norr v0.8b, v0.8b, v1.8b\numov w8, v0.b[0]\numov w9, v0.b[1]\numov w10, v0.b[2]\numov w11, v0.b[3]\numov w12, v0.b[4]\numov w13, v0.b[5]\numov w14, v0.b[6]\numov w15, v0.b[7]\norr w8, w8, w9\norr w9, w10, w11\norr w10, w12, w13\norr w11, w14, w15\norr w8, w8, w9\norr w9, w10, w11\norr w0, w8, w9\nret",
  "ll": "define i8 @test(<16 x i8> %a) {\n  %r = call i8 @llvm.vector.reduce.or(<16 x i8> %a)\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 17 for instruction:   %r = call i8 @llvm.vector.reduce.or.v16i8(<16 x i8> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "reduce.or",
  "ty": "<32 x i8>",
  "variant": "reduce",
  "codesize": 18,
  "thru": 18,
  "lat": 18,
  "sizelat": 18,
  "size": 8,
  "gisize": 18,
  "extrasize": 0,
  "asm": "orr v0.16b, v0.16b, v1.16b\next v1.16b, v0.16b, v0.16b, #8\norr v0.8b, v0.8b, v1.8b\nfmov x8, d0\norr x8, x8, x8, lsr #32\norr x8, x8, x8, lsr #16\nlsr x9, x8, #8\norr w0, w8, w9\nret",
  "giasm": "orr v0.16b, v0.16b, v1.16b\nmov d1, v0.d[1]\norr v0.8b, v0.8b, v1.8b\numov w8, v0.b[0]\numov w9, v0.b[1]\numov w10, v0.b[2]\numov w11, v0.b[3]\numov w12, v0.b[4]\numov w13, v0.b[5]\numov w14, v0.b[6]\numov w15, v0.b[7]\norr w8, w8, w9\norr w9, w10, w11\norr w10, w12, w13\norr w11, w14, w15\norr w8, w8, w9\norr w9, w10, w11\norr w0, w8, w9\nret",
  "ll": "define i8 @test(<32 x i8> %a) {\n  %r = call i8 @llvm.vector.reduce.or(<32 x i8> %a)\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 18 for instruction:   %r = call i8 @llvm.vector.reduce.or.v32i8(<32 x i8> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "reduce.or",
  "ty": "<4 x i16>",
  "variant": "reduce",
  "codesize": 7,
  "thru": 7,
  "lat": 7,
  "sizelat": 7,
  "size": 4,
  "gisize": 7,
  "extrasize": 0,
  "asm": "fmov x8, d0\norr x8, x8, x8, lsr #32\nlsr x9, x8, #16\norr w0, w8, w9\nret",
  "giasm": "umov w8, v0.h[0]\numov w9, v0.h[1]\numov w10, v0.h[2]\numov w11, v0.h[3]\norr w8, w8, w9\norr w9, w10, w11\norr w0, w8, w9\nret",
  "ll": "define i16 @test(<4 x i16> %a) {\n  %r = call i16 @llvm.vector.reduce.or(<4 x i16> %a)\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 7 for instruction:   %r = call i16 @llvm.vector.reduce.or.v4i16(<4 x i16> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "reduce.or",
  "ty": "<8 x i16>",
  "variant": "reduce",
  "codesize": 9,
  "thru": 9,
  "lat": 9,
  "sizelat": 9,
  "size": 6,
  "gisize": 9,
  "extrasize": 0,
  "asm": "ext v1.16b, v0.16b, v0.16b, #8\norr v0.8b, v0.8b, v1.8b\nfmov x8, d0\norr x8, x8, x8, lsr #32\nlsr x9, x8, #16\norr w0, w8, w9\nret",
  "giasm": "mov d1, v0.d[1]\norr v0.8b, v0.8b, v1.8b\numov w8, v0.h[0]\numov w9, v0.h[1]\numov w10, v0.h[2]\numov w11, v0.h[3]\norr w8, w8, w9\norr w9, w10, w11\norr w0, w8, w9\nret",
  "ll": "define i16 @test(<8 x i16> %a) {\n  %r = call i16 @llvm.vector.reduce.or(<8 x i16> %a)\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 9 for instruction:   %r = call i16 @llvm.vector.reduce.or.v8i16(<8 x i16> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "reduce.or",
  "ty": "<16 x i16>",
  "variant": "reduce",
  "codesize": 10,
  "thru": 10,
  "lat": 10,
  "sizelat": 10,
  "size": 7,
  "gisize": 10,
  "extrasize": 0,
  "asm": "orr v0.16b, v0.16b, v1.16b\next v1.16b, v0.16b, v0.16b, #8\norr v0.8b, v0.8b, v1.8b\nfmov x8, d0\norr x8, x8, x8, lsr #32\nlsr x9, x8, #16\norr w0, w8, w9\nret",
  "giasm": "orr v0.16b, v0.16b, v1.16b\nmov d1, v0.d[1]\norr v0.8b, v0.8b, v1.8b\numov w8, v0.h[0]\numov w9, v0.h[1]\numov w10, v0.h[2]\numov w11, v0.h[3]\norr w8, w8, w9\norr w9, w10, w11\norr w0, w8, w9\nret",
  "ll": "define i16 @test(<16 x i16> %a) {\n  %r = call i16 @llvm.vector.reduce.or(<16 x i16> %a)\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 10 for instruction:   %r = call i16 @llvm.vector.reduce.or.v16i16(<16 x i16> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "reduce.or",
  "ty": "<2 x i32>",
  "variant": "reduce",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fmov x8, d0\nlsr x9, x8, #32\norr w0, w8, w9\nret",
  "giasm": "mov w8, v0.s[1]\nfmov w9, s0\norr w0, w9, w8\nret",
  "ll": "define i32 @test(<2 x i32> %a) {\n  %r = call i32 @llvm.vector.reduce.or(<2 x i32> %a)\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 3 for instruction:   %r = call i32 @llvm.vector.reduce.or.v2i32(<2 x i32> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "reduce.or",
  "ty": "<4 x i32>",
  "variant": "reduce",
  "codesize": 5,
  "thru": 5,
  "lat": 5,
  "sizelat": 5,
  "size": 5,
  "gisize": 5,
  "extrasize": 0,
  "asm": "ext v1.16b, v0.16b, v0.16b, #8\norr v0.8b, v0.8b, v1.8b\nfmov x8, d0\nlsr x9, x8, #32\norr w0, w8, w9\nret",
  "giasm": "mov d1, v0.d[1]\norr v0.8b, v0.8b, v1.8b\nmov w8, v0.s[1]\nfmov w9, s0\norr w0, w9, w8\nret",
  "ll": "define i32 @test(<4 x i32> %a) {\n  %r = call i32 @llvm.vector.reduce.or(<4 x i32> %a)\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 5 for instruction:   %r = call i32 @llvm.vector.reduce.or.v4i32(<4 x i32> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "reduce.or",
  "ty": "<8 x i32>",
  "variant": "reduce",
  "codesize": 6,
  "thru": 6,
  "lat": 6,
  "sizelat": 6,
  "size": 6,
  "gisize": 6,
  "extrasize": 0,
  "asm": "orr v0.16b, v0.16b, v1.16b\next v1.16b, v0.16b, v0.16b, #8\norr v0.8b, v0.8b, v1.8b\nfmov x8, d0\nlsr x9, x8, #32\norr w0, w8, w9\nret",
  "giasm": "orr v0.16b, v0.16b, v1.16b\nmov d1, v0.d[1]\norr v0.8b, v0.8b, v1.8b\nmov w8, v0.s[1]\nfmov w9, s0\norr w0, w9, w8\nret",
  "ll": "define i32 @test(<8 x i32> %a) {\n  %r = call i32 @llvm.vector.reduce.or(<8 x i32> %a)\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 6 for instruction:   %r = call i32 @llvm.vector.reduce.or.v8i32(<8 x i32> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "reduce.or",
  "ty": "<2 x i64>",
  "variant": "reduce",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "ext v1.16b, v0.16b, v0.16b, #8\norr v0.8b, v0.8b, v1.8b\nfmov x0, d0\nret",
  "giasm": "mov x8, v0.d[1]\nfmov x9, d0\norr x0, x9, x8\nret",
  "ll": "define i64 @test(<2 x i64> %a) {\n  %r = call i64 @llvm.vector.reduce.or(<2 x i64> %a)\n  ret i64 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 3 for instruction:   %r = call i64 @llvm.vector.reduce.or.v2i64(<2 x i64> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i64 %r"
 },
 {
  "instr": "reduce.or",
  "ty": "<4 x i64>",
  "variant": "reduce",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "orr v0.16b, v0.16b, v1.16b\next v1.16b, v0.16b, v0.16b, #8\norr v0.8b, v0.8b, v1.8b\nfmov x0, d0\nret",
  "giasm": "orr v0.16b, v0.16b, v1.16b\nmov x8, v0.d[1]\nfmov x9, d0\norr x0, x9, x8\nret",
  "ll": "define i64 @test(<4 x i64> %a) {\n  %r = call i64 @llvm.vector.reduce.or(<4 x i64> %a)\n  ret i64 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call i64 @llvm.vector.reduce.or.v4i64(<4 x i64> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i64 %r"
 },
 {
  "instr": "reduce.xor",
  "ty": "<8 x i8>",
  "variant": "reduce",
  "codesize": 15,
  "thru": 15,
  "lat": 15,
  "sizelat": 15,
  "size": 5,
  "gisize": 15,
  "extrasize": 0,
  "asm": "fmov x8, d0\neor x8, x8, x8, lsr #32\neor x8, x8, x8, lsr #16\nlsr x9, x8, #8\neor w0, w8, w9\nret",
  "giasm": "umov w8, v0.b[0]\numov w9, v0.b[1]\numov w10, v0.b[2]\numov w11, v0.b[3]\numov w12, v0.b[4]\numov w13, v0.b[5]\numov w14, v0.b[6]\numov w15, v0.b[7]\neor w8, w8, w9\neor w9, w10, w11\neor w10, w12, w13\neor w11, w14, w15\neor w8, w8, w9\neor w9, w10, w11\neor w0, w8, w9\nret",
  "ll": "define i8 @test(<8 x i8> %a) {\n  %r = call i8 @llvm.vector.reduce.xor(<8 x i8> %a)\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 15 for instruction:   %r = call i8 @llvm.vector.reduce.xor.v8i8(<8 x i8> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "reduce.xor",
  "ty": "<16 x i8>",
  "variant": "reduce",
  "codesize": 17,
  "thru": 17,
  "lat": 17,
  "sizelat": 17,
  "size": 7,
  "gisize": 17,
  "extrasize": 0,
  "asm": "ext v1.16b, v0.16b, v0.16b, #8\neor v0.8b, v0.8b, v1.8b\nfmov x8, d0\neor x8, x8, x8, lsr #32\neor x8, x8, x8, lsr #16\nlsr x9, x8, #8\neor w0, w8, w9\nret",
  "giasm": "mov d1, v0.d[1]\neor v0.8b, v0.8b, v1.8b\numov w8, v0.b[0]\numov w9, v0.b[1]\numov w10, v0.b[2]\numov w11, v0.b[3]\numov w12, v0.b[4]\numov w13, v0.b[5]\numov w14, v0.b[6]\numov w15, v0.b[7]\neor w8, w8, w9\neor w9, w10, w11\neor w10, w12, w13\neor w11, w14, w15\neor w8, w8, w9\neor w9, w10, w11\neor w0, w8, w9\nret",
  "ll": "define i8 @test(<16 x i8> %a) {\n  %r = call i8 @llvm.vector.reduce.xor(<16 x i8> %a)\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 17 for instruction:   %r = call i8 @llvm.vector.reduce.xor.v16i8(<16 x i8> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "reduce.xor",
  "ty": "<32 x i8>",
  "variant": "reduce",
  "codesize": 18,
  "thru": 18,
  "lat": 18,
  "sizelat": 18,
  "size": 8,
  "gisize": 18,
  "extrasize": 0,
  "asm": "eor v0.16b, v0.16b, v1.16b\next v1.16b, v0.16b, v0.16b, #8\neor v0.8b, v0.8b, v1.8b\nfmov x8, d0\neor x8, x8, x8, lsr #32\neor x8, x8, x8, lsr #16\nlsr x9, x8, #8\neor w0, w8, w9\nret",
  "giasm": "eor v0.16b, v0.16b, v1.16b\nmov d1, v0.d[1]\neor v0.8b, v0.8b, v1.8b\numov w8, v0.b[0]\numov w9, v0.b[1]\numov w10, v0.b[2]\numov w11, v0.b[3]\numov w12, v0.b[4]\numov w13, v0.b[5]\numov w14, v0.b[6]\numov w15, v0.b[7]\neor w8, w8, w9\neor w9, w10, w11\neor w10, w12, w13\neor w11, w14, w15\neor w8, w8, w9\neor w9, w10, w11\neor w0, w8, w9\nret",
  "ll": "define i8 @test(<32 x i8> %a) {\n  %r = call i8 @llvm.vector.reduce.xor(<32 x i8> %a)\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 18 for instruction:   %r = call i8 @llvm.vector.reduce.xor.v32i8(<32 x i8> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "reduce.xor",
  "ty": "<4 x i16>",
  "variant": "reduce",
  "codesize": 7,
  "thru": 7,
  "lat": 7,
  "sizelat": 7,
  "size": 4,
  "gisize": 7,
  "extrasize": 0,
  "asm": "fmov x8, d0\neor x8, x8, x8, lsr #32\nlsr x9, x8, #16\neor w0, w8, w9\nret",
  "giasm": "umov w8, v0.h[0]\numov w9, v0.h[1]\numov w10, v0.h[2]\numov w11, v0.h[3]\neor w8, w8, w9\neor w9, w10, w11\neor w0, w8, w9\nret",
  "ll": "define i16 @test(<4 x i16> %a) {\n  %r = call i16 @llvm.vector.reduce.xor(<4 x i16> %a)\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 7 for instruction:   %r = call i16 @llvm.vector.reduce.xor.v4i16(<4 x i16> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "reduce.xor",
  "ty": "<8 x i16>",
  "variant": "reduce",
  "codesize": 9,
  "thru": 9,
  "lat": 9,
  "sizelat": 9,
  "size": 6,
  "gisize": 9,
  "extrasize": 0,
  "asm": "ext v1.16b, v0.16b, v0.16b, #8\neor v0.8b, v0.8b, v1.8b\nfmov x8, d0\neor x8, x8, x8, lsr #32\nlsr x9, x8, #16\neor w0, w8, w9\nret",
  "giasm": "mov d1, v0.d[1]\neor v0.8b, v0.8b, v1.8b\numov w8, v0.h[0]\numov w9, v0.h[1]\numov w10, v0.h[2]\numov w11, v0.h[3]\neor w8, w8, w9\neor w9, w10, w11\neor w0, w8, w9\nret",
  "ll": "define i16 @test(<8 x i16> %a) {\n  %r = call i16 @llvm.vector.reduce.xor(<8 x i16> %a)\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 9 for instruction:   %r = call i16 @llvm.vector.reduce.xor.v8i16(<8 x i16> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "reduce.xor",
  "ty": "<16 x i16>",
  "variant": "reduce",
  "codesize": 10,
  "thru": 10,
  "lat": 10,
  "sizelat": 10,
  "size": 7,
  "gisize": 10,
  "extrasize": 0,
  "asm": "eor v0.16b, v0.16b, v1.16b\next v1.16b, v0.16b, v0.16b, #8\neor v0.8b, v0.8b, v1.8b\nfmov x8, d0\neor x8, x8, x8, lsr #32\nlsr x9, x8, #16\neor w0, w8, w9\nret",
  "giasm": "eor v0.16b, v0.16b, v1.16b\nmov d1, v0.d[1]\neor v0.8b, v0.8b, v1.8b\numov w8, v0.h[0]\numov w9, v0.h[1]\numov w10, v0.h[2]\numov w11, v0.h[3]\neor w8, w8, w9\neor w9, w10, w11\neor w0, w8, w9\nret",
  "ll": "define i16 @test(<16 x i16> %a) {\n  %r = call i16 @llvm.vector.reduce.xor(<16 x i16> %a)\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 10 for instruction:   %r = call i16 @llvm.vector.reduce.xor.v16i16(<16 x i16> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "reduce.xor",
  "ty": "<2 x i32>",
  "variant": "reduce",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fmov x8, d0\nlsr x9, x8, #32\neor w0, w8, w9\nret",
  "giasm": "mov w8, v0.s[1]\nfmov w9, s0\neor w0, w9, w8\nret",
  "ll": "define i32 @test(<2 x i32> %a) {\n  %r = call i32 @llvm.vector.reduce.xor(<2 x i32> %a)\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 3 for instruction:   %r = call i32 @llvm.vector.reduce.xor.v2i32(<2 x i32> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "reduce.xor",
  "ty": "<4 x i32>",
  "variant": "reduce",
  "codesize": 5,
  "thru": 5,
  "lat": 5,
  "sizelat": 5,
  "size": 5,
  "gisize": 5,
  "extrasize": 0,
  "asm": "ext v1.16b, v0.16b, v0.16b, #8\neor v0.8b, v0.8b, v1.8b\nfmov x8, d0\nlsr x9, x8, #32\neor w0, w8, w9\nret",
  "giasm": "mov d1, v0.d[1]\neor v0.8b, v0.8b, v1.8b\nmov w8, v0.s[1]\nfmov w9, s0\neor w0, w9, w8\nret",
  "ll": "define i32 @test(<4 x i32> %a) {\n  %r = call i32 @llvm.vector.reduce.xor(<4 x i32> %a)\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 5 for instruction:   %r = call i32 @llvm.vector.reduce.xor.v4i32(<4 x i32> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "reduce.xor",
  "ty": "<8 x i32>",
  "variant": "reduce",
  "codesize": 6,
  "thru": 6,
  "lat": 6,
  "sizelat": 6,
  "size": 6,
  "gisize": 6,
  "extrasize": 0,
  "asm": "eor v0.16b, v0.16b, v1.16b\next v1.16b, v0.16b, v0.16b, #8\neor v0.8b, v0.8b, v1.8b\nfmov x8, d0\nlsr x9, x8, #32\neor w0, w8, w9\nret",
  "giasm": "eor v0.16b, v0.16b, v1.16b\nmov d1, v0.d[1]\neor v0.8b, v0.8b, v1.8b\nmov w8, v0.s[1]\nfmov w9, s0\neor w0, w9, w8\nret",
  "ll": "define i32 @test(<8 x i32> %a) {\n  %r = call i32 @llvm.vector.reduce.xor(<8 x i32> %a)\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 6 for instruction:   %r = call i32 @llvm.vector.reduce.xor.v8i32(<8 x i32> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "reduce.xor",
  "ty": "<2 x i64>",
  "variant": "reduce",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "ext v1.16b, v0.16b, v0.16b, #8\neor v0.8b, v0.8b, v1.8b\nfmov x0, d0\nret",
  "giasm": "mov x8, v0.d[1]\nfmov x9, d0\neor x0, x9, x8\nret",
  "ll": "define i64 @test(<2 x i64> %a) {\n  %r = call i64 @llvm.vector.reduce.xor(<2 x i64> %a)\n  ret i64 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 3 for instruction:   %r = call i64 @llvm.vector.reduce.xor.v2i64(<2 x i64> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i64 %r"
 },
 {
  "instr": "reduce.xor",
  "ty": "<4 x i64>",
  "variant": "reduce",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "eor v0.16b, v0.16b, v1.16b\next v1.16b, v0.16b, v0.16b, #8\neor v0.8b, v0.8b, v1.8b\nfmov x0, d0\nret",
  "giasm": "eor v0.16b, v0.16b, v1.16b\nmov x8, v0.d[1]\nfmov x9, d0\neor x0, x9, x8\nret",
  "ll": "define i64 @test(<4 x i64> %a) {\n  %r = call i64 @llvm.vector.reduce.xor(<4 x i64> %a)\n  ret i64 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call i64 @llvm.vector.reduce.xor.v4i64(<4 x i64> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i64 %r"
 },
 {
  "instr": "reduce.smin",
  "ty": "<8 x i8>",
  "variant": "reduce",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "sminv b0, v0.8b\nfmov w0, s0\nret",
  "giasm": "sminv b0, v0.8b\nfmov w0, s0\nret",
  "ll": "define i8 @test(<8 x i8> %a) {\n  %r = call i8 @llvm.vector.reduce.smin(<8 x i8> %a)\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call i8 @llvm.vector.reduce.smin.v8i8(<8 x i8> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "reduce.smin",
  "ty": "<16 x i8>",
  "variant": "reduce",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "sminv b0, v0.16b\nfmov w0, s0\nret",
  "giasm": "sminv b0, v0.16b\nfmov w0, s0\nret",
  "ll": "define i8 @test(<16 x i8> %a) {\n  %r = call i8 @llvm.vector.reduce.smin(<16 x i8> %a)\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call i8 @llvm.vector.reduce.smin.v16i8(<16 x i8> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "reduce.smin",
  "ty": "<32 x i8>",
  "variant": "reduce",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "smin v0.16b, v0.16b, v1.16b\nsminv b0, v0.16b\nfmov w0, s0\nret",
  "giasm": "smin v0.16b, v0.16b, v1.16b\nsminv b0, v0.16b\nfmov w0, s0\nret",
  "ll": "define i8 @test(<32 x i8> %a) {\n  %r = call i8 @llvm.vector.reduce.smin(<32 x i8> %a)\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 3 for instruction:   %r = call i8 @llvm.vector.reduce.smin.v32i8(<32 x i8> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "reduce.smin",
  "ty": "<4 x i16>",
  "variant": "reduce",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "sminv h0, v0.4h\nfmov w0, s0\nret",
  "giasm": "sminv h0, v0.4h\nfmov w0, s0\nret",
  "ll": "define i16 @test(<4 x i16> %a) {\n  %r = call i16 @llvm.vector.reduce.smin(<4 x i16> %a)\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call i16 @llvm.vector.reduce.smin.v4i16(<4 x i16> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "reduce.smin",
  "ty": "<8 x i16>",
  "variant": "reduce",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "sminv h0, v0.8h\nfmov w0, s0\nret",
  "giasm": "sminv h0, v0.8h\nfmov w0, s0\nret",
  "ll": "define i16 @test(<8 x i16> %a) {\n  %r = call i16 @llvm.vector.reduce.smin(<8 x i16> %a)\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call i16 @llvm.vector.reduce.smin.v8i16(<8 x i16> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "reduce.smin",
  "ty": "<16 x i16>",
  "variant": "reduce",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "smin v0.8h, v0.8h, v1.8h\nsminv h0, v0.8h\nfmov w0, s0\nret",
  "giasm": "smin v0.8h, v0.8h, v1.8h\nsminv h0, v0.8h\nfmov w0, s0\nret",
  "ll": "define i16 @test(<16 x i16> %a) {\n  %r = call i16 @llvm.vector.reduce.smin(<16 x i16> %a)\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 3 for instruction:   %r = call i16 @llvm.vector.reduce.smin.v16i16(<16 x i16> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "reduce.smin",
  "ty": "<2 x i32>",
  "variant": "reduce",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "sminp v0.2s, v0.2s, v0.2s\nfmov w0, s0\nret",
  "giasm": "sminp v0.2s, v0.2s, v0.2s\nfmov w0, s0\nret",
  "ll": "define i32 @test(<2 x i32> %a) {\n  %r = call i32 @llvm.vector.reduce.smin(<2 x i32> %a)\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call i32 @llvm.vector.reduce.smin.v2i32(<2 x i32> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "reduce.smin",
  "ty": "<4 x i32>",
  "variant": "reduce",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "sminv s0, v0.4s\nfmov w0, s0\nret",
  "giasm": "sminv s0, v0.4s\nfmov w0, s0\nret",
  "ll": "define i32 @test(<4 x i32> %a) {\n  %r = call i32 @llvm.vector.reduce.smin(<4 x i32> %a)\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call i32 @llvm.vector.reduce.smin.v4i32(<4 x i32> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "reduce.smin",
  "ty": "<8 x i32>",
  "variant": "reduce",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "smin v0.4s, v0.4s, v1.4s\nsminv s0, v0.4s\nfmov w0, s0\nret",
  "giasm": "smin v0.4s, v0.4s, v1.4s\nsminv s0, v0.4s\nfmov w0, s0\nret",
  "ll": "define i32 @test(<8 x i32> %a) {\n  %r = call i32 @llvm.vector.reduce.smin(<8 x i32> %a)\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 3 for instruction:   %r = call i32 @llvm.vector.reduce.smin.v8i32(<8 x i32> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "reduce.smin",
  "ty": "<2 x i64>",
  "variant": "reduce",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 6,
  "extrasize": 0,
  "asm": "ext v1.16b, v0.16b, v0.16b, #8\ncmgt d2, d1, d0\nbif v0.8b, v1.8b, v2.8b\nfmov x0, d0\nret",
  "giasm": "mov d1, v0.d[1]\nfmov x8, d0\nfmov x9, d1\ncmp x8, x9\nfcsel d0, d0, d1, lt\nfmov x0, d0\nret",
  "ll": "define i64 @test(<2 x i64> %a) {\n  %r = call i64 @llvm.vector.reduce.smin(<2 x i64> %a)\n  ret i64 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call i64 @llvm.vector.reduce.smin.v2i64(<2 x i64> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i64 %r"
 },
 {
  "instr": "reduce.smin",
  "ty": "<4 x i64>",
  "variant": "reduce",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 6,
  "gisize": 8,
  "extrasize": 0,
  "asm": "cmgt v2.2d, v1.2d, v0.2d\nbif v0.16b, v1.16b, v2.16b\next v1.16b, v0.16b, v0.16b, #8\ncmgt d2, d1, d0\nbif v0.8b, v1.8b, v2.8b\nfmov x0, d0\nret",
  "giasm": "cmgt v2.2d, v1.2d, v0.2d\nbif v0.16b, v1.16b, v2.16b\nmov d1, v0.d[1]\nfmov x8, d0\nfmov x9, d1\ncmp x8, x9\nfcsel d0, d0, d1, lt\nfmov x0, d0\nret",
  "ll": "define i64 @test(<4 x i64> %a) {\n  %r = call i64 @llvm.vector.reduce.smin(<4 x i64> %a)\n  ret i64 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call i64 @llvm.vector.reduce.smin.v4i64(<4 x i64> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i64 %r"
 },
 {
  "instr": "reduce.smax",
  "ty": "<8 x i8>",
  "variant": "reduce",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "smaxv b0, v0.8b\nfmov w0, s0\nret",
  "giasm": "smaxv b0, v0.8b\nfmov w0, s0\nret",
  "ll": "define i8 @test(<8 x i8> %a) {\n  %r = call i8 @llvm.vector.reduce.smax(<8 x i8> %a)\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call i8 @llvm.vector.reduce.smax.v8i8(<8 x i8> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "reduce.smax",
  "ty": "<16 x i8>",
  "variant": "reduce",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "smaxv b0, v0.16b\nfmov w0, s0\nret",
  "giasm": "smaxv b0, v0.16b\nfmov w0, s0\nret",
  "ll": "define i8 @test(<16 x i8> %a) {\n  %r = call i8 @llvm.vector.reduce.smax(<16 x i8> %a)\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call i8 @llvm.vector.reduce.smax.v16i8(<16 x i8> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "reduce.smax",
  "ty": "<32 x i8>",
  "variant": "reduce",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "smax v0.16b, v0.16b, v1.16b\nsmaxv b0, v0.16b\nfmov w0, s0\nret",
  "giasm": "smax v0.16b, v0.16b, v1.16b\nsmaxv b0, v0.16b\nfmov w0, s0\nret",
  "ll": "define i8 @test(<32 x i8> %a) {\n  %r = call i8 @llvm.vector.reduce.smax(<32 x i8> %a)\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 3 for instruction:   %r = call i8 @llvm.vector.reduce.smax.v32i8(<32 x i8> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "reduce.smax",
  "ty": "<4 x i16>",
  "variant": "reduce",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "smaxv h0, v0.4h\nfmov w0, s0\nret",
  "giasm": "smaxv h0, v0.4h\nfmov w0, s0\nret",
  "ll": "define i16 @test(<4 x i16> %a) {\n  %r = call i16 @llvm.vector.reduce.smax(<4 x i16> %a)\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call i16 @llvm.vector.reduce.smax.v4i16(<4 x i16> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "reduce.smax",
  "ty": "<8 x i16>",
  "variant": "reduce",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "smaxv h0, v0.8h\nfmov w0, s0\nret",
  "giasm": "smaxv h0, v0.8h\nfmov w0, s0\nret",
  "ll": "define i16 @test(<8 x i16> %a) {\n  %r = call i16 @llvm.vector.reduce.smax(<8 x i16> %a)\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call i16 @llvm.vector.reduce.smax.v8i16(<8 x i16> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "reduce.smax",
  "ty": "<16 x i16>",
  "variant": "reduce",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "smax v0.8h, v0.8h, v1.8h\nsmaxv h0, v0.8h\nfmov w0, s0\nret",
  "giasm": "smax v0.8h, v0.8h, v1.8h\nsmaxv h0, v0.8h\nfmov w0, s0\nret",
  "ll": "define i16 @test(<16 x i16> %a) {\n  %r = call i16 @llvm.vector.reduce.smax(<16 x i16> %a)\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 3 for instruction:   %r = call i16 @llvm.vector.reduce.smax.v16i16(<16 x i16> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "reduce.smax",
  "ty": "<2 x i32>",
  "variant": "reduce",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "smaxp v0.2s, v0.2s, v0.2s\nfmov w0, s0\nret",
  "giasm": "smaxp v0.2s, v0.2s, v0.2s\nfmov w0, s0\nret",
  "ll": "define i32 @test(<2 x i32> %a) {\n  %r = call i32 @llvm.vector.reduce.smax(<2 x i32> %a)\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call i32 @llvm.vector.reduce.smax.v2i32(<2 x i32> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "reduce.smax",
  "ty": "<4 x i32>",
  "variant": "reduce",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "smaxv s0, v0.4s\nfmov w0, s0\nret",
  "giasm": "smaxv s0, v0.4s\nfmov w0, s0\nret",
  "ll": "define i32 @test(<4 x i32> %a) {\n  %r = call i32 @llvm.vector.reduce.smax(<4 x i32> %a)\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call i32 @llvm.vector.reduce.smax.v4i32(<4 x i32> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "reduce.smax",
  "ty": "<8 x i32>",
  "variant": "reduce",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "smax v0.4s, v0.4s, v1.4s\nsmaxv s0, v0.4s\nfmov w0, s0\nret",
  "giasm": "smax v0.4s, v0.4s, v1.4s\nsmaxv s0, v0.4s\nfmov w0, s0\nret",
  "ll": "define i32 @test(<8 x i32> %a) {\n  %r = call i32 @llvm.vector.reduce.smax(<8 x i32> %a)\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 3 for instruction:   %r = call i32 @llvm.vector.reduce.smax.v8i32(<8 x i32> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "reduce.smax",
  "ty": "<2 x i64>",
  "variant": "reduce",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 6,
  "extrasize": 0,
  "asm": "ext v1.16b, v0.16b, v0.16b, #8\ncmgt d2, d0, d1\nbif v0.8b, v1.8b, v2.8b\nfmov x0, d0\nret",
  "giasm": "mov d1, v0.d[1]\nfmov x8, d0\nfmov x9, d1\ncmp x8, x9\nfcsel d0, d0, d1, gt\nfmov x0, d0\nret",
  "ll": "define i64 @test(<2 x i64> %a) {\n  %r = call i64 @llvm.vector.reduce.smax(<2 x i64> %a)\n  ret i64 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call i64 @llvm.vector.reduce.smax.v2i64(<2 x i64> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i64 %r"
 },
 {
  "instr": "reduce.smax",
  "ty": "<4 x i64>",
  "variant": "reduce",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 6,
  "gisize": 8,
  "extrasize": 0,
  "asm": "cmgt v2.2d, v0.2d, v1.2d\nbif v0.16b, v1.16b, v2.16b\next v1.16b, v0.16b, v0.16b, #8\ncmgt d2, d0, d1\nbif v0.8b, v1.8b, v2.8b\nfmov x0, d0\nret",
  "giasm": "cmgt v2.2d, v0.2d, v1.2d\nbif v0.16b, v1.16b, v2.16b\nmov d1, v0.d[1]\nfmov x8, d0\nfmov x9, d1\ncmp x8, x9\nfcsel d0, d0, d1, gt\nfmov x0, d0\nret",
  "ll": "define i64 @test(<4 x i64> %a) {\n  %r = call i64 @llvm.vector.reduce.smax(<4 x i64> %a)\n  ret i64 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call i64 @llvm.vector.reduce.smax.v4i64(<4 x i64> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i64 %r"
 },
 {
  "instr": "reduce.umin",
  "ty": "<8 x i8>",
  "variant": "reduce",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "uminv b0, v0.8b\nfmov w0, s0\nret",
  "giasm": "uminv b0, v0.8b\nfmov w0, s0\nret",
  "ll": "define i8 @test(<8 x i8> %a) {\n  %r = call i8 @llvm.vector.reduce.umin(<8 x i8> %a)\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call i8 @llvm.vector.reduce.umin.v8i8(<8 x i8> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "reduce.umin",
  "ty": "<16 x i8>",
  "variant": "reduce",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "uminv b0, v0.16b\nfmov w0, s0\nret",
  "giasm": "uminv b0, v0.16b\nfmov w0, s0\nret",
  "ll": "define i8 @test(<16 x i8> %a) {\n  %r = call i8 @llvm.vector.reduce.umin(<16 x i8> %a)\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call i8 @llvm.vector.reduce.umin.v16i8(<16 x i8> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "reduce.umin",
  "ty": "<32 x i8>",
  "variant": "reduce",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "umin v0.16b, v0.16b, v1.16b\numinv b0, v0.16b\nfmov w0, s0\nret",
  "giasm": "umin v0.16b, v0.16b, v1.16b\numinv b0, v0.16b\nfmov w0, s0\nret",
  "ll": "define i8 @test(<32 x i8> %a) {\n  %r = call i8 @llvm.vector.reduce.umin(<32 x i8> %a)\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 3 for instruction:   %r = call i8 @llvm.vector.reduce.umin.v32i8(<32 x i8> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "reduce.umin",
  "ty": "<4 x i16>",
  "variant": "reduce",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "uminv h0, v0.4h\nfmov w0, s0\nret",
  "giasm": "uminv h0, v0.4h\nfmov w0, s0\nret",
  "ll": "define i16 @test(<4 x i16> %a) {\n  %r = call i16 @llvm.vector.reduce.umin(<4 x i16> %a)\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call i16 @llvm.vector.reduce.umin.v4i16(<4 x i16> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "reduce.umin",
  "ty": "<8 x i16>",
  "variant": "reduce",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "uminv h0, v0.8h\nfmov w0, s0\nret",
  "giasm": "uminv h0, v0.8h\nfmov w0, s0\nret",
  "ll": "define i16 @test(<8 x i16> %a) {\n  %r = call i16 @llvm.vector.reduce.umin(<8 x i16> %a)\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call i16 @llvm.vector.reduce.umin.v8i16(<8 x i16> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "reduce.umin",
  "ty": "<16 x i16>",
  "variant": "reduce",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "umin v0.8h, v0.8h, v1.8h\numinv h0, v0.8h\nfmov w0, s0\nret",
  "giasm": "umin v0.8h, v0.8h, v1.8h\numinv h0, v0.8h\nfmov w0, s0\nret",
  "ll": "define i16 @test(<16 x i16> %a) {\n  %r = call i16 @llvm.vector.reduce.umin(<16 x i16> %a)\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 3 for instruction:   %r = call i16 @llvm.vector.reduce.umin.v16i16(<16 x i16> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "reduce.umin",
  "ty": "<2 x i32>",
  "variant": "reduce",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "uminp v0.2s, v0.2s, v0.2s\nfmov w0, s0\nret",
  "giasm": "uminp v0.2s, v0.2s, v0.2s\nfmov w0, s0\nret",
  "ll": "define i32 @test(<2 x i32> %a) {\n  %r = call i32 @llvm.vector.reduce.umin(<2 x i32> %a)\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call i32 @llvm.vector.reduce.umin.v2i32(<2 x i32> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "reduce.umin",
  "ty": "<4 x i32>",
  "variant": "reduce",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "uminv s0, v0.4s\nfmov w0, s0\nret",
  "giasm": "uminv s0, v0.4s\nfmov w0, s0\nret",
  "ll": "define i32 @test(<4 x i32> %a) {\n  %r = call i32 @llvm.vector.reduce.umin(<4 x i32> %a)\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call i32 @llvm.vector.reduce.umin.v4i32(<4 x i32> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "reduce.umin",
  "ty": "<8 x i32>",
  "variant": "reduce",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "umin v0.4s, v0.4s, v1.4s\numinv s0, v0.4s\nfmov w0, s0\nret",
  "giasm": "umin v0.4s, v0.4s, v1.4s\numinv s0, v0.4s\nfmov w0, s0\nret",
  "ll": "define i32 @test(<8 x i32> %a) {\n  %r = call i32 @llvm.vector.reduce.umin(<8 x i32> %a)\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 3 for instruction:   %r = call i32 @llvm.vector.reduce.umin.v8i32(<8 x i32> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "reduce.umin",
  "ty": "<2 x i64>",
  "variant": "reduce",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 6,
  "extrasize": 0,
  "asm": "ext v1.16b, v0.16b, v0.16b, #8\ncmhi d2, d1, d0\nbif v0.8b, v1.8b, v2.8b\nfmov x0, d0\nret",
  "giasm": "mov d1, v0.d[1]\nfmov x8, d0\nfmov x9, d1\ncmp x8, x9\nfcsel d0, d0, d1, lo\nfmov x0, d0\nret",
  "ll": "define i64 @test(<2 x i64> %a) {\n  %r = call i64 @llvm.vector.reduce.umin(<2 x i64> %a)\n  ret i64 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call i64 @llvm.vector.reduce.umin.v2i64(<2 x i64> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i64 %r"
 },
 {
  "instr": "reduce.umin",
  "ty": "<4 x i64>",
  "variant": "reduce",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 6,
  "gisize": 8,
  "extrasize": 0,
  "asm": "cmhi v2.2d, v1.2d, v0.2d\nbif v0.16b, v1.16b, v2.16b\next v1.16b, v0.16b, v0.16b, #8\ncmhi d2, d1, d0\nbif v0.8b, v1.8b, v2.8b\nfmov x0, d0\nret",
  "giasm": "cmhi v2.2d, v1.2d, v0.2d\nbif v0.16b, v1.16b, v2.16b\nmov d1, v0.d[1]\nfmov x8, d0\nfmov x9, d1\ncmp x8, x9\nfcsel d0, d0, d1, lo\nfmov x0, d0\nret",
  "ll": "define i64 @test(<4 x i64> %a) {\n  %r = call i64 @llvm.vector.reduce.umin(<4 x i64> %a)\n  ret i64 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call i64 @llvm.vector.reduce.umin.v4i64(<4 x i64> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i64 %r"
 },
 {
  "instr": "reduce.umax",
  "ty": "<8 x i8>",
  "variant": "reduce",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "umaxv b0, v0.8b\nfmov w0, s0\nret",
  "giasm": "umaxv b0, v0.8b\nfmov w0, s0\nret",
  "ll": "define i8 @test(<8 x i8> %a) {\n  %r = call i8 @llvm.vector.reduce.umax(<8 x i8> %a)\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call i8 @llvm.vector.reduce.umax.v8i8(<8 x i8> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "reduce.umax",
  "ty": "<16 x i8>",
  "variant": "reduce",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "umaxv b0, v0.16b\nfmov w0, s0\nret",
  "giasm": "umaxv b0, v0.16b\nfmov w0, s0\nret",
  "ll": "define i8 @test(<16 x i8> %a) {\n  %r = call i8 @llvm.vector.reduce.umax(<16 x i8> %a)\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call i8 @llvm.vector.reduce.umax.v16i8(<16 x i8> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "reduce.umax",
  "ty": "<32 x i8>",
  "variant": "reduce",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "umax v0.16b, v0.16b, v1.16b\numaxv b0, v0.16b\nfmov w0, s0\nret",
  "giasm": "umax v0.16b, v0.16b, v1.16b\numaxv b0, v0.16b\nfmov w0, s0\nret",
  "ll": "define i8 @test(<32 x i8> %a) {\n  %r = call i8 @llvm.vector.reduce.umax(<32 x i8> %a)\n  ret i8 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 3 for instruction:   %r = call i8 @llvm.vector.reduce.umax.v32i8(<32 x i8> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i8 %r"
 },
 {
  "instr": "reduce.umax",
  "ty": "<4 x i16>",
  "variant": "reduce",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "umaxv h0, v0.4h\nfmov w0, s0\nret",
  "giasm": "umaxv h0, v0.4h\nfmov w0, s0\nret",
  "ll": "define i16 @test(<4 x i16> %a) {\n  %r = call i16 @llvm.vector.reduce.umax(<4 x i16> %a)\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call i16 @llvm.vector.reduce.umax.v4i16(<4 x i16> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "reduce.umax",
  "ty": "<8 x i16>",
  "variant": "reduce",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "umaxv h0, v0.8h\nfmov w0, s0\nret",
  "giasm": "umaxv h0, v0.8h\nfmov w0, s0\nret",
  "ll": "define i16 @test(<8 x i16> %a) {\n  %r = call i16 @llvm.vector.reduce.umax(<8 x i16> %a)\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call i16 @llvm.vector.reduce.umax.v8i16(<8 x i16> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "reduce.umax",
  "ty": "<16 x i16>",
  "variant": "reduce",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "umax v0.8h, v0.8h, v1.8h\numaxv h0, v0.8h\nfmov w0, s0\nret",
  "giasm": "umax v0.8h, v0.8h, v1.8h\numaxv h0, v0.8h\nfmov w0, s0\nret",
  "ll": "define i16 @test(<16 x i16> %a) {\n  %r = call i16 @llvm.vector.reduce.umax(<16 x i16> %a)\n  ret i16 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 3 for instruction:   %r = call i16 @llvm.vector.reduce.umax.v16i16(<16 x i16> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i16 %r"
 },
 {
  "instr": "reduce.umax",
  "ty": "<2 x i32>",
  "variant": "reduce",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "umaxp v0.2s, v0.2s, v0.2s\nfmov w0, s0\nret",
  "giasm": "umaxp v0.2s, v0.2s, v0.2s\nfmov w0, s0\nret",
  "ll": "define i32 @test(<2 x i32> %a) {\n  %r = call i32 @llvm.vector.reduce.umax(<2 x i32> %a)\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call i32 @llvm.vector.reduce.umax.v2i32(<2 x i32> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "reduce.umax",
  "ty": "<4 x i32>",
  "variant": "reduce",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "umaxv s0, v0.4s\nfmov w0, s0\nret",
  "giasm": "umaxv s0, v0.4s\nfmov w0, s0\nret",
  "ll": "define i32 @test(<4 x i32> %a) {\n  %r = call i32 @llvm.vector.reduce.umax(<4 x i32> %a)\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call i32 @llvm.vector.reduce.umax.v4i32(<4 x i32> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "reduce.umax",
  "ty": "<8 x i32>",
  "variant": "reduce",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "umax v0.4s, v0.4s, v1.4s\numaxv s0, v0.4s\nfmov w0, s0\nret",
  "giasm": "umax v0.4s, v0.4s, v1.4s\numaxv s0, v0.4s\nfmov w0, s0\nret",
  "ll": "define i32 @test(<8 x i32> %a) {\n  %r = call i32 @llvm.vector.reduce.umax(<8 x i32> %a)\n  ret i32 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 3 for instruction:   %r = call i32 @llvm.vector.reduce.umax.v8i32(<8 x i32> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i32 %r"
 },
 {
  "instr": "reduce.umax",
  "ty": "<2 x i64>",
  "variant": "reduce",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 6,
  "extrasize": 0,
  "asm": "ext v1.16b, v0.16b, v0.16b, #8\ncmhi d2, d0, d1\nbif v0.8b, v1.8b, v2.8b\nfmov x0, d0\nret",
  "giasm": "mov d1, v0.d[1]\nfmov x8, d0\nfmov x9, d1\ncmp x8, x9\nfcsel d0, d0, d1, hi\nfmov x0, d0\nret",
  "ll": "define i64 @test(<2 x i64> %a) {\n  %r = call i64 @llvm.vector.reduce.umax(<2 x i64> %a)\n  ret i64 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call i64 @llvm.vector.reduce.umax.v2i64(<2 x i64> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i64 %r"
 },
 {
  "instr": "reduce.umax",
  "ty": "<4 x i64>",
  "variant": "reduce",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 6,
  "gisize": 8,
  "extrasize": 0,
  "asm": "cmhi v2.2d, v0.2d, v1.2d\nbif v0.16b, v1.16b, v2.16b\next v1.16b, v0.16b, v0.16b, #8\ncmhi d2, d0, d1\nbif v0.8b, v1.8b, v2.8b\nfmov x0, d0\nret",
  "giasm": "cmhi v2.2d, v0.2d, v1.2d\nbif v0.16b, v1.16b, v2.16b\nmov d1, v0.d[1]\nfmov x8, d0\nfmov x9, d1\ncmp x8, x9\nfcsel d0, d0, d1, hi\nfmov x0, d0\nret",
  "ll": "define i64 @test(<4 x i64> %a) {\n  %r = call i64 @llvm.vector.reduce.umax(<4 x i64> %a)\n  ret i64 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call i64 @llvm.vector.reduce.umax.v4i64(<4 x i64> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret i64 %r"
 }
]