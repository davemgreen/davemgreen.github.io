[
 {
  "instr": "fadd",
  "ty": "half",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fadd h0, h0, h1\nret",
  "giasm": "fadd h0, h0, h1\nret",
  "ll": "define half @test(half %a, half %b) {\n  %r = fadd half %a, %b\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd half %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "fadd",
  "ty": "half",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov h1, #7.00000000\nfadd h0, h0, h1\nret",
  "giasm": "fmov h1, #7.00000000\nfadd h0, h0, h1\nret",
  "ll": "define half @test(half %a) {\n  %r = fadd half %a, 7.0\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd half %a, 0xH4700\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "fadd",
  "ty": "float",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fadd s0, s0, s1\nret",
  "giasm": "fadd s0, s0, s1\nret",
  "ll": "define float @test(float %a, float %b) {\n  %r = fadd float %a, %b\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd float %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "fadd",
  "ty": "float",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov s1, #7.00000000\nfadd s0, s0, s1\nret",
  "giasm": "fmov s1, #7.00000000\nfadd s0, s0, s1\nret",
  "ll": "define float @test(float %a) {\n  %r = fadd float %a, 7.0\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd float %a, 7.000000e+00\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "fadd",
  "ty": "double",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fadd d0, d0, d1\nret",
  "giasm": "fadd d0, d0, d1\nret",
  "ll": "define double @test(double %a, double %b) {\n  %r = fadd double %a, %b\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd double %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "fadd",
  "ty": "double",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov d1, #7.00000000\nfadd d0, d0, d1\nret",
  "giasm": "fmov d1, #7.00000000\nfadd d0, d0, d1\nret",
  "ll": "define double @test(double %a) {\n  %r = fadd double %a, 7.0\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd double %a, 7.000000e+00\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "fadd",
  "ty": "<4 x half>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fadd v0.4h, v0.4h, v1.4h\nret",
  "giasm": "fadd v0.4h, v0.4h, v1.4h\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, <4 x half> %b) {\n  %r = fadd <4 x half> %a, %b\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <4 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "fadd",
  "ty": "<4 x half>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr d1, [x8, :lo12:.LCPI0_0]\nfadd v0.4h, v0.4h, v1.4h\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr d1, [x8, :lo12:.LCPI0_0]\nfadd v0.4h, v0.4h, v1.4h\nret",
  "ll": "define <4 x half> @test(<4 x half> %a) {\n  %r = fadd <4 x half> %a, <half 7.0, half 6.0, half 7.0, half 6.0>\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <4 x half> %a, <half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600>\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "fadd",
  "ty": "<4 x half>",
  "variant": "binopsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 4,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "dup v1.4h, v1.h[0]\nfadd v0.4h, v0.4h, v1.4h\nret",
  "giasm": "dup v1.4h, v1.h[0]\nfadd v0.4h, v0.4h, v1.4h\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, half %bs) {\n  %i = insertelement <4 x half> poison, half %bs, i64 0\n  %b = shufflevector <4 x half> %i, <4 x half> poison, <4 x i32> zeroinitializer\n  %r = fadd <4 x half> %a, %b\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <4 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <4 x half> %i, <4 x half> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <4 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "fadd",
  "ty": "<4 x half>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "movi v1.4h, #71, lsl #8\nfadd v0.4h, v0.4h, v1.4h\nret",
  "giasm": "movi v1.4h, #71, lsl #8\nfadd v0.4h, v0.4h, v1.4h\nret",
  "ll": "define <4 x half> @test(<4 x half> %a) {\n  %r = fadd <4 x half> %a, splat (half 7.0)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <4 x half> %a, splat (half 0xH4700)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "fadd",
  "ty": "<8 x half>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fadd v0.8h, v0.8h, v1.8h\nret",
  "giasm": "fadd v0.8h, v0.8h, v1.8h\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, <8 x half> %b) {\n  %r = fadd <8 x half> %a, %b\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <8 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "fadd",
  "ty": "<8 x half>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfadd v0.8h, v0.8h, v1.8h\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfadd v0.8h, v0.8h, v1.8h\nret",
  "ll": "define <8 x half> @test(<8 x half> %a) {\n  %r = fadd <8 x half> %a, <half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0>\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <8 x half> %a, <half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600>\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "fadd",
  "ty": "<8 x half>",
  "variant": "binopsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 4,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "dup v1.8h, v1.h[0]\nfadd v0.8h, v0.8h, v1.8h\nret",
  "giasm": "dup v1.8h, v1.h[0]\nfadd v0.8h, v0.8h, v1.8h\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, half %bs) {\n  %i = insertelement <8 x half> poison, half %bs, i64 0\n  %b = shufflevector <8 x half> %i, <8 x half> poison, <8 x i32> zeroinitializer\n  %r = fadd <8 x half> %a, %b\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <8 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <8 x half> %i, <8 x half> poison, <8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <8 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "fadd",
  "ty": "<8 x half>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "movi v1.8h, #71, lsl #8\nfadd v0.8h, v0.8h, v1.8h\nret",
  "giasm": "movi v1.8h, #71, lsl #8\nfadd v0.8h, v0.8h, v1.8h\nret",
  "ll": "define <8 x half> @test(<8 x half> %a) {\n  %r = fadd <8 x half> %a, splat (half 7.0)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <8 x half> %a, splat (half 0xH4700)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "fadd",
  "ty": "<16 x half>",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fadd v1.8h, v1.8h, v3.8h\nfadd v0.8h, v0.8h, v2.8h\nret",
  "giasm": "fadd v0.8h, v0.8h, v2.8h\nfadd v1.8h, v1.8h, v3.8h\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, <16 x half> %b) {\n  %r = fadd <16 x half> %a, %b\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <16 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "fadd",
  "ty": "<16 x half>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfadd v0.8h, v0.8h, v2.8h\nfadd v1.8h, v1.8h, v2.8h\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfadd v0.8h, v0.8h, v2.8h\nfadd v1.8h, v1.8h, v2.8h\nret",
  "ll": "define <16 x half> @test(<16 x half> %a) {\n  %r = fadd <16 x half> %a, <half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0>\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <16 x half> %a, <half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600>\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "fadd",
  "ty": "<16 x half>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 4,
  "lat": 5,
  "sizelat": 3,
  "size": 3,
  "gisize": 4,
  "extrasize": 0,
  "asm": "dup v2.8h, v2.h[0]\nfadd v0.8h, v0.8h, v2.8h\nfadd v1.8h, v1.8h, v2.8h\nret",
  "giasm": "dup v3.8h, v2.h[0]\ndup v2.8h, v2.h[0]\nfadd v0.8h, v0.8h, v3.8h\nfadd v1.8h, v1.8h, v2.8h\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, half %bs) {\n  %i = insertelement <16 x half> poison, half %bs, i64 0\n  %b = shufflevector <16 x half> %i, <16 x half> poison, <16 x i32> zeroinitializer\n  %r = fadd <16 x half> %a, %b\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <16 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <16 x half> %i, <16 x half> poison, <16 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <16 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "fadd",
  "ty": "<16 x half>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "movi v2.8h, #71, lsl #8\nfadd v0.8h, v0.8h, v2.8h\nfadd v1.8h, v1.8h, v2.8h\nret",
  "giasm": "movi v2.8h, #71, lsl #8\nfadd v0.8h, v0.8h, v2.8h\nfadd v1.8h, v1.8h, v2.8h\nret",
  "ll": "define <16 x half> @test(<16 x half> %a) {\n  %r = fadd <16 x half> %a, splat (half 7.0)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <16 x half> %a, splat (half 0xH4700)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "fadd",
  "ty": "<2 x float>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fadd v0.2s, v0.2s, v1.2s\nret",
  "giasm": "fadd v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, <2 x float> %b) {\n  %r = fadd <2 x float> %a, %b\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <2 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "fadd",
  "ty": "<2 x float>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr d1, [x8, :lo12:.LCPI0_0]\nfadd v0.2s, v0.2s, v1.2s\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr d1, [x8, :lo12:.LCPI0_0]\nfadd v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a) {\n  %r = fadd <2 x float> %a, <float 7.0, float 6.0>\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <2 x float> %a, <float 7.000000e+00, float 6.000000e+00>\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "fadd",
  "ty": "<2 x float>",
  "variant": "binopsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 4,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "dup v1.2s, v1.s[0]\nfadd v0.2s, v0.2s, v1.2s\nret",
  "giasm": "dup v1.2s, v1.s[0]\nfadd v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, float %bs) {\n  %i = insertelement <2 x float> poison, float %bs, i64 0\n  %b = shufflevector <2 x float> %i, <2 x float> poison, <2 x i32> zeroinitializer\n  %r = fadd <2 x float> %a, %b\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <2 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <2 x float> %i, <2 x float> poison, <2 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <2 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "fadd",
  "ty": "<2 x float>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov v1.2s, #7.00000000\nfadd v0.2s, v0.2s, v1.2s\nret",
  "giasm": "fmov v1.2s, #7.00000000\nfadd v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a) {\n  %r = fadd <2 x float> %a, splat (float 7.0)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <2 x float> %a, splat (float 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "fadd",
  "ty": "<4 x float>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fadd v0.4s, v0.4s, v1.4s\nret",
  "giasm": "fadd v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, <4 x float> %b) {\n  %r = fadd <4 x float> %a, %b\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <4 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "fadd",
  "ty": "<4 x float>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfadd v0.4s, v0.4s, v1.4s\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfadd v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a) {\n  %r = fadd <4 x float> %a, <float 7.0, float 6.0, float 7.0, float 6.0>\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <4 x float> %a, <float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00>\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "fadd",
  "ty": "<4 x float>",
  "variant": "binopsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 4,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "dup v1.4s, v1.s[0]\nfadd v0.4s, v0.4s, v1.4s\nret",
  "giasm": "dup v1.4s, v1.s[0]\nfadd v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, float %bs) {\n  %i = insertelement <4 x float> poison, float %bs, i64 0\n  %b = shufflevector <4 x float> %i, <4 x float> poison, <4 x i32> zeroinitializer\n  %r = fadd <4 x float> %a, %b\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <4 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <4 x float> %i, <4 x float> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <4 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "fadd",
  "ty": "<4 x float>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov v1.4s, #7.00000000\nfadd v0.4s, v0.4s, v1.4s\nret",
  "giasm": "fmov v1.4s, #7.00000000\nfadd v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a) {\n  %r = fadd <4 x float> %a, splat (float 7.0)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <4 x float> %a, splat (float 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "fadd",
  "ty": "<8 x float>",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fadd v1.4s, v1.4s, v3.4s\nfadd v0.4s, v0.4s, v2.4s\nret",
  "giasm": "fadd v0.4s, v0.4s, v2.4s\nfadd v1.4s, v1.4s, v3.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, <8 x float> %b) {\n  %r = fadd <8 x float> %a, %b\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <8 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "fadd",
  "ty": "<8 x float>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfadd v0.4s, v0.4s, v2.4s\nfadd v1.4s, v1.4s, v2.4s\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfadd v0.4s, v0.4s, v2.4s\nfadd v1.4s, v1.4s, v2.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a) {\n  %r = fadd <8 x float> %a, <float 7.0, float 6.0, float 7.0, float 6.0, float 7.0, float 6.0, float 7.0, float 6.0>\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <8 x float> %a, <float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00>\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "fadd",
  "ty": "<8 x float>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 4,
  "lat": 5,
  "sizelat": 3,
  "size": 3,
  "gisize": 4,
  "extrasize": 0,
  "asm": "dup v2.4s, v2.s[0]\nfadd v0.4s, v0.4s, v2.4s\nfadd v1.4s, v1.4s, v2.4s\nret",
  "giasm": "dup v3.4s, v2.s[0]\ndup v2.4s, v2.s[0]\nfadd v0.4s, v0.4s, v3.4s\nfadd v1.4s, v1.4s, v2.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, float %bs) {\n  %i = insertelement <8 x float> poison, float %bs, i64 0\n  %b = shufflevector <8 x float> %i, <8 x float> poison, <8 x i32> zeroinitializer\n  %r = fadd <8 x float> %a, %b\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <8 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <8 x float> %i, <8 x float> poison, <8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <8 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "fadd",
  "ty": "<8 x float>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fmov v2.4s, #7.00000000\nfadd v0.4s, v0.4s, v2.4s\nfadd v1.4s, v1.4s, v2.4s\nret",
  "giasm": "fmov v2.4s, #7.00000000\nfadd v0.4s, v0.4s, v2.4s\nfadd v1.4s, v1.4s, v2.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a) {\n  %r = fadd <8 x float> %a, splat (float 7.0)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <8 x float> %a, splat (float 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "fadd",
  "ty": "<2 x double>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fadd v0.2d, v0.2d, v1.2d\nret",
  "giasm": "fadd v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, <2 x double> %b) {\n  %r = fadd <2 x double> %a, %b\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <2 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "fadd",
  "ty": "<2 x double>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfadd v0.2d, v0.2d, v1.2d\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfadd v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a) {\n  %r = fadd <2 x double> %a, <double 7.0, double 6.0>\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <2 x double> %a, <double 7.000000e+00, double 6.000000e+00>\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "fadd",
  "ty": "<2 x double>",
  "variant": "binopsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 4,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "dup v1.2d, v1.d[0]\nfadd v0.2d, v0.2d, v1.2d\nret",
  "giasm": "dup v1.2d, v1.d[0]\nfadd v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, double %bs) {\n  %i = insertelement <2 x double> poison, double %bs, i64 0\n  %b = shufflevector <2 x double> %i, <2 x double> poison, <2 x i32> zeroinitializer\n  %r = fadd <2 x double> %a, %b\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <2 x double> poison, double %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <2 x double> %i, <2 x double> poison, <2 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <2 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "fadd",
  "ty": "<2 x double>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov v1.2d, #7.00000000\nfadd v0.2d, v0.2d, v1.2d\nret",
  "giasm": "fmov v1.2d, #7.00000000\nfadd v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a) {\n  %r = fadd <2 x double> %a, splat (double 7.0)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <2 x double> %a, splat (double 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "fadd",
  "ty": "<4 x double>",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fadd v1.2d, v1.2d, v3.2d\nfadd v0.2d, v0.2d, v2.2d\nret",
  "giasm": "fadd v0.2d, v0.2d, v2.2d\nfadd v1.2d, v1.2d, v3.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, <4 x double> %b) {\n  %r = fadd <4 x double> %a, %b\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <4 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "fadd",
  "ty": "<4 x double>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfadd v0.2d, v0.2d, v2.2d\nfadd v1.2d, v1.2d, v2.2d\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfadd v0.2d, v0.2d, v2.2d\nfadd v1.2d, v1.2d, v2.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a) {\n  %r = fadd <4 x double> %a, <double 7.0, double 6.0, double 7.0, double 6.0>\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <4 x double> %a, <double 7.000000e+00, double 6.000000e+00, double 7.000000e+00, double 6.000000e+00>\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "fadd",
  "ty": "<4 x double>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 4,
  "lat": 5,
  "sizelat": 3,
  "size": 3,
  "gisize": 4,
  "extrasize": 0,
  "asm": "dup v2.2d, v2.d[0]\nfadd v0.2d, v0.2d, v2.2d\nfadd v1.2d, v1.2d, v2.2d\nret",
  "giasm": "dup v3.2d, v2.d[0]\ndup v2.2d, v2.d[0]\nfadd v0.2d, v0.2d, v3.2d\nfadd v1.2d, v1.2d, v2.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, double %bs) {\n  %i = insertelement <4 x double> poison, double %bs, i64 0\n  %b = shufflevector <4 x double> %i, <4 x double> poison, <4 x i32> zeroinitializer\n  %r = fadd <4 x double> %a, %b\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <4 x double> poison, double %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <4 x double> %i, <4 x double> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <4 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "fadd",
  "ty": "<4 x double>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fmov v2.2d, #7.00000000\nfadd v0.2d, v0.2d, v2.2d\nfadd v1.2d, v1.2d, v2.2d\nret",
  "giasm": "fmov v2.2d, #7.00000000\nfadd v0.2d, v0.2d, v2.2d\nfadd v1.2d, v1.2d, v2.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a) {\n  %r = fadd <4 x double> %a, splat (double 7.0)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <4 x double> %a, splat (double 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "fadd",
  "ty": "<vscale x 4 x half>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.s\nfadd z0.h, p0/m, z0.h, z1.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x half> (<vscale x 4 x half>, <vscale x 4 x half>) (in function: test)",
  "ll": "define <vscale x 4 x half> @test(<vscale x 4 x half> %a, <vscale x 4 x half> %b) {\n  %r = fadd <vscale x 4 x half> %a, %b\n  ret <vscale x 4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <vscale x 4 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x half> %r"
 },
 {
  "instr": "fadd",
  "ty": "<vscale x 4 x half>",
  "variant": "binopsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 4,
  "sizelat": 2,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.s\nmov z1.h, h1\nfadd z0.h, p0/m, z0.h, z1.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x half> (<vscale x 4 x half>, half) (in function: test)",
  "ll": "define <vscale x 4 x half> @test(<vscale x 4 x half> %a, half %bs) {\n  %i = insertelement <vscale x 4 x half> poison, half %bs, i64 0\n  %b = shufflevector <vscale x 4 x half> %i, <vscale x 4 x half> poison, <vscale x 4 x i32> zeroinitializer\n  %r = fadd <vscale x 4 x half> %a, %b\n  ret <vscale x 4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 4 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <vscale x 4 x half> %i, <vscale x 4 x half> poison, <vscale x 4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <vscale x 4 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x half> %r"
 },
 {
  "instr": "fadd",
  "ty": "<vscale x 4 x half>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "fmov z1.h, #7.00000000\nptrue p0.s\nfadd z0.h, p0/m, z0.h, z1.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x half> (<vscale x 4 x half>) (in function: test)",
  "ll": "define <vscale x 4 x half> @test(<vscale x 4 x half> %a) {\n  %r = fadd <vscale x 4 x half> %a, splat (half 7.0)\n  ret <vscale x 4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <vscale x 4 x half> %a, splat (half 0xH4700)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x half> %r"
 },
 {
  "instr": "fadd",
  "ty": "<vscale x 8 x half>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "fadd z0.h, z0.h, z1.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x half> (<vscale x 8 x half>, <vscale x 8 x half>) (in function: test)",
  "ll": "define <vscale x 8 x half> @test(<vscale x 8 x half> %a, <vscale x 8 x half> %b) {\n  %r = fadd <vscale x 8 x half> %a, %b\n  ret <vscale x 8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <vscale x 8 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x half> %r"
 },
 {
  "instr": "fadd",
  "ty": "<vscale x 8 x half>",
  "variant": "binopsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 4,
  "sizelat": 2,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "mov z1.h, h1\nfadd z0.h, z0.h, z1.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x half> (<vscale x 8 x half>, half) (in function: test)",
  "ll": "define <vscale x 8 x half> @test(<vscale x 8 x half> %a, half %bs) {\n  %i = insertelement <vscale x 8 x half> poison, half %bs, i64 0\n  %b = shufflevector <vscale x 8 x half> %i, <vscale x 8 x half> poison, <vscale x 8 x i32> zeroinitializer\n  %r = fadd <vscale x 8 x half> %a, %b\n  ret <vscale x 8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 8 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <vscale x 8 x half> %i, <vscale x 8 x half> poison, <vscale x 8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <vscale x 8 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x half> %r"
 },
 {
  "instr": "fadd",
  "ty": "<vscale x 8 x half>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "fmov z1.h, #7.00000000\nfadd z0.h, z0.h, z1.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x half> (<vscale x 8 x half>) (in function: test)",
  "ll": "define <vscale x 8 x half> @test(<vscale x 8 x half> %a) {\n  %r = fadd <vscale x 8 x half> %a, splat (half 7.0)\n  ret <vscale x 8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <vscale x 8 x half> %a, splat (half 0xH4700)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x half> %r"
 },
 {
  "instr": "fadd",
  "ty": "<vscale x 16 x half>",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "fadd z1.h, z1.h, z3.h\nfadd z0.h, z0.h, z2.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 16 x half> (<vscale x 16 x half>, <vscale x 16 x half>) (in function: test)",
  "ll": "define <vscale x 16 x half> @test(<vscale x 16 x half> %a, <vscale x 16 x half> %b) {\n  %r = fadd <vscale x 16 x half> %a, %b\n  ret <vscale x 16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <vscale x 16 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 16 x half> %r"
 },
 {
  "instr": "fadd",
  "ty": "<vscale x 16 x half>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 4,
  "lat": 5,
  "sizelat": 3,
  "size": 3,
  "gisize": -1,
  "extrasize": 0,
  "asm": "mov z2.h, h2\nfadd z0.h, z0.h, z2.h\nfadd z1.h, z1.h, z2.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 16 x half> (<vscale x 16 x half>, half) (in function: test)",
  "ll": "define <vscale x 16 x half> @test(<vscale x 16 x half> %a, half %bs) {\n  %i = insertelement <vscale x 16 x half> poison, half %bs, i64 0\n  %b = shufflevector <vscale x 16 x half> %i, <vscale x 16 x half> poison, <vscale x 16 x i32> zeroinitializer\n  %r = fadd <vscale x 16 x half> %a, %b\n  ret <vscale x 16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 16 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <vscale x 16 x half> %i, <vscale x 16 x half> poison, <vscale x 16 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <vscale x 16 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 16 x half> %r"
 },
 {
  "instr": "fadd",
  "ty": "<vscale x 16 x half>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 3,
  "gisize": -1,
  "extrasize": 0,
  "asm": "fmov z2.h, #7.00000000\nfadd z0.h, z0.h, z2.h\nfadd z1.h, z1.h, z2.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 16 x half> (<vscale x 16 x half>) (in function: test)",
  "ll": "define <vscale x 16 x half> @test(<vscale x 16 x half> %a) {\n  %r = fadd <vscale x 16 x half> %a, splat (half 7.0)\n  ret <vscale x 16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <vscale x 16 x half> %a, splat (half 0xH4700)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 16 x half> %r"
 },
 {
  "instr": "fadd",
  "ty": "<vscale x 2 x float>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.d\nfadd z0.s, p0/m, z0.s, z1.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x float> (<vscale x 2 x float>, <vscale x 2 x float>) (in function: test)",
  "ll": "define <vscale x 2 x float> @test(<vscale x 2 x float> %a, <vscale x 2 x float> %b) {\n  %r = fadd <vscale x 2 x float> %a, %b\n  ret <vscale x 2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <vscale x 2 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x float> %r"
 },
 {
  "instr": "fadd",
  "ty": "<vscale x 2 x float>",
  "variant": "binopsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 4,
  "sizelat": 2,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.d\nmov z1.s, s1\nfadd z0.s, p0/m, z0.s, z1.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x float> (<vscale x 2 x float>, float) (in function: test)",
  "ll": "define <vscale x 2 x float> @test(<vscale x 2 x float> %a, float %bs) {\n  %i = insertelement <vscale x 2 x float> poison, float %bs, i64 0\n  %b = shufflevector <vscale x 2 x float> %i, <vscale x 2 x float> poison, <vscale x 2 x i32> zeroinitializer\n  %r = fadd <vscale x 2 x float> %a, %b\n  ret <vscale x 2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 2 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <vscale x 2 x float> %i, <vscale x 2 x float> poison, <vscale x 2 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <vscale x 2 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x float> %r"
 },
 {
  "instr": "fadd",
  "ty": "<vscale x 2 x float>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "fmov z1.s, #7.00000000\nptrue p0.d\nfadd z0.s, p0/m, z0.s, z1.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x float> (<vscale x 2 x float>) (in function: test)",
  "ll": "define <vscale x 2 x float> @test(<vscale x 2 x float> %a) {\n  %r = fadd <vscale x 2 x float> %a, splat (float 7.0)\n  ret <vscale x 2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <vscale x 2 x float> %a, splat (float 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x float> %r"
 },
 {
  "instr": "fadd",
  "ty": "<vscale x 4 x float>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "fadd z0.s, z0.s, z1.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x float> (<vscale x 4 x float>, <vscale x 4 x float>) (in function: test)",
  "ll": "define <vscale x 4 x float> @test(<vscale x 4 x float> %a, <vscale x 4 x float> %b) {\n  %r = fadd <vscale x 4 x float> %a, %b\n  ret <vscale x 4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <vscale x 4 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x float> %r"
 },
 {
  "instr": "fadd",
  "ty": "<vscale x 4 x float>",
  "variant": "binopsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 4,
  "sizelat": 2,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "mov z1.s, s1\nfadd z0.s, z0.s, z1.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x float> (<vscale x 4 x float>, float) (in function: test)",
  "ll": "define <vscale x 4 x float> @test(<vscale x 4 x float> %a, float %bs) {\n  %i = insertelement <vscale x 4 x float> poison, float %bs, i64 0\n  %b = shufflevector <vscale x 4 x float> %i, <vscale x 4 x float> poison, <vscale x 4 x i32> zeroinitializer\n  %r = fadd <vscale x 4 x float> %a, %b\n  ret <vscale x 4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 4 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <vscale x 4 x float> %i, <vscale x 4 x float> poison, <vscale x 4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <vscale x 4 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x float> %r"
 },
 {
  "instr": "fadd",
  "ty": "<vscale x 4 x float>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "fmov z1.s, #7.00000000\nfadd z0.s, z0.s, z1.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x float> (<vscale x 4 x float>) (in function: test)",
  "ll": "define <vscale x 4 x float> @test(<vscale x 4 x float> %a) {\n  %r = fadd <vscale x 4 x float> %a, splat (float 7.0)\n  ret <vscale x 4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <vscale x 4 x float> %a, splat (float 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x float> %r"
 },
 {
  "instr": "fadd",
  "ty": "<vscale x 8 x float>",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "fadd z1.s, z1.s, z3.s\nfadd z0.s, z0.s, z2.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x float> (<vscale x 8 x float>, <vscale x 8 x float>) (in function: test)",
  "ll": "define <vscale x 8 x float> @test(<vscale x 8 x float> %a, <vscale x 8 x float> %b) {\n  %r = fadd <vscale x 8 x float> %a, %b\n  ret <vscale x 8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <vscale x 8 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x float> %r"
 },
 {
  "instr": "fadd",
  "ty": "<vscale x 8 x float>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 4,
  "lat": 5,
  "sizelat": 3,
  "size": 3,
  "gisize": -1,
  "extrasize": 0,
  "asm": "mov z2.s, s2\nfadd z0.s, z0.s, z2.s\nfadd z1.s, z1.s, z2.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x float> (<vscale x 8 x float>, float) (in function: test)",
  "ll": "define <vscale x 8 x float> @test(<vscale x 8 x float> %a, float %bs) {\n  %i = insertelement <vscale x 8 x float> poison, float %bs, i64 0\n  %b = shufflevector <vscale x 8 x float> %i, <vscale x 8 x float> poison, <vscale x 8 x i32> zeroinitializer\n  %r = fadd <vscale x 8 x float> %a, %b\n  ret <vscale x 8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 8 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <vscale x 8 x float> %i, <vscale x 8 x float> poison, <vscale x 8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <vscale x 8 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x float> %r"
 },
 {
  "instr": "fadd",
  "ty": "<vscale x 8 x float>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 3,
  "gisize": -1,
  "extrasize": 0,
  "asm": "fmov z2.s, #7.00000000\nfadd z0.s, z0.s, z2.s\nfadd z1.s, z1.s, z2.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x float> (<vscale x 8 x float>) (in function: test)",
  "ll": "define <vscale x 8 x float> @test(<vscale x 8 x float> %a) {\n  %r = fadd <vscale x 8 x float> %a, splat (float 7.0)\n  ret <vscale x 8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <vscale x 8 x float> %a, splat (float 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x float> %r"
 },
 {
  "instr": "fadd",
  "ty": "<vscale x 2 x double>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "fadd z0.d, z0.d, z1.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x double> (<vscale x 2 x double>, <vscale x 2 x double>) (in function: test)",
  "ll": "define <vscale x 2 x double> @test(<vscale x 2 x double> %a, <vscale x 2 x double> %b) {\n  %r = fadd <vscale x 2 x double> %a, %b\n  ret <vscale x 2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <vscale x 2 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x double> %r"
 },
 {
  "instr": "fadd",
  "ty": "<vscale x 2 x double>",
  "variant": "binopsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 4,
  "sizelat": 2,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "mov z1.d, d1\nfadd z0.d, z0.d, z1.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x double> (<vscale x 2 x double>, double) (in function: test)",
  "ll": "define <vscale x 2 x double> @test(<vscale x 2 x double> %a, double %bs) {\n  %i = insertelement <vscale x 2 x double> poison, double %bs, i64 0\n  %b = shufflevector <vscale x 2 x double> %i, <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer\n  %r = fadd <vscale x 2 x double> %a, %b\n  ret <vscale x 2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 2 x double> poison, double %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <vscale x 2 x double> %i, <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <vscale x 2 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x double> %r"
 },
 {
  "instr": "fadd",
  "ty": "<vscale x 2 x double>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "fmov z1.d, #7.00000000\nfadd z0.d, z0.d, z1.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x double> (<vscale x 2 x double>) (in function: test)",
  "ll": "define <vscale x 2 x double> @test(<vscale x 2 x double> %a) {\n  %r = fadd <vscale x 2 x double> %a, splat (double 7.0)\n  ret <vscale x 2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <vscale x 2 x double> %a, splat (double 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x double> %r"
 },
 {
  "instr": "fadd",
  "ty": "<vscale x 4 x double>",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "fadd z1.d, z1.d, z3.d\nfadd z0.d, z0.d, z2.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x double> (<vscale x 4 x double>, <vscale x 4 x double>) (in function: test)",
  "ll": "define <vscale x 4 x double> @test(<vscale x 4 x double> %a, <vscale x 4 x double> %b) {\n  %r = fadd <vscale x 4 x double> %a, %b\n  ret <vscale x 4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <vscale x 4 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x double> %r"
 },
 {
  "instr": "fadd",
  "ty": "<vscale x 4 x double>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 4,
  "lat": 5,
  "sizelat": 3,
  "size": 3,
  "gisize": -1,
  "extrasize": 0,
  "asm": "mov z2.d, d2\nfadd z0.d, z0.d, z2.d\nfadd z1.d, z1.d, z2.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x double> (<vscale x 4 x double>, double) (in function: test)",
  "ll": "define <vscale x 4 x double> @test(<vscale x 4 x double> %a, double %bs) {\n  %i = insertelement <vscale x 4 x double> poison, double %bs, i64 0\n  %b = shufflevector <vscale x 4 x double> %i, <vscale x 4 x double> poison, <vscale x 4 x i32> zeroinitializer\n  %r = fadd <vscale x 4 x double> %a, %b\n  ret <vscale x 4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 4 x double> poison, double %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <vscale x 4 x double> %i, <vscale x 4 x double> poison, <vscale x 4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <vscale x 4 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x double> %r"
 },
 {
  "instr": "fadd",
  "ty": "<vscale x 4 x double>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 3,
  "gisize": -1,
  "extrasize": 0,
  "asm": "fmov z2.d, #7.00000000\nfadd z0.d, z0.d, z2.d\nfadd z1.d, z1.d, z2.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x double> (<vscale x 4 x double>) (in function: test)",
  "ll": "define <vscale x 4 x double> @test(<vscale x 4 x double> %a) {\n  %r = fadd <vscale x 4 x double> %a, splat (double 7.0)\n  ret <vscale x 4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <vscale x 4 x double> %a, splat (double 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x double> %r"
 },
 {
  "instr": "fsub",
  "ty": "half",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fsub h0, h0, h1\nret",
  "giasm": "fsub h0, h0, h1\nret",
  "ll": "define half @test(half %a, half %b) {\n  %r = fsub half %a, %b\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub half %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "fsub",
  "ty": "half",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov h1, #-7.00000000\nfadd h0, h0, h1\nret",
  "giasm": "fmov h1, #7.00000000\nfsub h0, h0, h1\nret",
  "ll": "define half @test(half %a) {\n  %r = fsub half %a, 7.0\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub half %a, 0xH4700\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "fsub",
  "ty": "float",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fsub s0, s0, s1\nret",
  "giasm": "fsub s0, s0, s1\nret",
  "ll": "define float @test(float %a, float %b) {\n  %r = fsub float %a, %b\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub float %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "fsub",
  "ty": "float",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov s1, #-7.00000000\nfadd s0, s0, s1\nret",
  "giasm": "fmov s1, #7.00000000\nfsub s0, s0, s1\nret",
  "ll": "define float @test(float %a) {\n  %r = fsub float %a, 7.0\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub float %a, 7.000000e+00\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "fsub",
  "ty": "double",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fsub d0, d0, d1\nret",
  "giasm": "fsub d0, d0, d1\nret",
  "ll": "define double @test(double %a, double %b) {\n  %r = fsub double %a, %b\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub double %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "fsub",
  "ty": "double",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov d1, #-7.00000000\nfadd d0, d0, d1\nret",
  "giasm": "fmov d1, #7.00000000\nfsub d0, d0, d1\nret",
  "ll": "define double @test(double %a) {\n  %r = fsub double %a, 7.0\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub double %a, 7.000000e+00\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "fsub",
  "ty": "<4 x half>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fsub v0.4h, v0.4h, v1.4h\nret",
  "giasm": "fsub v0.4h, v0.4h, v1.4h\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, <4 x half> %b) {\n  %r = fsub <4 x half> %a, %b\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <4 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "fsub",
  "ty": "<4 x half>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr d1, [x8, :lo12:.LCPI0_0]\nfadd v0.4h, v0.4h, v1.4h\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr d1, [x8, :lo12:.LCPI0_0]\nfsub v0.4h, v0.4h, v1.4h\nret",
  "ll": "define <4 x half> @test(<4 x half> %a) {\n  %r = fsub <4 x half> %a, <half 7.0, half 6.0, half 7.0, half 6.0>\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <4 x half> %a, <half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600>\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "fsub",
  "ty": "<4 x half>",
  "variant": "binopsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 4,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "dup v1.4h, v1.h[0]\nfsub v0.4h, v0.4h, v1.4h\nret",
  "giasm": "dup v1.4h, v1.h[0]\nfsub v0.4h, v0.4h, v1.4h\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, half %bs) {\n  %i = insertelement <4 x half> poison, half %bs, i64 0\n  %b = shufflevector <4 x half> %i, <4 x half> poison, <4 x i32> zeroinitializer\n  %r = fsub <4 x half> %a, %b\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <4 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <4 x half> %i, <4 x half> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <4 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "fsub",
  "ty": "<4 x half>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "movi v1.4h, #199, lsl #8\nfadd v0.4h, v0.4h, v1.4h\nret",
  "giasm": "movi v1.4h, #71, lsl #8\nfsub v0.4h, v0.4h, v1.4h\nret",
  "ll": "define <4 x half> @test(<4 x half> %a) {\n  %r = fsub <4 x half> %a, splat (half 7.0)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <4 x half> %a, splat (half 0xH4700)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "fsub",
  "ty": "<8 x half>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fsub v0.8h, v0.8h, v1.8h\nret",
  "giasm": "fsub v0.8h, v0.8h, v1.8h\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, <8 x half> %b) {\n  %r = fsub <8 x half> %a, %b\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <8 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "fsub",
  "ty": "<8 x half>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfadd v0.8h, v0.8h, v1.8h\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfsub v0.8h, v0.8h, v1.8h\nret",
  "ll": "define <8 x half> @test(<8 x half> %a) {\n  %r = fsub <8 x half> %a, <half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0>\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <8 x half> %a, <half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600>\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "fsub",
  "ty": "<8 x half>",
  "variant": "binopsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 4,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "dup v1.8h, v1.h[0]\nfsub v0.8h, v0.8h, v1.8h\nret",
  "giasm": "dup v1.8h, v1.h[0]\nfsub v0.8h, v0.8h, v1.8h\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, half %bs) {\n  %i = insertelement <8 x half> poison, half %bs, i64 0\n  %b = shufflevector <8 x half> %i, <8 x half> poison, <8 x i32> zeroinitializer\n  %r = fsub <8 x half> %a, %b\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <8 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <8 x half> %i, <8 x half> poison, <8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <8 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "fsub",
  "ty": "<8 x half>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "movi v1.8h, #199, lsl #8\nfadd v0.8h, v0.8h, v1.8h\nret",
  "giasm": "movi v1.8h, #71, lsl #8\nfsub v0.8h, v0.8h, v1.8h\nret",
  "ll": "define <8 x half> @test(<8 x half> %a) {\n  %r = fsub <8 x half> %a, splat (half 7.0)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <8 x half> %a, splat (half 0xH4700)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "fsub",
  "ty": "<16 x half>",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fsub v1.8h, v1.8h, v3.8h\nfsub v0.8h, v0.8h, v2.8h\nret",
  "giasm": "fsub v0.8h, v0.8h, v2.8h\nfsub v1.8h, v1.8h, v3.8h\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, <16 x half> %b) {\n  %r = fsub <16 x half> %a, %b\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <16 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "fsub",
  "ty": "<16 x half>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfadd v0.8h, v0.8h, v2.8h\nfadd v1.8h, v1.8h, v2.8h\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfsub v0.8h, v0.8h, v2.8h\nfsub v1.8h, v1.8h, v2.8h\nret",
  "ll": "define <16 x half> @test(<16 x half> %a) {\n  %r = fsub <16 x half> %a, <half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0>\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <16 x half> %a, <half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600>\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "fsub",
  "ty": "<16 x half>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 4,
  "lat": 5,
  "sizelat": 3,
  "size": 3,
  "gisize": 4,
  "extrasize": 0,
  "asm": "dup v2.8h, v2.h[0]\nfsub v0.8h, v0.8h, v2.8h\nfsub v1.8h, v1.8h, v2.8h\nret",
  "giasm": "dup v3.8h, v2.h[0]\ndup v2.8h, v2.h[0]\nfsub v0.8h, v0.8h, v3.8h\nfsub v1.8h, v1.8h, v2.8h\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, half %bs) {\n  %i = insertelement <16 x half> poison, half %bs, i64 0\n  %b = shufflevector <16 x half> %i, <16 x half> poison, <16 x i32> zeroinitializer\n  %r = fsub <16 x half> %a, %b\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <16 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <16 x half> %i, <16 x half> poison, <16 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <16 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "fsub",
  "ty": "<16 x half>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "movi v2.8h, #199, lsl #8\nfadd v0.8h, v0.8h, v2.8h\nfadd v1.8h, v1.8h, v2.8h\nret",
  "giasm": "movi v2.8h, #71, lsl #8\nfsub v0.8h, v0.8h, v2.8h\nfsub v1.8h, v1.8h, v2.8h\nret",
  "ll": "define <16 x half> @test(<16 x half> %a) {\n  %r = fsub <16 x half> %a, splat (half 7.0)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <16 x half> %a, splat (half 0xH4700)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "fsub",
  "ty": "<2 x float>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fsub v0.2s, v0.2s, v1.2s\nret",
  "giasm": "fsub v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, <2 x float> %b) {\n  %r = fsub <2 x float> %a, %b\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <2 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "fsub",
  "ty": "<2 x float>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr d1, [x8, :lo12:.LCPI0_0]\nfadd v0.2s, v0.2s, v1.2s\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr d1, [x8, :lo12:.LCPI0_0]\nfsub v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a) {\n  %r = fsub <2 x float> %a, <float 7.0, float 6.0>\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <2 x float> %a, <float 7.000000e+00, float 6.000000e+00>\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "fsub",
  "ty": "<2 x float>",
  "variant": "binopsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 4,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "dup v1.2s, v1.s[0]\nfsub v0.2s, v0.2s, v1.2s\nret",
  "giasm": "dup v1.2s, v1.s[0]\nfsub v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, float %bs) {\n  %i = insertelement <2 x float> poison, float %bs, i64 0\n  %b = shufflevector <2 x float> %i, <2 x float> poison, <2 x i32> zeroinitializer\n  %r = fsub <2 x float> %a, %b\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <2 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <2 x float> %i, <2 x float> poison, <2 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <2 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "fsub",
  "ty": "<2 x float>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov v1.2s, #-7.00000000\nfadd v0.2s, v0.2s, v1.2s\nret",
  "giasm": "fmov v1.2s, #7.00000000\nfsub v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a) {\n  %r = fsub <2 x float> %a, splat (float 7.0)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <2 x float> %a, splat (float 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "fsub",
  "ty": "<4 x float>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fsub v0.4s, v0.4s, v1.4s\nret",
  "giasm": "fsub v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, <4 x float> %b) {\n  %r = fsub <4 x float> %a, %b\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <4 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "fsub",
  "ty": "<4 x float>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfadd v0.4s, v0.4s, v1.4s\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfsub v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a) {\n  %r = fsub <4 x float> %a, <float 7.0, float 6.0, float 7.0, float 6.0>\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <4 x float> %a, <float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00>\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "fsub",
  "ty": "<4 x float>",
  "variant": "binopsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 4,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "dup v1.4s, v1.s[0]\nfsub v0.4s, v0.4s, v1.4s\nret",
  "giasm": "dup v1.4s, v1.s[0]\nfsub v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, float %bs) {\n  %i = insertelement <4 x float> poison, float %bs, i64 0\n  %b = shufflevector <4 x float> %i, <4 x float> poison, <4 x i32> zeroinitializer\n  %r = fsub <4 x float> %a, %b\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <4 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <4 x float> %i, <4 x float> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <4 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "fsub",
  "ty": "<4 x float>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov v1.4s, #-7.00000000\nfadd v0.4s, v0.4s, v1.4s\nret",
  "giasm": "fmov v1.4s, #7.00000000\nfsub v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a) {\n  %r = fsub <4 x float> %a, splat (float 7.0)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <4 x float> %a, splat (float 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "fsub",
  "ty": "<8 x float>",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fsub v1.4s, v1.4s, v3.4s\nfsub v0.4s, v0.4s, v2.4s\nret",
  "giasm": "fsub v0.4s, v0.4s, v2.4s\nfsub v1.4s, v1.4s, v3.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, <8 x float> %b) {\n  %r = fsub <8 x float> %a, %b\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <8 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "fsub",
  "ty": "<8 x float>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfadd v0.4s, v0.4s, v2.4s\nfadd v1.4s, v1.4s, v2.4s\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfsub v0.4s, v0.4s, v2.4s\nfsub v1.4s, v1.4s, v2.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a) {\n  %r = fsub <8 x float> %a, <float 7.0, float 6.0, float 7.0, float 6.0, float 7.0, float 6.0, float 7.0, float 6.0>\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <8 x float> %a, <float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00>\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "fsub",
  "ty": "<8 x float>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 4,
  "lat": 5,
  "sizelat": 3,
  "size": 3,
  "gisize": 4,
  "extrasize": 0,
  "asm": "dup v2.4s, v2.s[0]\nfsub v0.4s, v0.4s, v2.4s\nfsub v1.4s, v1.4s, v2.4s\nret",
  "giasm": "dup v3.4s, v2.s[0]\ndup v2.4s, v2.s[0]\nfsub v0.4s, v0.4s, v3.4s\nfsub v1.4s, v1.4s, v2.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, float %bs) {\n  %i = insertelement <8 x float> poison, float %bs, i64 0\n  %b = shufflevector <8 x float> %i, <8 x float> poison, <8 x i32> zeroinitializer\n  %r = fsub <8 x float> %a, %b\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <8 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <8 x float> %i, <8 x float> poison, <8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <8 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "fsub",
  "ty": "<8 x float>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fmov v2.4s, #-7.00000000\nfadd v0.4s, v0.4s, v2.4s\nfadd v1.4s, v1.4s, v2.4s\nret",
  "giasm": "fmov v2.4s, #7.00000000\nfsub v0.4s, v0.4s, v2.4s\nfsub v1.4s, v1.4s, v2.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a) {\n  %r = fsub <8 x float> %a, splat (float 7.0)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <8 x float> %a, splat (float 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "fsub",
  "ty": "<2 x double>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fsub v0.2d, v0.2d, v1.2d\nret",
  "giasm": "fsub v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, <2 x double> %b) {\n  %r = fsub <2 x double> %a, %b\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <2 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "fsub",
  "ty": "<2 x double>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfadd v0.2d, v0.2d, v1.2d\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfsub v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a) {\n  %r = fsub <2 x double> %a, <double 7.0, double 6.0>\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <2 x double> %a, <double 7.000000e+00, double 6.000000e+00>\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "fsub",
  "ty": "<2 x double>",
  "variant": "binopsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 4,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "dup v1.2d, v1.d[0]\nfsub v0.2d, v0.2d, v1.2d\nret",
  "giasm": "dup v1.2d, v1.d[0]\nfsub v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, double %bs) {\n  %i = insertelement <2 x double> poison, double %bs, i64 0\n  %b = shufflevector <2 x double> %i, <2 x double> poison, <2 x i32> zeroinitializer\n  %r = fsub <2 x double> %a, %b\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <2 x double> poison, double %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <2 x double> %i, <2 x double> poison, <2 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <2 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "fsub",
  "ty": "<2 x double>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov v1.2d, #-7.00000000\nfadd v0.2d, v0.2d, v1.2d\nret",
  "giasm": "fmov v1.2d, #7.00000000\nfsub v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a) {\n  %r = fsub <2 x double> %a, splat (double 7.0)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <2 x double> %a, splat (double 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "fsub",
  "ty": "<4 x double>",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fsub v1.2d, v1.2d, v3.2d\nfsub v0.2d, v0.2d, v2.2d\nret",
  "giasm": "fsub v0.2d, v0.2d, v2.2d\nfsub v1.2d, v1.2d, v3.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, <4 x double> %b) {\n  %r = fsub <4 x double> %a, %b\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <4 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "fsub",
  "ty": "<4 x double>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfadd v0.2d, v0.2d, v2.2d\nfadd v1.2d, v1.2d, v2.2d\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfsub v0.2d, v0.2d, v2.2d\nfsub v1.2d, v1.2d, v2.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a) {\n  %r = fsub <4 x double> %a, <double 7.0, double 6.0, double 7.0, double 6.0>\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <4 x double> %a, <double 7.000000e+00, double 6.000000e+00, double 7.000000e+00, double 6.000000e+00>\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "fsub",
  "ty": "<4 x double>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 4,
  "lat": 5,
  "sizelat": 3,
  "size": 3,
  "gisize": 4,
  "extrasize": 0,
  "asm": "dup v2.2d, v2.d[0]\nfsub v0.2d, v0.2d, v2.2d\nfsub v1.2d, v1.2d, v2.2d\nret",
  "giasm": "dup v3.2d, v2.d[0]\ndup v2.2d, v2.d[0]\nfsub v0.2d, v0.2d, v3.2d\nfsub v1.2d, v1.2d, v2.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, double %bs) {\n  %i = insertelement <4 x double> poison, double %bs, i64 0\n  %b = shufflevector <4 x double> %i, <4 x double> poison, <4 x i32> zeroinitializer\n  %r = fsub <4 x double> %a, %b\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <4 x double> poison, double %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <4 x double> %i, <4 x double> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <4 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "fsub",
  "ty": "<4 x double>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fmov v2.2d, #-7.00000000\nfadd v0.2d, v0.2d, v2.2d\nfadd v1.2d, v1.2d, v2.2d\nret",
  "giasm": "fmov v2.2d, #7.00000000\nfsub v0.2d, v0.2d, v2.2d\nfsub v1.2d, v1.2d, v2.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a) {\n  %r = fsub <4 x double> %a, splat (double 7.0)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <4 x double> %a, splat (double 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "fsub",
  "ty": "<vscale x 4 x half>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.s\nfsub z0.h, p0/m, z0.h, z1.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x half> (<vscale x 4 x half>, <vscale x 4 x half>) (in function: test)",
  "ll": "define <vscale x 4 x half> @test(<vscale x 4 x half> %a, <vscale x 4 x half> %b) {\n  %r = fsub <vscale x 4 x half> %a, %b\n  ret <vscale x 4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <vscale x 4 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x half> %r"
 },
 {
  "instr": "fsub",
  "ty": "<vscale x 4 x half>",
  "variant": "binopsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 4,
  "sizelat": 2,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.s\nmov z1.h, h1\nfsub z0.h, p0/m, z0.h, z1.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x half> (<vscale x 4 x half>, half) (in function: test)",
  "ll": "define <vscale x 4 x half> @test(<vscale x 4 x half> %a, half %bs) {\n  %i = insertelement <vscale x 4 x half> poison, half %bs, i64 0\n  %b = shufflevector <vscale x 4 x half> %i, <vscale x 4 x half> poison, <vscale x 4 x i32> zeroinitializer\n  %r = fsub <vscale x 4 x half> %a, %b\n  ret <vscale x 4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 4 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <vscale x 4 x half> %i, <vscale x 4 x half> poison, <vscale x 4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <vscale x 4 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x half> %r"
 },
 {
  "instr": "fsub",
  "ty": "<vscale x 4 x half>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "fmov z1.h, #7.00000000\nptrue p0.s\nfsub z0.h, p0/m, z0.h, z1.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x half> (<vscale x 4 x half>) (in function: test)",
  "ll": "define <vscale x 4 x half> @test(<vscale x 4 x half> %a) {\n  %r = fsub <vscale x 4 x half> %a, splat (half 7.0)\n  ret <vscale x 4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <vscale x 4 x half> %a, splat (half 0xH4700)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x half> %r"
 },
 {
  "instr": "fsub",
  "ty": "<vscale x 8 x half>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "fsub z0.h, z0.h, z1.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x half> (<vscale x 8 x half>, <vscale x 8 x half>) (in function: test)",
  "ll": "define <vscale x 8 x half> @test(<vscale x 8 x half> %a, <vscale x 8 x half> %b) {\n  %r = fsub <vscale x 8 x half> %a, %b\n  ret <vscale x 8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <vscale x 8 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x half> %r"
 },
 {
  "instr": "fsub",
  "ty": "<vscale x 8 x half>",
  "variant": "binopsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 4,
  "sizelat": 2,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "mov z1.h, h1\nfsub z0.h, z0.h, z1.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x half> (<vscale x 8 x half>, half) (in function: test)",
  "ll": "define <vscale x 8 x half> @test(<vscale x 8 x half> %a, half %bs) {\n  %i = insertelement <vscale x 8 x half> poison, half %bs, i64 0\n  %b = shufflevector <vscale x 8 x half> %i, <vscale x 8 x half> poison, <vscale x 8 x i32> zeroinitializer\n  %r = fsub <vscale x 8 x half> %a, %b\n  ret <vscale x 8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 8 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <vscale x 8 x half> %i, <vscale x 8 x half> poison, <vscale x 8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <vscale x 8 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x half> %r"
 },
 {
  "instr": "fsub",
  "ty": "<vscale x 8 x half>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "fmov z1.h, #7.00000000\nfsub z0.h, z0.h, z1.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x half> (<vscale x 8 x half>) (in function: test)",
  "ll": "define <vscale x 8 x half> @test(<vscale x 8 x half> %a) {\n  %r = fsub <vscale x 8 x half> %a, splat (half 7.0)\n  ret <vscale x 8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <vscale x 8 x half> %a, splat (half 0xH4700)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x half> %r"
 },
 {
  "instr": "fsub",
  "ty": "<vscale x 16 x half>",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "fsub z1.h, z1.h, z3.h\nfsub z0.h, z0.h, z2.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 16 x half> (<vscale x 16 x half>, <vscale x 16 x half>) (in function: test)",
  "ll": "define <vscale x 16 x half> @test(<vscale x 16 x half> %a, <vscale x 16 x half> %b) {\n  %r = fsub <vscale x 16 x half> %a, %b\n  ret <vscale x 16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <vscale x 16 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 16 x half> %r"
 },
 {
  "instr": "fsub",
  "ty": "<vscale x 16 x half>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 4,
  "lat": 5,
  "sizelat": 3,
  "size": 3,
  "gisize": -1,
  "extrasize": 0,
  "asm": "mov z2.h, h2\nfsub z0.h, z0.h, z2.h\nfsub z1.h, z1.h, z2.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 16 x half> (<vscale x 16 x half>, half) (in function: test)",
  "ll": "define <vscale x 16 x half> @test(<vscale x 16 x half> %a, half %bs) {\n  %i = insertelement <vscale x 16 x half> poison, half %bs, i64 0\n  %b = shufflevector <vscale x 16 x half> %i, <vscale x 16 x half> poison, <vscale x 16 x i32> zeroinitializer\n  %r = fsub <vscale x 16 x half> %a, %b\n  ret <vscale x 16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 16 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <vscale x 16 x half> %i, <vscale x 16 x half> poison, <vscale x 16 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <vscale x 16 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 16 x half> %r"
 },
 {
  "instr": "fsub",
  "ty": "<vscale x 16 x half>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 3,
  "gisize": -1,
  "extrasize": 0,
  "asm": "fmov z2.h, #7.00000000\nfsub z0.h, z0.h, z2.h\nfsub z1.h, z1.h, z2.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 16 x half> (<vscale x 16 x half>) (in function: test)",
  "ll": "define <vscale x 16 x half> @test(<vscale x 16 x half> %a) {\n  %r = fsub <vscale x 16 x half> %a, splat (half 7.0)\n  ret <vscale x 16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <vscale x 16 x half> %a, splat (half 0xH4700)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 16 x half> %r"
 },
 {
  "instr": "fsub",
  "ty": "<vscale x 2 x float>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.d\nfsub z0.s, p0/m, z0.s, z1.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x float> (<vscale x 2 x float>, <vscale x 2 x float>) (in function: test)",
  "ll": "define <vscale x 2 x float> @test(<vscale x 2 x float> %a, <vscale x 2 x float> %b) {\n  %r = fsub <vscale x 2 x float> %a, %b\n  ret <vscale x 2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <vscale x 2 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x float> %r"
 },
 {
  "instr": "fsub",
  "ty": "<vscale x 2 x float>",
  "variant": "binopsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 4,
  "sizelat": 2,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.d\nmov z1.s, s1\nfsub z0.s, p0/m, z0.s, z1.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x float> (<vscale x 2 x float>, float) (in function: test)",
  "ll": "define <vscale x 2 x float> @test(<vscale x 2 x float> %a, float %bs) {\n  %i = insertelement <vscale x 2 x float> poison, float %bs, i64 0\n  %b = shufflevector <vscale x 2 x float> %i, <vscale x 2 x float> poison, <vscale x 2 x i32> zeroinitializer\n  %r = fsub <vscale x 2 x float> %a, %b\n  ret <vscale x 2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 2 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <vscale x 2 x float> %i, <vscale x 2 x float> poison, <vscale x 2 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <vscale x 2 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x float> %r"
 },
 {
  "instr": "fsub",
  "ty": "<vscale x 2 x float>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "fmov z1.s, #7.00000000\nptrue p0.d\nfsub z0.s, p0/m, z0.s, z1.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x float> (<vscale x 2 x float>) (in function: test)",
  "ll": "define <vscale x 2 x float> @test(<vscale x 2 x float> %a) {\n  %r = fsub <vscale x 2 x float> %a, splat (float 7.0)\n  ret <vscale x 2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <vscale x 2 x float> %a, splat (float 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x float> %r"
 },
 {
  "instr": "fsub",
  "ty": "<vscale x 4 x float>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "fsub z0.s, z0.s, z1.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x float> (<vscale x 4 x float>, <vscale x 4 x float>) (in function: test)",
  "ll": "define <vscale x 4 x float> @test(<vscale x 4 x float> %a, <vscale x 4 x float> %b) {\n  %r = fsub <vscale x 4 x float> %a, %b\n  ret <vscale x 4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <vscale x 4 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x float> %r"
 },
 {
  "instr": "fsub",
  "ty": "<vscale x 4 x float>",
  "variant": "binopsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 4,
  "sizelat": 2,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "mov z1.s, s1\nfsub z0.s, z0.s, z1.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x float> (<vscale x 4 x float>, float) (in function: test)",
  "ll": "define <vscale x 4 x float> @test(<vscale x 4 x float> %a, float %bs) {\n  %i = insertelement <vscale x 4 x float> poison, float %bs, i64 0\n  %b = shufflevector <vscale x 4 x float> %i, <vscale x 4 x float> poison, <vscale x 4 x i32> zeroinitializer\n  %r = fsub <vscale x 4 x float> %a, %b\n  ret <vscale x 4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 4 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <vscale x 4 x float> %i, <vscale x 4 x float> poison, <vscale x 4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <vscale x 4 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x float> %r"
 },
 {
  "instr": "fsub",
  "ty": "<vscale x 4 x float>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "fmov z1.s, #7.00000000\nfsub z0.s, z0.s, z1.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x float> (<vscale x 4 x float>) (in function: test)",
  "ll": "define <vscale x 4 x float> @test(<vscale x 4 x float> %a) {\n  %r = fsub <vscale x 4 x float> %a, splat (float 7.0)\n  ret <vscale x 4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <vscale x 4 x float> %a, splat (float 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x float> %r"
 },
 {
  "instr": "fsub",
  "ty": "<vscale x 8 x float>",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "fsub z1.s, z1.s, z3.s\nfsub z0.s, z0.s, z2.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x float> (<vscale x 8 x float>, <vscale x 8 x float>) (in function: test)",
  "ll": "define <vscale x 8 x float> @test(<vscale x 8 x float> %a, <vscale x 8 x float> %b) {\n  %r = fsub <vscale x 8 x float> %a, %b\n  ret <vscale x 8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <vscale x 8 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x float> %r"
 },
 {
  "instr": "fsub",
  "ty": "<vscale x 8 x float>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 4,
  "lat": 5,
  "sizelat": 3,
  "size": 3,
  "gisize": -1,
  "extrasize": 0,
  "asm": "mov z2.s, s2\nfsub z0.s, z0.s, z2.s\nfsub z1.s, z1.s, z2.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x float> (<vscale x 8 x float>, float) (in function: test)",
  "ll": "define <vscale x 8 x float> @test(<vscale x 8 x float> %a, float %bs) {\n  %i = insertelement <vscale x 8 x float> poison, float %bs, i64 0\n  %b = shufflevector <vscale x 8 x float> %i, <vscale x 8 x float> poison, <vscale x 8 x i32> zeroinitializer\n  %r = fsub <vscale x 8 x float> %a, %b\n  ret <vscale x 8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 8 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <vscale x 8 x float> %i, <vscale x 8 x float> poison, <vscale x 8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <vscale x 8 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x float> %r"
 },
 {
  "instr": "fsub",
  "ty": "<vscale x 8 x float>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 3,
  "gisize": -1,
  "extrasize": 0,
  "asm": "fmov z2.s, #7.00000000\nfsub z0.s, z0.s, z2.s\nfsub z1.s, z1.s, z2.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x float> (<vscale x 8 x float>) (in function: test)",
  "ll": "define <vscale x 8 x float> @test(<vscale x 8 x float> %a) {\n  %r = fsub <vscale x 8 x float> %a, splat (float 7.0)\n  ret <vscale x 8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <vscale x 8 x float> %a, splat (float 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x float> %r"
 },
 {
  "instr": "fsub",
  "ty": "<vscale x 2 x double>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "fsub z0.d, z0.d, z1.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x double> (<vscale x 2 x double>, <vscale x 2 x double>) (in function: test)",
  "ll": "define <vscale x 2 x double> @test(<vscale x 2 x double> %a, <vscale x 2 x double> %b) {\n  %r = fsub <vscale x 2 x double> %a, %b\n  ret <vscale x 2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <vscale x 2 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x double> %r"
 },
 {
  "instr": "fsub",
  "ty": "<vscale x 2 x double>",
  "variant": "binopsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 4,
  "sizelat": 2,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "mov z1.d, d1\nfsub z0.d, z0.d, z1.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x double> (<vscale x 2 x double>, double) (in function: test)",
  "ll": "define <vscale x 2 x double> @test(<vscale x 2 x double> %a, double %bs) {\n  %i = insertelement <vscale x 2 x double> poison, double %bs, i64 0\n  %b = shufflevector <vscale x 2 x double> %i, <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer\n  %r = fsub <vscale x 2 x double> %a, %b\n  ret <vscale x 2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 2 x double> poison, double %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <vscale x 2 x double> %i, <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <vscale x 2 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x double> %r"
 },
 {
  "instr": "fsub",
  "ty": "<vscale x 2 x double>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "fmov z1.d, #7.00000000\nfsub z0.d, z0.d, z1.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x double> (<vscale x 2 x double>) (in function: test)",
  "ll": "define <vscale x 2 x double> @test(<vscale x 2 x double> %a) {\n  %r = fsub <vscale x 2 x double> %a, splat (double 7.0)\n  ret <vscale x 2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <vscale x 2 x double> %a, splat (double 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x double> %r"
 },
 {
  "instr": "fsub",
  "ty": "<vscale x 4 x double>",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "fsub z1.d, z1.d, z3.d\nfsub z0.d, z0.d, z2.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x double> (<vscale x 4 x double>, <vscale x 4 x double>) (in function: test)",
  "ll": "define <vscale x 4 x double> @test(<vscale x 4 x double> %a, <vscale x 4 x double> %b) {\n  %r = fsub <vscale x 4 x double> %a, %b\n  ret <vscale x 4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <vscale x 4 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x double> %r"
 },
 {
  "instr": "fsub",
  "ty": "<vscale x 4 x double>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 4,
  "lat": 5,
  "sizelat": 3,
  "size": 3,
  "gisize": -1,
  "extrasize": 0,
  "asm": "mov z2.d, d2\nfsub z0.d, z0.d, z2.d\nfsub z1.d, z1.d, z2.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x double> (<vscale x 4 x double>, double) (in function: test)",
  "ll": "define <vscale x 4 x double> @test(<vscale x 4 x double> %a, double %bs) {\n  %i = insertelement <vscale x 4 x double> poison, double %bs, i64 0\n  %b = shufflevector <vscale x 4 x double> %i, <vscale x 4 x double> poison, <vscale x 4 x i32> zeroinitializer\n  %r = fsub <vscale x 4 x double> %a, %b\n  ret <vscale x 4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 4 x double> poison, double %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <vscale x 4 x double> %i, <vscale x 4 x double> poison, <vscale x 4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <vscale x 4 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x double> %r"
 },
 {
  "instr": "fsub",
  "ty": "<vscale x 4 x double>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 3,
  "gisize": -1,
  "extrasize": 0,
  "asm": "fmov z2.d, #7.00000000\nfsub z0.d, z0.d, z2.d\nfsub z1.d, z1.d, z2.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x double> (<vscale x 4 x double>) (in function: test)",
  "ll": "define <vscale x 4 x double> @test(<vscale x 4 x double> %a) {\n  %r = fsub <vscale x 4 x double> %a, splat (double 7.0)\n  ret <vscale x 4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <vscale x 4 x double> %a, splat (double 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x double> %r"
 },
 {
  "instr": "fmul",
  "ty": "half",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmul h0, h0, h1\nret",
  "giasm": "fmul h0, h0, h1\nret",
  "ll": "define half @test(half %a, half %b) {\n  %r = fmul half %a, %b\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul half %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "fmul",
  "ty": "half",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov h1, #7.00000000\nfmul h0, h0, h1\nret",
  "giasm": "fmov h1, #7.00000000\nfmul h0, h0, h1\nret",
  "ll": "define half @test(half %a) {\n  %r = fmul half %a, 7.0\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul half %a, 0xH4700\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "fmul",
  "ty": "float",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmul s0, s0, s1\nret",
  "giasm": "fmul s0, s0, s1\nret",
  "ll": "define float @test(float %a, float %b) {\n  %r = fmul float %a, %b\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul float %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "fmul",
  "ty": "float",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov s1, #7.00000000\nfmul s0, s0, s1\nret",
  "giasm": "fmov s1, #7.00000000\nfmul s0, s0, s1\nret",
  "ll": "define float @test(float %a) {\n  %r = fmul float %a, 7.0\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul float %a, 7.000000e+00\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "fmul",
  "ty": "double",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmul d0, d0, d1\nret",
  "giasm": "fmul d0, d0, d1\nret",
  "ll": "define double @test(double %a, double %b) {\n  %r = fmul double %a, %b\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul double %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "fmul",
  "ty": "double",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov d1, #7.00000000\nfmul d0, d0, d1\nret",
  "giasm": "fmov d1, #7.00000000\nfmul d0, d0, d1\nret",
  "ll": "define double @test(double %a) {\n  %r = fmul double %a, 7.0\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul double %a, 7.000000e+00\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "fmul",
  "ty": "<4 x half>",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmul v0.4h, v0.4h, v1.4h\nret",
  "giasm": "fmul v0.4h, v0.4h, v1.4h\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, <4 x half> %b) {\n  %r = fmul <4 x half> %a, %b\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <4 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "fmul",
  "ty": "<4 x half>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr d1, [x8, :lo12:.LCPI0_0]\nfmul v0.4h, v0.4h, v1.4h\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr d1, [x8, :lo12:.LCPI0_0]\nfmul v0.4h, v0.4h, v1.4h\nret",
  "ll": "define <4 x half> @test(<4 x half> %a) {\n  %r = fmul <4 x half> %a, <half 7.0, half 6.0, half 7.0, half 6.0>\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <4 x half> %a, <half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600>\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "fmul",
  "ty": "<4 x half>",
  "variant": "binopsplat",
  "codesize": 2,
  "thru": 3,
  "lat": 4,
  "sizelat": 2,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmul v0.4h, v0.4h, v1.h[0]\nret",
  "giasm": "fmul v0.4h, v0.4h, v1.h[0]\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, half %bs) {\n  %i = insertelement <4 x half> poison, half %bs, i64 0\n  %b = shufflevector <4 x half> %i, <4 x half> poison, <4 x i32> zeroinitializer\n  %r = fmul <4 x half> %a, %b\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <4 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <4 x half> %i, <4 x half> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <4 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "fmul",
  "ty": "<4 x half>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "movi v1.4h, #71, lsl #8\nfmul v0.4h, v0.4h, v1.4h\nret",
  "giasm": "movi v1.4h, #71, lsl #8\nfmul v0.4h, v0.4h, v1.4h\nret",
  "ll": "define <4 x half> @test(<4 x half> %a) {\n  %r = fmul <4 x half> %a, splat (half 7.0)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <4 x half> %a, splat (half 0xH4700)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "fmul",
  "ty": "<8 x half>",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmul v0.8h, v0.8h, v1.8h\nret",
  "giasm": "fmul v0.8h, v0.8h, v1.8h\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, <8 x half> %b) {\n  %r = fmul <8 x half> %a, %b\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <8 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "fmul",
  "ty": "<8 x half>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfmul v0.8h, v0.8h, v1.8h\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfmul v0.8h, v0.8h, v1.8h\nret",
  "ll": "define <8 x half> @test(<8 x half> %a) {\n  %r = fmul <8 x half> %a, <half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0>\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <8 x half> %a, <half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600>\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "fmul",
  "ty": "<8 x half>",
  "variant": "binopsplat",
  "codesize": 2,
  "thru": 3,
  "lat": 4,
  "sizelat": 2,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmul v0.8h, v0.8h, v1.h[0]\nret",
  "giasm": "fmul v0.8h, v0.8h, v1.h[0]\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, half %bs) {\n  %i = insertelement <8 x half> poison, half %bs, i64 0\n  %b = shufflevector <8 x half> %i, <8 x half> poison, <8 x i32> zeroinitializer\n  %r = fmul <8 x half> %a, %b\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <8 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <8 x half> %i, <8 x half> poison, <8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <8 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "fmul",
  "ty": "<8 x half>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "movi v1.8h, #71, lsl #8\nfmul v0.8h, v0.8h, v1.8h\nret",
  "giasm": "movi v1.8h, #71, lsl #8\nfmul v0.8h, v0.8h, v1.8h\nret",
  "ll": "define <8 x half> @test(<8 x half> %a) {\n  %r = fmul <8 x half> %a, splat (half 7.0)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <8 x half> %a, splat (half 0xH4700)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "fmul",
  "ty": "<16 x half>",
  "variant": "binop",
  "codesize": 1,
  "thru": 4,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmul v1.8h, v1.8h, v3.8h\nfmul v0.8h, v0.8h, v2.8h\nret",
  "giasm": "fmul v0.8h, v0.8h, v2.8h\nfmul v1.8h, v1.8h, v3.8h\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, <16 x half> %b) {\n  %r = fmul <16 x half> %a, %b\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <16 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "fmul",
  "ty": "<16 x half>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 4,
  "lat": 3,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfmul v0.8h, v0.8h, v2.8h\nfmul v1.8h, v1.8h, v2.8h\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfmul v0.8h, v0.8h, v2.8h\nfmul v1.8h, v1.8h, v2.8h\nret",
  "ll": "define <16 x half> @test(<16 x half> %a) {\n  %r = fmul <16 x half> %a, <half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0>\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <16 x half> %a, <half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600>\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "fmul",
  "ty": "<16 x half>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 6,
  "lat": 5,
  "sizelat": 3,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmul v0.8h, v0.8h, v2.h[0]\nfmul v1.8h, v1.8h, v2.h[0]\nret",
  "giasm": "fmul v0.8h, v0.8h, v2.h[0]\nfmul v1.8h, v1.8h, v2.h[0]\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, half %bs) {\n  %i = insertelement <16 x half> poison, half %bs, i64 0\n  %b = shufflevector <16 x half> %i, <16 x half> poison, <16 x i32> zeroinitializer\n  %r = fmul <16 x half> %a, %b\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <16 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <16 x half> %i, <16 x half> poison, <16 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <16 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "fmul",
  "ty": "<16 x half>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 4,
  "lat": 3,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "movi v2.8h, #71, lsl #8\nfmul v0.8h, v0.8h, v2.8h\nfmul v1.8h, v1.8h, v2.8h\nret",
  "giasm": "movi v2.8h, #71, lsl #8\nfmul v0.8h, v0.8h, v2.8h\nfmul v1.8h, v1.8h, v2.8h\nret",
  "ll": "define <16 x half> @test(<16 x half> %a) {\n  %r = fmul <16 x half> %a, splat (half 7.0)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <16 x half> %a, splat (half 0xH4700)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "fmul",
  "ty": "<2 x float>",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmul v0.2s, v0.2s, v1.2s\nret",
  "giasm": "fmul v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, <2 x float> %b) {\n  %r = fmul <2 x float> %a, %b\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <2 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "fmul",
  "ty": "<2 x float>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr d1, [x8, :lo12:.LCPI0_0]\nfmul v0.2s, v0.2s, v1.2s\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr d1, [x8, :lo12:.LCPI0_0]\nfmul v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a) {\n  %r = fmul <2 x float> %a, <float 7.0, float 6.0>\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <2 x float> %a, <float 7.000000e+00, float 6.000000e+00>\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "fmul",
  "ty": "<2 x float>",
  "variant": "binopsplat",
  "codesize": 2,
  "thru": 3,
  "lat": 4,
  "sizelat": 2,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmul v0.2s, v0.2s, v1.s[0]\nret",
  "giasm": "fmul v0.2s, v0.2s, v1.s[0]\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, float %bs) {\n  %i = insertelement <2 x float> poison, float %bs, i64 0\n  %b = shufflevector <2 x float> %i, <2 x float> poison, <2 x i32> zeroinitializer\n  %r = fmul <2 x float> %a, %b\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <2 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <2 x float> %i, <2 x float> poison, <2 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <2 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "fmul",
  "ty": "<2 x float>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov v1.2s, #7.00000000\nfmul v0.2s, v0.2s, v1.2s\nret",
  "giasm": "fmov s1, #7.00000000\nfmul v0.2s, v0.2s, v1.s[0]\nret",
  "ll": "define <2 x float> @test(<2 x float> %a) {\n  %r = fmul <2 x float> %a, splat (float 7.0)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <2 x float> %a, splat (float 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "fmul",
  "ty": "<4 x float>",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmul v0.4s, v0.4s, v1.4s\nret",
  "giasm": "fmul v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, <4 x float> %b) {\n  %r = fmul <4 x float> %a, %b\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <4 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "fmul",
  "ty": "<4 x float>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfmul v0.4s, v0.4s, v1.4s\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfmul v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a) {\n  %r = fmul <4 x float> %a, <float 7.0, float 6.0, float 7.0, float 6.0>\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <4 x float> %a, <float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00>\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "fmul",
  "ty": "<4 x float>",
  "variant": "binopsplat",
  "codesize": 2,
  "thru": 3,
  "lat": 4,
  "sizelat": 2,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmul v0.4s, v0.4s, v1.s[0]\nret",
  "giasm": "fmul v0.4s, v0.4s, v1.s[0]\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, float %bs) {\n  %i = insertelement <4 x float> poison, float %bs, i64 0\n  %b = shufflevector <4 x float> %i, <4 x float> poison, <4 x i32> zeroinitializer\n  %r = fmul <4 x float> %a, %b\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <4 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <4 x float> %i, <4 x float> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <4 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "fmul",
  "ty": "<4 x float>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov v1.4s, #7.00000000\nfmul v0.4s, v0.4s, v1.4s\nret",
  "giasm": "fmov s1, #7.00000000\nfmul v0.4s, v0.4s, v1.s[0]\nret",
  "ll": "define <4 x float> @test(<4 x float> %a) {\n  %r = fmul <4 x float> %a, splat (float 7.0)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <4 x float> %a, splat (float 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "fmul",
  "ty": "<8 x float>",
  "variant": "binop",
  "codesize": 1,
  "thru": 4,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmul v1.4s, v1.4s, v3.4s\nfmul v0.4s, v0.4s, v2.4s\nret",
  "giasm": "fmul v0.4s, v0.4s, v2.4s\nfmul v1.4s, v1.4s, v3.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, <8 x float> %b) {\n  %r = fmul <8 x float> %a, %b\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <8 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "fmul",
  "ty": "<8 x float>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 4,
  "lat": 3,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfmul v0.4s, v0.4s, v2.4s\nfmul v1.4s, v1.4s, v2.4s\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfmul v0.4s, v0.4s, v2.4s\nfmul v1.4s, v1.4s, v2.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a) {\n  %r = fmul <8 x float> %a, <float 7.0, float 6.0, float 7.0, float 6.0, float 7.0, float 6.0, float 7.0, float 6.0>\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <8 x float> %a, <float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00>\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "fmul",
  "ty": "<8 x float>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 6,
  "lat": 5,
  "sizelat": 3,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmul v0.4s, v0.4s, v2.s[0]\nfmul v1.4s, v1.4s, v2.s[0]\nret",
  "giasm": "fmul v0.4s, v0.4s, v2.s[0]\nfmul v1.4s, v1.4s, v2.s[0]\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, float %bs) {\n  %i = insertelement <8 x float> poison, float %bs, i64 0\n  %b = shufflevector <8 x float> %i, <8 x float> poison, <8 x i32> zeroinitializer\n  %r = fmul <8 x float> %a, %b\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <8 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <8 x float> %i, <8 x float> poison, <8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <8 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "fmul",
  "ty": "<8 x float>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 4,
  "lat": 3,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fmov v2.4s, #7.00000000\nfmul v0.4s, v0.4s, v2.4s\nfmul v1.4s, v1.4s, v2.4s\nret",
  "giasm": "fmov s2, #7.00000000\nfmul v0.4s, v0.4s, v2.s[0]\nfmul v1.4s, v1.4s, v2.s[0]\nret",
  "ll": "define <8 x float> @test(<8 x float> %a) {\n  %r = fmul <8 x float> %a, splat (float 7.0)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <8 x float> %a, splat (float 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "fmul",
  "ty": "<2 x double>",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmul v0.2d, v0.2d, v1.2d\nret",
  "giasm": "fmul v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, <2 x double> %b) {\n  %r = fmul <2 x double> %a, %b\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <2 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "fmul",
  "ty": "<2 x double>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfmul v0.2d, v0.2d, v1.2d\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfmul v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a) {\n  %r = fmul <2 x double> %a, <double 7.0, double 6.0>\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <2 x double> %a, <double 7.000000e+00, double 6.000000e+00>\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "fmul",
  "ty": "<2 x double>",
  "variant": "binopsplat",
  "codesize": 2,
  "thru": 3,
  "lat": 4,
  "sizelat": 2,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmul v0.2d, v0.2d, v1.d[0]\nret",
  "giasm": "fmul v0.2d, v0.2d, v1.d[0]\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, double %bs) {\n  %i = insertelement <2 x double> poison, double %bs, i64 0\n  %b = shufflevector <2 x double> %i, <2 x double> poison, <2 x i32> zeroinitializer\n  %r = fmul <2 x double> %a, %b\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <2 x double> poison, double %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <2 x double> %i, <2 x double> poison, <2 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <2 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "fmul",
  "ty": "<2 x double>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov v1.2d, #7.00000000\nfmul v0.2d, v0.2d, v1.2d\nret",
  "giasm": "fmov d1, #7.00000000\nfmul v0.2d, v0.2d, v1.d[0]\nret",
  "ll": "define <2 x double> @test(<2 x double> %a) {\n  %r = fmul <2 x double> %a, splat (double 7.0)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <2 x double> %a, splat (double 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "fmul",
  "ty": "<4 x double>",
  "variant": "binop",
  "codesize": 1,
  "thru": 4,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmul v1.2d, v1.2d, v3.2d\nfmul v0.2d, v0.2d, v2.2d\nret",
  "giasm": "fmul v0.2d, v0.2d, v2.2d\nfmul v1.2d, v1.2d, v3.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, <4 x double> %b) {\n  %r = fmul <4 x double> %a, %b\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <4 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "fmul",
  "ty": "<4 x double>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 4,
  "lat": 3,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfmul v0.2d, v0.2d, v2.2d\nfmul v1.2d, v1.2d, v2.2d\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfmul v0.2d, v0.2d, v2.2d\nfmul v1.2d, v1.2d, v2.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a) {\n  %r = fmul <4 x double> %a, <double 7.0, double 6.0, double 7.0, double 6.0>\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <4 x double> %a, <double 7.000000e+00, double 6.000000e+00, double 7.000000e+00, double 6.000000e+00>\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "fmul",
  "ty": "<4 x double>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 6,
  "lat": 5,
  "sizelat": 3,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmul v0.2d, v0.2d, v2.d[0]\nfmul v1.2d, v1.2d, v2.d[0]\nret",
  "giasm": "fmul v0.2d, v0.2d, v2.d[0]\nfmul v1.2d, v1.2d, v2.d[0]\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, double %bs) {\n  %i = insertelement <4 x double> poison, double %bs, i64 0\n  %b = shufflevector <4 x double> %i, <4 x double> poison, <4 x i32> zeroinitializer\n  %r = fmul <4 x double> %a, %b\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <4 x double> poison, double %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <4 x double> %i, <4 x double> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <4 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "fmul",
  "ty": "<4 x double>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 4,
  "lat": 3,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fmov v2.2d, #7.00000000\nfmul v0.2d, v0.2d, v2.2d\nfmul v1.2d, v1.2d, v2.2d\nret",
  "giasm": "fmov d2, #7.00000000\nfmul v0.2d, v0.2d, v2.d[0]\nfmul v1.2d, v1.2d, v2.d[0]\nret",
  "ll": "define <4 x double> @test(<4 x double> %a) {\n  %r = fmul <4 x double> %a, splat (double 7.0)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <4 x double> %a, splat (double 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "fmul",
  "ty": "<vscale x 4 x half>",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.s\nfmul z0.h, p0/m, z0.h, z1.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x half> (<vscale x 4 x half>, <vscale x 4 x half>) (in function: test)",
  "ll": "define <vscale x 4 x half> @test(<vscale x 4 x half> %a, <vscale x 4 x half> %b) {\n  %r = fmul <vscale x 4 x half> %a, %b\n  ret <vscale x 4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <vscale x 4 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x half> %r"
 },
 {
  "instr": "fmul",
  "ty": "<vscale x 4 x half>",
  "variant": "binopsplat",
  "codesize": 2,
  "thru": 3,
  "lat": 4,
  "sizelat": 2,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.s\nmov z1.h, h1\nfmul z0.h, p0/m, z0.h, z1.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x half> (<vscale x 4 x half>, half) (in function: test)",
  "ll": "define <vscale x 4 x half> @test(<vscale x 4 x half> %a, half %bs) {\n  %i = insertelement <vscale x 4 x half> poison, half %bs, i64 0\n  %b = shufflevector <vscale x 4 x half> %i, <vscale x 4 x half> poison, <vscale x 4 x i32> zeroinitializer\n  %r = fmul <vscale x 4 x half> %a, %b\n  ret <vscale x 4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 4 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <vscale x 4 x half> %i, <vscale x 4 x half> poison, <vscale x 4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <vscale x 4 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x half> %r"
 },
 {
  "instr": "fmul",
  "ty": "<vscale x 4 x half>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "fmov z1.h, #7.00000000\nptrue p0.s\nfmul z0.h, p0/m, z0.h, z1.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x half> (<vscale x 4 x half>) (in function: test)",
  "ll": "define <vscale x 4 x half> @test(<vscale x 4 x half> %a) {\n  %r = fmul <vscale x 4 x half> %a, splat (half 7.0)\n  ret <vscale x 4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <vscale x 4 x half> %a, splat (half 0xH4700)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x half> %r"
 },
 {
  "instr": "fmul",
  "ty": "<vscale x 8 x half>",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "fmul z0.h, z0.h, z1.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x half> (<vscale x 8 x half>, <vscale x 8 x half>) (in function: test)",
  "ll": "define <vscale x 8 x half> @test(<vscale x 8 x half> %a, <vscale x 8 x half> %b) {\n  %r = fmul <vscale x 8 x half> %a, %b\n  ret <vscale x 8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <vscale x 8 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x half> %r"
 },
 {
  "instr": "fmul",
  "ty": "<vscale x 8 x half>",
  "variant": "binopsplat",
  "codesize": 2,
  "thru": 3,
  "lat": 4,
  "sizelat": 2,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "mov z1.h, h1\nfmul z0.h, z0.h, z1.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x half> (<vscale x 8 x half>, half) (in function: test)",
  "ll": "define <vscale x 8 x half> @test(<vscale x 8 x half> %a, half %bs) {\n  %i = insertelement <vscale x 8 x half> poison, half %bs, i64 0\n  %b = shufflevector <vscale x 8 x half> %i, <vscale x 8 x half> poison, <vscale x 8 x i32> zeroinitializer\n  %r = fmul <vscale x 8 x half> %a, %b\n  ret <vscale x 8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 8 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <vscale x 8 x half> %i, <vscale x 8 x half> poison, <vscale x 8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <vscale x 8 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x half> %r"
 },
 {
  "instr": "fmul",
  "ty": "<vscale x 8 x half>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "fmov z1.h, #7.00000000\nfmul z0.h, z0.h, z1.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x half> (<vscale x 8 x half>) (in function: test)",
  "ll": "define <vscale x 8 x half> @test(<vscale x 8 x half> %a) {\n  %r = fmul <vscale x 8 x half> %a, splat (half 7.0)\n  ret <vscale x 8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <vscale x 8 x half> %a, splat (half 0xH4700)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x half> %r"
 },
 {
  "instr": "fmul",
  "ty": "<vscale x 16 x half>",
  "variant": "binop",
  "codesize": 1,
  "thru": 4,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "fmul z1.h, z1.h, z3.h\nfmul z0.h, z0.h, z2.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 16 x half> (<vscale x 16 x half>, <vscale x 16 x half>) (in function: test)",
  "ll": "define <vscale x 16 x half> @test(<vscale x 16 x half> %a, <vscale x 16 x half> %b) {\n  %r = fmul <vscale x 16 x half> %a, %b\n  ret <vscale x 16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <vscale x 16 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 16 x half> %r"
 },
 {
  "instr": "fmul",
  "ty": "<vscale x 16 x half>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 6,
  "lat": 5,
  "sizelat": 3,
  "size": 3,
  "gisize": -1,
  "extrasize": 0,
  "asm": "mov z2.h, h2\nfmul z0.h, z0.h, z2.h\nfmul z1.h, z1.h, z2.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 16 x half> (<vscale x 16 x half>, half) (in function: test)",
  "ll": "define <vscale x 16 x half> @test(<vscale x 16 x half> %a, half %bs) {\n  %i = insertelement <vscale x 16 x half> poison, half %bs, i64 0\n  %b = shufflevector <vscale x 16 x half> %i, <vscale x 16 x half> poison, <vscale x 16 x i32> zeroinitializer\n  %r = fmul <vscale x 16 x half> %a, %b\n  ret <vscale x 16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 16 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <vscale x 16 x half> %i, <vscale x 16 x half> poison, <vscale x 16 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <vscale x 16 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 16 x half> %r"
 },
 {
  "instr": "fmul",
  "ty": "<vscale x 16 x half>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 4,
  "lat": 3,
  "sizelat": 1,
  "size": 3,
  "gisize": -1,
  "extrasize": 0,
  "asm": "fmov z2.h, #7.00000000\nfmul z0.h, z0.h, z2.h\nfmul z1.h, z1.h, z2.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 16 x half> (<vscale x 16 x half>) (in function: test)",
  "ll": "define <vscale x 16 x half> @test(<vscale x 16 x half> %a) {\n  %r = fmul <vscale x 16 x half> %a, splat (half 7.0)\n  ret <vscale x 16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <vscale x 16 x half> %a, splat (half 0xH4700)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 16 x half> %r"
 },
 {
  "instr": "fmul",
  "ty": "<vscale x 2 x float>",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.d\nfmul z0.s, p0/m, z0.s, z1.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x float> (<vscale x 2 x float>, <vscale x 2 x float>) (in function: test)",
  "ll": "define <vscale x 2 x float> @test(<vscale x 2 x float> %a, <vscale x 2 x float> %b) {\n  %r = fmul <vscale x 2 x float> %a, %b\n  ret <vscale x 2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <vscale x 2 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x float> %r"
 },
 {
  "instr": "fmul",
  "ty": "<vscale x 2 x float>",
  "variant": "binopsplat",
  "codesize": 2,
  "thru": 3,
  "lat": 4,
  "sizelat": 2,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.d\nmov z1.s, s1\nfmul z0.s, p0/m, z0.s, z1.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x float> (<vscale x 2 x float>, float) (in function: test)",
  "ll": "define <vscale x 2 x float> @test(<vscale x 2 x float> %a, float %bs) {\n  %i = insertelement <vscale x 2 x float> poison, float %bs, i64 0\n  %b = shufflevector <vscale x 2 x float> %i, <vscale x 2 x float> poison, <vscale x 2 x i32> zeroinitializer\n  %r = fmul <vscale x 2 x float> %a, %b\n  ret <vscale x 2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 2 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <vscale x 2 x float> %i, <vscale x 2 x float> poison, <vscale x 2 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <vscale x 2 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x float> %r"
 },
 {
  "instr": "fmul",
  "ty": "<vscale x 2 x float>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "fmov z1.s, #7.00000000\nptrue p0.d\nfmul z0.s, p0/m, z0.s, z1.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x float> (<vscale x 2 x float>) (in function: test)",
  "ll": "define <vscale x 2 x float> @test(<vscale x 2 x float> %a) {\n  %r = fmul <vscale x 2 x float> %a, splat (float 7.0)\n  ret <vscale x 2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <vscale x 2 x float> %a, splat (float 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x float> %r"
 },
 {
  "instr": "fmul",
  "ty": "<vscale x 4 x float>",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "fmul z0.s, z0.s, z1.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x float> (<vscale x 4 x float>, <vscale x 4 x float>) (in function: test)",
  "ll": "define <vscale x 4 x float> @test(<vscale x 4 x float> %a, <vscale x 4 x float> %b) {\n  %r = fmul <vscale x 4 x float> %a, %b\n  ret <vscale x 4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <vscale x 4 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x float> %r"
 },
 {
  "instr": "fmul",
  "ty": "<vscale x 4 x float>",
  "variant": "binopsplat",
  "codesize": 2,
  "thru": 3,
  "lat": 4,
  "sizelat": 2,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "mov z1.s, s1\nfmul z0.s, z0.s, z1.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x float> (<vscale x 4 x float>, float) (in function: test)",
  "ll": "define <vscale x 4 x float> @test(<vscale x 4 x float> %a, float %bs) {\n  %i = insertelement <vscale x 4 x float> poison, float %bs, i64 0\n  %b = shufflevector <vscale x 4 x float> %i, <vscale x 4 x float> poison, <vscale x 4 x i32> zeroinitializer\n  %r = fmul <vscale x 4 x float> %a, %b\n  ret <vscale x 4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 4 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <vscale x 4 x float> %i, <vscale x 4 x float> poison, <vscale x 4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <vscale x 4 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x float> %r"
 },
 {
  "instr": "fmul",
  "ty": "<vscale x 4 x float>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "fmov z1.s, #7.00000000\nfmul z0.s, z0.s, z1.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x float> (<vscale x 4 x float>) (in function: test)",
  "ll": "define <vscale x 4 x float> @test(<vscale x 4 x float> %a) {\n  %r = fmul <vscale x 4 x float> %a, splat (float 7.0)\n  ret <vscale x 4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <vscale x 4 x float> %a, splat (float 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x float> %r"
 },
 {
  "instr": "fmul",
  "ty": "<vscale x 8 x float>",
  "variant": "binop",
  "codesize": 1,
  "thru": 4,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "fmul z1.s, z1.s, z3.s\nfmul z0.s, z0.s, z2.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x float> (<vscale x 8 x float>, <vscale x 8 x float>) (in function: test)",
  "ll": "define <vscale x 8 x float> @test(<vscale x 8 x float> %a, <vscale x 8 x float> %b) {\n  %r = fmul <vscale x 8 x float> %a, %b\n  ret <vscale x 8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <vscale x 8 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x float> %r"
 },
 {
  "instr": "fmul",
  "ty": "<vscale x 8 x float>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 6,
  "lat": 5,
  "sizelat": 3,
  "size": 3,
  "gisize": -1,
  "extrasize": 0,
  "asm": "mov z2.s, s2\nfmul z0.s, z0.s, z2.s\nfmul z1.s, z1.s, z2.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x float> (<vscale x 8 x float>, float) (in function: test)",
  "ll": "define <vscale x 8 x float> @test(<vscale x 8 x float> %a, float %bs) {\n  %i = insertelement <vscale x 8 x float> poison, float %bs, i64 0\n  %b = shufflevector <vscale x 8 x float> %i, <vscale x 8 x float> poison, <vscale x 8 x i32> zeroinitializer\n  %r = fmul <vscale x 8 x float> %a, %b\n  ret <vscale x 8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 8 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <vscale x 8 x float> %i, <vscale x 8 x float> poison, <vscale x 8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <vscale x 8 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x float> %r"
 },
 {
  "instr": "fmul",
  "ty": "<vscale x 8 x float>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 4,
  "lat": 3,
  "sizelat": 1,
  "size": 3,
  "gisize": -1,
  "extrasize": 0,
  "asm": "fmov z2.s, #7.00000000\nfmul z0.s, z0.s, z2.s\nfmul z1.s, z1.s, z2.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x float> (<vscale x 8 x float>) (in function: test)",
  "ll": "define <vscale x 8 x float> @test(<vscale x 8 x float> %a) {\n  %r = fmul <vscale x 8 x float> %a, splat (float 7.0)\n  ret <vscale x 8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <vscale x 8 x float> %a, splat (float 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x float> %r"
 },
 {
  "instr": "fmul",
  "ty": "<vscale x 2 x double>",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "fmul z0.d, z0.d, z1.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x double> (<vscale x 2 x double>, <vscale x 2 x double>) (in function: test)",
  "ll": "define <vscale x 2 x double> @test(<vscale x 2 x double> %a, <vscale x 2 x double> %b) {\n  %r = fmul <vscale x 2 x double> %a, %b\n  ret <vscale x 2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <vscale x 2 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x double> %r"
 },
 {
  "instr": "fmul",
  "ty": "<vscale x 2 x double>",
  "variant": "binopsplat",
  "codesize": 2,
  "thru": 3,
  "lat": 4,
  "sizelat": 2,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "mov z1.d, d1\nfmul z0.d, z0.d, z1.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x double> (<vscale x 2 x double>, double) (in function: test)",
  "ll": "define <vscale x 2 x double> @test(<vscale x 2 x double> %a, double %bs) {\n  %i = insertelement <vscale x 2 x double> poison, double %bs, i64 0\n  %b = shufflevector <vscale x 2 x double> %i, <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer\n  %r = fmul <vscale x 2 x double> %a, %b\n  ret <vscale x 2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 2 x double> poison, double %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <vscale x 2 x double> %i, <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <vscale x 2 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x double> %r"
 },
 {
  "instr": "fmul",
  "ty": "<vscale x 2 x double>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "fmov z1.d, #7.00000000\nfmul z0.d, z0.d, z1.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x double> (<vscale x 2 x double>) (in function: test)",
  "ll": "define <vscale x 2 x double> @test(<vscale x 2 x double> %a) {\n  %r = fmul <vscale x 2 x double> %a, splat (double 7.0)\n  ret <vscale x 2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <vscale x 2 x double> %a, splat (double 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x double> %r"
 },
 {
  "instr": "fmul",
  "ty": "<vscale x 4 x double>",
  "variant": "binop",
  "codesize": 1,
  "thru": 4,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "fmul z1.d, z1.d, z3.d\nfmul z0.d, z0.d, z2.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x double> (<vscale x 4 x double>, <vscale x 4 x double>) (in function: test)",
  "ll": "define <vscale x 4 x double> @test(<vscale x 4 x double> %a, <vscale x 4 x double> %b) {\n  %r = fmul <vscale x 4 x double> %a, %b\n  ret <vscale x 4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <vscale x 4 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x double> %r"
 },
 {
  "instr": "fmul",
  "ty": "<vscale x 4 x double>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 6,
  "lat": 5,
  "sizelat": 3,
  "size": 3,
  "gisize": -1,
  "extrasize": 0,
  "asm": "mov z2.d, d2\nfmul z0.d, z0.d, z2.d\nfmul z1.d, z1.d, z2.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x double> (<vscale x 4 x double>, double) (in function: test)",
  "ll": "define <vscale x 4 x double> @test(<vscale x 4 x double> %a, double %bs) {\n  %i = insertelement <vscale x 4 x double> poison, double %bs, i64 0\n  %b = shufflevector <vscale x 4 x double> %i, <vscale x 4 x double> poison, <vscale x 4 x i32> zeroinitializer\n  %r = fmul <vscale x 4 x double> %a, %b\n  ret <vscale x 4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 4 x double> poison, double %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <vscale x 4 x double> %i, <vscale x 4 x double> poison, <vscale x 4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <vscale x 4 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x double> %r"
 },
 {
  "instr": "fmul",
  "ty": "<vscale x 4 x double>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 4,
  "lat": 3,
  "sizelat": 1,
  "size": 3,
  "gisize": -1,
  "extrasize": 0,
  "asm": "fmov z2.d, #7.00000000\nfmul z0.d, z0.d, z2.d\nfmul z1.d, z1.d, z2.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x double> (<vscale x 4 x double>) (in function: test)",
  "ll": "define <vscale x 4 x double> @test(<vscale x 4 x double> %a) {\n  %r = fmul <vscale x 4 x double> %a, splat (double 7.0)\n  ret <vscale x 4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <vscale x 4 x double> %a, splat (double 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x double> %r"
 },
 {
  "instr": "fdiv",
  "ty": "half",
  "variant": "binop",
  "codesize": 4,
  "thru": 2,
  "lat": 4,
  "sizelat": 4,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fdiv h0, h0, h1\nret",
  "giasm": "fdiv h0, h0, h1\nret",
  "ll": "define half @test(half %a, half %b) {\n  %r = fdiv half %a, %b\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv half %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "fdiv",
  "ty": "half",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 2,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov h1, #7.00000000\nfdiv h0, h0, h1\nret",
  "giasm": "fmov h1, #7.00000000\nfdiv h0, h0, h1\nret",
  "ll": "define half @test(half %a) {\n  %r = fdiv half %a, 7.0\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv half %a, 0xH4700\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "fdiv",
  "ty": "float",
  "variant": "binop",
  "codesize": 4,
  "thru": 2,
  "lat": 4,
  "sizelat": 4,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fdiv s0, s0, s1\nret",
  "giasm": "fdiv s0, s0, s1\nret",
  "ll": "define float @test(float %a, float %b) {\n  %r = fdiv float %a, %b\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv float %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "fdiv",
  "ty": "float",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 2,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov s1, #7.00000000\nfdiv s0, s0, s1\nret",
  "giasm": "fmov s1, #7.00000000\nfdiv s0, s0, s1\nret",
  "ll": "define float @test(float %a) {\n  %r = fdiv float %a, 7.0\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv float %a, 7.000000e+00\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "fdiv",
  "ty": "double",
  "variant": "binop",
  "codesize": 4,
  "thru": 2,
  "lat": 4,
  "sizelat": 4,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fdiv d0, d0, d1\nret",
  "giasm": "fdiv d0, d0, d1\nret",
  "ll": "define double @test(double %a, double %b) {\n  %r = fdiv double %a, %b\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv double %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "fdiv",
  "ty": "double",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 2,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov d1, #7.00000000\nfdiv d0, d0, d1\nret",
  "giasm": "fmov d1, #7.00000000\nfdiv d0, d0, d1\nret",
  "ll": "define double @test(double %a) {\n  %r = fdiv double %a, 7.0\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv double %a, 7.000000e+00\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "fdiv",
  "ty": "<4 x half>",
  "variant": "binop",
  "codesize": 4,
  "thru": 2,
  "lat": 4,
  "sizelat": 4,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fdiv v0.4h, v0.4h, v1.4h\nret",
  "giasm": "fdiv v0.4h, v0.4h, v1.4h\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, <4 x half> %b) {\n  %r = fdiv <4 x half> %a, %b\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <4 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<4 x half>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 2,
  "lat": 4,
  "sizelat": 4,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr d1, [x8, :lo12:.LCPI0_0]\nfdiv v0.4h, v0.4h, v1.4h\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr d1, [x8, :lo12:.LCPI0_0]\nfdiv v0.4h, v0.4h, v1.4h\nret",
  "ll": "define <4 x half> @test(<4 x half> %a) {\n  %r = fdiv <4 x half> %a, <half 7.0, half 6.0, half 7.0, half 6.0>\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <4 x half> %a, <half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600>\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<4 x half>",
  "variant": "binopsplat",
  "codesize": 5,
  "thru": 3,
  "lat": 5,
  "sizelat": 5,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "dup v1.4h, v1.h[0]\nfdiv v0.4h, v0.4h, v1.4h\nret",
  "giasm": "dup v1.4h, v1.h[0]\nfdiv v0.4h, v0.4h, v1.4h\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, half %bs) {\n  %i = insertelement <4 x half> poison, half %bs, i64 0\n  %b = shufflevector <4 x half> %i, <4 x half> poison, <4 x i32> zeroinitializer\n  %r = fdiv <4 x half> %a, %b\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <4 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <4 x half> %i, <4 x half> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <4 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<4 x half>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 2,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "movi v1.4h, #71, lsl #8\nfdiv v0.4h, v0.4h, v1.4h\nret",
  "giasm": "movi v1.4h, #71, lsl #8\nfdiv v0.4h, v0.4h, v1.4h\nret",
  "ll": "define <4 x half> @test(<4 x half> %a) {\n  %r = fdiv <4 x half> %a, splat (half 7.0)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <4 x half> %a, splat (half 0xH4700)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<8 x half>",
  "variant": "binop",
  "codesize": 4,
  "thru": 2,
  "lat": 4,
  "sizelat": 4,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fdiv v0.8h, v0.8h, v1.8h\nret",
  "giasm": "fdiv v0.8h, v0.8h, v1.8h\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, <8 x half> %b) {\n  %r = fdiv <8 x half> %a, %b\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <8 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<8 x half>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 2,
  "lat": 4,
  "sizelat": 4,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfdiv v0.8h, v0.8h, v1.8h\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfdiv v0.8h, v0.8h, v1.8h\nret",
  "ll": "define <8 x half> @test(<8 x half> %a) {\n  %r = fdiv <8 x half> %a, <half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0>\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <8 x half> %a, <half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600>\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<8 x half>",
  "variant": "binopsplat",
  "codesize": 5,
  "thru": 3,
  "lat": 5,
  "sizelat": 5,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "dup v1.8h, v1.h[0]\nfdiv v0.8h, v0.8h, v1.8h\nret",
  "giasm": "dup v1.8h, v1.h[0]\nfdiv v0.8h, v0.8h, v1.8h\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, half %bs) {\n  %i = insertelement <8 x half> poison, half %bs, i64 0\n  %b = shufflevector <8 x half> %i, <8 x half> poison, <8 x i32> zeroinitializer\n  %r = fdiv <8 x half> %a, %b\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <8 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <8 x half> %i, <8 x half> poison, <8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <8 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<8 x half>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 2,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "movi v1.8h, #71, lsl #8\nfdiv v0.8h, v0.8h, v1.8h\nret",
  "giasm": "movi v1.8h, #71, lsl #8\nfdiv v0.8h, v0.8h, v1.8h\nret",
  "ll": "define <8 x half> @test(<8 x half> %a) {\n  %r = fdiv <8 x half> %a, splat (half 7.0)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <8 x half> %a, splat (half 0xH4700)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<16 x half>",
  "variant": "binop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fdiv v1.8h, v1.8h, v3.8h\nfdiv v0.8h, v0.8h, v2.8h\nret",
  "giasm": "fdiv v0.8h, v0.8h, v2.8h\nfdiv v1.8h, v1.8h, v3.8h\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, <16 x half> %b) {\n  %r = fdiv <16 x half> %a, %b\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <16 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<16 x half>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfdiv v0.8h, v0.8h, v2.8h\nfdiv v1.8h, v1.8h, v2.8h\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfdiv v0.8h, v0.8h, v2.8h\nfdiv v1.8h, v1.8h, v2.8h\nret",
  "ll": "define <16 x half> @test(<16 x half> %a) {\n  %r = fdiv <16 x half> %a, <half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0>\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <16 x half> %a, <half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600>\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<16 x half>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 6,
  "lat": 6,
  "sizelat": 6,
  "size": 3,
  "gisize": 4,
  "extrasize": 0,
  "asm": "dup v2.8h, v2.h[0]\nfdiv v0.8h, v0.8h, v2.8h\nfdiv v1.8h, v1.8h, v2.8h\nret",
  "giasm": "dup v3.8h, v2.h[0]\ndup v2.8h, v2.h[0]\nfdiv v0.8h, v0.8h, v3.8h\nfdiv v1.8h, v1.8h, v2.8h\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, half %bs) {\n  %i = insertelement <16 x half> poison, half %bs, i64 0\n  %b = shufflevector <16 x half> %i, <16 x half> poison, <16 x i32> zeroinitializer\n  %r = fdiv <16 x half> %a, %b\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <16 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <16 x half> %i, <16 x half> poison, <16 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <16 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<16 x half>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "movi v2.8h, #71, lsl #8\nfdiv v0.8h, v0.8h, v2.8h\nfdiv v1.8h, v1.8h, v2.8h\nret",
  "giasm": "movi v2.8h, #71, lsl #8\nfdiv v0.8h, v0.8h, v2.8h\nfdiv v1.8h, v1.8h, v2.8h\nret",
  "ll": "define <16 x half> @test(<16 x half> %a) {\n  %r = fdiv <16 x half> %a, splat (half 7.0)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <16 x half> %a, splat (half 0xH4700)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<2 x float>",
  "variant": "binop",
  "codesize": 4,
  "thru": 2,
  "lat": 4,
  "sizelat": 4,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fdiv v0.2s, v0.2s, v1.2s\nret",
  "giasm": "fdiv v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, <2 x float> %b) {\n  %r = fdiv <2 x float> %a, %b\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <2 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<2 x float>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 2,
  "lat": 4,
  "sizelat": 4,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr d1, [x8, :lo12:.LCPI0_0]\nfdiv v0.2s, v0.2s, v1.2s\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr d1, [x8, :lo12:.LCPI0_0]\nfdiv v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a) {\n  %r = fdiv <2 x float> %a, <float 7.0, float 6.0>\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <2 x float> %a, <float 7.000000e+00, float 6.000000e+00>\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<2 x float>",
  "variant": "binopsplat",
  "codesize": 5,
  "thru": 3,
  "lat": 5,
  "sizelat": 5,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "dup v1.2s, v1.s[0]\nfdiv v0.2s, v0.2s, v1.2s\nret",
  "giasm": "dup v1.2s, v1.s[0]\nfdiv v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, float %bs) {\n  %i = insertelement <2 x float> poison, float %bs, i64 0\n  %b = shufflevector <2 x float> %i, <2 x float> poison, <2 x i32> zeroinitializer\n  %r = fdiv <2 x float> %a, %b\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <2 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <2 x float> %i, <2 x float> poison, <2 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <2 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<2 x float>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 2,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov v1.2s, #7.00000000\nfdiv v0.2s, v0.2s, v1.2s\nret",
  "giasm": "fmov v1.2s, #7.00000000\nfdiv v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a) {\n  %r = fdiv <2 x float> %a, splat (float 7.0)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <2 x float> %a, splat (float 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<4 x float>",
  "variant": "binop",
  "codesize": 4,
  "thru": 2,
  "lat": 4,
  "sizelat": 4,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fdiv v0.4s, v0.4s, v1.4s\nret",
  "giasm": "fdiv v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, <4 x float> %b) {\n  %r = fdiv <4 x float> %a, %b\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <4 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<4 x float>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 2,
  "lat": 4,
  "sizelat": 4,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfdiv v0.4s, v0.4s, v1.4s\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfdiv v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a) {\n  %r = fdiv <4 x float> %a, <float 7.0, float 6.0, float 7.0, float 6.0>\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <4 x float> %a, <float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00>\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<4 x float>",
  "variant": "binopsplat",
  "codesize": 5,
  "thru": 3,
  "lat": 5,
  "sizelat": 5,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "dup v1.4s, v1.s[0]\nfdiv v0.4s, v0.4s, v1.4s\nret",
  "giasm": "dup v1.4s, v1.s[0]\nfdiv v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, float %bs) {\n  %i = insertelement <4 x float> poison, float %bs, i64 0\n  %b = shufflevector <4 x float> %i, <4 x float> poison, <4 x i32> zeroinitializer\n  %r = fdiv <4 x float> %a, %b\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <4 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <4 x float> %i, <4 x float> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <4 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<4 x float>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 2,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov v1.4s, #7.00000000\nfdiv v0.4s, v0.4s, v1.4s\nret",
  "giasm": "fmov v1.4s, #7.00000000\nfdiv v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a) {\n  %r = fdiv <4 x float> %a, splat (float 7.0)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <4 x float> %a, splat (float 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<8 x float>",
  "variant": "binop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fdiv v1.4s, v1.4s, v3.4s\nfdiv v0.4s, v0.4s, v2.4s\nret",
  "giasm": "fdiv v0.4s, v0.4s, v2.4s\nfdiv v1.4s, v1.4s, v3.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, <8 x float> %b) {\n  %r = fdiv <8 x float> %a, %b\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <8 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<8 x float>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfdiv v0.4s, v0.4s, v2.4s\nfdiv v1.4s, v1.4s, v2.4s\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfdiv v0.4s, v0.4s, v2.4s\nfdiv v1.4s, v1.4s, v2.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a) {\n  %r = fdiv <8 x float> %a, <float 7.0, float 6.0, float 7.0, float 6.0, float 7.0, float 6.0, float 7.0, float 6.0>\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <8 x float> %a, <float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00>\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<8 x float>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 6,
  "lat": 6,
  "sizelat": 6,
  "size": 3,
  "gisize": 4,
  "extrasize": 0,
  "asm": "dup v2.4s, v2.s[0]\nfdiv v0.4s, v0.4s, v2.4s\nfdiv v1.4s, v1.4s, v2.4s\nret",
  "giasm": "dup v3.4s, v2.s[0]\ndup v2.4s, v2.s[0]\nfdiv v0.4s, v0.4s, v3.4s\nfdiv v1.4s, v1.4s, v2.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, float %bs) {\n  %i = insertelement <8 x float> poison, float %bs, i64 0\n  %b = shufflevector <8 x float> %i, <8 x float> poison, <8 x i32> zeroinitializer\n  %r = fdiv <8 x float> %a, %b\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <8 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <8 x float> %i, <8 x float> poison, <8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <8 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<8 x float>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fmov v2.4s, #7.00000000\nfdiv v0.4s, v0.4s, v2.4s\nfdiv v1.4s, v1.4s, v2.4s\nret",
  "giasm": "fmov v2.4s, #7.00000000\nfdiv v0.4s, v0.4s, v2.4s\nfdiv v1.4s, v1.4s, v2.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a) {\n  %r = fdiv <8 x float> %a, splat (float 7.0)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <8 x float> %a, splat (float 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<2 x double>",
  "variant": "binop",
  "codesize": 4,
  "thru": 2,
  "lat": 4,
  "sizelat": 4,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fdiv v0.2d, v0.2d, v1.2d\nret",
  "giasm": "fdiv v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, <2 x double> %b) {\n  %r = fdiv <2 x double> %a, %b\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <2 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<2 x double>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 2,
  "lat": 4,
  "sizelat": 4,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfdiv v0.2d, v0.2d, v1.2d\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfdiv v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a) {\n  %r = fdiv <2 x double> %a, <double 7.0, double 6.0>\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <2 x double> %a, <double 7.000000e+00, double 6.000000e+00>\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<2 x double>",
  "variant": "binopsplat",
  "codesize": 5,
  "thru": 3,
  "lat": 5,
  "sizelat": 5,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "dup v1.2d, v1.d[0]\nfdiv v0.2d, v0.2d, v1.2d\nret",
  "giasm": "dup v1.2d, v1.d[0]\nfdiv v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, double %bs) {\n  %i = insertelement <2 x double> poison, double %bs, i64 0\n  %b = shufflevector <2 x double> %i, <2 x double> poison, <2 x i32> zeroinitializer\n  %r = fdiv <2 x double> %a, %b\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <2 x double> poison, double %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <2 x double> %i, <2 x double> poison, <2 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <2 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<2 x double>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 2,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov v1.2d, #7.00000000\nfdiv v0.2d, v0.2d, v1.2d\nret",
  "giasm": "fmov v1.2d, #7.00000000\nfdiv v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a) {\n  %r = fdiv <2 x double> %a, splat (double 7.0)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <2 x double> %a, splat (double 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<4 x double>",
  "variant": "binop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fdiv v1.2d, v1.2d, v3.2d\nfdiv v0.2d, v0.2d, v2.2d\nret",
  "giasm": "fdiv v0.2d, v0.2d, v2.2d\nfdiv v1.2d, v1.2d, v3.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, <4 x double> %b) {\n  %r = fdiv <4 x double> %a, %b\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <4 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<4 x double>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfdiv v0.2d, v0.2d, v2.2d\nfdiv v1.2d, v1.2d, v2.2d\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfdiv v0.2d, v0.2d, v2.2d\nfdiv v1.2d, v1.2d, v2.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a) {\n  %r = fdiv <4 x double> %a, <double 7.0, double 6.0, double 7.0, double 6.0>\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <4 x double> %a, <double 7.000000e+00, double 6.000000e+00, double 7.000000e+00, double 6.000000e+00>\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<4 x double>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 6,
  "lat": 6,
  "sizelat": 6,
  "size": 3,
  "gisize": 4,
  "extrasize": 0,
  "asm": "dup v2.2d, v2.d[0]\nfdiv v0.2d, v0.2d, v2.2d\nfdiv v1.2d, v1.2d, v2.2d\nret",
  "giasm": "dup v3.2d, v2.d[0]\ndup v2.2d, v2.d[0]\nfdiv v0.2d, v0.2d, v3.2d\nfdiv v1.2d, v1.2d, v2.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, double %bs) {\n  %i = insertelement <4 x double> poison, double %bs, i64 0\n  %b = shufflevector <4 x double> %i, <4 x double> poison, <4 x i32> zeroinitializer\n  %r = fdiv <4 x double> %a, %b\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <4 x double> poison, double %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <4 x double> %i, <4 x double> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <4 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<4 x double>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fmov v2.2d, #7.00000000\nfdiv v0.2d, v0.2d, v2.2d\nfdiv v1.2d, v1.2d, v2.2d\nret",
  "giasm": "fmov v2.2d, #7.00000000\nfdiv v0.2d, v0.2d, v2.2d\nfdiv v1.2d, v1.2d, v2.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a) {\n  %r = fdiv <4 x double> %a, splat (double 7.0)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <4 x double> %a, splat (double 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<vscale x 4 x half>",
  "variant": "binop",
  "codesize": 4,
  "thru": 2,
  "lat": 4,
  "sizelat": 4,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.s\nfdiv z0.h, p0/m, z0.h, z1.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x half> (<vscale x 4 x half>, <vscale x 4 x half>) (in function: test)",
  "ll": "define <vscale x 4 x half> @test(<vscale x 4 x half> %a, <vscale x 4 x half> %b) {\n  %r = fdiv <vscale x 4 x half> %a, %b\n  ret <vscale x 4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <vscale x 4 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x half> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<vscale x 4 x half>",
  "variant": "binopsplat",
  "codesize": 5,
  "thru": 3,
  "lat": 5,
  "sizelat": 5,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.s\nmov z1.h, h1\nfdiv z0.h, p0/m, z0.h, z1.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x half> (<vscale x 4 x half>, half) (in function: test)",
  "ll": "define <vscale x 4 x half> @test(<vscale x 4 x half> %a, half %bs) {\n  %i = insertelement <vscale x 4 x half> poison, half %bs, i64 0\n  %b = shufflevector <vscale x 4 x half> %i, <vscale x 4 x half> poison, <vscale x 4 x i32> zeroinitializer\n  %r = fdiv <vscale x 4 x half> %a, %b\n  ret <vscale x 4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 4 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <vscale x 4 x half> %i, <vscale x 4 x half> poison, <vscale x 4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <vscale x 4 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x half> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<vscale x 4 x half>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 2,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "fmov z1.h, #7.00000000\nptrue p0.s\nfdiv z0.h, p0/m, z0.h, z1.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x half> (<vscale x 4 x half>) (in function: test)",
  "ll": "define <vscale x 4 x half> @test(<vscale x 4 x half> %a) {\n  %r = fdiv <vscale x 4 x half> %a, splat (half 7.0)\n  ret <vscale x 4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <vscale x 4 x half> %a, splat (half 0xH4700)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x half> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<vscale x 8 x half>",
  "variant": "binop",
  "codesize": 4,
  "thru": 2,
  "lat": 4,
  "sizelat": 4,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.h\nfdiv z0.h, p0/m, z0.h, z1.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x half> (<vscale x 8 x half>, <vscale x 8 x half>) (in function: test)",
  "ll": "define <vscale x 8 x half> @test(<vscale x 8 x half> %a, <vscale x 8 x half> %b) {\n  %r = fdiv <vscale x 8 x half> %a, %b\n  ret <vscale x 8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <vscale x 8 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x half> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<vscale x 8 x half>",
  "variant": "binopsplat",
  "codesize": 5,
  "thru": 3,
  "lat": 5,
  "sizelat": 5,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.h\nmov z1.h, h1\nfdiv z0.h, p0/m, z0.h, z1.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x half> (<vscale x 8 x half>, half) (in function: test)",
  "ll": "define <vscale x 8 x half> @test(<vscale x 8 x half> %a, half %bs) {\n  %i = insertelement <vscale x 8 x half> poison, half %bs, i64 0\n  %b = shufflevector <vscale x 8 x half> %i, <vscale x 8 x half> poison, <vscale x 8 x i32> zeroinitializer\n  %r = fdiv <vscale x 8 x half> %a, %b\n  ret <vscale x 8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 8 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <vscale x 8 x half> %i, <vscale x 8 x half> poison, <vscale x 8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <vscale x 8 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x half> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<vscale x 8 x half>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 2,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "fmov z1.h, #7.00000000\nptrue p0.h\nfdiv z0.h, p0/m, z0.h, z1.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x half> (<vscale x 8 x half>) (in function: test)",
  "ll": "define <vscale x 8 x half> @test(<vscale x 8 x half> %a) {\n  %r = fdiv <vscale x 8 x half> %a, splat (half 7.0)\n  ret <vscale x 8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <vscale x 8 x half> %a, splat (half 0xH4700)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x half> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<vscale x 16 x half>",
  "variant": "binop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.h\nfdiv z0.h, p0/m, z0.h, z2.h\nfdiv z1.h, p0/m, z1.h, z3.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 16 x half> (<vscale x 16 x half>, <vscale x 16 x half>) (in function: test)",
  "ll": "define <vscale x 16 x half> @test(<vscale x 16 x half> %a, <vscale x 16 x half> %b) {\n  %r = fdiv <vscale x 16 x half> %a, %b\n  ret <vscale x 16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <vscale x 16 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 16 x half> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<vscale x 16 x half>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 6,
  "lat": 6,
  "sizelat": 6,
  "size": 3,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.h\nmov z2.h, h2\nfdiv z0.h, p0/m, z0.h, z2.h\nfdiv z1.h, p0/m, z1.h, z2.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 16 x half> (<vscale x 16 x half>, half) (in function: test)",
  "ll": "define <vscale x 16 x half> @test(<vscale x 16 x half> %a, half %bs) {\n  %i = insertelement <vscale x 16 x half> poison, half %bs, i64 0\n  %b = shufflevector <vscale x 16 x half> %i, <vscale x 16 x half> poison, <vscale x 16 x i32> zeroinitializer\n  %r = fdiv <vscale x 16 x half> %a, %b\n  ret <vscale x 16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 16 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <vscale x 16 x half> %i, <vscale x 16 x half> poison, <vscale x 16 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <vscale x 16 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 16 x half> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<vscale x 16 x half>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 3,
  "gisize": -1,
  "extrasize": 0,
  "asm": "fmov z2.h, #7.00000000\nptrue p0.h\nfdiv z0.h, p0/m, z0.h, z2.h\nfdiv z1.h, p0/m, z1.h, z2.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 16 x half> (<vscale x 16 x half>) (in function: test)",
  "ll": "define <vscale x 16 x half> @test(<vscale x 16 x half> %a) {\n  %r = fdiv <vscale x 16 x half> %a, splat (half 7.0)\n  ret <vscale x 16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <vscale x 16 x half> %a, splat (half 0xH4700)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 16 x half> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<vscale x 2 x float>",
  "variant": "binop",
  "codesize": 4,
  "thru": 2,
  "lat": 4,
  "sizelat": 4,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.d\nfdiv z0.s, p0/m, z0.s, z1.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x float> (<vscale x 2 x float>, <vscale x 2 x float>) (in function: test)",
  "ll": "define <vscale x 2 x float> @test(<vscale x 2 x float> %a, <vscale x 2 x float> %b) {\n  %r = fdiv <vscale x 2 x float> %a, %b\n  ret <vscale x 2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <vscale x 2 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x float> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<vscale x 2 x float>",
  "variant": "binopsplat",
  "codesize": 5,
  "thru": 3,
  "lat": 5,
  "sizelat": 5,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.d\nmov z1.s, s1\nfdiv z0.s, p0/m, z0.s, z1.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x float> (<vscale x 2 x float>, float) (in function: test)",
  "ll": "define <vscale x 2 x float> @test(<vscale x 2 x float> %a, float %bs) {\n  %i = insertelement <vscale x 2 x float> poison, float %bs, i64 0\n  %b = shufflevector <vscale x 2 x float> %i, <vscale x 2 x float> poison, <vscale x 2 x i32> zeroinitializer\n  %r = fdiv <vscale x 2 x float> %a, %b\n  ret <vscale x 2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 2 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <vscale x 2 x float> %i, <vscale x 2 x float> poison, <vscale x 2 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <vscale x 2 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x float> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<vscale x 2 x float>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 2,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "fmov z1.s, #7.00000000\nptrue p0.d\nfdiv z0.s, p0/m, z0.s, z1.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x float> (<vscale x 2 x float>) (in function: test)",
  "ll": "define <vscale x 2 x float> @test(<vscale x 2 x float> %a) {\n  %r = fdiv <vscale x 2 x float> %a, splat (float 7.0)\n  ret <vscale x 2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <vscale x 2 x float> %a, splat (float 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x float> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<vscale x 4 x float>",
  "variant": "binop",
  "codesize": 4,
  "thru": 2,
  "lat": 4,
  "sizelat": 4,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.s\nfdiv z0.s, p0/m, z0.s, z1.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x float> (<vscale x 4 x float>, <vscale x 4 x float>) (in function: test)",
  "ll": "define <vscale x 4 x float> @test(<vscale x 4 x float> %a, <vscale x 4 x float> %b) {\n  %r = fdiv <vscale x 4 x float> %a, %b\n  ret <vscale x 4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <vscale x 4 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x float> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<vscale x 4 x float>",
  "variant": "binopsplat",
  "codesize": 5,
  "thru": 3,
  "lat": 5,
  "sizelat": 5,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.s\nmov z1.s, s1\nfdiv z0.s, p0/m, z0.s, z1.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x float> (<vscale x 4 x float>, float) (in function: test)",
  "ll": "define <vscale x 4 x float> @test(<vscale x 4 x float> %a, float %bs) {\n  %i = insertelement <vscale x 4 x float> poison, float %bs, i64 0\n  %b = shufflevector <vscale x 4 x float> %i, <vscale x 4 x float> poison, <vscale x 4 x i32> zeroinitializer\n  %r = fdiv <vscale x 4 x float> %a, %b\n  ret <vscale x 4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 4 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <vscale x 4 x float> %i, <vscale x 4 x float> poison, <vscale x 4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <vscale x 4 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x float> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<vscale x 4 x float>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 2,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "fmov z1.s, #7.00000000\nptrue p0.s\nfdiv z0.s, p0/m, z0.s, z1.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x float> (<vscale x 4 x float>) (in function: test)",
  "ll": "define <vscale x 4 x float> @test(<vscale x 4 x float> %a) {\n  %r = fdiv <vscale x 4 x float> %a, splat (float 7.0)\n  ret <vscale x 4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <vscale x 4 x float> %a, splat (float 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x float> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<vscale x 8 x float>",
  "variant": "binop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.s\nfdiv z0.s, p0/m, z0.s, z2.s\nfdiv z1.s, p0/m, z1.s, z3.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x float> (<vscale x 8 x float>, <vscale x 8 x float>) (in function: test)",
  "ll": "define <vscale x 8 x float> @test(<vscale x 8 x float> %a, <vscale x 8 x float> %b) {\n  %r = fdiv <vscale x 8 x float> %a, %b\n  ret <vscale x 8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <vscale x 8 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x float> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<vscale x 8 x float>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 6,
  "lat": 6,
  "sizelat": 6,
  "size": 3,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.s\nmov z2.s, s2\nfdiv z0.s, p0/m, z0.s, z2.s\nfdiv z1.s, p0/m, z1.s, z2.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x float> (<vscale x 8 x float>, float) (in function: test)",
  "ll": "define <vscale x 8 x float> @test(<vscale x 8 x float> %a, float %bs) {\n  %i = insertelement <vscale x 8 x float> poison, float %bs, i64 0\n  %b = shufflevector <vscale x 8 x float> %i, <vscale x 8 x float> poison, <vscale x 8 x i32> zeroinitializer\n  %r = fdiv <vscale x 8 x float> %a, %b\n  ret <vscale x 8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 8 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <vscale x 8 x float> %i, <vscale x 8 x float> poison, <vscale x 8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <vscale x 8 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x float> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<vscale x 8 x float>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 3,
  "gisize": -1,
  "extrasize": 0,
  "asm": "fmov z2.s, #7.00000000\nptrue p0.s\nfdiv z0.s, p0/m, z0.s, z2.s\nfdiv z1.s, p0/m, z1.s, z2.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x float> (<vscale x 8 x float>) (in function: test)",
  "ll": "define <vscale x 8 x float> @test(<vscale x 8 x float> %a) {\n  %r = fdiv <vscale x 8 x float> %a, splat (float 7.0)\n  ret <vscale x 8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <vscale x 8 x float> %a, splat (float 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x float> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<vscale x 2 x double>",
  "variant": "binop",
  "codesize": 4,
  "thru": 2,
  "lat": 4,
  "sizelat": 4,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.d\nfdiv z0.d, p0/m, z0.d, z1.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x double> (<vscale x 2 x double>, <vscale x 2 x double>) (in function: test)",
  "ll": "define <vscale x 2 x double> @test(<vscale x 2 x double> %a, <vscale x 2 x double> %b) {\n  %r = fdiv <vscale x 2 x double> %a, %b\n  ret <vscale x 2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <vscale x 2 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x double> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<vscale x 2 x double>",
  "variant": "binopsplat",
  "codesize": 5,
  "thru": 3,
  "lat": 5,
  "sizelat": 5,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.d\nmov z1.d, d1\nfdiv z0.d, p0/m, z0.d, z1.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x double> (<vscale x 2 x double>, double) (in function: test)",
  "ll": "define <vscale x 2 x double> @test(<vscale x 2 x double> %a, double %bs) {\n  %i = insertelement <vscale x 2 x double> poison, double %bs, i64 0\n  %b = shufflevector <vscale x 2 x double> %i, <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer\n  %r = fdiv <vscale x 2 x double> %a, %b\n  ret <vscale x 2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 2 x double> poison, double %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <vscale x 2 x double> %i, <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <vscale x 2 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x double> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<vscale x 2 x double>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 2,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "fmov z1.d, #7.00000000\nptrue p0.d\nfdiv z0.d, p0/m, z0.d, z1.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x double> (<vscale x 2 x double>) (in function: test)",
  "ll": "define <vscale x 2 x double> @test(<vscale x 2 x double> %a) {\n  %r = fdiv <vscale x 2 x double> %a, splat (double 7.0)\n  ret <vscale x 2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <vscale x 2 x double> %a, splat (double 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x double> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<vscale x 4 x double>",
  "variant": "binop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.d\nfdiv z0.d, p0/m, z0.d, z2.d\nfdiv z1.d, p0/m, z1.d, z3.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x double> (<vscale x 4 x double>, <vscale x 4 x double>) (in function: test)",
  "ll": "define <vscale x 4 x double> @test(<vscale x 4 x double> %a, <vscale x 4 x double> %b) {\n  %r = fdiv <vscale x 4 x double> %a, %b\n  ret <vscale x 4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <vscale x 4 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x double> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<vscale x 4 x double>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 6,
  "lat": 6,
  "sizelat": 6,
  "size": 3,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.d\nmov z2.d, d2\nfdiv z0.d, p0/m, z0.d, z2.d\nfdiv z1.d, p0/m, z1.d, z2.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x double> (<vscale x 4 x double>, double) (in function: test)",
  "ll": "define <vscale x 4 x double> @test(<vscale x 4 x double> %a, double %bs) {\n  %i = insertelement <vscale x 4 x double> poison, double %bs, i64 0\n  %b = shufflevector <vscale x 4 x double> %i, <vscale x 4 x double> poison, <vscale x 4 x i32> zeroinitializer\n  %r = fdiv <vscale x 4 x double> %a, %b\n  ret <vscale x 4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 4 x double> poison, double %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <vscale x 4 x double> %i, <vscale x 4 x double> poison, <vscale x 4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <vscale x 4 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x double> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<vscale x 4 x double>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 3,
  "gisize": -1,
  "extrasize": 0,
  "asm": "fmov z2.d, #7.00000000\nptrue p0.d\nfdiv z0.d, p0/m, z0.d, z2.d\nfdiv z1.d, p0/m, z1.d, z2.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x double> (<vscale x 4 x double>) (in function: test)",
  "ll": "define <vscale x 4 x double> @test(<vscale x 4 x double> %a) {\n  %r = fdiv <vscale x 4 x double> %a, splat (double 7.0)\n  ret <vscale x 4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <vscale x 4 x double> %a, splat (double 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x double> %r"
 },
 {
  "instr": "frem",
  "ty": "half",
  "variant": "binop",
  "codesize": 4,
  "thru": 10,
  "lat": 4,
  "sizelat": 4,
  "size": 6,
  "gisize": 6,
  "extrasize": 0,
  "asm": "str x30, [sp, #-16]!                // 8-byte Folded Spill\nfcvt s0, h0\nfcvt s1, h1\nbl fmodf\nfcvt h0, s0\nldr x30, [sp], #16                  // 8-byte Folded Reload\nret",
  "giasm": "str x30, [sp, #-16]!                // 8-byte Folded Spill\nfcvt s0, h0\nfcvt s1, h1\nbl fmodf\nfcvt h0, s0\nldr x30, [sp], #16                  // 8-byte Folded Reload\nret",
  "ll": "define half @test(half %a, half %b) {\n  %r = frem half %a, %b\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem half %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "frem",
  "ty": "half",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 10,
  "lat": 4,
  "sizelat": 4,
  "size": 6,
  "gisize": 7,
  "extrasize": 0,
  "asm": "str x30, [sp, #-16]!                // 8-byte Folded Spill\nfcvt s0, h0\nfmov s1, #7.00000000\nbl fmodf\nfcvt h0, s0\nldr x30, [sp], #16                  // 8-byte Folded Reload\nret",
  "giasm": "str x30, [sp, #-16]!                // 8-byte Folded Spill\nfmov h1, #7.00000000\nfcvt s0, h0\nfcvt s1, h1\nbl fmodf\nfcvt h0, s0\nldr x30, [sp], #16                  // 8-byte Folded Reload\nret",
  "ll": "define half @test(half %a) {\n  %r = frem half %a, 7.0\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem half %a, 0xH4700\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "frem",
  "ty": "float",
  "variant": "binop",
  "codesize": 4,
  "thru": 10,
  "lat": 4,
  "sizelat": 4,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "b fmodf",
  "giasm": "b fmodf",
  "ll": "define float @test(float %a, float %b) {\n  %r = frem float %a, %b\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem float %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "frem",
  "ty": "float",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 10,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov s1, #7.00000000\nb fmodf",
  "giasm": "fmov s1, #7.00000000\nb fmodf",
  "ll": "define float @test(float %a) {\n  %r = frem float %a, 7.0\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem float %a, 7.000000e+00\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "frem",
  "ty": "double",
  "variant": "binop",
  "codesize": 4,
  "thru": 10,
  "lat": 4,
  "sizelat": 4,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "b fmod",
  "giasm": "b fmod",
  "ll": "define double @test(double %a, double %b) {\n  %r = frem double %a, %b\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem double %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "frem",
  "ty": "double",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 10,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov d1, #7.00000000\nb fmod",
  "giasm": "fmov d1, #7.00000000\nb fmod",
  "ll": "define double @test(double %a) {\n  %r = frem double %a, 7.0\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem double %a, 7.000000e+00\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "frem",
  "ty": "<4 x half>",
  "variant": "binop",
  "codesize": 4,
  "thru": 52,
  "lat": 4,
  "sizelat": 4,
  "size": 42,
  "gisize": 44,
  "extrasize": 0,
  "asm": "sub sp, sp, #64\nstr x30, [sp, #48]                  // 8-byte Folded Spill\nmov h3, v0.h[1]\nmov h2, v1.h[1]\nstp q0, q1, [sp, #16]               // 32-byte Folded Spill\nfcvt s0, h3\nfcvt s1, h2\nbl fmodf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp]                        // 16-byte Folded Spill\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl fmodf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nfcvt h3, s0\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nmov h1, v1.h[2]\nmov h2, v0.h[2]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov v3.h[1], v0.h[0]\nfcvt s0, h1\nfcvt s1, h2\nstr q3, [sp]                        // 16-byte Folded Spill\nbl fmodf\nldp q1, q2, [sp, #16]               // 32-byte Folded Reload\nfcvt h0, s0\nldr q3, [sp]                        // 16-byte Folded Reload\nmov h1, v1.h[3]\nmov h2, v2.h[3]\nmov v3.h[2], v0.h[0]\nfcvt s0, h1\nfcvt s1, h2\nstr q3, [sp]                        // 16-byte Folded Spill\nbl fmodf\nfcvt h1, s0\nldr q0, [sp]                        // 16-byte Folded Reload\nldr x30, [sp, #48]                  // 8-byte Folded Reload\nmov v0.h[3], v1.h[0]\nadd sp, sp, #64\nret",
  "giasm": "sub sp, sp, #112\nstp d13, d12, [sp, #48]             // 16-byte Folded Spill\nstp d11, d10, [sp, #64]             // 16-byte Folded Spill\nstp d9, d8, [sp, #80]               // 16-byte Folded Spill\nstr x30, [sp, #96]                  // 8-byte Folded Spill\nmov h8, v0.h[1]\nmov h9, v0.h[2]\nmov h10, v0.h[3]\nmov h11, v1.h[1]\nmov h12, v1.h[2]\nmov h13, v1.h[3]\nfcvt s0, h0\nfcvt s1, h1\nbl fmodf\nfcvt s2, h8\nfcvt h0, s0\nfcvt s1, h11\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nfcvt s2, h9\nfcvt h0, s0\nfcvt s1, h12\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nfcvt s2, h10\nfcvt h0, s0\nfcvt s1, h13\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nldp q3, q2, [sp]                    // 32-byte Folded Reload\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nldp d9, d8, [sp, #80]               // 16-byte Folded Reload\nldp d11, d10, [sp, #64]             // 16-byte Folded Reload\nldr x30, [sp, #96]                  // 8-byte Folded Reload\nmov v1.h[1], v3.h[0]\nldp d13, d12, [sp, #48]             // 16-byte Folded Reload\nmov v1.h[2], v2.h[0]\nmov v1.h[3], v0.h[0]\nmov v0.16b, v1.16b\nadd sp, sp, #112\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, <4 x half> %b) {\n  %r = frem <4 x half> %a, %b\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <4 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "frem",
  "ty": "<4 x half>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 52,
  "lat": 4,
  "sizelat": 4,
  "size": 37,
  "gisize": 45,
  "extrasize": 0,
  "asm": "sub sp, sp, #48\nstr x30, [sp, #32]                  // 8-byte Folded Spill\nmov h1, v0.h[1]\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfcvt s0, h1\nfmov s1, #6.00000000\nbl fmodf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nfmov s1, #7.00000000\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nfcvt h2, s0\nmov h1, v1.h[2]\nfcvt s0, h1\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v2.h[1], v1.h[0]\nfmov s1, #7.00000000\nstr q2, [sp]                        // 16-byte Folded Spill\nbl fmodf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nfcvt h2, s0\nmov h1, v1.h[3]\nfcvt s0, h1\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v1.h[2], v2.h[0]\nstr q1, [sp]                        // 16-byte Folded Spill\nfmov s1, #6.00000000\nbl fmodf\nfcvt h1, s0\nldr q0, [sp]                        // 16-byte Folded Reload\nldr x30, [sp, #32]                  // 8-byte Folded Reload\nmov v0.h[3], v1.h[0]\nadd sp, sp, #48\nret",
  "giasm": "sub sp, sp, #96\nstr d12, [sp, #48]                  // 8-byte Folded Spill\nstp d11, d10, [sp, #56]             // 16-byte Folded Spill\nstp d9, d8, [sp, #72]               // 16-byte Folded Spill\nstr x30, [sp, #88]                  // 8-byte Folded Spill\nfmov h1, #7.00000000\nmov h9, v0.h[1]\nmov h10, v0.h[2]\nmov h11, v0.h[3]\nfcvt s0, h0\nfmov h12, #6.00000000\nfcvt s8, h1\nfmov s1, s8\nbl fmodf\nfcvt s1, h9\nfcvt h0, s0\nfcvt s9, h12\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s9\nbl fmodf\nfcvt s1, h10\nfcvt h0, s0\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s8\nbl fmodf\nfcvt s1, h11\nfcvt h0, s0\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s9\nbl fmodf\nldp q3, q2, [sp]                    // 32-byte Folded Reload\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nldp d9, d8, [sp, #72]               // 16-byte Folded Reload\nldp d11, d10, [sp, #56]             // 16-byte Folded Reload\nldr x30, [sp, #88]                  // 8-byte Folded Reload\nmov v1.h[1], v3.h[0]\nldr d12, [sp, #48]                  // 8-byte Folded Reload\nmov v1.h[2], v2.h[0]\nmov v1.h[3], v0.h[0]\nmov v0.16b, v1.16b\nadd sp, sp, #96\nret",
  "ll": "define <4 x half> @test(<4 x half> %a) {\n  %r = frem <4 x half> %a, <half 7.0, half 6.0, half 7.0, half 6.0>\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <4 x half> %a, <half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600>\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "frem",
  "ty": "<4 x half>",
  "variant": "binopsplat",
  "codesize": 5,
  "thru": 53,
  "lat": 5,
  "sizelat": 5,
  "size": 40,
  "gisize": 45,
  "extrasize": 0,
  "asm": "sub sp, sp, #48\nstr d8, [sp, #32]                   // 8-byte Folded Spill\nstr x30, [sp, #40]                  // 8-byte Folded Spill\nmov h2, v0.h[1]\nfcvt s8, h1\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfcvt s0, h2\nfmov s1, s8\nbl fmodf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nfcvt h0, s0\nfcvt s1, h1\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s8\nbl fmodf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nfcvt h2, s0\nmov h1, v1.h[2]\nfcvt s0, h1\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v2.h[1], v1.h[0]\nfmov s1, s8\nstr q2, [sp]                        // 16-byte Folded Spill\nbl fmodf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nfcvt h2, s0\nmov h1, v1.h[3]\nfcvt s0, h1\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v1.h[2], v2.h[0]\nstr q1, [sp]                        // 16-byte Folded Spill\nfmov s1, s8\nbl fmodf\nfcvt h1, s0\nldr q0, [sp]                        // 16-byte Folded Reload\nldr x30, [sp, #40]                  // 8-byte Folded Reload\nldr d8, [sp, #32]                   // 8-byte Folded Reload\nmov v0.h[3], v1.h[0]\nadd sp, sp, #48\nret",
  "giasm": "sub sp, sp, #112\nstp d13, d12, [sp, #48]             // 16-byte Folded Spill\nstp d11, d10, [sp, #64]             // 16-byte Folded Spill\nstp d9, d8, [sp, #80]               // 16-byte Folded Spill\nstr x30, [sp, #96]                  // 8-byte Folded Spill\nmov h8, v0.h[1]\nmov h9, v0.h[2]\nmov h10, v0.h[3]\ndup v1.4h, v1.h[0]\nfcvt s0, h0\nmov h11, v1.h[1]\nmov h12, v1.h[2]\nmov h13, v1.h[3]\nfcvt s1, h1\nbl fmodf\nfcvt s2, h8\nfcvt h0, s0\nfcvt s1, h11\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nfcvt s2, h9\nfcvt h0, s0\nfcvt s1, h12\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nfcvt s2, h10\nfcvt h0, s0\nfcvt s1, h13\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nldp q3, q2, [sp]                    // 32-byte Folded Reload\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nldp d9, d8, [sp, #80]               // 16-byte Folded Reload\nldp d11, d10, [sp, #64]             // 16-byte Folded Reload\nldr x30, [sp, #96]                  // 8-byte Folded Reload\nmov v1.h[1], v3.h[0]\nldp d13, d12, [sp, #48]             // 16-byte Folded Reload\nmov v1.h[2], v2.h[0]\nmov v1.h[3], v0.h[0]\nmov v0.16b, v1.16b\nadd sp, sp, #112\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, half %bs) {\n  %i = insertelement <4 x half> poison, half %bs, i64 0\n  %b = shufflevector <4 x half> %i, <4 x half> poison, <4 x i32> zeroinitializer\n  %r = frem <4 x half> %a, %b\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <4 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <4 x half> %i, <4 x half> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <4 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "frem",
  "ty": "<4 x half>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 52,
  "lat": 4,
  "sizelat": 4,
  "size": 37,
  "gisize": 41,
  "extrasize": 0,
  "asm": "sub sp, sp, #48\nstr x30, [sp, #32]                  // 8-byte Folded Spill\nmov h1, v0.h[1]\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfcvt s0, h1\nfmov s1, #7.00000000\nbl fmodf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nfmov s1, #7.00000000\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nfcvt h2, s0\nmov h1, v1.h[2]\nfcvt s0, h1\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v2.h[1], v1.h[0]\nfmov s1, #7.00000000\nstr q2, [sp]                        // 16-byte Folded Spill\nbl fmodf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nfcvt h2, s0\nmov h1, v1.h[3]\nfcvt s0, h1\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v1.h[2], v2.h[0]\nstr q1, [sp]                        // 16-byte Folded Spill\nfmov s1, #7.00000000\nbl fmodf\nfcvt h1, s0\nldr q0, [sp]                        // 16-byte Folded Reload\nldr x30, [sp, #32]                  // 8-byte Folded Reload\nmov v0.h[3], v1.h[0]\nadd sp, sp, #48\nret",
  "giasm": "sub sp, sp, #96\nstp d11, d10, [sp, #48]             // 16-byte Folded Spill\nstp d9, d8, [sp, #64]               // 16-byte Folded Spill\nstr x30, [sp, #80]                  // 8-byte Folded Spill\nfmov h1, #7.00000000\nmov h9, v0.h[1]\nmov h10, v0.h[2]\nmov h11, v0.h[3]\nfcvt s0, h0\nfcvt s8, h1\nfmov s1, s8\nbl fmodf\nfcvt s1, h9\nfcvt h0, s0\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s8\nbl fmodf\nfcvt s1, h10\nfcvt h0, s0\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s8\nbl fmodf\nfcvt s1, h11\nfcvt h0, s0\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s8\nbl fmodf\nldp q3, q2, [sp]                    // 32-byte Folded Reload\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nldp d9, d8, [sp, #64]               // 16-byte Folded Reload\nldp d11, d10, [sp, #48]             // 16-byte Folded Reload\nldr x30, [sp, #80]                  // 8-byte Folded Reload\nmov v1.h[1], v3.h[0]\nmov v1.h[2], v2.h[0]\nmov v1.h[3], v0.h[0]\nmov v0.16b, v1.16b\nadd sp, sp, #96\nret",
  "ll": "define <4 x half> @test(<4 x half> %a) {\n  %r = frem <4 x half> %a, splat (half 7.0)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <4 x half> %a, splat (half 0xH4700)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "frem",
  "ty": "<8 x half>",
  "variant": "binop",
  "codesize": 4,
  "thru": 108,
  "lat": 4,
  "sizelat": 4,
  "size": 79,
  "gisize": 97,
  "extrasize": 0,
  "asm": "sub sp, sp, #64\nstr x30, [sp, #48]                  // 8-byte Folded Spill\nmov h3, v0.h[1]\nmov h2, v1.h[1]\nstp q0, q1, [sp]                    // 32-byte Folded Spill\nfcvt s0, h3\nfcvt s1, h2\nbl fmodf\nfcvt h0, s0\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldp q0, q1, [sp]                    // 32-byte Folded Reload\nfcvt s0, h0\nfcvt s1, h1\nbl fmodf\nfcvt h0, s0\nldp q1, q2, [sp, #16]               // 32-byte Folded Reload\nmov h1, v1.h[2]\nmov v0.h[1], v2.h[0]\nfcvt s1, h1\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[2]\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[2], v0.h[0]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nldp q0, q1, [sp]                    // 32-byte Folded Reload\nmov h0, v0.h[3]\nmov h1, v1.h[3]\nfcvt s0, h0\nfcvt s1, h1\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[3], v0.h[0]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nldp q0, q1, [sp]                    // 32-byte Folded Reload\nmov h0, v0.h[4]\nmov h1, v1.h[4]\nfcvt s0, h0\nfcvt s1, h1\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[4], v0.h[0]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nldp q0, q1, [sp]                    // 32-byte Folded Reload\nmov h0, v0.h[5]\nmov h1, v1.h[5]\nfcvt s0, h0\nfcvt s1, h1\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[5], v0.h[0]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nldp q0, q1, [sp]                    // 32-byte Folded Reload\nmov h0, v0.h[6]\nmov h1, v1.h[6]\nfcvt s0, h0\nfcvt s1, h1\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[6], v0.h[0]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nldp q0, q1, [sp]                    // 32-byte Folded Reload\nmov h0, v0.h[7]\nmov h1, v1.h[7]\nfcvt s0, h0\nfcvt s1, h1\nbl fmodf\nfcvt h1, s0\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nldr x30, [sp, #48]                  // 8-byte Folded Reload\nmov v0.h[7], v1.h[0]\nadd sp, sp, #64\nret",
  "giasm": "sub sp, sp, #192\nstp d15, d14, [sp, #112]            // 16-byte Folded Spill\nstp d13, d12, [sp, #128]            // 16-byte Folded Spill\nstp d11, d10, [sp, #144]            // 16-byte Folded Spill\nstp d9, d8, [sp, #160]              // 16-byte Folded Spill\nstr x30, [sp, #176]                 // 8-byte Folded Spill\nmov h2, v0.h[5]\nmov h11, v0.h[1]\nmov h12, v0.h[2]\nmov h13, v0.h[3]\nmov h14, v0.h[4]\nmov h8, v1.h[1]\nmov h9, v1.h[2]\nmov h10, v1.h[3]\nmov h15, v1.h[4]\nstr h2, [sp, #48]                   // 2-byte Folded Spill\nmov h2, v0.h[6]\nstr h2, [sp, #64]                   // 2-byte Folded Spill\nmov h2, v0.h[7]\nfcvt s0, h0\nstr h2, [sp, #96]                   // 2-byte Folded Spill\nmov h2, v1.h[5]\nstr h2, [sp, #186]                  // 2-byte Folded Spill\nmov h2, v1.h[6]\nstr h2, [sp, #188]                  // 2-byte Folded Spill\nmov h2, v1.h[7]\nfcvt s1, h1\nstr h2, [sp, #190]                  // 2-byte Folded Spill\nbl fmodf\nfcvt s2, h11\nfcvt h0, s0\nfcvt s1, h8\nstr q0, [sp, #80]                   // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nfcvt s2, h12\nfcvt h0, s0\nfcvt s1, h9\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nfcvt s2, h13\nfcvt h0, s0\nfcvt s1, h10\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nfcvt s2, h14\nfcvt h0, s0\nfcvt s1, h15\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #48]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nldr h0, [sp, #186]                  // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #64]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #64]                   // 16-byte Folded Spill\nldr h0, [sp, #188]                  // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #96]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #96]                   // 16-byte Folded Spill\nldr h0, [sp, #190]                  // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl fmodf\nldp q2, q3, [sp, #16]               // 32-byte Folded Reload\nfcvt h0, s0\nldr q1, [sp, #80]                   // 16-byte Folded Reload\nldp d9, d8, [sp, #160]              // 16-byte Folded Reload\nldp d11, d10, [sp, #144]            // 16-byte Folded Reload\nldr x30, [sp, #176]                 // 8-byte Folded Reload\nmov v1.h[1], v3.h[0]\nldp d13, d12, [sp, #128]            // 16-byte Folded Reload\nldp d15, d14, [sp, #112]            // 16-byte Folded Reload\nmov v1.h[2], v2.h[0]\nldr q2, [sp]                        // 16-byte Folded Reload\nmov v1.h[3], v2.h[0]\nldp q3, q2, [sp, #48]               // 32-byte Folded Reload\nmov v1.h[4], v3.h[0]\nmov v1.h[5], v2.h[0]\nldr q2, [sp, #96]                   // 16-byte Folded Reload\nmov v1.h[6], v2.h[0]\nmov v1.h[7], v0.h[0]\nmov v0.16b, v1.16b\nadd sp, sp, #192\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, <8 x half> %b) {\n  %r = frem <8 x half> %a, %b\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <8 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "frem",
  "ty": "<8 x half>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 108,
  "lat": 4,
  "sizelat": 4,
  "size": 72,
  "gisize": 83,
  "extrasize": 0,
  "asm": "sub sp, sp, #48\nstr x30, [sp, #32]                  // 8-byte Folded Spill\nmov h1, v0.h[1]\nstr q0, [sp]                        // 16-byte Folded Spill\nfcvt s0, h1\nfmov s1, #6.00000000\nbl fmodf\nfcvt h0, s0\nfmov s1, #7.00000000\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v0.h[1], v1.h[0]\nfmov s1, #7.00000000\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[2]\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[2], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[3]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #6.00000000\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[3], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[4]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[4], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[5]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #6.00000000\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[5], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[6]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[6], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[7]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #6.00000000\nfcvt s0, h0\nbl fmodf\nfcvt h1, s0\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nldr x30, [sp, #32]                  // 8-byte Folded Reload\nmov v0.h[7], v1.h[0]\nadd sp, sp, #48\nret",
  "giasm": "sub sp, sp, #192\nstp d15, d14, [sp, #112]            // 16-byte Folded Spill\nstp d13, d12, [sp, #128]            // 16-byte Folded Spill\nstp d11, d10, [sp, #144]            // 16-byte Folded Spill\nstp d9, d8, [sp, #160]              // 16-byte Folded Spill\nstr x30, [sp, #176]                 // 8-byte Folded Spill\nfmov h1, #7.00000000\nmov h9, v0.h[1]\nmov h11, v0.h[2]\nmov h12, v0.h[3]\nmov h13, v0.h[4]\nmov h14, v0.h[5]\nmov h15, v0.h[6]\nmov h2, v0.h[7]\nfcvt s0, h0\nfcvt s8, h1\nfmov h10, #6.00000000\nstr h2, [sp, #96]                   // 2-byte Folded Spill\nfmov s1, s8\nbl fmodf\nfcvt s1, h9\nfcvt h0, s0\nfcvt s9, h10\nstr q0, [sp, #80]                   // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s9\nbl fmodf\nfcvt s1, h11\nfcvt h0, s0\nstr q0, [sp, #64]                   // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s8\nbl fmodf\nfcvt s1, h12\nfcvt h0, s0\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s9\nbl fmodf\nfcvt s1, h13\nfcvt h0, s0\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s8\nbl fmodf\nfcvt s1, h14\nfcvt h0, s0\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s9\nbl fmodf\nfcvt s1, h15\nfcvt h0, s0\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s8\nbl fmodf\nldr h1, [sp, #96]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s1, h1\nstr q0, [sp, #96]                   // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s9\nbl fmodf\nldp q2, q1, [sp, #64]               // 32-byte Folded Reload\nfcvt h0, s0\nldp d9, d8, [sp, #160]              // 16-byte Folded Reload\nldr x30, [sp, #176]                 // 8-byte Folded Reload\nldp d11, d10, [sp, #144]            // 16-byte Folded Reload\nmov v1.h[1], v2.h[0]\nldp q2, q3, [sp, #32]               // 32-byte Folded Reload\nldp d13, d12, [sp, #128]            // 16-byte Folded Reload\nldp d15, d14, [sp, #112]            // 16-byte Folded Reload\nmov v1.h[2], v3.h[0]\nmov v1.h[3], v2.h[0]\nldp q2, q3, [sp]                    // 32-byte Folded Reload\nmov v1.h[4], v3.h[0]\nmov v1.h[5], v2.h[0]\nldr q2, [sp, #96]                   // 16-byte Folded Reload\nmov v1.h[6], v2.h[0]\nmov v1.h[7], v0.h[0]\nmov v0.16b, v1.16b\nadd sp, sp, #192\nret",
  "ll": "define <8 x half> @test(<8 x half> %a) {\n  %r = frem <8 x half> %a, <half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0>\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <8 x half> %a, <half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600>\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "frem",
  "ty": "<8 x half>",
  "variant": "binopsplat",
  "codesize": 5,
  "thru": 109,
  "lat": 5,
  "sizelat": 5,
  "size": 75,
  "gisize": 98,
  "extrasize": 0,
  "asm": "sub sp, sp, #48\nstr d8, [sp, #32]                   // 8-byte Folded Spill\nstr x30, [sp, #40]                  // 8-byte Folded Spill\nmov h2, v0.h[1]\nfcvt s8, h1\nstr q0, [sp]                        // 16-byte Folded Spill\nfcvt s0, h2\nfmov s1, s8\nbl fmodf\nfcvt h0, s0\nfmov s1, s8\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v0.h[1], v1.h[0]\nfmov s1, s8\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[2]\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[2], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[3]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, s8\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[3], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[4]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, s8\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[4], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[5]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, s8\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[5], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[6]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, s8\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[6], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[7]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, s8\nfcvt s0, h0\nbl fmodf\nfcvt h1, s0\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nldr x30, [sp, #40]                  // 8-byte Folded Reload\nldr d8, [sp, #32]                   // 8-byte Folded Reload\nmov v0.h[7], v1.h[0]\nadd sp, sp, #48\nret",
  "giasm": "sub sp, sp, #192\nstp d15, d14, [sp, #112]            // 16-byte Folded Spill\nstp d13, d12, [sp, #128]            // 16-byte Folded Spill\nstp d11, d10, [sp, #144]            // 16-byte Folded Spill\nstp d9, d8, [sp, #160]              // 16-byte Folded Spill\nstr x30, [sp, #176]                 // 8-byte Folded Spill\nmov h2, v0.h[5]\nmov h11, v0.h[1]\nmov h12, v0.h[2]\ndup v1.8h, v1.h[0]\nmov h13, v0.h[3]\nmov h14, v0.h[4]\nstr h2, [sp, #48]                   // 2-byte Folded Spill\nmov h2, v0.h[6]\nmov h8, v1.h[1]\nmov h9, v1.h[2]\nmov h10, v1.h[3]\nmov h15, v1.h[4]\nstr h2, [sp, #64]                   // 2-byte Folded Spill\nmov h2, v0.h[7]\nfcvt s0, h0\nstr h2, [sp, #96]                   // 2-byte Folded Spill\nmov h2, v1.h[5]\nstr h2, [sp, #186]                  // 2-byte Folded Spill\nmov h2, v1.h[6]\nstr h2, [sp, #188]                  // 2-byte Folded Spill\nmov h2, v1.h[7]\nfcvt s1, h1\nstr h2, [sp, #190]                  // 2-byte Folded Spill\nbl fmodf\nfcvt s2, h11\nfcvt h0, s0\nfcvt s1, h8\nstr q0, [sp, #80]                   // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nfcvt s2, h12\nfcvt h0, s0\nfcvt s1, h9\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nfcvt s2, h13\nfcvt h0, s0\nfcvt s1, h10\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nfcvt s2, h14\nfcvt h0, s0\nfcvt s1, h15\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #48]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nldr h0, [sp, #186]                  // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #64]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #64]                   // 16-byte Folded Spill\nldr h0, [sp, #188]                  // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #96]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #96]                   // 16-byte Folded Spill\nldr h0, [sp, #190]                  // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl fmodf\nldp q2, q3, [sp, #16]               // 32-byte Folded Reload\nfcvt h0, s0\nldr q1, [sp, #80]                   // 16-byte Folded Reload\nldp d9, d8, [sp, #160]              // 16-byte Folded Reload\nldp d11, d10, [sp, #144]            // 16-byte Folded Reload\nldr x30, [sp, #176]                 // 8-byte Folded Reload\nmov v1.h[1], v3.h[0]\nldp d13, d12, [sp, #128]            // 16-byte Folded Reload\nldp d15, d14, [sp, #112]            // 16-byte Folded Reload\nmov v1.h[2], v2.h[0]\nldr q2, [sp]                        // 16-byte Folded Reload\nmov v1.h[3], v2.h[0]\nldp q3, q2, [sp, #48]               // 32-byte Folded Reload\nmov v1.h[4], v3.h[0]\nmov v1.h[5], v2.h[0]\nldr q2, [sp, #96]                   // 16-byte Folded Reload\nmov v1.h[6], v2.h[0]\nmov v1.h[7], v0.h[0]\nmov v0.16b, v1.16b\nadd sp, sp, #192\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, half %bs) {\n  %i = insertelement <8 x half> poison, half %bs, i64 0\n  %b = shufflevector <8 x half> %i, <8 x half> poison, <8 x i32> zeroinitializer\n  %r = frem <8 x half> %a, %b\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <8 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <8 x half> %i, <8 x half> poison, <8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <8 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "frem",
  "ty": "<8 x half>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 108,
  "lat": 4,
  "sizelat": 4,
  "size": 72,
  "gisize": 79,
  "extrasize": 0,
  "asm": "sub sp, sp, #48\nstr x30, [sp, #32]                  // 8-byte Folded Spill\nmov h1, v0.h[1]\nstr q0, [sp]                        // 16-byte Folded Spill\nfcvt s0, h1\nfmov s1, #7.00000000\nbl fmodf\nfcvt h0, s0\nfmov s1, #7.00000000\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v0.h[1], v1.h[0]\nfmov s1, #7.00000000\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[2]\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[2], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[3]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[3], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[4]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[4], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[5]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[5], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[6]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[6], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[7]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl fmodf\nfcvt h1, s0\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nldr x30, [sp, #32]                  // 8-byte Folded Reload\nmov v0.h[7], v1.h[0]\nadd sp, sp, #48\nret",
  "giasm": "sub sp, sp, #192\nstp d15, d14, [sp, #112]            // 16-byte Folded Spill\nstp d13, d12, [sp, #128]            // 16-byte Folded Spill\nstp d11, d10, [sp, #144]            // 16-byte Folded Spill\nstp d9, d8, [sp, #160]              // 16-byte Folded Spill\nstr x30, [sp, #176]                 // 8-byte Folded Spill\nfmov h1, #7.00000000\nmov h9, v0.h[1]\nmov h10, v0.h[2]\nmov h11, v0.h[3]\nmov h12, v0.h[4]\nmov h13, v0.h[5]\nmov h14, v0.h[6]\nmov h15, v0.h[7]\nfcvt s0, h0\nfcvt s8, h1\nfmov s1, s8\nbl fmodf\nfcvt s1, h9\nfcvt h0, s0\nstr q0, [sp, #96]                   // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s8\nbl fmodf\nfcvt s1, h10\nfcvt h0, s0\nstr q0, [sp, #80]                   // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s8\nbl fmodf\nfcvt s1, h11\nfcvt h0, s0\nstr q0, [sp, #64]                   // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s8\nbl fmodf\nfcvt s1, h12\nfcvt h0, s0\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s8\nbl fmodf\nfcvt s1, h13\nfcvt h0, s0\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s8\nbl fmodf\nfcvt s1, h14\nfcvt h0, s0\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s8\nbl fmodf\nfcvt s1, h15\nfcvt h0, s0\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s8\nbl fmodf\nldp q2, q1, [sp, #80]               // 32-byte Folded Reload\nfcvt h0, s0\nldp d9, d8, [sp, #160]              // 16-byte Folded Reload\nldr x30, [sp, #176]                 // 8-byte Folded Reload\nldp d11, d10, [sp, #144]            // 16-byte Folded Reload\nmov v1.h[1], v2.h[0]\nldp q2, q3, [sp, #48]               // 32-byte Folded Reload\nldp d13, d12, [sp, #128]            // 16-byte Folded Reload\nldp d15, d14, [sp, #112]            // 16-byte Folded Reload\nmov v1.h[2], v3.h[0]\nmov v1.h[3], v2.h[0]\nldp q2, q3, [sp, #16]               // 32-byte Folded Reload\nmov v1.h[4], v3.h[0]\nmov v1.h[5], v2.h[0]\nldr q2, [sp]                        // 16-byte Folded Reload\nmov v1.h[6], v2.h[0]\nmov v1.h[7], v0.h[0]\nmov v0.16b, v1.16b\nadd sp, sp, #192\nret",
  "ll": "define <8 x half> @test(<8 x half> %a) {\n  %r = frem <8 x half> %a, splat (half 7.0)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <8 x half> %a, splat (half 0xH4700)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "frem",
  "ty": "<16 x half>",
  "variant": "binop",
  "codesize": 4,
  "thru": 216,
  "lat": 4,
  "sizelat": 4,
  "size": 163,
  "gisize": 208,
  "extrasize": 0,
  "asm": "sub sp, sp, #96\nstr x30, [sp, #80]                  // 8-byte Folded Spill\nstp q0, q1, [sp]                    // 32-byte Folded Spill\nmov h1, v2.h[1]\nstp q3, q2, [sp, #32]               // 32-byte Folded Spill\nmov h3, v0.h[1]\nfcvt s1, h1\nfcvt s0, h3\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nfcvt s1, h1\nstr q0, [sp, #64]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldp q1, q2, [sp, #48]               // 32-byte Folded Reload\nmov h1, v1.h[2]\nmov v0.h[1], v2.h[0]\nfcvt s1, h1\nstr q0, [sp, #64]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[2]\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #64]                   // 16-byte Folded Reload\nmov v1.h[2], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[3]\nstr q1, [sp, #64]                   // 16-byte Folded Spill\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nmov h1, v1.h[3]\nfcvt s0, h0\nfcvt s1, h1\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #64]                   // 16-byte Folded Reload\nmov v1.h[3], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[4]\nstr q1, [sp, #64]                   // 16-byte Folded Spill\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nmov h1, v1.h[4]\nfcvt s0, h0\nfcvt s1, h1\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #64]                   // 16-byte Folded Reload\nmov v1.h[4], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[5]\nstr q1, [sp, #64]                   // 16-byte Folded Spill\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nmov h1, v1.h[5]\nfcvt s0, h0\nfcvt s1, h1\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #64]                   // 16-byte Folded Reload\nmov v1.h[5], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[6]\nstr q1, [sp, #64]                   // 16-byte Folded Spill\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nmov h1, v1.h[6]\nfcvt s0, h0\nfcvt s1, h1\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #64]                   // 16-byte Folded Reload\nmov v1.h[6], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[7]\nstr q1, [sp, #64]                   // 16-byte Folded Spill\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nmov h1, v1.h[7]\nfcvt s0, h0\nfcvt s1, h1\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #64]                   // 16-byte Folded Reload\nmov v1.h[7], v0.h[0]\nstr q1, [sp, #64]                   // 16-byte Folded Spill\nldp q0, q1, [sp, #16]               // 32-byte Folded Reload\nmov h0, v0.h[1]\nmov h1, v1.h[1]\nfcvt s0, h0\nfcvt s1, h1\nbl fmodf\nfcvt h0, s0\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nldp q0, q1, [sp, #16]               // 32-byte Folded Reload\nfcvt s0, h0\nfcvt s1, h1\nbl fmodf\nfcvt h0, s0\nldp q1, q2, [sp, #32]               // 32-byte Folded Reload\nmov h1, v1.h[2]\nmov v0.h[1], v2.h[0]\nfcvt s1, h1\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[2]\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nmov v1.h[2], v0.h[0]\nstr q1, [sp, #48]                   // 16-byte Folded Spill\nldp q0, q1, [sp, #16]               // 32-byte Folded Reload\nmov h0, v0.h[3]\nmov h1, v1.h[3]\nfcvt s0, h0\nfcvt s1, h1\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nmov v1.h[3], v0.h[0]\nstr q1, [sp, #48]                   // 16-byte Folded Spill\nldp q0, q1, [sp, #16]               // 32-byte Folded Reload\nmov h0, v0.h[4]\nmov h1, v1.h[4]\nfcvt s0, h0\nfcvt s1, h1\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nmov v1.h[4], v0.h[0]\nstr q1, [sp, #48]                   // 16-byte Folded Spill\nldp q0, q1, [sp, #16]               // 32-byte Folded Reload\nmov h0, v0.h[5]\nmov h1, v1.h[5]\nfcvt s0, h0\nfcvt s1, h1\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nmov v1.h[5], v0.h[0]\nstr q1, [sp, #48]                   // 16-byte Folded Spill\nldp q0, q1, [sp, #16]               // 32-byte Folded Reload\nmov h0, v0.h[6]\nmov h1, v1.h[6]\nfcvt s0, h0\nfcvt s1, h1\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nmov v1.h[6], v0.h[0]\nstr q1, [sp, #48]                   // 16-byte Folded Spill\nldp q0, q1, [sp, #16]               // 32-byte Folded Reload\nmov h0, v0.h[7]\nmov h1, v1.h[7]\nfcvt s0, h0\nfcvt s1, h1\nbl fmodf\nfmov s1, s0\nldr x30, [sp, #80]                  // 8-byte Folded Reload\nfcvt h2, s1\nldp q1, q0, [sp, #48]               // 32-byte Folded Reload\nmov v1.h[7], v2.h[0]\nadd sp, sp, #96\nret",
  "giasm": "sub sp, sp, #448\nstp d15, d14, [sp, #368]            // 16-byte Folded Spill\nstp d13, d12, [sp, #384]            // 16-byte Folded Spill\nstp d11, d10, [sp, #400]            // 16-byte Folded Spill\nstp d9, d8, [sp, #416]              // 16-byte Folded Spill\nstp x29, x30, [sp, #432]            // 16-byte Folded Spill\nmov v4.16b, v1.16b\nstr q1, [sp, #112]                  // 16-byte Folded Spill\nmov h1, v0.h[4]\nmov h12, v0.h[1]\nmov h13, v0.h[2]\nstr q3, [sp, #16]                   // 16-byte Folded Spill\nmov h14, v0.h[3]\nmov h15, v2.h[1]\nmov h8, v2.h[2]\nmov h9, v2.h[3]\nmov h10, v2.h[4]\nmov h11, v2.h[5]\nstr h1, [sp, #272]                  // 2-byte Folded Spill\nmov h1, v0.h[5]\nstr h1, [sp, #240]                  // 2-byte Folded Spill\nmov h1, v0.h[6]\nstr h1, [sp, #176]                  // 2-byte Folded Spill\nmov h1, v0.h[7]\nfcvt s0, h0\nstr h1, [sp, #144]                  // 2-byte Folded Spill\nmov h1, v4.h[1]\nstr h1, [sp, #48]                   // 2-byte Folded Spill\nmov h1, v4.h[2]\nstr h1, [sp, #80]                   // 2-byte Folded Spill\nmov h1, v4.h[3]\nstr h1, [sp, #128]                  // 2-byte Folded Spill\nmov h1, v4.h[4]\nstr h1, [sp, #192]                  // 2-byte Folded Spill\nmov h1, v4.h[5]\nstr h1, [sp, #256]                  // 2-byte Folded Spill\nmov h1, v4.h[6]\nstr h1, [sp, #336]                  // 2-byte Folded Spill\nmov h1, v4.h[7]\nstr h1, [sp, #352]                  // 2-byte Folded Spill\nmov h1, v2.h[6]\nstr h1, [sp, #12]                   // 2-byte Folded Spill\nmov h1, v2.h[7]\nstr h1, [sp, #14]                   // 2-byte Folded Spill\nmov h1, v3.h[1]\nstr h1, [sp, #44]                   // 2-byte Folded Spill\nmov h1, v3.h[2]\nstr h1, [sp, #46]                   // 2-byte Folded Spill\nmov h1, v3.h[3]\nstr h1, [sp, #78]                   // 2-byte Folded Spill\nmov h1, v3.h[4]\nstr h1, [sp, #110]                  // 2-byte Folded Spill\nmov h1, v3.h[5]\nstr h1, [sp, #174]                  // 2-byte Folded Spill\nmov h1, v3.h[6]\nstr h1, [sp, #238]                  // 2-byte Folded Spill\nmov h1, v3.h[7]\nstr h1, [sp, #302]                  // 2-byte Folded Spill\nfcvt s1, h2\nbl fmodf\nfcvt s2, h12\nfcvt h0, s0\nfcvt s1, h15\nstr q0, [sp, #304]                  // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nfcvt s2, h13\nfcvt h0, s0\nfcvt s1, h8\nstr q0, [sp, #208]                  // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nfcvt s2, h14\nfcvt h0, s0\nfcvt s1, h9\nstr q0, [sp, #320]                  // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #272]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nfcvt s1, h10\nstr q0, [sp, #272]                  // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #240]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nfcvt s1, h11\nstr q0, [sp, #240]                  // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #176]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #176]                  // 16-byte Folded Spill\nldr h0, [sp, #12]                   // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #144]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #144]                  // 16-byte Folded Spill\nldr h0, [sp, #14]                   // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl fmodf\nldr q1, [sp, #112]                  // 16-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #112]                  // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #48]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nldr h0, [sp, #44]                   // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #80]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #80]                   // 16-byte Folded Spill\nldr h0, [sp, #46]                   // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #128]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #128]                  // 16-byte Folded Spill\nldr h0, [sp, #78]                   // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #192]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #192]                  // 16-byte Folded Spill\nldr h0, [sp, #110]                  // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #256]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #256]                  // 16-byte Folded Spill\nldr h0, [sp, #174]                  // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #336]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #336]                  // 16-byte Folded Spill\nldr h0, [sp, #238]                  // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #352]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #352]                  // 16-byte Folded Spill\nldr h0, [sp, #302]                  // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl fmodf\nldr q3, [sp, #304]                  // 16-byte Folded Reload\nldr q2, [sp, #208]                  // 16-byte Folded Reload\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nldp x29, x30, [sp, #432]            // 16-byte Folded Reload\nmov v3.h[1], v2.h[0]\nldr q2, [sp, #80]                   // 16-byte Folded Reload\nldp d9, d8, [sp, #416]              // 16-byte Folded Reload\nmov v1.h[1], v2.h[0]\nldr q2, [sp, #320]                  // 16-byte Folded Reload\nldp d11, d10, [sp, #400]            // 16-byte Folded Reload\nmov v3.h[2], v2.h[0]\nldr q2, [sp, #128]                  // 16-byte Folded Reload\nldp d13, d12, [sp, #384]            // 16-byte Folded Reload\nmov v1.h[2], v2.h[0]\nldr q2, [sp, #272]                  // 16-byte Folded Reload\nldp d15, d14, [sp, #368]            // 16-byte Folded Reload\nmov v3.h[3], v2.h[0]\nldr q2, [sp, #192]                  // 16-byte Folded Reload\nmov v1.h[3], v2.h[0]\nldp q4, q2, [sp, #240]              // 32-byte Folded Reload\nmov v3.h[4], v4.h[0]\nmov v1.h[4], v2.h[0]\nldr q2, [sp, #176]                  // 16-byte Folded Reload\nmov v3.h[5], v2.h[0]\nldr q2, [sp, #336]                  // 16-byte Folded Reload\nmov v1.h[5], v2.h[0]\nfcvt h2, s0\nldr q0, [sp, #144]                  // 16-byte Folded Reload\nmov v3.h[6], v0.h[0]\nldr q0, [sp, #352]                  // 16-byte Folded Reload\nmov v1.h[6], v0.h[0]\nldr q0, [sp, #112]                  // 16-byte Folded Reload\nmov v3.h[7], v0.h[0]\nmov v1.h[7], v2.h[0]\nmov v0.16b, v3.16b\nadd sp, sp, #448\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, <16 x half> %b) {\n  %r = frem <16 x half> %a, %b\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <16 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "frem",
  "ty": "<16 x half>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 216,
  "lat": 4,
  "sizelat": 4,
  "size": 142,
  "gisize": 171,
  "extrasize": 0,
  "asm": "sub sp, sp, #64\nstr x30, [sp, #48]                  // 8-byte Folded Spill\nstp q1, q0, [sp]                    // 32-byte Folded Spill\nmov h1, v0.h[1]\nfcvt s0, h1\nfmov s1, #6.00000000\nbl fmodf\nfcvt h0, s0\nfmov s1, #7.00000000\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v0.h[1], v1.h[0]\nfmov s1, #7.00000000\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[2]\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[2], v0.h[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[3]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, #6.00000000\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[3], v0.h[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[4]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[4], v0.h[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[5]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, #6.00000000\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[5], v0.h[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[6]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[6], v0.h[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[7]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, #6.00000000\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[7], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[1]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, #6.00000000\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nfmov s1, #7.00000000\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v0.h[1], v1.h[0]\nfmov s1, #7.00000000\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[2]\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[2], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[3]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #6.00000000\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[3], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[4]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[4], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[5]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #6.00000000\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[5], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[6]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[6], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[7]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #6.00000000\nfcvt s0, h0\nbl fmodf\nfmov s1, s0\nldr x30, [sp, #48]                  // 8-byte Folded Reload\nfcvt h2, s1\nldp q1, q0, [sp, #16]               // 32-byte Folded Reload\nmov v1.h[7], v2.h[0]\nadd sp, sp, #64\nret",
  "giasm": "sub sp, sp, #320\nstp d15, d14, [sp, #240]            // 16-byte Folded Spill\nstp d13, d12, [sp, #256]            // 16-byte Folded Spill\nstp d11, d10, [sp, #272]            // 16-byte Folded Spill\nstp d9, d8, [sp, #288]              // 16-byte Folded Spill\nstp x29, x30, [sp, #304]            // 16-byte Folded Spill\nmov h2, v0.h[7]\nfmov h3, #7.00000000\nstr q1, [sp, #64]                   // 16-byte Folded Spill\nmov h9, v0.h[1]\nmov h13, v0.h[2]\nmov h14, v0.h[3]\nmov h15, v0.h[4]\nmov h10, v0.h[5]\nmov h12, v0.h[6]\nfcvt s8, h3\nfcvt s0, h0\nfmov h11, #6.00000000\nstr h2, [sp, #96]                   // 2-byte Folded Spill\nmov h2, v1.h[1]\nstr h2, [sp]                        // 2-byte Folded Spill\nmov h2, v1.h[2]\nstr h2, [sp, #16]                   // 2-byte Folded Spill\nmov h2, v1.h[3]\nstr h2, [sp, #32]                   // 2-byte Folded Spill\nmov h2, v1.h[4]\nstr h2, [sp, #48]                   // 2-byte Folded Spill\nmov h2, v1.h[5]\nstr h2, [sp, #80]                   // 2-byte Folded Spill\nmov h2, v1.h[6]\nstr h2, [sp, #144]                  // 2-byte Folded Spill\nmov h2, v1.h[7]\nfmov s1, s8\nstr h2, [sp, #176]                  // 2-byte Folded Spill\nbl fmodf\nfcvt s1, h9\nfcvt h0, s0\nfcvt s9, h11\nstr q0, [sp, #208]                  // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s9\nbl fmodf\nfcvt s1, h13\nfcvt h0, s0\nstr q0, [sp, #128]                  // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s8\nbl fmodf\nfcvt s1, h14\nfcvt h0, s0\nstr q0, [sp, #224]                  // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s9\nbl fmodf\nfcvt s1, h15\nfcvt h0, s0\nstr q0, [sp, #192]                  // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s8\nbl fmodf\nfcvt s1, h10\nfcvt h0, s0\nstr q0, [sp, #160]                  // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s9\nbl fmodf\nfcvt s1, h12\nfcvt h0, s0\nstr q0, [sp, #112]                  // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s8\nbl fmodf\nldr h1, [sp, #96]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s1, h1\nstr q0, [sp, #96]                   // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s9\nbl fmodf\nldr q1, [sp, #64]                   // 16-byte Folded Reload\nfcvt h0, s0\nfcvt s1, h1\nstr q0, [sp, #64]                   // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s8\nbl fmodf\nldr h1, [sp]                        // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s1, h1\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s9\nbl fmodf\nldr h1, [sp, #16]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s1, h1\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s8\nbl fmodf\nldr h1, [sp, #32]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s1, h1\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s9\nbl fmodf\nldr h1, [sp, #48]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s1, h1\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s8\nbl fmodf\nldr h1, [sp, #80]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s1, h1\nstr q0, [sp, #80]                   // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s9\nbl fmodf\nldr h1, [sp, #144]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s1, h1\nstr q0, [sp, #144]                  // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s8\nbl fmodf\nldr h1, [sp, #176]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s1, h1\nstr q0, [sp, #176]                  // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s9\nbl fmodf\nldr q3, [sp, #208]                  // 16-byte Folded Reload\nldr q2, [sp, #128]                  // 16-byte Folded Reload\nldp x29, x30, [sp, #304]            // 16-byte Folded Reload\nmov v3.h[1], v2.h[0]\nldp q1, q2, [sp]                    // 32-byte Folded Reload\nldp d9, d8, [sp, #288]              // 16-byte Folded Reload\nldp d11, d10, [sp, #272]            // 16-byte Folded Reload\nmov v1.h[1], v2.h[0]\nldr q2, [sp, #224]                  // 16-byte Folded Reload\nldp d13, d12, [sp, #256]            // 16-byte Folded Reload\nmov v3.h[2], v2.h[0]\nldr q2, [sp, #32]                   // 16-byte Folded Reload\nldp d15, d14, [sp, #240]            // 16-byte Folded Reload\nmov v1.h[2], v2.h[0]\nldr q2, [sp, #192]                  // 16-byte Folded Reload\nmov v3.h[3], v2.h[0]\nldr q2, [sp, #48]                   // 16-byte Folded Reload\nmov v1.h[3], v2.h[0]\nldr q2, [sp, #160]                  // 16-byte Folded Reload\nmov v3.h[4], v2.h[0]\nldr q2, [sp, #80]                   // 16-byte Folded Reload\nmov v1.h[4], v2.h[0]\nldr q2, [sp, #112]                  // 16-byte Folded Reload\nmov v3.h[5], v2.h[0]\nldr q2, [sp, #144]                  // 16-byte Folded Reload\nmov v1.h[5], v2.h[0]\nfcvt h2, s0\nldr q0, [sp, #96]                   // 16-byte Folded Reload\nmov v3.h[6], v0.h[0]\nldr q0, [sp, #176]                  // 16-byte Folded Reload\nmov v1.h[6], v0.h[0]\nldr q0, [sp, #64]                   // 16-byte Folded Reload\nmov v3.h[7], v0.h[0]\nmov v1.h[7], v2.h[0]\nmov v0.16b, v3.16b\nadd sp, sp, #320\nret",
  "ll": "define <16 x half> @test(<16 x half> %a) {\n  %r = frem <16 x half> %a, <half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0>\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <16 x half> %a, <half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600>\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "frem",
  "ty": "<16 x half>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 218,
  "lat": 6,
  "sizelat": 6,
  "size": 145,
  "gisize": 209,
  "extrasize": 0,
  "asm": "sub sp, sp, #64\nstr d8, [sp, #48]                   // 8-byte Folded Spill\nstr x30, [sp, #56]                  // 8-byte Folded Spill\nstp q1, q0, [sp]                    // 32-byte Folded Spill\nmov h1, v0.h[1]\nfcvt s8, h2\nfcvt s0, h1\nfmov s1, s8\nbl fmodf\nfcvt h0, s0\nfmov s1, s8\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v0.h[1], v1.h[0]\nfmov s1, s8\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[2]\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[2], v0.h[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[3]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, s8\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[3], v0.h[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[4]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, s8\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[4], v0.h[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[5]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, s8\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[5], v0.h[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[6]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, s8\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[6], v0.h[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[7]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, s8\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[7], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[1]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, s8\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nfmov s1, s8\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v0.h[1], v1.h[0]\nfmov s1, s8\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[2]\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[2], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[3]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, s8\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[3], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[4]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, s8\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[4], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[5]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, s8\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[5], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[6]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, s8\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[6], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[7]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, s8\nfcvt s0, h0\nbl fmodf\nfmov s1, s0\nldr x30, [sp, #56]                  // 8-byte Folded Reload\nldr d8, [sp, #48]                   // 8-byte Folded Reload\nfcvt h2, s1\nldp q1, q0, [sp, #16]               // 32-byte Folded Reload\nmov v1.h[7], v2.h[0]\nadd sp, sp, #64\nret",
  "giasm": "sub sp, sp, #448\nstp d15, d14, [sp, #368]            // 16-byte Folded Spill\nstp d13, d12, [sp, #384]            // 16-byte Folded Spill\nstp d11, d10, [sp, #400]            // 16-byte Folded Spill\nstp d9, d8, [sp, #416]              // 16-byte Folded Spill\nstp x29, x30, [sp, #432]            // 16-byte Folded Spill\ndup v3.8h, v2.h[0]\ndup v4.8h, v2.h[0]\nstr q1, [sp, #112]                  // 16-byte Folded Spill\nmov h2, v0.h[4]\nmov h12, v0.h[1]\nmov h13, v0.h[2]\nmov h14, v0.h[3]\nmov h15, v3.h[1]\nmov h8, v3.h[2]\nstr q4, [sp, #16]                   // 16-byte Folded Spill\nmov h9, v3.h[3]\nmov h10, v3.h[4]\nmov h11, v3.h[5]\nstr h2, [sp, #272]                  // 2-byte Folded Spill\nmov h2, v0.h[5]\nstr h2, [sp, #240]                  // 2-byte Folded Spill\nmov h2, v0.h[6]\nstr h2, [sp, #176]                  // 2-byte Folded Spill\nmov h2, v0.h[7]\nfcvt s0, h0\nstr h2, [sp, #144]                  // 2-byte Folded Spill\nmov h2, v1.h[1]\nstr h2, [sp, #48]                   // 2-byte Folded Spill\nmov h2, v1.h[2]\nstr h2, [sp, #80]                   // 2-byte Folded Spill\nmov h2, v1.h[3]\nstr h2, [sp, #128]                  // 2-byte Folded Spill\nmov h2, v1.h[4]\nstr h2, [sp, #192]                  // 2-byte Folded Spill\nmov h2, v1.h[5]\nstr h2, [sp, #256]                  // 2-byte Folded Spill\nmov h2, v1.h[6]\nstr h2, [sp, #336]                  // 2-byte Folded Spill\nmov h2, v1.h[7]\nmov h1, v3.h[6]\nstr h1, [sp, #12]                   // 2-byte Folded Spill\nmov h1, v3.h[7]\nstr h2, [sp, #352]                  // 2-byte Folded Spill\nmov h2, v4.h[4]\nstr h1, [sp, #14]                   // 2-byte Folded Spill\nmov h1, v4.h[1]\nstr h2, [sp, #110]                  // 2-byte Folded Spill\nmov h2, v4.h[5]\nstr h1, [sp, #44]                   // 2-byte Folded Spill\nmov h1, v4.h[2]\nstr h2, [sp, #174]                  // 2-byte Folded Spill\nmov h2, v4.h[6]\nstr h1, [sp, #46]                   // 2-byte Folded Spill\nmov h1, v4.h[3]\nstr h2, [sp, #238]                  // 2-byte Folded Spill\nmov h2, v4.h[7]\nstr h1, [sp, #78]                   // 2-byte Folded Spill\nfcvt s1, h3\nstr h2, [sp, #302]                  // 2-byte Folded Spill\nbl fmodf\nfcvt s2, h12\nfcvt h0, s0\nfcvt s1, h15\nstr q0, [sp, #304]                  // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nfcvt s2, h13\nfcvt h0, s0\nfcvt s1, h8\nstr q0, [sp, #208]                  // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nfcvt s2, h14\nfcvt h0, s0\nfcvt s1, h9\nstr q0, [sp, #320]                  // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #272]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nfcvt s1, h10\nstr q0, [sp, #272]                  // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #240]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nfcvt s1, h11\nstr q0, [sp, #240]                  // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #176]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #176]                  // 16-byte Folded Spill\nldr h0, [sp, #12]                   // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #144]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #144]                  // 16-byte Folded Spill\nldr h0, [sp, #14]                   // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl fmodf\nldr q1, [sp, #112]                  // 16-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #112]                  // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #48]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nldr h0, [sp, #44]                   // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #80]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #80]                   // 16-byte Folded Spill\nldr h0, [sp, #46]                   // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #128]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #128]                  // 16-byte Folded Spill\nldr h0, [sp, #78]                   // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #192]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #192]                  // 16-byte Folded Spill\nldr h0, [sp, #110]                  // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #256]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #256]                  // 16-byte Folded Spill\nldr h0, [sp, #174]                  // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #336]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #336]                  // 16-byte Folded Spill\nldr h0, [sp, #238]                  // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #352]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #352]                  // 16-byte Folded Spill\nldr h0, [sp, #302]                  // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl fmodf\nldr q3, [sp, #304]                  // 16-byte Folded Reload\nldr q2, [sp, #208]                  // 16-byte Folded Reload\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nldp x29, x30, [sp, #432]            // 16-byte Folded Reload\nmov v3.h[1], v2.h[0]\nldr q2, [sp, #80]                   // 16-byte Folded Reload\nldp d9, d8, [sp, #416]              // 16-byte Folded Reload\nmov v1.h[1], v2.h[0]\nldr q2, [sp, #320]                  // 16-byte Folded Reload\nldp d11, d10, [sp, #400]            // 16-byte Folded Reload\nmov v3.h[2], v2.h[0]\nldr q2, [sp, #128]                  // 16-byte Folded Reload\nldp d13, d12, [sp, #384]            // 16-byte Folded Reload\nmov v1.h[2], v2.h[0]\nldr q2, [sp, #272]                  // 16-byte Folded Reload\nldp d15, d14, [sp, #368]            // 16-byte Folded Reload\nmov v3.h[3], v2.h[0]\nldr q2, [sp, #192]                  // 16-byte Folded Reload\nmov v1.h[3], v2.h[0]\nldp q4, q2, [sp, #240]              // 32-byte Folded Reload\nmov v3.h[4], v4.h[0]\nmov v1.h[4], v2.h[0]\nldr q2, [sp, #176]                  // 16-byte Folded Reload\nmov v3.h[5], v2.h[0]\nldr q2, [sp, #336]                  // 16-byte Folded Reload\nmov v1.h[5], v2.h[0]\nfcvt h2, s0\nldr q0, [sp, #144]                  // 16-byte Folded Reload\nmov v3.h[6], v0.h[0]\nldr q0, [sp, #352]                  // 16-byte Folded Reload\nmov v1.h[6], v0.h[0]\nldr q0, [sp, #112]                  // 16-byte Folded Reload\nmov v3.h[7], v0.h[0]\nmov v1.h[7], v2.h[0]\nmov v0.16b, v3.16b\nadd sp, sp, #448\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, half %bs) {\n  %i = insertelement <16 x half> poison, half %bs, i64 0\n  %b = shufflevector <16 x half> %i, <16 x half> poison, <16 x i32> zeroinitializer\n  %r = frem <16 x half> %a, %b\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <16 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <16 x half> %i, <16 x half> poison, <16 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <16 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "frem",
  "ty": "<16 x half>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 216,
  "lat": 4,
  "sizelat": 4,
  "size": 142,
  "gisize": 166,
  "extrasize": 0,
  "asm": "sub sp, sp, #64\nstr x30, [sp, #48]                  // 8-byte Folded Spill\nstp q1, q0, [sp]                    // 32-byte Folded Spill\nmov h1, v0.h[1]\nfcvt s0, h1\nfmov s1, #7.00000000\nbl fmodf\nfcvt h0, s0\nfmov s1, #7.00000000\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v0.h[1], v1.h[0]\nfmov s1, #7.00000000\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[2]\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[2], v0.h[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[3]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[3], v0.h[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[4]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[4], v0.h[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[5]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[5], v0.h[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[6]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[6], v0.h[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[7]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[7], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[1]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nfmov s1, #7.00000000\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v0.h[1], v1.h[0]\nfmov s1, #7.00000000\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[2]\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[2], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[3]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[3], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[4]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[4], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[5]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[5], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[6]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[6], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[7]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl fmodf\nfmov s1, s0\nldr x30, [sp, #48]                  // 8-byte Folded Reload\nfcvt h2, s1\nldp q1, q0, [sp, #16]               // 32-byte Folded Reload\nmov v1.h[7], v2.h[0]\nadd sp, sp, #64\nret",
  "giasm": "sub sp, sp, #320\nstp d15, d14, [sp, #240]            // 16-byte Folded Spill\nstp d13, d12, [sp, #256]            // 16-byte Folded Spill\nstp d11, d10, [sp, #272]            // 16-byte Folded Spill\nstp d9, d8, [sp, #288]              // 16-byte Folded Spill\nstp x29, x30, [sp, #304]            // 16-byte Folded Spill\nmov h2, v1.h[1]\nfmov h3, #7.00000000\nstr q1, [sp, #64]                   // 16-byte Folded Spill\nmov h10, v0.h[1]\nmov h11, v0.h[2]\nmov h12, v0.h[3]\nmov h13, v0.h[4]\nmov h14, v0.h[5]\nmov h15, v0.h[6]\nfcvt s8, h3\nmov h9, v0.h[7]\nfcvt s0, h0\nstr h2, [sp]                        // 2-byte Folded Spill\nmov h2, v1.h[2]\nstr h2, [sp, #16]                   // 2-byte Folded Spill\nmov h2, v1.h[3]\nstr h2, [sp, #32]                   // 2-byte Folded Spill\nmov h2, v1.h[4]\nstr h2, [sp, #48]                   // 2-byte Folded Spill\nmov h2, v1.h[5]\nstr h2, [sp, #80]                   // 2-byte Folded Spill\nmov h2, v1.h[6]\nstr h2, [sp, #112]                  // 2-byte Folded Spill\nmov h2, v1.h[7]\nfmov s1, s8\nstr h2, [sp, #176]                  // 2-byte Folded Spill\nbl fmodf\nfcvt s1, h10\nfcvt h0, s0\nstr q0, [sp, #192]                  // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s8\nbl fmodf\nfcvt s1, h11\nfcvt h0, s0\nstr q0, [sp, #144]                  // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s8\nbl fmodf\nfcvt s1, h12\nfcvt h0, s0\nstr q0, [sp, #224]                  // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s8\nbl fmodf\nfcvt s1, h13\nfcvt h0, s0\nstr q0, [sp, #208]                  // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s8\nbl fmodf\nfcvt s1, h14\nfcvt h0, s0\nstr q0, [sp, #160]                  // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s8\nbl fmodf\nfcvt s1, h15\nfcvt h0, s0\nstr q0, [sp, #128]                  // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s8\nbl fmodf\nfcvt s1, h9\nfcvt h0, s0\nstr q0, [sp, #96]                   // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s8\nbl fmodf\nldr q1, [sp, #64]                   // 16-byte Folded Reload\nfcvt h0, s0\nfcvt s1, h1\nstr q0, [sp, #64]                   // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s8\nbl fmodf\nldr h1, [sp]                        // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s1, h1\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s8\nbl fmodf\nldr h1, [sp, #16]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s1, h1\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s8\nbl fmodf\nldr h1, [sp, #32]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s1, h1\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s8\nbl fmodf\nldr h1, [sp, #48]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s1, h1\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s8\nbl fmodf\nldr h1, [sp, #80]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s1, h1\nstr q0, [sp, #80]                   // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s8\nbl fmodf\nldr h1, [sp, #112]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s1, h1\nstr q0, [sp, #112]                  // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s8\nbl fmodf\nldr h1, [sp, #176]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s1, h1\nstr q0, [sp, #176]                  // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s8\nbl fmodf\nldr q3, [sp, #192]                  // 16-byte Folded Reload\nldr q2, [sp, #144]                  // 16-byte Folded Reload\nldp x29, x30, [sp, #304]            // 16-byte Folded Reload\nmov v3.h[1], v2.h[0]\nldp q1, q2, [sp]                    // 32-byte Folded Reload\nldp d9, d8, [sp, #288]              // 16-byte Folded Reload\nldp d11, d10, [sp, #272]            // 16-byte Folded Reload\nmov v1.h[1], v2.h[0]\nldr q2, [sp, #224]                  // 16-byte Folded Reload\nldp d13, d12, [sp, #256]            // 16-byte Folded Reload\nmov v3.h[2], v2.h[0]\nldr q2, [sp, #32]                   // 16-byte Folded Reload\nldp d15, d14, [sp, #240]            // 16-byte Folded Reload\nmov v1.h[2], v2.h[0]\nldr q2, [sp, #208]                  // 16-byte Folded Reload\nmov v3.h[3], v2.h[0]\nldr q2, [sp, #48]                   // 16-byte Folded Reload\nmov v1.h[3], v2.h[0]\nldr q2, [sp, #160]                  // 16-byte Folded Reload\nmov v3.h[4], v2.h[0]\nldr q2, [sp, #80]                   // 16-byte Folded Reload\nmov v1.h[4], v2.h[0]\nldp q2, q4, [sp, #112]              // 32-byte Folded Reload\nmov v3.h[5], v4.h[0]\nmov v1.h[5], v2.h[0]\nfcvt h2, s0\nldr q0, [sp, #96]                   // 16-byte Folded Reload\nmov v3.h[6], v0.h[0]\nldr q0, [sp, #176]                  // 16-byte Folded Reload\nmov v1.h[6], v0.h[0]\nldr q0, [sp, #64]                   // 16-byte Folded Reload\nmov v3.h[7], v0.h[0]\nmov v1.h[7], v2.h[0]\nmov v0.16b, v3.16b\nadd sp, sp, #320\nret",
  "ll": "define <16 x half> @test(<16 x half> %a) {\n  %r = frem <16 x half> %a, splat (half 7.0)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <16 x half> %a, splat (half 0xH4700)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "frem",
  "ty": "<2 x float>",
  "variant": "binop",
  "codesize": 4,
  "thru": 24,
  "lat": 4,
  "sizelat": 4,
  "size": 13,
  "gisize": 16,
  "extrasize": 0,
  "asm": "sub sp, sp, #64\nstr x30, [sp, #48]                  // 8-byte Folded Spill\nstp q0, q1, [sp]                    // 32-byte Folded Spill\nmov s0, v0.s[1]\nmov s1, v1.s[1]\nbl fmodf\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldp q0, q1, [sp]                    // 32-byte Folded Reload\nbl fmodf\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nldr x30, [sp, #48]                  // 8-byte Folded Reload\nmov v0.s[1], v1.s[0]\nadd sp, sp, #64\nret",
  "giasm": "sub sp, sp, #48\nstp d9, d8, [sp, #16]               // 16-byte Folded Spill\nstr x30, [sp, #32]                  // 8-byte Folded Spill\nmov s8, v0.s[1]\nmov s9, v1.s[1]\nbl fmodf\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s1, s9\nfmov s0, s8\nbl fmodf\nldr q1, [sp]                        // 16-byte Folded Reload\nldp d9, d8, [sp, #16]               // 16-byte Folded Reload\nldr x30, [sp, #32]                  // 8-byte Folded Reload\nmov v1.s[1], v0.s[0]\nfmov d0, d1\nadd sp, sp, #48\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, <2 x float> %b) {\n  %r = frem <2 x float> %a, %b\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <2 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "frem",
  "ty": "<2 x float>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 24,
  "lat": 4,
  "sizelat": 4,
  "size": 14,
  "gisize": 16,
  "extrasize": 0,
  "asm": "sub sp, sp, #48\nstr x30, [sp, #32]                  // 8-byte Folded Spill\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s1, #6.00000000\nmov s0, v0.s[1]\nbl fmodf\nfmov s1, #7.00000000\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nbl fmodf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nldr x30, [sp, #32]                  // 8-byte Folded Reload\nmov v0.s[1], v1.s[0]\nadd sp, sp, #48\nret",
  "giasm": "sub sp, sp, #32\nstr d8, [sp, #16]                   // 8-byte Folded Spill\nstr x30, [sp, #24]                  // 8-byte Folded Spill\nfmov s1, #7.00000000\nmov s8, v0.s[1]\nbl fmodf\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s1, #6.00000000\nfmov s0, s8\nbl fmodf\nldr q1, [sp]                        // 16-byte Folded Reload\nldr x30, [sp, #24]                  // 8-byte Folded Reload\nldr d8, [sp, #16]                   // 8-byte Folded Reload\nmov v1.s[1], v0.s[0]\nfmov d0, d1\nadd sp, sp, #32\nret",
  "ll": "define <2 x float> @test(<2 x float> %a) {\n  %r = frem <2 x float> %a, <float 7.0, float 6.0>\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <2 x float> %a, <float 7.000000e+00, float 6.000000e+00>\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "frem",
  "ty": "<2 x float>",
  "variant": "binopsplat",
  "codesize": 5,
  "thru": 25,
  "lat": 5,
  "sizelat": 5,
  "size": 16,
  "gisize": 17,
  "extrasize": 0,
  "asm": "sub sp, sp, #48\nstr d8, [sp, #32]                   // 8-byte Folded Spill\nstr x30, [sp, #40]                  // 8-byte Folded Spill\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s8, s1\nmov s0, v0.s[1]\nbl fmodf\nfmov s1, s8\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nbl fmodf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nldr x30, [sp, #40]                  // 8-byte Folded Reload\nldr d8, [sp, #32]                   // 8-byte Folded Reload\nmov v0.s[1], v1.s[0]\nadd sp, sp, #48\nret",
  "giasm": "sub sp, sp, #48\nstp d9, d8, [sp, #16]               // 16-byte Folded Spill\nstr x30, [sp, #32]                  // 8-byte Folded Spill\nmov s8, v0.s[1]\ndup v1.2s, v1.s[0]\nmov s9, v1.s[1]\nbl fmodf\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s1, s9\nfmov s0, s8\nbl fmodf\nldr q1, [sp]                        // 16-byte Folded Reload\nldp d9, d8, [sp, #16]               // 16-byte Folded Reload\nldr x30, [sp, #32]                  // 8-byte Folded Reload\nmov v1.s[1], v0.s[0]\nfmov d0, d1\nadd sp, sp, #48\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, float %bs) {\n  %i = insertelement <2 x float> poison, float %bs, i64 0\n  %b = shufflevector <2 x float> %i, <2 x float> poison, <2 x i32> zeroinitializer\n  %r = frem <2 x float> %a, %b\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <2 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <2 x float> %i, <2 x float> poison, <2 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <2 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "frem",
  "ty": "<2 x float>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 24,
  "lat": 4,
  "sizelat": 4,
  "size": 14,
  "gisize": 16,
  "extrasize": 0,
  "asm": "sub sp, sp, #48\nstr x30, [sp, #32]                  // 8-byte Folded Spill\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s1, #7.00000000\nmov s0, v0.s[1]\nbl fmodf\nfmov s1, #7.00000000\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nbl fmodf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nldr x30, [sp, #32]                  // 8-byte Folded Reload\nmov v0.s[1], v1.s[0]\nadd sp, sp, #48\nret",
  "giasm": "sub sp, sp, #32\nstr d8, [sp, #16]                   // 8-byte Folded Spill\nstr x30, [sp, #24]                  // 8-byte Folded Spill\nfmov s1, #7.00000000\nmov s8, v0.s[1]\nbl fmodf\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s1, #7.00000000\nfmov s0, s8\nbl fmodf\nldr q1, [sp]                        // 16-byte Folded Reload\nldr x30, [sp, #24]                  // 8-byte Folded Reload\nldr d8, [sp, #16]                   // 8-byte Folded Reload\nmov v1.s[1], v0.s[0]\nfmov d0, d1\nadd sp, sp, #32\nret",
  "ll": "define <2 x float> @test(<2 x float> %a) {\n  %r = frem <2 x float> %a, splat (float 7.0)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <2 x float> %a, splat (float 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "frem",
  "ty": "<4 x float>",
  "variant": "binop",
  "codesize": 4,
  "thru": 52,
  "lat": 4,
  "sizelat": 4,
  "size": 28,
  "gisize": 35,
  "extrasize": 0,
  "asm": "sub sp, sp, #64\nstr x30, [sp, #48]                  // 8-byte Folded Spill\nstp q0, q1, [sp, #16]               // 32-byte Folded Spill\nmov s0, v0.s[1]\nmov s1, v1.s[1]\nbl fmodf\nstr q0, [sp]                        // 16-byte Folded Spill\nldp q0, q1, [sp, #16]               // 32-byte Folded Reload\nbl fmodf\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v0.s[1], v1.s[0]\nstr q0, [sp]                        // 16-byte Folded Spill\nldp q0, q1, [sp, #16]               // 32-byte Folded Reload\nmov s0, v0.s[2]\nmov s1, v1.s[2]\nbl fmodf\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v1.s[2], v0.s[0]\nstr q1, [sp]                        // 16-byte Folded Spill\nldp q0, q1, [sp, #16]               // 32-byte Folded Reload\nmov s0, v0.s[3]\nmov s1, v1.s[3]\nbl fmodf\nldr q1, [sp]                        // 16-byte Folded Reload\nldr x30, [sp, #48]                  // 8-byte Folded Reload\nmov v1.s[3], v0.s[0]\nmov v0.16b, v1.16b\nadd sp, sp, #64\nret",
  "giasm": "sub sp, sp, #112\nstp d13, d12, [sp, #48]             // 16-byte Folded Spill\nstp d11, d10, [sp, #64]             // 16-byte Folded Spill\nstp d9, d8, [sp, #80]               // 16-byte Folded Spill\nstr x30, [sp, #96]                  // 8-byte Folded Spill\nmov s8, v0.s[1]\nmov s9, v0.s[2]\nmov s10, v0.s[3]\nmov s11, v1.s[1]\nmov s12, v1.s[2]\nmov s13, v1.s[3]\nbl fmodf\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, s11\nfmov s0, s8\nbl fmodf\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, s12\nfmov s0, s9\nbl fmodf\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s1, s13\nfmov s0, s10\nbl fmodf\nldp q2, q1, [sp, #16]               // 32-byte Folded Reload\nldr x30, [sp, #96]                  // 8-byte Folded Reload\nldp d9, d8, [sp, #80]               // 16-byte Folded Reload\nldp d11, d10, [sp, #64]             // 16-byte Folded Reload\nmov v1.s[1], v2.s[0]\nldr q2, [sp]                        // 16-byte Folded Reload\nldp d13, d12, [sp, #48]             // 16-byte Folded Reload\nmov v1.s[2], v2.s[0]\nmov v1.s[3], v0.s[0]\nmov v0.16b, v1.16b\nadd sp, sp, #112\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, <4 x float> %b) {\n  %r = frem <4 x float> %a, %b\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <4 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "frem",
  "ty": "<4 x float>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 52,
  "lat": 4,
  "sizelat": 4,
  "size": 29,
  "gisize": 31,
  "extrasize": 0,
  "asm": "sub sp, sp, #48\nstr x30, [sp, #32]                  // 8-byte Folded Spill\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nmov s0, v0.s[1]\nfmov s1, #6.00000000\nbl fmodf\nfmov s1, #7.00000000\nstr q0, [sp]                        // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nbl fmodf\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v0.s[1], v1.s[0]\nfmov s1, #7.00000000\nstr q0, [sp]                        // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov s0, v0.s[2]\nbl fmodf\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v1.s[2], v0.s[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov s0, v0.s[3]\nstr q1, [sp]                        // 16-byte Folded Spill\nfmov s1, #6.00000000\nbl fmodf\nldr q1, [sp]                        // 16-byte Folded Reload\nldr x30, [sp, #32]                  // 8-byte Folded Reload\nmov v1.s[3], v0.s[0]\nmov v0.16b, v1.16b\nadd sp, sp, #48\nret",
  "giasm": "sub sp, sp, #80\nstr d10, [sp, #48]                  // 8-byte Folded Spill\nstp d9, d8, [sp, #56]               // 16-byte Folded Spill\nstr x30, [sp, #72]                  // 8-byte Folded Spill\nfmov s1, #7.00000000\nmov s8, v0.s[1]\nmov s9, v0.s[2]\nmov s10, v0.s[3]\nbl fmodf\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, #6.00000000\nfmov s0, s8\nbl fmodf\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfmov s0, s9\nbl fmodf\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s1, #6.00000000\nfmov s0, s10\nbl fmodf\nldp q2, q1, [sp, #16]               // 32-byte Folded Reload\nldr x30, [sp, #72]                  // 8-byte Folded Reload\nldp d9, d8, [sp, #56]               // 16-byte Folded Reload\nldr d10, [sp, #48]                  // 8-byte Folded Reload\nmov v1.s[1], v2.s[0]\nldr q2, [sp]                        // 16-byte Folded Reload\nmov v1.s[2], v2.s[0]\nmov v1.s[3], v0.s[0]\nmov v0.16b, v1.16b\nadd sp, sp, #80\nret",
  "ll": "define <4 x float> @test(<4 x float> %a) {\n  %r = frem <4 x float> %a, <float 7.0, float 6.0, float 7.0, float 6.0>\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <4 x float> %a, <float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00>\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "frem",
  "ty": "<4 x float>",
  "variant": "binopsplat",
  "codesize": 5,
  "thru": 53,
  "lat": 5,
  "sizelat": 5,
  "size": 31,
  "gisize": 36,
  "extrasize": 0,
  "asm": "sub sp, sp, #48\nstr d8, [sp, #32]                   // 8-byte Folded Spill\nstr x30, [sp, #40]                  // 8-byte Folded Spill\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nmov s0, v0.s[1]\nfmov s8, s1\nbl fmodf\nfmov s1, s8\nstr q0, [sp]                        // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nbl fmodf\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v0.s[1], v1.s[0]\nfmov s1, s8\nstr q0, [sp]                        // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov s0, v0.s[2]\nbl fmodf\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v1.s[2], v0.s[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov s0, v0.s[3]\nstr q1, [sp]                        // 16-byte Folded Spill\nfmov s1, s8\nbl fmodf\nldr q1, [sp]                        // 16-byte Folded Reload\nldr x30, [sp, #40]                  // 8-byte Folded Reload\nldr d8, [sp, #32]                   // 8-byte Folded Reload\nmov v1.s[3], v0.s[0]\nmov v0.16b, v1.16b\nadd sp, sp, #48\nret",
  "giasm": "sub sp, sp, #112\nstp d13, d12, [sp, #48]             // 16-byte Folded Spill\nstp d11, d10, [sp, #64]             // 16-byte Folded Spill\nstp d9, d8, [sp, #80]               // 16-byte Folded Spill\nstr x30, [sp, #96]                  // 8-byte Folded Spill\nmov s8, v0.s[1]\nmov s9, v0.s[2]\nmov s10, v0.s[3]\ndup v1.4s, v1.s[0]\nmov s11, v1.s[1]\nmov s12, v1.s[2]\nmov s13, v1.s[3]\nbl fmodf\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, s11\nfmov s0, s8\nbl fmodf\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, s12\nfmov s0, s9\nbl fmodf\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s1, s13\nfmov s0, s10\nbl fmodf\nldp q2, q1, [sp, #16]               // 32-byte Folded Reload\nldr x30, [sp, #96]                  // 8-byte Folded Reload\nldp d9, d8, [sp, #80]               // 16-byte Folded Reload\nldp d11, d10, [sp, #64]             // 16-byte Folded Reload\nmov v1.s[1], v2.s[0]\nldr q2, [sp]                        // 16-byte Folded Reload\nldp d13, d12, [sp, #48]             // 16-byte Folded Reload\nmov v1.s[2], v2.s[0]\nmov v1.s[3], v0.s[0]\nmov v0.16b, v1.16b\nadd sp, sp, #112\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, float %bs) {\n  %i = insertelement <4 x float> poison, float %bs, i64 0\n  %b = shufflevector <4 x float> %i, <4 x float> poison, <4 x i32> zeroinitializer\n  %r = frem <4 x float> %a, %b\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <4 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <4 x float> %i, <4 x float> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <4 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "frem",
  "ty": "<4 x float>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 52,
  "lat": 4,
  "sizelat": 4,
  "size": 29,
  "gisize": 31,
  "extrasize": 0,
  "asm": "sub sp, sp, #48\nstr x30, [sp, #32]                  // 8-byte Folded Spill\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nmov s0, v0.s[1]\nfmov s1, #7.00000000\nbl fmodf\nfmov s1, #7.00000000\nstr q0, [sp]                        // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nbl fmodf\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v0.s[1], v1.s[0]\nfmov s1, #7.00000000\nstr q0, [sp]                        // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov s0, v0.s[2]\nbl fmodf\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v1.s[2], v0.s[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov s0, v0.s[3]\nstr q1, [sp]                        // 16-byte Folded Spill\nfmov s1, #7.00000000\nbl fmodf\nldr q1, [sp]                        // 16-byte Folded Reload\nldr x30, [sp, #32]                  // 8-byte Folded Reload\nmov v1.s[3], v0.s[0]\nmov v0.16b, v1.16b\nadd sp, sp, #48\nret",
  "giasm": "sub sp, sp, #80\nstr d10, [sp, #48]                  // 8-byte Folded Spill\nstp d9, d8, [sp, #56]               // 16-byte Folded Spill\nstr x30, [sp, #72]                  // 8-byte Folded Spill\nfmov s1, #7.00000000\nmov s8, v0.s[1]\nmov s9, v0.s[2]\nmov s10, v0.s[3]\nbl fmodf\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfmov s0, s8\nbl fmodf\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfmov s0, s9\nbl fmodf\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s1, #7.00000000\nfmov s0, s10\nbl fmodf\nldp q2, q1, [sp, #16]               // 32-byte Folded Reload\nldr x30, [sp, #72]                  // 8-byte Folded Reload\nldp d9, d8, [sp, #56]               // 16-byte Folded Reload\nldr d10, [sp, #48]                  // 8-byte Folded Reload\nmov v1.s[1], v2.s[0]\nldr q2, [sp]                        // 16-byte Folded Reload\nmov v1.s[2], v2.s[0]\nmov v1.s[3], v0.s[0]\nmov v0.16b, v1.16b\nadd sp, sp, #80\nret",
  "ll": "define <4 x float> @test(<4 x float> %a) {\n  %r = frem <4 x float> %a, splat (float 7.0)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <4 x float> %a, splat (float 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "frem",
  "ty": "<8 x float>",
  "variant": "binop",
  "codesize": 4,
  "thru": 104,
  "lat": 4,
  "sizelat": 4,
  "size": 54,
  "gisize": 72,
  "extrasize": 0,
  "asm": "sub sp, sp, #96\nstr x30, [sp, #80]                  // 8-byte Folded Spill\nstp q0, q2, [sp]                    // 32-byte Folded Spill\nmov s0, v0.s[1]\nstp q1, q3, [sp, #32]               // 32-byte Folded Spill\nmov s1, v2.s[1]\nbl fmodf\nstr q0, [sp, #64]                   // 16-byte Folded Spill\nldp q0, q1, [sp]                    // 32-byte Folded Reload\nbl fmodf\nldr q1, [sp, #64]                   // 16-byte Folded Reload\nmov v0.s[1], v1.s[0]\nstr q0, [sp, #64]                   // 16-byte Folded Spill\nldp q0, q1, [sp]                    // 32-byte Folded Reload\nmov s0, v0.s[2]\nmov s1, v1.s[2]\nbl fmodf\nldr q1, [sp, #64]                   // 16-byte Folded Reload\nmov v1.s[2], v0.s[0]\nstr q1, [sp, #64]                   // 16-byte Folded Spill\nldp q0, q1, [sp]                    // 32-byte Folded Reload\nmov s0, v0.s[3]\nmov s1, v1.s[3]\nbl fmodf\nldr q1, [sp, #64]                   // 16-byte Folded Reload\nmov v1.s[3], v0.s[0]\nstr q1, [sp, #64]                   // 16-byte Folded Spill\nldp q0, q1, [sp, #32]               // 32-byte Folded Reload\nmov s0, v0.s[1]\nmov s1, v1.s[1]\nbl fmodf\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldp q0, q1, [sp, #32]               // 32-byte Folded Reload\nbl fmodf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v0.s[1], v1.s[0]\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldp q0, q1, [sp, #32]               // 32-byte Folded Reload\nmov s0, v0.s[2]\nmov s1, v1.s[2]\nbl fmodf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.s[2], v0.s[0]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nldp q0, q1, [sp, #32]               // 32-byte Folded Reload\nmov s0, v0.s[3]\nmov s1, v1.s[3]\nbl fmodf\nfmov s2, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nldr q0, [sp, #64]                   // 16-byte Folded Reload\nldr x30, [sp, #80]                  // 8-byte Folded Reload\nmov v1.s[3], v2.s[0]\nadd sp, sp, #96\nret",
  "giasm": "sub sp, sp, #208\nstp d15, d14, [sp, #128]            // 16-byte Folded Spill\nstp d13, d12, [sp, #144]            // 16-byte Folded Spill\nstp d11, d10, [sp, #160]            // 16-byte Folded Spill\nstp d9, d8, [sp, #176]              // 16-byte Folded Spill\nstr x30, [sp, #192]                 // 8-byte Folded Spill\nmov v4.16b, v1.16b\nmov v1.16b, v2.16b\nmov s8, v0.s[1]\nmov s9, v0.s[2]\nmov s10, v0.s[3]\nmov s12, v3.s[1]\nmov s11, v3.s[2]\nmov s2, v4.s[1]\nstp q3, q4, [sp]                    // 32-byte Folded Spill\nmov s5, v4.s[3]\nmov s14, v1.s[1]\nmov s15, v1.s[2]\nmov s13, v1.s[3]\nstr s2, [sp, #48]                   // 4-byte Folded Spill\nmov s2, v4.s[2]\nstr s2, [sp, #112]                  // 4-byte Folded Spill\nmov s2, v3.s[3]\nstp s2, s5, [sp, #200]              // 8-byte Folded Spill\nbl fmodf\nstr q0, [sp, #96]                   // 16-byte Folded Spill\nfmov s1, s14\nfmov s0, s8\nbl fmodf\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, s15\nfmov s0, s9\nbl fmodf\nstr q0, [sp, #80]                   // 16-byte Folded Spill\nfmov s1, s13\nfmov s0, s10\nbl fmodf\nstr q0, [sp, #64]                   // 16-byte Folded Spill\nldp q1, q0, [sp]                    // 32-byte Folded Reload\nbl fmodf\nfmov s1, s12\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr s0, [sp, #48]                   // 4-byte Folded Reload\nbl fmodf\nfmov s1, s11\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nldr s0, [sp, #112]                  // 4-byte Folded Reload\nbl fmodf\nstr q0, [sp, #112]                  // 16-byte Folded Spill\nldp s1, s0, [sp, #200]              // 8-byte Folded Reload\nbl fmodf\nldp q3, q2, [sp, #16]               // 32-byte Folded Reload\nldr q1, [sp, #96]                   // 16-byte Folded Reload\nldp d9, d8, [sp, #176]              // 16-byte Folded Reload\nldr x30, [sp, #192]                 // 8-byte Folded Reload\nldp d11, d10, [sp, #160]            // 16-byte Folded Reload\nmov v1.s[1], v2.s[0]\nldr q2, [sp, #48]                   // 16-byte Folded Reload\nldp d13, d12, [sp, #144]            // 16-byte Folded Reload\nmov v3.s[1], v2.s[0]\nldr q2, [sp, #80]                   // 16-byte Folded Reload\nldp d15, d14, [sp, #128]            // 16-byte Folded Reload\nmov v1.s[2], v2.s[0]\nldr q2, [sp, #112]                  // 16-byte Folded Reload\nmov v3.s[2], v2.s[0]\nldr q2, [sp, #64]                   // 16-byte Folded Reload\nmov v1.s[3], v2.s[0]\nmov v3.s[3], v0.s[0]\nmov v2.16b, v1.16b\nmov v1.16b, v3.16b\nmov v0.16b, v2.16b\nadd sp, sp, #208\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, <8 x float> %b) {\n  %r = frem <8 x float> %a, %b\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <8 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "frem",
  "ty": "<8 x float>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 104,
  "lat": 4,
  "sizelat": 4,
  "size": 55,
  "gisize": 62,
  "extrasize": 0,
  "asm": "sub sp, sp, #64\nstr x30, [sp, #48]                  // 8-byte Folded Spill\nstp q0, q1, [sp]                    // 32-byte Folded Spill\nmov s0, v0.s[1]\nfmov s1, #6.00000000\nbl fmodf\nfmov s1, #7.00000000\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nbl fmodf\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v0.s[1], v1.s[0]\nfmov s1, #7.00000000\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nmov s0, v0.s[2]\nbl fmodf\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.s[2], v0.s[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov s0, v0.s[3]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, #6.00000000\nbl fmodf\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.s[3], v0.s[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov s0, v0.s[1]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, #6.00000000\nbl fmodf\nfmov s1, #7.00000000\nstr q0, [sp]                        // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nbl fmodf\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v0.s[1], v1.s[0]\nfmov s1, #7.00000000\nstr q0, [sp]                        // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov s0, v0.s[2]\nbl fmodf\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v1.s[2], v0.s[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov s0, v0.s[3]\nstr q1, [sp]                        // 16-byte Folded Spill\nfmov s1, #6.00000000\nbl fmodf\nfmov s2, s0\nldr q1, [sp]                        // 16-byte Folded Reload\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nldr x30, [sp, #48]                  // 8-byte Folded Reload\nmov v1.s[3], v2.s[0]\nadd sp, sp, #64\nret",
  "giasm": "sub sp, sp, #176\nstp d13, d12, [sp, #112]            // 16-byte Folded Spill\nstp d11, d10, [sp, #128]            // 16-byte Folded Spill\nstp d9, d8, [sp, #144]              // 16-byte Folded Spill\nstr x30, [sp, #160]                 // 8-byte Folded Spill\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nmov s11, v1.s[1]\nmov s12, v1.s[2]\nmov s13, v1.s[3]\nfmov s1, #7.00000000\nmov s8, v0.s[1]\nmov s9, v0.s[2]\nmov s10, v0.s[3]\nbl fmodf\nstr q0, [sp, #96]                   // 16-byte Folded Spill\nfmov s1, #6.00000000\nfmov s0, s8\nbl fmodf\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfmov s0, s9\nbl fmodf\nstr q0, [sp, #80]                   // 16-byte Folded Spill\nfmov s1, #6.00000000\nfmov s0, s10\nbl fmodf\nfmov s1, #7.00000000\nstr q0, [sp, #64]                   // 16-byte Folded Spill\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nbl fmodf\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, #6.00000000\nfmov s0, s11\nbl fmodf\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfmov s0, s12\nbl fmodf\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s1, #6.00000000\nfmov s0, s13\nbl fmodf\nldp q3, q2, [sp, #32]               // 32-byte Folded Reload\nldr q1, [sp, #96]                   // 16-byte Folded Reload\nldp d9, d8, [sp, #144]              // 16-byte Folded Reload\nldr x30, [sp, #160]                 // 8-byte Folded Reload\nldp d11, d10, [sp, #128]            // 16-byte Folded Reload\nmov v1.s[1], v2.s[0]\nldr q2, [sp, #16]                   // 16-byte Folded Reload\nldp d13, d12, [sp, #112]            // 16-byte Folded Reload\nmov v3.s[1], v2.s[0]\nldr q2, [sp, #80]                   // 16-byte Folded Reload\nmov v1.s[2], v2.s[0]\nldr q2, [sp]                        // 16-byte Folded Reload\nmov v3.s[2], v2.s[0]\nldr q2, [sp, #64]                   // 16-byte Folded Reload\nmov v1.s[3], v2.s[0]\nmov v3.s[3], v0.s[0]\nmov v2.16b, v1.16b\nmov v1.16b, v3.16b\nmov v0.16b, v2.16b\nadd sp, sp, #176\nret",
  "ll": "define <8 x float> @test(<8 x float> %a) {\n  %r = frem <8 x float> %a, <float 7.0, float 6.0, float 7.0, float 6.0, float 7.0, float 6.0, float 7.0, float 6.0>\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <8 x float> %a, <float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00>\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "frem",
  "ty": "<8 x float>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 106,
  "lat": 6,
  "sizelat": 6,
  "size": 58,
  "gisize": 73,
  "extrasize": 0,
  "asm": "sub sp, sp, #64\nstr d8, [sp, #48]                   // 8-byte Folded Spill\nstr x30, [sp, #56]                  // 8-byte Folded Spill\nstp q0, q1, [sp]                    // 32-byte Folded Spill\nmov s0, v0.s[1]\nfmov s1, s2\nfmov s8, s2\nbl fmodf\nfmov s1, s8\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nbl fmodf\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v0.s[1], v1.s[0]\nfmov s1, s8\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nmov s0, v0.s[2]\nbl fmodf\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.s[2], v0.s[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov s0, v0.s[3]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, s8\nbl fmodf\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.s[3], v0.s[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov s0, v0.s[1]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, s8\nbl fmodf\nfmov s1, s8\nstr q0, [sp]                        // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nbl fmodf\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v0.s[1], v1.s[0]\nfmov s1, s8\nstr q0, [sp]                        // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov s0, v0.s[2]\nbl fmodf\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v1.s[2], v0.s[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov s0, v0.s[3]\nstr q1, [sp]                        // 16-byte Folded Spill\nfmov s1, s8\nbl fmodf\nfmov s2, s0\nldr q1, [sp]                        // 16-byte Folded Reload\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nldr x30, [sp, #56]                  // 8-byte Folded Reload\nldr d8, [sp, #48]                   // 8-byte Folded Reload\nmov v1.s[3], v2.s[0]\nadd sp, sp, #64\nret",
  "giasm": "sub sp, sp, #208\nstp d15, d14, [sp, #128]            // 16-byte Folded Spill\nstp d13, d12, [sp, #144]            // 16-byte Folded Spill\nstp d11, d10, [sp, #160]            // 16-byte Folded Spill\nstp d9, d8, [sp, #176]              // 16-byte Folded Spill\nstr x30, [sp, #192]                 // 8-byte Folded Spill\nmov v3.16b, v1.16b\ndup v1.4s, v2.s[0]\ndup v4.4s, v2.s[0]\nmov s8, v0.s[1]\nmov s9, v0.s[2]\nmov s10, v0.s[3]\nmov s2, v3.s[1]\nmov s5, v3.s[3]\nstp q4, q3, [sp]                    // 32-byte Folded Spill\nmov s14, v1.s[1]\nmov s15, v1.s[2]\nmov s13, v1.s[3]\nmov s12, v4.s[1]\nmov s11, v4.s[2]\nstr s2, [sp, #48]                   // 4-byte Folded Spill\nmov s2, v3.s[2]\nstr s2, [sp, #112]                  // 4-byte Folded Spill\nmov s2, v4.s[3]\nstp s2, s5, [sp, #200]              // 8-byte Folded Spill\nbl fmodf\nstr q0, [sp, #96]                   // 16-byte Folded Spill\nfmov s1, s14\nfmov s0, s8\nbl fmodf\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, s15\nfmov s0, s9\nbl fmodf\nstr q0, [sp, #80]                   // 16-byte Folded Spill\nfmov s1, s13\nfmov s0, s10\nbl fmodf\nstr q0, [sp, #64]                   // 16-byte Folded Spill\nldp q1, q0, [sp]                    // 32-byte Folded Reload\nbl fmodf\nfmov s1, s12\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr s0, [sp, #48]                   // 4-byte Folded Reload\nbl fmodf\nfmov s1, s11\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nldr s0, [sp, #112]                  // 4-byte Folded Reload\nbl fmodf\nstr q0, [sp, #112]                  // 16-byte Folded Spill\nldp s1, s0, [sp, #200]              // 8-byte Folded Reload\nbl fmodf\nldp q3, q2, [sp, #16]               // 32-byte Folded Reload\nldr q1, [sp, #96]                   // 16-byte Folded Reload\nldp d9, d8, [sp, #176]              // 16-byte Folded Reload\nldr x30, [sp, #192]                 // 8-byte Folded Reload\nldp d11, d10, [sp, #160]            // 16-byte Folded Reload\nmov v1.s[1], v2.s[0]\nldr q2, [sp, #48]                   // 16-byte Folded Reload\nldp d13, d12, [sp, #144]            // 16-byte Folded Reload\nmov v3.s[1], v2.s[0]\nldr q2, [sp, #80]                   // 16-byte Folded Reload\nldp d15, d14, [sp, #128]            // 16-byte Folded Reload\nmov v1.s[2], v2.s[0]\nldr q2, [sp, #112]                  // 16-byte Folded Reload\nmov v3.s[2], v2.s[0]\nldr q2, [sp, #64]                   // 16-byte Folded Reload\nmov v1.s[3], v2.s[0]\nmov v3.s[3], v0.s[0]\nmov v2.16b, v1.16b\nmov v1.16b, v3.16b\nmov v0.16b, v2.16b\nadd sp, sp, #208\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, float %bs) {\n  %i = insertelement <8 x float> poison, float %bs, i64 0\n  %b = shufflevector <8 x float> %i, <8 x float> poison, <8 x i32> zeroinitializer\n  %r = frem <8 x float> %a, %b\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <8 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <8 x float> %i, <8 x float> poison, <8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <8 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "frem",
  "ty": "<8 x float>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 104,
  "lat": 4,
  "sizelat": 4,
  "size": 55,
  "gisize": 62,
  "extrasize": 0,
  "asm": "sub sp, sp, #64\nstr x30, [sp, #48]                  // 8-byte Folded Spill\nstp q0, q1, [sp]                    // 32-byte Folded Spill\nmov s0, v0.s[1]\nfmov s1, #7.00000000\nbl fmodf\nfmov s1, #7.00000000\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nbl fmodf\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v0.s[1], v1.s[0]\nfmov s1, #7.00000000\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nmov s0, v0.s[2]\nbl fmodf\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.s[2], v0.s[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov s0, v0.s[3]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nbl fmodf\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.s[3], v0.s[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov s0, v0.s[1]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nbl fmodf\nfmov s1, #7.00000000\nstr q0, [sp]                        // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nbl fmodf\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v0.s[1], v1.s[0]\nfmov s1, #7.00000000\nstr q0, [sp]                        // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov s0, v0.s[2]\nbl fmodf\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v1.s[2], v0.s[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov s0, v0.s[3]\nstr q1, [sp]                        // 16-byte Folded Spill\nfmov s1, #7.00000000\nbl fmodf\nfmov s2, s0\nldr q1, [sp]                        // 16-byte Folded Reload\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nldr x30, [sp, #48]                  // 8-byte Folded Reload\nmov v1.s[3], v2.s[0]\nadd sp, sp, #64\nret",
  "giasm": "sub sp, sp, #176\nstp d13, d12, [sp, #112]            // 16-byte Folded Spill\nstp d11, d10, [sp, #128]            // 16-byte Folded Spill\nstp d9, d8, [sp, #144]              // 16-byte Folded Spill\nstr x30, [sp, #160]                 // 8-byte Folded Spill\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nmov s11, v1.s[1]\nmov s12, v1.s[2]\nmov s13, v1.s[3]\nfmov s1, #7.00000000\nmov s8, v0.s[1]\nmov s9, v0.s[2]\nmov s10, v0.s[3]\nbl fmodf\nstr q0, [sp, #96]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfmov s0, s8\nbl fmodf\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfmov s0, s9\nbl fmodf\nstr q0, [sp, #80]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfmov s0, s10\nbl fmodf\nfmov s1, #7.00000000\nstr q0, [sp, #64]                   // 16-byte Folded Spill\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nbl fmodf\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfmov s0, s11\nbl fmodf\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfmov s0, s12\nbl fmodf\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s1, #7.00000000\nfmov s0, s13\nbl fmodf\nldp q3, q2, [sp, #32]               // 32-byte Folded Reload\nldr q1, [sp, #96]                   // 16-byte Folded Reload\nldp d9, d8, [sp, #144]              // 16-byte Folded Reload\nldr x30, [sp, #160]                 // 8-byte Folded Reload\nldp d11, d10, [sp, #128]            // 16-byte Folded Reload\nmov v1.s[1], v2.s[0]\nldr q2, [sp, #16]                   // 16-byte Folded Reload\nldp d13, d12, [sp, #112]            // 16-byte Folded Reload\nmov v3.s[1], v2.s[0]\nldr q2, [sp, #80]                   // 16-byte Folded Reload\nmov v1.s[2], v2.s[0]\nldr q2, [sp]                        // 16-byte Folded Reload\nmov v3.s[2], v2.s[0]\nldr q2, [sp, #64]                   // 16-byte Folded Reload\nmov v1.s[3], v2.s[0]\nmov v3.s[3], v0.s[0]\nmov v2.16b, v1.16b\nmov v1.16b, v3.16b\nmov v0.16b, v2.16b\nadd sp, sp, #176\nret",
  "ll": "define <8 x float> @test(<8 x float> %a) {\n  %r = frem <8 x float> %a, splat (float 7.0)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <8 x float> %a, splat (float 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "frem",
  "ty": "<2 x double>",
  "variant": "binop",
  "codesize": 4,
  "thru": 24,
  "lat": 4,
  "sizelat": 4,
  "size": 13,
  "gisize": 16,
  "extrasize": 0,
  "asm": "sub sp, sp, #64\nstr x30, [sp, #48]                  // 8-byte Folded Spill\nstp q0, q1, [sp]                    // 32-byte Folded Spill\nmov d0, v0.d[1]\nmov d1, v1.d[1]\nbl fmod\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldp q0, q1, [sp]                    // 32-byte Folded Reload\nbl fmod\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nldr x30, [sp, #48]                  // 8-byte Folded Reload\nmov v0.d[1], v1.d[0]\nadd sp, sp, #64\nret",
  "giasm": "sub sp, sp, #48\nstp d9, d8, [sp, #16]               // 16-byte Folded Spill\nstr x30, [sp, #32]                  // 8-byte Folded Spill\nmov d8, v0.d[1]\nmov d9, v1.d[1]\nbl fmod\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov d1, d9\nfmov d0, d8\nbl fmod\nldr q1, [sp]                        // 16-byte Folded Reload\nldp d9, d8, [sp, #16]               // 16-byte Folded Reload\nldr x30, [sp, #32]                  // 8-byte Folded Reload\nmov v1.d[1], v0.d[0]\nmov v0.16b, v1.16b\nadd sp, sp, #48\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, <2 x double> %b) {\n  %r = frem <2 x double> %a, %b\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <2 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "frem",
  "ty": "<2 x double>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 24,
  "lat": 4,
  "sizelat": 4,
  "size": 14,
  "gisize": 16,
  "extrasize": 0,
  "asm": "sub sp, sp, #48\nstr x30, [sp, #32]                  // 8-byte Folded Spill\nstr q0, [sp]                        // 16-byte Folded Spill\nmov d0, v0.d[1]\nfmov d1, #6.00000000\nbl fmod\nfmov d1, #7.00000000\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nbl fmod\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nldr x30, [sp, #32]                  // 8-byte Folded Reload\nmov v0.d[1], v1.d[0]\nadd sp, sp, #48\nret",
  "giasm": "sub sp, sp, #32\nstr d8, [sp, #16]                   // 8-byte Folded Spill\nstr x30, [sp, #24]                  // 8-byte Folded Spill\nfmov d1, #7.00000000\nmov d8, v0.d[1]\nbl fmod\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov d1, #6.00000000\nfmov d0, d8\nbl fmod\nldr q1, [sp]                        // 16-byte Folded Reload\nldr x30, [sp, #24]                  // 8-byte Folded Reload\nldr d8, [sp, #16]                   // 8-byte Folded Reload\nmov v1.d[1], v0.d[0]\nmov v0.16b, v1.16b\nadd sp, sp, #32\nret",
  "ll": "define <2 x double> @test(<2 x double> %a) {\n  %r = frem <2 x double> %a, <double 7.0, double 6.0>\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <2 x double> %a, <double 7.000000e+00, double 6.000000e+00>\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "frem",
  "ty": "<2 x double>",
  "variant": "binopsplat",
  "codesize": 5,
  "thru": 25,
  "lat": 5,
  "sizelat": 5,
  "size": 16,
  "gisize": 17,
  "extrasize": 0,
  "asm": "sub sp, sp, #48\nstr d8, [sp, #32]                   // 8-byte Folded Spill\nstr x30, [sp, #40]                  // 8-byte Folded Spill\nstr q0, [sp]                        // 16-byte Folded Spill\nmov d0, v0.d[1]\nfmov d8, d1\nbl fmod\nfmov d1, d8\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nbl fmod\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nldr x30, [sp, #40]                  // 8-byte Folded Reload\nldr d8, [sp, #32]                   // 8-byte Folded Reload\nmov v0.d[1], v1.d[0]\nadd sp, sp, #48\nret",
  "giasm": "sub sp, sp, #48\nstp d9, d8, [sp, #16]               // 16-byte Folded Spill\nstr x30, [sp, #32]                  // 8-byte Folded Spill\nmov d8, v0.d[1]\ndup v1.2d, v1.d[0]\nmov d9, v1.d[1]\nbl fmod\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov d1, d9\nfmov d0, d8\nbl fmod\nldr q1, [sp]                        // 16-byte Folded Reload\nldp d9, d8, [sp, #16]               // 16-byte Folded Reload\nldr x30, [sp, #32]                  // 8-byte Folded Reload\nmov v1.d[1], v0.d[0]\nmov v0.16b, v1.16b\nadd sp, sp, #48\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, double %bs) {\n  %i = insertelement <2 x double> poison, double %bs, i64 0\n  %b = shufflevector <2 x double> %i, <2 x double> poison, <2 x i32> zeroinitializer\n  %r = frem <2 x double> %a, %b\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <2 x double> poison, double %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <2 x double> %i, <2 x double> poison, <2 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <2 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "frem",
  "ty": "<2 x double>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 24,
  "lat": 4,
  "sizelat": 4,
  "size": 14,
  "gisize": 16,
  "extrasize": 0,
  "asm": "sub sp, sp, #48\nstr x30, [sp, #32]                  // 8-byte Folded Spill\nstr q0, [sp]                        // 16-byte Folded Spill\nmov d0, v0.d[1]\nfmov d1, #7.00000000\nbl fmod\nfmov d1, #7.00000000\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nbl fmod\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nldr x30, [sp, #32]                  // 8-byte Folded Reload\nmov v0.d[1], v1.d[0]\nadd sp, sp, #48\nret",
  "giasm": "sub sp, sp, #32\nstr d8, [sp, #16]                   // 8-byte Folded Spill\nstr x30, [sp, #24]                  // 8-byte Folded Spill\nfmov d1, #7.00000000\nmov d8, v0.d[1]\nbl fmod\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov d1, #7.00000000\nfmov d0, d8\nbl fmod\nldr q1, [sp]                        // 16-byte Folded Reload\nldr x30, [sp, #24]                  // 8-byte Folded Reload\nldr d8, [sp, #16]                   // 8-byte Folded Reload\nmov v1.d[1], v0.d[0]\nmov v0.16b, v1.16b\nadd sp, sp, #32\nret",
  "ll": "define <2 x double> @test(<2 x double> %a) {\n  %r = frem <2 x double> %a, splat (double 7.0)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <2 x double> %a, splat (double 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "frem",
  "ty": "<4 x double>",
  "variant": "binop",
  "codesize": 4,
  "thru": 48,
  "lat": 4,
  "sizelat": 4,
  "size": 25,
  "gisize": 34,
  "extrasize": 0,
  "asm": "sub sp, sp, #96\nstr x30, [sp, #80]                  // 8-byte Folded Spill\nstp q0, q2, [sp]                    // 32-byte Folded Spill\nmov d0, v0.d[1]\nstp q1, q3, [sp, #48]               // 32-byte Folded Spill\nmov d1, v2.d[1]\nbl fmod\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldp q0, q1, [sp]                    // 32-byte Folded Reload\nbl fmod\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v0.d[1], v1.d[0]\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldp q0, q1, [sp, #48]               // 32-byte Folded Reload\nmov d0, v0.d[1]\nmov d1, v1.d[1]\nbl fmod\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldp q0, q1, [sp, #48]               // 32-byte Folded Reload\nbl fmod\nfmov d1, d0\nldp q2, q0, [sp, #16]               // 32-byte Folded Reload\nldr x30, [sp, #80]                  // 8-byte Folded Reload\nmov v1.d[1], v2.d[0]\nadd sp, sp, #96\nret",
  "giasm": "sub sp, sp, #112\nstp d11, d10, [sp, #64]             // 16-byte Folded Spill\nstp d9, d8, [sp, #80]               // 16-byte Folded Spill\nstr x30, [sp, #96]                  // 8-byte Folded Spill\nmov v4.16b, v1.16b\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nmov v1.16b, v2.16b\nstr q3, [sp]                        // 16-byte Folded Spill\nmov d8, v0.d[1]\nmov d10, v2.d[1]\nmov d11, v3.d[1]\nmov d9, v4.d[1]\nbl fmod\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nfmov d1, d10\nfmov d0, d8\nbl fmod\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q1, [sp]                        // 16-byte Folded Reload\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nbl fmod\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov d1, d11\nfmov d0, d9\nbl fmod\nldp q3, q1, [sp, #16]               // 32-byte Folded Reload\nldr q2, [sp, #48]                   // 16-byte Folded Reload\nldp d9, d8, [sp, #80]               // 16-byte Folded Reload\nldr x30, [sp, #96]                  // 8-byte Folded Reload\nldp d11, d10, [sp, #64]             // 16-byte Folded Reload\nmov v2.d[1], v3.d[0]\nmov v1.d[1], v0.d[0]\nmov v0.16b, v2.16b\nadd sp, sp, #112\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, <4 x double> %b) {\n  %r = frem <4 x double> %a, %b\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <4 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "frem",
  "ty": "<4 x double>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 48,
  "lat": 4,
  "sizelat": 4,
  "size": 27,
  "gisize": 28,
  "extrasize": 0,
  "asm": "sub sp, sp, #64\nstr x30, [sp, #48]                  // 8-byte Folded Spill\nstr q0, [sp]                        // 16-byte Folded Spill\nmov d0, v0.d[1]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov d1, #6.00000000\nbl fmod\nfmov d1, #7.00000000\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nbl fmod\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v0.d[1], v1.d[0]\nfmov d1, #6.00000000\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nmov d0, v0.d[1]\nbl fmod\nfmov d1, #7.00000000\nstr q0, [sp]                        // 16-byte Folded Spill\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nbl fmod\nfmov d1, d0\nldp q2, q0, [sp]                    // 32-byte Folded Reload\nldr x30, [sp, #48]                  // 8-byte Folded Reload\nmov v1.d[1], v2.d[0]\nadd sp, sp, #64\nret",
  "giasm": "sub sp, sp, #80\nstp d9, d8, [sp, #48]               // 16-byte Folded Spill\nstr x30, [sp, #64]                  // 8-byte Folded Spill\nstr q1, [sp]                        // 16-byte Folded Spill\nmov d9, v1.d[1]\nfmov d1, #7.00000000\nmov d8, v0.d[1]\nbl fmod\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov d1, #6.00000000\nfmov d0, d8\nbl fmod\nfmov d1, #7.00000000\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nbl fmod\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov d1, #6.00000000\nfmov d0, d9\nbl fmod\nldp q2, q3, [sp, #16]               // 32-byte Folded Reload\nldr q1, [sp]                        // 16-byte Folded Reload\nldp d9, d8, [sp, #48]               // 16-byte Folded Reload\nldr x30, [sp, #64]                  // 8-byte Folded Reload\nmov v1.d[1], v0.d[0]\nmov v3.d[1], v2.d[0]\nmov v0.16b, v3.16b\nadd sp, sp, #80\nret",
  "ll": "define <4 x double> @test(<4 x double> %a) {\n  %r = frem <4 x double> %a, <double 7.0, double 6.0, double 7.0, double 6.0>\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <4 x double> %a, <double 7.000000e+00, double 6.000000e+00, double 7.000000e+00, double 6.000000e+00>\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "frem",
  "ty": "<4 x double>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 50,
  "lat": 6,
  "sizelat": 6,
  "size": 30,
  "gisize": 35,
  "extrasize": 0,
  "asm": "sub sp, sp, #64\nstr d8, [sp, #48]                   // 8-byte Folded Spill\nstr x30, [sp, #56]                  // 8-byte Folded Spill\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov d1, d2\nfmov d8, d2\nstr q0, [sp]                        // 16-byte Folded Spill\nmov d0, v0.d[1]\nbl fmod\nfmov d1, d8\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nbl fmod\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v0.d[1], v1.d[0]\nfmov d1, d8\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nmov d0, v0.d[1]\nbl fmod\nfmov d1, d8\nstr q0, [sp]                        // 16-byte Folded Spill\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nbl fmod\nfmov d1, d0\nldp q2, q0, [sp]                    // 32-byte Folded Reload\nldr x30, [sp, #56]                  // 8-byte Folded Reload\nldr d8, [sp, #48]                   // 8-byte Folded Reload\nmov v1.d[1], v2.d[0]\nadd sp, sp, #64\nret",
  "giasm": "sub sp, sp, #112\nstp d11, d10, [sp, #64]             // 16-byte Folded Spill\nstp d9, d8, [sp, #80]               // 16-byte Folded Spill\nstr x30, [sp, #96]                  // 8-byte Folded Spill\nmov v3.16b, v1.16b\nstr q1, [sp, #32]                   // 16-byte Folded Spill\ndup v1.2d, v2.d[0]\ndup v2.2d, v2.d[0]\nmov d8, v0.d[1]\nmov d9, v3.d[1]\nmov d10, v1.d[1]\nstr q2, [sp]                        // 16-byte Folded Spill\nmov d11, v2.d[1]\nbl fmod\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nfmov d1, d10\nfmov d0, d8\nbl fmod\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q1, [sp]                        // 16-byte Folded Reload\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nbl fmod\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov d1, d11\nfmov d0, d9\nbl fmod\nldp q3, q1, [sp, #16]               // 32-byte Folded Reload\nldr q2, [sp, #48]                   // 16-byte Folded Reload\nldp d9, d8, [sp, #80]               // 16-byte Folded Reload\nldr x30, [sp, #96]                  // 8-byte Folded Reload\nldp d11, d10, [sp, #64]             // 16-byte Folded Reload\nmov v2.d[1], v3.d[0]\nmov v1.d[1], v0.d[0]\nmov v0.16b, v2.16b\nadd sp, sp, #112\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, double %bs) {\n  %i = insertelement <4 x double> poison, double %bs, i64 0\n  %b = shufflevector <4 x double> %i, <4 x double> poison, <4 x i32> zeroinitializer\n  %r = frem <4 x double> %a, %b\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <4 x double> poison, double %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <4 x double> %i, <4 x double> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <4 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "frem",
  "ty": "<4 x double>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 48,
  "lat": 4,
  "sizelat": 4,
  "size": 27,
  "gisize": 28,
  "extrasize": 0,
  "asm": "sub sp, sp, #64\nstr x30, [sp, #48]                  // 8-byte Folded Spill\nstr q0, [sp]                        // 16-byte Folded Spill\nmov d0, v0.d[1]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov d1, #7.00000000\nbl fmod\nfmov d1, #7.00000000\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nbl fmod\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v0.d[1], v1.d[0]\nfmov d1, #7.00000000\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nmov d0, v0.d[1]\nbl fmod\nfmov d1, #7.00000000\nstr q0, [sp]                        // 16-byte Folded Spill\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nbl fmod\nfmov d1, d0\nldp q2, q0, [sp]                    // 32-byte Folded Reload\nldr x30, [sp, #48]                  // 8-byte Folded Reload\nmov v1.d[1], v2.d[0]\nadd sp, sp, #64\nret",
  "giasm": "sub sp, sp, #80\nstp d9, d8, [sp, #48]               // 16-byte Folded Spill\nstr x30, [sp, #64]                  // 8-byte Folded Spill\nstr q1, [sp]                        // 16-byte Folded Spill\nmov d9, v1.d[1]\nfmov d1, #7.00000000\nmov d8, v0.d[1]\nbl fmod\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov d1, #7.00000000\nfmov d0, d8\nbl fmod\nfmov d1, #7.00000000\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nbl fmod\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov d1, #7.00000000\nfmov d0, d9\nbl fmod\nldp q2, q3, [sp, #16]               // 32-byte Folded Reload\nldr q1, [sp]                        // 16-byte Folded Reload\nldp d9, d8, [sp, #48]               // 16-byte Folded Reload\nldr x30, [sp, #64]                  // 8-byte Folded Reload\nmov v1.d[1], v0.d[0]\nmov v3.d[1], v2.d[0]\nmov v0.16b, v3.16b\nadd sp, sp, #80\nret",
  "ll": "define <4 x double> @test(<4 x double> %a) {\n  %r = frem <4 x double> %a, splat (double 7.0)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <4 x double> %a, splat (double 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "frem",
  "ty": "<vscale x 4 x half>",
  "variant": "binop",
  "codesize": 4,
  "thru": 0,
  "lat": 4,
  "sizelat": 4,
  "size": -1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "LLVM ERROR: Invalid size request on a scalable vector.",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x half> (<vscale x 4 x half>, <vscale x 4 x half>) (in function: test)",
  "ll": "define <vscale x 4 x half> @test(<vscale x 4 x half> %a, <vscale x 4 x half> %b) {\n  %r = frem <vscale x 4 x half> %a, %b\n  ret <vscale x 4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <vscale x 4 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x half> %r"
 },
 {
  "instr": "frem",
  "ty": "<vscale x 4 x half>",
  "variant": "binopsplat",
  "codesize": 5,
  "thru": 1,
  "lat": 5,
  "sizelat": 5,
  "size": -1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "LLVM ERROR: Invalid size request on a scalable vector.",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x half> (<vscale x 4 x half>, half) (in function: test)",
  "ll": "define <vscale x 4 x half> @test(<vscale x 4 x half> %a, half %bs) {\n  %i = insertelement <vscale x 4 x half> poison, half %bs, i64 0\n  %b = shufflevector <vscale x 4 x half> %i, <vscale x 4 x half> poison, <vscale x 4 x i32> zeroinitializer\n  %r = frem <vscale x 4 x half> %a, %b\n  ret <vscale x 4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 4 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <vscale x 4 x half> %i, <vscale x 4 x half> poison, <vscale x 4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <vscale x 4 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x half> %r"
 },
 {
  "instr": "frem",
  "ty": "<vscale x 4 x half>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 0,
  "lat": 4,
  "sizelat": 4,
  "size": -1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "LLVM ERROR: Invalid size request on a scalable vector.",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x half> (<vscale x 4 x half>) (in function: test)",
  "ll": "define <vscale x 4 x half> @test(<vscale x 4 x half> %a) {\n  %r = frem <vscale x 4 x half> %a, splat (half 7.0)\n  ret <vscale x 4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <vscale x 4 x half> %a, splat (half 0xH4700)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x half> %r"
 },
 {
  "instr": "frem",
  "ty": "<vscale x 8 x half>",
  "variant": "binop",
  "codesize": 4,
  "thru": 0,
  "lat": 4,
  "sizelat": 4,
  "size": -1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "LLVM ERROR: Invalid size request on a scalable vector.",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x half> (<vscale x 8 x half>, <vscale x 8 x half>) (in function: test)",
  "ll": "define <vscale x 8 x half> @test(<vscale x 8 x half> %a, <vscale x 8 x half> %b) {\n  %r = frem <vscale x 8 x half> %a, %b\n  ret <vscale x 8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <vscale x 8 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x half> %r"
 },
 {
  "instr": "frem",
  "ty": "<vscale x 8 x half>",
  "variant": "binopsplat",
  "codesize": 5,
  "thru": 1,
  "lat": 5,
  "sizelat": 5,
  "size": -1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "LLVM ERROR: Invalid size request on a scalable vector.",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x half> (<vscale x 8 x half>, half) (in function: test)",
  "ll": "define <vscale x 8 x half> @test(<vscale x 8 x half> %a, half %bs) {\n  %i = insertelement <vscale x 8 x half> poison, half %bs, i64 0\n  %b = shufflevector <vscale x 8 x half> %i, <vscale x 8 x half> poison, <vscale x 8 x i32> zeroinitializer\n  %r = frem <vscale x 8 x half> %a, %b\n  ret <vscale x 8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 8 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <vscale x 8 x half> %i, <vscale x 8 x half> poison, <vscale x 8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <vscale x 8 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x half> %r"
 },
 {
  "instr": "frem",
  "ty": "<vscale x 8 x half>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 0,
  "lat": 4,
  "sizelat": 4,
  "size": -1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "LLVM ERROR: Invalid size request on a scalable vector.",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x half> (<vscale x 8 x half>) (in function: test)",
  "ll": "define <vscale x 8 x half> @test(<vscale x 8 x half> %a) {\n  %r = frem <vscale x 8 x half> %a, splat (half 7.0)\n  ret <vscale x 8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <vscale x 8 x half> %a, splat (half 0xH4700)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x half> %r"
 },
 {
  "instr": "frem",
  "ty": "<vscale x 16 x half>",
  "variant": "binop",
  "codesize": 4,
  "thru": 0,
  "lat": 4,
  "sizelat": 4,
  "size": -1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "LLVM ERROR: Invalid size request on a scalable vector.",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 16 x half> (<vscale x 16 x half>, <vscale x 16 x half>) (in function: test)",
  "ll": "define <vscale x 16 x half> @test(<vscale x 16 x half> %a, <vscale x 16 x half> %b) {\n  %r = frem <vscale x 16 x half> %a, %b\n  ret <vscale x 16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <vscale x 16 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 16 x half> %r"
 },
 {
  "instr": "frem",
  "ty": "<vscale x 16 x half>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 2,
  "lat": 6,
  "sizelat": 6,
  "size": -1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "LLVM ERROR: Invalid size request on a scalable vector.",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 16 x half> (<vscale x 16 x half>, half) (in function: test)",
  "ll": "define <vscale x 16 x half> @test(<vscale x 16 x half> %a, half %bs) {\n  %i = insertelement <vscale x 16 x half> poison, half %bs, i64 0\n  %b = shufflevector <vscale x 16 x half> %i, <vscale x 16 x half> poison, <vscale x 16 x i32> zeroinitializer\n  %r = frem <vscale x 16 x half> %a, %b\n  ret <vscale x 16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 16 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <vscale x 16 x half> %i, <vscale x 16 x half> poison, <vscale x 16 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <vscale x 16 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 16 x half> %r"
 },
 {
  "instr": "frem",
  "ty": "<vscale x 16 x half>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 0,
  "lat": 4,
  "sizelat": 4,
  "size": -1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "LLVM ERROR: Invalid size request on a scalable vector.",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 16 x half> (<vscale x 16 x half>) (in function: test)",
  "ll": "define <vscale x 16 x half> @test(<vscale x 16 x half> %a) {\n  %r = frem <vscale x 16 x half> %a, splat (half 7.0)\n  ret <vscale x 16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <vscale x 16 x half> %a, splat (half 0xH4700)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 16 x half> %r"
 },
 {
  "instr": "frem",
  "ty": "<vscale x 2 x float>",
  "variant": "binop",
  "codesize": 4,
  "thru": 0,
  "lat": 4,
  "sizelat": 4,
  "size": -1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "LLVM ERROR: Invalid size request on a scalable vector.",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x float> (<vscale x 2 x float>, <vscale x 2 x float>) (in function: test)",
  "ll": "define <vscale x 2 x float> @test(<vscale x 2 x float> %a, <vscale x 2 x float> %b) {\n  %r = frem <vscale x 2 x float> %a, %b\n  ret <vscale x 2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <vscale x 2 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x float> %r"
 },
 {
  "instr": "frem",
  "ty": "<vscale x 2 x float>",
  "variant": "binopsplat",
  "codesize": 5,
  "thru": 1,
  "lat": 5,
  "sizelat": 5,
  "size": -1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "LLVM ERROR: Invalid size request on a scalable vector.",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x float> (<vscale x 2 x float>, float) (in function: test)",
  "ll": "define <vscale x 2 x float> @test(<vscale x 2 x float> %a, float %bs) {\n  %i = insertelement <vscale x 2 x float> poison, float %bs, i64 0\n  %b = shufflevector <vscale x 2 x float> %i, <vscale x 2 x float> poison, <vscale x 2 x i32> zeroinitializer\n  %r = frem <vscale x 2 x float> %a, %b\n  ret <vscale x 2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 2 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <vscale x 2 x float> %i, <vscale x 2 x float> poison, <vscale x 2 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <vscale x 2 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x float> %r"
 },
 {
  "instr": "frem",
  "ty": "<vscale x 2 x float>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 0,
  "lat": 4,
  "sizelat": 4,
  "size": -1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "LLVM ERROR: Invalid size request on a scalable vector.",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x float> (<vscale x 2 x float>) (in function: test)",
  "ll": "define <vscale x 2 x float> @test(<vscale x 2 x float> %a) {\n  %r = frem <vscale x 2 x float> %a, splat (float 7.0)\n  ret <vscale x 2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <vscale x 2 x float> %a, splat (float 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x float> %r"
 },
 {
  "instr": "frem",
  "ty": "<vscale x 4 x float>",
  "variant": "binop",
  "codesize": 4,
  "thru": 0,
  "lat": 4,
  "sizelat": 4,
  "size": -1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "LLVM ERROR: Invalid size request on a scalable vector.",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x float> (<vscale x 4 x float>, <vscale x 4 x float>) (in function: test)",
  "ll": "define <vscale x 4 x float> @test(<vscale x 4 x float> %a, <vscale x 4 x float> %b) {\n  %r = frem <vscale x 4 x float> %a, %b\n  ret <vscale x 4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <vscale x 4 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x float> %r"
 },
 {
  "instr": "frem",
  "ty": "<vscale x 4 x float>",
  "variant": "binopsplat",
  "codesize": 5,
  "thru": 1,
  "lat": 5,
  "sizelat": 5,
  "size": -1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "LLVM ERROR: Invalid size request on a scalable vector.",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x float> (<vscale x 4 x float>, float) (in function: test)",
  "ll": "define <vscale x 4 x float> @test(<vscale x 4 x float> %a, float %bs) {\n  %i = insertelement <vscale x 4 x float> poison, float %bs, i64 0\n  %b = shufflevector <vscale x 4 x float> %i, <vscale x 4 x float> poison, <vscale x 4 x i32> zeroinitializer\n  %r = frem <vscale x 4 x float> %a, %b\n  ret <vscale x 4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 4 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <vscale x 4 x float> %i, <vscale x 4 x float> poison, <vscale x 4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <vscale x 4 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x float> %r"
 },
 {
  "instr": "frem",
  "ty": "<vscale x 4 x float>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 0,
  "lat": 4,
  "sizelat": 4,
  "size": -1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "LLVM ERROR: Invalid size request on a scalable vector.",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x float> (<vscale x 4 x float>) (in function: test)",
  "ll": "define <vscale x 4 x float> @test(<vscale x 4 x float> %a) {\n  %r = frem <vscale x 4 x float> %a, splat (float 7.0)\n  ret <vscale x 4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <vscale x 4 x float> %a, splat (float 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x float> %r"
 },
 {
  "instr": "frem",
  "ty": "<vscale x 8 x float>",
  "variant": "binop",
  "codesize": 4,
  "thru": 0,
  "lat": 4,
  "sizelat": 4,
  "size": -1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "LLVM ERROR: Invalid size request on a scalable vector.",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x float> (<vscale x 8 x float>, <vscale x 8 x float>) (in function: test)",
  "ll": "define <vscale x 8 x float> @test(<vscale x 8 x float> %a, <vscale x 8 x float> %b) {\n  %r = frem <vscale x 8 x float> %a, %b\n  ret <vscale x 8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <vscale x 8 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x float> %r"
 },
 {
  "instr": "frem",
  "ty": "<vscale x 8 x float>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 2,
  "lat": 6,
  "sizelat": 6,
  "size": -1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "LLVM ERROR: Invalid size request on a scalable vector.",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x float> (<vscale x 8 x float>, float) (in function: test)",
  "ll": "define <vscale x 8 x float> @test(<vscale x 8 x float> %a, float %bs) {\n  %i = insertelement <vscale x 8 x float> poison, float %bs, i64 0\n  %b = shufflevector <vscale x 8 x float> %i, <vscale x 8 x float> poison, <vscale x 8 x i32> zeroinitializer\n  %r = frem <vscale x 8 x float> %a, %b\n  ret <vscale x 8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 8 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <vscale x 8 x float> %i, <vscale x 8 x float> poison, <vscale x 8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <vscale x 8 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x float> %r"
 },
 {
  "instr": "frem",
  "ty": "<vscale x 8 x float>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 0,
  "lat": 4,
  "sizelat": 4,
  "size": -1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "LLVM ERROR: Invalid size request on a scalable vector.",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x float> (<vscale x 8 x float>) (in function: test)",
  "ll": "define <vscale x 8 x float> @test(<vscale x 8 x float> %a) {\n  %r = frem <vscale x 8 x float> %a, splat (float 7.0)\n  ret <vscale x 8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <vscale x 8 x float> %a, splat (float 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x float> %r"
 },
 {
  "instr": "frem",
  "ty": "<vscale x 2 x double>",
  "variant": "binop",
  "codesize": 4,
  "thru": 0,
  "lat": 4,
  "sizelat": 4,
  "size": -1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "LLVM ERROR: Invalid size request on a scalable vector.",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x double> (<vscale x 2 x double>, <vscale x 2 x double>) (in function: test)",
  "ll": "define <vscale x 2 x double> @test(<vscale x 2 x double> %a, <vscale x 2 x double> %b) {\n  %r = frem <vscale x 2 x double> %a, %b\n  ret <vscale x 2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <vscale x 2 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x double> %r"
 },
 {
  "instr": "frem",
  "ty": "<vscale x 2 x double>",
  "variant": "binopsplat",
  "codesize": 5,
  "thru": 1,
  "lat": 5,
  "sizelat": 5,
  "size": -1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "LLVM ERROR: Invalid size request on a scalable vector.",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x double> (<vscale x 2 x double>, double) (in function: test)",
  "ll": "define <vscale x 2 x double> @test(<vscale x 2 x double> %a, double %bs) {\n  %i = insertelement <vscale x 2 x double> poison, double %bs, i64 0\n  %b = shufflevector <vscale x 2 x double> %i, <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer\n  %r = frem <vscale x 2 x double> %a, %b\n  ret <vscale x 2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 2 x double> poison, double %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <vscale x 2 x double> %i, <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <vscale x 2 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x double> %r"
 },
 {
  "instr": "frem",
  "ty": "<vscale x 2 x double>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 0,
  "lat": 4,
  "sizelat": 4,
  "size": -1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "LLVM ERROR: Invalid size request on a scalable vector.",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x double> (<vscale x 2 x double>) (in function: test)",
  "ll": "define <vscale x 2 x double> @test(<vscale x 2 x double> %a) {\n  %r = frem <vscale x 2 x double> %a, splat (double 7.0)\n  ret <vscale x 2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <vscale x 2 x double> %a, splat (double 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x double> %r"
 },
 {
  "instr": "frem",
  "ty": "<vscale x 4 x double>",
  "variant": "binop",
  "codesize": 4,
  "thru": 0,
  "lat": 4,
  "sizelat": 4,
  "size": -1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "LLVM ERROR: Invalid size request on a scalable vector.",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x double> (<vscale x 4 x double>, <vscale x 4 x double>) (in function: test)",
  "ll": "define <vscale x 4 x double> @test(<vscale x 4 x double> %a, <vscale x 4 x double> %b) {\n  %r = frem <vscale x 4 x double> %a, %b\n  ret <vscale x 4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <vscale x 4 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x double> %r"
 },
 {
  "instr": "frem",
  "ty": "<vscale x 4 x double>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 2,
  "lat": 6,
  "sizelat": 6,
  "size": -1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "LLVM ERROR: Invalid size request on a scalable vector.",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x double> (<vscale x 4 x double>, double) (in function: test)",
  "ll": "define <vscale x 4 x double> @test(<vscale x 4 x double> %a, double %bs) {\n  %i = insertelement <vscale x 4 x double> poison, double %bs, i64 0\n  %b = shufflevector <vscale x 4 x double> %i, <vscale x 4 x double> poison, <vscale x 4 x i32> zeroinitializer\n  %r = frem <vscale x 4 x double> %a, %b\n  ret <vscale x 4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 4 x double> poison, double %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <vscale x 4 x double> %i, <vscale x 4 x double> poison, <vscale x 4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <vscale x 4 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x double> %r"
 },
 {
  "instr": "frem",
  "ty": "<vscale x 4 x double>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 0,
  "lat": 4,
  "sizelat": 4,
  "size": -1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "LLVM ERROR: Invalid size request on a scalable vector.",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x double> (<vscale x 4 x double>) (in function: test)",
  "ll": "define <vscale x 4 x double> @test(<vscale x 4 x double> %a) {\n  %r = frem <vscale x 4 x double> %a, splat (double 7.0)\n  ret <vscale x 4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <vscale x 4 x double> %a, splat (double 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x double> %r"
 },
 {
  "instr": "minnum",
  "ty": "half",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fminnm h0, h0, h1\nret",
  "giasm": "fminnm h0, h0, h1\nret",
  "ll": "define half @test(half %a, half %b) {\n  %r = call half @llvm.minnum(half %a, half %b)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call half @llvm.minnum.f16(half %a, half %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "minnum",
  "ty": "half",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov h1, #7.00000000\nfminnm h0, h0, h1\nret",
  "giasm": "fmov h1, #7.00000000\nfminnm h0, h0, h1\nret",
  "ll": "define half @test(half %a) {\n  %r = call half @llvm.minnum(half %a, half 7.0)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call half @llvm.minnum.f16(half %a, half 0xH4700)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "minnum",
  "ty": "float",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fminnm s0, s0, s1\nret",
  "giasm": "fminnm s0, s0, s1\nret",
  "ll": "define float @test(float %a, float %b) {\n  %r = call float @llvm.minnum(float %a, float %b)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call float @llvm.minnum.f32(float %a, float %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "minnum",
  "ty": "float",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov s1, #7.00000000\nfminnm s0, s0, s1\nret",
  "giasm": "fmov s1, #7.00000000\nfminnm s0, s0, s1\nret",
  "ll": "define float @test(float %a) {\n  %r = call float @llvm.minnum(float %a, float 7.0)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call float @llvm.minnum.f32(float %a, float 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "minnum",
  "ty": "double",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fminnm d0, d0, d1\nret",
  "giasm": "fminnm d0, d0, d1\nret",
  "ll": "define double @test(double %a, double %b) {\n  %r = call double @llvm.minnum(double %a, double %b)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call double @llvm.minnum.f64(double %a, double %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "minnum",
  "ty": "double",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov d1, #7.00000000\nfminnm d0, d0, d1\nret",
  "giasm": "fmov d1, #7.00000000\nfminnm d0, d0, d1\nret",
  "ll": "define double @test(double %a) {\n  %r = call double @llvm.minnum(double %a, double 7.0)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call double @llvm.minnum.f64(double %a, double 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "minnum",
  "ty": "<4 x half>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fminnm v0.4h, v0.4h, v1.4h\nret",
  "giasm": "fminnm v0.4h, v0.4h, v1.4h\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, <4 x half> %b) {\n  %r = call <4 x half> @llvm.minnum(<4 x half> %a, <4 x half> %b)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x half> @llvm.minnum.v4f16(<4 x half> %a, <4 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "minnum",
  "ty": "<4 x half>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr d1, [x8, :lo12:.LCPI0_0]\nfminnm v0.4h, v0.4h, v1.4h\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr d1, [x8, :lo12:.LCPI0_0]\nfminnm v0.4h, v0.4h, v1.4h\nret",
  "ll": "define <4 x half> @test(<4 x half> %a) {\n  %r = call <4 x half> @llvm.minnum(<4 x half> %a, <4 x half> <half 7.0, half 6.0, half 7.0, half 6.0>)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x half> @llvm.minnum.v4f16(<4 x half> %a, <4 x half> <half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "minnum",
  "ty": "<4 x half>",
  "variant": "binopsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "dup v1.4h, v1.h[0]\nfminnm v0.4h, v0.4h, v1.4h\nret",
  "giasm": "dup v1.4h, v1.h[0]\nfminnm v0.4h, v0.4h, v1.4h\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, half %bs) {\n  %i = insertelement <4 x half> poison, half %bs, i64 0\n  %b = shufflevector <4 x half> %i, <4 x half> poison, <4 x i32> zeroinitializer\n  %r = call <4 x half> @llvm.minnum(<4 x half> %a, <4 x half> %b)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <4 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <4 x half> %i, <4 x half> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x half> @llvm.minnum.v4f16(<4 x half> %a, <4 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "minnum",
  "ty": "<4 x half>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "movi v1.4h, #71, lsl #8\nfminnm v0.4h, v0.4h, v1.4h\nret",
  "giasm": "movi v1.4h, #71, lsl #8\nfminnm v0.4h, v0.4h, v1.4h\nret",
  "ll": "define <4 x half> @test(<4 x half> %a) {\n  %r = call <4 x half> @llvm.minnum(<4 x half> %a, <4 x half> splat (half 7.0))\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x half> @llvm.minnum.v4f16(<4 x half> %a, <4 x half> splat (half 0xH4700))\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "minnum",
  "ty": "<8 x half>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fminnm v0.8h, v0.8h, v1.8h\nret",
  "giasm": "fminnm v0.8h, v0.8h, v1.8h\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, <8 x half> %b) {\n  %r = call <8 x half> @llvm.minnum(<8 x half> %a, <8 x half> %b)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <8 x half> @llvm.minnum.v8f16(<8 x half> %a, <8 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "minnum",
  "ty": "<8 x half>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfminnm v0.8h, v0.8h, v1.8h\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfminnm v0.8h, v0.8h, v1.8h\nret",
  "ll": "define <8 x half> @test(<8 x half> %a) {\n  %r = call <8 x half> @llvm.minnum(<8 x half> %a, <8 x half> <half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0>)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <8 x half> @llvm.minnum.v8f16(<8 x half> %a, <8 x half> <half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "minnum",
  "ty": "<8 x half>",
  "variant": "binopsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "dup v1.8h, v1.h[0]\nfminnm v0.8h, v0.8h, v1.8h\nret",
  "giasm": "dup v1.8h, v1.h[0]\nfminnm v0.8h, v0.8h, v1.8h\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, half %bs) {\n  %i = insertelement <8 x half> poison, half %bs, i64 0\n  %b = shufflevector <8 x half> %i, <8 x half> poison, <8 x i32> zeroinitializer\n  %r = call <8 x half> @llvm.minnum(<8 x half> %a, <8 x half> %b)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <8 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <8 x half> %i, <8 x half> poison, <8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <8 x half> @llvm.minnum.v8f16(<8 x half> %a, <8 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "minnum",
  "ty": "<8 x half>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "movi v1.8h, #71, lsl #8\nfminnm v0.8h, v0.8h, v1.8h\nret",
  "giasm": "movi v1.8h, #71, lsl #8\nfminnm v0.8h, v0.8h, v1.8h\nret",
  "ll": "define <8 x half> @test(<8 x half> %a) {\n  %r = call <8 x half> @llvm.minnum(<8 x half> %a, <8 x half> splat (half 7.0))\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <8 x half> @llvm.minnum.v8f16(<8 x half> %a, <8 x half> splat (half 0xH4700))\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "minnum",
  "ty": "<16 x half>",
  "variant": "binop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fminnm v1.8h, v1.8h, v3.8h\nfminnm v0.8h, v0.8h, v2.8h\nret",
  "giasm": "fminnm v0.8h, v0.8h, v2.8h\nfminnm v1.8h, v1.8h, v3.8h\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, <16 x half> %b) {\n  %r = call <16 x half> @llvm.minnum(<16 x half> %a, <16 x half> %b)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <16 x half> @llvm.minnum.v16f16(<16 x half> %a, <16 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "minnum",
  "ty": "<16 x half>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfminnm v0.8h, v0.8h, v2.8h\nfminnm v1.8h, v1.8h, v2.8h\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfminnm v0.8h, v0.8h, v2.8h\nfminnm v1.8h, v1.8h, v2.8h\nret",
  "ll": "define <16 x half> @test(<16 x half> %a) {\n  %r = call <16 x half> @llvm.minnum(<16 x half> %a, <16 x half> <half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0>)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <16 x half> @llvm.minnum.v16f16(<16 x half> %a, <16 x half> <half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "minnum",
  "ty": "<16 x half>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 6,
  "lat": 6,
  "sizelat": 6,
  "size": 3,
  "gisize": 4,
  "extrasize": 0,
  "asm": "dup v2.8h, v2.h[0]\nfminnm v0.8h, v0.8h, v2.8h\nfminnm v1.8h, v1.8h, v2.8h\nret",
  "giasm": "dup v3.8h, v2.h[0]\ndup v2.8h, v2.h[0]\nfminnm v0.8h, v0.8h, v3.8h\nfminnm v1.8h, v1.8h, v2.8h\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, half %bs) {\n  %i = insertelement <16 x half> poison, half %bs, i64 0\n  %b = shufflevector <16 x half> %i, <16 x half> poison, <16 x i32> zeroinitializer\n  %r = call <16 x half> @llvm.minnum(<16 x half> %a, <16 x half> %b)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <16 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <16 x half> %i, <16 x half> poison, <16 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <16 x half> @llvm.minnum.v16f16(<16 x half> %a, <16 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "minnum",
  "ty": "<16 x half>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "movi v2.8h, #71, lsl #8\nfminnm v0.8h, v0.8h, v2.8h\nfminnm v1.8h, v1.8h, v2.8h\nret",
  "giasm": "movi v2.8h, #71, lsl #8\nfminnm v0.8h, v0.8h, v2.8h\nfminnm v1.8h, v1.8h, v2.8h\nret",
  "ll": "define <16 x half> @test(<16 x half> %a) {\n  %r = call <16 x half> @llvm.minnum(<16 x half> %a, <16 x half> splat (half 7.0))\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <16 x half> @llvm.minnum.v16f16(<16 x half> %a, <16 x half> splat (half 0xH4700))\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "minnum",
  "ty": "<2 x float>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fminnm v0.2s, v0.2s, v1.2s\nret",
  "giasm": "fminnm v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, <2 x float> %b) {\n  %r = call <2 x float> @llvm.minnum(<2 x float> %a, <2 x float> %b)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x float> @llvm.minnum.v2f32(<2 x float> %a, <2 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "minnum",
  "ty": "<2 x float>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr d1, [x8, :lo12:.LCPI0_0]\nfminnm v0.2s, v0.2s, v1.2s\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr d1, [x8, :lo12:.LCPI0_0]\nfminnm v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a) {\n  %r = call <2 x float> @llvm.minnum(<2 x float> %a, <2 x float> <float 7.0, float 6.0>)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x float> @llvm.minnum.v2f32(<2 x float> %a, <2 x float> <float 7.000000e+00, float 6.000000e+00>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "minnum",
  "ty": "<2 x float>",
  "variant": "binopsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "dup v1.2s, v1.s[0]\nfminnm v0.2s, v0.2s, v1.2s\nret",
  "giasm": "dup v1.2s, v1.s[0]\nfminnm v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, float %bs) {\n  %i = insertelement <2 x float> poison, float %bs, i64 0\n  %b = shufflevector <2 x float> %i, <2 x float> poison, <2 x i32> zeroinitializer\n  %r = call <2 x float> @llvm.minnum(<2 x float> %a, <2 x float> %b)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <2 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <2 x float> %i, <2 x float> poison, <2 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x float> @llvm.minnum.v2f32(<2 x float> %a, <2 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "minnum",
  "ty": "<2 x float>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov v1.2s, #7.00000000\nfminnm v0.2s, v0.2s, v1.2s\nret",
  "giasm": "fmov v1.2s, #7.00000000\nfminnm v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a) {\n  %r = call <2 x float> @llvm.minnum(<2 x float> %a, <2 x float> splat (float 7.0))\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x float> @llvm.minnum.v2f32(<2 x float> %a, <2 x float> splat (float 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "minnum",
  "ty": "<4 x float>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fminnm v0.4s, v0.4s, v1.4s\nret",
  "giasm": "fminnm v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, <4 x float> %b) {\n  %r = call <4 x float> @llvm.minnum(<4 x float> %a, <4 x float> %b)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x float> @llvm.minnum.v4f32(<4 x float> %a, <4 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "minnum",
  "ty": "<4 x float>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfminnm v0.4s, v0.4s, v1.4s\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfminnm v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a) {\n  %r = call <4 x float> @llvm.minnum(<4 x float> %a, <4 x float> <float 7.0, float 6.0, float 7.0, float 6.0>)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x float> @llvm.minnum.v4f32(<4 x float> %a, <4 x float> <float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "minnum",
  "ty": "<4 x float>",
  "variant": "binopsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "dup v1.4s, v1.s[0]\nfminnm v0.4s, v0.4s, v1.4s\nret",
  "giasm": "dup v1.4s, v1.s[0]\nfminnm v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, float %bs) {\n  %i = insertelement <4 x float> poison, float %bs, i64 0\n  %b = shufflevector <4 x float> %i, <4 x float> poison, <4 x i32> zeroinitializer\n  %r = call <4 x float> @llvm.minnum(<4 x float> %a, <4 x float> %b)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <4 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <4 x float> %i, <4 x float> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x float> @llvm.minnum.v4f32(<4 x float> %a, <4 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "minnum",
  "ty": "<4 x float>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov v1.4s, #7.00000000\nfminnm v0.4s, v0.4s, v1.4s\nret",
  "giasm": "fmov v1.4s, #7.00000000\nfminnm v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a) {\n  %r = call <4 x float> @llvm.minnum(<4 x float> %a, <4 x float> splat (float 7.0))\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x float> @llvm.minnum.v4f32(<4 x float> %a, <4 x float> splat (float 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "minnum",
  "ty": "<8 x float>",
  "variant": "binop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fminnm v1.4s, v1.4s, v3.4s\nfminnm v0.4s, v0.4s, v2.4s\nret",
  "giasm": "fminnm v0.4s, v0.4s, v2.4s\nfminnm v1.4s, v1.4s, v3.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, <8 x float> %b) {\n  %r = call <8 x float> @llvm.minnum(<8 x float> %a, <8 x float> %b)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x float> @llvm.minnum.v8f32(<8 x float> %a, <8 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "minnum",
  "ty": "<8 x float>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfminnm v0.4s, v0.4s, v2.4s\nfminnm v1.4s, v1.4s, v2.4s\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfminnm v0.4s, v0.4s, v2.4s\nfminnm v1.4s, v1.4s, v2.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a) {\n  %r = call <8 x float> @llvm.minnum(<8 x float> %a, <8 x float> <float 7.0, float 6.0, float 7.0, float 6.0, float 7.0, float 6.0, float 7.0, float 6.0>)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x float> @llvm.minnum.v8f32(<8 x float> %a, <8 x float> <float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "minnum",
  "ty": "<8 x float>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 6,
  "lat": 6,
  "sizelat": 6,
  "size": 3,
  "gisize": 4,
  "extrasize": 0,
  "asm": "dup v2.4s, v2.s[0]\nfminnm v0.4s, v0.4s, v2.4s\nfminnm v1.4s, v1.4s, v2.4s\nret",
  "giasm": "dup v3.4s, v2.s[0]\ndup v2.4s, v2.s[0]\nfminnm v0.4s, v0.4s, v3.4s\nfminnm v1.4s, v1.4s, v2.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, float %bs) {\n  %i = insertelement <8 x float> poison, float %bs, i64 0\n  %b = shufflevector <8 x float> %i, <8 x float> poison, <8 x i32> zeroinitializer\n  %r = call <8 x float> @llvm.minnum(<8 x float> %a, <8 x float> %b)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <8 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <8 x float> %i, <8 x float> poison, <8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x float> @llvm.minnum.v8f32(<8 x float> %a, <8 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "minnum",
  "ty": "<8 x float>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fmov v2.4s, #7.00000000\nfminnm v0.4s, v0.4s, v2.4s\nfminnm v1.4s, v1.4s, v2.4s\nret",
  "giasm": "fmov v2.4s, #7.00000000\nfminnm v0.4s, v0.4s, v2.4s\nfminnm v1.4s, v1.4s, v2.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a) {\n  %r = call <8 x float> @llvm.minnum(<8 x float> %a, <8 x float> splat (float 7.0))\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x float> @llvm.minnum.v8f32(<8 x float> %a, <8 x float> splat (float 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "minnum",
  "ty": "<2 x double>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fminnm v0.2d, v0.2d, v1.2d\nret",
  "giasm": "fminnm v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, <2 x double> %b) {\n  %r = call <2 x double> @llvm.minnum(<2 x double> %a, <2 x double> %b)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x double> @llvm.minnum.v2f64(<2 x double> %a, <2 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "minnum",
  "ty": "<2 x double>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfminnm v0.2d, v0.2d, v1.2d\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfminnm v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a) {\n  %r = call <2 x double> @llvm.minnum(<2 x double> %a, <2 x double> <double 7.0, double 6.0>)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x double> @llvm.minnum.v2f64(<2 x double> %a, <2 x double> <double 7.000000e+00, double 6.000000e+00>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "minnum",
  "ty": "<2 x double>",
  "variant": "binopsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "dup v1.2d, v1.d[0]\nfminnm v0.2d, v0.2d, v1.2d\nret",
  "giasm": "dup v1.2d, v1.d[0]\nfminnm v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, double %bs) {\n  %i = insertelement <2 x double> poison, double %bs, i64 0\n  %b = shufflevector <2 x double> %i, <2 x double> poison, <2 x i32> zeroinitializer\n  %r = call <2 x double> @llvm.minnum(<2 x double> %a, <2 x double> %b)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <2 x double> poison, double %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <2 x double> %i, <2 x double> poison, <2 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x double> @llvm.minnum.v2f64(<2 x double> %a, <2 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "minnum",
  "ty": "<2 x double>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov v1.2d, #7.00000000\nfminnm v0.2d, v0.2d, v1.2d\nret",
  "giasm": "fmov v1.2d, #7.00000000\nfminnm v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a) {\n  %r = call <2 x double> @llvm.minnum(<2 x double> %a, <2 x double> splat (double 7.0))\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x double> @llvm.minnum.v2f64(<2 x double> %a, <2 x double> splat (double 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "minnum",
  "ty": "<4 x double>",
  "variant": "binop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fminnm v1.2d, v1.2d, v3.2d\nfminnm v0.2d, v0.2d, v2.2d\nret",
  "giasm": "fminnm v0.2d, v0.2d, v2.2d\nfminnm v1.2d, v1.2d, v3.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, <4 x double> %b) {\n  %r = call <4 x double> @llvm.minnum(<4 x double> %a, <4 x double> %b)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x double> @llvm.minnum.v4f64(<4 x double> %a, <4 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "minnum",
  "ty": "<4 x double>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfminnm v0.2d, v0.2d, v2.2d\nfminnm v1.2d, v1.2d, v2.2d\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfminnm v0.2d, v0.2d, v2.2d\nfminnm v1.2d, v1.2d, v2.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a) {\n  %r = call <4 x double> @llvm.minnum(<4 x double> %a, <4 x double> <double 7.0, double 6.0, double 7.0, double 6.0>)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x double> @llvm.minnum.v4f64(<4 x double> %a, <4 x double> <double 7.000000e+00, double 6.000000e+00, double 7.000000e+00, double 6.000000e+00>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "minnum",
  "ty": "<4 x double>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 6,
  "lat": 6,
  "sizelat": 6,
  "size": 3,
  "gisize": 4,
  "extrasize": 0,
  "asm": "dup v2.2d, v2.d[0]\nfminnm v0.2d, v0.2d, v2.2d\nfminnm v1.2d, v1.2d, v2.2d\nret",
  "giasm": "dup v3.2d, v2.d[0]\ndup v2.2d, v2.d[0]\nfminnm v0.2d, v0.2d, v3.2d\nfminnm v1.2d, v1.2d, v2.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, double %bs) {\n  %i = insertelement <4 x double> poison, double %bs, i64 0\n  %b = shufflevector <4 x double> %i, <4 x double> poison, <4 x i32> zeroinitializer\n  %r = call <4 x double> @llvm.minnum(<4 x double> %a, <4 x double> %b)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <4 x double> poison, double %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <4 x double> %i, <4 x double> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x double> @llvm.minnum.v4f64(<4 x double> %a, <4 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "minnum",
  "ty": "<4 x double>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fmov v2.2d, #7.00000000\nfminnm v0.2d, v0.2d, v2.2d\nfminnm v1.2d, v1.2d, v2.2d\nret",
  "giasm": "fmov v2.2d, #7.00000000\nfminnm v0.2d, v0.2d, v2.2d\nfminnm v1.2d, v1.2d, v2.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a) {\n  %r = call <4 x double> @llvm.minnum(<4 x double> %a, <4 x double> splat (double 7.0))\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x double> @llvm.minnum.v4f64(<4 x double> %a, <4 x double> splat (double 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "minnum",
  "ty": "<vscale x 4 x half>",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.s\nfminnm z0.h, p0/m, z0.h, z1.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x half> (<vscale x 4 x half>, <vscale x 4 x half>) (in function: test)",
  "ll": "define <vscale x 4 x half> @test(<vscale x 4 x half> %a, <vscale x 4 x half> %b) {\n  %r = call <vscale x 4 x half> @llvm.minnum(<vscale x 4 x half> %a, <vscale x 4 x half> %b)\n  ret <vscale x 4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 4 x half> @llvm.minnum.nxv4f16(<vscale x 4 x half> %a, <vscale x 4 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x half> %r"
 },
 {
  "instr": "minnum",
  "ty": "<vscale x 4 x half>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.s\nmov z1.h, h1\nfminnm z0.h, p0/m, z0.h, z1.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x half> (<vscale x 4 x half>, half) (in function: test)",
  "ll": "define <vscale x 4 x half> @test(<vscale x 4 x half> %a, half %bs) {\n  %i = insertelement <vscale x 4 x half> poison, half %bs, i64 0\n  %b = shufflevector <vscale x 4 x half> %i, <vscale x 4 x half> poison, <vscale x 4 x i32> zeroinitializer\n  %r = call <vscale x 4 x half> @llvm.minnum(<vscale x 4 x half> %a, <vscale x 4 x half> %b)\n  ret <vscale x 4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 4 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <vscale x 4 x half> %i, <vscale x 4 x half> poison, <vscale x 4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 4 x half> @llvm.minnum.nxv4f16(<vscale x 4 x half> %a, <vscale x 4 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x half> %r"
 },
 {
  "instr": "minnum",
  "ty": "<vscale x 4 x half>",
  "variant": "binopconstsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "fmov z1.h, #7.00000000\nptrue p0.s\nfminnm z0.h, p0/m, z0.h, z1.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x half> (<vscale x 4 x half>) (in function: test)",
  "ll": "define <vscale x 4 x half> @test(<vscale x 4 x half> %a) {\n  %r = call <vscale x 4 x half> @llvm.minnum(<vscale x 4 x half> %a, <vscale x 4 x half> splat (half 7.0))\n  ret <vscale x 4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 4 x half> @llvm.minnum.nxv4f16(<vscale x 4 x half> %a, <vscale x 4 x half> splat (half 0xH4700))\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x half> %r"
 },
 {
  "instr": "minnum",
  "ty": "<vscale x 8 x half>",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.h\nfminnm z0.h, p0/m, z0.h, z1.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x half> (<vscale x 8 x half>, <vscale x 8 x half>) (in function: test)",
  "ll": "define <vscale x 8 x half> @test(<vscale x 8 x half> %a, <vscale x 8 x half> %b) {\n  %r = call <vscale x 8 x half> @llvm.minnum(<vscale x 8 x half> %a, <vscale x 8 x half> %b)\n  ret <vscale x 8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 8 x half> @llvm.minnum.nxv8f16(<vscale x 8 x half> %a, <vscale x 8 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x half> %r"
 },
 {
  "instr": "minnum",
  "ty": "<vscale x 8 x half>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.h\nmov z1.h, h1\nfminnm z0.h, p0/m, z0.h, z1.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x half> (<vscale x 8 x half>, half) (in function: test)",
  "ll": "define <vscale x 8 x half> @test(<vscale x 8 x half> %a, half %bs) {\n  %i = insertelement <vscale x 8 x half> poison, half %bs, i64 0\n  %b = shufflevector <vscale x 8 x half> %i, <vscale x 8 x half> poison, <vscale x 8 x i32> zeroinitializer\n  %r = call <vscale x 8 x half> @llvm.minnum(<vscale x 8 x half> %a, <vscale x 8 x half> %b)\n  ret <vscale x 8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 8 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <vscale x 8 x half> %i, <vscale x 8 x half> poison, <vscale x 8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 8 x half> @llvm.minnum.nxv8f16(<vscale x 8 x half> %a, <vscale x 8 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x half> %r"
 },
 {
  "instr": "minnum",
  "ty": "<vscale x 8 x half>",
  "variant": "binopconstsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "fmov z1.h, #7.00000000\nptrue p0.h\nfminnm z0.h, p0/m, z0.h, z1.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x half> (<vscale x 8 x half>) (in function: test)",
  "ll": "define <vscale x 8 x half> @test(<vscale x 8 x half> %a) {\n  %r = call <vscale x 8 x half> @llvm.minnum(<vscale x 8 x half> %a, <vscale x 8 x half> splat (half 7.0))\n  ret <vscale x 8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 8 x half> @llvm.minnum.nxv8f16(<vscale x 8 x half> %a, <vscale x 8 x half> splat (half 0xH4700))\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x half> %r"
 },
 {
  "instr": "minnum",
  "ty": "<vscale x 16 x half>",
  "variant": "binop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.h\nfminnm z0.h, p0/m, z0.h, z2.h\nfminnm z1.h, p0/m, z1.h, z3.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 16 x half> (<vscale x 16 x half>, <vscale x 16 x half>) (in function: test)",
  "ll": "define <vscale x 16 x half> @test(<vscale x 16 x half> %a, <vscale x 16 x half> %b) {\n  %r = call <vscale x 16 x half> @llvm.minnum(<vscale x 16 x half> %a, <vscale x 16 x half> %b)\n  ret <vscale x 16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <vscale x 16 x half> @llvm.minnum.nxv16f16(<vscale x 16 x half> %a, <vscale x 16 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 16 x half> %r"
 },
 {
  "instr": "minnum",
  "ty": "<vscale x 16 x half>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 6,
  "lat": 6,
  "sizelat": 6,
  "size": 3,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.h\nmov z2.h, h2\nfminnm z0.h, p0/m, z0.h, z2.h\nfminnm z1.h, p0/m, z1.h, z2.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 16 x half> (<vscale x 16 x half>, half) (in function: test)",
  "ll": "define <vscale x 16 x half> @test(<vscale x 16 x half> %a, half %bs) {\n  %i = insertelement <vscale x 16 x half> poison, half %bs, i64 0\n  %b = shufflevector <vscale x 16 x half> %i, <vscale x 16 x half> poison, <vscale x 16 x i32> zeroinitializer\n  %r = call <vscale x 16 x half> @llvm.minnum(<vscale x 16 x half> %a, <vscale x 16 x half> %b)\n  ret <vscale x 16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 16 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <vscale x 16 x half> %i, <vscale x 16 x half> poison, <vscale x 16 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <vscale x 16 x half> @llvm.minnum.nxv16f16(<vscale x 16 x half> %a, <vscale x 16 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 16 x half> %r"
 },
 {
  "instr": "minnum",
  "ty": "<vscale x 16 x half>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 3,
  "gisize": -1,
  "extrasize": 0,
  "asm": "fmov z2.h, #7.00000000\nptrue p0.h\nfminnm z0.h, p0/m, z0.h, z2.h\nfminnm z1.h, p0/m, z1.h, z2.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 16 x half> (<vscale x 16 x half>) (in function: test)",
  "ll": "define <vscale x 16 x half> @test(<vscale x 16 x half> %a) {\n  %r = call <vscale x 16 x half> @llvm.minnum(<vscale x 16 x half> %a, <vscale x 16 x half> splat (half 7.0))\n  ret <vscale x 16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <vscale x 16 x half> @llvm.minnum.nxv16f16(<vscale x 16 x half> %a, <vscale x 16 x half> splat (half 0xH4700))\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 16 x half> %r"
 },
 {
  "instr": "minnum",
  "ty": "<vscale x 2 x float>",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.d\nfminnm z0.s, p0/m, z0.s, z1.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x float> (<vscale x 2 x float>, <vscale x 2 x float>) (in function: test)",
  "ll": "define <vscale x 2 x float> @test(<vscale x 2 x float> %a, <vscale x 2 x float> %b) {\n  %r = call <vscale x 2 x float> @llvm.minnum(<vscale x 2 x float> %a, <vscale x 2 x float> %b)\n  ret <vscale x 2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 2 x float> @llvm.minnum.nxv2f32(<vscale x 2 x float> %a, <vscale x 2 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x float> %r"
 },
 {
  "instr": "minnum",
  "ty": "<vscale x 2 x float>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.d\nmov z1.s, s1\nfminnm z0.s, p0/m, z0.s, z1.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x float> (<vscale x 2 x float>, float) (in function: test)",
  "ll": "define <vscale x 2 x float> @test(<vscale x 2 x float> %a, float %bs) {\n  %i = insertelement <vscale x 2 x float> poison, float %bs, i64 0\n  %b = shufflevector <vscale x 2 x float> %i, <vscale x 2 x float> poison, <vscale x 2 x i32> zeroinitializer\n  %r = call <vscale x 2 x float> @llvm.minnum(<vscale x 2 x float> %a, <vscale x 2 x float> %b)\n  ret <vscale x 2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 2 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <vscale x 2 x float> %i, <vscale x 2 x float> poison, <vscale x 2 x i32> zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 2 x float> @llvm.minnum.nxv2f32(<vscale x 2 x float> %a, <vscale x 2 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x float> %r"
 },
 {
  "instr": "minnum",
  "ty": "<vscale x 2 x float>",
  "variant": "binopconstsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "fmov z1.s, #7.00000000\nptrue p0.d\nfminnm z0.s, p0/m, z0.s, z1.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x float> (<vscale x 2 x float>) (in function: test)",
  "ll": "define <vscale x 2 x float> @test(<vscale x 2 x float> %a) {\n  %r = call <vscale x 2 x float> @llvm.minnum(<vscale x 2 x float> %a, <vscale x 2 x float> splat (float 7.0))\n  ret <vscale x 2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 2 x float> @llvm.minnum.nxv2f32(<vscale x 2 x float> %a, <vscale x 2 x float> splat (float 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x float> %r"
 },
 {
  "instr": "minnum",
  "ty": "<vscale x 4 x float>",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.s\nfminnm z0.s, p0/m, z0.s, z1.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x float> (<vscale x 4 x float>, <vscale x 4 x float>) (in function: test)",
  "ll": "define <vscale x 4 x float> @test(<vscale x 4 x float> %a, <vscale x 4 x float> %b) {\n  %r = call <vscale x 4 x float> @llvm.minnum(<vscale x 4 x float> %a, <vscale x 4 x float> %b)\n  ret <vscale x 4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 4 x float> @llvm.minnum.nxv4f32(<vscale x 4 x float> %a, <vscale x 4 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x float> %r"
 },
 {
  "instr": "minnum",
  "ty": "<vscale x 4 x float>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.s\nmov z1.s, s1\nfminnm z0.s, p0/m, z0.s, z1.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x float> (<vscale x 4 x float>, float) (in function: test)",
  "ll": "define <vscale x 4 x float> @test(<vscale x 4 x float> %a, float %bs) {\n  %i = insertelement <vscale x 4 x float> poison, float %bs, i64 0\n  %b = shufflevector <vscale x 4 x float> %i, <vscale x 4 x float> poison, <vscale x 4 x i32> zeroinitializer\n  %r = call <vscale x 4 x float> @llvm.minnum(<vscale x 4 x float> %a, <vscale x 4 x float> %b)\n  ret <vscale x 4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 4 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <vscale x 4 x float> %i, <vscale x 4 x float> poison, <vscale x 4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 4 x float> @llvm.minnum.nxv4f32(<vscale x 4 x float> %a, <vscale x 4 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x float> %r"
 },
 {
  "instr": "minnum",
  "ty": "<vscale x 4 x float>",
  "variant": "binopconstsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "fmov z1.s, #7.00000000\nptrue p0.s\nfminnm z0.s, p0/m, z0.s, z1.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x float> (<vscale x 4 x float>) (in function: test)",
  "ll": "define <vscale x 4 x float> @test(<vscale x 4 x float> %a) {\n  %r = call <vscale x 4 x float> @llvm.minnum(<vscale x 4 x float> %a, <vscale x 4 x float> splat (float 7.0))\n  ret <vscale x 4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 4 x float> @llvm.minnum.nxv4f32(<vscale x 4 x float> %a, <vscale x 4 x float> splat (float 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x float> %r"
 },
 {
  "instr": "minnum",
  "ty": "<vscale x 8 x float>",
  "variant": "binop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.s\nfminnm z0.s, p0/m, z0.s, z2.s\nfminnm z1.s, p0/m, z1.s, z3.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x float> (<vscale x 8 x float>, <vscale x 8 x float>) (in function: test)",
  "ll": "define <vscale x 8 x float> @test(<vscale x 8 x float> %a, <vscale x 8 x float> %b) {\n  %r = call <vscale x 8 x float> @llvm.minnum(<vscale x 8 x float> %a, <vscale x 8 x float> %b)\n  ret <vscale x 8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <vscale x 8 x float> @llvm.minnum.nxv8f32(<vscale x 8 x float> %a, <vscale x 8 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x float> %r"
 },
 {
  "instr": "minnum",
  "ty": "<vscale x 8 x float>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 6,
  "lat": 6,
  "sizelat": 6,
  "size": 3,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.s\nmov z2.s, s2\nfminnm z0.s, p0/m, z0.s, z2.s\nfminnm z1.s, p0/m, z1.s, z2.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x float> (<vscale x 8 x float>, float) (in function: test)",
  "ll": "define <vscale x 8 x float> @test(<vscale x 8 x float> %a, float %bs) {\n  %i = insertelement <vscale x 8 x float> poison, float %bs, i64 0\n  %b = shufflevector <vscale x 8 x float> %i, <vscale x 8 x float> poison, <vscale x 8 x i32> zeroinitializer\n  %r = call <vscale x 8 x float> @llvm.minnum(<vscale x 8 x float> %a, <vscale x 8 x float> %b)\n  ret <vscale x 8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 8 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <vscale x 8 x float> %i, <vscale x 8 x float> poison, <vscale x 8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <vscale x 8 x float> @llvm.minnum.nxv8f32(<vscale x 8 x float> %a, <vscale x 8 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x float> %r"
 },
 {
  "instr": "minnum",
  "ty": "<vscale x 8 x float>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 3,
  "gisize": -1,
  "extrasize": 0,
  "asm": "fmov z2.s, #7.00000000\nptrue p0.s\nfminnm z0.s, p0/m, z0.s, z2.s\nfminnm z1.s, p0/m, z1.s, z2.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x float> (<vscale x 8 x float>) (in function: test)",
  "ll": "define <vscale x 8 x float> @test(<vscale x 8 x float> %a) {\n  %r = call <vscale x 8 x float> @llvm.minnum(<vscale x 8 x float> %a, <vscale x 8 x float> splat (float 7.0))\n  ret <vscale x 8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <vscale x 8 x float> @llvm.minnum.nxv8f32(<vscale x 8 x float> %a, <vscale x 8 x float> splat (float 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x float> %r"
 },
 {
  "instr": "minnum",
  "ty": "<vscale x 2 x double>",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.d\nfminnm z0.d, p0/m, z0.d, z1.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x double> (<vscale x 2 x double>, <vscale x 2 x double>) (in function: test)",
  "ll": "define <vscale x 2 x double> @test(<vscale x 2 x double> %a, <vscale x 2 x double> %b) {\n  %r = call <vscale x 2 x double> @llvm.minnum(<vscale x 2 x double> %a, <vscale x 2 x double> %b)\n  ret <vscale x 2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 2 x double> @llvm.minnum.nxv2f64(<vscale x 2 x double> %a, <vscale x 2 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x double> %r"
 },
 {
  "instr": "minnum",
  "ty": "<vscale x 2 x double>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.d\nmov z1.d, d1\nfminnm z0.d, p0/m, z0.d, z1.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x double> (<vscale x 2 x double>, double) (in function: test)",
  "ll": "define <vscale x 2 x double> @test(<vscale x 2 x double> %a, double %bs) {\n  %i = insertelement <vscale x 2 x double> poison, double %bs, i64 0\n  %b = shufflevector <vscale x 2 x double> %i, <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer\n  %r = call <vscale x 2 x double> @llvm.minnum(<vscale x 2 x double> %a, <vscale x 2 x double> %b)\n  ret <vscale x 2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 2 x double> poison, double %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <vscale x 2 x double> %i, <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 2 x double> @llvm.minnum.nxv2f64(<vscale x 2 x double> %a, <vscale x 2 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x double> %r"
 },
 {
  "instr": "minnum",
  "ty": "<vscale x 2 x double>",
  "variant": "binopconstsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "fmov z1.d, #7.00000000\nptrue p0.d\nfminnm z0.d, p0/m, z0.d, z1.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x double> (<vscale x 2 x double>) (in function: test)",
  "ll": "define <vscale x 2 x double> @test(<vscale x 2 x double> %a) {\n  %r = call <vscale x 2 x double> @llvm.minnum(<vscale x 2 x double> %a, <vscale x 2 x double> splat (double 7.0))\n  ret <vscale x 2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 2 x double> @llvm.minnum.nxv2f64(<vscale x 2 x double> %a, <vscale x 2 x double> splat (double 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x double> %r"
 },
 {
  "instr": "minnum",
  "ty": "<vscale x 4 x double>",
  "variant": "binop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.d\nfminnm z0.d, p0/m, z0.d, z2.d\nfminnm z1.d, p0/m, z1.d, z3.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x double> (<vscale x 4 x double>, <vscale x 4 x double>) (in function: test)",
  "ll": "define <vscale x 4 x double> @test(<vscale x 4 x double> %a, <vscale x 4 x double> %b) {\n  %r = call <vscale x 4 x double> @llvm.minnum(<vscale x 4 x double> %a, <vscale x 4 x double> %b)\n  ret <vscale x 4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <vscale x 4 x double> @llvm.minnum.nxv4f64(<vscale x 4 x double> %a, <vscale x 4 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x double> %r"
 },
 {
  "instr": "minnum",
  "ty": "<vscale x 4 x double>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 6,
  "lat": 6,
  "sizelat": 6,
  "size": 3,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.d\nmov z2.d, d2\nfminnm z0.d, p0/m, z0.d, z2.d\nfminnm z1.d, p0/m, z1.d, z2.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x double> (<vscale x 4 x double>, double) (in function: test)",
  "ll": "define <vscale x 4 x double> @test(<vscale x 4 x double> %a, double %bs) {\n  %i = insertelement <vscale x 4 x double> poison, double %bs, i64 0\n  %b = shufflevector <vscale x 4 x double> %i, <vscale x 4 x double> poison, <vscale x 4 x i32> zeroinitializer\n  %r = call <vscale x 4 x double> @llvm.minnum(<vscale x 4 x double> %a, <vscale x 4 x double> %b)\n  ret <vscale x 4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 4 x double> poison, double %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <vscale x 4 x double> %i, <vscale x 4 x double> poison, <vscale x 4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <vscale x 4 x double> @llvm.minnum.nxv4f64(<vscale x 4 x double> %a, <vscale x 4 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x double> %r"
 },
 {
  "instr": "minnum",
  "ty": "<vscale x 4 x double>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 3,
  "gisize": -1,
  "extrasize": 0,
  "asm": "fmov z2.d, #7.00000000\nptrue p0.d\nfminnm z0.d, p0/m, z0.d, z2.d\nfminnm z1.d, p0/m, z1.d, z2.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x double> (<vscale x 4 x double>) (in function: test)",
  "ll": "define <vscale x 4 x double> @test(<vscale x 4 x double> %a) {\n  %r = call <vscale x 4 x double> @llvm.minnum(<vscale x 4 x double> %a, <vscale x 4 x double> splat (double 7.0))\n  ret <vscale x 4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <vscale x 4 x double> @llvm.minnum.nxv4f64(<vscale x 4 x double> %a, <vscale x 4 x double> splat (double 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x double> %r"
 },
 {
  "instr": "maxnum",
  "ty": "half",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmaxnm h0, h0, h1\nret",
  "giasm": "fmaxnm h0, h0, h1\nret",
  "ll": "define half @test(half %a, half %b) {\n  %r = call half @llvm.maxnum(half %a, half %b)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call half @llvm.maxnum.f16(half %a, half %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "maxnum",
  "ty": "half",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov h1, #7.00000000\nfmaxnm h0, h0, h1\nret",
  "giasm": "fmov h1, #7.00000000\nfmaxnm h0, h0, h1\nret",
  "ll": "define half @test(half %a) {\n  %r = call half @llvm.maxnum(half %a, half 7.0)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call half @llvm.maxnum.f16(half %a, half 0xH4700)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "maxnum",
  "ty": "float",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmaxnm s0, s0, s1\nret",
  "giasm": "fmaxnm s0, s0, s1\nret",
  "ll": "define float @test(float %a, float %b) {\n  %r = call float @llvm.maxnum(float %a, float %b)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call float @llvm.maxnum.f32(float %a, float %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "maxnum",
  "ty": "float",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov s1, #7.00000000\nfmaxnm s0, s0, s1\nret",
  "giasm": "fmov s1, #7.00000000\nfmaxnm s0, s0, s1\nret",
  "ll": "define float @test(float %a) {\n  %r = call float @llvm.maxnum(float %a, float 7.0)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call float @llvm.maxnum.f32(float %a, float 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "maxnum",
  "ty": "double",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmaxnm d0, d0, d1\nret",
  "giasm": "fmaxnm d0, d0, d1\nret",
  "ll": "define double @test(double %a, double %b) {\n  %r = call double @llvm.maxnum(double %a, double %b)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call double @llvm.maxnum.f64(double %a, double %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "maxnum",
  "ty": "double",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov d1, #7.00000000\nfmaxnm d0, d0, d1\nret",
  "giasm": "fmov d1, #7.00000000\nfmaxnm d0, d0, d1\nret",
  "ll": "define double @test(double %a) {\n  %r = call double @llvm.maxnum(double %a, double 7.0)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call double @llvm.maxnum.f64(double %a, double 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "maxnum",
  "ty": "<4 x half>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmaxnm v0.4h, v0.4h, v1.4h\nret",
  "giasm": "fmaxnm v0.4h, v0.4h, v1.4h\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, <4 x half> %b) {\n  %r = call <4 x half> @llvm.maxnum(<4 x half> %a, <4 x half> %b)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x half> @llvm.maxnum.v4f16(<4 x half> %a, <4 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<4 x half>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr d1, [x8, :lo12:.LCPI0_0]\nfmaxnm v0.4h, v0.4h, v1.4h\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr d1, [x8, :lo12:.LCPI0_0]\nfmaxnm v0.4h, v0.4h, v1.4h\nret",
  "ll": "define <4 x half> @test(<4 x half> %a) {\n  %r = call <4 x half> @llvm.maxnum(<4 x half> %a, <4 x half> <half 7.0, half 6.0, half 7.0, half 6.0>)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x half> @llvm.maxnum.v4f16(<4 x half> %a, <4 x half> <half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<4 x half>",
  "variant": "binopsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "dup v1.4h, v1.h[0]\nfmaxnm v0.4h, v0.4h, v1.4h\nret",
  "giasm": "dup v1.4h, v1.h[0]\nfmaxnm v0.4h, v0.4h, v1.4h\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, half %bs) {\n  %i = insertelement <4 x half> poison, half %bs, i64 0\n  %b = shufflevector <4 x half> %i, <4 x half> poison, <4 x i32> zeroinitializer\n  %r = call <4 x half> @llvm.maxnum(<4 x half> %a, <4 x half> %b)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <4 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <4 x half> %i, <4 x half> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x half> @llvm.maxnum.v4f16(<4 x half> %a, <4 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<4 x half>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "movi v1.4h, #71, lsl #8\nfmaxnm v0.4h, v0.4h, v1.4h\nret",
  "giasm": "movi v1.4h, #71, lsl #8\nfmaxnm v0.4h, v0.4h, v1.4h\nret",
  "ll": "define <4 x half> @test(<4 x half> %a) {\n  %r = call <4 x half> @llvm.maxnum(<4 x half> %a, <4 x half> splat (half 7.0))\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x half> @llvm.maxnum.v4f16(<4 x half> %a, <4 x half> splat (half 0xH4700))\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<8 x half>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmaxnm v0.8h, v0.8h, v1.8h\nret",
  "giasm": "fmaxnm v0.8h, v0.8h, v1.8h\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, <8 x half> %b) {\n  %r = call <8 x half> @llvm.maxnum(<8 x half> %a, <8 x half> %b)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <8 x half> @llvm.maxnum.v8f16(<8 x half> %a, <8 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<8 x half>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfmaxnm v0.8h, v0.8h, v1.8h\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfmaxnm v0.8h, v0.8h, v1.8h\nret",
  "ll": "define <8 x half> @test(<8 x half> %a) {\n  %r = call <8 x half> @llvm.maxnum(<8 x half> %a, <8 x half> <half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0>)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <8 x half> @llvm.maxnum.v8f16(<8 x half> %a, <8 x half> <half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<8 x half>",
  "variant": "binopsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "dup v1.8h, v1.h[0]\nfmaxnm v0.8h, v0.8h, v1.8h\nret",
  "giasm": "dup v1.8h, v1.h[0]\nfmaxnm v0.8h, v0.8h, v1.8h\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, half %bs) {\n  %i = insertelement <8 x half> poison, half %bs, i64 0\n  %b = shufflevector <8 x half> %i, <8 x half> poison, <8 x i32> zeroinitializer\n  %r = call <8 x half> @llvm.maxnum(<8 x half> %a, <8 x half> %b)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <8 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <8 x half> %i, <8 x half> poison, <8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <8 x half> @llvm.maxnum.v8f16(<8 x half> %a, <8 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<8 x half>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "movi v1.8h, #71, lsl #8\nfmaxnm v0.8h, v0.8h, v1.8h\nret",
  "giasm": "movi v1.8h, #71, lsl #8\nfmaxnm v0.8h, v0.8h, v1.8h\nret",
  "ll": "define <8 x half> @test(<8 x half> %a) {\n  %r = call <8 x half> @llvm.maxnum(<8 x half> %a, <8 x half> splat (half 7.0))\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <8 x half> @llvm.maxnum.v8f16(<8 x half> %a, <8 x half> splat (half 0xH4700))\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<16 x half>",
  "variant": "binop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmaxnm v1.8h, v1.8h, v3.8h\nfmaxnm v0.8h, v0.8h, v2.8h\nret",
  "giasm": "fmaxnm v0.8h, v0.8h, v2.8h\nfmaxnm v1.8h, v1.8h, v3.8h\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, <16 x half> %b) {\n  %r = call <16 x half> @llvm.maxnum(<16 x half> %a, <16 x half> %b)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <16 x half> @llvm.maxnum.v16f16(<16 x half> %a, <16 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<16 x half>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfmaxnm v0.8h, v0.8h, v2.8h\nfmaxnm v1.8h, v1.8h, v2.8h\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfmaxnm v0.8h, v0.8h, v2.8h\nfmaxnm v1.8h, v1.8h, v2.8h\nret",
  "ll": "define <16 x half> @test(<16 x half> %a) {\n  %r = call <16 x half> @llvm.maxnum(<16 x half> %a, <16 x half> <half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0>)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <16 x half> @llvm.maxnum.v16f16(<16 x half> %a, <16 x half> <half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<16 x half>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 6,
  "lat": 6,
  "sizelat": 6,
  "size": 3,
  "gisize": 4,
  "extrasize": 0,
  "asm": "dup v2.8h, v2.h[0]\nfmaxnm v0.8h, v0.8h, v2.8h\nfmaxnm v1.8h, v1.8h, v2.8h\nret",
  "giasm": "dup v3.8h, v2.h[0]\ndup v2.8h, v2.h[0]\nfmaxnm v0.8h, v0.8h, v3.8h\nfmaxnm v1.8h, v1.8h, v2.8h\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, half %bs) {\n  %i = insertelement <16 x half> poison, half %bs, i64 0\n  %b = shufflevector <16 x half> %i, <16 x half> poison, <16 x i32> zeroinitializer\n  %r = call <16 x half> @llvm.maxnum(<16 x half> %a, <16 x half> %b)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <16 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <16 x half> %i, <16 x half> poison, <16 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <16 x half> @llvm.maxnum.v16f16(<16 x half> %a, <16 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<16 x half>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "movi v2.8h, #71, lsl #8\nfmaxnm v0.8h, v0.8h, v2.8h\nfmaxnm v1.8h, v1.8h, v2.8h\nret",
  "giasm": "movi v2.8h, #71, lsl #8\nfmaxnm v0.8h, v0.8h, v2.8h\nfmaxnm v1.8h, v1.8h, v2.8h\nret",
  "ll": "define <16 x half> @test(<16 x half> %a) {\n  %r = call <16 x half> @llvm.maxnum(<16 x half> %a, <16 x half> splat (half 7.0))\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <16 x half> @llvm.maxnum.v16f16(<16 x half> %a, <16 x half> splat (half 0xH4700))\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<2 x float>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmaxnm v0.2s, v0.2s, v1.2s\nret",
  "giasm": "fmaxnm v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, <2 x float> %b) {\n  %r = call <2 x float> @llvm.maxnum(<2 x float> %a, <2 x float> %b)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x float> @llvm.maxnum.v2f32(<2 x float> %a, <2 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<2 x float>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr d1, [x8, :lo12:.LCPI0_0]\nfmaxnm v0.2s, v0.2s, v1.2s\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr d1, [x8, :lo12:.LCPI0_0]\nfmaxnm v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a) {\n  %r = call <2 x float> @llvm.maxnum(<2 x float> %a, <2 x float> <float 7.0, float 6.0>)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x float> @llvm.maxnum.v2f32(<2 x float> %a, <2 x float> <float 7.000000e+00, float 6.000000e+00>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<2 x float>",
  "variant": "binopsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "dup v1.2s, v1.s[0]\nfmaxnm v0.2s, v0.2s, v1.2s\nret",
  "giasm": "dup v1.2s, v1.s[0]\nfmaxnm v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, float %bs) {\n  %i = insertelement <2 x float> poison, float %bs, i64 0\n  %b = shufflevector <2 x float> %i, <2 x float> poison, <2 x i32> zeroinitializer\n  %r = call <2 x float> @llvm.maxnum(<2 x float> %a, <2 x float> %b)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <2 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <2 x float> %i, <2 x float> poison, <2 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x float> @llvm.maxnum.v2f32(<2 x float> %a, <2 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<2 x float>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov v1.2s, #7.00000000\nfmaxnm v0.2s, v0.2s, v1.2s\nret",
  "giasm": "fmov v1.2s, #7.00000000\nfmaxnm v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a) {\n  %r = call <2 x float> @llvm.maxnum(<2 x float> %a, <2 x float> splat (float 7.0))\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x float> @llvm.maxnum.v2f32(<2 x float> %a, <2 x float> splat (float 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<4 x float>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmaxnm v0.4s, v0.4s, v1.4s\nret",
  "giasm": "fmaxnm v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, <4 x float> %b) {\n  %r = call <4 x float> @llvm.maxnum(<4 x float> %a, <4 x float> %b)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x float> @llvm.maxnum.v4f32(<4 x float> %a, <4 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<4 x float>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfmaxnm v0.4s, v0.4s, v1.4s\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfmaxnm v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a) {\n  %r = call <4 x float> @llvm.maxnum(<4 x float> %a, <4 x float> <float 7.0, float 6.0, float 7.0, float 6.0>)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x float> @llvm.maxnum.v4f32(<4 x float> %a, <4 x float> <float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<4 x float>",
  "variant": "binopsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "dup v1.4s, v1.s[0]\nfmaxnm v0.4s, v0.4s, v1.4s\nret",
  "giasm": "dup v1.4s, v1.s[0]\nfmaxnm v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, float %bs) {\n  %i = insertelement <4 x float> poison, float %bs, i64 0\n  %b = shufflevector <4 x float> %i, <4 x float> poison, <4 x i32> zeroinitializer\n  %r = call <4 x float> @llvm.maxnum(<4 x float> %a, <4 x float> %b)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <4 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <4 x float> %i, <4 x float> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x float> @llvm.maxnum.v4f32(<4 x float> %a, <4 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<4 x float>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov v1.4s, #7.00000000\nfmaxnm v0.4s, v0.4s, v1.4s\nret",
  "giasm": "fmov v1.4s, #7.00000000\nfmaxnm v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a) {\n  %r = call <4 x float> @llvm.maxnum(<4 x float> %a, <4 x float> splat (float 7.0))\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x float> @llvm.maxnum.v4f32(<4 x float> %a, <4 x float> splat (float 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<8 x float>",
  "variant": "binop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmaxnm v1.4s, v1.4s, v3.4s\nfmaxnm v0.4s, v0.4s, v2.4s\nret",
  "giasm": "fmaxnm v0.4s, v0.4s, v2.4s\nfmaxnm v1.4s, v1.4s, v3.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, <8 x float> %b) {\n  %r = call <8 x float> @llvm.maxnum(<8 x float> %a, <8 x float> %b)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x float> @llvm.maxnum.v8f32(<8 x float> %a, <8 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<8 x float>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfmaxnm v0.4s, v0.4s, v2.4s\nfmaxnm v1.4s, v1.4s, v2.4s\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfmaxnm v0.4s, v0.4s, v2.4s\nfmaxnm v1.4s, v1.4s, v2.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a) {\n  %r = call <8 x float> @llvm.maxnum(<8 x float> %a, <8 x float> <float 7.0, float 6.0, float 7.0, float 6.0, float 7.0, float 6.0, float 7.0, float 6.0>)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x float> @llvm.maxnum.v8f32(<8 x float> %a, <8 x float> <float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<8 x float>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 6,
  "lat": 6,
  "sizelat": 6,
  "size": 3,
  "gisize": 4,
  "extrasize": 0,
  "asm": "dup v2.4s, v2.s[0]\nfmaxnm v0.4s, v0.4s, v2.4s\nfmaxnm v1.4s, v1.4s, v2.4s\nret",
  "giasm": "dup v3.4s, v2.s[0]\ndup v2.4s, v2.s[0]\nfmaxnm v0.4s, v0.4s, v3.4s\nfmaxnm v1.4s, v1.4s, v2.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, float %bs) {\n  %i = insertelement <8 x float> poison, float %bs, i64 0\n  %b = shufflevector <8 x float> %i, <8 x float> poison, <8 x i32> zeroinitializer\n  %r = call <8 x float> @llvm.maxnum(<8 x float> %a, <8 x float> %b)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <8 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <8 x float> %i, <8 x float> poison, <8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x float> @llvm.maxnum.v8f32(<8 x float> %a, <8 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<8 x float>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fmov v2.4s, #7.00000000\nfmaxnm v0.4s, v0.4s, v2.4s\nfmaxnm v1.4s, v1.4s, v2.4s\nret",
  "giasm": "fmov v2.4s, #7.00000000\nfmaxnm v0.4s, v0.4s, v2.4s\nfmaxnm v1.4s, v1.4s, v2.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a) {\n  %r = call <8 x float> @llvm.maxnum(<8 x float> %a, <8 x float> splat (float 7.0))\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x float> @llvm.maxnum.v8f32(<8 x float> %a, <8 x float> splat (float 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<2 x double>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmaxnm v0.2d, v0.2d, v1.2d\nret",
  "giasm": "fmaxnm v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, <2 x double> %b) {\n  %r = call <2 x double> @llvm.maxnum(<2 x double> %a, <2 x double> %b)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x double> @llvm.maxnum.v2f64(<2 x double> %a, <2 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<2 x double>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfmaxnm v0.2d, v0.2d, v1.2d\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfmaxnm v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a) {\n  %r = call <2 x double> @llvm.maxnum(<2 x double> %a, <2 x double> <double 7.0, double 6.0>)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x double> @llvm.maxnum.v2f64(<2 x double> %a, <2 x double> <double 7.000000e+00, double 6.000000e+00>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<2 x double>",
  "variant": "binopsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "dup v1.2d, v1.d[0]\nfmaxnm v0.2d, v0.2d, v1.2d\nret",
  "giasm": "dup v1.2d, v1.d[0]\nfmaxnm v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, double %bs) {\n  %i = insertelement <2 x double> poison, double %bs, i64 0\n  %b = shufflevector <2 x double> %i, <2 x double> poison, <2 x i32> zeroinitializer\n  %r = call <2 x double> @llvm.maxnum(<2 x double> %a, <2 x double> %b)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <2 x double> poison, double %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <2 x double> %i, <2 x double> poison, <2 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x double> @llvm.maxnum.v2f64(<2 x double> %a, <2 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<2 x double>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov v1.2d, #7.00000000\nfmaxnm v0.2d, v0.2d, v1.2d\nret",
  "giasm": "fmov v1.2d, #7.00000000\nfmaxnm v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a) {\n  %r = call <2 x double> @llvm.maxnum(<2 x double> %a, <2 x double> splat (double 7.0))\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x double> @llvm.maxnum.v2f64(<2 x double> %a, <2 x double> splat (double 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<4 x double>",
  "variant": "binop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmaxnm v1.2d, v1.2d, v3.2d\nfmaxnm v0.2d, v0.2d, v2.2d\nret",
  "giasm": "fmaxnm v0.2d, v0.2d, v2.2d\nfmaxnm v1.2d, v1.2d, v3.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, <4 x double> %b) {\n  %r = call <4 x double> @llvm.maxnum(<4 x double> %a, <4 x double> %b)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x double> @llvm.maxnum.v4f64(<4 x double> %a, <4 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<4 x double>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfmaxnm v0.2d, v0.2d, v2.2d\nfmaxnm v1.2d, v1.2d, v2.2d\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfmaxnm v0.2d, v0.2d, v2.2d\nfmaxnm v1.2d, v1.2d, v2.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a) {\n  %r = call <4 x double> @llvm.maxnum(<4 x double> %a, <4 x double> <double 7.0, double 6.0, double 7.0, double 6.0>)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x double> @llvm.maxnum.v4f64(<4 x double> %a, <4 x double> <double 7.000000e+00, double 6.000000e+00, double 7.000000e+00, double 6.000000e+00>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<4 x double>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 6,
  "lat": 6,
  "sizelat": 6,
  "size": 3,
  "gisize": 4,
  "extrasize": 0,
  "asm": "dup v2.2d, v2.d[0]\nfmaxnm v0.2d, v0.2d, v2.2d\nfmaxnm v1.2d, v1.2d, v2.2d\nret",
  "giasm": "dup v3.2d, v2.d[0]\ndup v2.2d, v2.d[0]\nfmaxnm v0.2d, v0.2d, v3.2d\nfmaxnm v1.2d, v1.2d, v2.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, double %bs) {\n  %i = insertelement <4 x double> poison, double %bs, i64 0\n  %b = shufflevector <4 x double> %i, <4 x double> poison, <4 x i32> zeroinitializer\n  %r = call <4 x double> @llvm.maxnum(<4 x double> %a, <4 x double> %b)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <4 x double> poison, double %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <4 x double> %i, <4 x double> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x double> @llvm.maxnum.v4f64(<4 x double> %a, <4 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<4 x double>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fmov v2.2d, #7.00000000\nfmaxnm v0.2d, v0.2d, v2.2d\nfmaxnm v1.2d, v1.2d, v2.2d\nret",
  "giasm": "fmov v2.2d, #7.00000000\nfmaxnm v0.2d, v0.2d, v2.2d\nfmaxnm v1.2d, v1.2d, v2.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a) {\n  %r = call <4 x double> @llvm.maxnum(<4 x double> %a, <4 x double> splat (double 7.0))\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x double> @llvm.maxnum.v4f64(<4 x double> %a, <4 x double> splat (double 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<vscale x 4 x half>",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.s\nfmaxnm z0.h, p0/m, z0.h, z1.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x half> (<vscale x 4 x half>, <vscale x 4 x half>) (in function: test)",
  "ll": "define <vscale x 4 x half> @test(<vscale x 4 x half> %a, <vscale x 4 x half> %b) {\n  %r = call <vscale x 4 x half> @llvm.maxnum(<vscale x 4 x half> %a, <vscale x 4 x half> %b)\n  ret <vscale x 4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 4 x half> @llvm.maxnum.nxv4f16(<vscale x 4 x half> %a, <vscale x 4 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x half> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<vscale x 4 x half>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.s\nmov z1.h, h1\nfmaxnm z0.h, p0/m, z0.h, z1.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x half> (<vscale x 4 x half>, half) (in function: test)",
  "ll": "define <vscale x 4 x half> @test(<vscale x 4 x half> %a, half %bs) {\n  %i = insertelement <vscale x 4 x half> poison, half %bs, i64 0\n  %b = shufflevector <vscale x 4 x half> %i, <vscale x 4 x half> poison, <vscale x 4 x i32> zeroinitializer\n  %r = call <vscale x 4 x half> @llvm.maxnum(<vscale x 4 x half> %a, <vscale x 4 x half> %b)\n  ret <vscale x 4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 4 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <vscale x 4 x half> %i, <vscale x 4 x half> poison, <vscale x 4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 4 x half> @llvm.maxnum.nxv4f16(<vscale x 4 x half> %a, <vscale x 4 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x half> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<vscale x 4 x half>",
  "variant": "binopconstsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "fmov z1.h, #7.00000000\nptrue p0.s\nfmaxnm z0.h, p0/m, z0.h, z1.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x half> (<vscale x 4 x half>) (in function: test)",
  "ll": "define <vscale x 4 x half> @test(<vscale x 4 x half> %a) {\n  %r = call <vscale x 4 x half> @llvm.maxnum(<vscale x 4 x half> %a, <vscale x 4 x half> splat (half 7.0))\n  ret <vscale x 4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 4 x half> @llvm.maxnum.nxv4f16(<vscale x 4 x half> %a, <vscale x 4 x half> splat (half 0xH4700))\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x half> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<vscale x 8 x half>",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.h\nfmaxnm z0.h, p0/m, z0.h, z1.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x half> (<vscale x 8 x half>, <vscale x 8 x half>) (in function: test)",
  "ll": "define <vscale x 8 x half> @test(<vscale x 8 x half> %a, <vscale x 8 x half> %b) {\n  %r = call <vscale x 8 x half> @llvm.maxnum(<vscale x 8 x half> %a, <vscale x 8 x half> %b)\n  ret <vscale x 8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 8 x half> @llvm.maxnum.nxv8f16(<vscale x 8 x half> %a, <vscale x 8 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x half> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<vscale x 8 x half>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.h\nmov z1.h, h1\nfmaxnm z0.h, p0/m, z0.h, z1.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x half> (<vscale x 8 x half>, half) (in function: test)",
  "ll": "define <vscale x 8 x half> @test(<vscale x 8 x half> %a, half %bs) {\n  %i = insertelement <vscale x 8 x half> poison, half %bs, i64 0\n  %b = shufflevector <vscale x 8 x half> %i, <vscale x 8 x half> poison, <vscale x 8 x i32> zeroinitializer\n  %r = call <vscale x 8 x half> @llvm.maxnum(<vscale x 8 x half> %a, <vscale x 8 x half> %b)\n  ret <vscale x 8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 8 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <vscale x 8 x half> %i, <vscale x 8 x half> poison, <vscale x 8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 8 x half> @llvm.maxnum.nxv8f16(<vscale x 8 x half> %a, <vscale x 8 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x half> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<vscale x 8 x half>",
  "variant": "binopconstsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "fmov z1.h, #7.00000000\nptrue p0.h\nfmaxnm z0.h, p0/m, z0.h, z1.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x half> (<vscale x 8 x half>) (in function: test)",
  "ll": "define <vscale x 8 x half> @test(<vscale x 8 x half> %a) {\n  %r = call <vscale x 8 x half> @llvm.maxnum(<vscale x 8 x half> %a, <vscale x 8 x half> splat (half 7.0))\n  ret <vscale x 8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 8 x half> @llvm.maxnum.nxv8f16(<vscale x 8 x half> %a, <vscale x 8 x half> splat (half 0xH4700))\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x half> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<vscale x 16 x half>",
  "variant": "binop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.h\nfmaxnm z0.h, p0/m, z0.h, z2.h\nfmaxnm z1.h, p0/m, z1.h, z3.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 16 x half> (<vscale x 16 x half>, <vscale x 16 x half>) (in function: test)",
  "ll": "define <vscale x 16 x half> @test(<vscale x 16 x half> %a, <vscale x 16 x half> %b) {\n  %r = call <vscale x 16 x half> @llvm.maxnum(<vscale x 16 x half> %a, <vscale x 16 x half> %b)\n  ret <vscale x 16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <vscale x 16 x half> @llvm.maxnum.nxv16f16(<vscale x 16 x half> %a, <vscale x 16 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 16 x half> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<vscale x 16 x half>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 6,
  "lat": 6,
  "sizelat": 6,
  "size": 3,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.h\nmov z2.h, h2\nfmaxnm z0.h, p0/m, z0.h, z2.h\nfmaxnm z1.h, p0/m, z1.h, z2.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 16 x half> (<vscale x 16 x half>, half) (in function: test)",
  "ll": "define <vscale x 16 x half> @test(<vscale x 16 x half> %a, half %bs) {\n  %i = insertelement <vscale x 16 x half> poison, half %bs, i64 0\n  %b = shufflevector <vscale x 16 x half> %i, <vscale x 16 x half> poison, <vscale x 16 x i32> zeroinitializer\n  %r = call <vscale x 16 x half> @llvm.maxnum(<vscale x 16 x half> %a, <vscale x 16 x half> %b)\n  ret <vscale x 16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 16 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <vscale x 16 x half> %i, <vscale x 16 x half> poison, <vscale x 16 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <vscale x 16 x half> @llvm.maxnum.nxv16f16(<vscale x 16 x half> %a, <vscale x 16 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 16 x half> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<vscale x 16 x half>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 3,
  "gisize": -1,
  "extrasize": 0,
  "asm": "fmov z2.h, #7.00000000\nptrue p0.h\nfmaxnm z0.h, p0/m, z0.h, z2.h\nfmaxnm z1.h, p0/m, z1.h, z2.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 16 x half> (<vscale x 16 x half>) (in function: test)",
  "ll": "define <vscale x 16 x half> @test(<vscale x 16 x half> %a) {\n  %r = call <vscale x 16 x half> @llvm.maxnum(<vscale x 16 x half> %a, <vscale x 16 x half> splat (half 7.0))\n  ret <vscale x 16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <vscale x 16 x half> @llvm.maxnum.nxv16f16(<vscale x 16 x half> %a, <vscale x 16 x half> splat (half 0xH4700))\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 16 x half> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<vscale x 2 x float>",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.d\nfmaxnm z0.s, p0/m, z0.s, z1.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x float> (<vscale x 2 x float>, <vscale x 2 x float>) (in function: test)",
  "ll": "define <vscale x 2 x float> @test(<vscale x 2 x float> %a, <vscale x 2 x float> %b) {\n  %r = call <vscale x 2 x float> @llvm.maxnum(<vscale x 2 x float> %a, <vscale x 2 x float> %b)\n  ret <vscale x 2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 2 x float> @llvm.maxnum.nxv2f32(<vscale x 2 x float> %a, <vscale x 2 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x float> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<vscale x 2 x float>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.d\nmov z1.s, s1\nfmaxnm z0.s, p0/m, z0.s, z1.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x float> (<vscale x 2 x float>, float) (in function: test)",
  "ll": "define <vscale x 2 x float> @test(<vscale x 2 x float> %a, float %bs) {\n  %i = insertelement <vscale x 2 x float> poison, float %bs, i64 0\n  %b = shufflevector <vscale x 2 x float> %i, <vscale x 2 x float> poison, <vscale x 2 x i32> zeroinitializer\n  %r = call <vscale x 2 x float> @llvm.maxnum(<vscale x 2 x float> %a, <vscale x 2 x float> %b)\n  ret <vscale x 2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 2 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <vscale x 2 x float> %i, <vscale x 2 x float> poison, <vscale x 2 x i32> zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 2 x float> @llvm.maxnum.nxv2f32(<vscale x 2 x float> %a, <vscale x 2 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x float> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<vscale x 2 x float>",
  "variant": "binopconstsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "fmov z1.s, #7.00000000\nptrue p0.d\nfmaxnm z0.s, p0/m, z0.s, z1.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x float> (<vscale x 2 x float>) (in function: test)",
  "ll": "define <vscale x 2 x float> @test(<vscale x 2 x float> %a) {\n  %r = call <vscale x 2 x float> @llvm.maxnum(<vscale x 2 x float> %a, <vscale x 2 x float> splat (float 7.0))\n  ret <vscale x 2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 2 x float> @llvm.maxnum.nxv2f32(<vscale x 2 x float> %a, <vscale x 2 x float> splat (float 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x float> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<vscale x 4 x float>",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.s\nfmaxnm z0.s, p0/m, z0.s, z1.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x float> (<vscale x 4 x float>, <vscale x 4 x float>) (in function: test)",
  "ll": "define <vscale x 4 x float> @test(<vscale x 4 x float> %a, <vscale x 4 x float> %b) {\n  %r = call <vscale x 4 x float> @llvm.maxnum(<vscale x 4 x float> %a, <vscale x 4 x float> %b)\n  ret <vscale x 4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 4 x float> @llvm.maxnum.nxv4f32(<vscale x 4 x float> %a, <vscale x 4 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x float> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<vscale x 4 x float>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.s\nmov z1.s, s1\nfmaxnm z0.s, p0/m, z0.s, z1.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x float> (<vscale x 4 x float>, float) (in function: test)",
  "ll": "define <vscale x 4 x float> @test(<vscale x 4 x float> %a, float %bs) {\n  %i = insertelement <vscale x 4 x float> poison, float %bs, i64 0\n  %b = shufflevector <vscale x 4 x float> %i, <vscale x 4 x float> poison, <vscale x 4 x i32> zeroinitializer\n  %r = call <vscale x 4 x float> @llvm.maxnum(<vscale x 4 x float> %a, <vscale x 4 x float> %b)\n  ret <vscale x 4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 4 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <vscale x 4 x float> %i, <vscale x 4 x float> poison, <vscale x 4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 4 x float> @llvm.maxnum.nxv4f32(<vscale x 4 x float> %a, <vscale x 4 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x float> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<vscale x 4 x float>",
  "variant": "binopconstsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "fmov z1.s, #7.00000000\nptrue p0.s\nfmaxnm z0.s, p0/m, z0.s, z1.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x float> (<vscale x 4 x float>) (in function: test)",
  "ll": "define <vscale x 4 x float> @test(<vscale x 4 x float> %a) {\n  %r = call <vscale x 4 x float> @llvm.maxnum(<vscale x 4 x float> %a, <vscale x 4 x float> splat (float 7.0))\n  ret <vscale x 4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 4 x float> @llvm.maxnum.nxv4f32(<vscale x 4 x float> %a, <vscale x 4 x float> splat (float 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x float> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<vscale x 8 x float>",
  "variant": "binop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.s\nfmaxnm z0.s, p0/m, z0.s, z2.s\nfmaxnm z1.s, p0/m, z1.s, z3.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x float> (<vscale x 8 x float>, <vscale x 8 x float>) (in function: test)",
  "ll": "define <vscale x 8 x float> @test(<vscale x 8 x float> %a, <vscale x 8 x float> %b) {\n  %r = call <vscale x 8 x float> @llvm.maxnum(<vscale x 8 x float> %a, <vscale x 8 x float> %b)\n  ret <vscale x 8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <vscale x 8 x float> @llvm.maxnum.nxv8f32(<vscale x 8 x float> %a, <vscale x 8 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x float> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<vscale x 8 x float>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 6,
  "lat": 6,
  "sizelat": 6,
  "size": 3,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.s\nmov z2.s, s2\nfmaxnm z0.s, p0/m, z0.s, z2.s\nfmaxnm z1.s, p0/m, z1.s, z2.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x float> (<vscale x 8 x float>, float) (in function: test)",
  "ll": "define <vscale x 8 x float> @test(<vscale x 8 x float> %a, float %bs) {\n  %i = insertelement <vscale x 8 x float> poison, float %bs, i64 0\n  %b = shufflevector <vscale x 8 x float> %i, <vscale x 8 x float> poison, <vscale x 8 x i32> zeroinitializer\n  %r = call <vscale x 8 x float> @llvm.maxnum(<vscale x 8 x float> %a, <vscale x 8 x float> %b)\n  ret <vscale x 8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 8 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <vscale x 8 x float> %i, <vscale x 8 x float> poison, <vscale x 8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <vscale x 8 x float> @llvm.maxnum.nxv8f32(<vscale x 8 x float> %a, <vscale x 8 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x float> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<vscale x 8 x float>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 3,
  "gisize": -1,
  "extrasize": 0,
  "asm": "fmov z2.s, #7.00000000\nptrue p0.s\nfmaxnm z0.s, p0/m, z0.s, z2.s\nfmaxnm z1.s, p0/m, z1.s, z2.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x float> (<vscale x 8 x float>) (in function: test)",
  "ll": "define <vscale x 8 x float> @test(<vscale x 8 x float> %a) {\n  %r = call <vscale x 8 x float> @llvm.maxnum(<vscale x 8 x float> %a, <vscale x 8 x float> splat (float 7.0))\n  ret <vscale x 8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <vscale x 8 x float> @llvm.maxnum.nxv8f32(<vscale x 8 x float> %a, <vscale x 8 x float> splat (float 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x float> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<vscale x 2 x double>",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.d\nfmaxnm z0.d, p0/m, z0.d, z1.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x double> (<vscale x 2 x double>, <vscale x 2 x double>) (in function: test)",
  "ll": "define <vscale x 2 x double> @test(<vscale x 2 x double> %a, <vscale x 2 x double> %b) {\n  %r = call <vscale x 2 x double> @llvm.maxnum(<vscale x 2 x double> %a, <vscale x 2 x double> %b)\n  ret <vscale x 2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 2 x double> @llvm.maxnum.nxv2f64(<vscale x 2 x double> %a, <vscale x 2 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x double> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<vscale x 2 x double>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.d\nmov z1.d, d1\nfmaxnm z0.d, p0/m, z0.d, z1.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x double> (<vscale x 2 x double>, double) (in function: test)",
  "ll": "define <vscale x 2 x double> @test(<vscale x 2 x double> %a, double %bs) {\n  %i = insertelement <vscale x 2 x double> poison, double %bs, i64 0\n  %b = shufflevector <vscale x 2 x double> %i, <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer\n  %r = call <vscale x 2 x double> @llvm.maxnum(<vscale x 2 x double> %a, <vscale x 2 x double> %b)\n  ret <vscale x 2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 2 x double> poison, double %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <vscale x 2 x double> %i, <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 2 x double> @llvm.maxnum.nxv2f64(<vscale x 2 x double> %a, <vscale x 2 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x double> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<vscale x 2 x double>",
  "variant": "binopconstsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "fmov z1.d, #7.00000000\nptrue p0.d\nfmaxnm z0.d, p0/m, z0.d, z1.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x double> (<vscale x 2 x double>) (in function: test)",
  "ll": "define <vscale x 2 x double> @test(<vscale x 2 x double> %a) {\n  %r = call <vscale x 2 x double> @llvm.maxnum(<vscale x 2 x double> %a, <vscale x 2 x double> splat (double 7.0))\n  ret <vscale x 2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 2 x double> @llvm.maxnum.nxv2f64(<vscale x 2 x double> %a, <vscale x 2 x double> splat (double 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x double> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<vscale x 4 x double>",
  "variant": "binop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.d\nfmaxnm z0.d, p0/m, z0.d, z2.d\nfmaxnm z1.d, p0/m, z1.d, z3.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x double> (<vscale x 4 x double>, <vscale x 4 x double>) (in function: test)",
  "ll": "define <vscale x 4 x double> @test(<vscale x 4 x double> %a, <vscale x 4 x double> %b) {\n  %r = call <vscale x 4 x double> @llvm.maxnum(<vscale x 4 x double> %a, <vscale x 4 x double> %b)\n  ret <vscale x 4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <vscale x 4 x double> @llvm.maxnum.nxv4f64(<vscale x 4 x double> %a, <vscale x 4 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x double> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<vscale x 4 x double>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 6,
  "lat": 6,
  "sizelat": 6,
  "size": 3,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.d\nmov z2.d, d2\nfmaxnm z0.d, p0/m, z0.d, z2.d\nfmaxnm z1.d, p0/m, z1.d, z2.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x double> (<vscale x 4 x double>, double) (in function: test)",
  "ll": "define <vscale x 4 x double> @test(<vscale x 4 x double> %a, double %bs) {\n  %i = insertelement <vscale x 4 x double> poison, double %bs, i64 0\n  %b = shufflevector <vscale x 4 x double> %i, <vscale x 4 x double> poison, <vscale x 4 x i32> zeroinitializer\n  %r = call <vscale x 4 x double> @llvm.maxnum(<vscale x 4 x double> %a, <vscale x 4 x double> %b)\n  ret <vscale x 4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 4 x double> poison, double %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <vscale x 4 x double> %i, <vscale x 4 x double> poison, <vscale x 4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <vscale x 4 x double> @llvm.maxnum.nxv4f64(<vscale x 4 x double> %a, <vscale x 4 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x double> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<vscale x 4 x double>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 3,
  "gisize": -1,
  "extrasize": 0,
  "asm": "fmov z2.d, #7.00000000\nptrue p0.d\nfmaxnm z0.d, p0/m, z0.d, z2.d\nfmaxnm z1.d, p0/m, z1.d, z2.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x double> (<vscale x 4 x double>) (in function: test)",
  "ll": "define <vscale x 4 x double> @test(<vscale x 4 x double> %a) {\n  %r = call <vscale x 4 x double> @llvm.maxnum(<vscale x 4 x double> %a, <vscale x 4 x double> splat (double 7.0))\n  ret <vscale x 4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <vscale x 4 x double> @llvm.maxnum.nxv4f64(<vscale x 4 x double> %a, <vscale x 4 x double> splat (double 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x double> %r"
 },
 {
  "instr": "minimum",
  "ty": "half",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmin h0, h0, h1\nret",
  "giasm": "fmin h0, h0, h1\nret",
  "ll": "define half @test(half %a, half %b) {\n  %r = call half @llvm.minimum(half %a, half %b)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call half @llvm.minimum.f16(half %a, half %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "minimum",
  "ty": "half",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov h1, #7.00000000\nfmin h0, h0, h1\nret",
  "giasm": "fmov h1, #7.00000000\nfmin h0, h0, h1\nret",
  "ll": "define half @test(half %a) {\n  %r = call half @llvm.minimum(half %a, half 7.0)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call half @llvm.minimum.f16(half %a, half 0xH4700)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "minimum",
  "ty": "float",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmin s0, s0, s1\nret",
  "giasm": "fmin s0, s0, s1\nret",
  "ll": "define float @test(float %a, float %b) {\n  %r = call float @llvm.minimum(float %a, float %b)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call float @llvm.minimum.f32(float %a, float %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "minimum",
  "ty": "float",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov s1, #7.00000000\nfmin s0, s0, s1\nret",
  "giasm": "fmov s1, #7.00000000\nfmin s0, s0, s1\nret",
  "ll": "define float @test(float %a) {\n  %r = call float @llvm.minimum(float %a, float 7.0)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call float @llvm.minimum.f32(float %a, float 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "minimum",
  "ty": "double",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmin d0, d0, d1\nret",
  "giasm": "fmin d0, d0, d1\nret",
  "ll": "define double @test(double %a, double %b) {\n  %r = call double @llvm.minimum(double %a, double %b)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call double @llvm.minimum.f64(double %a, double %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "minimum",
  "ty": "double",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov d1, #7.00000000\nfmin d0, d0, d1\nret",
  "giasm": "fmov d1, #7.00000000\nfmin d0, d0, d1\nret",
  "ll": "define double @test(double %a) {\n  %r = call double @llvm.minimum(double %a, double 7.0)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call double @llvm.minimum.f64(double %a, double 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "minimum",
  "ty": "<4 x half>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmin v0.4h, v0.4h, v1.4h\nret",
  "giasm": "fmin v0.4h, v0.4h, v1.4h\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, <4 x half> %b) {\n  %r = call <4 x half> @llvm.minimum(<4 x half> %a, <4 x half> %b)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x half> @llvm.minimum.v4f16(<4 x half> %a, <4 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "minimum",
  "ty": "<4 x half>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr d1, [x8, :lo12:.LCPI0_0]\nfmin v0.4h, v0.4h, v1.4h\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr d1, [x8, :lo12:.LCPI0_0]\nfmin v0.4h, v0.4h, v1.4h\nret",
  "ll": "define <4 x half> @test(<4 x half> %a) {\n  %r = call <4 x half> @llvm.minimum(<4 x half> %a, <4 x half> <half 7.0, half 6.0, half 7.0, half 6.0>)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x half> @llvm.minimum.v4f16(<4 x half> %a, <4 x half> <half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "minimum",
  "ty": "<4 x half>",
  "variant": "binopsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "dup v1.4h, v1.h[0]\nfmin v0.4h, v0.4h, v1.4h\nret",
  "giasm": "dup v1.4h, v1.h[0]\nfmin v0.4h, v0.4h, v1.4h\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, half %bs) {\n  %i = insertelement <4 x half> poison, half %bs, i64 0\n  %b = shufflevector <4 x half> %i, <4 x half> poison, <4 x i32> zeroinitializer\n  %r = call <4 x half> @llvm.minimum(<4 x half> %a, <4 x half> %b)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <4 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <4 x half> %i, <4 x half> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x half> @llvm.minimum.v4f16(<4 x half> %a, <4 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "minimum",
  "ty": "<4 x half>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "movi v1.4h, #71, lsl #8\nfmin v0.4h, v0.4h, v1.4h\nret",
  "giasm": "movi v1.4h, #71, lsl #8\nfmin v0.4h, v0.4h, v1.4h\nret",
  "ll": "define <4 x half> @test(<4 x half> %a) {\n  %r = call <4 x half> @llvm.minimum(<4 x half> %a, <4 x half> splat (half 7.0))\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x half> @llvm.minimum.v4f16(<4 x half> %a, <4 x half> splat (half 0xH4700))\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "minimum",
  "ty": "<8 x half>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmin v0.8h, v0.8h, v1.8h\nret",
  "giasm": "fmin v0.8h, v0.8h, v1.8h\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, <8 x half> %b) {\n  %r = call <8 x half> @llvm.minimum(<8 x half> %a, <8 x half> %b)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <8 x half> @llvm.minimum.v8f16(<8 x half> %a, <8 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "minimum",
  "ty": "<8 x half>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfmin v0.8h, v0.8h, v1.8h\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfmin v0.8h, v0.8h, v1.8h\nret",
  "ll": "define <8 x half> @test(<8 x half> %a) {\n  %r = call <8 x half> @llvm.minimum(<8 x half> %a, <8 x half> <half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0>)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <8 x half> @llvm.minimum.v8f16(<8 x half> %a, <8 x half> <half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "minimum",
  "ty": "<8 x half>",
  "variant": "binopsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "dup v1.8h, v1.h[0]\nfmin v0.8h, v0.8h, v1.8h\nret",
  "giasm": "dup v1.8h, v1.h[0]\nfmin v0.8h, v0.8h, v1.8h\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, half %bs) {\n  %i = insertelement <8 x half> poison, half %bs, i64 0\n  %b = shufflevector <8 x half> %i, <8 x half> poison, <8 x i32> zeroinitializer\n  %r = call <8 x half> @llvm.minimum(<8 x half> %a, <8 x half> %b)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <8 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <8 x half> %i, <8 x half> poison, <8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <8 x half> @llvm.minimum.v8f16(<8 x half> %a, <8 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "minimum",
  "ty": "<8 x half>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "movi v1.8h, #71, lsl #8\nfmin v0.8h, v0.8h, v1.8h\nret",
  "giasm": "movi v1.8h, #71, lsl #8\nfmin v0.8h, v0.8h, v1.8h\nret",
  "ll": "define <8 x half> @test(<8 x half> %a) {\n  %r = call <8 x half> @llvm.minimum(<8 x half> %a, <8 x half> splat (half 7.0))\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <8 x half> @llvm.minimum.v8f16(<8 x half> %a, <8 x half> splat (half 0xH4700))\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "minimum",
  "ty": "<16 x half>",
  "variant": "binop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmin v1.8h, v1.8h, v3.8h\nfmin v0.8h, v0.8h, v2.8h\nret",
  "giasm": "fmin v0.8h, v0.8h, v2.8h\nfmin v1.8h, v1.8h, v3.8h\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, <16 x half> %b) {\n  %r = call <16 x half> @llvm.minimum(<16 x half> %a, <16 x half> %b)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <16 x half> @llvm.minimum.v16f16(<16 x half> %a, <16 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "minimum",
  "ty": "<16 x half>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfmin v0.8h, v0.8h, v2.8h\nfmin v1.8h, v1.8h, v2.8h\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfmin v0.8h, v0.8h, v2.8h\nfmin v1.8h, v1.8h, v2.8h\nret",
  "ll": "define <16 x half> @test(<16 x half> %a) {\n  %r = call <16 x half> @llvm.minimum(<16 x half> %a, <16 x half> <half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0>)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <16 x half> @llvm.minimum.v16f16(<16 x half> %a, <16 x half> <half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "minimum",
  "ty": "<16 x half>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 6,
  "lat": 6,
  "sizelat": 6,
  "size": 3,
  "gisize": 4,
  "extrasize": 0,
  "asm": "dup v2.8h, v2.h[0]\nfmin v0.8h, v0.8h, v2.8h\nfmin v1.8h, v1.8h, v2.8h\nret",
  "giasm": "dup v3.8h, v2.h[0]\ndup v2.8h, v2.h[0]\nfmin v0.8h, v0.8h, v3.8h\nfmin v1.8h, v1.8h, v2.8h\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, half %bs) {\n  %i = insertelement <16 x half> poison, half %bs, i64 0\n  %b = shufflevector <16 x half> %i, <16 x half> poison, <16 x i32> zeroinitializer\n  %r = call <16 x half> @llvm.minimum(<16 x half> %a, <16 x half> %b)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <16 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <16 x half> %i, <16 x half> poison, <16 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <16 x half> @llvm.minimum.v16f16(<16 x half> %a, <16 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "minimum",
  "ty": "<16 x half>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "movi v2.8h, #71, lsl #8\nfmin v0.8h, v0.8h, v2.8h\nfmin v1.8h, v1.8h, v2.8h\nret",
  "giasm": "movi v2.8h, #71, lsl #8\nfmin v0.8h, v0.8h, v2.8h\nfmin v1.8h, v1.8h, v2.8h\nret",
  "ll": "define <16 x half> @test(<16 x half> %a) {\n  %r = call <16 x half> @llvm.minimum(<16 x half> %a, <16 x half> splat (half 7.0))\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <16 x half> @llvm.minimum.v16f16(<16 x half> %a, <16 x half> splat (half 0xH4700))\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "minimum",
  "ty": "<2 x float>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmin v0.2s, v0.2s, v1.2s\nret",
  "giasm": "fmin v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, <2 x float> %b) {\n  %r = call <2 x float> @llvm.minimum(<2 x float> %a, <2 x float> %b)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x float> @llvm.minimum.v2f32(<2 x float> %a, <2 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "minimum",
  "ty": "<2 x float>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr d1, [x8, :lo12:.LCPI0_0]\nfmin v0.2s, v0.2s, v1.2s\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr d1, [x8, :lo12:.LCPI0_0]\nfmin v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a) {\n  %r = call <2 x float> @llvm.minimum(<2 x float> %a, <2 x float> <float 7.0, float 6.0>)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x float> @llvm.minimum.v2f32(<2 x float> %a, <2 x float> <float 7.000000e+00, float 6.000000e+00>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "minimum",
  "ty": "<2 x float>",
  "variant": "binopsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "dup v1.2s, v1.s[0]\nfmin v0.2s, v0.2s, v1.2s\nret",
  "giasm": "dup v1.2s, v1.s[0]\nfmin v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, float %bs) {\n  %i = insertelement <2 x float> poison, float %bs, i64 0\n  %b = shufflevector <2 x float> %i, <2 x float> poison, <2 x i32> zeroinitializer\n  %r = call <2 x float> @llvm.minimum(<2 x float> %a, <2 x float> %b)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <2 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <2 x float> %i, <2 x float> poison, <2 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x float> @llvm.minimum.v2f32(<2 x float> %a, <2 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "minimum",
  "ty": "<2 x float>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov v1.2s, #7.00000000\nfmin v0.2s, v0.2s, v1.2s\nret",
  "giasm": "fmov v1.2s, #7.00000000\nfmin v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a) {\n  %r = call <2 x float> @llvm.minimum(<2 x float> %a, <2 x float> splat (float 7.0))\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x float> @llvm.minimum.v2f32(<2 x float> %a, <2 x float> splat (float 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "minimum",
  "ty": "<4 x float>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmin v0.4s, v0.4s, v1.4s\nret",
  "giasm": "fmin v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, <4 x float> %b) {\n  %r = call <4 x float> @llvm.minimum(<4 x float> %a, <4 x float> %b)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x float> @llvm.minimum.v4f32(<4 x float> %a, <4 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "minimum",
  "ty": "<4 x float>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfmin v0.4s, v0.4s, v1.4s\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfmin v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a) {\n  %r = call <4 x float> @llvm.minimum(<4 x float> %a, <4 x float> <float 7.0, float 6.0, float 7.0, float 6.0>)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x float> @llvm.minimum.v4f32(<4 x float> %a, <4 x float> <float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "minimum",
  "ty": "<4 x float>",
  "variant": "binopsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "dup v1.4s, v1.s[0]\nfmin v0.4s, v0.4s, v1.4s\nret",
  "giasm": "dup v1.4s, v1.s[0]\nfmin v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, float %bs) {\n  %i = insertelement <4 x float> poison, float %bs, i64 0\n  %b = shufflevector <4 x float> %i, <4 x float> poison, <4 x i32> zeroinitializer\n  %r = call <4 x float> @llvm.minimum(<4 x float> %a, <4 x float> %b)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <4 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <4 x float> %i, <4 x float> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x float> @llvm.minimum.v4f32(<4 x float> %a, <4 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "minimum",
  "ty": "<4 x float>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov v1.4s, #7.00000000\nfmin v0.4s, v0.4s, v1.4s\nret",
  "giasm": "fmov v1.4s, #7.00000000\nfmin v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a) {\n  %r = call <4 x float> @llvm.minimum(<4 x float> %a, <4 x float> splat (float 7.0))\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x float> @llvm.minimum.v4f32(<4 x float> %a, <4 x float> splat (float 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "minimum",
  "ty": "<8 x float>",
  "variant": "binop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmin v1.4s, v1.4s, v3.4s\nfmin v0.4s, v0.4s, v2.4s\nret",
  "giasm": "fmin v0.4s, v0.4s, v2.4s\nfmin v1.4s, v1.4s, v3.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, <8 x float> %b) {\n  %r = call <8 x float> @llvm.minimum(<8 x float> %a, <8 x float> %b)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x float> @llvm.minimum.v8f32(<8 x float> %a, <8 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "minimum",
  "ty": "<8 x float>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfmin v0.4s, v0.4s, v2.4s\nfmin v1.4s, v1.4s, v2.4s\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfmin v0.4s, v0.4s, v2.4s\nfmin v1.4s, v1.4s, v2.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a) {\n  %r = call <8 x float> @llvm.minimum(<8 x float> %a, <8 x float> <float 7.0, float 6.0, float 7.0, float 6.0, float 7.0, float 6.0, float 7.0, float 6.0>)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x float> @llvm.minimum.v8f32(<8 x float> %a, <8 x float> <float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "minimum",
  "ty": "<8 x float>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 6,
  "lat": 6,
  "sizelat": 6,
  "size": 3,
  "gisize": 4,
  "extrasize": 0,
  "asm": "dup v2.4s, v2.s[0]\nfmin v0.4s, v0.4s, v2.4s\nfmin v1.4s, v1.4s, v2.4s\nret",
  "giasm": "dup v3.4s, v2.s[0]\ndup v2.4s, v2.s[0]\nfmin v0.4s, v0.4s, v3.4s\nfmin v1.4s, v1.4s, v2.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, float %bs) {\n  %i = insertelement <8 x float> poison, float %bs, i64 0\n  %b = shufflevector <8 x float> %i, <8 x float> poison, <8 x i32> zeroinitializer\n  %r = call <8 x float> @llvm.minimum(<8 x float> %a, <8 x float> %b)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <8 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <8 x float> %i, <8 x float> poison, <8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x float> @llvm.minimum.v8f32(<8 x float> %a, <8 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "minimum",
  "ty": "<8 x float>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fmov v2.4s, #7.00000000\nfmin v0.4s, v0.4s, v2.4s\nfmin v1.4s, v1.4s, v2.4s\nret",
  "giasm": "fmov v2.4s, #7.00000000\nfmin v0.4s, v0.4s, v2.4s\nfmin v1.4s, v1.4s, v2.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a) {\n  %r = call <8 x float> @llvm.minimum(<8 x float> %a, <8 x float> splat (float 7.0))\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x float> @llvm.minimum.v8f32(<8 x float> %a, <8 x float> splat (float 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "minimum",
  "ty": "<2 x double>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmin v0.2d, v0.2d, v1.2d\nret",
  "giasm": "fmin v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, <2 x double> %b) {\n  %r = call <2 x double> @llvm.minimum(<2 x double> %a, <2 x double> %b)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x double> @llvm.minimum.v2f64(<2 x double> %a, <2 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "minimum",
  "ty": "<2 x double>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfmin v0.2d, v0.2d, v1.2d\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfmin v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a) {\n  %r = call <2 x double> @llvm.minimum(<2 x double> %a, <2 x double> <double 7.0, double 6.0>)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x double> @llvm.minimum.v2f64(<2 x double> %a, <2 x double> <double 7.000000e+00, double 6.000000e+00>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "minimum",
  "ty": "<2 x double>",
  "variant": "binopsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "dup v1.2d, v1.d[0]\nfmin v0.2d, v0.2d, v1.2d\nret",
  "giasm": "dup v1.2d, v1.d[0]\nfmin v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, double %bs) {\n  %i = insertelement <2 x double> poison, double %bs, i64 0\n  %b = shufflevector <2 x double> %i, <2 x double> poison, <2 x i32> zeroinitializer\n  %r = call <2 x double> @llvm.minimum(<2 x double> %a, <2 x double> %b)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <2 x double> poison, double %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <2 x double> %i, <2 x double> poison, <2 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x double> @llvm.minimum.v2f64(<2 x double> %a, <2 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "minimum",
  "ty": "<2 x double>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov v1.2d, #7.00000000\nfmin v0.2d, v0.2d, v1.2d\nret",
  "giasm": "fmov v1.2d, #7.00000000\nfmin v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a) {\n  %r = call <2 x double> @llvm.minimum(<2 x double> %a, <2 x double> splat (double 7.0))\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x double> @llvm.minimum.v2f64(<2 x double> %a, <2 x double> splat (double 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "minimum",
  "ty": "<4 x double>",
  "variant": "binop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmin v1.2d, v1.2d, v3.2d\nfmin v0.2d, v0.2d, v2.2d\nret",
  "giasm": "fmin v0.2d, v0.2d, v2.2d\nfmin v1.2d, v1.2d, v3.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, <4 x double> %b) {\n  %r = call <4 x double> @llvm.minimum(<4 x double> %a, <4 x double> %b)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x double> @llvm.minimum.v4f64(<4 x double> %a, <4 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "minimum",
  "ty": "<4 x double>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfmin v0.2d, v0.2d, v2.2d\nfmin v1.2d, v1.2d, v2.2d\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfmin v0.2d, v0.2d, v2.2d\nfmin v1.2d, v1.2d, v2.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a) {\n  %r = call <4 x double> @llvm.minimum(<4 x double> %a, <4 x double> <double 7.0, double 6.0, double 7.0, double 6.0>)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x double> @llvm.minimum.v4f64(<4 x double> %a, <4 x double> <double 7.000000e+00, double 6.000000e+00, double 7.000000e+00, double 6.000000e+00>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "minimum",
  "ty": "<4 x double>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 6,
  "lat": 6,
  "sizelat": 6,
  "size": 3,
  "gisize": 4,
  "extrasize": 0,
  "asm": "dup v2.2d, v2.d[0]\nfmin v0.2d, v0.2d, v2.2d\nfmin v1.2d, v1.2d, v2.2d\nret",
  "giasm": "dup v3.2d, v2.d[0]\ndup v2.2d, v2.d[0]\nfmin v0.2d, v0.2d, v3.2d\nfmin v1.2d, v1.2d, v2.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, double %bs) {\n  %i = insertelement <4 x double> poison, double %bs, i64 0\n  %b = shufflevector <4 x double> %i, <4 x double> poison, <4 x i32> zeroinitializer\n  %r = call <4 x double> @llvm.minimum(<4 x double> %a, <4 x double> %b)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <4 x double> poison, double %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <4 x double> %i, <4 x double> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x double> @llvm.minimum.v4f64(<4 x double> %a, <4 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "minimum",
  "ty": "<4 x double>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fmov v2.2d, #7.00000000\nfmin v0.2d, v0.2d, v2.2d\nfmin v1.2d, v1.2d, v2.2d\nret",
  "giasm": "fmov v2.2d, #7.00000000\nfmin v0.2d, v0.2d, v2.2d\nfmin v1.2d, v1.2d, v2.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a) {\n  %r = call <4 x double> @llvm.minimum(<4 x double> %a, <4 x double> splat (double 7.0))\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x double> @llvm.minimum.v4f64(<4 x double> %a, <4 x double> splat (double 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "minimum",
  "ty": "<vscale x 4 x half>",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.s\nfmin z0.h, p0/m, z0.h, z1.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x half> (<vscale x 4 x half>, <vscale x 4 x half>) (in function: test)",
  "ll": "define <vscale x 4 x half> @test(<vscale x 4 x half> %a, <vscale x 4 x half> %b) {\n  %r = call <vscale x 4 x half> @llvm.minimum(<vscale x 4 x half> %a, <vscale x 4 x half> %b)\n  ret <vscale x 4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 4 x half> @llvm.minimum.nxv4f16(<vscale x 4 x half> %a, <vscale x 4 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x half> %r"
 },
 {
  "instr": "minimum",
  "ty": "<vscale x 4 x half>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.s\nmov z1.h, h1\nfmin z0.h, p0/m, z0.h, z1.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x half> (<vscale x 4 x half>, half) (in function: test)",
  "ll": "define <vscale x 4 x half> @test(<vscale x 4 x half> %a, half %bs) {\n  %i = insertelement <vscale x 4 x half> poison, half %bs, i64 0\n  %b = shufflevector <vscale x 4 x half> %i, <vscale x 4 x half> poison, <vscale x 4 x i32> zeroinitializer\n  %r = call <vscale x 4 x half> @llvm.minimum(<vscale x 4 x half> %a, <vscale x 4 x half> %b)\n  ret <vscale x 4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 4 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <vscale x 4 x half> %i, <vscale x 4 x half> poison, <vscale x 4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 4 x half> @llvm.minimum.nxv4f16(<vscale x 4 x half> %a, <vscale x 4 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x half> %r"
 },
 {
  "instr": "minimum",
  "ty": "<vscale x 4 x half>",
  "variant": "binopconstsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "fmov z1.h, #7.00000000\nptrue p0.s\nfmin z0.h, p0/m, z0.h, z1.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x half> (<vscale x 4 x half>) (in function: test)",
  "ll": "define <vscale x 4 x half> @test(<vscale x 4 x half> %a) {\n  %r = call <vscale x 4 x half> @llvm.minimum(<vscale x 4 x half> %a, <vscale x 4 x half> splat (half 7.0))\n  ret <vscale x 4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 4 x half> @llvm.minimum.nxv4f16(<vscale x 4 x half> %a, <vscale x 4 x half> splat (half 0xH4700))\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x half> %r"
 },
 {
  "instr": "minimum",
  "ty": "<vscale x 8 x half>",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.h\nfmin z0.h, p0/m, z0.h, z1.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x half> (<vscale x 8 x half>, <vscale x 8 x half>) (in function: test)",
  "ll": "define <vscale x 8 x half> @test(<vscale x 8 x half> %a, <vscale x 8 x half> %b) {\n  %r = call <vscale x 8 x half> @llvm.minimum(<vscale x 8 x half> %a, <vscale x 8 x half> %b)\n  ret <vscale x 8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 8 x half> @llvm.minimum.nxv8f16(<vscale x 8 x half> %a, <vscale x 8 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x half> %r"
 },
 {
  "instr": "minimum",
  "ty": "<vscale x 8 x half>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.h\nmov z1.h, h1\nfmin z0.h, p0/m, z0.h, z1.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x half> (<vscale x 8 x half>, half) (in function: test)",
  "ll": "define <vscale x 8 x half> @test(<vscale x 8 x half> %a, half %bs) {\n  %i = insertelement <vscale x 8 x half> poison, half %bs, i64 0\n  %b = shufflevector <vscale x 8 x half> %i, <vscale x 8 x half> poison, <vscale x 8 x i32> zeroinitializer\n  %r = call <vscale x 8 x half> @llvm.minimum(<vscale x 8 x half> %a, <vscale x 8 x half> %b)\n  ret <vscale x 8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 8 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <vscale x 8 x half> %i, <vscale x 8 x half> poison, <vscale x 8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 8 x half> @llvm.minimum.nxv8f16(<vscale x 8 x half> %a, <vscale x 8 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x half> %r"
 },
 {
  "instr": "minimum",
  "ty": "<vscale x 8 x half>",
  "variant": "binopconstsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "fmov z1.h, #7.00000000\nptrue p0.h\nfmin z0.h, p0/m, z0.h, z1.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x half> (<vscale x 8 x half>) (in function: test)",
  "ll": "define <vscale x 8 x half> @test(<vscale x 8 x half> %a) {\n  %r = call <vscale x 8 x half> @llvm.minimum(<vscale x 8 x half> %a, <vscale x 8 x half> splat (half 7.0))\n  ret <vscale x 8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 8 x half> @llvm.minimum.nxv8f16(<vscale x 8 x half> %a, <vscale x 8 x half> splat (half 0xH4700))\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x half> %r"
 },
 {
  "instr": "minimum",
  "ty": "<vscale x 16 x half>",
  "variant": "binop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.h\nfmin z0.h, p0/m, z0.h, z2.h\nfmin z1.h, p0/m, z1.h, z3.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 16 x half> (<vscale x 16 x half>, <vscale x 16 x half>) (in function: test)",
  "ll": "define <vscale x 16 x half> @test(<vscale x 16 x half> %a, <vscale x 16 x half> %b) {\n  %r = call <vscale x 16 x half> @llvm.minimum(<vscale x 16 x half> %a, <vscale x 16 x half> %b)\n  ret <vscale x 16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <vscale x 16 x half> @llvm.minimum.nxv16f16(<vscale x 16 x half> %a, <vscale x 16 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 16 x half> %r"
 },
 {
  "instr": "minimum",
  "ty": "<vscale x 16 x half>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 6,
  "lat": 6,
  "sizelat": 6,
  "size": 3,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.h\nmov z2.h, h2\nfmin z0.h, p0/m, z0.h, z2.h\nfmin z1.h, p0/m, z1.h, z2.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 16 x half> (<vscale x 16 x half>, half) (in function: test)",
  "ll": "define <vscale x 16 x half> @test(<vscale x 16 x half> %a, half %bs) {\n  %i = insertelement <vscale x 16 x half> poison, half %bs, i64 0\n  %b = shufflevector <vscale x 16 x half> %i, <vscale x 16 x half> poison, <vscale x 16 x i32> zeroinitializer\n  %r = call <vscale x 16 x half> @llvm.minimum(<vscale x 16 x half> %a, <vscale x 16 x half> %b)\n  ret <vscale x 16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 16 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <vscale x 16 x half> %i, <vscale x 16 x half> poison, <vscale x 16 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <vscale x 16 x half> @llvm.minimum.nxv16f16(<vscale x 16 x half> %a, <vscale x 16 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 16 x half> %r"
 },
 {
  "instr": "minimum",
  "ty": "<vscale x 16 x half>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 3,
  "gisize": -1,
  "extrasize": 0,
  "asm": "fmov z2.h, #7.00000000\nptrue p0.h\nfmin z0.h, p0/m, z0.h, z2.h\nfmin z1.h, p0/m, z1.h, z2.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 16 x half> (<vscale x 16 x half>) (in function: test)",
  "ll": "define <vscale x 16 x half> @test(<vscale x 16 x half> %a) {\n  %r = call <vscale x 16 x half> @llvm.minimum(<vscale x 16 x half> %a, <vscale x 16 x half> splat (half 7.0))\n  ret <vscale x 16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <vscale x 16 x half> @llvm.minimum.nxv16f16(<vscale x 16 x half> %a, <vscale x 16 x half> splat (half 0xH4700))\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 16 x half> %r"
 },
 {
  "instr": "minimum",
  "ty": "<vscale x 2 x float>",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.d\nfmin z0.s, p0/m, z0.s, z1.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x float> (<vscale x 2 x float>, <vscale x 2 x float>) (in function: test)",
  "ll": "define <vscale x 2 x float> @test(<vscale x 2 x float> %a, <vscale x 2 x float> %b) {\n  %r = call <vscale x 2 x float> @llvm.minimum(<vscale x 2 x float> %a, <vscale x 2 x float> %b)\n  ret <vscale x 2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 2 x float> @llvm.minimum.nxv2f32(<vscale x 2 x float> %a, <vscale x 2 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x float> %r"
 },
 {
  "instr": "minimum",
  "ty": "<vscale x 2 x float>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.d\nmov z1.s, s1\nfmin z0.s, p0/m, z0.s, z1.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x float> (<vscale x 2 x float>, float) (in function: test)",
  "ll": "define <vscale x 2 x float> @test(<vscale x 2 x float> %a, float %bs) {\n  %i = insertelement <vscale x 2 x float> poison, float %bs, i64 0\n  %b = shufflevector <vscale x 2 x float> %i, <vscale x 2 x float> poison, <vscale x 2 x i32> zeroinitializer\n  %r = call <vscale x 2 x float> @llvm.minimum(<vscale x 2 x float> %a, <vscale x 2 x float> %b)\n  ret <vscale x 2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 2 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <vscale x 2 x float> %i, <vscale x 2 x float> poison, <vscale x 2 x i32> zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 2 x float> @llvm.minimum.nxv2f32(<vscale x 2 x float> %a, <vscale x 2 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x float> %r"
 },
 {
  "instr": "minimum",
  "ty": "<vscale x 2 x float>",
  "variant": "binopconstsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "fmov z1.s, #7.00000000\nptrue p0.d\nfmin z0.s, p0/m, z0.s, z1.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x float> (<vscale x 2 x float>) (in function: test)",
  "ll": "define <vscale x 2 x float> @test(<vscale x 2 x float> %a) {\n  %r = call <vscale x 2 x float> @llvm.minimum(<vscale x 2 x float> %a, <vscale x 2 x float> splat (float 7.0))\n  ret <vscale x 2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 2 x float> @llvm.minimum.nxv2f32(<vscale x 2 x float> %a, <vscale x 2 x float> splat (float 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x float> %r"
 },
 {
  "instr": "minimum",
  "ty": "<vscale x 4 x float>",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.s\nfmin z0.s, p0/m, z0.s, z1.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x float> (<vscale x 4 x float>, <vscale x 4 x float>) (in function: test)",
  "ll": "define <vscale x 4 x float> @test(<vscale x 4 x float> %a, <vscale x 4 x float> %b) {\n  %r = call <vscale x 4 x float> @llvm.minimum(<vscale x 4 x float> %a, <vscale x 4 x float> %b)\n  ret <vscale x 4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 4 x float> @llvm.minimum.nxv4f32(<vscale x 4 x float> %a, <vscale x 4 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x float> %r"
 },
 {
  "instr": "minimum",
  "ty": "<vscale x 4 x float>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.s\nmov z1.s, s1\nfmin z0.s, p0/m, z0.s, z1.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x float> (<vscale x 4 x float>, float) (in function: test)",
  "ll": "define <vscale x 4 x float> @test(<vscale x 4 x float> %a, float %bs) {\n  %i = insertelement <vscale x 4 x float> poison, float %bs, i64 0\n  %b = shufflevector <vscale x 4 x float> %i, <vscale x 4 x float> poison, <vscale x 4 x i32> zeroinitializer\n  %r = call <vscale x 4 x float> @llvm.minimum(<vscale x 4 x float> %a, <vscale x 4 x float> %b)\n  ret <vscale x 4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 4 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <vscale x 4 x float> %i, <vscale x 4 x float> poison, <vscale x 4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 4 x float> @llvm.minimum.nxv4f32(<vscale x 4 x float> %a, <vscale x 4 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x float> %r"
 },
 {
  "instr": "minimum",
  "ty": "<vscale x 4 x float>",
  "variant": "binopconstsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "fmov z1.s, #7.00000000\nptrue p0.s\nfmin z0.s, p0/m, z0.s, z1.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x float> (<vscale x 4 x float>) (in function: test)",
  "ll": "define <vscale x 4 x float> @test(<vscale x 4 x float> %a) {\n  %r = call <vscale x 4 x float> @llvm.minimum(<vscale x 4 x float> %a, <vscale x 4 x float> splat (float 7.0))\n  ret <vscale x 4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 4 x float> @llvm.minimum.nxv4f32(<vscale x 4 x float> %a, <vscale x 4 x float> splat (float 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x float> %r"
 },
 {
  "instr": "minimum",
  "ty": "<vscale x 8 x float>",
  "variant": "binop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.s\nfmin z0.s, p0/m, z0.s, z2.s\nfmin z1.s, p0/m, z1.s, z3.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x float> (<vscale x 8 x float>, <vscale x 8 x float>) (in function: test)",
  "ll": "define <vscale x 8 x float> @test(<vscale x 8 x float> %a, <vscale x 8 x float> %b) {\n  %r = call <vscale x 8 x float> @llvm.minimum(<vscale x 8 x float> %a, <vscale x 8 x float> %b)\n  ret <vscale x 8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <vscale x 8 x float> @llvm.minimum.nxv8f32(<vscale x 8 x float> %a, <vscale x 8 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x float> %r"
 },
 {
  "instr": "minimum",
  "ty": "<vscale x 8 x float>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 6,
  "lat": 6,
  "sizelat": 6,
  "size": 3,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.s\nmov z2.s, s2\nfmin z0.s, p0/m, z0.s, z2.s\nfmin z1.s, p0/m, z1.s, z2.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x float> (<vscale x 8 x float>, float) (in function: test)",
  "ll": "define <vscale x 8 x float> @test(<vscale x 8 x float> %a, float %bs) {\n  %i = insertelement <vscale x 8 x float> poison, float %bs, i64 0\n  %b = shufflevector <vscale x 8 x float> %i, <vscale x 8 x float> poison, <vscale x 8 x i32> zeroinitializer\n  %r = call <vscale x 8 x float> @llvm.minimum(<vscale x 8 x float> %a, <vscale x 8 x float> %b)\n  ret <vscale x 8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 8 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <vscale x 8 x float> %i, <vscale x 8 x float> poison, <vscale x 8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <vscale x 8 x float> @llvm.minimum.nxv8f32(<vscale x 8 x float> %a, <vscale x 8 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x float> %r"
 },
 {
  "instr": "minimum",
  "ty": "<vscale x 8 x float>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 3,
  "gisize": -1,
  "extrasize": 0,
  "asm": "fmov z2.s, #7.00000000\nptrue p0.s\nfmin z0.s, p0/m, z0.s, z2.s\nfmin z1.s, p0/m, z1.s, z2.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x float> (<vscale x 8 x float>) (in function: test)",
  "ll": "define <vscale x 8 x float> @test(<vscale x 8 x float> %a) {\n  %r = call <vscale x 8 x float> @llvm.minimum(<vscale x 8 x float> %a, <vscale x 8 x float> splat (float 7.0))\n  ret <vscale x 8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <vscale x 8 x float> @llvm.minimum.nxv8f32(<vscale x 8 x float> %a, <vscale x 8 x float> splat (float 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x float> %r"
 },
 {
  "instr": "minimum",
  "ty": "<vscale x 2 x double>",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.d\nfmin z0.d, p0/m, z0.d, z1.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x double> (<vscale x 2 x double>, <vscale x 2 x double>) (in function: test)",
  "ll": "define <vscale x 2 x double> @test(<vscale x 2 x double> %a, <vscale x 2 x double> %b) {\n  %r = call <vscale x 2 x double> @llvm.minimum(<vscale x 2 x double> %a, <vscale x 2 x double> %b)\n  ret <vscale x 2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 2 x double> @llvm.minimum.nxv2f64(<vscale x 2 x double> %a, <vscale x 2 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x double> %r"
 },
 {
  "instr": "minimum",
  "ty": "<vscale x 2 x double>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.d\nmov z1.d, d1\nfmin z0.d, p0/m, z0.d, z1.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x double> (<vscale x 2 x double>, double) (in function: test)",
  "ll": "define <vscale x 2 x double> @test(<vscale x 2 x double> %a, double %bs) {\n  %i = insertelement <vscale x 2 x double> poison, double %bs, i64 0\n  %b = shufflevector <vscale x 2 x double> %i, <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer\n  %r = call <vscale x 2 x double> @llvm.minimum(<vscale x 2 x double> %a, <vscale x 2 x double> %b)\n  ret <vscale x 2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 2 x double> poison, double %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <vscale x 2 x double> %i, <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 2 x double> @llvm.minimum.nxv2f64(<vscale x 2 x double> %a, <vscale x 2 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x double> %r"
 },
 {
  "instr": "minimum",
  "ty": "<vscale x 2 x double>",
  "variant": "binopconstsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "fmov z1.d, #7.00000000\nptrue p0.d\nfmin z0.d, p0/m, z0.d, z1.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x double> (<vscale x 2 x double>) (in function: test)",
  "ll": "define <vscale x 2 x double> @test(<vscale x 2 x double> %a) {\n  %r = call <vscale x 2 x double> @llvm.minimum(<vscale x 2 x double> %a, <vscale x 2 x double> splat (double 7.0))\n  ret <vscale x 2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 2 x double> @llvm.minimum.nxv2f64(<vscale x 2 x double> %a, <vscale x 2 x double> splat (double 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x double> %r"
 },
 {
  "instr": "minimum",
  "ty": "<vscale x 4 x double>",
  "variant": "binop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.d\nfmin z0.d, p0/m, z0.d, z2.d\nfmin z1.d, p0/m, z1.d, z3.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x double> (<vscale x 4 x double>, <vscale x 4 x double>) (in function: test)",
  "ll": "define <vscale x 4 x double> @test(<vscale x 4 x double> %a, <vscale x 4 x double> %b) {\n  %r = call <vscale x 4 x double> @llvm.minimum(<vscale x 4 x double> %a, <vscale x 4 x double> %b)\n  ret <vscale x 4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <vscale x 4 x double> @llvm.minimum.nxv4f64(<vscale x 4 x double> %a, <vscale x 4 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x double> %r"
 },
 {
  "instr": "minimum",
  "ty": "<vscale x 4 x double>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 6,
  "lat": 6,
  "sizelat": 6,
  "size": 3,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.d\nmov z2.d, d2\nfmin z0.d, p0/m, z0.d, z2.d\nfmin z1.d, p0/m, z1.d, z2.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x double> (<vscale x 4 x double>, double) (in function: test)",
  "ll": "define <vscale x 4 x double> @test(<vscale x 4 x double> %a, double %bs) {\n  %i = insertelement <vscale x 4 x double> poison, double %bs, i64 0\n  %b = shufflevector <vscale x 4 x double> %i, <vscale x 4 x double> poison, <vscale x 4 x i32> zeroinitializer\n  %r = call <vscale x 4 x double> @llvm.minimum(<vscale x 4 x double> %a, <vscale x 4 x double> %b)\n  ret <vscale x 4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 4 x double> poison, double %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <vscale x 4 x double> %i, <vscale x 4 x double> poison, <vscale x 4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <vscale x 4 x double> @llvm.minimum.nxv4f64(<vscale x 4 x double> %a, <vscale x 4 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x double> %r"
 },
 {
  "instr": "minimum",
  "ty": "<vscale x 4 x double>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 3,
  "gisize": -1,
  "extrasize": 0,
  "asm": "fmov z2.d, #7.00000000\nptrue p0.d\nfmin z0.d, p0/m, z0.d, z2.d\nfmin z1.d, p0/m, z1.d, z2.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x double> (<vscale x 4 x double>) (in function: test)",
  "ll": "define <vscale x 4 x double> @test(<vscale x 4 x double> %a) {\n  %r = call <vscale x 4 x double> @llvm.minimum(<vscale x 4 x double> %a, <vscale x 4 x double> splat (double 7.0))\n  ret <vscale x 4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <vscale x 4 x double> @llvm.minimum.nxv4f64(<vscale x 4 x double> %a, <vscale x 4 x double> splat (double 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x double> %r"
 },
 {
  "instr": "maximum",
  "ty": "half",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmax h0, h0, h1\nret",
  "giasm": "fmax h0, h0, h1\nret",
  "ll": "define half @test(half %a, half %b) {\n  %r = call half @llvm.maximum(half %a, half %b)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call half @llvm.maximum.f16(half %a, half %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "maximum",
  "ty": "half",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov h1, #7.00000000\nfmax h0, h0, h1\nret",
  "giasm": "fmov h1, #7.00000000\nfmax h0, h0, h1\nret",
  "ll": "define half @test(half %a) {\n  %r = call half @llvm.maximum(half %a, half 7.0)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call half @llvm.maximum.f16(half %a, half 0xH4700)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "maximum",
  "ty": "float",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmax s0, s0, s1\nret",
  "giasm": "fmax s0, s0, s1\nret",
  "ll": "define float @test(float %a, float %b) {\n  %r = call float @llvm.maximum(float %a, float %b)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call float @llvm.maximum.f32(float %a, float %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "maximum",
  "ty": "float",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov s1, #7.00000000\nfmax s0, s0, s1\nret",
  "giasm": "fmov s1, #7.00000000\nfmax s0, s0, s1\nret",
  "ll": "define float @test(float %a) {\n  %r = call float @llvm.maximum(float %a, float 7.0)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call float @llvm.maximum.f32(float %a, float 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "maximum",
  "ty": "double",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmax d0, d0, d1\nret",
  "giasm": "fmax d0, d0, d1\nret",
  "ll": "define double @test(double %a, double %b) {\n  %r = call double @llvm.maximum(double %a, double %b)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call double @llvm.maximum.f64(double %a, double %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "maximum",
  "ty": "double",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov d1, #7.00000000\nfmax d0, d0, d1\nret",
  "giasm": "fmov d1, #7.00000000\nfmax d0, d0, d1\nret",
  "ll": "define double @test(double %a) {\n  %r = call double @llvm.maximum(double %a, double 7.0)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call double @llvm.maximum.f64(double %a, double 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "maximum",
  "ty": "<4 x half>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmax v0.4h, v0.4h, v1.4h\nret",
  "giasm": "fmax v0.4h, v0.4h, v1.4h\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, <4 x half> %b) {\n  %r = call <4 x half> @llvm.maximum(<4 x half> %a, <4 x half> %b)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x half> @llvm.maximum.v4f16(<4 x half> %a, <4 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "maximum",
  "ty": "<4 x half>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr d1, [x8, :lo12:.LCPI0_0]\nfmax v0.4h, v0.4h, v1.4h\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr d1, [x8, :lo12:.LCPI0_0]\nfmax v0.4h, v0.4h, v1.4h\nret",
  "ll": "define <4 x half> @test(<4 x half> %a) {\n  %r = call <4 x half> @llvm.maximum(<4 x half> %a, <4 x half> <half 7.0, half 6.0, half 7.0, half 6.0>)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x half> @llvm.maximum.v4f16(<4 x half> %a, <4 x half> <half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "maximum",
  "ty": "<4 x half>",
  "variant": "binopsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "dup v1.4h, v1.h[0]\nfmax v0.4h, v0.4h, v1.4h\nret",
  "giasm": "dup v1.4h, v1.h[0]\nfmax v0.4h, v0.4h, v1.4h\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, half %bs) {\n  %i = insertelement <4 x half> poison, half %bs, i64 0\n  %b = shufflevector <4 x half> %i, <4 x half> poison, <4 x i32> zeroinitializer\n  %r = call <4 x half> @llvm.maximum(<4 x half> %a, <4 x half> %b)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <4 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <4 x half> %i, <4 x half> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x half> @llvm.maximum.v4f16(<4 x half> %a, <4 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "maximum",
  "ty": "<4 x half>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "movi v1.4h, #71, lsl #8\nfmax v0.4h, v0.4h, v1.4h\nret",
  "giasm": "movi v1.4h, #71, lsl #8\nfmax v0.4h, v0.4h, v1.4h\nret",
  "ll": "define <4 x half> @test(<4 x half> %a) {\n  %r = call <4 x half> @llvm.maximum(<4 x half> %a, <4 x half> splat (half 7.0))\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x half> @llvm.maximum.v4f16(<4 x half> %a, <4 x half> splat (half 0xH4700))\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "maximum",
  "ty": "<8 x half>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmax v0.8h, v0.8h, v1.8h\nret",
  "giasm": "fmax v0.8h, v0.8h, v1.8h\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, <8 x half> %b) {\n  %r = call <8 x half> @llvm.maximum(<8 x half> %a, <8 x half> %b)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <8 x half> @llvm.maximum.v8f16(<8 x half> %a, <8 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "maximum",
  "ty": "<8 x half>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfmax v0.8h, v0.8h, v1.8h\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfmax v0.8h, v0.8h, v1.8h\nret",
  "ll": "define <8 x half> @test(<8 x half> %a) {\n  %r = call <8 x half> @llvm.maximum(<8 x half> %a, <8 x half> <half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0>)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <8 x half> @llvm.maximum.v8f16(<8 x half> %a, <8 x half> <half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "maximum",
  "ty": "<8 x half>",
  "variant": "binopsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "dup v1.8h, v1.h[0]\nfmax v0.8h, v0.8h, v1.8h\nret",
  "giasm": "dup v1.8h, v1.h[0]\nfmax v0.8h, v0.8h, v1.8h\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, half %bs) {\n  %i = insertelement <8 x half> poison, half %bs, i64 0\n  %b = shufflevector <8 x half> %i, <8 x half> poison, <8 x i32> zeroinitializer\n  %r = call <8 x half> @llvm.maximum(<8 x half> %a, <8 x half> %b)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <8 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <8 x half> %i, <8 x half> poison, <8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <8 x half> @llvm.maximum.v8f16(<8 x half> %a, <8 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "maximum",
  "ty": "<8 x half>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "movi v1.8h, #71, lsl #8\nfmax v0.8h, v0.8h, v1.8h\nret",
  "giasm": "movi v1.8h, #71, lsl #8\nfmax v0.8h, v0.8h, v1.8h\nret",
  "ll": "define <8 x half> @test(<8 x half> %a) {\n  %r = call <8 x half> @llvm.maximum(<8 x half> %a, <8 x half> splat (half 7.0))\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <8 x half> @llvm.maximum.v8f16(<8 x half> %a, <8 x half> splat (half 0xH4700))\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "maximum",
  "ty": "<16 x half>",
  "variant": "binop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmax v1.8h, v1.8h, v3.8h\nfmax v0.8h, v0.8h, v2.8h\nret",
  "giasm": "fmax v0.8h, v0.8h, v2.8h\nfmax v1.8h, v1.8h, v3.8h\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, <16 x half> %b) {\n  %r = call <16 x half> @llvm.maximum(<16 x half> %a, <16 x half> %b)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <16 x half> @llvm.maximum.v16f16(<16 x half> %a, <16 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "maximum",
  "ty": "<16 x half>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfmax v0.8h, v0.8h, v2.8h\nfmax v1.8h, v1.8h, v2.8h\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfmax v0.8h, v0.8h, v2.8h\nfmax v1.8h, v1.8h, v2.8h\nret",
  "ll": "define <16 x half> @test(<16 x half> %a) {\n  %r = call <16 x half> @llvm.maximum(<16 x half> %a, <16 x half> <half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0>)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <16 x half> @llvm.maximum.v16f16(<16 x half> %a, <16 x half> <half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "maximum",
  "ty": "<16 x half>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 6,
  "lat": 6,
  "sizelat": 6,
  "size": 3,
  "gisize": 4,
  "extrasize": 0,
  "asm": "dup v2.8h, v2.h[0]\nfmax v0.8h, v0.8h, v2.8h\nfmax v1.8h, v1.8h, v2.8h\nret",
  "giasm": "dup v3.8h, v2.h[0]\ndup v2.8h, v2.h[0]\nfmax v0.8h, v0.8h, v3.8h\nfmax v1.8h, v1.8h, v2.8h\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, half %bs) {\n  %i = insertelement <16 x half> poison, half %bs, i64 0\n  %b = shufflevector <16 x half> %i, <16 x half> poison, <16 x i32> zeroinitializer\n  %r = call <16 x half> @llvm.maximum(<16 x half> %a, <16 x half> %b)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <16 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <16 x half> %i, <16 x half> poison, <16 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <16 x half> @llvm.maximum.v16f16(<16 x half> %a, <16 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "maximum",
  "ty": "<16 x half>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "movi v2.8h, #71, lsl #8\nfmax v0.8h, v0.8h, v2.8h\nfmax v1.8h, v1.8h, v2.8h\nret",
  "giasm": "movi v2.8h, #71, lsl #8\nfmax v0.8h, v0.8h, v2.8h\nfmax v1.8h, v1.8h, v2.8h\nret",
  "ll": "define <16 x half> @test(<16 x half> %a) {\n  %r = call <16 x half> @llvm.maximum(<16 x half> %a, <16 x half> splat (half 7.0))\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <16 x half> @llvm.maximum.v16f16(<16 x half> %a, <16 x half> splat (half 0xH4700))\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "maximum",
  "ty": "<2 x float>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmax v0.2s, v0.2s, v1.2s\nret",
  "giasm": "fmax v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, <2 x float> %b) {\n  %r = call <2 x float> @llvm.maximum(<2 x float> %a, <2 x float> %b)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x float> @llvm.maximum.v2f32(<2 x float> %a, <2 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "maximum",
  "ty": "<2 x float>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr d1, [x8, :lo12:.LCPI0_0]\nfmax v0.2s, v0.2s, v1.2s\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr d1, [x8, :lo12:.LCPI0_0]\nfmax v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a) {\n  %r = call <2 x float> @llvm.maximum(<2 x float> %a, <2 x float> <float 7.0, float 6.0>)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x float> @llvm.maximum.v2f32(<2 x float> %a, <2 x float> <float 7.000000e+00, float 6.000000e+00>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "maximum",
  "ty": "<2 x float>",
  "variant": "binopsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "dup v1.2s, v1.s[0]\nfmax v0.2s, v0.2s, v1.2s\nret",
  "giasm": "dup v1.2s, v1.s[0]\nfmax v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, float %bs) {\n  %i = insertelement <2 x float> poison, float %bs, i64 0\n  %b = shufflevector <2 x float> %i, <2 x float> poison, <2 x i32> zeroinitializer\n  %r = call <2 x float> @llvm.maximum(<2 x float> %a, <2 x float> %b)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <2 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <2 x float> %i, <2 x float> poison, <2 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x float> @llvm.maximum.v2f32(<2 x float> %a, <2 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "maximum",
  "ty": "<2 x float>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov v1.2s, #7.00000000\nfmax v0.2s, v0.2s, v1.2s\nret",
  "giasm": "fmov v1.2s, #7.00000000\nfmax v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a) {\n  %r = call <2 x float> @llvm.maximum(<2 x float> %a, <2 x float> splat (float 7.0))\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x float> @llvm.maximum.v2f32(<2 x float> %a, <2 x float> splat (float 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "maximum",
  "ty": "<4 x float>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmax v0.4s, v0.4s, v1.4s\nret",
  "giasm": "fmax v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, <4 x float> %b) {\n  %r = call <4 x float> @llvm.maximum(<4 x float> %a, <4 x float> %b)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x float> @llvm.maximum.v4f32(<4 x float> %a, <4 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "maximum",
  "ty": "<4 x float>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfmax v0.4s, v0.4s, v1.4s\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfmax v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a) {\n  %r = call <4 x float> @llvm.maximum(<4 x float> %a, <4 x float> <float 7.0, float 6.0, float 7.0, float 6.0>)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x float> @llvm.maximum.v4f32(<4 x float> %a, <4 x float> <float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "maximum",
  "ty": "<4 x float>",
  "variant": "binopsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "dup v1.4s, v1.s[0]\nfmax v0.4s, v0.4s, v1.4s\nret",
  "giasm": "dup v1.4s, v1.s[0]\nfmax v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, float %bs) {\n  %i = insertelement <4 x float> poison, float %bs, i64 0\n  %b = shufflevector <4 x float> %i, <4 x float> poison, <4 x i32> zeroinitializer\n  %r = call <4 x float> @llvm.maximum(<4 x float> %a, <4 x float> %b)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <4 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <4 x float> %i, <4 x float> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x float> @llvm.maximum.v4f32(<4 x float> %a, <4 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "maximum",
  "ty": "<4 x float>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov v1.4s, #7.00000000\nfmax v0.4s, v0.4s, v1.4s\nret",
  "giasm": "fmov v1.4s, #7.00000000\nfmax v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a) {\n  %r = call <4 x float> @llvm.maximum(<4 x float> %a, <4 x float> splat (float 7.0))\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x float> @llvm.maximum.v4f32(<4 x float> %a, <4 x float> splat (float 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "maximum",
  "ty": "<8 x float>",
  "variant": "binop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmax v1.4s, v1.4s, v3.4s\nfmax v0.4s, v0.4s, v2.4s\nret",
  "giasm": "fmax v0.4s, v0.4s, v2.4s\nfmax v1.4s, v1.4s, v3.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, <8 x float> %b) {\n  %r = call <8 x float> @llvm.maximum(<8 x float> %a, <8 x float> %b)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x float> @llvm.maximum.v8f32(<8 x float> %a, <8 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "maximum",
  "ty": "<8 x float>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfmax v0.4s, v0.4s, v2.4s\nfmax v1.4s, v1.4s, v2.4s\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfmax v0.4s, v0.4s, v2.4s\nfmax v1.4s, v1.4s, v2.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a) {\n  %r = call <8 x float> @llvm.maximum(<8 x float> %a, <8 x float> <float 7.0, float 6.0, float 7.0, float 6.0, float 7.0, float 6.0, float 7.0, float 6.0>)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x float> @llvm.maximum.v8f32(<8 x float> %a, <8 x float> <float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "maximum",
  "ty": "<8 x float>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 6,
  "lat": 6,
  "sizelat": 6,
  "size": 3,
  "gisize": 4,
  "extrasize": 0,
  "asm": "dup v2.4s, v2.s[0]\nfmax v0.4s, v0.4s, v2.4s\nfmax v1.4s, v1.4s, v2.4s\nret",
  "giasm": "dup v3.4s, v2.s[0]\ndup v2.4s, v2.s[0]\nfmax v0.4s, v0.4s, v3.4s\nfmax v1.4s, v1.4s, v2.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, float %bs) {\n  %i = insertelement <8 x float> poison, float %bs, i64 0\n  %b = shufflevector <8 x float> %i, <8 x float> poison, <8 x i32> zeroinitializer\n  %r = call <8 x float> @llvm.maximum(<8 x float> %a, <8 x float> %b)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <8 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <8 x float> %i, <8 x float> poison, <8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x float> @llvm.maximum.v8f32(<8 x float> %a, <8 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "maximum",
  "ty": "<8 x float>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fmov v2.4s, #7.00000000\nfmax v0.4s, v0.4s, v2.4s\nfmax v1.4s, v1.4s, v2.4s\nret",
  "giasm": "fmov v2.4s, #7.00000000\nfmax v0.4s, v0.4s, v2.4s\nfmax v1.4s, v1.4s, v2.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a) {\n  %r = call <8 x float> @llvm.maximum(<8 x float> %a, <8 x float> splat (float 7.0))\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x float> @llvm.maximum.v8f32(<8 x float> %a, <8 x float> splat (float 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "maximum",
  "ty": "<2 x double>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmax v0.2d, v0.2d, v1.2d\nret",
  "giasm": "fmax v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, <2 x double> %b) {\n  %r = call <2 x double> @llvm.maximum(<2 x double> %a, <2 x double> %b)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x double> @llvm.maximum.v2f64(<2 x double> %a, <2 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "maximum",
  "ty": "<2 x double>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfmax v0.2d, v0.2d, v1.2d\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfmax v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a) {\n  %r = call <2 x double> @llvm.maximum(<2 x double> %a, <2 x double> <double 7.0, double 6.0>)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x double> @llvm.maximum.v2f64(<2 x double> %a, <2 x double> <double 7.000000e+00, double 6.000000e+00>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "maximum",
  "ty": "<2 x double>",
  "variant": "binopsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "dup v1.2d, v1.d[0]\nfmax v0.2d, v0.2d, v1.2d\nret",
  "giasm": "dup v1.2d, v1.d[0]\nfmax v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, double %bs) {\n  %i = insertelement <2 x double> poison, double %bs, i64 0\n  %b = shufflevector <2 x double> %i, <2 x double> poison, <2 x i32> zeroinitializer\n  %r = call <2 x double> @llvm.maximum(<2 x double> %a, <2 x double> %b)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <2 x double> poison, double %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <2 x double> %i, <2 x double> poison, <2 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x double> @llvm.maximum.v2f64(<2 x double> %a, <2 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "maximum",
  "ty": "<2 x double>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov v1.2d, #7.00000000\nfmax v0.2d, v0.2d, v1.2d\nret",
  "giasm": "fmov v1.2d, #7.00000000\nfmax v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a) {\n  %r = call <2 x double> @llvm.maximum(<2 x double> %a, <2 x double> splat (double 7.0))\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x double> @llvm.maximum.v2f64(<2 x double> %a, <2 x double> splat (double 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "maximum",
  "ty": "<4 x double>",
  "variant": "binop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmax v1.2d, v1.2d, v3.2d\nfmax v0.2d, v0.2d, v2.2d\nret",
  "giasm": "fmax v0.2d, v0.2d, v2.2d\nfmax v1.2d, v1.2d, v3.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, <4 x double> %b) {\n  %r = call <4 x double> @llvm.maximum(<4 x double> %a, <4 x double> %b)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x double> @llvm.maximum.v4f64(<4 x double> %a, <4 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "maximum",
  "ty": "<4 x double>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfmax v0.2d, v0.2d, v2.2d\nfmax v1.2d, v1.2d, v2.2d\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfmax v0.2d, v0.2d, v2.2d\nfmax v1.2d, v1.2d, v2.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a) {\n  %r = call <4 x double> @llvm.maximum(<4 x double> %a, <4 x double> <double 7.0, double 6.0, double 7.0, double 6.0>)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x double> @llvm.maximum.v4f64(<4 x double> %a, <4 x double> <double 7.000000e+00, double 6.000000e+00, double 7.000000e+00, double 6.000000e+00>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "maximum",
  "ty": "<4 x double>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 6,
  "lat": 6,
  "sizelat": 6,
  "size": 3,
  "gisize": 4,
  "extrasize": 0,
  "asm": "dup v2.2d, v2.d[0]\nfmax v0.2d, v0.2d, v2.2d\nfmax v1.2d, v1.2d, v2.2d\nret",
  "giasm": "dup v3.2d, v2.d[0]\ndup v2.2d, v2.d[0]\nfmax v0.2d, v0.2d, v3.2d\nfmax v1.2d, v1.2d, v2.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, double %bs) {\n  %i = insertelement <4 x double> poison, double %bs, i64 0\n  %b = shufflevector <4 x double> %i, <4 x double> poison, <4 x i32> zeroinitializer\n  %r = call <4 x double> @llvm.maximum(<4 x double> %a, <4 x double> %b)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <4 x double> poison, double %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <4 x double> %i, <4 x double> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x double> @llvm.maximum.v4f64(<4 x double> %a, <4 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "maximum",
  "ty": "<4 x double>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fmov v2.2d, #7.00000000\nfmax v0.2d, v0.2d, v2.2d\nfmax v1.2d, v1.2d, v2.2d\nret",
  "giasm": "fmov v2.2d, #7.00000000\nfmax v0.2d, v0.2d, v2.2d\nfmax v1.2d, v1.2d, v2.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a) {\n  %r = call <4 x double> @llvm.maximum(<4 x double> %a, <4 x double> splat (double 7.0))\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x double> @llvm.maximum.v4f64(<4 x double> %a, <4 x double> splat (double 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "maximum",
  "ty": "<vscale x 4 x half>",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.s\nfmax z0.h, p0/m, z0.h, z1.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x half> (<vscale x 4 x half>, <vscale x 4 x half>) (in function: test)",
  "ll": "define <vscale x 4 x half> @test(<vscale x 4 x half> %a, <vscale x 4 x half> %b) {\n  %r = call <vscale x 4 x half> @llvm.maximum(<vscale x 4 x half> %a, <vscale x 4 x half> %b)\n  ret <vscale x 4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 4 x half> @llvm.maximum.nxv4f16(<vscale x 4 x half> %a, <vscale x 4 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x half> %r"
 },
 {
  "instr": "maximum",
  "ty": "<vscale x 4 x half>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.s\nmov z1.h, h1\nfmax z0.h, p0/m, z0.h, z1.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x half> (<vscale x 4 x half>, half) (in function: test)",
  "ll": "define <vscale x 4 x half> @test(<vscale x 4 x half> %a, half %bs) {\n  %i = insertelement <vscale x 4 x half> poison, half %bs, i64 0\n  %b = shufflevector <vscale x 4 x half> %i, <vscale x 4 x half> poison, <vscale x 4 x i32> zeroinitializer\n  %r = call <vscale x 4 x half> @llvm.maximum(<vscale x 4 x half> %a, <vscale x 4 x half> %b)\n  ret <vscale x 4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 4 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <vscale x 4 x half> %i, <vscale x 4 x half> poison, <vscale x 4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 4 x half> @llvm.maximum.nxv4f16(<vscale x 4 x half> %a, <vscale x 4 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x half> %r"
 },
 {
  "instr": "maximum",
  "ty": "<vscale x 4 x half>",
  "variant": "binopconstsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "fmov z1.h, #7.00000000\nptrue p0.s\nfmax z0.h, p0/m, z0.h, z1.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x half> (<vscale x 4 x half>) (in function: test)",
  "ll": "define <vscale x 4 x half> @test(<vscale x 4 x half> %a) {\n  %r = call <vscale x 4 x half> @llvm.maximum(<vscale x 4 x half> %a, <vscale x 4 x half> splat (half 7.0))\n  ret <vscale x 4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 4 x half> @llvm.maximum.nxv4f16(<vscale x 4 x half> %a, <vscale x 4 x half> splat (half 0xH4700))\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x half> %r"
 },
 {
  "instr": "maximum",
  "ty": "<vscale x 8 x half>",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.h\nfmax z0.h, p0/m, z0.h, z1.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x half> (<vscale x 8 x half>, <vscale x 8 x half>) (in function: test)",
  "ll": "define <vscale x 8 x half> @test(<vscale x 8 x half> %a, <vscale x 8 x half> %b) {\n  %r = call <vscale x 8 x half> @llvm.maximum(<vscale x 8 x half> %a, <vscale x 8 x half> %b)\n  ret <vscale x 8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 8 x half> @llvm.maximum.nxv8f16(<vscale x 8 x half> %a, <vscale x 8 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x half> %r"
 },
 {
  "instr": "maximum",
  "ty": "<vscale x 8 x half>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.h\nmov z1.h, h1\nfmax z0.h, p0/m, z0.h, z1.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x half> (<vscale x 8 x half>, half) (in function: test)",
  "ll": "define <vscale x 8 x half> @test(<vscale x 8 x half> %a, half %bs) {\n  %i = insertelement <vscale x 8 x half> poison, half %bs, i64 0\n  %b = shufflevector <vscale x 8 x half> %i, <vscale x 8 x half> poison, <vscale x 8 x i32> zeroinitializer\n  %r = call <vscale x 8 x half> @llvm.maximum(<vscale x 8 x half> %a, <vscale x 8 x half> %b)\n  ret <vscale x 8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 8 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <vscale x 8 x half> %i, <vscale x 8 x half> poison, <vscale x 8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 8 x half> @llvm.maximum.nxv8f16(<vscale x 8 x half> %a, <vscale x 8 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x half> %r"
 },
 {
  "instr": "maximum",
  "ty": "<vscale x 8 x half>",
  "variant": "binopconstsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "fmov z1.h, #7.00000000\nptrue p0.h\nfmax z0.h, p0/m, z0.h, z1.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x half> (<vscale x 8 x half>) (in function: test)",
  "ll": "define <vscale x 8 x half> @test(<vscale x 8 x half> %a) {\n  %r = call <vscale x 8 x half> @llvm.maximum(<vscale x 8 x half> %a, <vscale x 8 x half> splat (half 7.0))\n  ret <vscale x 8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 8 x half> @llvm.maximum.nxv8f16(<vscale x 8 x half> %a, <vscale x 8 x half> splat (half 0xH4700))\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x half> %r"
 },
 {
  "instr": "maximum",
  "ty": "<vscale x 16 x half>",
  "variant": "binop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.h\nfmax z0.h, p0/m, z0.h, z2.h\nfmax z1.h, p0/m, z1.h, z3.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 16 x half> (<vscale x 16 x half>, <vscale x 16 x half>) (in function: test)",
  "ll": "define <vscale x 16 x half> @test(<vscale x 16 x half> %a, <vscale x 16 x half> %b) {\n  %r = call <vscale x 16 x half> @llvm.maximum(<vscale x 16 x half> %a, <vscale x 16 x half> %b)\n  ret <vscale x 16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <vscale x 16 x half> @llvm.maximum.nxv16f16(<vscale x 16 x half> %a, <vscale x 16 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 16 x half> %r"
 },
 {
  "instr": "maximum",
  "ty": "<vscale x 16 x half>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 6,
  "lat": 6,
  "sizelat": 6,
  "size": 3,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.h\nmov z2.h, h2\nfmax z0.h, p0/m, z0.h, z2.h\nfmax z1.h, p0/m, z1.h, z2.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 16 x half> (<vscale x 16 x half>, half) (in function: test)",
  "ll": "define <vscale x 16 x half> @test(<vscale x 16 x half> %a, half %bs) {\n  %i = insertelement <vscale x 16 x half> poison, half %bs, i64 0\n  %b = shufflevector <vscale x 16 x half> %i, <vscale x 16 x half> poison, <vscale x 16 x i32> zeroinitializer\n  %r = call <vscale x 16 x half> @llvm.maximum(<vscale x 16 x half> %a, <vscale x 16 x half> %b)\n  ret <vscale x 16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 16 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <vscale x 16 x half> %i, <vscale x 16 x half> poison, <vscale x 16 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <vscale x 16 x half> @llvm.maximum.nxv16f16(<vscale x 16 x half> %a, <vscale x 16 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 16 x half> %r"
 },
 {
  "instr": "maximum",
  "ty": "<vscale x 16 x half>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 3,
  "gisize": -1,
  "extrasize": 0,
  "asm": "fmov z2.h, #7.00000000\nptrue p0.h\nfmax z0.h, p0/m, z0.h, z2.h\nfmax z1.h, p0/m, z1.h, z2.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 16 x half> (<vscale x 16 x half>) (in function: test)",
  "ll": "define <vscale x 16 x half> @test(<vscale x 16 x half> %a) {\n  %r = call <vscale x 16 x half> @llvm.maximum(<vscale x 16 x half> %a, <vscale x 16 x half> splat (half 7.0))\n  ret <vscale x 16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <vscale x 16 x half> @llvm.maximum.nxv16f16(<vscale x 16 x half> %a, <vscale x 16 x half> splat (half 0xH4700))\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 16 x half> %r"
 },
 {
  "instr": "maximum",
  "ty": "<vscale x 2 x float>",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.d\nfmax z0.s, p0/m, z0.s, z1.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x float> (<vscale x 2 x float>, <vscale x 2 x float>) (in function: test)",
  "ll": "define <vscale x 2 x float> @test(<vscale x 2 x float> %a, <vscale x 2 x float> %b) {\n  %r = call <vscale x 2 x float> @llvm.maximum(<vscale x 2 x float> %a, <vscale x 2 x float> %b)\n  ret <vscale x 2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 2 x float> @llvm.maximum.nxv2f32(<vscale x 2 x float> %a, <vscale x 2 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x float> %r"
 },
 {
  "instr": "maximum",
  "ty": "<vscale x 2 x float>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.d\nmov z1.s, s1\nfmax z0.s, p0/m, z0.s, z1.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x float> (<vscale x 2 x float>, float) (in function: test)",
  "ll": "define <vscale x 2 x float> @test(<vscale x 2 x float> %a, float %bs) {\n  %i = insertelement <vscale x 2 x float> poison, float %bs, i64 0\n  %b = shufflevector <vscale x 2 x float> %i, <vscale x 2 x float> poison, <vscale x 2 x i32> zeroinitializer\n  %r = call <vscale x 2 x float> @llvm.maximum(<vscale x 2 x float> %a, <vscale x 2 x float> %b)\n  ret <vscale x 2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 2 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <vscale x 2 x float> %i, <vscale x 2 x float> poison, <vscale x 2 x i32> zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 2 x float> @llvm.maximum.nxv2f32(<vscale x 2 x float> %a, <vscale x 2 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x float> %r"
 },
 {
  "instr": "maximum",
  "ty": "<vscale x 2 x float>",
  "variant": "binopconstsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "fmov z1.s, #7.00000000\nptrue p0.d\nfmax z0.s, p0/m, z0.s, z1.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x float> (<vscale x 2 x float>) (in function: test)",
  "ll": "define <vscale x 2 x float> @test(<vscale x 2 x float> %a) {\n  %r = call <vscale x 2 x float> @llvm.maximum(<vscale x 2 x float> %a, <vscale x 2 x float> splat (float 7.0))\n  ret <vscale x 2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 2 x float> @llvm.maximum.nxv2f32(<vscale x 2 x float> %a, <vscale x 2 x float> splat (float 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x float> %r"
 },
 {
  "instr": "maximum",
  "ty": "<vscale x 4 x float>",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.s\nfmax z0.s, p0/m, z0.s, z1.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x float> (<vscale x 4 x float>, <vscale x 4 x float>) (in function: test)",
  "ll": "define <vscale x 4 x float> @test(<vscale x 4 x float> %a, <vscale x 4 x float> %b) {\n  %r = call <vscale x 4 x float> @llvm.maximum(<vscale x 4 x float> %a, <vscale x 4 x float> %b)\n  ret <vscale x 4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 4 x float> @llvm.maximum.nxv4f32(<vscale x 4 x float> %a, <vscale x 4 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x float> %r"
 },
 {
  "instr": "maximum",
  "ty": "<vscale x 4 x float>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.s\nmov z1.s, s1\nfmax z0.s, p0/m, z0.s, z1.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x float> (<vscale x 4 x float>, float) (in function: test)",
  "ll": "define <vscale x 4 x float> @test(<vscale x 4 x float> %a, float %bs) {\n  %i = insertelement <vscale x 4 x float> poison, float %bs, i64 0\n  %b = shufflevector <vscale x 4 x float> %i, <vscale x 4 x float> poison, <vscale x 4 x i32> zeroinitializer\n  %r = call <vscale x 4 x float> @llvm.maximum(<vscale x 4 x float> %a, <vscale x 4 x float> %b)\n  ret <vscale x 4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 4 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <vscale x 4 x float> %i, <vscale x 4 x float> poison, <vscale x 4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 4 x float> @llvm.maximum.nxv4f32(<vscale x 4 x float> %a, <vscale x 4 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x float> %r"
 },
 {
  "instr": "maximum",
  "ty": "<vscale x 4 x float>",
  "variant": "binopconstsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "fmov z1.s, #7.00000000\nptrue p0.s\nfmax z0.s, p0/m, z0.s, z1.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x float> (<vscale x 4 x float>) (in function: test)",
  "ll": "define <vscale x 4 x float> @test(<vscale x 4 x float> %a) {\n  %r = call <vscale x 4 x float> @llvm.maximum(<vscale x 4 x float> %a, <vscale x 4 x float> splat (float 7.0))\n  ret <vscale x 4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 4 x float> @llvm.maximum.nxv4f32(<vscale x 4 x float> %a, <vscale x 4 x float> splat (float 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x float> %r"
 },
 {
  "instr": "maximum",
  "ty": "<vscale x 8 x float>",
  "variant": "binop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.s\nfmax z0.s, p0/m, z0.s, z2.s\nfmax z1.s, p0/m, z1.s, z3.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x float> (<vscale x 8 x float>, <vscale x 8 x float>) (in function: test)",
  "ll": "define <vscale x 8 x float> @test(<vscale x 8 x float> %a, <vscale x 8 x float> %b) {\n  %r = call <vscale x 8 x float> @llvm.maximum(<vscale x 8 x float> %a, <vscale x 8 x float> %b)\n  ret <vscale x 8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <vscale x 8 x float> @llvm.maximum.nxv8f32(<vscale x 8 x float> %a, <vscale x 8 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x float> %r"
 },
 {
  "instr": "maximum",
  "ty": "<vscale x 8 x float>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 6,
  "lat": 6,
  "sizelat": 6,
  "size": 3,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.s\nmov z2.s, s2\nfmax z0.s, p0/m, z0.s, z2.s\nfmax z1.s, p0/m, z1.s, z2.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x float> (<vscale x 8 x float>, float) (in function: test)",
  "ll": "define <vscale x 8 x float> @test(<vscale x 8 x float> %a, float %bs) {\n  %i = insertelement <vscale x 8 x float> poison, float %bs, i64 0\n  %b = shufflevector <vscale x 8 x float> %i, <vscale x 8 x float> poison, <vscale x 8 x i32> zeroinitializer\n  %r = call <vscale x 8 x float> @llvm.maximum(<vscale x 8 x float> %a, <vscale x 8 x float> %b)\n  ret <vscale x 8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 8 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <vscale x 8 x float> %i, <vscale x 8 x float> poison, <vscale x 8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <vscale x 8 x float> @llvm.maximum.nxv8f32(<vscale x 8 x float> %a, <vscale x 8 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x float> %r"
 },
 {
  "instr": "maximum",
  "ty": "<vscale x 8 x float>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 3,
  "gisize": -1,
  "extrasize": 0,
  "asm": "fmov z2.s, #7.00000000\nptrue p0.s\nfmax z0.s, p0/m, z0.s, z2.s\nfmax z1.s, p0/m, z1.s, z2.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x float> (<vscale x 8 x float>) (in function: test)",
  "ll": "define <vscale x 8 x float> @test(<vscale x 8 x float> %a) {\n  %r = call <vscale x 8 x float> @llvm.maximum(<vscale x 8 x float> %a, <vscale x 8 x float> splat (float 7.0))\n  ret <vscale x 8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <vscale x 8 x float> @llvm.maximum.nxv8f32(<vscale x 8 x float> %a, <vscale x 8 x float> splat (float 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x float> %r"
 },
 {
  "instr": "maximum",
  "ty": "<vscale x 2 x double>",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.d\nfmax z0.d, p0/m, z0.d, z1.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x double> (<vscale x 2 x double>, <vscale x 2 x double>) (in function: test)",
  "ll": "define <vscale x 2 x double> @test(<vscale x 2 x double> %a, <vscale x 2 x double> %b) {\n  %r = call <vscale x 2 x double> @llvm.maximum(<vscale x 2 x double> %a, <vscale x 2 x double> %b)\n  ret <vscale x 2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 2 x double> @llvm.maximum.nxv2f64(<vscale x 2 x double> %a, <vscale x 2 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x double> %r"
 },
 {
  "instr": "maximum",
  "ty": "<vscale x 2 x double>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.d\nmov z1.d, d1\nfmax z0.d, p0/m, z0.d, z1.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x double> (<vscale x 2 x double>, double) (in function: test)",
  "ll": "define <vscale x 2 x double> @test(<vscale x 2 x double> %a, double %bs) {\n  %i = insertelement <vscale x 2 x double> poison, double %bs, i64 0\n  %b = shufflevector <vscale x 2 x double> %i, <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer\n  %r = call <vscale x 2 x double> @llvm.maximum(<vscale x 2 x double> %a, <vscale x 2 x double> %b)\n  ret <vscale x 2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 2 x double> poison, double %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <vscale x 2 x double> %i, <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 2 x double> @llvm.maximum.nxv2f64(<vscale x 2 x double> %a, <vscale x 2 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x double> %r"
 },
 {
  "instr": "maximum",
  "ty": "<vscale x 2 x double>",
  "variant": "binopconstsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "fmov z1.d, #7.00000000\nptrue p0.d\nfmax z0.d, p0/m, z0.d, z1.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x double> (<vscale x 2 x double>) (in function: test)",
  "ll": "define <vscale x 2 x double> @test(<vscale x 2 x double> %a) {\n  %r = call <vscale x 2 x double> @llvm.maximum(<vscale x 2 x double> %a, <vscale x 2 x double> splat (double 7.0))\n  ret <vscale x 2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 2 x double> @llvm.maximum.nxv2f64(<vscale x 2 x double> %a, <vscale x 2 x double> splat (double 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x double> %r"
 },
 {
  "instr": "maximum",
  "ty": "<vscale x 4 x double>",
  "variant": "binop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.d\nfmax z0.d, p0/m, z0.d, z2.d\nfmax z1.d, p0/m, z1.d, z3.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x double> (<vscale x 4 x double>, <vscale x 4 x double>) (in function: test)",
  "ll": "define <vscale x 4 x double> @test(<vscale x 4 x double> %a, <vscale x 4 x double> %b) {\n  %r = call <vscale x 4 x double> @llvm.maximum(<vscale x 4 x double> %a, <vscale x 4 x double> %b)\n  ret <vscale x 4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <vscale x 4 x double> @llvm.maximum.nxv4f64(<vscale x 4 x double> %a, <vscale x 4 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x double> %r"
 },
 {
  "instr": "maximum",
  "ty": "<vscale x 4 x double>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 6,
  "lat": 6,
  "sizelat": 6,
  "size": 3,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.d\nmov z2.d, d2\nfmax z0.d, p0/m, z0.d, z2.d\nfmax z1.d, p0/m, z1.d, z2.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x double> (<vscale x 4 x double>, double) (in function: test)",
  "ll": "define <vscale x 4 x double> @test(<vscale x 4 x double> %a, double %bs) {\n  %i = insertelement <vscale x 4 x double> poison, double %bs, i64 0\n  %b = shufflevector <vscale x 4 x double> %i, <vscale x 4 x double> poison, <vscale x 4 x i32> zeroinitializer\n  %r = call <vscale x 4 x double> @llvm.maximum(<vscale x 4 x double> %a, <vscale x 4 x double> %b)\n  ret <vscale x 4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 4 x double> poison, double %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <vscale x 4 x double> %i, <vscale x 4 x double> poison, <vscale x 4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <vscale x 4 x double> @llvm.maximum.nxv4f64(<vscale x 4 x double> %a, <vscale x 4 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x double> %r"
 },
 {
  "instr": "maximum",
  "ty": "<vscale x 4 x double>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 3,
  "gisize": -1,
  "extrasize": 0,
  "asm": "fmov z2.d, #7.00000000\nptrue p0.d\nfmax z0.d, p0/m, z0.d, z2.d\nfmax z1.d, p0/m, z1.d, z2.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x double> (<vscale x 4 x double>) (in function: test)",
  "ll": "define <vscale x 4 x double> @test(<vscale x 4 x double> %a) {\n  %r = call <vscale x 4 x double> @llvm.maximum(<vscale x 4 x double> %a, <vscale x 4 x double> splat (double 7.0))\n  ret <vscale x 4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <vscale x 4 x double> @llvm.maximum.nxv4f64(<vscale x 4 x double> %a, <vscale x 4 x double> splat (double 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x double> %r"
 },
 {
  "instr": "copysign",
  "ty": "half",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "mvni v2.8h, #128, lsl #8\nbif v0.16b, v1.16b, v2.16b\nret",
  "giasm": "mvni v2.4h, #128, lsl #8\nbif v0.8b, v1.8b, v2.8b\nret",
  "ll": "define half @test(half %a, half %b) {\n  %r = call half @llvm.copysign(half %a, half %b)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call half @llvm.copysign.f16(half %a, half %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "copysign",
  "ty": "half",
  "variant": "binopconst",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fabs h0, h0\nret",
  "giasm": "fmov h1, #7.00000000\nmvni v2.4h, #128, lsl #8\nbif v0.8b, v1.8b, v2.8b\nret",
  "ll": "define half @test(half %a) {\n  %r = call half @llvm.copysign(half %a, half 7.0)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call half @llvm.copysign.f16(half %a, half 0xH4700)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "copysign",
  "ty": "float",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "mvni v2.4s, #128, lsl #24\nbif v0.16b, v1.16b, v2.16b\nret",
  "giasm": "mvni v2.2s, #128, lsl #24\nbif v0.8b, v1.8b, v2.8b\nret",
  "ll": "define float @test(float %a, float %b) {\n  %r = call float @llvm.copysign(float %a, float %b)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call float @llvm.copysign.f32(float %a, float %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "copysign",
  "ty": "float",
  "variant": "binopconst",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fabs s0, s0\nret",
  "giasm": "fmov s1, #7.00000000\nmvni v2.2s, #128, lsl #24\nbif v0.8b, v1.8b, v2.8b\nret",
  "ll": "define float @test(float %a) {\n  %r = call float @llvm.copysign(float %a, float 7.0)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call float @llvm.copysign.f32(float %a, float 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "copysign",
  "ty": "double",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "movi v2.2d, #0xffffffffffffffff\nfneg v2.2d, v2.2d\nbif v0.16b, v1.16b, v2.16b\nret",
  "giasm": "movi v2.2d, #0xffffffffffffffff\nfneg v2.2d, v2.2d\nbif v0.16b, v1.16b, v2.16b\nret",
  "ll": "define double @test(double %a, double %b) {\n  %r = call double @llvm.copysign(double %a, double %b)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call double @llvm.copysign.f64(double %a, double %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "copysign",
  "ty": "double",
  "variant": "binopconst",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fabs d0, d0\nret",
  "giasm": "movi v1.2d, #0xffffffffffffffff\nfmov d2, #7.00000000\nfneg v1.2d, v1.2d\nbif v0.16b, v2.16b, v1.16b\nret",
  "ll": "define double @test(double %a) {\n  %r = call double @llvm.copysign(double %a, double 7.0)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call double @llvm.copysign.f64(double %a, double 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "copysign",
  "ty": "<4 x half>",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "mvni v2.4h, #128, lsl #8\nbif v0.8b, v1.8b, v2.8b\nret",
  "giasm": "mvni v2.4h, #128, lsl #8\nbif v0.8b, v1.8b, v2.8b\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, <4 x half> %b) {\n  %r = call <4 x half> @llvm.copysign(<4 x half> %a, <4 x half> %b)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <4 x half> @llvm.copysign.v4f16(<4 x half> %a, <4 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "copysign",
  "ty": "<4 x half>",
  "variant": "binopconst",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 2,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nmvni v1.4h, #128, lsl #8\nldr d2, [x8, :lo12:.LCPI0_0]\nbif v0.8b, v2.8b, v1.8b\nret",
  "giasm": "mvni v1.4h, #128, lsl #8\nand v0.8b, v0.8b, v1.8b\nret",
  "ll": "define <4 x half> @test(<4 x half> %a) {\n  %r = call <4 x half> @llvm.copysign(<4 x half> %a, <4 x half> <half 7.0, half 6.0, half 7.0, half 6.0>)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <4 x half> @llvm.copysign.v4f16(<4 x half> %a, <4 x half> <half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "copysign",
  "ty": "<4 x half>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "mvni v2.4h, #128, lsl #8\ndup v1.4h, v1.h[0]\nbif v0.8b, v1.8b, v2.8b\nret",
  "giasm": "mvni v2.4h, #128, lsl #8\ndup v1.4h, v1.h[0]\nbif v0.8b, v1.8b, v2.8b\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, half %bs) {\n  %i = insertelement <4 x half> poison, half %bs, i64 0\n  %b = shufflevector <4 x half> %i, <4 x half> poison, <4 x i32> zeroinitializer\n  %r = call <4 x half> @llvm.copysign(<4 x half> %a, <4 x half> %b)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <4 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <4 x half> %i, <4 x half> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <4 x half> @llvm.copysign.v4f16(<4 x half> %a, <4 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "copysign",
  "ty": "<4 x half>",
  "variant": "binopconstsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fabs v0.4h, v0.4h\nret",
  "giasm": "mvni v1.4h, #128, lsl #8\nand v0.8b, v0.8b, v1.8b\nret",
  "ll": "define <4 x half> @test(<4 x half> %a) {\n  %r = call <4 x half> @llvm.copysign(<4 x half> %a, <4 x half> splat (half 7.0))\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <4 x half> @llvm.copysign.v4f16(<4 x half> %a, <4 x half> splat (half 0xH4700))\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "copysign",
  "ty": "<8 x half>",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "mvni v2.8h, #128, lsl #8\nbif v0.16b, v1.16b, v2.16b\nret",
  "giasm": "mvni v2.8h, #128, lsl #8\nbif v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, <8 x half> %b) {\n  %r = call <8 x half> @llvm.copysign(<8 x half> %a, <8 x half> %b)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <8 x half> @llvm.copysign.v8f16(<8 x half> %a, <8 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "copysign",
  "ty": "<8 x half>",
  "variant": "binopconst",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 2,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nmvni v1.8h, #128, lsl #8\nldr q2, [x8, :lo12:.LCPI0_0]\nbif v0.16b, v2.16b, v1.16b\nret",
  "giasm": "mvni v1.8h, #128, lsl #8\nand v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <8 x half> @test(<8 x half> %a) {\n  %r = call <8 x half> @llvm.copysign(<8 x half> %a, <8 x half> <half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0>)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <8 x half> @llvm.copysign.v8f16(<8 x half> %a, <8 x half> <half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "copysign",
  "ty": "<8 x half>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "mvni v2.8h, #128, lsl #8\ndup v1.8h, v1.h[0]\nbif v0.16b, v1.16b, v2.16b\nret",
  "giasm": "mvni v2.8h, #128, lsl #8\ndup v1.8h, v1.h[0]\nbif v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, half %bs) {\n  %i = insertelement <8 x half> poison, half %bs, i64 0\n  %b = shufflevector <8 x half> %i, <8 x half> poison, <8 x i32> zeroinitializer\n  %r = call <8 x half> @llvm.copysign(<8 x half> %a, <8 x half> %b)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <8 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <8 x half> %i, <8 x half> poison, <8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <8 x half> @llvm.copysign.v8f16(<8 x half> %a, <8 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "copysign",
  "ty": "<8 x half>",
  "variant": "binopconstsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fabs v0.8h, v0.8h\nret",
  "giasm": "mvni v1.8h, #128, lsl #8\nand v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <8 x half> @test(<8 x half> %a) {\n  %r = call <8 x half> @llvm.copysign(<8 x half> %a, <8 x half> splat (half 7.0))\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <8 x half> @llvm.copysign.v8f16(<8 x half> %a, <8 x half> splat (half 0xH4700))\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "copysign",
  "ty": "<16 x half>",
  "variant": "binop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "mvni v4.8h, #128, lsl #8\nbif v0.16b, v2.16b, v4.16b\nbif v1.16b, v3.16b, v4.16b\nret",
  "giasm": "mvni v4.8h, #128, lsl #8\nbif v0.16b, v2.16b, v4.16b\nbif v1.16b, v3.16b, v4.16b\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, <16 x half> %b) {\n  %r = call <16 x half> @llvm.copysign(<16 x half> %a, <16 x half> %b)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <16 x half> @llvm.copysign.v16f16(<16 x half> %a, <16 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "copysign",
  "ty": "<16 x half>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 5,
  "gisize": 3,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nmvni v2.8h, #128, lsl #8\nldr q3, [x8, :lo12:.LCPI0_0]\nbif v0.16b, v3.16b, v2.16b\nbif v1.16b, v3.16b, v2.16b\nret",
  "giasm": "mvni v2.8h, #128, lsl #8\nand v0.16b, v0.16b, v2.16b\nand v1.16b, v1.16b, v2.16b\nret",
  "ll": "define <16 x half> @test(<16 x half> %a) {\n  %r = call <16 x half> @llvm.copysign(<16 x half> %a, <16 x half> <half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0>)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <16 x half> @llvm.copysign.v16f16(<16 x half> %a, <16 x half> <half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "copysign",
  "ty": "<16 x half>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 6,
  "lat": 6,
  "sizelat": 6,
  "size": 4,
  "gisize": 5,
  "extrasize": 0,
  "asm": "mvni v3.8h, #128, lsl #8\ndup v2.8h, v2.h[0]\nbif v0.16b, v2.16b, v3.16b\nbif v1.16b, v2.16b, v3.16b\nret",
  "giasm": "dup v3.8h, v2.h[0]\nmvni v4.8h, #128, lsl #8\ndup v2.8h, v2.h[0]\nbif v0.16b, v3.16b, v4.16b\nbif v1.16b, v2.16b, v4.16b\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, half %bs) {\n  %i = insertelement <16 x half> poison, half %bs, i64 0\n  %b = shufflevector <16 x half> %i, <16 x half> poison, <16 x i32> zeroinitializer\n  %r = call <16 x half> @llvm.copysign(<16 x half> %a, <16 x half> %b)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <16 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <16 x half> %i, <16 x half> poison, <16 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <16 x half> @llvm.copysign.v16f16(<16 x half> %a, <16 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "copysign",
  "ty": "<16 x half>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fabs v0.8h, v0.8h\nfabs v1.8h, v1.8h\nret",
  "giasm": "mvni v2.8h, #128, lsl #8\nand v0.16b, v0.16b, v2.16b\nand v1.16b, v1.16b, v2.16b\nret",
  "ll": "define <16 x half> @test(<16 x half> %a) {\n  %r = call <16 x half> @llvm.copysign(<16 x half> %a, <16 x half> splat (half 7.0))\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <16 x half> @llvm.copysign.v16f16(<16 x half> %a, <16 x half> splat (half 0xH4700))\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "copysign",
  "ty": "<2 x float>",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "mvni v2.2s, #128, lsl #24\nbif v0.8b, v1.8b, v2.8b\nret",
  "giasm": "mvni v2.2s, #128, lsl #24\nbif v0.8b, v1.8b, v2.8b\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, <2 x float> %b) {\n  %r = call <2 x float> @llvm.copysign(<2 x float> %a, <2 x float> %b)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <2 x float> @llvm.copysign.v2f32(<2 x float> %a, <2 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "copysign",
  "ty": "<2 x float>",
  "variant": "binopconst",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 2,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nmvni v1.2s, #128, lsl #24\nldr d2, [x8, :lo12:.LCPI0_0]\nbif v0.8b, v2.8b, v1.8b\nret",
  "giasm": "mvni v1.2s, #128, lsl #24\nand v0.8b, v0.8b, v1.8b\nret",
  "ll": "define <2 x float> @test(<2 x float> %a) {\n  %r = call <2 x float> @llvm.copysign(<2 x float> %a, <2 x float> <float 7.0, float 6.0>)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <2 x float> @llvm.copysign.v2f32(<2 x float> %a, <2 x float> <float 7.000000e+00, float 6.000000e+00>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "copysign",
  "ty": "<2 x float>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "mvni v2.2s, #128, lsl #24\ndup v1.2s, v1.s[0]\nbif v0.8b, v1.8b, v2.8b\nret",
  "giasm": "mvni v2.2s, #128, lsl #24\ndup v1.2s, v1.s[0]\nbif v0.8b, v1.8b, v2.8b\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, float %bs) {\n  %i = insertelement <2 x float> poison, float %bs, i64 0\n  %b = shufflevector <2 x float> %i, <2 x float> poison, <2 x i32> zeroinitializer\n  %r = call <2 x float> @llvm.copysign(<2 x float> %a, <2 x float> %b)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <2 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <2 x float> %i, <2 x float> poison, <2 x i32> zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <2 x float> @llvm.copysign.v2f32(<2 x float> %a, <2 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "copysign",
  "ty": "<2 x float>",
  "variant": "binopconstsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fabs v0.2s, v0.2s\nret",
  "giasm": "mvni v1.2s, #128, lsl #24\nand v0.8b, v0.8b, v1.8b\nret",
  "ll": "define <2 x float> @test(<2 x float> %a) {\n  %r = call <2 x float> @llvm.copysign(<2 x float> %a, <2 x float> splat (float 7.0))\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <2 x float> @llvm.copysign.v2f32(<2 x float> %a, <2 x float> splat (float 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "copysign",
  "ty": "<4 x float>",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "mvni v2.4s, #128, lsl #24\nbif v0.16b, v1.16b, v2.16b\nret",
  "giasm": "mvni v2.4s, #128, lsl #24\nbif v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, <4 x float> %b) {\n  %r = call <4 x float> @llvm.copysign(<4 x float> %a, <4 x float> %b)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <4 x float> @llvm.copysign.v4f32(<4 x float> %a, <4 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "copysign",
  "ty": "<4 x float>",
  "variant": "binopconst",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 2,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nmvni v1.4s, #128, lsl #24\nldr q2, [x8, :lo12:.LCPI0_0]\nbif v0.16b, v2.16b, v1.16b\nret",
  "giasm": "mvni v1.4s, #128, lsl #24\nand v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <4 x float> @test(<4 x float> %a) {\n  %r = call <4 x float> @llvm.copysign(<4 x float> %a, <4 x float> <float 7.0, float 6.0, float 7.0, float 6.0>)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <4 x float> @llvm.copysign.v4f32(<4 x float> %a, <4 x float> <float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "copysign",
  "ty": "<4 x float>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "mvni v2.4s, #128, lsl #24\ndup v1.4s, v1.s[0]\nbif v0.16b, v1.16b, v2.16b\nret",
  "giasm": "mvni v2.4s, #128, lsl #24\ndup v1.4s, v1.s[0]\nbif v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, float %bs) {\n  %i = insertelement <4 x float> poison, float %bs, i64 0\n  %b = shufflevector <4 x float> %i, <4 x float> poison, <4 x i32> zeroinitializer\n  %r = call <4 x float> @llvm.copysign(<4 x float> %a, <4 x float> %b)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <4 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <4 x float> %i, <4 x float> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <4 x float> @llvm.copysign.v4f32(<4 x float> %a, <4 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "copysign",
  "ty": "<4 x float>",
  "variant": "binopconstsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fabs v0.4s, v0.4s\nret",
  "giasm": "mvni v1.4s, #128, lsl #24\nand v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <4 x float> @test(<4 x float> %a) {\n  %r = call <4 x float> @llvm.copysign(<4 x float> %a, <4 x float> splat (float 7.0))\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <4 x float> @llvm.copysign.v4f32(<4 x float> %a, <4 x float> splat (float 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "copysign",
  "ty": "<8 x float>",
  "variant": "binop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "mvni v4.4s, #128, lsl #24\nbif v0.16b, v2.16b, v4.16b\nbif v1.16b, v3.16b, v4.16b\nret",
  "giasm": "mvni v4.4s, #128, lsl #24\nbif v0.16b, v2.16b, v4.16b\nbif v1.16b, v3.16b, v4.16b\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, <8 x float> %b) {\n  %r = call <8 x float> @llvm.copysign(<8 x float> %a, <8 x float> %b)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x float> @llvm.copysign.v8f32(<8 x float> %a, <8 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "copysign",
  "ty": "<8 x float>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 5,
  "gisize": 3,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nmvni v2.4s, #128, lsl #24\nldr q3, [x8, :lo12:.LCPI0_0]\nbif v0.16b, v3.16b, v2.16b\nbif v1.16b, v3.16b, v2.16b\nret",
  "giasm": "mvni v2.4s, #128, lsl #24\nand v0.16b, v0.16b, v2.16b\nand v1.16b, v1.16b, v2.16b\nret",
  "ll": "define <8 x float> @test(<8 x float> %a) {\n  %r = call <8 x float> @llvm.copysign(<8 x float> %a, <8 x float> <float 7.0, float 6.0, float 7.0, float 6.0, float 7.0, float 6.0, float 7.0, float 6.0>)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x float> @llvm.copysign.v8f32(<8 x float> %a, <8 x float> <float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "copysign",
  "ty": "<8 x float>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 6,
  "lat": 6,
  "sizelat": 6,
  "size": 4,
  "gisize": 5,
  "extrasize": 0,
  "asm": "mvni v3.4s, #128, lsl #24\ndup v2.4s, v2.s[0]\nbif v0.16b, v2.16b, v3.16b\nbif v1.16b, v2.16b, v3.16b\nret",
  "giasm": "dup v3.4s, v2.s[0]\nmvni v4.4s, #128, lsl #24\ndup v2.4s, v2.s[0]\nbif v0.16b, v3.16b, v4.16b\nbif v1.16b, v2.16b, v4.16b\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, float %bs) {\n  %i = insertelement <8 x float> poison, float %bs, i64 0\n  %b = shufflevector <8 x float> %i, <8 x float> poison, <8 x i32> zeroinitializer\n  %r = call <8 x float> @llvm.copysign(<8 x float> %a, <8 x float> %b)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <8 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <8 x float> %i, <8 x float> poison, <8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x float> @llvm.copysign.v8f32(<8 x float> %a, <8 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "copysign",
  "ty": "<8 x float>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fabs v0.4s, v0.4s\nfabs v1.4s, v1.4s\nret",
  "giasm": "mvni v2.4s, #128, lsl #24\nand v0.16b, v0.16b, v2.16b\nand v1.16b, v1.16b, v2.16b\nret",
  "ll": "define <8 x float> @test(<8 x float> %a) {\n  %r = call <8 x float> @llvm.copysign(<8 x float> %a, <8 x float> splat (float 7.0))\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x float> @llvm.copysign.v8f32(<8 x float> %a, <8 x float> splat (float 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "copysign",
  "ty": "<2 x double>",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "movi v2.2d, #0xffffffffffffffff\nfneg v2.2d, v2.2d\nbif v0.16b, v1.16b, v2.16b\nret",
  "giasm": "movi v2.2d, #0xffffffffffffffff\nfneg v2.2d, v2.2d\nbif v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, <2 x double> %b) {\n  %r = call <2 x double> @llvm.copysign(<2 x double> %a, <2 x double> %b)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <2 x double> @llvm.copysign.v2f64(<2 x double> %a, <2 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "copysign",
  "ty": "<2 x double>",
  "variant": "binopconst",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 5,
  "gisize": 3,
  "extrasize": 0,
  "asm": "movi v1.2d, #0xffffffffffffffff\nadrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfneg v1.2d, v1.2d\nbif v0.16b, v2.16b, v1.16b\nret",
  "giasm": "movi v1.2d, #0xffffffffffffffff\nfneg v1.2d, v1.2d\nand v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <2 x double> @test(<2 x double> %a) {\n  %r = call <2 x double> @llvm.copysign(<2 x double> %a, <2 x double> <double 7.0, double 6.0>)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <2 x double> @llvm.copysign.v2f64(<2 x double> %a, <2 x double> <double 7.000000e+00, double 6.000000e+00>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "copysign",
  "ty": "<2 x double>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "movi v2.2d, #0xffffffffffffffff\ndup v1.2d, v1.d[0]\nfneg v2.2d, v2.2d\nbif v0.16b, v1.16b, v2.16b\nret",
  "giasm": "movi v2.2d, #0xffffffffffffffff\ndup v1.2d, v1.d[0]\nfneg v2.2d, v2.2d\nbif v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, double %bs) {\n  %i = insertelement <2 x double> poison, double %bs, i64 0\n  %b = shufflevector <2 x double> %i, <2 x double> poison, <2 x i32> zeroinitializer\n  %r = call <2 x double> @llvm.copysign(<2 x double> %a, <2 x double> %b)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <2 x double> poison, double %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <2 x double> %i, <2 x double> poison, <2 x i32> zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <2 x double> @llvm.copysign.v2f64(<2 x double> %a, <2 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "copysign",
  "ty": "<2 x double>",
  "variant": "binopconstsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fabs v0.2d, v0.2d\nret",
  "giasm": "movi v1.2d, #0xffffffffffffffff\nfneg v1.2d, v1.2d\nand v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <2 x double> @test(<2 x double> %a) {\n  %r = call <2 x double> @llvm.copysign(<2 x double> %a, <2 x double> splat (double 7.0))\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <2 x double> @llvm.copysign.v2f64(<2 x double> %a, <2 x double> splat (double 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "copysign",
  "ty": "<4 x double>",
  "variant": "binop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "movi v4.2d, #0xffffffffffffffff\nfneg v4.2d, v4.2d\nbif v0.16b, v2.16b, v4.16b\nbif v1.16b, v3.16b, v4.16b\nret",
  "giasm": "movi v4.2d, #0xffffffffffffffff\nfneg v4.2d, v4.2d\nbif v0.16b, v2.16b, v4.16b\nbif v1.16b, v3.16b, v4.16b\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, <4 x double> %b) {\n  %r = call <4 x double> @llvm.copysign(<4 x double> %a, <4 x double> %b)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x double> @llvm.copysign.v4f64(<4 x double> %a, <4 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "copysign",
  "ty": "<4 x double>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 6,
  "gisize": 4,
  "extrasize": 0,
  "asm": "movi v2.2d, #0xffffffffffffffff\nadrp x8, .LCPI0_0\nldr q3, [x8, :lo12:.LCPI0_0]\nfneg v2.2d, v2.2d\nbif v0.16b, v3.16b, v2.16b\nbif v1.16b, v3.16b, v2.16b\nret",
  "giasm": "movi v2.2d, #0xffffffffffffffff\nfneg v2.2d, v2.2d\nand v0.16b, v0.16b, v2.16b\nand v1.16b, v1.16b, v2.16b\nret",
  "ll": "define <4 x double> @test(<4 x double> %a) {\n  %r = call <4 x double> @llvm.copysign(<4 x double> %a, <4 x double> <double 7.0, double 6.0, double 7.0, double 6.0>)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x double> @llvm.copysign.v4f64(<4 x double> %a, <4 x double> <double 7.000000e+00, double 6.000000e+00, double 7.000000e+00, double 6.000000e+00>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "copysign",
  "ty": "<4 x double>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 6,
  "lat": 6,
  "sizelat": 6,
  "size": 5,
  "gisize": 6,
  "extrasize": 0,
  "asm": "movi v3.2d, #0xffffffffffffffff\ndup v2.2d, v2.d[0]\nfneg v3.2d, v3.2d\nbif v0.16b, v2.16b, v3.16b\nbif v1.16b, v2.16b, v3.16b\nret",
  "giasm": "movi v3.2d, #0xffffffffffffffff\ndup v4.2d, v2.d[0]\ndup v2.2d, v2.d[0]\nfneg v3.2d, v3.2d\nbif v0.16b, v4.16b, v3.16b\nbif v1.16b, v2.16b, v3.16b\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, double %bs) {\n  %i = insertelement <4 x double> poison, double %bs, i64 0\n  %b = shufflevector <4 x double> %i, <4 x double> poison, <4 x i32> zeroinitializer\n  %r = call <4 x double> @llvm.copysign(<4 x double> %a, <4 x double> %b)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <4 x double> poison, double %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <4 x double> %i, <4 x double> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x double> @llvm.copysign.v4f64(<4 x double> %a, <4 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "copysign",
  "ty": "<4 x double>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fabs v0.2d, v0.2d\nfabs v1.2d, v1.2d\nret",
  "giasm": "movi v2.2d, #0xffffffffffffffff\nfneg v2.2d, v2.2d\nand v0.16b, v0.16b, v2.16b\nand v1.16b, v1.16b, v2.16b\nret",
  "ll": "define <4 x double> @test(<4 x double> %a) {\n  %r = call <4 x double> @llvm.copysign(<4 x double> %a, <4 x double> splat (double 7.0))\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x double> @llvm.copysign.v4f64(<4 x double> %a, <4 x double> splat (double 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "copysign",
  "ty": "<vscale x 4 x half>",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "mov z2.h, #32767                    // =0x7fff\nbsl z0.d, z0.d, z1.d, z2.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x half> (<vscale x 4 x half>, <vscale x 4 x half>) (in function: test)",
  "ll": "define <vscale x 4 x half> @test(<vscale x 4 x half> %a, <vscale x 4 x half> %b) {\n  %r = call <vscale x 4 x half> @llvm.copysign(<vscale x 4 x half> %a, <vscale x 4 x half> %b)\n  ret <vscale x 4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 4 x half> @llvm.copysign.nxv4f16(<vscale x 4 x half> %a, <vscale x 4 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x half> %r"
 },
 {
  "instr": "copysign",
  "ty": "<vscale x 4 x half>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 3,
  "gisize": -1,
  "extrasize": 0,
  "asm": "mov z2.h, #32767                    // =0x7fff\nmov z1.h, h1\nbsl z0.d, z0.d, z1.d, z2.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x half> (<vscale x 4 x half>, half) (in function: test)",
  "ll": "define <vscale x 4 x half> @test(<vscale x 4 x half> %a, half %bs) {\n  %i = insertelement <vscale x 4 x half> poison, half %bs, i64 0\n  %b = shufflevector <vscale x 4 x half> %i, <vscale x 4 x half> poison, <vscale x 4 x i32> zeroinitializer\n  %r = call <vscale x 4 x half> @llvm.copysign(<vscale x 4 x half> %a, <vscale x 4 x half> %b)\n  ret <vscale x 4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 4 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <vscale x 4 x half> %i, <vscale x 4 x half> poison, <vscale x 4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 4 x half> @llvm.copysign.nxv4f16(<vscale x 4 x half> %a, <vscale x 4 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x half> %r"
 },
 {
  "instr": "copysign",
  "ty": "<vscale x 4 x half>",
  "variant": "binopconstsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.s\nfabs z0.h, p0/m, z0.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x half> (<vscale x 4 x half>) (in function: test)",
  "ll": "define <vscale x 4 x half> @test(<vscale x 4 x half> %a) {\n  %r = call <vscale x 4 x half> @llvm.copysign(<vscale x 4 x half> %a, <vscale x 4 x half> splat (half 7.0))\n  ret <vscale x 4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 4 x half> @llvm.copysign.nxv4f16(<vscale x 4 x half> %a, <vscale x 4 x half> splat (half 0xH4700))\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x half> %r"
 },
 {
  "instr": "copysign",
  "ty": "<vscale x 8 x half>",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "mov z2.h, #32767                    // =0x7fff\nbsl z0.d, z0.d, z1.d, z2.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x half> (<vscale x 8 x half>, <vscale x 8 x half>) (in function: test)",
  "ll": "define <vscale x 8 x half> @test(<vscale x 8 x half> %a, <vscale x 8 x half> %b) {\n  %r = call <vscale x 8 x half> @llvm.copysign(<vscale x 8 x half> %a, <vscale x 8 x half> %b)\n  ret <vscale x 8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 8 x half> @llvm.copysign.nxv8f16(<vscale x 8 x half> %a, <vscale x 8 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x half> %r"
 },
 {
  "instr": "copysign",
  "ty": "<vscale x 8 x half>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 3,
  "gisize": -1,
  "extrasize": 0,
  "asm": "mov z2.h, #32767                    // =0x7fff\nmov z1.h, h1\nbsl z0.d, z0.d, z1.d, z2.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x half> (<vscale x 8 x half>, half) (in function: test)",
  "ll": "define <vscale x 8 x half> @test(<vscale x 8 x half> %a, half %bs) {\n  %i = insertelement <vscale x 8 x half> poison, half %bs, i64 0\n  %b = shufflevector <vscale x 8 x half> %i, <vscale x 8 x half> poison, <vscale x 8 x i32> zeroinitializer\n  %r = call <vscale x 8 x half> @llvm.copysign(<vscale x 8 x half> %a, <vscale x 8 x half> %b)\n  ret <vscale x 8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 8 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <vscale x 8 x half> %i, <vscale x 8 x half> poison, <vscale x 8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 8 x half> @llvm.copysign.nxv8f16(<vscale x 8 x half> %a, <vscale x 8 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x half> %r"
 },
 {
  "instr": "copysign",
  "ty": "<vscale x 8 x half>",
  "variant": "binopconstsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.h\nfabs z0.h, p0/m, z0.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x half> (<vscale x 8 x half>) (in function: test)",
  "ll": "define <vscale x 8 x half> @test(<vscale x 8 x half> %a) {\n  %r = call <vscale x 8 x half> @llvm.copysign(<vscale x 8 x half> %a, <vscale x 8 x half> splat (half 7.0))\n  ret <vscale x 8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 8 x half> @llvm.copysign.nxv8f16(<vscale x 8 x half> %a, <vscale x 8 x half> splat (half 0xH4700))\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x half> %r"
 },
 {
  "instr": "copysign",
  "ty": "<vscale x 16 x half>",
  "variant": "binop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 3,
  "gisize": -1,
  "extrasize": 0,
  "asm": "mov z4.h, #32767                    // =0x7fff\nbsl z0.d, z0.d, z2.d, z4.d\nbsl z1.d, z1.d, z3.d, z4.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 16 x half> (<vscale x 16 x half>, <vscale x 16 x half>) (in function: test)",
  "ll": "define <vscale x 16 x half> @test(<vscale x 16 x half> %a, <vscale x 16 x half> %b) {\n  %r = call <vscale x 16 x half> @llvm.copysign(<vscale x 16 x half> %a, <vscale x 16 x half> %b)\n  ret <vscale x 16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <vscale x 16 x half> @llvm.copysign.nxv16f16(<vscale x 16 x half> %a, <vscale x 16 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 16 x half> %r"
 },
 {
  "instr": "copysign",
  "ty": "<vscale x 16 x half>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 6,
  "lat": 6,
  "sizelat": 6,
  "size": 4,
  "gisize": -1,
  "extrasize": 0,
  "asm": "mov z3.h, #32767                    // =0x7fff\nmov z2.h, h2\nbsl z0.d, z0.d, z2.d, z3.d\nbsl z1.d, z1.d, z2.d, z3.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 16 x half> (<vscale x 16 x half>, half) (in function: test)",
  "ll": "define <vscale x 16 x half> @test(<vscale x 16 x half> %a, half %bs) {\n  %i = insertelement <vscale x 16 x half> poison, half %bs, i64 0\n  %b = shufflevector <vscale x 16 x half> %i, <vscale x 16 x half> poison, <vscale x 16 x i32> zeroinitializer\n  %r = call <vscale x 16 x half> @llvm.copysign(<vscale x 16 x half> %a, <vscale x 16 x half> %b)\n  ret <vscale x 16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 16 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <vscale x 16 x half> %i, <vscale x 16 x half> poison, <vscale x 16 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <vscale x 16 x half> @llvm.copysign.nxv16f16(<vscale x 16 x half> %a, <vscale x 16 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 16 x half> %r"
 },
 {
  "instr": "copysign",
  "ty": "<vscale x 16 x half>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.h\nfabs z0.h, p0/m, z0.h\nfabs z1.h, p0/m, z1.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 16 x half> (<vscale x 16 x half>) (in function: test)",
  "ll": "define <vscale x 16 x half> @test(<vscale x 16 x half> %a) {\n  %r = call <vscale x 16 x half> @llvm.copysign(<vscale x 16 x half> %a, <vscale x 16 x half> splat (half 7.0))\n  ret <vscale x 16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <vscale x 16 x half> @llvm.copysign.nxv16f16(<vscale x 16 x half> %a, <vscale x 16 x half> splat (half 0xH4700))\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 16 x half> %r"
 },
 {
  "instr": "copysign",
  "ty": "<vscale x 2 x float>",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "mov z2.s, #0x7fffffff\nbsl z0.d, z0.d, z1.d, z2.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x float> (<vscale x 2 x float>, <vscale x 2 x float>) (in function: test)",
  "ll": "define <vscale x 2 x float> @test(<vscale x 2 x float> %a, <vscale x 2 x float> %b) {\n  %r = call <vscale x 2 x float> @llvm.copysign(<vscale x 2 x float> %a, <vscale x 2 x float> %b)\n  ret <vscale x 2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 2 x float> @llvm.copysign.nxv2f32(<vscale x 2 x float> %a, <vscale x 2 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x float> %r"
 },
 {
  "instr": "copysign",
  "ty": "<vscale x 2 x float>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 3,
  "gisize": -1,
  "extrasize": 0,
  "asm": "mov z2.s, #0x7fffffff\nmov z1.s, s1\nbsl z0.d, z0.d, z1.d, z2.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x float> (<vscale x 2 x float>, float) (in function: test)",
  "ll": "define <vscale x 2 x float> @test(<vscale x 2 x float> %a, float %bs) {\n  %i = insertelement <vscale x 2 x float> poison, float %bs, i64 0\n  %b = shufflevector <vscale x 2 x float> %i, <vscale x 2 x float> poison, <vscale x 2 x i32> zeroinitializer\n  %r = call <vscale x 2 x float> @llvm.copysign(<vscale x 2 x float> %a, <vscale x 2 x float> %b)\n  ret <vscale x 2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 2 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <vscale x 2 x float> %i, <vscale x 2 x float> poison, <vscale x 2 x i32> zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 2 x float> @llvm.copysign.nxv2f32(<vscale x 2 x float> %a, <vscale x 2 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x float> %r"
 },
 {
  "instr": "copysign",
  "ty": "<vscale x 2 x float>",
  "variant": "binopconstsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.d\nfabs z0.s, p0/m, z0.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x float> (<vscale x 2 x float>) (in function: test)",
  "ll": "define <vscale x 2 x float> @test(<vscale x 2 x float> %a) {\n  %r = call <vscale x 2 x float> @llvm.copysign(<vscale x 2 x float> %a, <vscale x 2 x float> splat (float 7.0))\n  ret <vscale x 2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 2 x float> @llvm.copysign.nxv2f32(<vscale x 2 x float> %a, <vscale x 2 x float> splat (float 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x float> %r"
 },
 {
  "instr": "copysign",
  "ty": "<vscale x 4 x float>",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "mov z2.s, #0x7fffffff\nbsl z0.d, z0.d, z1.d, z2.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x float> (<vscale x 4 x float>, <vscale x 4 x float>) (in function: test)",
  "ll": "define <vscale x 4 x float> @test(<vscale x 4 x float> %a, <vscale x 4 x float> %b) {\n  %r = call <vscale x 4 x float> @llvm.copysign(<vscale x 4 x float> %a, <vscale x 4 x float> %b)\n  ret <vscale x 4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 4 x float> @llvm.copysign.nxv4f32(<vscale x 4 x float> %a, <vscale x 4 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x float> %r"
 },
 {
  "instr": "copysign",
  "ty": "<vscale x 4 x float>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 3,
  "gisize": -1,
  "extrasize": 0,
  "asm": "mov z2.s, #0x7fffffff\nmov z1.s, s1\nbsl z0.d, z0.d, z1.d, z2.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x float> (<vscale x 4 x float>, float) (in function: test)",
  "ll": "define <vscale x 4 x float> @test(<vscale x 4 x float> %a, float %bs) {\n  %i = insertelement <vscale x 4 x float> poison, float %bs, i64 0\n  %b = shufflevector <vscale x 4 x float> %i, <vscale x 4 x float> poison, <vscale x 4 x i32> zeroinitializer\n  %r = call <vscale x 4 x float> @llvm.copysign(<vscale x 4 x float> %a, <vscale x 4 x float> %b)\n  ret <vscale x 4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 4 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <vscale x 4 x float> %i, <vscale x 4 x float> poison, <vscale x 4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 4 x float> @llvm.copysign.nxv4f32(<vscale x 4 x float> %a, <vscale x 4 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x float> %r"
 },
 {
  "instr": "copysign",
  "ty": "<vscale x 4 x float>",
  "variant": "binopconstsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.s\nfabs z0.s, p0/m, z0.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x float> (<vscale x 4 x float>) (in function: test)",
  "ll": "define <vscale x 4 x float> @test(<vscale x 4 x float> %a) {\n  %r = call <vscale x 4 x float> @llvm.copysign(<vscale x 4 x float> %a, <vscale x 4 x float> splat (float 7.0))\n  ret <vscale x 4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 4 x float> @llvm.copysign.nxv4f32(<vscale x 4 x float> %a, <vscale x 4 x float> splat (float 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x float> %r"
 },
 {
  "instr": "copysign",
  "ty": "<vscale x 8 x float>",
  "variant": "binop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 3,
  "gisize": -1,
  "extrasize": 0,
  "asm": "mov z4.s, #0x7fffffff\nbsl z0.d, z0.d, z2.d, z4.d\nbsl z1.d, z1.d, z3.d, z4.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x float> (<vscale x 8 x float>, <vscale x 8 x float>) (in function: test)",
  "ll": "define <vscale x 8 x float> @test(<vscale x 8 x float> %a, <vscale x 8 x float> %b) {\n  %r = call <vscale x 8 x float> @llvm.copysign(<vscale x 8 x float> %a, <vscale x 8 x float> %b)\n  ret <vscale x 8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <vscale x 8 x float> @llvm.copysign.nxv8f32(<vscale x 8 x float> %a, <vscale x 8 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x float> %r"
 },
 {
  "instr": "copysign",
  "ty": "<vscale x 8 x float>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 6,
  "lat": 6,
  "sizelat": 6,
  "size": 4,
  "gisize": -1,
  "extrasize": 0,
  "asm": "mov z3.s, #0x7fffffff\nmov z2.s, s2\nbsl z0.d, z0.d, z2.d, z3.d\nbsl z1.d, z1.d, z2.d, z3.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x float> (<vscale x 8 x float>, float) (in function: test)",
  "ll": "define <vscale x 8 x float> @test(<vscale x 8 x float> %a, float %bs) {\n  %i = insertelement <vscale x 8 x float> poison, float %bs, i64 0\n  %b = shufflevector <vscale x 8 x float> %i, <vscale x 8 x float> poison, <vscale x 8 x i32> zeroinitializer\n  %r = call <vscale x 8 x float> @llvm.copysign(<vscale x 8 x float> %a, <vscale x 8 x float> %b)\n  ret <vscale x 8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 8 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <vscale x 8 x float> %i, <vscale x 8 x float> poison, <vscale x 8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <vscale x 8 x float> @llvm.copysign.nxv8f32(<vscale x 8 x float> %a, <vscale x 8 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x float> %r"
 },
 {
  "instr": "copysign",
  "ty": "<vscale x 8 x float>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.s\nfabs z0.s, p0/m, z0.s\nfabs z1.s, p0/m, z1.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x float> (<vscale x 8 x float>) (in function: test)",
  "ll": "define <vscale x 8 x float> @test(<vscale x 8 x float> %a) {\n  %r = call <vscale x 8 x float> @llvm.copysign(<vscale x 8 x float> %a, <vscale x 8 x float> splat (float 7.0))\n  ret <vscale x 8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <vscale x 8 x float> @llvm.copysign.nxv8f32(<vscale x 8 x float> %a, <vscale x 8 x float> splat (float 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x float> %r"
 },
 {
  "instr": "copysign",
  "ty": "<vscale x 2 x double>",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "mov z2.d, #0x7fffffffffffffff\nbsl z0.d, z0.d, z1.d, z2.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x double> (<vscale x 2 x double>, <vscale x 2 x double>) (in function: test)",
  "ll": "define <vscale x 2 x double> @test(<vscale x 2 x double> %a, <vscale x 2 x double> %b) {\n  %r = call <vscale x 2 x double> @llvm.copysign(<vscale x 2 x double> %a, <vscale x 2 x double> %b)\n  ret <vscale x 2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 2 x double> @llvm.copysign.nxv2f64(<vscale x 2 x double> %a, <vscale x 2 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x double> %r"
 },
 {
  "instr": "copysign",
  "ty": "<vscale x 2 x double>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 3,
  "gisize": -1,
  "extrasize": 0,
  "asm": "mov z2.d, #0x7fffffffffffffff\nmov z1.d, d1\nbsl z0.d, z0.d, z1.d, z2.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x double> (<vscale x 2 x double>, double) (in function: test)",
  "ll": "define <vscale x 2 x double> @test(<vscale x 2 x double> %a, double %bs) {\n  %i = insertelement <vscale x 2 x double> poison, double %bs, i64 0\n  %b = shufflevector <vscale x 2 x double> %i, <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer\n  %r = call <vscale x 2 x double> @llvm.copysign(<vscale x 2 x double> %a, <vscale x 2 x double> %b)\n  ret <vscale x 2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 2 x double> poison, double %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <vscale x 2 x double> %i, <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 2 x double> @llvm.copysign.nxv2f64(<vscale x 2 x double> %a, <vscale x 2 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x double> %r"
 },
 {
  "instr": "copysign",
  "ty": "<vscale x 2 x double>",
  "variant": "binopconstsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.d\nfabs z0.d, p0/m, z0.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x double> (<vscale x 2 x double>) (in function: test)",
  "ll": "define <vscale x 2 x double> @test(<vscale x 2 x double> %a) {\n  %r = call <vscale x 2 x double> @llvm.copysign(<vscale x 2 x double> %a, <vscale x 2 x double> splat (double 7.0))\n  ret <vscale x 2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 2 x double> @llvm.copysign.nxv2f64(<vscale x 2 x double> %a, <vscale x 2 x double> splat (double 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x double> %r"
 },
 {
  "instr": "copysign",
  "ty": "<vscale x 4 x double>",
  "variant": "binop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 3,
  "gisize": -1,
  "extrasize": 0,
  "asm": "mov z4.d, #0x7fffffffffffffff\nbsl z0.d, z0.d, z2.d, z4.d\nbsl z1.d, z1.d, z3.d, z4.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x double> (<vscale x 4 x double>, <vscale x 4 x double>) (in function: test)",
  "ll": "define <vscale x 4 x double> @test(<vscale x 4 x double> %a, <vscale x 4 x double> %b) {\n  %r = call <vscale x 4 x double> @llvm.copysign(<vscale x 4 x double> %a, <vscale x 4 x double> %b)\n  ret <vscale x 4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <vscale x 4 x double> @llvm.copysign.nxv4f64(<vscale x 4 x double> %a, <vscale x 4 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x double> %r"
 },
 {
  "instr": "copysign",
  "ty": "<vscale x 4 x double>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 6,
  "lat": 6,
  "sizelat": 6,
  "size": 4,
  "gisize": -1,
  "extrasize": 0,
  "asm": "mov z3.d, #0x7fffffffffffffff\nmov z2.d, d2\nbsl z0.d, z0.d, z2.d, z3.d\nbsl z1.d, z1.d, z2.d, z3.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x double> (<vscale x 4 x double>, double) (in function: test)",
  "ll": "define <vscale x 4 x double> @test(<vscale x 4 x double> %a, double %bs) {\n  %i = insertelement <vscale x 4 x double> poison, double %bs, i64 0\n  %b = shufflevector <vscale x 4 x double> %i, <vscale x 4 x double> poison, <vscale x 4 x i32> zeroinitializer\n  %r = call <vscale x 4 x double> @llvm.copysign(<vscale x 4 x double> %a, <vscale x 4 x double> %b)\n  ret <vscale x 4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 4 x double> poison, double %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <vscale x 4 x double> %i, <vscale x 4 x double> poison, <vscale x 4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <vscale x 4 x double> @llvm.copysign.nxv4f64(<vscale x 4 x double> %a, <vscale x 4 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x double> %r"
 },
 {
  "instr": "copysign",
  "ty": "<vscale x 4 x double>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.d\nfabs z0.d, p0/m, z0.d\nfabs z1.d, p0/m, z1.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x double> (<vscale x 4 x double>) (in function: test)",
  "ll": "define <vscale x 4 x double> @test(<vscale x 4 x double> %a) {\n  %r = call <vscale x 4 x double> @llvm.copysign(<vscale x 4 x double> %a, <vscale x 4 x double> splat (double 7.0))\n  ret <vscale x 4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <vscale x 4 x double> @llvm.copysign.nxv4f64(<vscale x 4 x double> %a, <vscale x 4 x double> splat (double 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x double> %r"
 },
 {
  "instr": "pow",
  "ty": "half",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 6,
  "gisize": 6,
  "extrasize": 0,
  "asm": "str x30, [sp, #-16]!                // 8-byte Folded Spill\nfcvt s0, h0\nfcvt s1, h1\nbl powf\nfcvt h0, s0\nldr x30, [sp], #16                  // 8-byte Folded Reload\nret",
  "giasm": "str x30, [sp, #-16]!                // 8-byte Folded Spill\nfcvt s0, h0\nfcvt s1, h1\nbl powf\nfcvt h0, s0\nldr x30, [sp], #16                  // 8-byte Folded Reload\nret",
  "ll": "define half @test(half %a, half %b) {\n  %r = call half @llvm.pow(half %a, half %b)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call half @llvm.pow.f16(half %a, half %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "pow",
  "ty": "half",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 6,
  "gisize": 7,
  "extrasize": 0,
  "asm": "str x30, [sp, #-16]!                // 8-byte Folded Spill\nfcvt s0, h0\nfmov s1, #7.00000000\nbl powf\nfcvt h0, s0\nldr x30, [sp], #16                  // 8-byte Folded Reload\nret",
  "giasm": "str x30, [sp, #-16]!                // 8-byte Folded Spill\nfmov h1, #7.00000000\nfcvt s0, h0\nfcvt s1, h1\nbl powf\nfcvt h0, s0\nldr x30, [sp], #16                  // 8-byte Folded Reload\nret",
  "ll": "define half @test(half %a) {\n  %r = call half @llvm.pow(half %a, half 7.0)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call half @llvm.pow.f16(half %a, half 0xH4700)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "pow",
  "ty": "float",
  "variant": "binop",
  "codesize": 1,
  "thru": 10,
  "lat": 10,
  "sizelat": 10,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "b powf",
  "giasm": "b powf",
  "ll": "define float @test(float %a, float %b) {\n  %r = call float @llvm.pow(float %a, float %b)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call float @llvm.pow.f32(float %a, float %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "pow",
  "ty": "float",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 10,
  "lat": 10,
  "sizelat": 10,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov s1, #7.00000000\nb powf",
  "giasm": "fmov s1, #7.00000000\nb powf",
  "ll": "define float @test(float %a) {\n  %r = call float @llvm.pow(float %a, float 7.0)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call float @llvm.pow.f32(float %a, float 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "pow",
  "ty": "double",
  "variant": "binop",
  "codesize": 1,
  "thru": 10,
  "lat": 10,
  "sizelat": 10,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "b pow",
  "giasm": "b pow",
  "ll": "define double @test(double %a, double %b) {\n  %r = call double @llvm.pow(double %a, double %b)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call double @llvm.pow.f64(double %a, double %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "pow",
  "ty": "double",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 10,
  "lat": 10,
  "sizelat": 10,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov d1, #7.00000000\nb pow",
  "giasm": "fmov d1, #7.00000000\nb pow",
  "ll": "define double @test(double %a) {\n  %r = call double @llvm.pow(double %a, double 7.0)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call double @llvm.pow.f64(double %a, double 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "pow",
  "ty": "<4 x half>",
  "variant": "binop",
  "codesize": 22,
  "thru": 22,
  "lat": 22,
  "sizelat": 22,
  "size": 42,
  "gisize": 44,
  "extrasize": 0,
  "asm": "sub sp, sp, #64\nstr x30, [sp, #48]                  // 8-byte Folded Spill\nmov h3, v0.h[1]\nmov h2, v1.h[1]\nstp q0, q1, [sp, #16]               // 32-byte Folded Spill\nfcvt s0, h3\nfcvt s1, h2\nbl powf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp]                        // 16-byte Folded Spill\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl powf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nfcvt h3, s0\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nmov h1, v1.h[2]\nmov h2, v0.h[2]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov v3.h[1], v0.h[0]\nfcvt s0, h1\nfcvt s1, h2\nstr q3, [sp]                        // 16-byte Folded Spill\nbl powf\nldp q1, q2, [sp, #16]               // 32-byte Folded Reload\nfcvt h0, s0\nldr q3, [sp]                        // 16-byte Folded Reload\nmov h1, v1.h[3]\nmov h2, v2.h[3]\nmov v3.h[2], v0.h[0]\nfcvt s0, h1\nfcvt s1, h2\nstr q3, [sp]                        // 16-byte Folded Spill\nbl powf\nfcvt h1, s0\nldr q0, [sp]                        // 16-byte Folded Reload\nldr x30, [sp, #48]                  // 8-byte Folded Reload\nmov v0.h[3], v1.h[0]\nadd sp, sp, #64\nret",
  "giasm": "sub sp, sp, #112\nstp d13, d12, [sp, #48]             // 16-byte Folded Spill\nstp d11, d10, [sp, #64]             // 16-byte Folded Spill\nstp d9, d8, [sp, #80]               // 16-byte Folded Spill\nstr x30, [sp, #96]                  // 8-byte Folded Spill\nmov h8, v0.h[1]\nmov h9, v0.h[2]\nmov h10, v0.h[3]\nmov h11, v1.h[1]\nmov h12, v1.h[2]\nmov h13, v1.h[3]\nfcvt s0, h0\nfcvt s1, h1\nbl powf\nfcvt s2, h8\nfcvt h0, s0\nfcvt s1, h11\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nfcvt s2, h9\nfcvt h0, s0\nfcvt s1, h12\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nfcvt s2, h10\nfcvt h0, s0\nfcvt s1, h13\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nldp q3, q2, [sp]                    // 32-byte Folded Reload\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nldp d9, d8, [sp, #80]               // 16-byte Folded Reload\nldp d11, d10, [sp, #64]             // 16-byte Folded Reload\nldr x30, [sp, #96]                  // 8-byte Folded Reload\nmov v1.h[1], v3.h[0]\nldp d13, d12, [sp, #48]             // 16-byte Folded Reload\nmov v1.h[2], v2.h[0]\nmov v1.h[3], v0.h[0]\nmov v0.16b, v1.16b\nadd sp, sp, #112\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, <4 x half> %b) {\n  %r = call <4 x half> @llvm.pow(<4 x half> %a, <4 x half> %b)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 22 for instruction:   %r = call <4 x half> @llvm.pow.v4f16(<4 x half> %a, <4 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "pow",
  "ty": "<4 x half>",
  "variant": "binopconst",
  "codesize": 16,
  "thru": 16,
  "lat": 16,
  "sizelat": 16,
  "size": 37,
  "gisize": 45,
  "extrasize": 0,
  "asm": "sub sp, sp, #48\nstr x30, [sp, #32]                  // 8-byte Folded Spill\nmov h1, v0.h[1]\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfcvt s0, h1\nfmov s1, #6.00000000\nbl powf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nfmov s1, #7.00000000\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nfcvt h2, s0\nmov h1, v1.h[2]\nfcvt s0, h1\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v2.h[1], v1.h[0]\nfmov s1, #7.00000000\nstr q2, [sp]                        // 16-byte Folded Spill\nbl powf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nfcvt h2, s0\nmov h1, v1.h[3]\nfcvt s0, h1\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v1.h[2], v2.h[0]\nstr q1, [sp]                        // 16-byte Folded Spill\nfmov s1, #6.00000000\nbl powf\nfcvt h1, s0\nldr q0, [sp]                        // 16-byte Folded Reload\nldr x30, [sp, #32]                  // 8-byte Folded Reload\nmov v0.h[3], v1.h[0]\nadd sp, sp, #48\nret",
  "giasm": "sub sp, sp, #96\nstr d12, [sp, #48]                  // 8-byte Folded Spill\nstp d11, d10, [sp, #56]             // 16-byte Folded Spill\nstp d9, d8, [sp, #72]               // 16-byte Folded Spill\nstr x30, [sp, #88]                  // 8-byte Folded Spill\nfmov h1, #7.00000000\nmov h9, v0.h[1]\nmov h10, v0.h[2]\nmov h11, v0.h[3]\nfcvt s0, h0\nfmov h12, #6.00000000\nfcvt s8, h1\nfmov s1, s8\nbl powf\nfcvt s1, h9\nfcvt h0, s0\nfcvt s9, h12\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s9\nbl powf\nfcvt s1, h10\nfcvt h0, s0\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s8\nbl powf\nfcvt s1, h11\nfcvt h0, s0\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s9\nbl powf\nldp q3, q2, [sp]                    // 32-byte Folded Reload\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nldp d9, d8, [sp, #72]               // 16-byte Folded Reload\nldp d11, d10, [sp, #56]             // 16-byte Folded Reload\nldr x30, [sp, #88]                  // 8-byte Folded Reload\nmov v1.h[1], v3.h[0]\nldr d12, [sp, #48]                  // 8-byte Folded Reload\nmov v1.h[2], v2.h[0]\nmov v1.h[3], v0.h[0]\nmov v0.16b, v1.16b\nadd sp, sp, #96\nret",
  "ll": "define <4 x half> @test(<4 x half> %a) {\n  %r = call <4 x half> @llvm.pow(<4 x half> %a, <4 x half> <half 7.0, half 6.0, half 7.0, half 6.0>)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 16 for instruction:   %r = call <4 x half> @llvm.pow.v4f16(<4 x half> %a, <4 x half> <half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "pow",
  "ty": "<4 x half>",
  "variant": "binopsplat",
  "codesize": 23,
  "thru": 23,
  "lat": 23,
  "sizelat": 23,
  "size": 40,
  "gisize": 45,
  "extrasize": 0,
  "asm": "sub sp, sp, #48\nstr d8, [sp, #32]                   // 8-byte Folded Spill\nstr x30, [sp, #40]                  // 8-byte Folded Spill\nmov h2, v0.h[1]\nfcvt s8, h1\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfcvt s0, h2\nfmov s1, s8\nbl powf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nfcvt h0, s0\nfcvt s1, h1\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s8\nbl powf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nfcvt h2, s0\nmov h1, v1.h[2]\nfcvt s0, h1\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v2.h[1], v1.h[0]\nfmov s1, s8\nstr q2, [sp]                        // 16-byte Folded Spill\nbl powf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nfcvt h2, s0\nmov h1, v1.h[3]\nfcvt s0, h1\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v1.h[2], v2.h[0]\nstr q1, [sp]                        // 16-byte Folded Spill\nfmov s1, s8\nbl powf\nfcvt h1, s0\nldr q0, [sp]                        // 16-byte Folded Reload\nldr x30, [sp, #40]                  // 8-byte Folded Reload\nldr d8, [sp, #32]                   // 8-byte Folded Reload\nmov v0.h[3], v1.h[0]\nadd sp, sp, #48\nret",
  "giasm": "sub sp, sp, #112\nstp d13, d12, [sp, #48]             // 16-byte Folded Spill\nstp d11, d10, [sp, #64]             // 16-byte Folded Spill\nstp d9, d8, [sp, #80]               // 16-byte Folded Spill\nstr x30, [sp, #96]                  // 8-byte Folded Spill\nmov h8, v0.h[1]\nmov h9, v0.h[2]\nmov h10, v0.h[3]\ndup v1.4h, v1.h[0]\nfcvt s0, h0\nmov h11, v1.h[1]\nmov h12, v1.h[2]\nmov h13, v1.h[3]\nfcvt s1, h1\nbl powf\nfcvt s2, h8\nfcvt h0, s0\nfcvt s1, h11\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nfcvt s2, h9\nfcvt h0, s0\nfcvt s1, h12\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nfcvt s2, h10\nfcvt h0, s0\nfcvt s1, h13\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nldp q3, q2, [sp]                    // 32-byte Folded Reload\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nldp d9, d8, [sp, #80]               // 16-byte Folded Reload\nldp d11, d10, [sp, #64]             // 16-byte Folded Reload\nldr x30, [sp, #96]                  // 8-byte Folded Reload\nmov v1.h[1], v3.h[0]\nldp d13, d12, [sp, #48]             // 16-byte Folded Reload\nmov v1.h[2], v2.h[0]\nmov v1.h[3], v0.h[0]\nmov v0.16b, v1.16b\nadd sp, sp, #112\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, half %bs) {\n  %i = insertelement <4 x half> poison, half %bs, i64 0\n  %b = shufflevector <4 x half> %i, <4 x half> poison, <4 x i32> zeroinitializer\n  %r = call <4 x half> @llvm.pow(<4 x half> %a, <4 x half> %b)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <4 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <4 x half> %i, <4 x half> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 22 for instruction:   %r = call <4 x half> @llvm.pow.v4f16(<4 x half> %a, <4 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "pow",
  "ty": "<4 x half>",
  "variant": "binopconstsplat",
  "codesize": 16,
  "thru": 16,
  "lat": 16,
  "sizelat": 16,
  "size": 37,
  "gisize": 41,
  "extrasize": 0,
  "asm": "sub sp, sp, #48\nstr x30, [sp, #32]                  // 8-byte Folded Spill\nmov h1, v0.h[1]\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfcvt s0, h1\nfmov s1, #7.00000000\nbl powf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nfmov s1, #7.00000000\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nfcvt h2, s0\nmov h1, v1.h[2]\nfcvt s0, h1\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v2.h[1], v1.h[0]\nfmov s1, #7.00000000\nstr q2, [sp]                        // 16-byte Folded Spill\nbl powf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nfcvt h2, s0\nmov h1, v1.h[3]\nfcvt s0, h1\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v1.h[2], v2.h[0]\nstr q1, [sp]                        // 16-byte Folded Spill\nfmov s1, #7.00000000\nbl powf\nfcvt h1, s0\nldr q0, [sp]                        // 16-byte Folded Reload\nldr x30, [sp, #32]                  // 8-byte Folded Reload\nmov v0.h[3], v1.h[0]\nadd sp, sp, #48\nret",
  "giasm": "sub sp, sp, #96\nstp d11, d10, [sp, #48]             // 16-byte Folded Spill\nstp d9, d8, [sp, #64]               // 16-byte Folded Spill\nstr x30, [sp, #80]                  // 8-byte Folded Spill\nfmov h1, #7.00000000\nmov h9, v0.h[1]\nmov h10, v0.h[2]\nmov h11, v0.h[3]\nfcvt s0, h0\nfcvt s8, h1\nfmov s1, s8\nbl powf\nfcvt s1, h9\nfcvt h0, s0\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s8\nbl powf\nfcvt s1, h10\nfcvt h0, s0\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s8\nbl powf\nfcvt s1, h11\nfcvt h0, s0\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s8\nbl powf\nldp q3, q2, [sp]                    // 32-byte Folded Reload\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nldp d9, d8, [sp, #64]               // 16-byte Folded Reload\nldp d11, d10, [sp, #48]             // 16-byte Folded Reload\nldr x30, [sp, #80]                  // 8-byte Folded Reload\nmov v1.h[1], v3.h[0]\nmov v1.h[2], v2.h[0]\nmov v1.h[3], v0.h[0]\nmov v0.16b, v1.16b\nadd sp, sp, #96\nret",
  "ll": "define <4 x half> @test(<4 x half> %a) {\n  %r = call <4 x half> @llvm.pow(<4 x half> %a, <4 x half> splat (half 7.0))\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 16 for instruction:   %r = call <4 x half> @llvm.pow.v4f16(<4 x half> %a, <4 x half> splat (half 0xH4700))\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "pow",
  "ty": "<8 x half>",
  "variant": "binop",
  "codesize": 50,
  "thru": 50,
  "lat": 50,
  "sizelat": 50,
  "size": 79,
  "gisize": 97,
  "extrasize": 0,
  "asm": "sub sp, sp, #64\nstr x30, [sp, #48]                  // 8-byte Folded Spill\nmov h3, v0.h[1]\nmov h2, v1.h[1]\nstp q0, q1, [sp]                    // 32-byte Folded Spill\nfcvt s0, h3\nfcvt s1, h2\nbl powf\nfcvt h0, s0\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldp q0, q1, [sp]                    // 32-byte Folded Reload\nfcvt s0, h0\nfcvt s1, h1\nbl powf\nfcvt h0, s0\nldp q1, q2, [sp, #16]               // 32-byte Folded Reload\nmov h1, v1.h[2]\nmov v0.h[1], v2.h[0]\nfcvt s1, h1\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[2]\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[2], v0.h[0]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nldp q0, q1, [sp]                    // 32-byte Folded Reload\nmov h0, v0.h[3]\nmov h1, v1.h[3]\nfcvt s0, h0\nfcvt s1, h1\nbl powf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[3], v0.h[0]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nldp q0, q1, [sp]                    // 32-byte Folded Reload\nmov h0, v0.h[4]\nmov h1, v1.h[4]\nfcvt s0, h0\nfcvt s1, h1\nbl powf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[4], v0.h[0]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nldp q0, q1, [sp]                    // 32-byte Folded Reload\nmov h0, v0.h[5]\nmov h1, v1.h[5]\nfcvt s0, h0\nfcvt s1, h1\nbl powf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[5], v0.h[0]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nldp q0, q1, [sp]                    // 32-byte Folded Reload\nmov h0, v0.h[6]\nmov h1, v1.h[6]\nfcvt s0, h0\nfcvt s1, h1\nbl powf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[6], v0.h[0]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nldp q0, q1, [sp]                    // 32-byte Folded Reload\nmov h0, v0.h[7]\nmov h1, v1.h[7]\nfcvt s0, h0\nfcvt s1, h1\nbl powf\nfcvt h1, s0\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nldr x30, [sp, #48]                  // 8-byte Folded Reload\nmov v0.h[7], v1.h[0]\nadd sp, sp, #64\nret",
  "giasm": "sub sp, sp, #192\nstp d15, d14, [sp, #112]            // 16-byte Folded Spill\nstp d13, d12, [sp, #128]            // 16-byte Folded Spill\nstp d11, d10, [sp, #144]            // 16-byte Folded Spill\nstp d9, d8, [sp, #160]              // 16-byte Folded Spill\nstr x30, [sp, #176]                 // 8-byte Folded Spill\nmov h2, v0.h[5]\nmov h11, v0.h[1]\nmov h12, v0.h[2]\nmov h13, v0.h[3]\nmov h14, v0.h[4]\nmov h8, v1.h[1]\nmov h9, v1.h[2]\nmov h10, v1.h[3]\nmov h15, v1.h[4]\nstr h2, [sp, #48]                   // 2-byte Folded Spill\nmov h2, v0.h[6]\nstr h2, [sp, #64]                   // 2-byte Folded Spill\nmov h2, v0.h[7]\nfcvt s0, h0\nstr h2, [sp, #96]                   // 2-byte Folded Spill\nmov h2, v1.h[5]\nstr h2, [sp, #186]                  // 2-byte Folded Spill\nmov h2, v1.h[6]\nstr h2, [sp, #188]                  // 2-byte Folded Spill\nmov h2, v1.h[7]\nfcvt s1, h1\nstr h2, [sp, #190]                  // 2-byte Folded Spill\nbl powf\nfcvt s2, h11\nfcvt h0, s0\nfcvt s1, h8\nstr q0, [sp, #80]                   // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nfcvt s2, h12\nfcvt h0, s0\nfcvt s1, h9\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nfcvt s2, h13\nfcvt h0, s0\nfcvt s1, h10\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nfcvt s2, h14\nfcvt h0, s0\nfcvt s1, h15\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nldr h1, [sp, #48]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nldr h0, [sp, #186]                  // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl powf\nldr h1, [sp, #64]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #64]                   // 16-byte Folded Spill\nldr h0, [sp, #188]                  // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl powf\nldr h1, [sp, #96]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #96]                   // 16-byte Folded Spill\nldr h0, [sp, #190]                  // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl powf\nldp q2, q3, [sp, #16]               // 32-byte Folded Reload\nfcvt h0, s0\nldr q1, [sp, #80]                   // 16-byte Folded Reload\nldp d9, d8, [sp, #160]              // 16-byte Folded Reload\nldp d11, d10, [sp, #144]            // 16-byte Folded Reload\nldr x30, [sp, #176]                 // 8-byte Folded Reload\nmov v1.h[1], v3.h[0]\nldp d13, d12, [sp, #128]            // 16-byte Folded Reload\nldp d15, d14, [sp, #112]            // 16-byte Folded Reload\nmov v1.h[2], v2.h[0]\nldr q2, [sp]                        // 16-byte Folded Reload\nmov v1.h[3], v2.h[0]\nldp q3, q2, [sp, #48]               // 32-byte Folded Reload\nmov v1.h[4], v3.h[0]\nmov v1.h[5], v2.h[0]\nldr q2, [sp, #96]                   // 16-byte Folded Reload\nmov v1.h[6], v2.h[0]\nmov v1.h[7], v0.h[0]\nmov v0.16b, v1.16b\nadd sp, sp, #192\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, <8 x half> %b) {\n  %r = call <8 x half> @llvm.pow(<8 x half> %a, <8 x half> %b)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 50 for instruction:   %r = call <8 x half> @llvm.pow.v8f16(<8 x half> %a, <8 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "pow",
  "ty": "<8 x half>",
  "variant": "binopconst",
  "codesize": 36,
  "thru": 36,
  "lat": 36,
  "sizelat": 36,
  "size": 72,
  "gisize": 83,
  "extrasize": 0,
  "asm": "sub sp, sp, #48\nstr x30, [sp, #32]                  // 8-byte Folded Spill\nmov h1, v0.h[1]\nstr q0, [sp]                        // 16-byte Folded Spill\nfcvt s0, h1\nfmov s1, #6.00000000\nbl powf\nfcvt h0, s0\nfmov s1, #7.00000000\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v0.h[1], v1.h[0]\nfmov s1, #7.00000000\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[2]\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[2], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[3]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #6.00000000\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[3], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[4]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[4], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[5]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #6.00000000\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[5], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[6]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[6], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[7]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #6.00000000\nfcvt s0, h0\nbl powf\nfcvt h1, s0\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nldr x30, [sp, #32]                  // 8-byte Folded Reload\nmov v0.h[7], v1.h[0]\nadd sp, sp, #48\nret",
  "giasm": "sub sp, sp, #192\nstp d15, d14, [sp, #112]            // 16-byte Folded Spill\nstp d13, d12, [sp, #128]            // 16-byte Folded Spill\nstp d11, d10, [sp, #144]            // 16-byte Folded Spill\nstp d9, d8, [sp, #160]              // 16-byte Folded Spill\nstr x30, [sp, #176]                 // 8-byte Folded Spill\nfmov h1, #7.00000000\nmov h9, v0.h[1]\nmov h11, v0.h[2]\nmov h12, v0.h[3]\nmov h13, v0.h[4]\nmov h14, v0.h[5]\nmov h15, v0.h[6]\nmov h2, v0.h[7]\nfcvt s0, h0\nfcvt s8, h1\nfmov h10, #6.00000000\nstr h2, [sp, #96]                   // 2-byte Folded Spill\nfmov s1, s8\nbl powf\nfcvt s1, h9\nfcvt h0, s0\nfcvt s9, h10\nstr q0, [sp, #80]                   // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s9\nbl powf\nfcvt s1, h11\nfcvt h0, s0\nstr q0, [sp, #64]                   // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s8\nbl powf\nfcvt s1, h12\nfcvt h0, s0\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s9\nbl powf\nfcvt s1, h13\nfcvt h0, s0\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s8\nbl powf\nfcvt s1, h14\nfcvt h0, s0\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s9\nbl powf\nfcvt s1, h15\nfcvt h0, s0\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s8\nbl powf\nldr h1, [sp, #96]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s1, h1\nstr q0, [sp, #96]                   // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s9\nbl powf\nldp q2, q1, [sp, #64]               // 32-byte Folded Reload\nfcvt h0, s0\nldp d9, d8, [sp, #160]              // 16-byte Folded Reload\nldr x30, [sp, #176]                 // 8-byte Folded Reload\nldp d11, d10, [sp, #144]            // 16-byte Folded Reload\nmov v1.h[1], v2.h[0]\nldp q2, q3, [sp, #32]               // 32-byte Folded Reload\nldp d13, d12, [sp, #128]            // 16-byte Folded Reload\nldp d15, d14, [sp, #112]            // 16-byte Folded Reload\nmov v1.h[2], v3.h[0]\nmov v1.h[3], v2.h[0]\nldp q2, q3, [sp]                    // 32-byte Folded Reload\nmov v1.h[4], v3.h[0]\nmov v1.h[5], v2.h[0]\nldr q2, [sp, #96]                   // 16-byte Folded Reload\nmov v1.h[6], v2.h[0]\nmov v1.h[7], v0.h[0]\nmov v0.16b, v1.16b\nadd sp, sp, #192\nret",
  "ll": "define <8 x half> @test(<8 x half> %a) {\n  %r = call <8 x half> @llvm.pow(<8 x half> %a, <8 x half> <half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0>)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 36 for instruction:   %r = call <8 x half> @llvm.pow.v8f16(<8 x half> %a, <8 x half> <half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "pow",
  "ty": "<8 x half>",
  "variant": "binopsplat",
  "codesize": 51,
  "thru": 51,
  "lat": 51,
  "sizelat": 51,
  "size": 75,
  "gisize": 98,
  "extrasize": 0,
  "asm": "sub sp, sp, #48\nstr d8, [sp, #32]                   // 8-byte Folded Spill\nstr x30, [sp, #40]                  // 8-byte Folded Spill\nmov h2, v0.h[1]\nfcvt s8, h1\nstr q0, [sp]                        // 16-byte Folded Spill\nfcvt s0, h2\nfmov s1, s8\nbl powf\nfcvt h0, s0\nfmov s1, s8\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v0.h[1], v1.h[0]\nfmov s1, s8\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[2]\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[2], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[3]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, s8\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[3], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[4]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, s8\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[4], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[5]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, s8\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[5], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[6]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, s8\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[6], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[7]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, s8\nfcvt s0, h0\nbl powf\nfcvt h1, s0\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nldr x30, [sp, #40]                  // 8-byte Folded Reload\nldr d8, [sp, #32]                   // 8-byte Folded Reload\nmov v0.h[7], v1.h[0]\nadd sp, sp, #48\nret",
  "giasm": "sub sp, sp, #192\nstp d15, d14, [sp, #112]            // 16-byte Folded Spill\nstp d13, d12, [sp, #128]            // 16-byte Folded Spill\nstp d11, d10, [sp, #144]            // 16-byte Folded Spill\nstp d9, d8, [sp, #160]              // 16-byte Folded Spill\nstr x30, [sp, #176]                 // 8-byte Folded Spill\nmov h2, v0.h[5]\nmov h11, v0.h[1]\nmov h12, v0.h[2]\ndup v1.8h, v1.h[0]\nmov h13, v0.h[3]\nmov h14, v0.h[4]\nstr h2, [sp, #48]                   // 2-byte Folded Spill\nmov h2, v0.h[6]\nmov h8, v1.h[1]\nmov h9, v1.h[2]\nmov h10, v1.h[3]\nmov h15, v1.h[4]\nstr h2, [sp, #64]                   // 2-byte Folded Spill\nmov h2, v0.h[7]\nfcvt s0, h0\nstr h2, [sp, #96]                   // 2-byte Folded Spill\nmov h2, v1.h[5]\nstr h2, [sp, #186]                  // 2-byte Folded Spill\nmov h2, v1.h[6]\nstr h2, [sp, #188]                  // 2-byte Folded Spill\nmov h2, v1.h[7]\nfcvt s1, h1\nstr h2, [sp, #190]                  // 2-byte Folded Spill\nbl powf\nfcvt s2, h11\nfcvt h0, s0\nfcvt s1, h8\nstr q0, [sp, #80]                   // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nfcvt s2, h12\nfcvt h0, s0\nfcvt s1, h9\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nfcvt s2, h13\nfcvt h0, s0\nfcvt s1, h10\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nfcvt s2, h14\nfcvt h0, s0\nfcvt s1, h15\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nldr h1, [sp, #48]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nldr h0, [sp, #186]                  // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl powf\nldr h1, [sp, #64]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #64]                   // 16-byte Folded Spill\nldr h0, [sp, #188]                  // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl powf\nldr h1, [sp, #96]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #96]                   // 16-byte Folded Spill\nldr h0, [sp, #190]                  // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl powf\nldp q2, q3, [sp, #16]               // 32-byte Folded Reload\nfcvt h0, s0\nldr q1, [sp, #80]                   // 16-byte Folded Reload\nldp d9, d8, [sp, #160]              // 16-byte Folded Reload\nldp d11, d10, [sp, #144]            // 16-byte Folded Reload\nldr x30, [sp, #176]                 // 8-byte Folded Reload\nmov v1.h[1], v3.h[0]\nldp d13, d12, [sp, #128]            // 16-byte Folded Reload\nldp d15, d14, [sp, #112]            // 16-byte Folded Reload\nmov v1.h[2], v2.h[0]\nldr q2, [sp]                        // 16-byte Folded Reload\nmov v1.h[3], v2.h[0]\nldp q3, q2, [sp, #48]               // 32-byte Folded Reload\nmov v1.h[4], v3.h[0]\nmov v1.h[5], v2.h[0]\nldr q2, [sp, #96]                   // 16-byte Folded Reload\nmov v1.h[6], v2.h[0]\nmov v1.h[7], v0.h[0]\nmov v0.16b, v1.16b\nadd sp, sp, #192\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, half %bs) {\n  %i = insertelement <8 x half> poison, half %bs, i64 0\n  %b = shufflevector <8 x half> %i, <8 x half> poison, <8 x i32> zeroinitializer\n  %r = call <8 x half> @llvm.pow(<8 x half> %a, <8 x half> %b)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <8 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <8 x half> %i, <8 x half> poison, <8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 50 for instruction:   %r = call <8 x half> @llvm.pow.v8f16(<8 x half> %a, <8 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "pow",
  "ty": "<8 x half>",
  "variant": "binopconstsplat",
  "codesize": 36,
  "thru": 36,
  "lat": 36,
  "sizelat": 36,
  "size": 72,
  "gisize": 79,
  "extrasize": 0,
  "asm": "sub sp, sp, #48\nstr x30, [sp, #32]                  // 8-byte Folded Spill\nmov h1, v0.h[1]\nstr q0, [sp]                        // 16-byte Folded Spill\nfcvt s0, h1\nfmov s1, #7.00000000\nbl powf\nfcvt h0, s0\nfmov s1, #7.00000000\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v0.h[1], v1.h[0]\nfmov s1, #7.00000000\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[2]\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[2], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[3]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[3], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[4]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[4], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[5]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[5], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[6]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[6], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[7]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl powf\nfcvt h1, s0\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nldr x30, [sp, #32]                  // 8-byte Folded Reload\nmov v0.h[7], v1.h[0]\nadd sp, sp, #48\nret",
  "giasm": "sub sp, sp, #192\nstp d15, d14, [sp, #112]            // 16-byte Folded Spill\nstp d13, d12, [sp, #128]            // 16-byte Folded Spill\nstp d11, d10, [sp, #144]            // 16-byte Folded Spill\nstp d9, d8, [sp, #160]              // 16-byte Folded Spill\nstr x30, [sp, #176]                 // 8-byte Folded Spill\nfmov h1, #7.00000000\nmov h9, v0.h[1]\nmov h10, v0.h[2]\nmov h11, v0.h[3]\nmov h12, v0.h[4]\nmov h13, v0.h[5]\nmov h14, v0.h[6]\nmov h15, v0.h[7]\nfcvt s0, h0\nfcvt s8, h1\nfmov s1, s8\nbl powf\nfcvt s1, h9\nfcvt h0, s0\nstr q0, [sp, #96]                   // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s8\nbl powf\nfcvt s1, h10\nfcvt h0, s0\nstr q0, [sp, #80]                   // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s8\nbl powf\nfcvt s1, h11\nfcvt h0, s0\nstr q0, [sp, #64]                   // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s8\nbl powf\nfcvt s1, h12\nfcvt h0, s0\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s8\nbl powf\nfcvt s1, h13\nfcvt h0, s0\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s8\nbl powf\nfcvt s1, h14\nfcvt h0, s0\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s8\nbl powf\nfcvt s1, h15\nfcvt h0, s0\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s8\nbl powf\nldp q2, q1, [sp, #80]               // 32-byte Folded Reload\nfcvt h0, s0\nldp d9, d8, [sp, #160]              // 16-byte Folded Reload\nldr x30, [sp, #176]                 // 8-byte Folded Reload\nldp d11, d10, [sp, #144]            // 16-byte Folded Reload\nmov v1.h[1], v2.h[0]\nldp q2, q3, [sp, #48]               // 32-byte Folded Reload\nldp d13, d12, [sp, #128]            // 16-byte Folded Reload\nldp d15, d14, [sp, #112]            // 16-byte Folded Reload\nmov v1.h[2], v3.h[0]\nmov v1.h[3], v2.h[0]\nldp q2, q3, [sp, #16]               // 32-byte Folded Reload\nmov v1.h[4], v3.h[0]\nmov v1.h[5], v2.h[0]\nldr q2, [sp]                        // 16-byte Folded Reload\nmov v1.h[6], v2.h[0]\nmov v1.h[7], v0.h[0]\nmov v0.16b, v1.16b\nadd sp, sp, #192\nret",
  "ll": "define <8 x half> @test(<8 x half> %a) {\n  %r = call <8 x half> @llvm.pow(<8 x half> %a, <8 x half> splat (half 7.0))\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 36 for instruction:   %r = call <8 x half> @llvm.pow.v8f16(<8 x half> %a, <8 x half> splat (half 0xH4700))\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "pow",
  "ty": "<16 x half>",
  "variant": "binop",
  "codesize": 100,
  "thru": 100,
  "lat": 100,
  "sizelat": 100,
  "size": 163,
  "gisize": 208,
  "extrasize": 0,
  "asm": "sub sp, sp, #96\nstr x30, [sp, #80]                  // 8-byte Folded Spill\nstp q0, q1, [sp]                    // 32-byte Folded Spill\nmov h1, v2.h[1]\nstp q3, q2, [sp, #32]               // 32-byte Folded Spill\nmov h3, v0.h[1]\nfcvt s1, h1\nfcvt s0, h3\nbl powf\nfcvt h0, s0\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nfcvt s1, h1\nstr q0, [sp, #64]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldp q1, q2, [sp, #48]               // 32-byte Folded Reload\nmov h1, v1.h[2]\nmov v0.h[1], v2.h[0]\nfcvt s1, h1\nstr q0, [sp, #64]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[2]\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #64]                   // 16-byte Folded Reload\nmov v1.h[2], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[3]\nstr q1, [sp, #64]                   // 16-byte Folded Spill\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nmov h1, v1.h[3]\nfcvt s0, h0\nfcvt s1, h1\nbl powf\nfcvt h0, s0\nldr q1, [sp, #64]                   // 16-byte Folded Reload\nmov v1.h[3], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[4]\nstr q1, [sp, #64]                   // 16-byte Folded Spill\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nmov h1, v1.h[4]\nfcvt s0, h0\nfcvt s1, h1\nbl powf\nfcvt h0, s0\nldr q1, [sp, #64]                   // 16-byte Folded Reload\nmov v1.h[4], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[5]\nstr q1, [sp, #64]                   // 16-byte Folded Spill\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nmov h1, v1.h[5]\nfcvt s0, h0\nfcvt s1, h1\nbl powf\nfcvt h0, s0\nldr q1, [sp, #64]                   // 16-byte Folded Reload\nmov v1.h[5], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[6]\nstr q1, [sp, #64]                   // 16-byte Folded Spill\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nmov h1, v1.h[6]\nfcvt s0, h0\nfcvt s1, h1\nbl powf\nfcvt h0, s0\nldr q1, [sp, #64]                   // 16-byte Folded Reload\nmov v1.h[6], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[7]\nstr q1, [sp, #64]                   // 16-byte Folded Spill\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nmov h1, v1.h[7]\nfcvt s0, h0\nfcvt s1, h1\nbl powf\nfcvt h0, s0\nldr q1, [sp, #64]                   // 16-byte Folded Reload\nmov v1.h[7], v0.h[0]\nstr q1, [sp, #64]                   // 16-byte Folded Spill\nldp q0, q1, [sp, #16]               // 32-byte Folded Reload\nmov h0, v0.h[1]\nmov h1, v1.h[1]\nfcvt s0, h0\nfcvt s1, h1\nbl powf\nfcvt h0, s0\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nldp q0, q1, [sp, #16]               // 32-byte Folded Reload\nfcvt s0, h0\nfcvt s1, h1\nbl powf\nfcvt h0, s0\nldp q1, q2, [sp, #32]               // 32-byte Folded Reload\nmov h1, v1.h[2]\nmov v0.h[1], v2.h[0]\nfcvt s1, h1\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[2]\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nmov v1.h[2], v0.h[0]\nstr q1, [sp, #48]                   // 16-byte Folded Spill\nldp q0, q1, [sp, #16]               // 32-byte Folded Reload\nmov h0, v0.h[3]\nmov h1, v1.h[3]\nfcvt s0, h0\nfcvt s1, h1\nbl powf\nfcvt h0, s0\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nmov v1.h[3], v0.h[0]\nstr q1, [sp, #48]                   // 16-byte Folded Spill\nldp q0, q1, [sp, #16]               // 32-byte Folded Reload\nmov h0, v0.h[4]\nmov h1, v1.h[4]\nfcvt s0, h0\nfcvt s1, h1\nbl powf\nfcvt h0, s0\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nmov v1.h[4], v0.h[0]\nstr q1, [sp, #48]                   // 16-byte Folded Spill\nldp q0, q1, [sp, #16]               // 32-byte Folded Reload\nmov h0, v0.h[5]\nmov h1, v1.h[5]\nfcvt s0, h0\nfcvt s1, h1\nbl powf\nfcvt h0, s0\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nmov v1.h[5], v0.h[0]\nstr q1, [sp, #48]                   // 16-byte Folded Spill\nldp q0, q1, [sp, #16]               // 32-byte Folded Reload\nmov h0, v0.h[6]\nmov h1, v1.h[6]\nfcvt s0, h0\nfcvt s1, h1\nbl powf\nfcvt h0, s0\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nmov v1.h[6], v0.h[0]\nstr q1, [sp, #48]                   // 16-byte Folded Spill\nldp q0, q1, [sp, #16]               // 32-byte Folded Reload\nmov h0, v0.h[7]\nmov h1, v1.h[7]\nfcvt s0, h0\nfcvt s1, h1\nbl powf\nfmov s1, s0\nldr x30, [sp, #80]                  // 8-byte Folded Reload\nfcvt h2, s1\nldp q1, q0, [sp, #48]               // 32-byte Folded Reload\nmov v1.h[7], v2.h[0]\nadd sp, sp, #96\nret",
  "giasm": "sub sp, sp, #448\nstp d15, d14, [sp, #368]            // 16-byte Folded Spill\nstp d13, d12, [sp, #384]            // 16-byte Folded Spill\nstp d11, d10, [sp, #400]            // 16-byte Folded Spill\nstp d9, d8, [sp, #416]              // 16-byte Folded Spill\nstp x29, x30, [sp, #432]            // 16-byte Folded Spill\nmov v4.16b, v1.16b\nstr q1, [sp, #112]                  // 16-byte Folded Spill\nmov h1, v0.h[4]\nmov h12, v0.h[1]\nmov h13, v0.h[2]\nstr q3, [sp, #16]                   // 16-byte Folded Spill\nmov h14, v0.h[3]\nmov h15, v2.h[1]\nmov h8, v2.h[2]\nmov h9, v2.h[3]\nmov h10, v2.h[4]\nmov h11, v2.h[5]\nstr h1, [sp, #272]                  // 2-byte Folded Spill\nmov h1, v0.h[5]\nstr h1, [sp, #240]                  // 2-byte Folded Spill\nmov h1, v0.h[6]\nstr h1, [sp, #176]                  // 2-byte Folded Spill\nmov h1, v0.h[7]\nfcvt s0, h0\nstr h1, [sp, #144]                  // 2-byte Folded Spill\nmov h1, v4.h[1]\nstr h1, [sp, #48]                   // 2-byte Folded Spill\nmov h1, v4.h[2]\nstr h1, [sp, #80]                   // 2-byte Folded Spill\nmov h1, v4.h[3]\nstr h1, [sp, #128]                  // 2-byte Folded Spill\nmov h1, v4.h[4]\nstr h1, [sp, #192]                  // 2-byte Folded Spill\nmov h1, v4.h[5]\nstr h1, [sp, #256]                  // 2-byte Folded Spill\nmov h1, v4.h[6]\nstr h1, [sp, #336]                  // 2-byte Folded Spill\nmov h1, v4.h[7]\nstr h1, [sp, #352]                  // 2-byte Folded Spill\nmov h1, v2.h[6]\nstr h1, [sp, #12]                   // 2-byte Folded Spill\nmov h1, v2.h[7]\nstr h1, [sp, #14]                   // 2-byte Folded Spill\nmov h1, v3.h[1]\nstr h1, [sp, #44]                   // 2-byte Folded Spill\nmov h1, v3.h[2]\nstr h1, [sp, #46]                   // 2-byte Folded Spill\nmov h1, v3.h[3]\nstr h1, [sp, #78]                   // 2-byte Folded Spill\nmov h1, v3.h[4]\nstr h1, [sp, #110]                  // 2-byte Folded Spill\nmov h1, v3.h[5]\nstr h1, [sp, #174]                  // 2-byte Folded Spill\nmov h1, v3.h[6]\nstr h1, [sp, #238]                  // 2-byte Folded Spill\nmov h1, v3.h[7]\nstr h1, [sp, #302]                  // 2-byte Folded Spill\nfcvt s1, h2\nbl powf\nfcvt s2, h12\nfcvt h0, s0\nfcvt s1, h15\nstr q0, [sp, #304]                  // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nfcvt s2, h13\nfcvt h0, s0\nfcvt s1, h8\nstr q0, [sp, #208]                  // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nfcvt s2, h14\nfcvt h0, s0\nfcvt s1, h9\nstr q0, [sp, #320]                  // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nldr h1, [sp, #272]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nfcvt s1, h10\nstr q0, [sp, #272]                  // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nldr h1, [sp, #240]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nfcvt s1, h11\nstr q0, [sp, #240]                  // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nldr h1, [sp, #176]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #176]                  // 16-byte Folded Spill\nldr h0, [sp, #12]                   // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl powf\nldr h1, [sp, #144]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #144]                  // 16-byte Folded Spill\nldr h0, [sp, #14]                   // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl powf\nldr q1, [sp, #112]                  // 16-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #112]                  // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl powf\nldr h1, [sp, #48]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nldr h0, [sp, #44]                   // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl powf\nldr h1, [sp, #80]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #80]                   // 16-byte Folded Spill\nldr h0, [sp, #46]                   // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl powf\nldr h1, [sp, #128]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #128]                  // 16-byte Folded Spill\nldr h0, [sp, #78]                   // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl powf\nldr h1, [sp, #192]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #192]                  // 16-byte Folded Spill\nldr h0, [sp, #110]                  // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl powf\nldr h1, [sp, #256]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #256]                  // 16-byte Folded Spill\nldr h0, [sp, #174]                  // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl powf\nldr h1, [sp, #336]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #336]                  // 16-byte Folded Spill\nldr h0, [sp, #238]                  // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl powf\nldr h1, [sp, #352]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #352]                  // 16-byte Folded Spill\nldr h0, [sp, #302]                  // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl powf\nldr q3, [sp, #304]                  // 16-byte Folded Reload\nldr q2, [sp, #208]                  // 16-byte Folded Reload\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nldp x29, x30, [sp, #432]            // 16-byte Folded Reload\nmov v3.h[1], v2.h[0]\nldr q2, [sp, #80]                   // 16-byte Folded Reload\nldp d9, d8, [sp, #416]              // 16-byte Folded Reload\nmov v1.h[1], v2.h[0]\nldr q2, [sp, #320]                  // 16-byte Folded Reload\nldp d11, d10, [sp, #400]            // 16-byte Folded Reload\nmov v3.h[2], v2.h[0]\nldr q2, [sp, #128]                  // 16-byte Folded Reload\nldp d13, d12, [sp, #384]            // 16-byte Folded Reload\nmov v1.h[2], v2.h[0]\nldr q2, [sp, #272]                  // 16-byte Folded Reload\nldp d15, d14, [sp, #368]            // 16-byte Folded Reload\nmov v3.h[3], v2.h[0]\nldr q2, [sp, #192]                  // 16-byte Folded Reload\nmov v1.h[3], v2.h[0]\nldp q4, q2, [sp, #240]              // 32-byte Folded Reload\nmov v3.h[4], v4.h[0]\nmov v1.h[4], v2.h[0]\nldr q2, [sp, #176]                  // 16-byte Folded Reload\nmov v3.h[5], v2.h[0]\nldr q2, [sp, #336]                  // 16-byte Folded Reload\nmov v1.h[5], v2.h[0]\nfcvt h2, s0\nldr q0, [sp, #144]                  // 16-byte Folded Reload\nmov v3.h[6], v0.h[0]\nldr q0, [sp, #352]                  // 16-byte Folded Reload\nmov v1.h[6], v0.h[0]\nldr q0, [sp, #112]                  // 16-byte Folded Reload\nmov v3.h[7], v0.h[0]\nmov v1.h[7], v2.h[0]\nmov v0.16b, v3.16b\nadd sp, sp, #448\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, <16 x half> %b) {\n  %r = call <16 x half> @llvm.pow(<16 x half> %a, <16 x half> %b)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 100 for instruction:   %r = call <16 x half> @llvm.pow.v16f16(<16 x half> %a, <16 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "pow",
  "ty": "<16 x half>",
  "variant": "binopconst",
  "codesize": 72,
  "thru": 72,
  "lat": 72,
  "sizelat": 72,
  "size": 142,
  "gisize": 171,
  "extrasize": 0,
  "asm": "sub sp, sp, #64\nstr x30, [sp, #48]                  // 8-byte Folded Spill\nstp q1, q0, [sp]                    // 32-byte Folded Spill\nmov h1, v0.h[1]\nfcvt s0, h1\nfmov s1, #6.00000000\nbl powf\nfcvt h0, s0\nfmov s1, #7.00000000\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v0.h[1], v1.h[0]\nfmov s1, #7.00000000\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[2]\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[2], v0.h[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[3]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, #6.00000000\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[3], v0.h[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[4]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[4], v0.h[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[5]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, #6.00000000\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[5], v0.h[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[6]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[6], v0.h[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[7]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, #6.00000000\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[7], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[1]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, #6.00000000\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nfmov s1, #7.00000000\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v0.h[1], v1.h[0]\nfmov s1, #7.00000000\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[2]\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[2], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[3]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #6.00000000\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[3], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[4]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[4], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[5]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #6.00000000\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[5], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[6]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[6], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[7]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #6.00000000\nfcvt s0, h0\nbl powf\nfmov s1, s0\nldr x30, [sp, #48]                  // 8-byte Folded Reload\nfcvt h2, s1\nldp q1, q0, [sp, #16]               // 32-byte Folded Reload\nmov v1.h[7], v2.h[0]\nadd sp, sp, #64\nret",
  "giasm": "sub sp, sp, #320\nstp d15, d14, [sp, #240]            // 16-byte Folded Spill\nstp d13, d12, [sp, #256]            // 16-byte Folded Spill\nstp d11, d10, [sp, #272]            // 16-byte Folded Spill\nstp d9, d8, [sp, #288]              // 16-byte Folded Spill\nstp x29, x30, [sp, #304]            // 16-byte Folded Spill\nmov h2, v0.h[7]\nfmov h3, #7.00000000\nstr q1, [sp, #64]                   // 16-byte Folded Spill\nmov h9, v0.h[1]\nmov h13, v0.h[2]\nmov h14, v0.h[3]\nmov h15, v0.h[4]\nmov h10, v0.h[5]\nmov h12, v0.h[6]\nfcvt s8, h3\nfcvt s0, h0\nfmov h11, #6.00000000\nstr h2, [sp, #96]                   // 2-byte Folded Spill\nmov h2, v1.h[1]\nstr h2, [sp]                        // 2-byte Folded Spill\nmov h2, v1.h[2]\nstr h2, [sp, #16]                   // 2-byte Folded Spill\nmov h2, v1.h[3]\nstr h2, [sp, #32]                   // 2-byte Folded Spill\nmov h2, v1.h[4]\nstr h2, [sp, #48]                   // 2-byte Folded Spill\nmov h2, v1.h[5]\nstr h2, [sp, #80]                   // 2-byte Folded Spill\nmov h2, v1.h[6]\nstr h2, [sp, #144]                  // 2-byte Folded Spill\nmov h2, v1.h[7]\nfmov s1, s8\nstr h2, [sp, #176]                  // 2-byte Folded Spill\nbl powf\nfcvt s1, h9\nfcvt h0, s0\nfcvt s9, h11\nstr q0, [sp, #208]                  // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s9\nbl powf\nfcvt s1, h13\nfcvt h0, s0\nstr q0, [sp, #128]                  // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s8\nbl powf\nfcvt s1, h14\nfcvt h0, s0\nstr q0, [sp, #224]                  // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s9\nbl powf\nfcvt s1, h15\nfcvt h0, s0\nstr q0, [sp, #192]                  // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s8\nbl powf\nfcvt s1, h10\nfcvt h0, s0\nstr q0, [sp, #160]                  // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s9\nbl powf\nfcvt s1, h12\nfcvt h0, s0\nstr q0, [sp, #112]                  // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s8\nbl powf\nldr h1, [sp, #96]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s1, h1\nstr q0, [sp, #96]                   // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s9\nbl powf\nldr q1, [sp, #64]                   // 16-byte Folded Reload\nfcvt h0, s0\nfcvt s1, h1\nstr q0, [sp, #64]                   // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s8\nbl powf\nldr h1, [sp]                        // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s1, h1\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s9\nbl powf\nldr h1, [sp, #16]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s1, h1\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s8\nbl powf\nldr h1, [sp, #32]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s1, h1\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s9\nbl powf\nldr h1, [sp, #48]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s1, h1\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s8\nbl powf\nldr h1, [sp, #80]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s1, h1\nstr q0, [sp, #80]                   // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s9\nbl powf\nldr h1, [sp, #144]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s1, h1\nstr q0, [sp, #144]                  // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s8\nbl powf\nldr h1, [sp, #176]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s1, h1\nstr q0, [sp, #176]                  // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s9\nbl powf\nldr q3, [sp, #208]                  // 16-byte Folded Reload\nldr q2, [sp, #128]                  // 16-byte Folded Reload\nldp x29, x30, [sp, #304]            // 16-byte Folded Reload\nmov v3.h[1], v2.h[0]\nldp q1, q2, [sp]                    // 32-byte Folded Reload\nldp d9, d8, [sp, #288]              // 16-byte Folded Reload\nldp d11, d10, [sp, #272]            // 16-byte Folded Reload\nmov v1.h[1], v2.h[0]\nldr q2, [sp, #224]                  // 16-byte Folded Reload\nldp d13, d12, [sp, #256]            // 16-byte Folded Reload\nmov v3.h[2], v2.h[0]\nldr q2, [sp, #32]                   // 16-byte Folded Reload\nldp d15, d14, [sp, #240]            // 16-byte Folded Reload\nmov v1.h[2], v2.h[0]\nldr q2, [sp, #192]                  // 16-byte Folded Reload\nmov v3.h[3], v2.h[0]\nldr q2, [sp, #48]                   // 16-byte Folded Reload\nmov v1.h[3], v2.h[0]\nldr q2, [sp, #160]                  // 16-byte Folded Reload\nmov v3.h[4], v2.h[0]\nldr q2, [sp, #80]                   // 16-byte Folded Reload\nmov v1.h[4], v2.h[0]\nldr q2, [sp, #112]                  // 16-byte Folded Reload\nmov v3.h[5], v2.h[0]\nldr q2, [sp, #144]                  // 16-byte Folded Reload\nmov v1.h[5], v2.h[0]\nfcvt h2, s0\nldr q0, [sp, #96]                   // 16-byte Folded Reload\nmov v3.h[6], v0.h[0]\nldr q0, [sp, #176]                  // 16-byte Folded Reload\nmov v1.h[6], v0.h[0]\nldr q0, [sp, #64]                   // 16-byte Folded Reload\nmov v3.h[7], v0.h[0]\nmov v1.h[7], v2.h[0]\nmov v0.16b, v3.16b\nadd sp, sp, #320\nret",
  "ll": "define <16 x half> @test(<16 x half> %a) {\n  %r = call <16 x half> @llvm.pow(<16 x half> %a, <16 x half> <half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0>)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 72 for instruction:   %r = call <16 x half> @llvm.pow.v16f16(<16 x half> %a, <16 x half> <half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "pow",
  "ty": "<16 x half>",
  "variant": "binopsplat",
  "codesize": 102,
  "thru": 102,
  "lat": 102,
  "sizelat": 102,
  "size": 145,
  "gisize": 209,
  "extrasize": 0,
  "asm": "sub sp, sp, #64\nstr d8, [sp, #48]                   // 8-byte Folded Spill\nstr x30, [sp, #56]                  // 8-byte Folded Spill\nstp q1, q0, [sp]                    // 32-byte Folded Spill\nmov h1, v0.h[1]\nfcvt s8, h2\nfcvt s0, h1\nfmov s1, s8\nbl powf\nfcvt h0, s0\nfmov s1, s8\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v0.h[1], v1.h[0]\nfmov s1, s8\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[2]\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[2], v0.h[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[3]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, s8\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[3], v0.h[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[4]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, s8\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[4], v0.h[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[5]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, s8\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[5], v0.h[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[6]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, s8\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[6], v0.h[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[7]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, s8\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[7], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[1]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, s8\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nfmov s1, s8\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v0.h[1], v1.h[0]\nfmov s1, s8\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[2]\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[2], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[3]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, s8\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[3], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[4]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, s8\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[4], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[5]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, s8\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[5], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[6]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, s8\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[6], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[7]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, s8\nfcvt s0, h0\nbl powf\nfmov s1, s0\nldr x30, [sp, #56]                  // 8-byte Folded Reload\nldr d8, [sp, #48]                   // 8-byte Folded Reload\nfcvt h2, s1\nldp q1, q0, [sp, #16]               // 32-byte Folded Reload\nmov v1.h[7], v2.h[0]\nadd sp, sp, #64\nret",
  "giasm": "sub sp, sp, #448\nstp d15, d14, [sp, #368]            // 16-byte Folded Spill\nstp d13, d12, [sp, #384]            // 16-byte Folded Spill\nstp d11, d10, [sp, #400]            // 16-byte Folded Spill\nstp d9, d8, [sp, #416]              // 16-byte Folded Spill\nstp x29, x30, [sp, #432]            // 16-byte Folded Spill\ndup v3.8h, v2.h[0]\ndup v4.8h, v2.h[0]\nstr q1, [sp, #112]                  // 16-byte Folded Spill\nmov h2, v0.h[4]\nmov h12, v0.h[1]\nmov h13, v0.h[2]\nmov h14, v0.h[3]\nmov h15, v3.h[1]\nmov h8, v3.h[2]\nstr q4, [sp, #16]                   // 16-byte Folded Spill\nmov h9, v3.h[3]\nmov h10, v3.h[4]\nmov h11, v3.h[5]\nstr h2, [sp, #272]                  // 2-byte Folded Spill\nmov h2, v0.h[5]\nstr h2, [sp, #240]                  // 2-byte Folded Spill\nmov h2, v0.h[6]\nstr h2, [sp, #176]                  // 2-byte Folded Spill\nmov h2, v0.h[7]\nfcvt s0, h0\nstr h2, [sp, #144]                  // 2-byte Folded Spill\nmov h2, v1.h[1]\nstr h2, [sp, #48]                   // 2-byte Folded Spill\nmov h2, v1.h[2]\nstr h2, [sp, #80]                   // 2-byte Folded Spill\nmov h2, v1.h[3]\nstr h2, [sp, #128]                  // 2-byte Folded Spill\nmov h2, v1.h[4]\nstr h2, [sp, #192]                  // 2-byte Folded Spill\nmov h2, v1.h[5]\nstr h2, [sp, #256]                  // 2-byte Folded Spill\nmov h2, v1.h[6]\nstr h2, [sp, #336]                  // 2-byte Folded Spill\nmov h2, v1.h[7]\nmov h1, v3.h[6]\nstr h1, [sp, #12]                   // 2-byte Folded Spill\nmov h1, v3.h[7]\nstr h2, [sp, #352]                  // 2-byte Folded Spill\nmov h2, v4.h[4]\nstr h1, [sp, #14]                   // 2-byte Folded Spill\nmov h1, v4.h[1]\nstr h2, [sp, #110]                  // 2-byte Folded Spill\nmov h2, v4.h[5]\nstr h1, [sp, #44]                   // 2-byte Folded Spill\nmov h1, v4.h[2]\nstr h2, [sp, #174]                  // 2-byte Folded Spill\nmov h2, v4.h[6]\nstr h1, [sp, #46]                   // 2-byte Folded Spill\nmov h1, v4.h[3]\nstr h2, [sp, #238]                  // 2-byte Folded Spill\nmov h2, v4.h[7]\nstr h1, [sp, #78]                   // 2-byte Folded Spill\nfcvt s1, h3\nstr h2, [sp, #302]                  // 2-byte Folded Spill\nbl powf\nfcvt s2, h12\nfcvt h0, s0\nfcvt s1, h15\nstr q0, [sp, #304]                  // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nfcvt s2, h13\nfcvt h0, s0\nfcvt s1, h8\nstr q0, [sp, #208]                  // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nfcvt s2, h14\nfcvt h0, s0\nfcvt s1, h9\nstr q0, [sp, #320]                  // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nldr h1, [sp, #272]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nfcvt s1, h10\nstr q0, [sp, #272]                  // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nldr h1, [sp, #240]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nfcvt s1, h11\nstr q0, [sp, #240]                  // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nldr h1, [sp, #176]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #176]                  // 16-byte Folded Spill\nldr h0, [sp, #12]                   // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl powf\nldr h1, [sp, #144]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #144]                  // 16-byte Folded Spill\nldr h0, [sp, #14]                   // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl powf\nldr q1, [sp, #112]                  // 16-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #112]                  // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl powf\nldr h1, [sp, #48]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nldr h0, [sp, #44]                   // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl powf\nldr h1, [sp, #80]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #80]                   // 16-byte Folded Spill\nldr h0, [sp, #46]                   // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl powf\nldr h1, [sp, #128]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #128]                  // 16-byte Folded Spill\nldr h0, [sp, #78]                   // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl powf\nldr h1, [sp, #192]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #192]                  // 16-byte Folded Spill\nldr h0, [sp, #110]                  // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl powf\nldr h1, [sp, #256]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #256]                  // 16-byte Folded Spill\nldr h0, [sp, #174]                  // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl powf\nldr h1, [sp, #336]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #336]                  // 16-byte Folded Spill\nldr h0, [sp, #238]                  // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl powf\nldr h1, [sp, #352]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #352]                  // 16-byte Folded Spill\nldr h0, [sp, #302]                  // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl powf\nldr q3, [sp, #304]                  // 16-byte Folded Reload\nldr q2, [sp, #208]                  // 16-byte Folded Reload\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nldp x29, x30, [sp, #432]            // 16-byte Folded Reload\nmov v3.h[1], v2.h[0]\nldr q2, [sp, #80]                   // 16-byte Folded Reload\nldp d9, d8, [sp, #416]              // 16-byte Folded Reload\nmov v1.h[1], v2.h[0]\nldr q2, [sp, #320]                  // 16-byte Folded Reload\nldp d11, d10, [sp, #400]            // 16-byte Folded Reload\nmov v3.h[2], v2.h[0]\nldr q2, [sp, #128]                  // 16-byte Folded Reload\nldp d13, d12, [sp, #384]            // 16-byte Folded Reload\nmov v1.h[2], v2.h[0]\nldr q2, [sp, #272]                  // 16-byte Folded Reload\nldp d15, d14, [sp, #368]            // 16-byte Folded Reload\nmov v3.h[3], v2.h[0]\nldr q2, [sp, #192]                  // 16-byte Folded Reload\nmov v1.h[3], v2.h[0]\nldp q4, q2, [sp, #240]              // 32-byte Folded Reload\nmov v3.h[4], v4.h[0]\nmov v1.h[4], v2.h[0]\nldr q2, [sp, #176]                  // 16-byte Folded Reload\nmov v3.h[5], v2.h[0]\nldr q2, [sp, #336]                  // 16-byte Folded Reload\nmov v1.h[5], v2.h[0]\nfcvt h2, s0\nldr q0, [sp, #144]                  // 16-byte Folded Reload\nmov v3.h[6], v0.h[0]\nldr q0, [sp, #352]                  // 16-byte Folded Reload\nmov v1.h[6], v0.h[0]\nldr q0, [sp, #112]                  // 16-byte Folded Reload\nmov v3.h[7], v0.h[0]\nmov v1.h[7], v2.h[0]\nmov v0.16b, v3.16b\nadd sp, sp, #448\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, half %bs) {\n  %i = insertelement <16 x half> poison, half %bs, i64 0\n  %b = shufflevector <16 x half> %i, <16 x half> poison, <16 x i32> zeroinitializer\n  %r = call <16 x half> @llvm.pow(<16 x half> %a, <16 x half> %b)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <16 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <16 x half> %i, <16 x half> poison, <16 x i32> zeroinitializer\nCost Model: Found an estimated cost of 100 for instruction:   %r = call <16 x half> @llvm.pow.v16f16(<16 x half> %a, <16 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "pow",
  "ty": "<16 x half>",
  "variant": "binopconstsplat",
  "codesize": 72,
  "thru": 72,
  "lat": 72,
  "sizelat": 72,
  "size": 142,
  "gisize": 166,
  "extrasize": 0,
  "asm": "sub sp, sp, #64\nstr x30, [sp, #48]                  // 8-byte Folded Spill\nstp q1, q0, [sp]                    // 32-byte Folded Spill\nmov h1, v0.h[1]\nfcvt s0, h1\nfmov s1, #7.00000000\nbl powf\nfcvt h0, s0\nfmov s1, #7.00000000\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v0.h[1], v1.h[0]\nfmov s1, #7.00000000\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[2]\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[2], v0.h[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[3]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[3], v0.h[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[4]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[4], v0.h[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[5]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[5], v0.h[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[6]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[6], v0.h[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[7]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[7], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[1]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nfmov s1, #7.00000000\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v0.h[1], v1.h[0]\nfmov s1, #7.00000000\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[2]\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[2], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[3]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[3], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[4]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[4], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[5]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[5], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[6]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[6], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[7]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl powf\nfmov s1, s0\nldr x30, [sp, #48]                  // 8-byte Folded Reload\nfcvt h2, s1\nldp q1, q0, [sp, #16]               // 32-byte Folded Reload\nmov v1.h[7], v2.h[0]\nadd sp, sp, #64\nret",
  "giasm": "sub sp, sp, #320\nstp d15, d14, [sp, #240]            // 16-byte Folded Spill\nstp d13, d12, [sp, #256]            // 16-byte Folded Spill\nstp d11, d10, [sp, #272]            // 16-byte Folded Spill\nstp d9, d8, [sp, #288]              // 16-byte Folded Spill\nstp x29, x30, [sp, #304]            // 16-byte Folded Spill\nmov h2, v1.h[1]\nfmov h3, #7.00000000\nstr q1, [sp, #64]                   // 16-byte Folded Spill\nmov h10, v0.h[1]\nmov h11, v0.h[2]\nmov h12, v0.h[3]\nmov h13, v0.h[4]\nmov h14, v0.h[5]\nmov h15, v0.h[6]\nfcvt s8, h3\nmov h9, v0.h[7]\nfcvt s0, h0\nstr h2, [sp]                        // 2-byte Folded Spill\nmov h2, v1.h[2]\nstr h2, [sp, #16]                   // 2-byte Folded Spill\nmov h2, v1.h[3]\nstr h2, [sp, #32]                   // 2-byte Folded Spill\nmov h2, v1.h[4]\nstr h2, [sp, #48]                   // 2-byte Folded Spill\nmov h2, v1.h[5]\nstr h2, [sp, #80]                   // 2-byte Folded Spill\nmov h2, v1.h[6]\nstr h2, [sp, #112]                  // 2-byte Folded Spill\nmov h2, v1.h[7]\nfmov s1, s8\nstr h2, [sp, #176]                  // 2-byte Folded Spill\nbl powf\nfcvt s1, h10\nfcvt h0, s0\nstr q0, [sp, #192]                  // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s8\nbl powf\nfcvt s1, h11\nfcvt h0, s0\nstr q0, [sp, #144]                  // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s8\nbl powf\nfcvt s1, h12\nfcvt h0, s0\nstr q0, [sp, #224]                  // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s8\nbl powf\nfcvt s1, h13\nfcvt h0, s0\nstr q0, [sp, #208]                  // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s8\nbl powf\nfcvt s1, h14\nfcvt h0, s0\nstr q0, [sp, #160]                  // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s8\nbl powf\nfcvt s1, h15\nfcvt h0, s0\nstr q0, [sp, #128]                  // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s8\nbl powf\nfcvt s1, h9\nfcvt h0, s0\nstr q0, [sp, #96]                   // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s8\nbl powf\nldr q1, [sp, #64]                   // 16-byte Folded Reload\nfcvt h0, s0\nfcvt s1, h1\nstr q0, [sp, #64]                   // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s8\nbl powf\nldr h1, [sp]                        // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s1, h1\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s8\nbl powf\nldr h1, [sp, #16]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s1, h1\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s8\nbl powf\nldr h1, [sp, #32]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s1, h1\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s8\nbl powf\nldr h1, [sp, #48]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s1, h1\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s8\nbl powf\nldr h1, [sp, #80]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s1, h1\nstr q0, [sp, #80]                   // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s8\nbl powf\nldr h1, [sp, #112]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s1, h1\nstr q0, [sp, #112]                  // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s8\nbl powf\nldr h1, [sp, #176]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s1, h1\nstr q0, [sp, #176]                  // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s8\nbl powf\nldr q3, [sp, #192]                  // 16-byte Folded Reload\nldr q2, [sp, #144]                  // 16-byte Folded Reload\nldp x29, x30, [sp, #304]            // 16-byte Folded Reload\nmov v3.h[1], v2.h[0]\nldp q1, q2, [sp]                    // 32-byte Folded Reload\nldp d9, d8, [sp, #288]              // 16-byte Folded Reload\nldp d11, d10, [sp, #272]            // 16-byte Folded Reload\nmov v1.h[1], v2.h[0]\nldr q2, [sp, #224]                  // 16-byte Folded Reload\nldp d13, d12, [sp, #256]            // 16-byte Folded Reload\nmov v3.h[2], v2.h[0]\nldr q2, [sp, #32]                   // 16-byte Folded Reload\nldp d15, d14, [sp, #240]            // 16-byte Folded Reload\nmov v1.h[2], v2.h[0]\nldr q2, [sp, #208]                  // 16-byte Folded Reload\nmov v3.h[3], v2.h[0]\nldr q2, [sp, #48]                   // 16-byte Folded Reload\nmov v1.h[3], v2.h[0]\nldr q2, [sp, #160]                  // 16-byte Folded Reload\nmov v3.h[4], v2.h[0]\nldr q2, [sp, #80]                   // 16-byte Folded Reload\nmov v1.h[4], v2.h[0]\nldp q2, q4, [sp, #112]              // 32-byte Folded Reload\nmov v3.h[5], v4.h[0]\nmov v1.h[5], v2.h[0]\nfcvt h2, s0\nldr q0, [sp, #96]                   // 16-byte Folded Reload\nmov v3.h[6], v0.h[0]\nldr q0, [sp, #176]                  // 16-byte Folded Reload\nmov v1.h[6], v0.h[0]\nldr q0, [sp, #64]                   // 16-byte Folded Reload\nmov v3.h[7], v0.h[0]\nmov v1.h[7], v2.h[0]\nmov v0.16b, v3.16b\nadd sp, sp, #320\nret",
  "ll": "define <16 x half> @test(<16 x half> %a) {\n  %r = call <16 x half> @llvm.pow(<16 x half> %a, <16 x half> splat (half 7.0))\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 72 for instruction:   %r = call <16 x half> @llvm.pow.v16f16(<16 x half> %a, <16 x half> splat (half 0xH4700))\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "pow",
  "ty": "<2 x float>",
  "variant": "binop",
  "codesize": 8,
  "thru": 26,
  "lat": 26,
  "sizelat": 26,
  "size": 13,
  "gisize": 16,
  "extrasize": 0,
  "asm": "sub sp, sp, #64\nstr x30, [sp, #48]                  // 8-byte Folded Spill\nstp q0, q1, [sp]                    // 32-byte Folded Spill\nmov s0, v0.s[1]\nmov s1, v1.s[1]\nbl powf\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldp q0, q1, [sp]                    // 32-byte Folded Reload\nbl powf\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nldr x30, [sp, #48]                  // 8-byte Folded Reload\nmov v0.s[1], v1.s[0]\nadd sp, sp, #64\nret",
  "giasm": "sub sp, sp, #48\nstp d9, d8, [sp, #16]               // 16-byte Folded Spill\nstr x30, [sp, #32]                  // 8-byte Folded Spill\nmov s8, v0.s[1]\nmov s9, v1.s[1]\nbl powf\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s1, s9\nfmov s0, s8\nbl powf\nldr q1, [sp]                        // 16-byte Folded Reload\nldp d9, d8, [sp, #16]               // 16-byte Folded Reload\nldr x30, [sp, #32]                  // 8-byte Folded Reload\nmov v1.s[1], v0.s[0]\nfmov d0, d1\nadd sp, sp, #48\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, <2 x float> %b) {\n  %r = call <2 x float> @llvm.pow(<2 x float> %a, <2 x float> %b)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 8 for instruction:   %r = call <2 x float> @llvm.pow.v2f32(<2 x float> %a, <2 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "pow",
  "ty": "<2 x float>",
  "variant": "binopconst",
  "codesize": 6,
  "thru": 24,
  "lat": 24,
  "sizelat": 24,
  "size": 14,
  "gisize": 16,
  "extrasize": 0,
  "asm": "sub sp, sp, #48\nstr x30, [sp, #32]                  // 8-byte Folded Spill\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s1, #6.00000000\nmov s0, v0.s[1]\nbl powf\nfmov s1, #7.00000000\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nbl powf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nldr x30, [sp, #32]                  // 8-byte Folded Reload\nmov v0.s[1], v1.s[0]\nadd sp, sp, #48\nret",
  "giasm": "sub sp, sp, #32\nstr d8, [sp, #16]                   // 8-byte Folded Spill\nstr x30, [sp, #24]                  // 8-byte Folded Spill\nfmov s1, #7.00000000\nmov s8, v0.s[1]\nbl powf\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s1, #6.00000000\nfmov s0, s8\nbl powf\nldr q1, [sp]                        // 16-byte Folded Reload\nldr x30, [sp, #24]                  // 8-byte Folded Reload\nldr d8, [sp, #16]                   // 8-byte Folded Reload\nmov v1.s[1], v0.s[0]\nfmov d0, d1\nadd sp, sp, #32\nret",
  "ll": "define <2 x float> @test(<2 x float> %a) {\n  %r = call <2 x float> @llvm.pow(<2 x float> %a, <2 x float> <float 7.0, float 6.0>)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 6 for instruction:   %r = call <2 x float> @llvm.pow.v2f32(<2 x float> %a, <2 x float> <float 7.000000e+00, float 6.000000e+00>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "pow",
  "ty": "<2 x float>",
  "variant": "binopsplat",
  "codesize": 9,
  "thru": 27,
  "lat": 27,
  "sizelat": 27,
  "size": 16,
  "gisize": 17,
  "extrasize": 0,
  "asm": "sub sp, sp, #48\nstr d8, [sp, #32]                   // 8-byte Folded Spill\nstr x30, [sp, #40]                  // 8-byte Folded Spill\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s8, s1\nmov s0, v0.s[1]\nbl powf\nfmov s1, s8\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nbl powf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nldr x30, [sp, #40]                  // 8-byte Folded Reload\nldr d8, [sp, #32]                   // 8-byte Folded Reload\nmov v0.s[1], v1.s[0]\nadd sp, sp, #48\nret",
  "giasm": "sub sp, sp, #48\nstp d9, d8, [sp, #16]               // 16-byte Folded Spill\nstr x30, [sp, #32]                  // 8-byte Folded Spill\nmov s8, v0.s[1]\ndup v1.2s, v1.s[0]\nmov s9, v1.s[1]\nbl powf\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s1, s9\nfmov s0, s8\nbl powf\nldr q1, [sp]                        // 16-byte Folded Reload\nldp d9, d8, [sp, #16]               // 16-byte Folded Reload\nldr x30, [sp, #32]                  // 8-byte Folded Reload\nmov v1.s[1], v0.s[0]\nfmov d0, d1\nadd sp, sp, #48\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, float %bs) {\n  %i = insertelement <2 x float> poison, float %bs, i64 0\n  %b = shufflevector <2 x float> %i, <2 x float> poison, <2 x i32> zeroinitializer\n  %r = call <2 x float> @llvm.pow(<2 x float> %a, <2 x float> %b)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <2 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <2 x float> %i, <2 x float> poison, <2 x i32> zeroinitializer\nCost Model: Found an estimated cost of 8 for instruction:   %r = call <2 x float> @llvm.pow.v2f32(<2 x float> %a, <2 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "pow",
  "ty": "<2 x float>",
  "variant": "binopconstsplat",
  "codesize": 6,
  "thru": 24,
  "lat": 24,
  "sizelat": 24,
  "size": 14,
  "gisize": 16,
  "extrasize": 0,
  "asm": "sub sp, sp, #48\nstr x30, [sp, #32]                  // 8-byte Folded Spill\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s1, #7.00000000\nmov s0, v0.s[1]\nbl powf\nfmov s1, #7.00000000\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nbl powf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nldr x30, [sp, #32]                  // 8-byte Folded Reload\nmov v0.s[1], v1.s[0]\nadd sp, sp, #48\nret",
  "giasm": "sub sp, sp, #32\nstr d8, [sp, #16]                   // 8-byte Folded Spill\nstr x30, [sp, #24]                  // 8-byte Folded Spill\nfmov s1, #7.00000000\nmov s8, v0.s[1]\nbl powf\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s1, #7.00000000\nfmov s0, s8\nbl powf\nldr q1, [sp]                        // 16-byte Folded Reload\nldr x30, [sp, #24]                  // 8-byte Folded Reload\nldr d8, [sp, #16]                   // 8-byte Folded Reload\nmov v1.s[1], v0.s[0]\nfmov d0, d1\nadd sp, sp, #32\nret",
  "ll": "define <2 x float> @test(<2 x float> %a) {\n  %r = call <2 x float> @llvm.pow(<2 x float> %a, <2 x float> splat (float 7.0))\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 6 for instruction:   %r = call <2 x float> @llvm.pow.v2f32(<2 x float> %a, <2 x float> splat (float 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "pow",
  "ty": "<4 x float>",
  "variant": "binop",
  "codesize": 22,
  "thru": 58,
  "lat": 58,
  "sizelat": 58,
  "size": 28,
  "gisize": 35,
  "extrasize": 0,
  "asm": "sub sp, sp, #64\nstr x30, [sp, #48]                  // 8-byte Folded Spill\nstp q0, q1, [sp, #16]               // 32-byte Folded Spill\nmov s0, v0.s[1]\nmov s1, v1.s[1]\nbl powf\nstr q0, [sp]                        // 16-byte Folded Spill\nldp q0, q1, [sp, #16]               // 32-byte Folded Reload\nbl powf\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v0.s[1], v1.s[0]\nstr q0, [sp]                        // 16-byte Folded Spill\nldp q0, q1, [sp, #16]               // 32-byte Folded Reload\nmov s0, v0.s[2]\nmov s1, v1.s[2]\nbl powf\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v1.s[2], v0.s[0]\nstr q1, [sp]                        // 16-byte Folded Spill\nldp q0, q1, [sp, #16]               // 32-byte Folded Reload\nmov s0, v0.s[3]\nmov s1, v1.s[3]\nbl powf\nldr q1, [sp]                        // 16-byte Folded Reload\nldr x30, [sp, #48]                  // 8-byte Folded Reload\nmov v1.s[3], v0.s[0]\nmov v0.16b, v1.16b\nadd sp, sp, #64\nret",
  "giasm": "sub sp, sp, #112\nstp d13, d12, [sp, #48]             // 16-byte Folded Spill\nstp d11, d10, [sp, #64]             // 16-byte Folded Spill\nstp d9, d8, [sp, #80]               // 16-byte Folded Spill\nstr x30, [sp, #96]                  // 8-byte Folded Spill\nmov s8, v0.s[1]\nmov s9, v0.s[2]\nmov s10, v0.s[3]\nmov s11, v1.s[1]\nmov s12, v1.s[2]\nmov s13, v1.s[3]\nbl powf\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, s11\nfmov s0, s8\nbl powf\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, s12\nfmov s0, s9\nbl powf\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s1, s13\nfmov s0, s10\nbl powf\nldp q2, q1, [sp, #16]               // 32-byte Folded Reload\nldr x30, [sp, #96]                  // 8-byte Folded Reload\nldp d9, d8, [sp, #80]               // 16-byte Folded Reload\nldp d11, d10, [sp, #64]             // 16-byte Folded Reload\nmov v1.s[1], v2.s[0]\nldr q2, [sp]                        // 16-byte Folded Reload\nldp d13, d12, [sp, #48]             // 16-byte Folded Reload\nmov v1.s[2], v2.s[0]\nmov v1.s[3], v0.s[0]\nmov v0.16b, v1.16b\nadd sp, sp, #112\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, <4 x float> %b) {\n  %r = call <4 x float> @llvm.pow(<4 x float> %a, <4 x float> %b)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 22 for instruction:   %r = call <4 x float> @llvm.pow.v4f32(<4 x float> %a, <4 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "pow",
  "ty": "<4 x float>",
  "variant": "binopconst",
  "codesize": 16,
  "thru": 52,
  "lat": 52,
  "sizelat": 52,
  "size": 29,
  "gisize": 31,
  "extrasize": 0,
  "asm": "sub sp, sp, #48\nstr x30, [sp, #32]                  // 8-byte Folded Spill\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nmov s0, v0.s[1]\nfmov s1, #6.00000000\nbl powf\nfmov s1, #7.00000000\nstr q0, [sp]                        // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nbl powf\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v0.s[1], v1.s[0]\nfmov s1, #7.00000000\nstr q0, [sp]                        // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov s0, v0.s[2]\nbl powf\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v1.s[2], v0.s[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov s0, v0.s[3]\nstr q1, [sp]                        // 16-byte Folded Spill\nfmov s1, #6.00000000\nbl powf\nldr q1, [sp]                        // 16-byte Folded Reload\nldr x30, [sp, #32]                  // 8-byte Folded Reload\nmov v1.s[3], v0.s[0]\nmov v0.16b, v1.16b\nadd sp, sp, #48\nret",
  "giasm": "sub sp, sp, #80\nstr d10, [sp, #48]                  // 8-byte Folded Spill\nstp d9, d8, [sp, #56]               // 16-byte Folded Spill\nstr x30, [sp, #72]                  // 8-byte Folded Spill\nfmov s1, #7.00000000\nmov s8, v0.s[1]\nmov s9, v0.s[2]\nmov s10, v0.s[3]\nbl powf\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, #6.00000000\nfmov s0, s8\nbl powf\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfmov s0, s9\nbl powf\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s1, #6.00000000\nfmov s0, s10\nbl powf\nldp q2, q1, [sp, #16]               // 32-byte Folded Reload\nldr x30, [sp, #72]                  // 8-byte Folded Reload\nldp d9, d8, [sp, #56]               // 16-byte Folded Reload\nldr d10, [sp, #48]                  // 8-byte Folded Reload\nmov v1.s[1], v2.s[0]\nldr q2, [sp]                        // 16-byte Folded Reload\nmov v1.s[2], v2.s[0]\nmov v1.s[3], v0.s[0]\nmov v0.16b, v1.16b\nadd sp, sp, #80\nret",
  "ll": "define <4 x float> @test(<4 x float> %a) {\n  %r = call <4 x float> @llvm.pow(<4 x float> %a, <4 x float> <float 7.0, float 6.0, float 7.0, float 6.0>)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 16 for instruction:   %r = call <4 x float> @llvm.pow.v4f32(<4 x float> %a, <4 x float> <float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "pow",
  "ty": "<4 x float>",
  "variant": "binopsplat",
  "codesize": 23,
  "thru": 59,
  "lat": 59,
  "sizelat": 59,
  "size": 31,
  "gisize": 36,
  "extrasize": 0,
  "asm": "sub sp, sp, #48\nstr d8, [sp, #32]                   // 8-byte Folded Spill\nstr x30, [sp, #40]                  // 8-byte Folded Spill\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nmov s0, v0.s[1]\nfmov s8, s1\nbl powf\nfmov s1, s8\nstr q0, [sp]                        // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nbl powf\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v0.s[1], v1.s[0]\nfmov s1, s8\nstr q0, [sp]                        // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov s0, v0.s[2]\nbl powf\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v1.s[2], v0.s[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov s0, v0.s[3]\nstr q1, [sp]                        // 16-byte Folded Spill\nfmov s1, s8\nbl powf\nldr q1, [sp]                        // 16-byte Folded Reload\nldr x30, [sp, #40]                  // 8-byte Folded Reload\nldr d8, [sp, #32]                   // 8-byte Folded Reload\nmov v1.s[3], v0.s[0]\nmov v0.16b, v1.16b\nadd sp, sp, #48\nret",
  "giasm": "sub sp, sp, #112\nstp d13, d12, [sp, #48]             // 16-byte Folded Spill\nstp d11, d10, [sp, #64]             // 16-byte Folded Spill\nstp d9, d8, [sp, #80]               // 16-byte Folded Spill\nstr x30, [sp, #96]                  // 8-byte Folded Spill\nmov s8, v0.s[1]\nmov s9, v0.s[2]\nmov s10, v0.s[3]\ndup v1.4s, v1.s[0]\nmov s11, v1.s[1]\nmov s12, v1.s[2]\nmov s13, v1.s[3]\nbl powf\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, s11\nfmov s0, s8\nbl powf\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, s12\nfmov s0, s9\nbl powf\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s1, s13\nfmov s0, s10\nbl powf\nldp q2, q1, [sp, #16]               // 32-byte Folded Reload\nldr x30, [sp, #96]                  // 8-byte Folded Reload\nldp d9, d8, [sp, #80]               // 16-byte Folded Reload\nldp d11, d10, [sp, #64]             // 16-byte Folded Reload\nmov v1.s[1], v2.s[0]\nldr q2, [sp]                        // 16-byte Folded Reload\nldp d13, d12, [sp, #48]             // 16-byte Folded Reload\nmov v1.s[2], v2.s[0]\nmov v1.s[3], v0.s[0]\nmov v0.16b, v1.16b\nadd sp, sp, #112\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, float %bs) {\n  %i = insertelement <4 x float> poison, float %bs, i64 0\n  %b = shufflevector <4 x float> %i, <4 x float> poison, <4 x i32> zeroinitializer\n  %r = call <4 x float> @llvm.pow(<4 x float> %a, <4 x float> %b)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <4 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <4 x float> %i, <4 x float> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 22 for instruction:   %r = call <4 x float> @llvm.pow.v4f32(<4 x float> %a, <4 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "pow",
  "ty": "<4 x float>",
  "variant": "binopconstsplat",
  "codesize": 16,
  "thru": 52,
  "lat": 52,
  "sizelat": 52,
  "size": 29,
  "gisize": 31,
  "extrasize": 0,
  "asm": "sub sp, sp, #48\nstr x30, [sp, #32]                  // 8-byte Folded Spill\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nmov s0, v0.s[1]\nfmov s1, #7.00000000\nbl powf\nfmov s1, #7.00000000\nstr q0, [sp]                        // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nbl powf\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v0.s[1], v1.s[0]\nfmov s1, #7.00000000\nstr q0, [sp]                        // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov s0, v0.s[2]\nbl powf\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v1.s[2], v0.s[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov s0, v0.s[3]\nstr q1, [sp]                        // 16-byte Folded Spill\nfmov s1, #7.00000000\nbl powf\nldr q1, [sp]                        // 16-byte Folded Reload\nldr x30, [sp, #32]                  // 8-byte Folded Reload\nmov v1.s[3], v0.s[0]\nmov v0.16b, v1.16b\nadd sp, sp, #48\nret",
  "giasm": "sub sp, sp, #80\nstr d10, [sp, #48]                  // 8-byte Folded Spill\nstp d9, d8, [sp, #56]               // 16-byte Folded Spill\nstr x30, [sp, #72]                  // 8-byte Folded Spill\nfmov s1, #7.00000000\nmov s8, v0.s[1]\nmov s9, v0.s[2]\nmov s10, v0.s[3]\nbl powf\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfmov s0, s8\nbl powf\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfmov s0, s9\nbl powf\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s1, #7.00000000\nfmov s0, s10\nbl powf\nldp q2, q1, [sp, #16]               // 32-byte Folded Reload\nldr x30, [sp, #72]                  // 8-byte Folded Reload\nldp d9, d8, [sp, #56]               // 16-byte Folded Reload\nldr d10, [sp, #48]                  // 8-byte Folded Reload\nmov v1.s[1], v2.s[0]\nldr q2, [sp]                        // 16-byte Folded Reload\nmov v1.s[2], v2.s[0]\nmov v1.s[3], v0.s[0]\nmov v0.16b, v1.16b\nadd sp, sp, #80\nret",
  "ll": "define <4 x float> @test(<4 x float> %a) {\n  %r = call <4 x float> @llvm.pow(<4 x float> %a, <4 x float> splat (float 7.0))\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 16 for instruction:   %r = call <4 x float> @llvm.pow.v4f32(<4 x float> %a, <4 x float> splat (float 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "pow",
  "ty": "<8 x float>",
  "variant": "binop",
  "codesize": 44,
  "thru": 116,
  "lat": 116,
  "sizelat": 116,
  "size": 54,
  "gisize": 72,
  "extrasize": 0,
  "asm": "sub sp, sp, #96\nstr x30, [sp, #80]                  // 8-byte Folded Spill\nstp q0, q2, [sp]                    // 32-byte Folded Spill\nmov s0, v0.s[1]\nstp q1, q3, [sp, #32]               // 32-byte Folded Spill\nmov s1, v2.s[1]\nbl powf\nstr q0, [sp, #64]                   // 16-byte Folded Spill\nldp q0, q1, [sp]                    // 32-byte Folded Reload\nbl powf\nldr q1, [sp, #64]                   // 16-byte Folded Reload\nmov v0.s[1], v1.s[0]\nstr q0, [sp, #64]                   // 16-byte Folded Spill\nldp q0, q1, [sp]                    // 32-byte Folded Reload\nmov s0, v0.s[2]\nmov s1, v1.s[2]\nbl powf\nldr q1, [sp, #64]                   // 16-byte Folded Reload\nmov v1.s[2], v0.s[0]\nstr q1, [sp, #64]                   // 16-byte Folded Spill\nldp q0, q1, [sp]                    // 32-byte Folded Reload\nmov s0, v0.s[3]\nmov s1, v1.s[3]\nbl powf\nldr q1, [sp, #64]                   // 16-byte Folded Reload\nmov v1.s[3], v0.s[0]\nstr q1, [sp, #64]                   // 16-byte Folded Spill\nldp q0, q1, [sp, #32]               // 32-byte Folded Reload\nmov s0, v0.s[1]\nmov s1, v1.s[1]\nbl powf\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldp q0, q1, [sp, #32]               // 32-byte Folded Reload\nbl powf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v0.s[1], v1.s[0]\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldp q0, q1, [sp, #32]               // 32-byte Folded Reload\nmov s0, v0.s[2]\nmov s1, v1.s[2]\nbl powf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.s[2], v0.s[0]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nldp q0, q1, [sp, #32]               // 32-byte Folded Reload\nmov s0, v0.s[3]\nmov s1, v1.s[3]\nbl powf\nfmov s2, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nldr q0, [sp, #64]                   // 16-byte Folded Reload\nldr x30, [sp, #80]                  // 8-byte Folded Reload\nmov v1.s[3], v2.s[0]\nadd sp, sp, #96\nret",
  "giasm": "sub sp, sp, #208\nstp d15, d14, [sp, #128]            // 16-byte Folded Spill\nstp d13, d12, [sp, #144]            // 16-byte Folded Spill\nstp d11, d10, [sp, #160]            // 16-byte Folded Spill\nstp d9, d8, [sp, #176]              // 16-byte Folded Spill\nstr x30, [sp, #192]                 // 8-byte Folded Spill\nmov v4.16b, v1.16b\nmov v1.16b, v2.16b\nmov s8, v0.s[1]\nmov s9, v0.s[2]\nmov s10, v0.s[3]\nmov s12, v3.s[1]\nmov s11, v3.s[2]\nmov s2, v4.s[1]\nstp q3, q4, [sp]                    // 32-byte Folded Spill\nmov s5, v4.s[3]\nmov s14, v1.s[1]\nmov s15, v1.s[2]\nmov s13, v1.s[3]\nstr s2, [sp, #48]                   // 4-byte Folded Spill\nmov s2, v4.s[2]\nstr s2, [sp, #112]                  // 4-byte Folded Spill\nmov s2, v3.s[3]\nstp s2, s5, [sp, #200]              // 8-byte Folded Spill\nbl powf\nstr q0, [sp, #96]                   // 16-byte Folded Spill\nfmov s1, s14\nfmov s0, s8\nbl powf\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, s15\nfmov s0, s9\nbl powf\nstr q0, [sp, #80]                   // 16-byte Folded Spill\nfmov s1, s13\nfmov s0, s10\nbl powf\nstr q0, [sp, #64]                   // 16-byte Folded Spill\nldp q1, q0, [sp]                    // 32-byte Folded Reload\nbl powf\nfmov s1, s12\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr s0, [sp, #48]                   // 4-byte Folded Reload\nbl powf\nfmov s1, s11\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nldr s0, [sp, #112]                  // 4-byte Folded Reload\nbl powf\nstr q0, [sp, #112]                  // 16-byte Folded Spill\nldp s1, s0, [sp, #200]              // 8-byte Folded Reload\nbl powf\nldp q3, q2, [sp, #16]               // 32-byte Folded Reload\nldr q1, [sp, #96]                   // 16-byte Folded Reload\nldp d9, d8, [sp, #176]              // 16-byte Folded Reload\nldr x30, [sp, #192]                 // 8-byte Folded Reload\nldp d11, d10, [sp, #160]            // 16-byte Folded Reload\nmov v1.s[1], v2.s[0]\nldr q2, [sp, #48]                   // 16-byte Folded Reload\nldp d13, d12, [sp, #144]            // 16-byte Folded Reload\nmov v3.s[1], v2.s[0]\nldr q2, [sp, #80]                   // 16-byte Folded Reload\nldp d15, d14, [sp, #128]            // 16-byte Folded Reload\nmov v1.s[2], v2.s[0]\nldr q2, [sp, #112]                  // 16-byte Folded Reload\nmov v3.s[2], v2.s[0]\nldr q2, [sp, #64]                   // 16-byte Folded Reload\nmov v1.s[3], v2.s[0]\nmov v3.s[3], v0.s[0]\nmov v2.16b, v1.16b\nmov v1.16b, v3.16b\nmov v0.16b, v2.16b\nadd sp, sp, #208\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, <8 x float> %b) {\n  %r = call <8 x float> @llvm.pow(<8 x float> %a, <8 x float> %b)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 44 for instruction:   %r = call <8 x float> @llvm.pow.v8f32(<8 x float> %a, <8 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "pow",
  "ty": "<8 x float>",
  "variant": "binopconst",
  "codesize": 32,
  "thru": 104,
  "lat": 104,
  "sizelat": 104,
  "size": 55,
  "gisize": 62,
  "extrasize": 0,
  "asm": "sub sp, sp, #64\nstr x30, [sp, #48]                  // 8-byte Folded Spill\nstp q0, q1, [sp]                    // 32-byte Folded Spill\nmov s0, v0.s[1]\nfmov s1, #6.00000000\nbl powf\nfmov s1, #7.00000000\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nbl powf\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v0.s[1], v1.s[0]\nfmov s1, #7.00000000\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nmov s0, v0.s[2]\nbl powf\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.s[2], v0.s[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov s0, v0.s[3]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, #6.00000000\nbl powf\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.s[3], v0.s[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov s0, v0.s[1]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, #6.00000000\nbl powf\nfmov s1, #7.00000000\nstr q0, [sp]                        // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nbl powf\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v0.s[1], v1.s[0]\nfmov s1, #7.00000000\nstr q0, [sp]                        // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov s0, v0.s[2]\nbl powf\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v1.s[2], v0.s[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov s0, v0.s[3]\nstr q1, [sp]                        // 16-byte Folded Spill\nfmov s1, #6.00000000\nbl powf\nfmov s2, s0\nldr q1, [sp]                        // 16-byte Folded Reload\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nldr x30, [sp, #48]                  // 8-byte Folded Reload\nmov v1.s[3], v2.s[0]\nadd sp, sp, #64\nret",
  "giasm": "sub sp, sp, #176\nstp d13, d12, [sp, #112]            // 16-byte Folded Spill\nstp d11, d10, [sp, #128]            // 16-byte Folded Spill\nstp d9, d8, [sp, #144]              // 16-byte Folded Spill\nstr x30, [sp, #160]                 // 8-byte Folded Spill\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nmov s11, v1.s[1]\nmov s12, v1.s[2]\nmov s13, v1.s[3]\nfmov s1, #7.00000000\nmov s8, v0.s[1]\nmov s9, v0.s[2]\nmov s10, v0.s[3]\nbl powf\nstr q0, [sp, #96]                   // 16-byte Folded Spill\nfmov s1, #6.00000000\nfmov s0, s8\nbl powf\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfmov s0, s9\nbl powf\nstr q0, [sp, #80]                   // 16-byte Folded Spill\nfmov s1, #6.00000000\nfmov s0, s10\nbl powf\nfmov s1, #7.00000000\nstr q0, [sp, #64]                   // 16-byte Folded Spill\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nbl powf\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, #6.00000000\nfmov s0, s11\nbl powf\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfmov s0, s12\nbl powf\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s1, #6.00000000\nfmov s0, s13\nbl powf\nldp q3, q2, [sp, #32]               // 32-byte Folded Reload\nldr q1, [sp, #96]                   // 16-byte Folded Reload\nldp d9, d8, [sp, #144]              // 16-byte Folded Reload\nldr x30, [sp, #160]                 // 8-byte Folded Reload\nldp d11, d10, [sp, #128]            // 16-byte Folded Reload\nmov v1.s[1], v2.s[0]\nldr q2, [sp, #16]                   // 16-byte Folded Reload\nldp d13, d12, [sp, #112]            // 16-byte Folded Reload\nmov v3.s[1], v2.s[0]\nldr q2, [sp, #80]                   // 16-byte Folded Reload\nmov v1.s[2], v2.s[0]\nldr q2, [sp]                        // 16-byte Folded Reload\nmov v3.s[2], v2.s[0]\nldr q2, [sp, #64]                   // 16-byte Folded Reload\nmov v1.s[3], v2.s[0]\nmov v3.s[3], v0.s[0]\nmov v2.16b, v1.16b\nmov v1.16b, v3.16b\nmov v0.16b, v2.16b\nadd sp, sp, #176\nret",
  "ll": "define <8 x float> @test(<8 x float> %a) {\n  %r = call <8 x float> @llvm.pow(<8 x float> %a, <8 x float> <float 7.0, float 6.0, float 7.0, float 6.0, float 7.0, float 6.0, float 7.0, float 6.0>)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 32 for instruction:   %r = call <8 x float> @llvm.pow.v8f32(<8 x float> %a, <8 x float> <float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "pow",
  "ty": "<8 x float>",
  "variant": "binopsplat",
  "codesize": 46,
  "thru": 118,
  "lat": 118,
  "sizelat": 118,
  "size": 58,
  "gisize": 73,
  "extrasize": 0,
  "asm": "sub sp, sp, #64\nstr d8, [sp, #48]                   // 8-byte Folded Spill\nstr x30, [sp, #56]                  // 8-byte Folded Spill\nstp q0, q1, [sp]                    // 32-byte Folded Spill\nmov s0, v0.s[1]\nfmov s1, s2\nfmov s8, s2\nbl powf\nfmov s1, s8\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nbl powf\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v0.s[1], v1.s[0]\nfmov s1, s8\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nmov s0, v0.s[2]\nbl powf\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.s[2], v0.s[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov s0, v0.s[3]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, s8\nbl powf\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.s[3], v0.s[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov s0, v0.s[1]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, s8\nbl powf\nfmov s1, s8\nstr q0, [sp]                        // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nbl powf\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v0.s[1], v1.s[0]\nfmov s1, s8\nstr q0, [sp]                        // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov s0, v0.s[2]\nbl powf\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v1.s[2], v0.s[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov s0, v0.s[3]\nstr q1, [sp]                        // 16-byte Folded Spill\nfmov s1, s8\nbl powf\nfmov s2, s0\nldr q1, [sp]                        // 16-byte Folded Reload\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nldr x30, [sp, #56]                  // 8-byte Folded Reload\nldr d8, [sp, #48]                   // 8-byte Folded Reload\nmov v1.s[3], v2.s[0]\nadd sp, sp, #64\nret",
  "giasm": "sub sp, sp, #208\nstp d15, d14, [sp, #128]            // 16-byte Folded Spill\nstp d13, d12, [sp, #144]            // 16-byte Folded Spill\nstp d11, d10, [sp, #160]            // 16-byte Folded Spill\nstp d9, d8, [sp, #176]              // 16-byte Folded Spill\nstr x30, [sp, #192]                 // 8-byte Folded Spill\nmov v3.16b, v1.16b\ndup v1.4s, v2.s[0]\ndup v4.4s, v2.s[0]\nmov s8, v0.s[1]\nmov s9, v0.s[2]\nmov s10, v0.s[3]\nmov s2, v3.s[1]\nmov s5, v3.s[3]\nstp q4, q3, [sp]                    // 32-byte Folded Spill\nmov s14, v1.s[1]\nmov s15, v1.s[2]\nmov s13, v1.s[3]\nmov s12, v4.s[1]\nmov s11, v4.s[2]\nstr s2, [sp, #48]                   // 4-byte Folded Spill\nmov s2, v3.s[2]\nstr s2, [sp, #112]                  // 4-byte Folded Spill\nmov s2, v4.s[3]\nstp s2, s5, [sp, #200]              // 8-byte Folded Spill\nbl powf\nstr q0, [sp, #96]                   // 16-byte Folded Spill\nfmov s1, s14\nfmov s0, s8\nbl powf\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, s15\nfmov s0, s9\nbl powf\nstr q0, [sp, #80]                   // 16-byte Folded Spill\nfmov s1, s13\nfmov s0, s10\nbl powf\nstr q0, [sp, #64]                   // 16-byte Folded Spill\nldp q1, q0, [sp]                    // 32-byte Folded Reload\nbl powf\nfmov s1, s12\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr s0, [sp, #48]                   // 4-byte Folded Reload\nbl powf\nfmov s1, s11\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nldr s0, [sp, #112]                  // 4-byte Folded Reload\nbl powf\nstr q0, [sp, #112]                  // 16-byte Folded Spill\nldp s1, s0, [sp, #200]              // 8-byte Folded Reload\nbl powf\nldp q3, q2, [sp, #16]               // 32-byte Folded Reload\nldr q1, [sp, #96]                   // 16-byte Folded Reload\nldp d9, d8, [sp, #176]              // 16-byte Folded Reload\nldr x30, [sp, #192]                 // 8-byte Folded Reload\nldp d11, d10, [sp, #160]            // 16-byte Folded Reload\nmov v1.s[1], v2.s[0]\nldr q2, [sp, #48]                   // 16-byte Folded Reload\nldp d13, d12, [sp, #144]            // 16-byte Folded Reload\nmov v3.s[1], v2.s[0]\nldr q2, [sp, #80]                   // 16-byte Folded Reload\nldp d15, d14, [sp, #128]            // 16-byte Folded Reload\nmov v1.s[2], v2.s[0]\nldr q2, [sp, #112]                  // 16-byte Folded Reload\nmov v3.s[2], v2.s[0]\nldr q2, [sp, #64]                   // 16-byte Folded Reload\nmov v1.s[3], v2.s[0]\nmov v3.s[3], v0.s[0]\nmov v2.16b, v1.16b\nmov v1.16b, v3.16b\nmov v0.16b, v2.16b\nadd sp, sp, #208\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, float %bs) {\n  %i = insertelement <8 x float> poison, float %bs, i64 0\n  %b = shufflevector <8 x float> %i, <8 x float> poison, <8 x i32> zeroinitializer\n  %r = call <8 x float> @llvm.pow(<8 x float> %a, <8 x float> %b)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <8 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <8 x float> %i, <8 x float> poison, <8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 44 for instruction:   %r = call <8 x float> @llvm.pow.v8f32(<8 x float> %a, <8 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "pow",
  "ty": "<8 x float>",
  "variant": "binopconstsplat",
  "codesize": 32,
  "thru": 104,
  "lat": 104,
  "sizelat": 104,
  "size": 55,
  "gisize": 62,
  "extrasize": 0,
  "asm": "sub sp, sp, #64\nstr x30, [sp, #48]                  // 8-byte Folded Spill\nstp q0, q1, [sp]                    // 32-byte Folded Spill\nmov s0, v0.s[1]\nfmov s1, #7.00000000\nbl powf\nfmov s1, #7.00000000\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nbl powf\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v0.s[1], v1.s[0]\nfmov s1, #7.00000000\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nmov s0, v0.s[2]\nbl powf\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.s[2], v0.s[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov s0, v0.s[3]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nbl powf\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.s[3], v0.s[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov s0, v0.s[1]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nbl powf\nfmov s1, #7.00000000\nstr q0, [sp]                        // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nbl powf\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v0.s[1], v1.s[0]\nfmov s1, #7.00000000\nstr q0, [sp]                        // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov s0, v0.s[2]\nbl powf\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v1.s[2], v0.s[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov s0, v0.s[3]\nstr q1, [sp]                        // 16-byte Folded Spill\nfmov s1, #7.00000000\nbl powf\nfmov s2, s0\nldr q1, [sp]                        // 16-byte Folded Reload\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nldr x30, [sp, #48]                  // 8-byte Folded Reload\nmov v1.s[3], v2.s[0]\nadd sp, sp, #64\nret",
  "giasm": "sub sp, sp, #176\nstp d13, d12, [sp, #112]            // 16-byte Folded Spill\nstp d11, d10, [sp, #128]            // 16-byte Folded Spill\nstp d9, d8, [sp, #144]              // 16-byte Folded Spill\nstr x30, [sp, #160]                 // 8-byte Folded Spill\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nmov s11, v1.s[1]\nmov s12, v1.s[2]\nmov s13, v1.s[3]\nfmov s1, #7.00000000\nmov s8, v0.s[1]\nmov s9, v0.s[2]\nmov s10, v0.s[3]\nbl powf\nstr q0, [sp, #96]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfmov s0, s8\nbl powf\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfmov s0, s9\nbl powf\nstr q0, [sp, #80]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfmov s0, s10\nbl powf\nfmov s1, #7.00000000\nstr q0, [sp, #64]                   // 16-byte Folded Spill\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nbl powf\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfmov s0, s11\nbl powf\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfmov s0, s12\nbl powf\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s1, #7.00000000\nfmov s0, s13\nbl powf\nldp q3, q2, [sp, #32]               // 32-byte Folded Reload\nldr q1, [sp, #96]                   // 16-byte Folded Reload\nldp d9, d8, [sp, #144]              // 16-byte Folded Reload\nldr x30, [sp, #160]                 // 8-byte Folded Reload\nldp d11, d10, [sp, #128]            // 16-byte Folded Reload\nmov v1.s[1], v2.s[0]\nldr q2, [sp, #16]                   // 16-byte Folded Reload\nldp d13, d12, [sp, #112]            // 16-byte Folded Reload\nmov v3.s[1], v2.s[0]\nldr q2, [sp, #80]                   // 16-byte Folded Reload\nmov v1.s[2], v2.s[0]\nldr q2, [sp]                        // 16-byte Folded Reload\nmov v3.s[2], v2.s[0]\nldr q2, [sp, #64]                   // 16-byte Folded Reload\nmov v1.s[3], v2.s[0]\nmov v3.s[3], v0.s[0]\nmov v2.16b, v1.16b\nmov v1.16b, v3.16b\nmov v0.16b, v2.16b\nadd sp, sp, #176\nret",
  "ll": "define <8 x float> @test(<8 x float> %a) {\n  %r = call <8 x float> @llvm.pow(<8 x float> %a, <8 x float> splat (float 7.0))\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 32 for instruction:   %r = call <8 x float> @llvm.pow.v8f32(<8 x float> %a, <8 x float> splat (float 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "pow",
  "ty": "<2 x double>",
  "variant": "binop",
  "codesize": 8,
  "thru": 26,
  "lat": 26,
  "sizelat": 26,
  "size": 13,
  "gisize": 16,
  "extrasize": 0,
  "asm": "sub sp, sp, #64\nstr x30, [sp, #48]                  // 8-byte Folded Spill\nstp q0, q1, [sp]                    // 32-byte Folded Spill\nmov d0, v0.d[1]\nmov d1, v1.d[1]\nbl pow\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldp q0, q1, [sp]                    // 32-byte Folded Reload\nbl pow\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nldr x30, [sp, #48]                  // 8-byte Folded Reload\nmov v0.d[1], v1.d[0]\nadd sp, sp, #64\nret",
  "giasm": "sub sp, sp, #48\nstp d9, d8, [sp, #16]               // 16-byte Folded Spill\nstr x30, [sp, #32]                  // 8-byte Folded Spill\nmov d8, v0.d[1]\nmov d9, v1.d[1]\nbl pow\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov d1, d9\nfmov d0, d8\nbl pow\nldr q1, [sp]                        // 16-byte Folded Reload\nldp d9, d8, [sp, #16]               // 16-byte Folded Reload\nldr x30, [sp, #32]                  // 8-byte Folded Reload\nmov v1.d[1], v0.d[0]\nmov v0.16b, v1.16b\nadd sp, sp, #48\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, <2 x double> %b) {\n  %r = call <2 x double> @llvm.pow(<2 x double> %a, <2 x double> %b)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 8 for instruction:   %r = call <2 x double> @llvm.pow.v2f64(<2 x double> %a, <2 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "pow",
  "ty": "<2 x double>",
  "variant": "binopconst",
  "codesize": 6,
  "thru": 24,
  "lat": 24,
  "sizelat": 24,
  "size": 14,
  "gisize": 16,
  "extrasize": 0,
  "asm": "sub sp, sp, #48\nstr x30, [sp, #32]                  // 8-byte Folded Spill\nstr q0, [sp]                        // 16-byte Folded Spill\nmov d0, v0.d[1]\nfmov d1, #6.00000000\nbl pow\nfmov d1, #7.00000000\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nbl pow\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nldr x30, [sp, #32]                  // 8-byte Folded Reload\nmov v0.d[1], v1.d[0]\nadd sp, sp, #48\nret",
  "giasm": "sub sp, sp, #32\nstr d8, [sp, #16]                   // 8-byte Folded Spill\nstr x30, [sp, #24]                  // 8-byte Folded Spill\nfmov d1, #7.00000000\nmov d8, v0.d[1]\nbl pow\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov d1, #6.00000000\nfmov d0, d8\nbl pow\nldr q1, [sp]                        // 16-byte Folded Reload\nldr x30, [sp, #24]                  // 8-byte Folded Reload\nldr d8, [sp, #16]                   // 8-byte Folded Reload\nmov v1.d[1], v0.d[0]\nmov v0.16b, v1.16b\nadd sp, sp, #32\nret",
  "ll": "define <2 x double> @test(<2 x double> %a) {\n  %r = call <2 x double> @llvm.pow(<2 x double> %a, <2 x double> <double 7.0, double 6.0>)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 6 for instruction:   %r = call <2 x double> @llvm.pow.v2f64(<2 x double> %a, <2 x double> <double 7.000000e+00, double 6.000000e+00>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "pow",
  "ty": "<2 x double>",
  "variant": "binopsplat",
  "codesize": 9,
  "thru": 27,
  "lat": 27,
  "sizelat": 27,
  "size": 16,
  "gisize": 17,
  "extrasize": 0,
  "asm": "sub sp, sp, #48\nstr d8, [sp, #32]                   // 8-byte Folded Spill\nstr x30, [sp, #40]                  // 8-byte Folded Spill\nstr q0, [sp]                        // 16-byte Folded Spill\nmov d0, v0.d[1]\nfmov d8, d1\nbl pow\nfmov d1, d8\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nbl pow\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nldr x30, [sp, #40]                  // 8-byte Folded Reload\nldr d8, [sp, #32]                   // 8-byte Folded Reload\nmov v0.d[1], v1.d[0]\nadd sp, sp, #48\nret",
  "giasm": "sub sp, sp, #48\nstp d9, d8, [sp, #16]               // 16-byte Folded Spill\nstr x30, [sp, #32]                  // 8-byte Folded Spill\nmov d8, v0.d[1]\ndup v1.2d, v1.d[0]\nmov d9, v1.d[1]\nbl pow\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov d1, d9\nfmov d0, d8\nbl pow\nldr q1, [sp]                        // 16-byte Folded Reload\nldp d9, d8, [sp, #16]               // 16-byte Folded Reload\nldr x30, [sp, #32]                  // 8-byte Folded Reload\nmov v1.d[1], v0.d[0]\nmov v0.16b, v1.16b\nadd sp, sp, #48\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, double %bs) {\n  %i = insertelement <2 x double> poison, double %bs, i64 0\n  %b = shufflevector <2 x double> %i, <2 x double> poison, <2 x i32> zeroinitializer\n  %r = call <2 x double> @llvm.pow(<2 x double> %a, <2 x double> %b)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <2 x double> poison, double %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <2 x double> %i, <2 x double> poison, <2 x i32> zeroinitializer\nCost Model: Found an estimated cost of 8 for instruction:   %r = call <2 x double> @llvm.pow.v2f64(<2 x double> %a, <2 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "pow",
  "ty": "<2 x double>",
  "variant": "binopconstsplat",
  "codesize": 6,
  "thru": 24,
  "lat": 24,
  "sizelat": 24,
  "size": 14,
  "gisize": 16,
  "extrasize": 0,
  "asm": "sub sp, sp, #48\nstr x30, [sp, #32]                  // 8-byte Folded Spill\nstr q0, [sp]                        // 16-byte Folded Spill\nmov d0, v0.d[1]\nfmov d1, #7.00000000\nbl pow\nfmov d1, #7.00000000\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nbl pow\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nldr x30, [sp, #32]                  // 8-byte Folded Reload\nmov v0.d[1], v1.d[0]\nadd sp, sp, #48\nret",
  "giasm": "sub sp, sp, #32\nstr d8, [sp, #16]                   // 8-byte Folded Spill\nstr x30, [sp, #24]                  // 8-byte Folded Spill\nfmov d1, #7.00000000\nmov d8, v0.d[1]\nbl pow\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov d1, #7.00000000\nfmov d0, d8\nbl pow\nldr q1, [sp]                        // 16-byte Folded Reload\nldr x30, [sp, #24]                  // 8-byte Folded Reload\nldr d8, [sp, #16]                   // 8-byte Folded Reload\nmov v1.d[1], v0.d[0]\nmov v0.16b, v1.16b\nadd sp, sp, #32\nret",
  "ll": "define <2 x double> @test(<2 x double> %a) {\n  %r = call <2 x double> @llvm.pow(<2 x double> %a, <2 x double> splat (double 7.0))\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 6 for instruction:   %r = call <2 x double> @llvm.pow.v2f64(<2 x double> %a, <2 x double> splat (double 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "pow",
  "ty": "<4 x double>",
  "variant": "binop",
  "codesize": 16,
  "thru": 52,
  "lat": 52,
  "sizelat": 52,
  "size": 25,
  "gisize": 34,
  "extrasize": 0,
  "asm": "sub sp, sp, #96\nstr x30, [sp, #80]                  // 8-byte Folded Spill\nstp q0, q2, [sp]                    // 32-byte Folded Spill\nmov d0, v0.d[1]\nstp q1, q3, [sp, #48]               // 32-byte Folded Spill\nmov d1, v2.d[1]\nbl pow\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldp q0, q1, [sp]                    // 32-byte Folded Reload\nbl pow\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v0.d[1], v1.d[0]\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldp q0, q1, [sp, #48]               // 32-byte Folded Reload\nmov d0, v0.d[1]\nmov d1, v1.d[1]\nbl pow\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldp q0, q1, [sp, #48]               // 32-byte Folded Reload\nbl pow\nfmov d1, d0\nldp q2, q0, [sp, #16]               // 32-byte Folded Reload\nldr x30, [sp, #80]                  // 8-byte Folded Reload\nmov v1.d[1], v2.d[0]\nadd sp, sp, #96\nret",
  "giasm": "sub sp, sp, #112\nstp d11, d10, [sp, #64]             // 16-byte Folded Spill\nstp d9, d8, [sp, #80]               // 16-byte Folded Spill\nstr x30, [sp, #96]                  // 8-byte Folded Spill\nmov v4.16b, v1.16b\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nmov v1.16b, v2.16b\nstr q3, [sp]                        // 16-byte Folded Spill\nmov d8, v0.d[1]\nmov d10, v2.d[1]\nmov d11, v3.d[1]\nmov d9, v4.d[1]\nbl pow\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nfmov d1, d10\nfmov d0, d8\nbl pow\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q1, [sp]                        // 16-byte Folded Reload\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nbl pow\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov d1, d11\nfmov d0, d9\nbl pow\nldp q3, q1, [sp, #16]               // 32-byte Folded Reload\nldr q2, [sp, #48]                   // 16-byte Folded Reload\nldp d9, d8, [sp, #80]               // 16-byte Folded Reload\nldr x30, [sp, #96]                  // 8-byte Folded Reload\nldp d11, d10, [sp, #64]             // 16-byte Folded Reload\nmov v2.d[1], v3.d[0]\nmov v1.d[1], v0.d[0]\nmov v0.16b, v2.16b\nadd sp, sp, #112\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, <4 x double> %b) {\n  %r = call <4 x double> @llvm.pow(<4 x double> %a, <4 x double> %b)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 16 for instruction:   %r = call <4 x double> @llvm.pow.v4f64(<4 x double> %a, <4 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "pow",
  "ty": "<4 x double>",
  "variant": "binopconst",
  "codesize": 12,
  "thru": 48,
  "lat": 48,
  "sizelat": 48,
  "size": 27,
  "gisize": 28,
  "extrasize": 0,
  "asm": "sub sp, sp, #64\nstr x30, [sp, #48]                  // 8-byte Folded Spill\nstr q0, [sp]                        // 16-byte Folded Spill\nmov d0, v0.d[1]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov d1, #6.00000000\nbl pow\nfmov d1, #7.00000000\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nbl pow\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v0.d[1], v1.d[0]\nfmov d1, #6.00000000\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nmov d0, v0.d[1]\nbl pow\nfmov d1, #7.00000000\nstr q0, [sp]                        // 16-byte Folded Spill\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nbl pow\nfmov d1, d0\nldp q2, q0, [sp]                    // 32-byte Folded Reload\nldr x30, [sp, #48]                  // 8-byte Folded Reload\nmov v1.d[1], v2.d[0]\nadd sp, sp, #64\nret",
  "giasm": "sub sp, sp, #80\nstp d9, d8, [sp, #48]               // 16-byte Folded Spill\nstr x30, [sp, #64]                  // 8-byte Folded Spill\nstr q1, [sp]                        // 16-byte Folded Spill\nmov d9, v1.d[1]\nfmov d1, #7.00000000\nmov d8, v0.d[1]\nbl pow\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov d1, #6.00000000\nfmov d0, d8\nbl pow\nfmov d1, #7.00000000\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nbl pow\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov d1, #6.00000000\nfmov d0, d9\nbl pow\nldp q2, q3, [sp, #16]               // 32-byte Folded Reload\nldr q1, [sp]                        // 16-byte Folded Reload\nldp d9, d8, [sp, #48]               // 16-byte Folded Reload\nldr x30, [sp, #64]                  // 8-byte Folded Reload\nmov v1.d[1], v0.d[0]\nmov v3.d[1], v2.d[0]\nmov v0.16b, v3.16b\nadd sp, sp, #80\nret",
  "ll": "define <4 x double> @test(<4 x double> %a) {\n  %r = call <4 x double> @llvm.pow(<4 x double> %a, <4 x double> <double 7.0, double 6.0, double 7.0, double 6.0>)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 12 for instruction:   %r = call <4 x double> @llvm.pow.v4f64(<4 x double> %a, <4 x double> <double 7.000000e+00, double 6.000000e+00, double 7.000000e+00, double 6.000000e+00>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "pow",
  "ty": "<4 x double>",
  "variant": "binopsplat",
  "codesize": 18,
  "thru": 54,
  "lat": 54,
  "sizelat": 54,
  "size": 30,
  "gisize": 35,
  "extrasize": 0,
  "asm": "sub sp, sp, #64\nstr d8, [sp, #48]                   // 8-byte Folded Spill\nstr x30, [sp, #56]                  // 8-byte Folded Spill\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov d1, d2\nfmov d8, d2\nstr q0, [sp]                        // 16-byte Folded Spill\nmov d0, v0.d[1]\nbl pow\nfmov d1, d8\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nbl pow\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v0.d[1], v1.d[0]\nfmov d1, d8\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nmov d0, v0.d[1]\nbl pow\nfmov d1, d8\nstr q0, [sp]                        // 16-byte Folded Spill\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nbl pow\nfmov d1, d0\nldp q2, q0, [sp]                    // 32-byte Folded Reload\nldr x30, [sp, #56]                  // 8-byte Folded Reload\nldr d8, [sp, #48]                   // 8-byte Folded Reload\nmov v1.d[1], v2.d[0]\nadd sp, sp, #64\nret",
  "giasm": "sub sp, sp, #112\nstp d11, d10, [sp, #64]             // 16-byte Folded Spill\nstp d9, d8, [sp, #80]               // 16-byte Folded Spill\nstr x30, [sp, #96]                  // 8-byte Folded Spill\nmov v3.16b, v1.16b\nstr q1, [sp, #32]                   // 16-byte Folded Spill\ndup v1.2d, v2.d[0]\ndup v2.2d, v2.d[0]\nmov d8, v0.d[1]\nmov d9, v3.d[1]\nmov d10, v1.d[1]\nstr q2, [sp]                        // 16-byte Folded Spill\nmov d11, v2.d[1]\nbl pow\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nfmov d1, d10\nfmov d0, d8\nbl pow\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q1, [sp]                        // 16-byte Folded Reload\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nbl pow\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov d1, d11\nfmov d0, d9\nbl pow\nldp q3, q1, [sp, #16]               // 32-byte Folded Reload\nldr q2, [sp, #48]                   // 16-byte Folded Reload\nldp d9, d8, [sp, #80]               // 16-byte Folded Reload\nldr x30, [sp, #96]                  // 8-byte Folded Reload\nldp d11, d10, [sp, #64]             // 16-byte Folded Reload\nmov v2.d[1], v3.d[0]\nmov v1.d[1], v0.d[0]\nmov v0.16b, v2.16b\nadd sp, sp, #112\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, double %bs) {\n  %i = insertelement <4 x double> poison, double %bs, i64 0\n  %b = shufflevector <4 x double> %i, <4 x double> poison, <4 x i32> zeroinitializer\n  %r = call <4 x double> @llvm.pow(<4 x double> %a, <4 x double> %b)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <4 x double> poison, double %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <4 x double> %i, <4 x double> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 16 for instruction:   %r = call <4 x double> @llvm.pow.v4f64(<4 x double> %a, <4 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "pow",
  "ty": "<4 x double>",
  "variant": "binopconstsplat",
  "codesize": 12,
  "thru": 48,
  "lat": 48,
  "sizelat": 48,
  "size": 27,
  "gisize": 28,
  "extrasize": 0,
  "asm": "sub sp, sp, #64\nstr x30, [sp, #48]                  // 8-byte Folded Spill\nstr q0, [sp]                        // 16-byte Folded Spill\nmov d0, v0.d[1]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov d1, #7.00000000\nbl pow\nfmov d1, #7.00000000\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nbl pow\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v0.d[1], v1.d[0]\nfmov d1, #7.00000000\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nmov d0, v0.d[1]\nbl pow\nfmov d1, #7.00000000\nstr q0, [sp]                        // 16-byte Folded Spill\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nbl pow\nfmov d1, d0\nldp q2, q0, [sp]                    // 32-byte Folded Reload\nldr x30, [sp, #48]                  // 8-byte Folded Reload\nmov v1.d[1], v2.d[0]\nadd sp, sp, #64\nret",
  "giasm": "sub sp, sp, #80\nstp d9, d8, [sp, #48]               // 16-byte Folded Spill\nstr x30, [sp, #64]                  // 8-byte Folded Spill\nstr q1, [sp]                        // 16-byte Folded Spill\nmov d9, v1.d[1]\nfmov d1, #7.00000000\nmov d8, v0.d[1]\nbl pow\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov d1, #7.00000000\nfmov d0, d8\nbl pow\nfmov d1, #7.00000000\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nbl pow\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov d1, #7.00000000\nfmov d0, d9\nbl pow\nldp q2, q3, [sp, #16]               // 32-byte Folded Reload\nldr q1, [sp]                        // 16-byte Folded Reload\nldp d9, d8, [sp, #48]               // 16-byte Folded Reload\nldr x30, [sp, #64]                  // 8-byte Folded Reload\nmov v1.d[1], v0.d[0]\nmov v3.d[1], v2.d[0]\nmov v0.16b, v3.16b\nadd sp, sp, #80\nret",
  "ll": "define <4 x double> @test(<4 x double> %a) {\n  %r = call <4 x double> @llvm.pow(<4 x double> %a, <4 x double> splat (double 7.0))\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 12 for instruction:   %r = call <4 x double> @llvm.pow.v4f64(<4 x double> %a, <4 x double> splat (double 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "pow",
  "ty": "<vscale x 4 x half>",
  "variant": "binop",
  "codesize": 0,
  "thru": 0,
  "lat": 0,
  "sizelat": 0,
  "size": -1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "LLVM ERROR: Invalid size request on a scalable vector.",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x half> (<vscale x 4 x half>, <vscale x 4 x half>) (in function: test)",
  "ll": "define <vscale x 4 x half> @test(<vscale x 4 x half> %a, <vscale x 4 x half> %b) {\n  %r = call <vscale x 4 x half> @llvm.pow(<vscale x 4 x half> %a, <vscale x 4 x half> %b)\n  ret <vscale x 4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Invalid cost for instruction:   %r = call <vscale x 4 x half> @llvm.pow.nxv4f16(<vscale x 4 x half> %a, <vscale x 4 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x half> %r"
 },
 {
  "instr": "pow",
  "ty": "<vscale x 4 x half>",
  "variant": "binopsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": -1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "LLVM ERROR: Invalid size request on a scalable vector.",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x half> (<vscale x 4 x half>, half) (in function: test)",
  "ll": "define <vscale x 4 x half> @test(<vscale x 4 x half> %a, half %bs) {\n  %i = insertelement <vscale x 4 x half> poison, half %bs, i64 0\n  %b = shufflevector <vscale x 4 x half> %i, <vscale x 4 x half> poison, <vscale x 4 x i32> zeroinitializer\n  %r = call <vscale x 4 x half> @llvm.pow(<vscale x 4 x half> %a, <vscale x 4 x half> %b)\n  ret <vscale x 4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 4 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <vscale x 4 x half> %i, <vscale x 4 x half> poison, <vscale x 4 x i32> zeroinitializer\nCost Model: Invalid cost for instruction:   %r = call <vscale x 4 x half> @llvm.pow.nxv4f16(<vscale x 4 x half> %a, <vscale x 4 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x half> %r"
 },
 {
  "instr": "pow",
  "ty": "<vscale x 4 x half>",
  "variant": "binopconstsplat",
  "codesize": 0,
  "thru": 0,
  "lat": 0,
  "sizelat": 0,
  "size": -1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "LLVM ERROR: Invalid size request on a scalable vector.",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x half> (<vscale x 4 x half>) (in function: test)",
  "ll": "define <vscale x 4 x half> @test(<vscale x 4 x half> %a) {\n  %r = call <vscale x 4 x half> @llvm.pow(<vscale x 4 x half> %a, <vscale x 4 x half> splat (half 7.0))\n  ret <vscale x 4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Invalid cost for instruction:   %r = call <vscale x 4 x half> @llvm.pow.nxv4f16(<vscale x 4 x half> %a, <vscale x 4 x half> splat (half 0xH4700))\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x half> %r"
 },
 {
  "instr": "pow",
  "ty": "<vscale x 8 x half>",
  "variant": "binop",
  "codesize": 0,
  "thru": 0,
  "lat": 0,
  "sizelat": 0,
  "size": -1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "LLVM ERROR: Invalid size request on a scalable vector.",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x half> (<vscale x 8 x half>, <vscale x 8 x half>) (in function: test)",
  "ll": "define <vscale x 8 x half> @test(<vscale x 8 x half> %a, <vscale x 8 x half> %b) {\n  %r = call <vscale x 8 x half> @llvm.pow(<vscale x 8 x half> %a, <vscale x 8 x half> %b)\n  ret <vscale x 8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Invalid cost for instruction:   %r = call <vscale x 8 x half> @llvm.pow.nxv8f16(<vscale x 8 x half> %a, <vscale x 8 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x half> %r"
 },
 {
  "instr": "pow",
  "ty": "<vscale x 8 x half>",
  "variant": "binopsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": -1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "LLVM ERROR: Invalid size request on a scalable vector.",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x half> (<vscale x 8 x half>, half) (in function: test)",
  "ll": "define <vscale x 8 x half> @test(<vscale x 8 x half> %a, half %bs) {\n  %i = insertelement <vscale x 8 x half> poison, half %bs, i64 0\n  %b = shufflevector <vscale x 8 x half> %i, <vscale x 8 x half> poison, <vscale x 8 x i32> zeroinitializer\n  %r = call <vscale x 8 x half> @llvm.pow(<vscale x 8 x half> %a, <vscale x 8 x half> %b)\n  ret <vscale x 8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 8 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <vscale x 8 x half> %i, <vscale x 8 x half> poison, <vscale x 8 x i32> zeroinitializer\nCost Model: Invalid cost for instruction:   %r = call <vscale x 8 x half> @llvm.pow.nxv8f16(<vscale x 8 x half> %a, <vscale x 8 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x half> %r"
 },
 {
  "instr": "pow",
  "ty": "<vscale x 8 x half>",
  "variant": "binopconstsplat",
  "codesize": 0,
  "thru": 0,
  "lat": 0,
  "sizelat": 0,
  "size": -1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "LLVM ERROR: Invalid size request on a scalable vector.",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x half> (<vscale x 8 x half>) (in function: test)",
  "ll": "define <vscale x 8 x half> @test(<vscale x 8 x half> %a) {\n  %r = call <vscale x 8 x half> @llvm.pow(<vscale x 8 x half> %a, <vscale x 8 x half> splat (half 7.0))\n  ret <vscale x 8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Invalid cost for instruction:   %r = call <vscale x 8 x half> @llvm.pow.nxv8f16(<vscale x 8 x half> %a, <vscale x 8 x half> splat (half 0xH4700))\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x half> %r"
 },
 {
  "instr": "pow",
  "ty": "<vscale x 16 x half>",
  "variant": "binop",
  "codesize": 0,
  "thru": 0,
  "lat": 0,
  "sizelat": 0,
  "size": -1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "LLVM ERROR: Invalid size request on a scalable vector.",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 16 x half> (<vscale x 16 x half>, <vscale x 16 x half>) (in function: test)",
  "ll": "define <vscale x 16 x half> @test(<vscale x 16 x half> %a, <vscale x 16 x half> %b) {\n  %r = call <vscale x 16 x half> @llvm.pow(<vscale x 16 x half> %a, <vscale x 16 x half> %b)\n  ret <vscale x 16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Invalid cost for instruction:   %r = call <vscale x 16 x half> @llvm.pow.nxv16f16(<vscale x 16 x half> %a, <vscale x 16 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 16 x half> %r"
 },
 {
  "instr": "pow",
  "ty": "<vscale x 16 x half>",
  "variant": "binopsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": -1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "LLVM ERROR: Invalid size request on a scalable vector.",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 16 x half> (<vscale x 16 x half>, half) (in function: test)",
  "ll": "define <vscale x 16 x half> @test(<vscale x 16 x half> %a, half %bs) {\n  %i = insertelement <vscale x 16 x half> poison, half %bs, i64 0\n  %b = shufflevector <vscale x 16 x half> %i, <vscale x 16 x half> poison, <vscale x 16 x i32> zeroinitializer\n  %r = call <vscale x 16 x half> @llvm.pow(<vscale x 16 x half> %a, <vscale x 16 x half> %b)\n  ret <vscale x 16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 16 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <vscale x 16 x half> %i, <vscale x 16 x half> poison, <vscale x 16 x i32> zeroinitializer\nCost Model: Invalid cost for instruction:   %r = call <vscale x 16 x half> @llvm.pow.nxv16f16(<vscale x 16 x half> %a, <vscale x 16 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 16 x half> %r"
 },
 {
  "instr": "pow",
  "ty": "<vscale x 16 x half>",
  "variant": "binopconstsplat",
  "codesize": 0,
  "thru": 0,
  "lat": 0,
  "sizelat": 0,
  "size": -1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "LLVM ERROR: Invalid size request on a scalable vector.",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 16 x half> (<vscale x 16 x half>) (in function: test)",
  "ll": "define <vscale x 16 x half> @test(<vscale x 16 x half> %a) {\n  %r = call <vscale x 16 x half> @llvm.pow(<vscale x 16 x half> %a, <vscale x 16 x half> splat (half 7.0))\n  ret <vscale x 16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Invalid cost for instruction:   %r = call <vscale x 16 x half> @llvm.pow.nxv16f16(<vscale x 16 x half> %a, <vscale x 16 x half> splat (half 0xH4700))\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 16 x half> %r"
 },
 {
  "instr": "pow",
  "ty": "<vscale x 2 x float>",
  "variant": "binop",
  "codesize": 0,
  "thru": 0,
  "lat": 0,
  "sizelat": 0,
  "size": -1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "LLVM ERROR: Invalid size request on a scalable vector.",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x float> (<vscale x 2 x float>, <vscale x 2 x float>) (in function: test)",
  "ll": "define <vscale x 2 x float> @test(<vscale x 2 x float> %a, <vscale x 2 x float> %b) {\n  %r = call <vscale x 2 x float> @llvm.pow(<vscale x 2 x float> %a, <vscale x 2 x float> %b)\n  ret <vscale x 2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Invalid cost for instruction:   %r = call <vscale x 2 x float> @llvm.pow.nxv2f32(<vscale x 2 x float> %a, <vscale x 2 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x float> %r"
 },
 {
  "instr": "pow",
  "ty": "<vscale x 2 x float>",
  "variant": "binopsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": -1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "LLVM ERROR: Invalid size request on a scalable vector.",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x float> (<vscale x 2 x float>, float) (in function: test)",
  "ll": "define <vscale x 2 x float> @test(<vscale x 2 x float> %a, float %bs) {\n  %i = insertelement <vscale x 2 x float> poison, float %bs, i64 0\n  %b = shufflevector <vscale x 2 x float> %i, <vscale x 2 x float> poison, <vscale x 2 x i32> zeroinitializer\n  %r = call <vscale x 2 x float> @llvm.pow(<vscale x 2 x float> %a, <vscale x 2 x float> %b)\n  ret <vscale x 2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 2 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <vscale x 2 x float> %i, <vscale x 2 x float> poison, <vscale x 2 x i32> zeroinitializer\nCost Model: Invalid cost for instruction:   %r = call <vscale x 2 x float> @llvm.pow.nxv2f32(<vscale x 2 x float> %a, <vscale x 2 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x float> %r"
 },
 {
  "instr": "pow",
  "ty": "<vscale x 2 x float>",
  "variant": "binopconstsplat",
  "codesize": 0,
  "thru": 0,
  "lat": 0,
  "sizelat": 0,
  "size": -1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "LLVM ERROR: Invalid size request on a scalable vector.",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x float> (<vscale x 2 x float>) (in function: test)",
  "ll": "define <vscale x 2 x float> @test(<vscale x 2 x float> %a) {\n  %r = call <vscale x 2 x float> @llvm.pow(<vscale x 2 x float> %a, <vscale x 2 x float> splat (float 7.0))\n  ret <vscale x 2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Invalid cost for instruction:   %r = call <vscale x 2 x float> @llvm.pow.nxv2f32(<vscale x 2 x float> %a, <vscale x 2 x float> splat (float 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x float> %r"
 },
 {
  "instr": "pow",
  "ty": "<vscale x 4 x float>",
  "variant": "binop",
  "codesize": 0,
  "thru": 0,
  "lat": 0,
  "sizelat": 0,
  "size": -1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "LLVM ERROR: Invalid size request on a scalable vector.",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x float> (<vscale x 4 x float>, <vscale x 4 x float>) (in function: test)",
  "ll": "define <vscale x 4 x float> @test(<vscale x 4 x float> %a, <vscale x 4 x float> %b) {\n  %r = call <vscale x 4 x float> @llvm.pow(<vscale x 4 x float> %a, <vscale x 4 x float> %b)\n  ret <vscale x 4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Invalid cost for instruction:   %r = call <vscale x 4 x float> @llvm.pow.nxv4f32(<vscale x 4 x float> %a, <vscale x 4 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x float> %r"
 },
 {
  "instr": "pow",
  "ty": "<vscale x 4 x float>",
  "variant": "binopsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": -1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "LLVM ERROR: Invalid size request on a scalable vector.",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x float> (<vscale x 4 x float>, float) (in function: test)",
  "ll": "define <vscale x 4 x float> @test(<vscale x 4 x float> %a, float %bs) {\n  %i = insertelement <vscale x 4 x float> poison, float %bs, i64 0\n  %b = shufflevector <vscale x 4 x float> %i, <vscale x 4 x float> poison, <vscale x 4 x i32> zeroinitializer\n  %r = call <vscale x 4 x float> @llvm.pow(<vscale x 4 x float> %a, <vscale x 4 x float> %b)\n  ret <vscale x 4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 4 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <vscale x 4 x float> %i, <vscale x 4 x float> poison, <vscale x 4 x i32> zeroinitializer\nCost Model: Invalid cost for instruction:   %r = call <vscale x 4 x float> @llvm.pow.nxv4f32(<vscale x 4 x float> %a, <vscale x 4 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x float> %r"
 },
 {
  "instr": "pow",
  "ty": "<vscale x 4 x float>",
  "variant": "binopconstsplat",
  "codesize": 0,
  "thru": 0,
  "lat": 0,
  "sizelat": 0,
  "size": -1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "LLVM ERROR: Invalid size request on a scalable vector.",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x float> (<vscale x 4 x float>) (in function: test)",
  "ll": "define <vscale x 4 x float> @test(<vscale x 4 x float> %a) {\n  %r = call <vscale x 4 x float> @llvm.pow(<vscale x 4 x float> %a, <vscale x 4 x float> splat (float 7.0))\n  ret <vscale x 4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Invalid cost for instruction:   %r = call <vscale x 4 x float> @llvm.pow.nxv4f32(<vscale x 4 x float> %a, <vscale x 4 x float> splat (float 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x float> %r"
 },
 {
  "instr": "pow",
  "ty": "<vscale x 8 x float>",
  "variant": "binop",
  "codesize": 0,
  "thru": 0,
  "lat": 0,
  "sizelat": 0,
  "size": -1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "LLVM ERROR: Invalid size request on a scalable vector.",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x float> (<vscale x 8 x float>, <vscale x 8 x float>) (in function: test)",
  "ll": "define <vscale x 8 x float> @test(<vscale x 8 x float> %a, <vscale x 8 x float> %b) {\n  %r = call <vscale x 8 x float> @llvm.pow(<vscale x 8 x float> %a, <vscale x 8 x float> %b)\n  ret <vscale x 8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Invalid cost for instruction:   %r = call <vscale x 8 x float> @llvm.pow.nxv8f32(<vscale x 8 x float> %a, <vscale x 8 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x float> %r"
 },
 {
  "instr": "pow",
  "ty": "<vscale x 8 x float>",
  "variant": "binopsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": -1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "LLVM ERROR: Invalid size request on a scalable vector.",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x float> (<vscale x 8 x float>, float) (in function: test)",
  "ll": "define <vscale x 8 x float> @test(<vscale x 8 x float> %a, float %bs) {\n  %i = insertelement <vscale x 8 x float> poison, float %bs, i64 0\n  %b = shufflevector <vscale x 8 x float> %i, <vscale x 8 x float> poison, <vscale x 8 x i32> zeroinitializer\n  %r = call <vscale x 8 x float> @llvm.pow(<vscale x 8 x float> %a, <vscale x 8 x float> %b)\n  ret <vscale x 8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 8 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <vscale x 8 x float> %i, <vscale x 8 x float> poison, <vscale x 8 x i32> zeroinitializer\nCost Model: Invalid cost for instruction:   %r = call <vscale x 8 x float> @llvm.pow.nxv8f32(<vscale x 8 x float> %a, <vscale x 8 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x float> %r"
 },
 {
  "instr": "pow",
  "ty": "<vscale x 8 x float>",
  "variant": "binopconstsplat",
  "codesize": 0,
  "thru": 0,
  "lat": 0,
  "sizelat": 0,
  "size": -1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "LLVM ERROR: Invalid size request on a scalable vector.",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x float> (<vscale x 8 x float>) (in function: test)",
  "ll": "define <vscale x 8 x float> @test(<vscale x 8 x float> %a) {\n  %r = call <vscale x 8 x float> @llvm.pow(<vscale x 8 x float> %a, <vscale x 8 x float> splat (float 7.0))\n  ret <vscale x 8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Invalid cost for instruction:   %r = call <vscale x 8 x float> @llvm.pow.nxv8f32(<vscale x 8 x float> %a, <vscale x 8 x float> splat (float 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x float> %r"
 },
 {
  "instr": "pow",
  "ty": "<vscale x 2 x double>",
  "variant": "binop",
  "codesize": 0,
  "thru": 0,
  "lat": 0,
  "sizelat": 0,
  "size": -1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "LLVM ERROR: Invalid size request on a scalable vector.",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x double> (<vscale x 2 x double>, <vscale x 2 x double>) (in function: test)",
  "ll": "define <vscale x 2 x double> @test(<vscale x 2 x double> %a, <vscale x 2 x double> %b) {\n  %r = call <vscale x 2 x double> @llvm.pow(<vscale x 2 x double> %a, <vscale x 2 x double> %b)\n  ret <vscale x 2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Invalid cost for instruction:   %r = call <vscale x 2 x double> @llvm.pow.nxv2f64(<vscale x 2 x double> %a, <vscale x 2 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x double> %r"
 },
 {
  "instr": "pow",
  "ty": "<vscale x 2 x double>",
  "variant": "binopsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": -1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "LLVM ERROR: Invalid size request on a scalable vector.",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x double> (<vscale x 2 x double>, double) (in function: test)",
  "ll": "define <vscale x 2 x double> @test(<vscale x 2 x double> %a, double %bs) {\n  %i = insertelement <vscale x 2 x double> poison, double %bs, i64 0\n  %b = shufflevector <vscale x 2 x double> %i, <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer\n  %r = call <vscale x 2 x double> @llvm.pow(<vscale x 2 x double> %a, <vscale x 2 x double> %b)\n  ret <vscale x 2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 2 x double> poison, double %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <vscale x 2 x double> %i, <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer\nCost Model: Invalid cost for instruction:   %r = call <vscale x 2 x double> @llvm.pow.nxv2f64(<vscale x 2 x double> %a, <vscale x 2 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x double> %r"
 },
 {
  "instr": "pow",
  "ty": "<vscale x 2 x double>",
  "variant": "binopconstsplat",
  "codesize": 0,
  "thru": 0,
  "lat": 0,
  "sizelat": 0,
  "size": -1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "LLVM ERROR: Invalid size request on a scalable vector.",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x double> (<vscale x 2 x double>) (in function: test)",
  "ll": "define <vscale x 2 x double> @test(<vscale x 2 x double> %a) {\n  %r = call <vscale x 2 x double> @llvm.pow(<vscale x 2 x double> %a, <vscale x 2 x double> splat (double 7.0))\n  ret <vscale x 2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Invalid cost for instruction:   %r = call <vscale x 2 x double> @llvm.pow.nxv2f64(<vscale x 2 x double> %a, <vscale x 2 x double> splat (double 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x double> %r"
 },
 {
  "instr": "pow",
  "ty": "<vscale x 4 x double>",
  "variant": "binop",
  "codesize": 0,
  "thru": 0,
  "lat": 0,
  "sizelat": 0,
  "size": -1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "LLVM ERROR: Invalid size request on a scalable vector.",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x double> (<vscale x 4 x double>, <vscale x 4 x double>) (in function: test)",
  "ll": "define <vscale x 4 x double> @test(<vscale x 4 x double> %a, <vscale x 4 x double> %b) {\n  %r = call <vscale x 4 x double> @llvm.pow(<vscale x 4 x double> %a, <vscale x 4 x double> %b)\n  ret <vscale x 4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Invalid cost for instruction:   %r = call <vscale x 4 x double> @llvm.pow.nxv4f64(<vscale x 4 x double> %a, <vscale x 4 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x double> %r"
 },
 {
  "instr": "pow",
  "ty": "<vscale x 4 x double>",
  "variant": "binopsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": -1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "LLVM ERROR: Invalid size request on a scalable vector.",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x double> (<vscale x 4 x double>, double) (in function: test)",
  "ll": "define <vscale x 4 x double> @test(<vscale x 4 x double> %a, double %bs) {\n  %i = insertelement <vscale x 4 x double> poison, double %bs, i64 0\n  %b = shufflevector <vscale x 4 x double> %i, <vscale x 4 x double> poison, <vscale x 4 x i32> zeroinitializer\n  %r = call <vscale x 4 x double> @llvm.pow(<vscale x 4 x double> %a, <vscale x 4 x double> %b)\n  ret <vscale x 4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <vscale x 4 x double> poison, double %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <vscale x 4 x double> %i, <vscale x 4 x double> poison, <vscale x 4 x i32> zeroinitializer\nCost Model: Invalid cost for instruction:   %r = call <vscale x 4 x double> @llvm.pow.nxv4f64(<vscale x 4 x double> %a, <vscale x 4 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x double> %r"
 },
 {
  "instr": "pow",
  "ty": "<vscale x 4 x double>",
  "variant": "binopconstsplat",
  "codesize": 0,
  "thru": 0,
  "lat": 0,
  "sizelat": 0,
  "size": -1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "LLVM ERROR: Invalid size request on a scalable vector.",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x double> (<vscale x 4 x double>) (in function: test)",
  "ll": "define <vscale x 4 x double> @test(<vscale x 4 x double> %a) {\n  %r = call <vscale x 4 x double> @llvm.pow(<vscale x 4 x double> %a, <vscale x 4 x double> splat (double 7.0))\n  ret <vscale x 4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Invalid cost for instruction:   %r = call <vscale x 4 x double> @llvm.pow.nxv4f64(<vscale x 4 x double> %a, <vscale x 4 x double> splat (double 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x double> %r"
 },
 {
  "instr": "fneg",
  "ty": "half",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fneg h0, h0\nret",
  "giasm": "fneg h0, h0\nret",
  "ll": "define half @test(half %a) {\n  %r = fneg half %a\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fneg half %a\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "fneg",
  "ty": "float",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fneg s0, s0\nret",
  "giasm": "fneg s0, s0\nret",
  "ll": "define float @test(float %a) {\n  %r = fneg float %a\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fneg float %a\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "fneg",
  "ty": "double",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fneg d0, d0\nret",
  "giasm": "fneg d0, d0\nret",
  "ll": "define double @test(double %a) {\n  %r = fneg double %a\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fneg double %a\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "fneg",
  "ty": "<4 x half>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fneg v0.4h, v0.4h\nret",
  "giasm": "fneg v0.4h, v0.4h\nret",
  "ll": "define <4 x half> @test(<4 x half> %a) {\n  %r = fneg <4 x half> %a\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fneg <4 x half> %a\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "fneg",
  "ty": "<8 x half>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fneg v0.8h, v0.8h\nret",
  "giasm": "fneg v0.8h, v0.8h\nret",
  "ll": "define <8 x half> @test(<8 x half> %a) {\n  %r = fneg <8 x half> %a\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fneg <8 x half> %a\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "fneg",
  "ty": "<16 x half>",
  "variant": "unop",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fneg v0.8h, v0.8h\nfneg v1.8h, v1.8h\nret",
  "giasm": "fneg v0.8h, v0.8h\nfneg v1.8h, v1.8h\nret",
  "ll": "define <16 x half> @test(<16 x half> %a) {\n  %r = fneg <16 x half> %a\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fneg <16 x half> %a\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "fneg",
  "ty": "<2 x float>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fneg v0.2s, v0.2s\nret",
  "giasm": "fneg v0.2s, v0.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a) {\n  %r = fneg <2 x float> %a\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fneg <2 x float> %a\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "fneg",
  "ty": "<4 x float>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fneg v0.4s, v0.4s\nret",
  "giasm": "fneg v0.4s, v0.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a) {\n  %r = fneg <4 x float> %a\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fneg <4 x float> %a\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "fneg",
  "ty": "<8 x float>",
  "variant": "unop",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fneg v0.4s, v0.4s\nfneg v1.4s, v1.4s\nret",
  "giasm": "fneg v0.4s, v0.4s\nfneg v1.4s, v1.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a) {\n  %r = fneg <8 x float> %a\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fneg <8 x float> %a\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "fneg",
  "ty": "<2 x double>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fneg v0.2d, v0.2d\nret",
  "giasm": "fneg v0.2d, v0.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a) {\n  %r = fneg <2 x double> %a\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fneg <2 x double> %a\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "fneg",
  "ty": "<4 x double>",
  "variant": "unop",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fneg v0.2d, v0.2d\nfneg v1.2d, v1.2d\nret",
  "giasm": "fneg v0.2d, v0.2d\nfneg v1.2d, v1.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a) {\n  %r = fneg <4 x double> %a\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fneg <4 x double> %a\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "fneg",
  "ty": "<vscale x 4 x half>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.s\nfneg z0.h, p0/m, z0.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x half> (<vscale x 4 x half>) (in function: test)",
  "ll": "define <vscale x 4 x half> @test(<vscale x 4 x half> %a) {\n  %r = fneg <vscale x 4 x half> %a\n  ret <vscale x 4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fneg <vscale x 4 x half> %a\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x half> %r"
 },
 {
  "instr": "fneg",
  "ty": "<vscale x 8 x half>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.h\nfneg z0.h, p0/m, z0.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x half> (<vscale x 8 x half>) (in function: test)",
  "ll": "define <vscale x 8 x half> @test(<vscale x 8 x half> %a) {\n  %r = fneg <vscale x 8 x half> %a\n  ret <vscale x 8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fneg <vscale x 8 x half> %a\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x half> %r"
 },
 {
  "instr": "fneg",
  "ty": "<vscale x 16 x half>",
  "variant": "unop",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.h\nfneg z0.h, p0/m, z0.h\nfneg z1.h, p0/m, z1.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 16 x half> (<vscale x 16 x half>) (in function: test)",
  "ll": "define <vscale x 16 x half> @test(<vscale x 16 x half> %a) {\n  %r = fneg <vscale x 16 x half> %a\n  ret <vscale x 16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fneg <vscale x 16 x half> %a\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 16 x half> %r"
 },
 {
  "instr": "fneg",
  "ty": "<vscale x 2 x float>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.d\nfneg z0.s, p0/m, z0.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x float> (<vscale x 2 x float>) (in function: test)",
  "ll": "define <vscale x 2 x float> @test(<vscale x 2 x float> %a) {\n  %r = fneg <vscale x 2 x float> %a\n  ret <vscale x 2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fneg <vscale x 2 x float> %a\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x float> %r"
 },
 {
  "instr": "fneg",
  "ty": "<vscale x 4 x float>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.s\nfneg z0.s, p0/m, z0.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x float> (<vscale x 4 x float>) (in function: test)",
  "ll": "define <vscale x 4 x float> @test(<vscale x 4 x float> %a) {\n  %r = fneg <vscale x 4 x float> %a\n  ret <vscale x 4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fneg <vscale x 4 x float> %a\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x float> %r"
 },
 {
  "instr": "fneg",
  "ty": "<vscale x 8 x float>",
  "variant": "unop",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.s\nfneg z0.s, p0/m, z0.s\nfneg z1.s, p0/m, z1.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x float> (<vscale x 8 x float>) (in function: test)",
  "ll": "define <vscale x 8 x float> @test(<vscale x 8 x float> %a) {\n  %r = fneg <vscale x 8 x float> %a\n  ret <vscale x 8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fneg <vscale x 8 x float> %a\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x float> %r"
 },
 {
  "instr": "fneg",
  "ty": "<vscale x 2 x double>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.d\nfneg z0.d, p0/m, z0.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x double> (<vscale x 2 x double>) (in function: test)",
  "ll": "define <vscale x 2 x double> @test(<vscale x 2 x double> %a) {\n  %r = fneg <vscale x 2 x double> %a\n  ret <vscale x 2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fneg <vscale x 2 x double> %a\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x double> %r"
 },
 {
  "instr": "fneg",
  "ty": "<vscale x 4 x double>",
  "variant": "unop",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.d\nfneg z0.d, p0/m, z0.d\nfneg z1.d, p0/m, z1.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x double> (<vscale x 4 x double>) (in function: test)",
  "ll": "define <vscale x 4 x double> @test(<vscale x 4 x double> %a) {\n  %r = fneg <vscale x 4 x double> %a\n  ret <vscale x 4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fneg <vscale x 4 x double> %a\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x double> %r"
 },
 {
  "instr": "fabs",
  "ty": "half",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fabs h0, h0\nret",
  "giasm": "fabs h0, h0\nret",
  "ll": "define half @test(half %a) {\n  %r = call half @llvm.fabs(half %a)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call half @llvm.fabs.f16(half %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "fabs",
  "ty": "float",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fabs s0, s0\nret",
  "giasm": "fabs s0, s0\nret",
  "ll": "define float @test(float %a) {\n  %r = call float @llvm.fabs(float %a)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call float @llvm.fabs.f32(float %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "fabs",
  "ty": "double",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fabs d0, d0\nret",
  "giasm": "fabs d0, d0\nret",
  "ll": "define double @test(double %a) {\n  %r = call double @llvm.fabs(double %a)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call double @llvm.fabs.f64(double %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "fabs",
  "ty": "<4 x half>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fabs v0.4h, v0.4h\nret",
  "giasm": "fabs v0.4h, v0.4h\nret",
  "ll": "define <4 x half> @test(<4 x half> %a) {\n  %r = call <4 x half> @llvm.fabs(<4 x half> %a)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x half> @llvm.fabs.v4f16(<4 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "fabs",
  "ty": "<8 x half>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fabs v0.8h, v0.8h\nret",
  "giasm": "fabs v0.8h, v0.8h\nret",
  "ll": "define <8 x half> @test(<8 x half> %a) {\n  %r = call <8 x half> @llvm.fabs(<8 x half> %a)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <8 x half> @llvm.fabs.v8f16(<8 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "fabs",
  "ty": "<16 x half>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fabs v0.8h, v0.8h\nfabs v1.8h, v1.8h\nret",
  "giasm": "fabs v0.8h, v0.8h\nfabs v1.8h, v1.8h\nret",
  "ll": "define <16 x half> @test(<16 x half> %a) {\n  %r = call <16 x half> @llvm.fabs(<16 x half> %a)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <16 x half> @llvm.fabs.v16f16(<16 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "fabs",
  "ty": "<2 x float>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fabs v0.2s, v0.2s\nret",
  "giasm": "fabs v0.2s, v0.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a) {\n  %r = call <2 x float> @llvm.fabs(<2 x float> %a)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x float> @llvm.fabs.v2f32(<2 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "fabs",
  "ty": "<4 x float>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fabs v0.4s, v0.4s\nret",
  "giasm": "fabs v0.4s, v0.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a) {\n  %r = call <4 x float> @llvm.fabs(<4 x float> %a)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x float> @llvm.fabs.v4f32(<4 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "fabs",
  "ty": "<8 x float>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fabs v0.4s, v0.4s\nfabs v1.4s, v1.4s\nret",
  "giasm": "fabs v0.4s, v0.4s\nfabs v1.4s, v1.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a) {\n  %r = call <8 x float> @llvm.fabs(<8 x float> %a)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x float> @llvm.fabs.v8f32(<8 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "fabs",
  "ty": "<2 x double>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fabs v0.2d, v0.2d\nret",
  "giasm": "fabs v0.2d, v0.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a) {\n  %r = call <2 x double> @llvm.fabs(<2 x double> %a)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x double> @llvm.fabs.v2f64(<2 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "fabs",
  "ty": "<4 x double>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fabs v0.2d, v0.2d\nfabs v1.2d, v1.2d\nret",
  "giasm": "fabs v0.2d, v0.2d\nfabs v1.2d, v1.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a) {\n  %r = call <4 x double> @llvm.fabs(<4 x double> %a)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x double> @llvm.fabs.v4f64(<4 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "fabs",
  "ty": "<vscale x 4 x half>",
  "variant": "unop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.s\nfabs z0.h, p0/m, z0.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x half> (<vscale x 4 x half>) (in function: test)",
  "ll": "define <vscale x 4 x half> @test(<vscale x 4 x half> %a) {\n  %r = call <vscale x 4 x half> @llvm.fabs(<vscale x 4 x half> %a)\n  ret <vscale x 4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 4 x half> @llvm.fabs.nxv4f16(<vscale x 4 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x half> %r"
 },
 {
  "instr": "fabs",
  "ty": "<vscale x 8 x half>",
  "variant": "unop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.h\nfabs z0.h, p0/m, z0.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x half> (<vscale x 8 x half>) (in function: test)",
  "ll": "define <vscale x 8 x half> @test(<vscale x 8 x half> %a) {\n  %r = call <vscale x 8 x half> @llvm.fabs(<vscale x 8 x half> %a)\n  ret <vscale x 8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 8 x half> @llvm.fabs.nxv8f16(<vscale x 8 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x half> %r"
 },
 {
  "instr": "fabs",
  "ty": "<vscale x 16 x half>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.h\nfabs z0.h, p0/m, z0.h\nfabs z1.h, p0/m, z1.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 16 x half> (<vscale x 16 x half>) (in function: test)",
  "ll": "define <vscale x 16 x half> @test(<vscale x 16 x half> %a) {\n  %r = call <vscale x 16 x half> @llvm.fabs(<vscale x 16 x half> %a)\n  ret <vscale x 16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <vscale x 16 x half> @llvm.fabs.nxv16f16(<vscale x 16 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 16 x half> %r"
 },
 {
  "instr": "fabs",
  "ty": "<vscale x 2 x float>",
  "variant": "unop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.d\nfabs z0.s, p0/m, z0.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x float> (<vscale x 2 x float>) (in function: test)",
  "ll": "define <vscale x 2 x float> @test(<vscale x 2 x float> %a) {\n  %r = call <vscale x 2 x float> @llvm.fabs(<vscale x 2 x float> %a)\n  ret <vscale x 2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 2 x float> @llvm.fabs.nxv2f32(<vscale x 2 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x float> %r"
 },
 {
  "instr": "fabs",
  "ty": "<vscale x 4 x float>",
  "variant": "unop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.s\nfabs z0.s, p0/m, z0.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x float> (<vscale x 4 x float>) (in function: test)",
  "ll": "define <vscale x 4 x float> @test(<vscale x 4 x float> %a) {\n  %r = call <vscale x 4 x float> @llvm.fabs(<vscale x 4 x float> %a)\n  ret <vscale x 4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 4 x float> @llvm.fabs.nxv4f32(<vscale x 4 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x float> %r"
 },
 {
  "instr": "fabs",
  "ty": "<vscale x 8 x float>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.s\nfabs z0.s, p0/m, z0.s\nfabs z1.s, p0/m, z1.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x float> (<vscale x 8 x float>) (in function: test)",
  "ll": "define <vscale x 8 x float> @test(<vscale x 8 x float> %a) {\n  %r = call <vscale x 8 x float> @llvm.fabs(<vscale x 8 x float> %a)\n  ret <vscale x 8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <vscale x 8 x float> @llvm.fabs.nxv8f32(<vscale x 8 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x float> %r"
 },
 {
  "instr": "fabs",
  "ty": "<vscale x 2 x double>",
  "variant": "unop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.d\nfabs z0.d, p0/m, z0.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x double> (<vscale x 2 x double>) (in function: test)",
  "ll": "define <vscale x 2 x double> @test(<vscale x 2 x double> %a) {\n  %r = call <vscale x 2 x double> @llvm.fabs(<vscale x 2 x double> %a)\n  ret <vscale x 2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 2 x double> @llvm.fabs.nxv2f64(<vscale x 2 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x double> %r"
 },
 {
  "instr": "fabs",
  "ty": "<vscale x 4 x double>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.d\nfabs z0.d, p0/m, z0.d\nfabs z1.d, p0/m, z1.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x double> (<vscale x 4 x double>) (in function: test)",
  "ll": "define <vscale x 4 x double> @test(<vscale x 4 x double> %a) {\n  %r = call <vscale x 4 x double> @llvm.fabs(<vscale x 4 x double> %a)\n  ret <vscale x 4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <vscale x 4 x double> @llvm.fabs.nxv4f64(<vscale x 4 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x double> %r"
 },
 {
  "instr": "sqrt",
  "ty": "half",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fsqrt h0, h0\nret",
  "giasm": "fsqrt h0, h0\nret",
  "ll": "define half @test(half %a) {\n  %r = call half @llvm.sqrt(half %a)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call half @llvm.sqrt.f16(half %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "sqrt",
  "ty": "float",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fsqrt s0, s0\nret",
  "giasm": "fsqrt s0, s0\nret",
  "ll": "define float @test(float %a) {\n  %r = call float @llvm.sqrt(float %a)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call float @llvm.sqrt.f32(float %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "sqrt",
  "ty": "double",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fsqrt d0, d0\nret",
  "giasm": "fsqrt d0, d0\nret",
  "ll": "define double @test(double %a) {\n  %r = call double @llvm.sqrt(double %a)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call double @llvm.sqrt.f64(double %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "sqrt",
  "ty": "<4 x half>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fsqrt v0.4h, v0.4h\nret",
  "giasm": "fsqrt v0.4h, v0.4h\nret",
  "ll": "define <4 x half> @test(<4 x half> %a) {\n  %r = call <4 x half> @llvm.sqrt(<4 x half> %a)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x half> @llvm.sqrt.v4f16(<4 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "sqrt",
  "ty": "<8 x half>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fsqrt v0.8h, v0.8h\nret",
  "giasm": "fsqrt v0.8h, v0.8h\nret",
  "ll": "define <8 x half> @test(<8 x half> %a) {\n  %r = call <8 x half> @llvm.sqrt(<8 x half> %a)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <8 x half> @llvm.sqrt.v8f16(<8 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "sqrt",
  "ty": "<16 x half>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fsqrt v0.8h, v0.8h\nfsqrt v1.8h, v1.8h\nret",
  "giasm": "fsqrt v0.8h, v0.8h\nfsqrt v1.8h, v1.8h\nret",
  "ll": "define <16 x half> @test(<16 x half> %a) {\n  %r = call <16 x half> @llvm.sqrt(<16 x half> %a)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <16 x half> @llvm.sqrt.v16f16(<16 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "sqrt",
  "ty": "<2 x float>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fsqrt v0.2s, v0.2s\nret",
  "giasm": "fsqrt v0.2s, v0.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a) {\n  %r = call <2 x float> @llvm.sqrt(<2 x float> %a)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x float> @llvm.sqrt.v2f32(<2 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "sqrt",
  "ty": "<4 x float>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fsqrt v0.4s, v0.4s\nret",
  "giasm": "fsqrt v0.4s, v0.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a) {\n  %r = call <4 x float> @llvm.sqrt(<4 x float> %a)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "sqrt",
  "ty": "<8 x float>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fsqrt v0.4s, v0.4s\nfsqrt v1.4s, v1.4s\nret",
  "giasm": "fsqrt v0.4s, v0.4s\nfsqrt v1.4s, v1.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a) {\n  %r = call <8 x float> @llvm.sqrt(<8 x float> %a)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x float> @llvm.sqrt.v8f32(<8 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "sqrt",
  "ty": "<2 x double>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fsqrt v0.2d, v0.2d\nret",
  "giasm": "fsqrt v0.2d, v0.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a) {\n  %r = call <2 x double> @llvm.sqrt(<2 x double> %a)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x double> @llvm.sqrt.v2f64(<2 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "sqrt",
  "ty": "<4 x double>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fsqrt v0.2d, v0.2d\nfsqrt v1.2d, v1.2d\nret",
  "giasm": "fsqrt v0.2d, v0.2d\nfsqrt v1.2d, v1.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a) {\n  %r = call <4 x double> @llvm.sqrt(<4 x double> %a)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x double> @llvm.sqrt.v4f64(<4 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "sqrt",
  "ty": "<vscale x 4 x half>",
  "variant": "unop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.s\nfsqrt z0.h, p0/m, z0.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x half> (<vscale x 4 x half>) (in function: test)",
  "ll": "define <vscale x 4 x half> @test(<vscale x 4 x half> %a) {\n  %r = call <vscale x 4 x half> @llvm.sqrt(<vscale x 4 x half> %a)\n  ret <vscale x 4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 4 x half> @llvm.sqrt.nxv4f16(<vscale x 4 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x half> %r"
 },
 {
  "instr": "sqrt",
  "ty": "<vscale x 8 x half>",
  "variant": "unop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.h\nfsqrt z0.h, p0/m, z0.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x half> (<vscale x 8 x half>) (in function: test)",
  "ll": "define <vscale x 8 x half> @test(<vscale x 8 x half> %a) {\n  %r = call <vscale x 8 x half> @llvm.sqrt(<vscale x 8 x half> %a)\n  ret <vscale x 8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 8 x half> @llvm.sqrt.nxv8f16(<vscale x 8 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x half> %r"
 },
 {
  "instr": "sqrt",
  "ty": "<vscale x 16 x half>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.h\nfsqrt z0.h, p0/m, z0.h\nfsqrt z1.h, p0/m, z1.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 16 x half> (<vscale x 16 x half>) (in function: test)",
  "ll": "define <vscale x 16 x half> @test(<vscale x 16 x half> %a) {\n  %r = call <vscale x 16 x half> @llvm.sqrt(<vscale x 16 x half> %a)\n  ret <vscale x 16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <vscale x 16 x half> @llvm.sqrt.nxv16f16(<vscale x 16 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 16 x half> %r"
 },
 {
  "instr": "sqrt",
  "ty": "<vscale x 2 x float>",
  "variant": "unop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.d\nfsqrt z0.s, p0/m, z0.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x float> (<vscale x 2 x float>) (in function: test)",
  "ll": "define <vscale x 2 x float> @test(<vscale x 2 x float> %a) {\n  %r = call <vscale x 2 x float> @llvm.sqrt(<vscale x 2 x float> %a)\n  ret <vscale x 2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 2 x float> @llvm.sqrt.nxv2f32(<vscale x 2 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x float> %r"
 },
 {
  "instr": "sqrt",
  "ty": "<vscale x 4 x float>",
  "variant": "unop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.s\nfsqrt z0.s, p0/m, z0.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x float> (<vscale x 4 x float>) (in function: test)",
  "ll": "define <vscale x 4 x float> @test(<vscale x 4 x float> %a) {\n  %r = call <vscale x 4 x float> @llvm.sqrt(<vscale x 4 x float> %a)\n  ret <vscale x 4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 4 x float> @llvm.sqrt.nxv4f32(<vscale x 4 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x float> %r"
 },
 {
  "instr": "sqrt",
  "ty": "<vscale x 8 x float>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.s\nfsqrt z0.s, p0/m, z0.s\nfsqrt z1.s, p0/m, z1.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x float> (<vscale x 8 x float>) (in function: test)",
  "ll": "define <vscale x 8 x float> @test(<vscale x 8 x float> %a) {\n  %r = call <vscale x 8 x float> @llvm.sqrt(<vscale x 8 x float> %a)\n  ret <vscale x 8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <vscale x 8 x float> @llvm.sqrt.nxv8f32(<vscale x 8 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x float> %r"
 },
 {
  "instr": "sqrt",
  "ty": "<vscale x 2 x double>",
  "variant": "unop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.d\nfsqrt z0.d, p0/m, z0.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x double> (<vscale x 2 x double>) (in function: test)",
  "ll": "define <vscale x 2 x double> @test(<vscale x 2 x double> %a) {\n  %r = call <vscale x 2 x double> @llvm.sqrt(<vscale x 2 x double> %a)\n  ret <vscale x 2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 2 x double> @llvm.sqrt.nxv2f64(<vscale x 2 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x double> %r"
 },
 {
  "instr": "sqrt",
  "ty": "<vscale x 4 x double>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.d\nfsqrt z0.d, p0/m, z0.d\nfsqrt z1.d, p0/m, z1.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x double> (<vscale x 4 x double>) (in function: test)",
  "ll": "define <vscale x 4 x double> @test(<vscale x 4 x double> %a) {\n  %r = call <vscale x 4 x double> @llvm.sqrt(<vscale x 4 x double> %a)\n  ret <vscale x 4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <vscale x 4 x double> @llvm.sqrt.nxv4f64(<vscale x 4 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x double> %r"
 },
 {
  "instr": "ceil",
  "ty": "half",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintp h0, h0\nret",
  "giasm": "frintp h0, h0\nret",
  "ll": "define half @test(half %a) {\n  %r = call half @llvm.ceil(half %a)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call half @llvm.ceil.f16(half %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "ceil",
  "ty": "float",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintp s0, s0\nret",
  "giasm": "frintp s0, s0\nret",
  "ll": "define float @test(float %a) {\n  %r = call float @llvm.ceil(float %a)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call float @llvm.ceil.f32(float %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "ceil",
  "ty": "double",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintp d0, d0\nret",
  "giasm": "frintp d0, d0\nret",
  "ll": "define double @test(double %a) {\n  %r = call double @llvm.ceil(double %a)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call double @llvm.ceil.f64(double %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "ceil",
  "ty": "<4 x half>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintp v0.4h, v0.4h\nret",
  "giasm": "frintp v0.4h, v0.4h\nret",
  "ll": "define <4 x half> @test(<4 x half> %a) {\n  %r = call <4 x half> @llvm.ceil(<4 x half> %a)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x half> @llvm.ceil.v4f16(<4 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "ceil",
  "ty": "<8 x half>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintp v0.8h, v0.8h\nret",
  "giasm": "frintp v0.8h, v0.8h\nret",
  "ll": "define <8 x half> @test(<8 x half> %a) {\n  %r = call <8 x half> @llvm.ceil(<8 x half> %a)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <8 x half> @llvm.ceil.v8f16(<8 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "ceil",
  "ty": "<16 x half>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "frintp v0.8h, v0.8h\nfrintp v1.8h, v1.8h\nret",
  "giasm": "frintp v0.8h, v0.8h\nfrintp v1.8h, v1.8h\nret",
  "ll": "define <16 x half> @test(<16 x half> %a) {\n  %r = call <16 x half> @llvm.ceil(<16 x half> %a)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <16 x half> @llvm.ceil.v16f16(<16 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "ceil",
  "ty": "<2 x float>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintp v0.2s, v0.2s\nret",
  "giasm": "frintp v0.2s, v0.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a) {\n  %r = call <2 x float> @llvm.ceil(<2 x float> %a)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x float> @llvm.ceil.v2f32(<2 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "ceil",
  "ty": "<4 x float>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintp v0.4s, v0.4s\nret",
  "giasm": "frintp v0.4s, v0.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a) {\n  %r = call <4 x float> @llvm.ceil(<4 x float> %a)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x float> @llvm.ceil.v4f32(<4 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "ceil",
  "ty": "<8 x float>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "frintp v0.4s, v0.4s\nfrintp v1.4s, v1.4s\nret",
  "giasm": "frintp v0.4s, v0.4s\nfrintp v1.4s, v1.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a) {\n  %r = call <8 x float> @llvm.ceil(<8 x float> %a)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x float> @llvm.ceil.v8f32(<8 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "ceil",
  "ty": "<2 x double>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintp v0.2d, v0.2d\nret",
  "giasm": "frintp v0.2d, v0.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a) {\n  %r = call <2 x double> @llvm.ceil(<2 x double> %a)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x double> @llvm.ceil.v2f64(<2 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "ceil",
  "ty": "<4 x double>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "frintp v0.2d, v0.2d\nfrintp v1.2d, v1.2d\nret",
  "giasm": "frintp v0.2d, v0.2d\nfrintp v1.2d, v1.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a) {\n  %r = call <4 x double> @llvm.ceil(<4 x double> %a)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x double> @llvm.ceil.v4f64(<4 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "ceil",
  "ty": "<vscale x 4 x half>",
  "variant": "unop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.s\nfrintp z0.h, p0/m, z0.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x half> (<vscale x 4 x half>) (in function: test)",
  "ll": "define <vscale x 4 x half> @test(<vscale x 4 x half> %a) {\n  %r = call <vscale x 4 x half> @llvm.ceil(<vscale x 4 x half> %a)\n  ret <vscale x 4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 4 x half> @llvm.ceil.nxv4f16(<vscale x 4 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x half> %r"
 },
 {
  "instr": "ceil",
  "ty": "<vscale x 8 x half>",
  "variant": "unop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.h\nfrintp z0.h, p0/m, z0.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x half> (<vscale x 8 x half>) (in function: test)",
  "ll": "define <vscale x 8 x half> @test(<vscale x 8 x half> %a) {\n  %r = call <vscale x 8 x half> @llvm.ceil(<vscale x 8 x half> %a)\n  ret <vscale x 8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 8 x half> @llvm.ceil.nxv8f16(<vscale x 8 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x half> %r"
 },
 {
  "instr": "ceil",
  "ty": "<vscale x 16 x half>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.h\nfrintp z0.h, p0/m, z0.h\nfrintp z1.h, p0/m, z1.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 16 x half> (<vscale x 16 x half>) (in function: test)",
  "ll": "define <vscale x 16 x half> @test(<vscale x 16 x half> %a) {\n  %r = call <vscale x 16 x half> @llvm.ceil(<vscale x 16 x half> %a)\n  ret <vscale x 16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <vscale x 16 x half> @llvm.ceil.nxv16f16(<vscale x 16 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 16 x half> %r"
 },
 {
  "instr": "ceil",
  "ty": "<vscale x 2 x float>",
  "variant": "unop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.d\nfrintp z0.s, p0/m, z0.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x float> (<vscale x 2 x float>) (in function: test)",
  "ll": "define <vscale x 2 x float> @test(<vscale x 2 x float> %a) {\n  %r = call <vscale x 2 x float> @llvm.ceil(<vscale x 2 x float> %a)\n  ret <vscale x 2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 2 x float> @llvm.ceil.nxv2f32(<vscale x 2 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x float> %r"
 },
 {
  "instr": "ceil",
  "ty": "<vscale x 4 x float>",
  "variant": "unop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.s\nfrintp z0.s, p0/m, z0.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x float> (<vscale x 4 x float>) (in function: test)",
  "ll": "define <vscale x 4 x float> @test(<vscale x 4 x float> %a) {\n  %r = call <vscale x 4 x float> @llvm.ceil(<vscale x 4 x float> %a)\n  ret <vscale x 4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 4 x float> @llvm.ceil.nxv4f32(<vscale x 4 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x float> %r"
 },
 {
  "instr": "ceil",
  "ty": "<vscale x 8 x float>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.s\nfrintp z0.s, p0/m, z0.s\nfrintp z1.s, p0/m, z1.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x float> (<vscale x 8 x float>) (in function: test)",
  "ll": "define <vscale x 8 x float> @test(<vscale x 8 x float> %a) {\n  %r = call <vscale x 8 x float> @llvm.ceil(<vscale x 8 x float> %a)\n  ret <vscale x 8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <vscale x 8 x float> @llvm.ceil.nxv8f32(<vscale x 8 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x float> %r"
 },
 {
  "instr": "ceil",
  "ty": "<vscale x 2 x double>",
  "variant": "unop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.d\nfrintp z0.d, p0/m, z0.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x double> (<vscale x 2 x double>) (in function: test)",
  "ll": "define <vscale x 2 x double> @test(<vscale x 2 x double> %a) {\n  %r = call <vscale x 2 x double> @llvm.ceil(<vscale x 2 x double> %a)\n  ret <vscale x 2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 2 x double> @llvm.ceil.nxv2f64(<vscale x 2 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x double> %r"
 },
 {
  "instr": "ceil",
  "ty": "<vscale x 4 x double>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.d\nfrintp z0.d, p0/m, z0.d\nfrintp z1.d, p0/m, z1.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x double> (<vscale x 4 x double>) (in function: test)",
  "ll": "define <vscale x 4 x double> @test(<vscale x 4 x double> %a) {\n  %r = call <vscale x 4 x double> @llvm.ceil(<vscale x 4 x double> %a)\n  ret <vscale x 4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <vscale x 4 x double> @llvm.ceil.nxv4f64(<vscale x 4 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x double> %r"
 },
 {
  "instr": "floor",
  "ty": "half",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintm h0, h0\nret",
  "giasm": "frintm h0, h0\nret",
  "ll": "define half @test(half %a) {\n  %r = call half @llvm.floor(half %a)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call half @llvm.floor.f16(half %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "floor",
  "ty": "float",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintm s0, s0\nret",
  "giasm": "frintm s0, s0\nret",
  "ll": "define float @test(float %a) {\n  %r = call float @llvm.floor(float %a)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call float @llvm.floor.f32(float %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "floor",
  "ty": "double",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintm d0, d0\nret",
  "giasm": "frintm d0, d0\nret",
  "ll": "define double @test(double %a) {\n  %r = call double @llvm.floor(double %a)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call double @llvm.floor.f64(double %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "floor",
  "ty": "<4 x half>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintm v0.4h, v0.4h\nret",
  "giasm": "frintm v0.4h, v0.4h\nret",
  "ll": "define <4 x half> @test(<4 x half> %a) {\n  %r = call <4 x half> @llvm.floor(<4 x half> %a)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x half> @llvm.floor.v4f16(<4 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "floor",
  "ty": "<8 x half>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintm v0.8h, v0.8h\nret",
  "giasm": "frintm v0.8h, v0.8h\nret",
  "ll": "define <8 x half> @test(<8 x half> %a) {\n  %r = call <8 x half> @llvm.floor(<8 x half> %a)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <8 x half> @llvm.floor.v8f16(<8 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "floor",
  "ty": "<16 x half>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "frintm v0.8h, v0.8h\nfrintm v1.8h, v1.8h\nret",
  "giasm": "frintm v0.8h, v0.8h\nfrintm v1.8h, v1.8h\nret",
  "ll": "define <16 x half> @test(<16 x half> %a) {\n  %r = call <16 x half> @llvm.floor(<16 x half> %a)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <16 x half> @llvm.floor.v16f16(<16 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "floor",
  "ty": "<2 x float>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintm v0.2s, v0.2s\nret",
  "giasm": "frintm v0.2s, v0.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a) {\n  %r = call <2 x float> @llvm.floor(<2 x float> %a)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x float> @llvm.floor.v2f32(<2 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "floor",
  "ty": "<4 x float>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintm v0.4s, v0.4s\nret",
  "giasm": "frintm v0.4s, v0.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a) {\n  %r = call <4 x float> @llvm.floor(<4 x float> %a)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x float> @llvm.floor.v4f32(<4 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "floor",
  "ty": "<8 x float>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "frintm v0.4s, v0.4s\nfrintm v1.4s, v1.4s\nret",
  "giasm": "frintm v0.4s, v0.4s\nfrintm v1.4s, v1.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a) {\n  %r = call <8 x float> @llvm.floor(<8 x float> %a)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x float> @llvm.floor.v8f32(<8 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "floor",
  "ty": "<2 x double>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintm v0.2d, v0.2d\nret",
  "giasm": "frintm v0.2d, v0.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a) {\n  %r = call <2 x double> @llvm.floor(<2 x double> %a)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x double> @llvm.floor.v2f64(<2 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "floor",
  "ty": "<4 x double>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "frintm v0.2d, v0.2d\nfrintm v1.2d, v1.2d\nret",
  "giasm": "frintm v0.2d, v0.2d\nfrintm v1.2d, v1.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a) {\n  %r = call <4 x double> @llvm.floor(<4 x double> %a)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x double> @llvm.floor.v4f64(<4 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "floor",
  "ty": "<vscale x 4 x half>",
  "variant": "unop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.s\nfrintm z0.h, p0/m, z0.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x half> (<vscale x 4 x half>) (in function: test)",
  "ll": "define <vscale x 4 x half> @test(<vscale x 4 x half> %a) {\n  %r = call <vscale x 4 x half> @llvm.floor(<vscale x 4 x half> %a)\n  ret <vscale x 4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 4 x half> @llvm.floor.nxv4f16(<vscale x 4 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x half> %r"
 },
 {
  "instr": "floor",
  "ty": "<vscale x 8 x half>",
  "variant": "unop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.h\nfrintm z0.h, p0/m, z0.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x half> (<vscale x 8 x half>) (in function: test)",
  "ll": "define <vscale x 8 x half> @test(<vscale x 8 x half> %a) {\n  %r = call <vscale x 8 x half> @llvm.floor(<vscale x 8 x half> %a)\n  ret <vscale x 8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 8 x half> @llvm.floor.nxv8f16(<vscale x 8 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x half> %r"
 },
 {
  "instr": "floor",
  "ty": "<vscale x 16 x half>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.h\nfrintm z0.h, p0/m, z0.h\nfrintm z1.h, p0/m, z1.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 16 x half> (<vscale x 16 x half>) (in function: test)",
  "ll": "define <vscale x 16 x half> @test(<vscale x 16 x half> %a) {\n  %r = call <vscale x 16 x half> @llvm.floor(<vscale x 16 x half> %a)\n  ret <vscale x 16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <vscale x 16 x half> @llvm.floor.nxv16f16(<vscale x 16 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 16 x half> %r"
 },
 {
  "instr": "floor",
  "ty": "<vscale x 2 x float>",
  "variant": "unop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.d\nfrintm z0.s, p0/m, z0.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x float> (<vscale x 2 x float>) (in function: test)",
  "ll": "define <vscale x 2 x float> @test(<vscale x 2 x float> %a) {\n  %r = call <vscale x 2 x float> @llvm.floor(<vscale x 2 x float> %a)\n  ret <vscale x 2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 2 x float> @llvm.floor.nxv2f32(<vscale x 2 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x float> %r"
 },
 {
  "instr": "floor",
  "ty": "<vscale x 4 x float>",
  "variant": "unop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.s\nfrintm z0.s, p0/m, z0.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x float> (<vscale x 4 x float>) (in function: test)",
  "ll": "define <vscale x 4 x float> @test(<vscale x 4 x float> %a) {\n  %r = call <vscale x 4 x float> @llvm.floor(<vscale x 4 x float> %a)\n  ret <vscale x 4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 4 x float> @llvm.floor.nxv4f32(<vscale x 4 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x float> %r"
 },
 {
  "instr": "floor",
  "ty": "<vscale x 8 x float>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.s\nfrintm z0.s, p0/m, z0.s\nfrintm z1.s, p0/m, z1.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x float> (<vscale x 8 x float>) (in function: test)",
  "ll": "define <vscale x 8 x float> @test(<vscale x 8 x float> %a) {\n  %r = call <vscale x 8 x float> @llvm.floor(<vscale x 8 x float> %a)\n  ret <vscale x 8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <vscale x 8 x float> @llvm.floor.nxv8f32(<vscale x 8 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x float> %r"
 },
 {
  "instr": "floor",
  "ty": "<vscale x 2 x double>",
  "variant": "unop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.d\nfrintm z0.d, p0/m, z0.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x double> (<vscale x 2 x double>) (in function: test)",
  "ll": "define <vscale x 2 x double> @test(<vscale x 2 x double> %a) {\n  %r = call <vscale x 2 x double> @llvm.floor(<vscale x 2 x double> %a)\n  ret <vscale x 2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 2 x double> @llvm.floor.nxv2f64(<vscale x 2 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x double> %r"
 },
 {
  "instr": "floor",
  "ty": "<vscale x 4 x double>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.d\nfrintm z0.d, p0/m, z0.d\nfrintm z1.d, p0/m, z1.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x double> (<vscale x 4 x double>) (in function: test)",
  "ll": "define <vscale x 4 x double> @test(<vscale x 4 x double> %a) {\n  %r = call <vscale x 4 x double> @llvm.floor(<vscale x 4 x double> %a)\n  ret <vscale x 4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <vscale x 4 x double> @llvm.floor.nxv4f64(<vscale x 4 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x double> %r"
 },
 {
  "instr": "trunc",
  "ty": "half",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintz h0, h0\nret",
  "giasm": "frintz h0, h0\nret",
  "ll": "define half @test(half %a) {\n  %r = call half @llvm.trunc(half %a)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call half @llvm.trunc.f16(half %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "trunc",
  "ty": "float",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintz s0, s0\nret",
  "giasm": "frintz s0, s0\nret",
  "ll": "define float @test(float %a) {\n  %r = call float @llvm.trunc(float %a)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call float @llvm.trunc.f32(float %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "trunc",
  "ty": "double",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintz d0, d0\nret",
  "giasm": "frintz d0, d0\nret",
  "ll": "define double @test(double %a) {\n  %r = call double @llvm.trunc(double %a)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call double @llvm.trunc.f64(double %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "trunc",
  "ty": "<4 x half>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintz v0.4h, v0.4h\nret",
  "giasm": "frintz v0.4h, v0.4h\nret",
  "ll": "define <4 x half> @test(<4 x half> %a) {\n  %r = call <4 x half> @llvm.trunc(<4 x half> %a)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x half> @llvm.trunc.v4f16(<4 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "trunc",
  "ty": "<8 x half>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintz v0.8h, v0.8h\nret",
  "giasm": "frintz v0.8h, v0.8h\nret",
  "ll": "define <8 x half> @test(<8 x half> %a) {\n  %r = call <8 x half> @llvm.trunc(<8 x half> %a)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <8 x half> @llvm.trunc.v8f16(<8 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "trunc",
  "ty": "<16 x half>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "frintz v0.8h, v0.8h\nfrintz v1.8h, v1.8h\nret",
  "giasm": "frintz v0.8h, v0.8h\nfrintz v1.8h, v1.8h\nret",
  "ll": "define <16 x half> @test(<16 x half> %a) {\n  %r = call <16 x half> @llvm.trunc(<16 x half> %a)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <16 x half> @llvm.trunc.v16f16(<16 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "trunc",
  "ty": "<2 x float>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintz v0.2s, v0.2s\nret",
  "giasm": "frintz v0.2s, v0.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a) {\n  %r = call <2 x float> @llvm.trunc(<2 x float> %a)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x float> @llvm.trunc.v2f32(<2 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "trunc",
  "ty": "<4 x float>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintz v0.4s, v0.4s\nret",
  "giasm": "frintz v0.4s, v0.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a) {\n  %r = call <4 x float> @llvm.trunc(<4 x float> %a)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x float> @llvm.trunc.v4f32(<4 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "trunc",
  "ty": "<8 x float>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "frintz v0.4s, v0.4s\nfrintz v1.4s, v1.4s\nret",
  "giasm": "frintz v0.4s, v0.4s\nfrintz v1.4s, v1.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a) {\n  %r = call <8 x float> @llvm.trunc(<8 x float> %a)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x float> @llvm.trunc.v8f32(<8 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "trunc",
  "ty": "<2 x double>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintz v0.2d, v0.2d\nret",
  "giasm": "frintz v0.2d, v0.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a) {\n  %r = call <2 x double> @llvm.trunc(<2 x double> %a)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x double> @llvm.trunc.v2f64(<2 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "trunc",
  "ty": "<4 x double>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "frintz v0.2d, v0.2d\nfrintz v1.2d, v1.2d\nret",
  "giasm": "frintz v0.2d, v0.2d\nfrintz v1.2d, v1.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a) {\n  %r = call <4 x double> @llvm.trunc(<4 x double> %a)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x double> @llvm.trunc.v4f64(<4 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "trunc",
  "ty": "<vscale x 4 x half>",
  "variant": "unop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.s\nfrintz z0.h, p0/m, z0.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x half> (<vscale x 4 x half>) (in function: test)",
  "ll": "define <vscale x 4 x half> @test(<vscale x 4 x half> %a) {\n  %r = call <vscale x 4 x half> @llvm.trunc(<vscale x 4 x half> %a)\n  ret <vscale x 4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 4 x half> @llvm.trunc.nxv4f16(<vscale x 4 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x half> %r"
 },
 {
  "instr": "trunc",
  "ty": "<vscale x 8 x half>",
  "variant": "unop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.h\nfrintz z0.h, p0/m, z0.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x half> (<vscale x 8 x half>) (in function: test)",
  "ll": "define <vscale x 8 x half> @test(<vscale x 8 x half> %a) {\n  %r = call <vscale x 8 x half> @llvm.trunc(<vscale x 8 x half> %a)\n  ret <vscale x 8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 8 x half> @llvm.trunc.nxv8f16(<vscale x 8 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x half> %r"
 },
 {
  "instr": "trunc",
  "ty": "<vscale x 16 x half>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.h\nfrintz z0.h, p0/m, z0.h\nfrintz z1.h, p0/m, z1.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 16 x half> (<vscale x 16 x half>) (in function: test)",
  "ll": "define <vscale x 16 x half> @test(<vscale x 16 x half> %a) {\n  %r = call <vscale x 16 x half> @llvm.trunc(<vscale x 16 x half> %a)\n  ret <vscale x 16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <vscale x 16 x half> @llvm.trunc.nxv16f16(<vscale x 16 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 16 x half> %r"
 },
 {
  "instr": "trunc",
  "ty": "<vscale x 2 x float>",
  "variant": "unop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.d\nfrintz z0.s, p0/m, z0.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x float> (<vscale x 2 x float>) (in function: test)",
  "ll": "define <vscale x 2 x float> @test(<vscale x 2 x float> %a) {\n  %r = call <vscale x 2 x float> @llvm.trunc(<vscale x 2 x float> %a)\n  ret <vscale x 2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 2 x float> @llvm.trunc.nxv2f32(<vscale x 2 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x float> %r"
 },
 {
  "instr": "trunc",
  "ty": "<vscale x 4 x float>",
  "variant": "unop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.s\nfrintz z0.s, p0/m, z0.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x float> (<vscale x 4 x float>) (in function: test)",
  "ll": "define <vscale x 4 x float> @test(<vscale x 4 x float> %a) {\n  %r = call <vscale x 4 x float> @llvm.trunc(<vscale x 4 x float> %a)\n  ret <vscale x 4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 4 x float> @llvm.trunc.nxv4f32(<vscale x 4 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x float> %r"
 },
 {
  "instr": "trunc",
  "ty": "<vscale x 8 x float>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.s\nfrintz z0.s, p0/m, z0.s\nfrintz z1.s, p0/m, z1.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x float> (<vscale x 8 x float>) (in function: test)",
  "ll": "define <vscale x 8 x float> @test(<vscale x 8 x float> %a) {\n  %r = call <vscale x 8 x float> @llvm.trunc(<vscale x 8 x float> %a)\n  ret <vscale x 8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <vscale x 8 x float> @llvm.trunc.nxv8f32(<vscale x 8 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x float> %r"
 },
 {
  "instr": "trunc",
  "ty": "<vscale x 2 x double>",
  "variant": "unop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.d\nfrintz z0.d, p0/m, z0.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x double> (<vscale x 2 x double>) (in function: test)",
  "ll": "define <vscale x 2 x double> @test(<vscale x 2 x double> %a) {\n  %r = call <vscale x 2 x double> @llvm.trunc(<vscale x 2 x double> %a)\n  ret <vscale x 2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 2 x double> @llvm.trunc.nxv2f64(<vscale x 2 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x double> %r"
 },
 {
  "instr": "trunc",
  "ty": "<vscale x 4 x double>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.d\nfrintz z0.d, p0/m, z0.d\nfrintz z1.d, p0/m, z1.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x double> (<vscale x 4 x double>) (in function: test)",
  "ll": "define <vscale x 4 x double> @test(<vscale x 4 x double> %a) {\n  %r = call <vscale x 4 x double> @llvm.trunc(<vscale x 4 x double> %a)\n  ret <vscale x 4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <vscale x 4 x double> @llvm.trunc.nxv4f64(<vscale x 4 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x double> %r"
 },
 {
  "instr": "rint",
  "ty": "half",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintx h0, h0\nret",
  "giasm": "frintx h0, h0\nret",
  "ll": "define half @test(half %a) {\n  %r = call half @llvm.rint(half %a)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call half @llvm.rint.f16(half %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "rint",
  "ty": "float",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintx s0, s0\nret",
  "giasm": "frintx s0, s0\nret",
  "ll": "define float @test(float %a) {\n  %r = call float @llvm.rint(float %a)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call float @llvm.rint.f32(float %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "rint",
  "ty": "double",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintx d0, d0\nret",
  "giasm": "frintx d0, d0\nret",
  "ll": "define double @test(double %a) {\n  %r = call double @llvm.rint(double %a)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call double @llvm.rint.f64(double %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "rint",
  "ty": "<4 x half>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintx v0.4h, v0.4h\nret",
  "giasm": "frintx v0.4h, v0.4h\nret",
  "ll": "define <4 x half> @test(<4 x half> %a) {\n  %r = call <4 x half> @llvm.rint(<4 x half> %a)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x half> @llvm.rint.v4f16(<4 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "rint",
  "ty": "<8 x half>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintx v0.8h, v0.8h\nret",
  "giasm": "frintx v0.8h, v0.8h\nret",
  "ll": "define <8 x half> @test(<8 x half> %a) {\n  %r = call <8 x half> @llvm.rint(<8 x half> %a)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <8 x half> @llvm.rint.v8f16(<8 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "rint",
  "ty": "<16 x half>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "frintx v0.8h, v0.8h\nfrintx v1.8h, v1.8h\nret",
  "giasm": "frintx v0.8h, v0.8h\nfrintx v1.8h, v1.8h\nret",
  "ll": "define <16 x half> @test(<16 x half> %a) {\n  %r = call <16 x half> @llvm.rint(<16 x half> %a)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <16 x half> @llvm.rint.v16f16(<16 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "rint",
  "ty": "<2 x float>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintx v0.2s, v0.2s\nret",
  "giasm": "frintx v0.2s, v0.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a) {\n  %r = call <2 x float> @llvm.rint(<2 x float> %a)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x float> @llvm.rint.v2f32(<2 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "rint",
  "ty": "<4 x float>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintx v0.4s, v0.4s\nret",
  "giasm": "frintx v0.4s, v0.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a) {\n  %r = call <4 x float> @llvm.rint(<4 x float> %a)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x float> @llvm.rint.v4f32(<4 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "rint",
  "ty": "<8 x float>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "frintx v0.4s, v0.4s\nfrintx v1.4s, v1.4s\nret",
  "giasm": "frintx v0.4s, v0.4s\nfrintx v1.4s, v1.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a) {\n  %r = call <8 x float> @llvm.rint(<8 x float> %a)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x float> @llvm.rint.v8f32(<8 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "rint",
  "ty": "<2 x double>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintx v0.2d, v0.2d\nret",
  "giasm": "frintx v0.2d, v0.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a) {\n  %r = call <2 x double> @llvm.rint(<2 x double> %a)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x double> @llvm.rint.v2f64(<2 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "rint",
  "ty": "<4 x double>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "frintx v0.2d, v0.2d\nfrintx v1.2d, v1.2d\nret",
  "giasm": "frintx v0.2d, v0.2d\nfrintx v1.2d, v1.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a) {\n  %r = call <4 x double> @llvm.rint(<4 x double> %a)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x double> @llvm.rint.v4f64(<4 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "rint",
  "ty": "<vscale x 4 x half>",
  "variant": "unop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.s\nfrintx z0.h, p0/m, z0.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x half> (<vscale x 4 x half>) (in function: test)",
  "ll": "define <vscale x 4 x half> @test(<vscale x 4 x half> %a) {\n  %r = call <vscale x 4 x half> @llvm.rint(<vscale x 4 x half> %a)\n  ret <vscale x 4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 4 x half> @llvm.rint.nxv4f16(<vscale x 4 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x half> %r"
 },
 {
  "instr": "rint",
  "ty": "<vscale x 8 x half>",
  "variant": "unop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.h\nfrintx z0.h, p0/m, z0.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x half> (<vscale x 8 x half>) (in function: test)",
  "ll": "define <vscale x 8 x half> @test(<vscale x 8 x half> %a) {\n  %r = call <vscale x 8 x half> @llvm.rint(<vscale x 8 x half> %a)\n  ret <vscale x 8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 8 x half> @llvm.rint.nxv8f16(<vscale x 8 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x half> %r"
 },
 {
  "instr": "rint",
  "ty": "<vscale x 16 x half>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.h\nfrintx z0.h, p0/m, z0.h\nfrintx z1.h, p0/m, z1.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 16 x half> (<vscale x 16 x half>) (in function: test)",
  "ll": "define <vscale x 16 x half> @test(<vscale x 16 x half> %a) {\n  %r = call <vscale x 16 x half> @llvm.rint(<vscale x 16 x half> %a)\n  ret <vscale x 16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <vscale x 16 x half> @llvm.rint.nxv16f16(<vscale x 16 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 16 x half> %r"
 },
 {
  "instr": "rint",
  "ty": "<vscale x 2 x float>",
  "variant": "unop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.d\nfrintx z0.s, p0/m, z0.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x float> (<vscale x 2 x float>) (in function: test)",
  "ll": "define <vscale x 2 x float> @test(<vscale x 2 x float> %a) {\n  %r = call <vscale x 2 x float> @llvm.rint(<vscale x 2 x float> %a)\n  ret <vscale x 2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 2 x float> @llvm.rint.nxv2f32(<vscale x 2 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x float> %r"
 },
 {
  "instr": "rint",
  "ty": "<vscale x 4 x float>",
  "variant": "unop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.s\nfrintx z0.s, p0/m, z0.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x float> (<vscale x 4 x float>) (in function: test)",
  "ll": "define <vscale x 4 x float> @test(<vscale x 4 x float> %a) {\n  %r = call <vscale x 4 x float> @llvm.rint(<vscale x 4 x float> %a)\n  ret <vscale x 4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 4 x float> @llvm.rint.nxv4f32(<vscale x 4 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x float> %r"
 },
 {
  "instr": "rint",
  "ty": "<vscale x 8 x float>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.s\nfrintx z0.s, p0/m, z0.s\nfrintx z1.s, p0/m, z1.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x float> (<vscale x 8 x float>) (in function: test)",
  "ll": "define <vscale x 8 x float> @test(<vscale x 8 x float> %a) {\n  %r = call <vscale x 8 x float> @llvm.rint(<vscale x 8 x float> %a)\n  ret <vscale x 8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <vscale x 8 x float> @llvm.rint.nxv8f32(<vscale x 8 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x float> %r"
 },
 {
  "instr": "rint",
  "ty": "<vscale x 2 x double>",
  "variant": "unop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.d\nfrintx z0.d, p0/m, z0.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x double> (<vscale x 2 x double>) (in function: test)",
  "ll": "define <vscale x 2 x double> @test(<vscale x 2 x double> %a) {\n  %r = call <vscale x 2 x double> @llvm.rint(<vscale x 2 x double> %a)\n  ret <vscale x 2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 2 x double> @llvm.rint.nxv2f64(<vscale x 2 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x double> %r"
 },
 {
  "instr": "rint",
  "ty": "<vscale x 4 x double>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.d\nfrintx z0.d, p0/m, z0.d\nfrintx z1.d, p0/m, z1.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x double> (<vscale x 4 x double>) (in function: test)",
  "ll": "define <vscale x 4 x double> @test(<vscale x 4 x double> %a) {\n  %r = call <vscale x 4 x double> @llvm.rint(<vscale x 4 x double> %a)\n  ret <vscale x 4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <vscale x 4 x double> @llvm.rint.nxv4f64(<vscale x 4 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x double> %r"
 },
 {
  "instr": "nearbyint",
  "ty": "half",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frinti h0, h0\nret",
  "giasm": "frinti h0, h0\nret",
  "ll": "define half @test(half %a) {\n  %r = call half @llvm.nearbyint(half %a)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call half @llvm.nearbyint.f16(half %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "nearbyint",
  "ty": "float",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frinti s0, s0\nret",
  "giasm": "frinti s0, s0\nret",
  "ll": "define float @test(float %a) {\n  %r = call float @llvm.nearbyint(float %a)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call float @llvm.nearbyint.f32(float %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "nearbyint",
  "ty": "double",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frinti d0, d0\nret",
  "giasm": "frinti d0, d0\nret",
  "ll": "define double @test(double %a) {\n  %r = call double @llvm.nearbyint(double %a)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call double @llvm.nearbyint.f64(double %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "nearbyint",
  "ty": "<4 x half>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frinti v0.4h, v0.4h\nret",
  "giasm": "frinti v0.4h, v0.4h\nret",
  "ll": "define <4 x half> @test(<4 x half> %a) {\n  %r = call <4 x half> @llvm.nearbyint(<4 x half> %a)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x half> @llvm.nearbyint.v4f16(<4 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "nearbyint",
  "ty": "<8 x half>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frinti v0.8h, v0.8h\nret",
  "giasm": "frinti v0.8h, v0.8h\nret",
  "ll": "define <8 x half> @test(<8 x half> %a) {\n  %r = call <8 x half> @llvm.nearbyint(<8 x half> %a)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <8 x half> @llvm.nearbyint.v8f16(<8 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "nearbyint",
  "ty": "<16 x half>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "frinti v0.8h, v0.8h\nfrinti v1.8h, v1.8h\nret",
  "giasm": "frinti v0.8h, v0.8h\nfrinti v1.8h, v1.8h\nret",
  "ll": "define <16 x half> @test(<16 x half> %a) {\n  %r = call <16 x half> @llvm.nearbyint(<16 x half> %a)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <16 x half> @llvm.nearbyint.v16f16(<16 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "nearbyint",
  "ty": "<2 x float>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frinti v0.2s, v0.2s\nret",
  "giasm": "frinti v0.2s, v0.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a) {\n  %r = call <2 x float> @llvm.nearbyint(<2 x float> %a)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x float> @llvm.nearbyint.v2f32(<2 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "nearbyint",
  "ty": "<4 x float>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frinti v0.4s, v0.4s\nret",
  "giasm": "frinti v0.4s, v0.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a) {\n  %r = call <4 x float> @llvm.nearbyint(<4 x float> %a)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x float> @llvm.nearbyint.v4f32(<4 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "nearbyint",
  "ty": "<8 x float>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "frinti v0.4s, v0.4s\nfrinti v1.4s, v1.4s\nret",
  "giasm": "frinti v0.4s, v0.4s\nfrinti v1.4s, v1.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a) {\n  %r = call <8 x float> @llvm.nearbyint(<8 x float> %a)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x float> @llvm.nearbyint.v8f32(<8 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "nearbyint",
  "ty": "<2 x double>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frinti v0.2d, v0.2d\nret",
  "giasm": "frinti v0.2d, v0.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a) {\n  %r = call <2 x double> @llvm.nearbyint(<2 x double> %a)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x double> @llvm.nearbyint.v2f64(<2 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "nearbyint",
  "ty": "<4 x double>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "frinti v0.2d, v0.2d\nfrinti v1.2d, v1.2d\nret",
  "giasm": "frinti v0.2d, v0.2d\nfrinti v1.2d, v1.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a) {\n  %r = call <4 x double> @llvm.nearbyint(<4 x double> %a)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x double> @llvm.nearbyint.v4f64(<4 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "nearbyint",
  "ty": "<vscale x 4 x half>",
  "variant": "unop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.s\nfrinti z0.h, p0/m, z0.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x half> (<vscale x 4 x half>) (in function: test)",
  "ll": "define <vscale x 4 x half> @test(<vscale x 4 x half> %a) {\n  %r = call <vscale x 4 x half> @llvm.nearbyint(<vscale x 4 x half> %a)\n  ret <vscale x 4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 4 x half> @llvm.nearbyint.nxv4f16(<vscale x 4 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x half> %r"
 },
 {
  "instr": "nearbyint",
  "ty": "<vscale x 8 x half>",
  "variant": "unop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.h\nfrinti z0.h, p0/m, z0.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x half> (<vscale x 8 x half>) (in function: test)",
  "ll": "define <vscale x 8 x half> @test(<vscale x 8 x half> %a) {\n  %r = call <vscale x 8 x half> @llvm.nearbyint(<vscale x 8 x half> %a)\n  ret <vscale x 8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 8 x half> @llvm.nearbyint.nxv8f16(<vscale x 8 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x half> %r"
 },
 {
  "instr": "nearbyint",
  "ty": "<vscale x 16 x half>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.h\nfrinti z0.h, p0/m, z0.h\nfrinti z1.h, p0/m, z1.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 16 x half> (<vscale x 16 x half>) (in function: test)",
  "ll": "define <vscale x 16 x half> @test(<vscale x 16 x half> %a) {\n  %r = call <vscale x 16 x half> @llvm.nearbyint(<vscale x 16 x half> %a)\n  ret <vscale x 16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <vscale x 16 x half> @llvm.nearbyint.nxv16f16(<vscale x 16 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 16 x half> %r"
 },
 {
  "instr": "nearbyint",
  "ty": "<vscale x 2 x float>",
  "variant": "unop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.d\nfrinti z0.s, p0/m, z0.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x float> (<vscale x 2 x float>) (in function: test)",
  "ll": "define <vscale x 2 x float> @test(<vscale x 2 x float> %a) {\n  %r = call <vscale x 2 x float> @llvm.nearbyint(<vscale x 2 x float> %a)\n  ret <vscale x 2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 2 x float> @llvm.nearbyint.nxv2f32(<vscale x 2 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x float> %r"
 },
 {
  "instr": "nearbyint",
  "ty": "<vscale x 4 x float>",
  "variant": "unop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.s\nfrinti z0.s, p0/m, z0.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x float> (<vscale x 4 x float>) (in function: test)",
  "ll": "define <vscale x 4 x float> @test(<vscale x 4 x float> %a) {\n  %r = call <vscale x 4 x float> @llvm.nearbyint(<vscale x 4 x float> %a)\n  ret <vscale x 4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 4 x float> @llvm.nearbyint.nxv4f32(<vscale x 4 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x float> %r"
 },
 {
  "instr": "nearbyint",
  "ty": "<vscale x 8 x float>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.s\nfrinti z0.s, p0/m, z0.s\nfrinti z1.s, p0/m, z1.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x float> (<vscale x 8 x float>) (in function: test)",
  "ll": "define <vscale x 8 x float> @test(<vscale x 8 x float> %a) {\n  %r = call <vscale x 8 x float> @llvm.nearbyint(<vscale x 8 x float> %a)\n  ret <vscale x 8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <vscale x 8 x float> @llvm.nearbyint.nxv8f32(<vscale x 8 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x float> %r"
 },
 {
  "instr": "nearbyint",
  "ty": "<vscale x 2 x double>",
  "variant": "unop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.d\nfrinti z0.d, p0/m, z0.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x double> (<vscale x 2 x double>) (in function: test)",
  "ll": "define <vscale x 2 x double> @test(<vscale x 2 x double> %a) {\n  %r = call <vscale x 2 x double> @llvm.nearbyint(<vscale x 2 x double> %a)\n  ret <vscale x 2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 2 x double> @llvm.nearbyint.nxv2f64(<vscale x 2 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x double> %r"
 },
 {
  "instr": "nearbyint",
  "ty": "<vscale x 4 x double>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.d\nfrinti z0.d, p0/m, z0.d\nfrinti z1.d, p0/m, z1.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x double> (<vscale x 4 x double>) (in function: test)",
  "ll": "define <vscale x 4 x double> @test(<vscale x 4 x double> %a) {\n  %r = call <vscale x 4 x double> @llvm.nearbyint(<vscale x 4 x double> %a)\n  ret <vscale x 4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <vscale x 4 x double> @llvm.nearbyint.nxv4f64(<vscale x 4 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x double> %r"
 },
 {
  "instr": "fma",
  "ty": "half",
  "variant": "triop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmadd h0, h0, h1, h2\nret",
  "giasm": "fmadd h0, h0, h1, h2\nret",
  "ll": "define half @test(half %a, half %b, half %c) {\n  %r = call half @llvm.fma(half %a, half %b, half %c)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call half @llvm.fma.f16(half %a, half %b, half %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "fma",
  "ty": "float",
  "variant": "triop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmadd s0, s0, s1, s2\nret",
  "giasm": "fmadd s0, s0, s1, s2\nret",
  "ll": "define float @test(float %a, float %b, float %c) {\n  %r = call float @llvm.fma(float %a, float %b, float %c)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call float @llvm.fma.f32(float %a, float %b, float %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "fma",
  "ty": "double",
  "variant": "triop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmadd d0, d0, d1, d2\nret",
  "giasm": "fmadd d0, d0, d1, d2\nret",
  "ll": "define double @test(double %a, double %b, double %c) {\n  %r = call double @llvm.fma(double %a, double %b, double %c)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call double @llvm.fma.f64(double %a, double %b, double %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "fma",
  "ty": "<4 x half>",
  "variant": "triop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmla v2.4h, v1.4h, v0.4h\nfmov d0, d2\nret",
  "giasm": "fmla v2.4h, v1.4h, v0.4h\nfmov d0, d2\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, <4 x half> %b, <4 x half> %c) {\n  %r = call <4 x half> @llvm.fma(<4 x half> %a, <4 x half> %b, <4 x half> %c)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x half> @llvm.fma.v4f16(<4 x half> %a, <4 x half> %b, <4 x half> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "fma",
  "ty": "<8 x half>",
  "variant": "triop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmla v2.8h, v1.8h, v0.8h\nmov v0.16b, v2.16b\nret",
  "giasm": "fmla v2.8h, v1.8h, v0.8h\nmov v0.16b, v2.16b\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, <8 x half> %b, <8 x half> %c) {\n  %r = call <8 x half> @llvm.fma(<8 x half> %a, <8 x half> %b, <8 x half> %c)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <8 x half> @llvm.fma.v8f16(<8 x half> %a, <8 x half> %b, <8 x half> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "fma",
  "ty": "<16 x half>",
  "variant": "triop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fmla v4.8h, v2.8h, v0.8h\nfmla v5.8h, v3.8h, v1.8h\nmov v0.16b, v4.16b\nmov v1.16b, v5.16b\nret",
  "giasm": "fmla v4.8h, v2.8h, v0.8h\nfmla v5.8h, v3.8h, v1.8h\nmov v0.16b, v4.16b\nmov v1.16b, v5.16b\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, <16 x half> %b, <16 x half> %c) {\n  %r = call <16 x half> @llvm.fma(<16 x half> %a, <16 x half> %b, <16 x half> %c)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <16 x half> @llvm.fma.v16f16(<16 x half> %a, <16 x half> %b, <16 x half> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "fma",
  "ty": "<2 x float>",
  "variant": "triop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmla v2.2s, v1.2s, v0.2s\nfmov d0, d2\nret",
  "giasm": "fmla v2.2s, v1.2s, v0.2s\nfmov d0, d2\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, <2 x float> %b, <2 x float> %c) {\n  %r = call <2 x float> @llvm.fma(<2 x float> %a, <2 x float> %b, <2 x float> %c)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x float> @llvm.fma.v2f32(<2 x float> %a, <2 x float> %b, <2 x float> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "fma",
  "ty": "<4 x float>",
  "variant": "triop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmla v2.4s, v1.4s, v0.4s\nmov v0.16b, v2.16b\nret",
  "giasm": "fmla v2.4s, v1.4s, v0.4s\nmov v0.16b, v2.16b\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, <4 x float> %b, <4 x float> %c) {\n  %r = call <4 x float> @llvm.fma(<4 x float> %a, <4 x float> %b, <4 x float> %c)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x float> @llvm.fma.v4f32(<4 x float> %a, <4 x float> %b, <4 x float> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "fma",
  "ty": "<8 x float>",
  "variant": "triop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fmla v4.4s, v2.4s, v0.4s\nfmla v5.4s, v3.4s, v1.4s\nmov v0.16b, v4.16b\nmov v1.16b, v5.16b\nret",
  "giasm": "fmla v4.4s, v2.4s, v0.4s\nfmla v5.4s, v3.4s, v1.4s\nmov v0.16b, v4.16b\nmov v1.16b, v5.16b\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, <8 x float> %b, <8 x float> %c) {\n  %r = call <8 x float> @llvm.fma(<8 x float> %a, <8 x float> %b, <8 x float> %c)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x float> @llvm.fma.v8f32(<8 x float> %a, <8 x float> %b, <8 x float> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "fma",
  "ty": "<2 x double>",
  "variant": "triop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmla v2.2d, v1.2d, v0.2d\nmov v0.16b, v2.16b\nret",
  "giasm": "fmla v2.2d, v1.2d, v0.2d\nmov v0.16b, v2.16b\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, <2 x double> %b, <2 x double> %c) {\n  %r = call <2 x double> @llvm.fma(<2 x double> %a, <2 x double> %b, <2 x double> %c)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x double> @llvm.fma.v2f64(<2 x double> %a, <2 x double> %b, <2 x double> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "fma",
  "ty": "<4 x double>",
  "variant": "triop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fmla v4.2d, v2.2d, v0.2d\nfmla v5.2d, v3.2d, v1.2d\nmov v0.16b, v4.16b\nmov v1.16b, v5.16b\nret",
  "giasm": "fmla v4.2d, v2.2d, v0.2d\nfmla v5.2d, v3.2d, v1.2d\nmov v0.16b, v4.16b\nmov v1.16b, v5.16b\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, <4 x double> %b, <4 x double> %c) {\n  %r = call <4 x double> @llvm.fma(<4 x double> %a, <4 x double> %b, <4 x double> %c)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x double> @llvm.fma.v4f64(<4 x double> %a, <4 x double> %b, <4 x double> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "fma",
  "ty": "<vscale x 4 x half>",
  "variant": "triop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.s\nfmad z0.h, p0/m, z1.h, z2.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x half> (<vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>) (in function: test)",
  "ll": "define <vscale x 4 x half> @test(<vscale x 4 x half> %a, <vscale x 4 x half> %b, <vscale x 4 x half> %c) {\n  %r = call <vscale x 4 x half> @llvm.fma(<vscale x 4 x half> %a, <vscale x 4 x half> %b, <vscale x 4 x half> %c)\n  ret <vscale x 4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 4 x half> @llvm.fma.nxv4f16(<vscale x 4 x half> %a, <vscale x 4 x half> %b, <vscale x 4 x half> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x half> %r"
 },
 {
  "instr": "fma",
  "ty": "<vscale x 8 x half>",
  "variant": "triop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.h\nfmad z0.h, p0/m, z1.h, z2.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x half> (<vscale x 8 x half>, <vscale x 8 x half>, <vscale x 8 x half>) (in function: test)",
  "ll": "define <vscale x 8 x half> @test(<vscale x 8 x half> %a, <vscale x 8 x half> %b, <vscale x 8 x half> %c) {\n  %r = call <vscale x 8 x half> @llvm.fma(<vscale x 8 x half> %a, <vscale x 8 x half> %b, <vscale x 8 x half> %c)\n  ret <vscale x 8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 8 x half> @llvm.fma.nxv8f16(<vscale x 8 x half> %a, <vscale x 8 x half> %b, <vscale x 8 x half> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x half> %r"
 },
 {
  "instr": "fma",
  "ty": "<vscale x 16 x half>",
  "variant": "triop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.h\nfmad z0.h, p0/m, z2.h, z4.h\nfmad z1.h, p0/m, z3.h, z5.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 16 x half> (<vscale x 16 x half>, <vscale x 16 x half>, <vscale x 16 x half>) (in function: test)",
  "ll": "define <vscale x 16 x half> @test(<vscale x 16 x half> %a, <vscale x 16 x half> %b, <vscale x 16 x half> %c) {\n  %r = call <vscale x 16 x half> @llvm.fma(<vscale x 16 x half> %a, <vscale x 16 x half> %b, <vscale x 16 x half> %c)\n  ret <vscale x 16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <vscale x 16 x half> @llvm.fma.nxv16f16(<vscale x 16 x half> %a, <vscale x 16 x half> %b, <vscale x 16 x half> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 16 x half> %r"
 },
 {
  "instr": "fma",
  "ty": "<vscale x 2 x float>",
  "variant": "triop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.d\nfmad z0.s, p0/m, z1.s, z2.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x float> (<vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>) (in function: test)",
  "ll": "define <vscale x 2 x float> @test(<vscale x 2 x float> %a, <vscale x 2 x float> %b, <vscale x 2 x float> %c) {\n  %r = call <vscale x 2 x float> @llvm.fma(<vscale x 2 x float> %a, <vscale x 2 x float> %b, <vscale x 2 x float> %c)\n  ret <vscale x 2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 2 x float> @llvm.fma.nxv2f32(<vscale x 2 x float> %a, <vscale x 2 x float> %b, <vscale x 2 x float> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x float> %r"
 },
 {
  "instr": "fma",
  "ty": "<vscale x 4 x float>",
  "variant": "triop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.s\nfmad z0.s, p0/m, z1.s, z2.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x float> (<vscale x 4 x float>, <vscale x 4 x float>, <vscale x 4 x float>) (in function: test)",
  "ll": "define <vscale x 4 x float> @test(<vscale x 4 x float> %a, <vscale x 4 x float> %b, <vscale x 4 x float> %c) {\n  %r = call <vscale x 4 x float> @llvm.fma(<vscale x 4 x float> %a, <vscale x 4 x float> %b, <vscale x 4 x float> %c)\n  ret <vscale x 4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 4 x float> @llvm.fma.nxv4f32(<vscale x 4 x float> %a, <vscale x 4 x float> %b, <vscale x 4 x float> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x float> %r"
 },
 {
  "instr": "fma",
  "ty": "<vscale x 8 x float>",
  "variant": "triop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.s\nfmad z0.s, p0/m, z2.s, z4.s\nfmad z1.s, p0/m, z3.s, z5.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x float> (<vscale x 8 x float>, <vscale x 8 x float>, <vscale x 8 x float>) (in function: test)",
  "ll": "define <vscale x 8 x float> @test(<vscale x 8 x float> %a, <vscale x 8 x float> %b, <vscale x 8 x float> %c) {\n  %r = call <vscale x 8 x float> @llvm.fma(<vscale x 8 x float> %a, <vscale x 8 x float> %b, <vscale x 8 x float> %c)\n  ret <vscale x 8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <vscale x 8 x float> @llvm.fma.nxv8f32(<vscale x 8 x float> %a, <vscale x 8 x float> %b, <vscale x 8 x float> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x float> %r"
 },
 {
  "instr": "fma",
  "ty": "<vscale x 2 x double>",
  "variant": "triop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.d\nfmad z0.d, p0/m, z1.d, z2.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x double> (<vscale x 2 x double>, <vscale x 2 x double>, <vscale x 2 x double>) (in function: test)",
  "ll": "define <vscale x 2 x double> @test(<vscale x 2 x double> %a, <vscale x 2 x double> %b, <vscale x 2 x double> %c) {\n  %r = call <vscale x 2 x double> @llvm.fma(<vscale x 2 x double> %a, <vscale x 2 x double> %b, <vscale x 2 x double> %c)\n  ret <vscale x 2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 2 x double> @llvm.fma.nxv2f64(<vscale x 2 x double> %a, <vscale x 2 x double> %b, <vscale x 2 x double> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x double> %r"
 },
 {
  "instr": "fma",
  "ty": "<vscale x 4 x double>",
  "variant": "triop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.d\nfmad z0.d, p0/m, z2.d, z4.d\nfmad z1.d, p0/m, z3.d, z5.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x double> (<vscale x 4 x double>, <vscale x 4 x double>, <vscale x 4 x double>) (in function: test)",
  "ll": "define <vscale x 4 x double> @test(<vscale x 4 x double> %a, <vscale x 4 x double> %b, <vscale x 4 x double> %c) {\n  %r = call <vscale x 4 x double> @llvm.fma(<vscale x 4 x double> %a, <vscale x 4 x double> %b, <vscale x 4 x double> %c)\n  ret <vscale x 4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <vscale x 4 x double> @llvm.fma.nxv4f64(<vscale x 4 x double> %a, <vscale x 4 x double> %b, <vscale x 4 x double> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x double> %r"
 },
 {
  "instr": "fmuladd",
  "ty": "half",
  "variant": "triop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmadd h0, h0, h1, h2\nret",
  "giasm": "fmadd h0, h0, h1, h2\nret",
  "ll": "define half @test(half %a, half %b, half %c) {\n  %r = call half @llvm.fmuladd(half %a, half %b, half %c)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call half @llvm.fmuladd.f16(half %a, half %b, half %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "fmuladd",
  "ty": "float",
  "variant": "triop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmadd s0, s0, s1, s2\nret",
  "giasm": "fmadd s0, s0, s1, s2\nret",
  "ll": "define float @test(float %a, float %b, float %c) {\n  %r = call float @llvm.fmuladd(float %a, float %b, float %c)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call float @llvm.fmuladd.f32(float %a, float %b, float %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "fmuladd",
  "ty": "double",
  "variant": "triop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmadd d0, d0, d1, d2\nret",
  "giasm": "fmadd d0, d0, d1, d2\nret",
  "ll": "define double @test(double %a, double %b, double %c) {\n  %r = call double @llvm.fmuladd(double %a, double %b, double %c)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call double @llvm.fmuladd.f64(double %a, double %b, double %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "fmuladd",
  "ty": "<4 x half>",
  "variant": "triop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmla v2.4h, v1.4h, v0.4h\nfmov d0, d2\nret",
  "giasm": "fmla v2.4h, v1.4h, v0.4h\nfmov d0, d2\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, <4 x half> %b, <4 x half> %c) {\n  %r = call <4 x half> @llvm.fmuladd(<4 x half> %a, <4 x half> %b, <4 x half> %c)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x half> @llvm.fmuladd.v4f16(<4 x half> %a, <4 x half> %b, <4 x half> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "fmuladd",
  "ty": "<8 x half>",
  "variant": "triop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmla v2.8h, v1.8h, v0.8h\nmov v0.16b, v2.16b\nret",
  "giasm": "fmla v2.8h, v1.8h, v0.8h\nmov v0.16b, v2.16b\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, <8 x half> %b, <8 x half> %c) {\n  %r = call <8 x half> @llvm.fmuladd(<8 x half> %a, <8 x half> %b, <8 x half> %c)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <8 x half> @llvm.fmuladd.v8f16(<8 x half> %a, <8 x half> %b, <8 x half> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "fmuladd",
  "ty": "<16 x half>",
  "variant": "triop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fmla v4.8h, v2.8h, v0.8h\nfmla v5.8h, v3.8h, v1.8h\nmov v0.16b, v4.16b\nmov v1.16b, v5.16b\nret",
  "giasm": "fmla v4.8h, v2.8h, v0.8h\nfmla v5.8h, v3.8h, v1.8h\nmov v0.16b, v4.16b\nmov v1.16b, v5.16b\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, <16 x half> %b, <16 x half> %c) {\n  %r = call <16 x half> @llvm.fmuladd(<16 x half> %a, <16 x half> %b, <16 x half> %c)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <16 x half> @llvm.fmuladd.v16f16(<16 x half> %a, <16 x half> %b, <16 x half> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "fmuladd",
  "ty": "<2 x float>",
  "variant": "triop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmla v2.2s, v1.2s, v0.2s\nfmov d0, d2\nret",
  "giasm": "fmla v2.2s, v1.2s, v0.2s\nfmov d0, d2\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, <2 x float> %b, <2 x float> %c) {\n  %r = call <2 x float> @llvm.fmuladd(<2 x float> %a, <2 x float> %b, <2 x float> %c)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %a, <2 x float> %b, <2 x float> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "fmuladd",
  "ty": "<4 x float>",
  "variant": "triop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmla v2.4s, v1.4s, v0.4s\nmov v0.16b, v2.16b\nret",
  "giasm": "fmla v2.4s, v1.4s, v0.4s\nmov v0.16b, v2.16b\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, <4 x float> %b, <4 x float> %c) {\n  %r = call <4 x float> @llvm.fmuladd(<4 x float> %a, <4 x float> %b, <4 x float> %c)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %a, <4 x float> %b, <4 x float> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "fmuladd",
  "ty": "<8 x float>",
  "variant": "triop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fmla v4.4s, v2.4s, v0.4s\nfmla v5.4s, v3.4s, v1.4s\nmov v0.16b, v4.16b\nmov v1.16b, v5.16b\nret",
  "giasm": "fmla v4.4s, v2.4s, v0.4s\nfmla v5.4s, v3.4s, v1.4s\nmov v0.16b, v4.16b\nmov v1.16b, v5.16b\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, <8 x float> %b, <8 x float> %c) {\n  %r = call <8 x float> @llvm.fmuladd(<8 x float> %a, <8 x float> %b, <8 x float> %c)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %a, <8 x float> %b, <8 x float> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "fmuladd",
  "ty": "<2 x double>",
  "variant": "triop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmla v2.2d, v1.2d, v0.2d\nmov v0.16b, v2.16b\nret",
  "giasm": "fmla v2.2d, v1.2d, v0.2d\nmov v0.16b, v2.16b\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, <2 x double> %b, <2 x double> %c) {\n  %r = call <2 x double> @llvm.fmuladd(<2 x double> %a, <2 x double> %b, <2 x double> %c)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %a, <2 x double> %b, <2 x double> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "fmuladd",
  "ty": "<4 x double>",
  "variant": "triop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fmla v4.2d, v2.2d, v0.2d\nfmla v5.2d, v3.2d, v1.2d\nmov v0.16b, v4.16b\nmov v1.16b, v5.16b\nret",
  "giasm": "fmla v4.2d, v2.2d, v0.2d\nfmla v5.2d, v3.2d, v1.2d\nmov v0.16b, v4.16b\nmov v1.16b, v5.16b\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, <4 x double> %b, <4 x double> %c) {\n  %r = call <4 x double> @llvm.fmuladd(<4 x double> %a, <4 x double> %b, <4 x double> %c)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x double> @llvm.fmuladd.v4f64(<4 x double> %a, <4 x double> %b, <4 x double> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "fmuladd",
  "ty": "<vscale x 4 x half>",
  "variant": "triop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.s\nfmad z0.h, p0/m, z1.h, z2.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x half> (<vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>) (in function: test)",
  "ll": "define <vscale x 4 x half> @test(<vscale x 4 x half> %a, <vscale x 4 x half> %b, <vscale x 4 x half> %c) {\n  %r = call <vscale x 4 x half> @llvm.fmuladd(<vscale x 4 x half> %a, <vscale x 4 x half> %b, <vscale x 4 x half> %c)\n  ret <vscale x 4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 4 x half> @llvm.fmuladd.nxv4f16(<vscale x 4 x half> %a, <vscale x 4 x half> %b, <vscale x 4 x half> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x half> %r"
 },
 {
  "instr": "fmuladd",
  "ty": "<vscale x 8 x half>",
  "variant": "triop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.h\nfmad z0.h, p0/m, z1.h, z2.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x half> (<vscale x 8 x half>, <vscale x 8 x half>, <vscale x 8 x half>) (in function: test)",
  "ll": "define <vscale x 8 x half> @test(<vscale x 8 x half> %a, <vscale x 8 x half> %b, <vscale x 8 x half> %c) {\n  %r = call <vscale x 8 x half> @llvm.fmuladd(<vscale x 8 x half> %a, <vscale x 8 x half> %b, <vscale x 8 x half> %c)\n  ret <vscale x 8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 8 x half> @llvm.fmuladd.nxv8f16(<vscale x 8 x half> %a, <vscale x 8 x half> %b, <vscale x 8 x half> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x half> %r"
 },
 {
  "instr": "fmuladd",
  "ty": "<vscale x 16 x half>",
  "variant": "triop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.h\nfmad z0.h, p0/m, z2.h, z4.h\nfmad z1.h, p0/m, z3.h, z5.h\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 16 x half> (<vscale x 16 x half>, <vscale x 16 x half>, <vscale x 16 x half>) (in function: test)",
  "ll": "define <vscale x 16 x half> @test(<vscale x 16 x half> %a, <vscale x 16 x half> %b, <vscale x 16 x half> %c) {\n  %r = call <vscale x 16 x half> @llvm.fmuladd(<vscale x 16 x half> %a, <vscale x 16 x half> %b, <vscale x 16 x half> %c)\n  ret <vscale x 16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <vscale x 16 x half> @llvm.fmuladd.nxv16f16(<vscale x 16 x half> %a, <vscale x 16 x half> %b, <vscale x 16 x half> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 16 x half> %r"
 },
 {
  "instr": "fmuladd",
  "ty": "<vscale x 2 x float>",
  "variant": "triop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.d\nfmad z0.s, p0/m, z1.s, z2.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x float> (<vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>) (in function: test)",
  "ll": "define <vscale x 2 x float> @test(<vscale x 2 x float> %a, <vscale x 2 x float> %b, <vscale x 2 x float> %c) {\n  %r = call <vscale x 2 x float> @llvm.fmuladd(<vscale x 2 x float> %a, <vscale x 2 x float> %b, <vscale x 2 x float> %c)\n  ret <vscale x 2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 2 x float> @llvm.fmuladd.nxv2f32(<vscale x 2 x float> %a, <vscale x 2 x float> %b, <vscale x 2 x float> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x float> %r"
 },
 {
  "instr": "fmuladd",
  "ty": "<vscale x 4 x float>",
  "variant": "triop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.s\nfmad z0.s, p0/m, z1.s, z2.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x float> (<vscale x 4 x float>, <vscale x 4 x float>, <vscale x 4 x float>) (in function: test)",
  "ll": "define <vscale x 4 x float> @test(<vscale x 4 x float> %a, <vscale x 4 x float> %b, <vscale x 4 x float> %c) {\n  %r = call <vscale x 4 x float> @llvm.fmuladd(<vscale x 4 x float> %a, <vscale x 4 x float> %b, <vscale x 4 x float> %c)\n  ret <vscale x 4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 4 x float> @llvm.fmuladd.nxv4f32(<vscale x 4 x float> %a, <vscale x 4 x float> %b, <vscale x 4 x float> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x float> %r"
 },
 {
  "instr": "fmuladd",
  "ty": "<vscale x 8 x float>",
  "variant": "triop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.s\nfmad z0.s, p0/m, z2.s, z4.s\nfmad z1.s, p0/m, z3.s, z5.s\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 8 x float> (<vscale x 8 x float>, <vscale x 8 x float>, <vscale x 8 x float>) (in function: test)",
  "ll": "define <vscale x 8 x float> @test(<vscale x 8 x float> %a, <vscale x 8 x float> %b, <vscale x 8 x float> %c) {\n  %r = call <vscale x 8 x float> @llvm.fmuladd(<vscale x 8 x float> %a, <vscale x 8 x float> %b, <vscale x 8 x float> %c)\n  ret <vscale x 8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <vscale x 8 x float> @llvm.fmuladd.nxv8f32(<vscale x 8 x float> %a, <vscale x 8 x float> %b, <vscale x 8 x float> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 8 x float> %r"
 },
 {
  "instr": "fmuladd",
  "ty": "<vscale x 2 x double>",
  "variant": "triop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.d\nfmad z0.d, p0/m, z1.d, z2.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 2 x double> (<vscale x 2 x double>, <vscale x 2 x double>, <vscale x 2 x double>) (in function: test)",
  "ll": "define <vscale x 2 x double> @test(<vscale x 2 x double> %a, <vscale x 2 x double> %b, <vscale x 2 x double> %c) {\n  %r = call <vscale x 2 x double> @llvm.fmuladd(<vscale x 2 x double> %a, <vscale x 2 x double> %b, <vscale x 2 x double> %c)\n  ret <vscale x 2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <vscale x 2 x double> @llvm.fmuladd.nxv2f64(<vscale x 2 x double> %a, <vscale x 2 x double> %b, <vscale x 2 x double> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 2 x double> %r"
 },
 {
  "instr": "fmuladd",
  "ty": "<vscale x 4 x double>",
  "variant": "triop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": -1,
  "extrasize": 0,
  "asm": "ptrue p0.d\nfmad z0.d, p0/m, z2.d, z4.d\nfmad z1.d, p0/m, z3.d, z5.d\nret",
  "giasm": "LLVM ERROR: unable to lower function: <vscale x 4 x double> (<vscale x 4 x double>, <vscale x 4 x double>, <vscale x 4 x double>) (in function: test)",
  "ll": "define <vscale x 4 x double> @test(<vscale x 4 x double> %a, <vscale x 4 x double> %b, <vscale x 4 x double> %c) {\n  %r = call <vscale x 4 x double> @llvm.fmuladd(<vscale x 4 x double> %a, <vscale x 4 x double> %b, <vscale x 4 x double> %c)\n  ret <vscale x 4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <vscale x 4 x double> @llvm.fmuladd.nxv4f64(<vscale x 4 x double> %a, <vscale x 4 x double> %b, <vscale x 4 x double> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <vscale x 4 x double> %r"
 }
]