[
 {
  "instr": "fadd",
  "ty": "half",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcvt s1, h1\nfcvt s0, h0\nfadd s0, s0, s1\nfcvt h0, s0\nret",
  "giasm": "fcvt s0, h0\nfcvt s1, h1\nfadd s0, s0, s1\nfcvt h0, s0\nret",
  "ll": "define half @test(half %a, half %b) {\n  %r = fadd half %a, %b\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd half %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "fadd",
  "ty": "half",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 4,
  "gisize": 6,
  "extrasize": 0,
  "asm": "fcvt s0, h0\nfmov s1, #7.00000000\nfadd s0, s0, s1\nfcvt h0, s0\nret",
  "giasm": "mov w8, #18176                      // =0x4700\nfcvt s0, h0\nfmov s1, w8\nfcvt s1, h1\nfadd s0, s0, s1\nfcvt h0, s0\nret",
  "ll": "define half @test(half %a) {\n  %r = fadd half %a, 7.0\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd half %a, 0xH4700\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "fadd",
  "ty": "float",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fadd s0, s0, s1\nret",
  "giasm": "fadd s0, s0, s1\nret",
  "ll": "define float @test(float %a, float %b) {\n  %r = fadd float %a, %b\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd float %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "fadd",
  "ty": "float",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov s1, #7.00000000\nfadd s0, s0, s1\nret",
  "giasm": "fmov s1, #7.00000000\nfadd s0, s0, s1\nret",
  "ll": "define float @test(float %a) {\n  %r = fadd float %a, 7.0\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd float %a, 7.000000e+00\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "fadd",
  "ty": "double",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fadd d0, d0, d1\nret",
  "giasm": "fadd d0, d0, d1\nret",
  "ll": "define double @test(double %a, double %b) {\n  %r = fadd double %a, %b\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd double %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "fadd",
  "ty": "double",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov d1, #7.00000000\nfadd d0, d0, d1\nret",
  "giasm": "fmov d1, #7.00000000\nfadd d0, d0, d1\nret",
  "ll": "define double @test(double %a) {\n  %r = fadd double %a, 7.0\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd double %a, 7.000000e+00\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "fadd",
  "ty": "<4 x half>",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcvtl v1.4s, v1.4h\nfcvtl v0.4s, v0.4h\nfadd v0.4s, v0.4s, v1.4s\nfcvtn v0.4h, v0.4s\nret",
  "giasm": "fcvtl v0.4s, v0.4h\nfcvtl v1.4s, v1.4h\nfadd v0.4s, v0.4s, v1.4s\nfcvtn v0.4h, v0.4s\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, <4 x half> %b) {\n  %r = fadd <4 x half> %a, %b\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <4 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "fadd",
  "ty": "<4 x half>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 5,
  "gisize": 6,
  "extrasize": 0,
  "asm": "fcvtl v0.4s, v0.4h\nadrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfadd v0.4s, v0.4s, v1.4s\nfcvtn v0.4h, v0.4s\nret",
  "giasm": "adrp x8, .LCPI0_0\nfcvtl v0.4s, v0.4h\nldr d1, [x8, :lo12:.LCPI0_0]\nfcvtl v1.4s, v1.4h\nfadd v0.4s, v0.4s, v1.4s\nfcvtn v0.4h, v0.4s\nret",
  "ll": "define <4 x half> @test(<4 x half> %a) {\n  %r = fadd <4 x half> %a, <half 7.0, half 6.0, half 7.0, half 6.0>\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <4 x half> %a, <half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600>\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "fadd",
  "ty": "<4 x half>",
  "variant": "binopsplat",
  "codesize": 2,
  "thru": 3,
  "lat": 4,
  "sizelat": 2,
  "size": 5,
  "gisize": 5,
  "extrasize": 0,
  "asm": "fcvtl v0.4s, v0.4h\ndup v1.4h, v1.h[0]\nfcvtl v1.4s, v1.4h\nfadd v0.4s, v0.4s, v1.4s\nfcvtn v0.4h, v0.4s\nret",
  "giasm": "fcvtl v0.4s, v0.4h\ndup v1.4h, v1.h[0]\nfcvtl v1.4s, v1.4h\nfadd v0.4s, v0.4s, v1.4s\nfcvtn v0.4h, v0.4s\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, half %bs) {\n  %i = insertelement <4 x half> poison, half %bs, i64 0\n  %b = shufflevector <4 x half> %i, <4 x half> poison, <4 x i32> zeroinitializer\n  %r = fadd <4 x half> %a, %b\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <4 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <4 x half> %i, <4 x half> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <4 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "fadd",
  "ty": "<4 x half>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 4,
  "gisize": 5,
  "extrasize": 0,
  "asm": "fmov v1.4s, #7.00000000\nfcvtl v0.4s, v0.4h\nfadd v0.4s, v0.4s, v1.4s\nfcvtn v0.4h, v0.4s\nret",
  "giasm": "movi v1.4h, #71, lsl #8\nfcvtl v0.4s, v0.4h\nfcvtl v1.4s, v1.4h\nfadd v0.4s, v0.4s, v1.4s\nfcvtn v0.4h, v0.4s\nret",
  "ll": "define <4 x half> @test(<4 x half> %a) {\n  %r = fadd <4 x half> %a, <half 7.0, half 7.0, half 7.0, half 7.0>\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <4 x half> %a, splat (half 0xH4700)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "fadd",
  "ty": "<8 x half>",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 8,
  "gisize": 8,
  "extrasize": 0,
  "asm": "fcvtl v2.4s, v1.4h\nfcvtl v3.4s, v0.4h\nfcvtl2 v1.4s, v1.8h\nfcvtl2 v0.4s, v0.8h\nfadd v2.4s, v3.4s, v2.4s\nfadd v1.4s, v0.4s, v1.4s\nfcvtn v0.4h, v2.4s\nfcvtn2 v0.8h, v1.4s\nret",
  "giasm": "fcvtl v2.4s, v0.4h\nfcvtl v3.4s, v1.4h\nfcvtl2 v0.4s, v0.8h\nfcvtl2 v1.4s, v1.8h\nfadd v2.4s, v2.4s, v3.4s\nfadd v1.4s, v0.4s, v1.4s\nfcvtn v0.4h, v2.4s\nfcvtn2 v0.8h, v1.4s\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, <8 x half> %b) {\n  %r = fadd <8 x half> %a, %b\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <8 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "fadd",
  "ty": "<8 x half>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 10,
  "gisize": 9,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nfcvtl v2.4s, v0.4h\nfcvtl2 v0.4s, v0.8h\nldr q1, [x8, :lo12:.LCPI0_0]\nfcvtl v3.4s, v1.4h\nfcvtl2 v1.4s, v1.8h\nfadd v2.4s, v2.4s, v3.4s\nfadd v1.4s, v0.4s, v1.4s\nfcvtn v0.4h, v2.4s\nfcvtn2 v0.8h, v1.4s\nret",
  "giasm": "adrp x8, .LCPI0_0\nfcvtl v2.4s, v0.4h\nfcvtl2 v0.4s, v0.8h\nldr d1, [x8, :lo12:.LCPI0_0]\nfcvtl v1.4s, v1.4h\nfadd v2.4s, v2.4s, v1.4s\nfadd v1.4s, v0.4s, v1.4s\nfcvtn v0.4h, v2.4s\nfcvtn2 v0.8h, v1.4s\nret",
  "ll": "define <8 x half> @test(<8 x half> %a) {\n  %r = fadd <8 x half> %a, <half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0>\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <8 x half> %a, <half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600>\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "fadd",
  "ty": "<8 x half>",
  "variant": "binopsplat",
  "codesize": 2,
  "thru": 3,
  "lat": 4,
  "sizelat": 2,
  "size": 9,
  "gisize": 9,
  "extrasize": 0,
  "asm": "fcvtl v3.4s, v0.4h\nfcvtl2 v0.4s, v0.8h\ndup v1.8h, v1.h[0]\nfcvtl v2.4s, v1.4h\nfcvtl2 v1.4s, v1.8h\nfadd v2.4s, v3.4s, v2.4s\nfadd v1.4s, v0.4s, v1.4s\nfcvtn v0.4h, v2.4s\nfcvtn2 v0.8h, v1.4s\nret",
  "giasm": "fcvtl v2.4s, v0.4h\nfcvtl2 v0.4s, v0.8h\ndup v1.8h, v1.h[0]\nfcvtl v3.4s, v1.4h\nfcvtl2 v1.4s, v1.8h\nfadd v2.4s, v2.4s, v3.4s\nfadd v1.4s, v0.4s, v1.4s\nfcvtn v0.4h, v2.4s\nfcvtn2 v0.8h, v1.4s\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, half %bs) {\n  %i = insertelement <8 x half> poison, half %bs, i64 0\n  %b = shufflevector <8 x half> %i, <8 x half> poison, <8 x i32> zeroinitializer\n  %r = fadd <8 x half> %a, %b\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <8 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <8 x half> %i, <8 x half> poison, <8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <8 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "fadd",
  "ty": "<8 x half>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 9,
  "gisize": 8,
  "extrasize": 0,
  "asm": "movi v1.8h, #71, lsl #8\nfcvtl v2.4s, v0.4h\nfcvtl2 v0.4s, v0.8h\nfcvtl v3.4s, v1.4h\nfcvtl2 v1.4s, v1.8h\nfadd v2.4s, v2.4s, v3.4s\nfadd v1.4s, v0.4s, v1.4s\nfcvtn v0.4h, v2.4s\nfcvtn2 v0.8h, v1.4s\nret",
  "giasm": "movi v1.4h, #71, lsl #8\nfcvtl v2.4s, v0.4h\nfcvtl2 v0.4s, v0.8h\nfcvtl v1.4s, v1.4h\nfadd v2.4s, v2.4s, v1.4s\nfadd v1.4s, v0.4s, v1.4s\nfcvtn v0.4h, v2.4s\nfcvtn2 v0.8h, v1.4s\nret",
  "ll": "define <8 x half> @test(<8 x half> %a) {\n  %r = fadd <8 x half> %a, <half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0>\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <8 x half> %a, splat (half 0xH4700)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "fadd",
  "ty": "<16 x half>",
  "variant": "binop",
  "codesize": 1,
  "thru": 4,
  "lat": 3,
  "sizelat": 1,
  "size": 16,
  "gisize": 16,
  "extrasize": 0,
  "asm": "fcvtl v4.4s, v2.4h\nfcvtl v5.4s, v0.4h\nfcvtl v6.4s, v3.4h\nfcvtl v7.4s, v1.4h\nfcvtl2 v2.4s, v2.8h\nfcvtl2 v0.4s, v0.8h\nfcvtl2 v3.4s, v3.8h\nfcvtl2 v1.4s, v1.8h\nfadd v4.4s, v5.4s, v4.4s\nfadd v5.4s, v7.4s, v6.4s\nfadd v2.4s, v0.4s, v2.4s\nfadd v3.4s, v1.4s, v3.4s\nfcvtn v0.4h, v4.4s\nfcvtn v1.4h, v5.4s\nfcvtn2 v0.8h, v2.4s\nfcvtn2 v1.8h, v3.4s\nret",
  "giasm": "fcvtl v4.4s, v0.4h\nfcvtl v5.4s, v1.4h\nfcvtl v6.4s, v2.4h\nfcvtl v7.4s, v3.4h\nfcvtl2 v0.4s, v0.8h\nfcvtl2 v1.4s, v1.8h\nfcvtl2 v2.4s, v2.8h\nfcvtl2 v3.4s, v3.8h\nfadd v4.4s, v4.4s, v6.4s\nfadd v5.4s, v5.4s, v7.4s\nfadd v2.4s, v0.4s, v2.4s\nfadd v3.4s, v1.4s, v3.4s\nfcvtn v0.4h, v4.4s\nfcvtn v1.4h, v5.4s\nfcvtn2 v0.8h, v2.4s\nfcvtn2 v1.8h, v3.4s\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, <16 x half> %b) {\n  %r = fadd <16 x half> %a, %b\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <16 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "fadd",
  "ty": "<16 x half>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 4,
  "lat": 3,
  "sizelat": 1,
  "size": 16,
  "gisize": 15,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nfcvtl v3.4s, v0.4h\nfcvtl v5.4s, v1.4h\nldr q2, [x8, :lo12:.LCPI0_0]\nfcvtl2 v0.4s, v0.8h\nfcvtl2 v1.4s, v1.8h\nfcvtl v4.4s, v2.4h\nfcvtl2 v2.4s, v2.8h\nfadd v3.4s, v3.4s, v4.4s\nfadd v4.4s, v5.4s, v4.4s\nfadd v5.4s, v0.4s, v2.4s\nfadd v2.4s, v1.4s, v2.4s\nfcvtn v0.4h, v3.4s\nfcvtn v1.4h, v4.4s\nfcvtn2 v0.8h, v5.4s\nfcvtn2 v1.8h, v2.4s\nret",
  "giasm": "adrp x8, .LCPI0_0\nfcvtl v3.4s, v0.4h\nfcvtl v4.4s, v1.4h\nldr d2, [x8, :lo12:.LCPI0_0]\nfcvtl2 v0.4s, v0.8h\nfcvtl2 v1.4s, v1.8h\nfcvtl v2.4s, v2.4h\nfadd v3.4s, v3.4s, v2.4s\nfadd v4.4s, v4.4s, v2.4s\nfadd v5.4s, v0.4s, v2.4s\nfadd v2.4s, v1.4s, v2.4s\nfcvtn v0.4h, v3.4s\nfcvtn v1.4h, v4.4s\nfcvtn2 v0.8h, v5.4s\nfcvtn2 v1.8h, v2.4s\nret",
  "ll": "define <16 x half> @test(<16 x half> %a) {\n  %r = fadd <16 x half> %a, <half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0>\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <16 x half> %a, <half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600>\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "fadd",
  "ty": "<16 x half>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 6,
  "lat": 5,
  "sizelat": 3,
  "size": 15,
  "gisize": 18,
  "extrasize": 0,
  "asm": "fcvtl v4.4s, v0.4h\nfcvtl v5.4s, v1.4h\nfcvtl2 v0.4s, v0.8h\ndup v2.8h, v2.h[0]\nfcvtl2 v1.4s, v1.8h\nfcvtl v3.4s, v2.4h\nfcvtl2 v2.4s, v2.8h\nfadd v4.4s, v4.4s, v3.4s\nfadd v3.4s, v5.4s, v3.4s\nfadd v5.4s, v0.4s, v2.4s\nfadd v2.4s, v1.4s, v2.4s\nfcvtn v0.4h, v4.4s\nfcvtn v1.4h, v3.4s\nfcvtn2 v0.8h, v5.4s\nfcvtn2 v1.8h, v2.4s\nret",
  "giasm": "dup v3.8h, v2.h[0]\nfcvtl v4.4s, v0.4h\nfcvtl v5.4s, v1.4h\ndup v2.8h, v2.h[0]\nfcvtl2 v0.4s, v0.8h\nfcvtl2 v1.4s, v1.8h\nfcvtl v6.4s, v3.4h\nfcvtl2 v3.4s, v3.8h\nfcvtl v7.4s, v2.4h\nfcvtl2 v2.4s, v2.8h\nfadd v4.4s, v4.4s, v6.4s\nfadd v3.4s, v0.4s, v3.4s\nfadd v5.4s, v5.4s, v7.4s\nfadd v2.4s, v1.4s, v2.4s\nfcvtn v0.4h, v4.4s\nfcvtn v1.4h, v5.4s\nfcvtn2 v0.8h, v3.4s\nfcvtn2 v1.8h, v2.4s\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, half %bs) {\n  %i = insertelement <16 x half> poison, half %bs, i64 0\n  %b = shufflevector <16 x half> %i, <16 x half> poison, <16 x i32> zeroinitializer\n  %r = fadd <16 x half> %a, %b\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <16 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <16 x half> %i, <16 x half> poison, <16 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <16 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "fadd",
  "ty": "<16 x half>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 4,
  "lat": 3,
  "sizelat": 1,
  "size": 15,
  "gisize": 14,
  "extrasize": 0,
  "asm": "movi v2.8h, #71, lsl #8\nfcvtl v3.4s, v0.4h\nfcvtl v5.4s, v1.4h\nfcvtl2 v0.4s, v0.8h\nfcvtl2 v1.4s, v1.8h\nfcvtl v4.4s, v2.4h\nfcvtl2 v2.4s, v2.8h\nfadd v3.4s, v3.4s, v4.4s\nfadd v4.4s, v5.4s, v4.4s\nfadd v5.4s, v0.4s, v2.4s\nfadd v2.4s, v1.4s, v2.4s\nfcvtn v0.4h, v3.4s\nfcvtn v1.4h, v4.4s\nfcvtn2 v0.8h, v5.4s\nfcvtn2 v1.8h, v2.4s\nret",
  "giasm": "movi v2.4h, #71, lsl #8\nfcvtl v3.4s, v0.4h\nfcvtl v4.4s, v1.4h\nfcvtl2 v0.4s, v0.8h\nfcvtl2 v1.4s, v1.8h\nfcvtl v2.4s, v2.4h\nfadd v3.4s, v3.4s, v2.4s\nfadd v4.4s, v4.4s, v2.4s\nfadd v5.4s, v0.4s, v2.4s\nfadd v2.4s, v1.4s, v2.4s\nfcvtn v0.4h, v3.4s\nfcvtn v1.4h, v4.4s\nfcvtn2 v0.8h, v5.4s\nfcvtn2 v1.8h, v2.4s\nret",
  "ll": "define <16 x half> @test(<16 x half> %a) {\n  %r = fadd <16 x half> %a, <half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0>\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <16 x half> %a, splat (half 0xH4700)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "fadd",
  "ty": "<2 x float>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fadd v0.2s, v0.2s, v1.2s\nret",
  "giasm": "fadd v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, <2 x float> %b) {\n  %r = fadd <2 x float> %a, %b\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <2 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "fadd",
  "ty": "<2 x float>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr d1, [x8, :lo12:.LCPI0_0]\nfadd v0.2s, v0.2s, v1.2s\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr d1, [x8, :lo12:.LCPI0_0]\nfadd v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a) {\n  %r = fadd <2 x float> %a, <float 7.0, float 6.0>\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <2 x float> %a, <float 7.000000e+00, float 6.000000e+00>\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "fadd",
  "ty": "<2 x float>",
  "variant": "binopsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 4,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "dup v1.2s, v1.s[0]\nfadd v0.2s, v0.2s, v1.2s\nret",
  "giasm": "dup v1.2s, v1.s[0]\nfadd v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, float %bs) {\n  %i = insertelement <2 x float> poison, float %bs, i64 0\n  %b = shufflevector <2 x float> %i, <2 x float> poison, <2 x i32> zeroinitializer\n  %r = fadd <2 x float> %a, %b\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <2 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <2 x float> %i, <2 x float> poison, <2 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <2 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "fadd",
  "ty": "<2 x float>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov v1.2s, #7.00000000\nfadd v0.2s, v0.2s, v1.2s\nret",
  "giasm": "fmov v1.2s, #7.00000000\nfadd v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a) {\n  %r = fadd <2 x float> %a, <float 7.0, float 7.0>\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <2 x float> %a, splat (float 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "fadd",
  "ty": "<4 x float>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fadd v0.4s, v0.4s, v1.4s\nret",
  "giasm": "fadd v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, <4 x float> %b) {\n  %r = fadd <4 x float> %a, %b\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <4 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "fadd",
  "ty": "<4 x float>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfadd v0.4s, v0.4s, v1.4s\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfadd v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a) {\n  %r = fadd <4 x float> %a, <float 7.0, float 6.0, float 7.0, float 6.0>\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <4 x float> %a, <float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00>\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "fadd",
  "ty": "<4 x float>",
  "variant": "binopsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 4,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "dup v1.4s, v1.s[0]\nfadd v0.4s, v0.4s, v1.4s\nret",
  "giasm": "dup v1.4s, v1.s[0]\nfadd v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, float %bs) {\n  %i = insertelement <4 x float> poison, float %bs, i64 0\n  %b = shufflevector <4 x float> %i, <4 x float> poison, <4 x i32> zeroinitializer\n  %r = fadd <4 x float> %a, %b\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <4 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <4 x float> %i, <4 x float> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <4 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "fadd",
  "ty": "<4 x float>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov v1.4s, #7.00000000\nfadd v0.4s, v0.4s, v1.4s\nret",
  "giasm": "fmov v1.4s, #7.00000000\nfadd v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a) {\n  %r = fadd <4 x float> %a, <float 7.0, float 7.0, float 7.0, float 7.0>\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <4 x float> %a, splat (float 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "fadd",
  "ty": "<8 x float>",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fadd v1.4s, v1.4s, v3.4s\nfadd v0.4s, v0.4s, v2.4s\nret",
  "giasm": "fadd v0.4s, v0.4s, v2.4s\nfadd v1.4s, v1.4s, v3.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, <8 x float> %b) {\n  %r = fadd <8 x float> %a, %b\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <8 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "fadd",
  "ty": "<8 x float>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfadd v0.4s, v0.4s, v2.4s\nfadd v1.4s, v1.4s, v2.4s\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfadd v0.4s, v0.4s, v2.4s\nfadd v1.4s, v1.4s, v2.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a) {\n  %r = fadd <8 x float> %a, <float 7.0, float 6.0, float 7.0, float 6.0, float 7.0, float 6.0, float 7.0, float 6.0>\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <8 x float> %a, <float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00>\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "fadd",
  "ty": "<8 x float>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 4,
  "lat": 5,
  "sizelat": 3,
  "size": 3,
  "gisize": 4,
  "extrasize": 0,
  "asm": "dup v2.4s, v2.s[0]\nfadd v0.4s, v0.4s, v2.4s\nfadd v1.4s, v1.4s, v2.4s\nret",
  "giasm": "dup v3.4s, v2.s[0]\ndup v2.4s, v2.s[0]\nfadd v0.4s, v0.4s, v3.4s\nfadd v1.4s, v1.4s, v2.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, float %bs) {\n  %i = insertelement <8 x float> poison, float %bs, i64 0\n  %b = shufflevector <8 x float> %i, <8 x float> poison, <8 x i32> zeroinitializer\n  %r = fadd <8 x float> %a, %b\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <8 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <8 x float> %i, <8 x float> poison, <8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <8 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "fadd",
  "ty": "<8 x float>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fmov v2.4s, #7.00000000\nfadd v0.4s, v0.4s, v2.4s\nfadd v1.4s, v1.4s, v2.4s\nret",
  "giasm": "fmov v2.4s, #7.00000000\nfadd v0.4s, v0.4s, v2.4s\nfadd v1.4s, v1.4s, v2.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a) {\n  %r = fadd <8 x float> %a, <float 7.0, float 7.0, float 7.0, float 7.0, float 7.0, float 7.0, float 7.0, float 7.0>\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <8 x float> %a, splat (float 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "fadd",
  "ty": "<2 x double>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fadd v0.2d, v0.2d, v1.2d\nret",
  "giasm": "fadd v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, <2 x double> %b) {\n  %r = fadd <2 x double> %a, %b\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <2 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "fadd",
  "ty": "<2 x double>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfadd v0.2d, v0.2d, v1.2d\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfadd v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a) {\n  %r = fadd <2 x double> %a, <double 7.0, double 6.0>\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <2 x double> %a, <double 7.000000e+00, double 6.000000e+00>\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "fadd",
  "ty": "<2 x double>",
  "variant": "binopsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 4,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "dup v1.2d, v1.d[0]\nfadd v0.2d, v0.2d, v1.2d\nret",
  "giasm": "dup v1.2d, v1.d[0]\nfadd v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, double %bs) {\n  %i = insertelement <2 x double> poison, double %bs, i64 0\n  %b = shufflevector <2 x double> %i, <2 x double> poison, <2 x i32> zeroinitializer\n  %r = fadd <2 x double> %a, %b\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <2 x double> poison, double %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <2 x double> %i, <2 x double> poison, <2 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <2 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "fadd",
  "ty": "<2 x double>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov v1.2d, #7.00000000\nfadd v0.2d, v0.2d, v1.2d\nret",
  "giasm": "fmov v1.2d, #7.00000000\nfadd v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a) {\n  %r = fadd <2 x double> %a, <double 7.0, double 7.0>\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <2 x double> %a, splat (double 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "fadd",
  "ty": "<4 x double>",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fadd v1.2d, v1.2d, v3.2d\nfadd v0.2d, v0.2d, v2.2d\nret",
  "giasm": "fadd v0.2d, v0.2d, v2.2d\nfadd v1.2d, v1.2d, v3.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, <4 x double> %b) {\n  %r = fadd <4 x double> %a, %b\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <4 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "fadd",
  "ty": "<4 x double>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfadd v0.2d, v0.2d, v2.2d\nfadd v1.2d, v1.2d, v2.2d\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfadd v0.2d, v0.2d, v2.2d\nfadd v1.2d, v1.2d, v2.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a) {\n  %r = fadd <4 x double> %a, <double 7.0, double 6.0, double 7.0, double 6.0>\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <4 x double> %a, <double 7.000000e+00, double 6.000000e+00, double 7.000000e+00, double 6.000000e+00>\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "fadd",
  "ty": "<4 x double>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 4,
  "lat": 5,
  "sizelat": 3,
  "size": 3,
  "gisize": 4,
  "extrasize": 0,
  "asm": "dup v2.2d, v2.d[0]\nfadd v0.2d, v0.2d, v2.2d\nfadd v1.2d, v1.2d, v2.2d\nret",
  "giasm": "dup v3.2d, v2.d[0]\ndup v2.2d, v2.d[0]\nfadd v0.2d, v0.2d, v3.2d\nfadd v1.2d, v1.2d, v2.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, double %bs) {\n  %i = insertelement <4 x double> poison, double %bs, i64 0\n  %b = shufflevector <4 x double> %i, <4 x double> poison, <4 x i32> zeroinitializer\n  %r = fadd <4 x double> %a, %b\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <4 x double> poison, double %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <4 x double> %i, <4 x double> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <4 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "fadd",
  "ty": "<4 x double>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fmov v2.2d, #7.00000000\nfadd v0.2d, v0.2d, v2.2d\nfadd v1.2d, v1.2d, v2.2d\nret",
  "giasm": "fmov v2.2d, #7.00000000\nfadd v0.2d, v0.2d, v2.2d\nfadd v1.2d, v1.2d, v2.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a) {\n  %r = fadd <4 x double> %a, <double 7.0, double 7.0, double 7.0, double 7.0>\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <4 x double> %a, splat (double 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "fsub",
  "ty": "half",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcvt s1, h1\nfcvt s0, h0\nfsub s0, s0, s1\nfcvt h0, s0\nret",
  "giasm": "fcvt s0, h0\nfcvt s1, h1\nfsub s0, s0, s1\nfcvt h0, s0\nret",
  "ll": "define half @test(half %a, half %b) {\n  %r = fsub half %a, %b\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub half %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "fsub",
  "ty": "half",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 4,
  "gisize": 6,
  "extrasize": 0,
  "asm": "fcvt s0, h0\nfmov s1, #-7.00000000\nfadd s0, s0, s1\nfcvt h0, s0\nret",
  "giasm": "mov w8, #18176                      // =0x4700\nfcvt s0, h0\nfmov s1, w8\nfcvt s1, h1\nfsub s0, s0, s1\nfcvt h0, s0\nret",
  "ll": "define half @test(half %a) {\n  %r = fsub half %a, 7.0\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub half %a, 0xH4700\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "fsub",
  "ty": "float",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fsub s0, s0, s1\nret",
  "giasm": "fsub s0, s0, s1\nret",
  "ll": "define float @test(float %a, float %b) {\n  %r = fsub float %a, %b\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub float %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "fsub",
  "ty": "float",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov s1, #-7.00000000\nfadd s0, s0, s1\nret",
  "giasm": "fmov s1, #7.00000000\nfsub s0, s0, s1\nret",
  "ll": "define float @test(float %a) {\n  %r = fsub float %a, 7.0\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub float %a, 7.000000e+00\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "fsub",
  "ty": "double",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fsub d0, d0, d1\nret",
  "giasm": "fsub d0, d0, d1\nret",
  "ll": "define double @test(double %a, double %b) {\n  %r = fsub double %a, %b\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub double %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "fsub",
  "ty": "double",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov d1, #-7.00000000\nfadd d0, d0, d1\nret",
  "giasm": "fmov d1, #7.00000000\nfsub d0, d0, d1\nret",
  "ll": "define double @test(double %a) {\n  %r = fsub double %a, 7.0\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub double %a, 7.000000e+00\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "fsub",
  "ty": "<4 x half>",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcvtl v1.4s, v1.4h\nfcvtl v0.4s, v0.4h\nfsub v0.4s, v0.4s, v1.4s\nfcvtn v0.4h, v0.4s\nret",
  "giasm": "fcvtl v0.4s, v0.4h\nfcvtl v1.4s, v1.4h\nfsub v0.4s, v0.4s, v1.4s\nfcvtn v0.4h, v0.4s\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, <4 x half> %b) {\n  %r = fsub <4 x half> %a, %b\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <4 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "fsub",
  "ty": "<4 x half>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 5,
  "gisize": 6,
  "extrasize": 0,
  "asm": "fcvtl v0.4s, v0.4h\nadrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfadd v0.4s, v0.4s, v1.4s\nfcvtn v0.4h, v0.4s\nret",
  "giasm": "adrp x8, .LCPI0_0\nfcvtl v0.4s, v0.4h\nldr d1, [x8, :lo12:.LCPI0_0]\nfcvtl v1.4s, v1.4h\nfsub v0.4s, v0.4s, v1.4s\nfcvtn v0.4h, v0.4s\nret",
  "ll": "define <4 x half> @test(<4 x half> %a) {\n  %r = fsub <4 x half> %a, <half 7.0, half 6.0, half 7.0, half 6.0>\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <4 x half> %a, <half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600>\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "fsub",
  "ty": "<4 x half>",
  "variant": "binopsplat",
  "codesize": 2,
  "thru": 3,
  "lat": 4,
  "sizelat": 2,
  "size": 5,
  "gisize": 5,
  "extrasize": 0,
  "asm": "fcvtl v0.4s, v0.4h\ndup v1.4h, v1.h[0]\nfcvtl v1.4s, v1.4h\nfsub v0.4s, v0.4s, v1.4s\nfcvtn v0.4h, v0.4s\nret",
  "giasm": "fcvtl v0.4s, v0.4h\ndup v1.4h, v1.h[0]\nfcvtl v1.4s, v1.4h\nfsub v0.4s, v0.4s, v1.4s\nfcvtn v0.4h, v0.4s\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, half %bs) {\n  %i = insertelement <4 x half> poison, half %bs, i64 0\n  %b = shufflevector <4 x half> %i, <4 x half> poison, <4 x i32> zeroinitializer\n  %r = fsub <4 x half> %a, %b\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <4 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <4 x half> %i, <4 x half> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <4 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "fsub",
  "ty": "<4 x half>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 4,
  "gisize": 5,
  "extrasize": 0,
  "asm": "fmov v1.4s, #-7.00000000\nfcvtl v0.4s, v0.4h\nfadd v0.4s, v0.4s, v1.4s\nfcvtn v0.4h, v0.4s\nret",
  "giasm": "movi v1.4h, #71, lsl #8\nfcvtl v0.4s, v0.4h\nfcvtl v1.4s, v1.4h\nfsub v0.4s, v0.4s, v1.4s\nfcvtn v0.4h, v0.4s\nret",
  "ll": "define <4 x half> @test(<4 x half> %a) {\n  %r = fsub <4 x half> %a, <half 7.0, half 7.0, half 7.0, half 7.0>\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <4 x half> %a, splat (half 0xH4700)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "fsub",
  "ty": "<8 x half>",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 8,
  "gisize": 8,
  "extrasize": 0,
  "asm": "fcvtl v2.4s, v1.4h\nfcvtl v3.4s, v0.4h\nfcvtl2 v1.4s, v1.8h\nfcvtl2 v0.4s, v0.8h\nfsub v2.4s, v3.4s, v2.4s\nfsub v1.4s, v0.4s, v1.4s\nfcvtn v0.4h, v2.4s\nfcvtn2 v0.8h, v1.4s\nret",
  "giasm": "fcvtl v2.4s, v0.4h\nfcvtl v3.4s, v1.4h\nfcvtl2 v0.4s, v0.8h\nfcvtl2 v1.4s, v1.8h\nfsub v2.4s, v2.4s, v3.4s\nfsub v1.4s, v0.4s, v1.4s\nfcvtn v0.4h, v2.4s\nfcvtn2 v0.8h, v1.4s\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, <8 x half> %b) {\n  %r = fsub <8 x half> %a, %b\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <8 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "fsub",
  "ty": "<8 x half>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 10,
  "gisize": 9,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nfcvtl v2.4s, v0.4h\nfcvtl2 v0.4s, v0.8h\nldr q1, [x8, :lo12:.LCPI0_0]\nfcvtl v3.4s, v1.4h\nfcvtl2 v1.4s, v1.8h\nfadd v2.4s, v2.4s, v3.4s\nfadd v1.4s, v0.4s, v1.4s\nfcvtn v0.4h, v2.4s\nfcvtn2 v0.8h, v1.4s\nret",
  "giasm": "adrp x8, .LCPI0_0\nfcvtl v2.4s, v0.4h\nfcvtl2 v0.4s, v0.8h\nldr d1, [x8, :lo12:.LCPI0_0]\nfcvtl v1.4s, v1.4h\nfsub v2.4s, v2.4s, v1.4s\nfsub v1.4s, v0.4s, v1.4s\nfcvtn v0.4h, v2.4s\nfcvtn2 v0.8h, v1.4s\nret",
  "ll": "define <8 x half> @test(<8 x half> %a) {\n  %r = fsub <8 x half> %a, <half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0>\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <8 x half> %a, <half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600>\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "fsub",
  "ty": "<8 x half>",
  "variant": "binopsplat",
  "codesize": 2,
  "thru": 3,
  "lat": 4,
  "sizelat": 2,
  "size": 9,
  "gisize": 9,
  "extrasize": 0,
  "asm": "fcvtl v3.4s, v0.4h\nfcvtl2 v0.4s, v0.8h\ndup v1.8h, v1.h[0]\nfcvtl v2.4s, v1.4h\nfcvtl2 v1.4s, v1.8h\nfsub v2.4s, v3.4s, v2.4s\nfsub v1.4s, v0.4s, v1.4s\nfcvtn v0.4h, v2.4s\nfcvtn2 v0.8h, v1.4s\nret",
  "giasm": "fcvtl v2.4s, v0.4h\nfcvtl2 v0.4s, v0.8h\ndup v1.8h, v1.h[0]\nfcvtl v3.4s, v1.4h\nfcvtl2 v1.4s, v1.8h\nfsub v2.4s, v2.4s, v3.4s\nfsub v1.4s, v0.4s, v1.4s\nfcvtn v0.4h, v2.4s\nfcvtn2 v0.8h, v1.4s\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, half %bs) {\n  %i = insertelement <8 x half> poison, half %bs, i64 0\n  %b = shufflevector <8 x half> %i, <8 x half> poison, <8 x i32> zeroinitializer\n  %r = fsub <8 x half> %a, %b\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <8 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <8 x half> %i, <8 x half> poison, <8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <8 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "fsub",
  "ty": "<8 x half>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 9,
  "gisize": 8,
  "extrasize": 0,
  "asm": "movi v1.8h, #199, lsl #8\nfcvtl v2.4s, v0.4h\nfcvtl2 v0.4s, v0.8h\nfcvtl v3.4s, v1.4h\nfcvtl2 v1.4s, v1.8h\nfadd v2.4s, v2.4s, v3.4s\nfadd v1.4s, v0.4s, v1.4s\nfcvtn v0.4h, v2.4s\nfcvtn2 v0.8h, v1.4s\nret",
  "giasm": "movi v1.4h, #71, lsl #8\nfcvtl v2.4s, v0.4h\nfcvtl2 v0.4s, v0.8h\nfcvtl v1.4s, v1.4h\nfsub v2.4s, v2.4s, v1.4s\nfsub v1.4s, v0.4s, v1.4s\nfcvtn v0.4h, v2.4s\nfcvtn2 v0.8h, v1.4s\nret",
  "ll": "define <8 x half> @test(<8 x half> %a) {\n  %r = fsub <8 x half> %a, <half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0>\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <8 x half> %a, splat (half 0xH4700)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "fsub",
  "ty": "<16 x half>",
  "variant": "binop",
  "codesize": 1,
  "thru": 4,
  "lat": 3,
  "sizelat": 1,
  "size": 16,
  "gisize": 16,
  "extrasize": 0,
  "asm": "fcvtl v4.4s, v2.4h\nfcvtl v5.4s, v0.4h\nfcvtl v6.4s, v3.4h\nfcvtl v7.4s, v1.4h\nfcvtl2 v2.4s, v2.8h\nfcvtl2 v0.4s, v0.8h\nfcvtl2 v3.4s, v3.8h\nfcvtl2 v1.4s, v1.8h\nfsub v4.4s, v5.4s, v4.4s\nfsub v5.4s, v7.4s, v6.4s\nfsub v2.4s, v0.4s, v2.4s\nfsub v3.4s, v1.4s, v3.4s\nfcvtn v0.4h, v4.4s\nfcvtn v1.4h, v5.4s\nfcvtn2 v0.8h, v2.4s\nfcvtn2 v1.8h, v3.4s\nret",
  "giasm": "fcvtl v4.4s, v0.4h\nfcvtl v5.4s, v1.4h\nfcvtl v6.4s, v2.4h\nfcvtl v7.4s, v3.4h\nfcvtl2 v0.4s, v0.8h\nfcvtl2 v1.4s, v1.8h\nfcvtl2 v2.4s, v2.8h\nfcvtl2 v3.4s, v3.8h\nfsub v4.4s, v4.4s, v6.4s\nfsub v5.4s, v5.4s, v7.4s\nfsub v2.4s, v0.4s, v2.4s\nfsub v3.4s, v1.4s, v3.4s\nfcvtn v0.4h, v4.4s\nfcvtn v1.4h, v5.4s\nfcvtn2 v0.8h, v2.4s\nfcvtn2 v1.8h, v3.4s\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, <16 x half> %b) {\n  %r = fsub <16 x half> %a, %b\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <16 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "fsub",
  "ty": "<16 x half>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 4,
  "lat": 3,
  "sizelat": 1,
  "size": 16,
  "gisize": 15,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nfcvtl v3.4s, v0.4h\nfcvtl v5.4s, v1.4h\nldr q2, [x8, :lo12:.LCPI0_0]\nfcvtl2 v0.4s, v0.8h\nfcvtl2 v1.4s, v1.8h\nfcvtl v4.4s, v2.4h\nfcvtl2 v2.4s, v2.8h\nfadd v3.4s, v3.4s, v4.4s\nfadd v4.4s, v5.4s, v4.4s\nfadd v5.4s, v0.4s, v2.4s\nfadd v2.4s, v1.4s, v2.4s\nfcvtn v0.4h, v3.4s\nfcvtn v1.4h, v4.4s\nfcvtn2 v0.8h, v5.4s\nfcvtn2 v1.8h, v2.4s\nret",
  "giasm": "adrp x8, .LCPI0_0\nfcvtl v3.4s, v0.4h\nfcvtl v4.4s, v1.4h\nldr d2, [x8, :lo12:.LCPI0_0]\nfcvtl2 v0.4s, v0.8h\nfcvtl2 v1.4s, v1.8h\nfcvtl v2.4s, v2.4h\nfsub v3.4s, v3.4s, v2.4s\nfsub v4.4s, v4.4s, v2.4s\nfsub v5.4s, v0.4s, v2.4s\nfsub v2.4s, v1.4s, v2.4s\nfcvtn v0.4h, v3.4s\nfcvtn v1.4h, v4.4s\nfcvtn2 v0.8h, v5.4s\nfcvtn2 v1.8h, v2.4s\nret",
  "ll": "define <16 x half> @test(<16 x half> %a) {\n  %r = fsub <16 x half> %a, <half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0>\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <16 x half> %a, <half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600>\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "fsub",
  "ty": "<16 x half>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 6,
  "lat": 5,
  "sizelat": 3,
  "size": 15,
  "gisize": 18,
  "extrasize": 0,
  "asm": "fcvtl v4.4s, v0.4h\nfcvtl v5.4s, v1.4h\nfcvtl2 v0.4s, v0.8h\ndup v2.8h, v2.h[0]\nfcvtl2 v1.4s, v1.8h\nfcvtl v3.4s, v2.4h\nfcvtl2 v2.4s, v2.8h\nfsub v4.4s, v4.4s, v3.4s\nfsub v3.4s, v5.4s, v3.4s\nfsub v5.4s, v0.4s, v2.4s\nfsub v2.4s, v1.4s, v2.4s\nfcvtn v0.4h, v4.4s\nfcvtn v1.4h, v3.4s\nfcvtn2 v0.8h, v5.4s\nfcvtn2 v1.8h, v2.4s\nret",
  "giasm": "dup v3.8h, v2.h[0]\nfcvtl v4.4s, v0.4h\nfcvtl v5.4s, v1.4h\ndup v2.8h, v2.h[0]\nfcvtl2 v0.4s, v0.8h\nfcvtl2 v1.4s, v1.8h\nfcvtl v6.4s, v3.4h\nfcvtl2 v3.4s, v3.8h\nfcvtl v7.4s, v2.4h\nfcvtl2 v2.4s, v2.8h\nfsub v4.4s, v4.4s, v6.4s\nfsub v3.4s, v0.4s, v3.4s\nfsub v5.4s, v5.4s, v7.4s\nfsub v2.4s, v1.4s, v2.4s\nfcvtn v0.4h, v4.4s\nfcvtn v1.4h, v5.4s\nfcvtn2 v0.8h, v3.4s\nfcvtn2 v1.8h, v2.4s\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, half %bs) {\n  %i = insertelement <16 x half> poison, half %bs, i64 0\n  %b = shufflevector <16 x half> %i, <16 x half> poison, <16 x i32> zeroinitializer\n  %r = fsub <16 x half> %a, %b\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <16 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <16 x half> %i, <16 x half> poison, <16 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <16 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "fsub",
  "ty": "<16 x half>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 4,
  "lat": 3,
  "sizelat": 1,
  "size": 15,
  "gisize": 14,
  "extrasize": 0,
  "asm": "movi v2.8h, #199, lsl #8\nfcvtl v3.4s, v0.4h\nfcvtl v5.4s, v1.4h\nfcvtl2 v0.4s, v0.8h\nfcvtl2 v1.4s, v1.8h\nfcvtl v4.4s, v2.4h\nfcvtl2 v2.4s, v2.8h\nfadd v3.4s, v3.4s, v4.4s\nfadd v4.4s, v5.4s, v4.4s\nfadd v5.4s, v0.4s, v2.4s\nfadd v2.4s, v1.4s, v2.4s\nfcvtn v0.4h, v3.4s\nfcvtn v1.4h, v4.4s\nfcvtn2 v0.8h, v5.4s\nfcvtn2 v1.8h, v2.4s\nret",
  "giasm": "movi v2.4h, #71, lsl #8\nfcvtl v3.4s, v0.4h\nfcvtl v4.4s, v1.4h\nfcvtl2 v0.4s, v0.8h\nfcvtl2 v1.4s, v1.8h\nfcvtl v2.4s, v2.4h\nfsub v3.4s, v3.4s, v2.4s\nfsub v4.4s, v4.4s, v2.4s\nfsub v5.4s, v0.4s, v2.4s\nfsub v2.4s, v1.4s, v2.4s\nfcvtn v0.4h, v3.4s\nfcvtn v1.4h, v4.4s\nfcvtn2 v0.8h, v5.4s\nfcvtn2 v1.8h, v2.4s\nret",
  "ll": "define <16 x half> @test(<16 x half> %a) {\n  %r = fsub <16 x half> %a, <half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0>\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <16 x half> %a, splat (half 0xH4700)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "fsub",
  "ty": "<2 x float>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fsub v0.2s, v0.2s, v1.2s\nret",
  "giasm": "fsub v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, <2 x float> %b) {\n  %r = fsub <2 x float> %a, %b\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <2 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "fsub",
  "ty": "<2 x float>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr d1, [x8, :lo12:.LCPI0_0]\nfadd v0.2s, v0.2s, v1.2s\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr d1, [x8, :lo12:.LCPI0_0]\nfsub v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a) {\n  %r = fsub <2 x float> %a, <float 7.0, float 6.0>\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <2 x float> %a, <float 7.000000e+00, float 6.000000e+00>\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "fsub",
  "ty": "<2 x float>",
  "variant": "binopsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 4,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "dup v1.2s, v1.s[0]\nfsub v0.2s, v0.2s, v1.2s\nret",
  "giasm": "dup v1.2s, v1.s[0]\nfsub v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, float %bs) {\n  %i = insertelement <2 x float> poison, float %bs, i64 0\n  %b = shufflevector <2 x float> %i, <2 x float> poison, <2 x i32> zeroinitializer\n  %r = fsub <2 x float> %a, %b\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <2 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <2 x float> %i, <2 x float> poison, <2 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <2 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "fsub",
  "ty": "<2 x float>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov v1.2s, #-7.00000000\nfadd v0.2s, v0.2s, v1.2s\nret",
  "giasm": "fmov v1.2s, #7.00000000\nfsub v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a) {\n  %r = fsub <2 x float> %a, <float 7.0, float 7.0>\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <2 x float> %a, splat (float 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "fsub",
  "ty": "<4 x float>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fsub v0.4s, v0.4s, v1.4s\nret",
  "giasm": "fsub v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, <4 x float> %b) {\n  %r = fsub <4 x float> %a, %b\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <4 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "fsub",
  "ty": "<4 x float>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfadd v0.4s, v0.4s, v1.4s\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfsub v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a) {\n  %r = fsub <4 x float> %a, <float 7.0, float 6.0, float 7.0, float 6.0>\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <4 x float> %a, <float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00>\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "fsub",
  "ty": "<4 x float>",
  "variant": "binopsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 4,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "dup v1.4s, v1.s[0]\nfsub v0.4s, v0.4s, v1.4s\nret",
  "giasm": "dup v1.4s, v1.s[0]\nfsub v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, float %bs) {\n  %i = insertelement <4 x float> poison, float %bs, i64 0\n  %b = shufflevector <4 x float> %i, <4 x float> poison, <4 x i32> zeroinitializer\n  %r = fsub <4 x float> %a, %b\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <4 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <4 x float> %i, <4 x float> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <4 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "fsub",
  "ty": "<4 x float>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov v1.4s, #-7.00000000\nfadd v0.4s, v0.4s, v1.4s\nret",
  "giasm": "fmov v1.4s, #7.00000000\nfsub v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a) {\n  %r = fsub <4 x float> %a, <float 7.0, float 7.0, float 7.0, float 7.0>\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <4 x float> %a, splat (float 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "fsub",
  "ty": "<8 x float>",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fsub v1.4s, v1.4s, v3.4s\nfsub v0.4s, v0.4s, v2.4s\nret",
  "giasm": "fsub v0.4s, v0.4s, v2.4s\nfsub v1.4s, v1.4s, v3.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, <8 x float> %b) {\n  %r = fsub <8 x float> %a, %b\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <8 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "fsub",
  "ty": "<8 x float>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfadd v0.4s, v0.4s, v2.4s\nfadd v1.4s, v1.4s, v2.4s\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfsub v0.4s, v0.4s, v2.4s\nfsub v1.4s, v1.4s, v2.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a) {\n  %r = fsub <8 x float> %a, <float 7.0, float 6.0, float 7.0, float 6.0, float 7.0, float 6.0, float 7.0, float 6.0>\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <8 x float> %a, <float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00>\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "fsub",
  "ty": "<8 x float>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 4,
  "lat": 5,
  "sizelat": 3,
  "size": 3,
  "gisize": 4,
  "extrasize": 0,
  "asm": "dup v2.4s, v2.s[0]\nfsub v0.4s, v0.4s, v2.4s\nfsub v1.4s, v1.4s, v2.4s\nret",
  "giasm": "dup v3.4s, v2.s[0]\ndup v2.4s, v2.s[0]\nfsub v0.4s, v0.4s, v3.4s\nfsub v1.4s, v1.4s, v2.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, float %bs) {\n  %i = insertelement <8 x float> poison, float %bs, i64 0\n  %b = shufflevector <8 x float> %i, <8 x float> poison, <8 x i32> zeroinitializer\n  %r = fsub <8 x float> %a, %b\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <8 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <8 x float> %i, <8 x float> poison, <8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <8 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "fsub",
  "ty": "<8 x float>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fmov v2.4s, #-7.00000000\nfadd v0.4s, v0.4s, v2.4s\nfadd v1.4s, v1.4s, v2.4s\nret",
  "giasm": "fmov v2.4s, #7.00000000\nfsub v0.4s, v0.4s, v2.4s\nfsub v1.4s, v1.4s, v2.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a) {\n  %r = fsub <8 x float> %a, <float 7.0, float 7.0, float 7.0, float 7.0, float 7.0, float 7.0, float 7.0, float 7.0>\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <8 x float> %a, splat (float 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "fsub",
  "ty": "<2 x double>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fsub v0.2d, v0.2d, v1.2d\nret",
  "giasm": "fsub v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, <2 x double> %b) {\n  %r = fsub <2 x double> %a, %b\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <2 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "fsub",
  "ty": "<2 x double>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfadd v0.2d, v0.2d, v1.2d\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfsub v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a) {\n  %r = fsub <2 x double> %a, <double 7.0, double 6.0>\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <2 x double> %a, <double 7.000000e+00, double 6.000000e+00>\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "fsub",
  "ty": "<2 x double>",
  "variant": "binopsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 4,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "dup v1.2d, v1.d[0]\nfsub v0.2d, v0.2d, v1.2d\nret",
  "giasm": "dup v1.2d, v1.d[0]\nfsub v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, double %bs) {\n  %i = insertelement <2 x double> poison, double %bs, i64 0\n  %b = shufflevector <2 x double> %i, <2 x double> poison, <2 x i32> zeroinitializer\n  %r = fsub <2 x double> %a, %b\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <2 x double> poison, double %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <2 x double> %i, <2 x double> poison, <2 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <2 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "fsub",
  "ty": "<2 x double>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov v1.2d, #-7.00000000\nfadd v0.2d, v0.2d, v1.2d\nret",
  "giasm": "fmov v1.2d, #7.00000000\nfsub v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a) {\n  %r = fsub <2 x double> %a, <double 7.0, double 7.0>\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <2 x double> %a, splat (double 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "fsub",
  "ty": "<4 x double>",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fsub v1.2d, v1.2d, v3.2d\nfsub v0.2d, v0.2d, v2.2d\nret",
  "giasm": "fsub v0.2d, v0.2d, v2.2d\nfsub v1.2d, v1.2d, v3.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, <4 x double> %b) {\n  %r = fsub <4 x double> %a, %b\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <4 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "fsub",
  "ty": "<4 x double>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfadd v0.2d, v0.2d, v2.2d\nfadd v1.2d, v1.2d, v2.2d\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfsub v0.2d, v0.2d, v2.2d\nfsub v1.2d, v1.2d, v2.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a) {\n  %r = fsub <4 x double> %a, <double 7.0, double 6.0, double 7.0, double 6.0>\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <4 x double> %a, <double 7.000000e+00, double 6.000000e+00, double 7.000000e+00, double 6.000000e+00>\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "fsub",
  "ty": "<4 x double>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 4,
  "lat": 5,
  "sizelat": 3,
  "size": 3,
  "gisize": 4,
  "extrasize": 0,
  "asm": "dup v2.2d, v2.d[0]\nfsub v0.2d, v0.2d, v2.2d\nfsub v1.2d, v1.2d, v2.2d\nret",
  "giasm": "dup v3.2d, v2.d[0]\ndup v2.2d, v2.d[0]\nfsub v0.2d, v0.2d, v3.2d\nfsub v1.2d, v1.2d, v2.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, double %bs) {\n  %i = insertelement <4 x double> poison, double %bs, i64 0\n  %b = shufflevector <4 x double> %i, <4 x double> poison, <4 x i32> zeroinitializer\n  %r = fsub <4 x double> %a, %b\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <4 x double> poison, double %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <4 x double> %i, <4 x double> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <4 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "fsub",
  "ty": "<4 x double>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fmov v2.2d, #-7.00000000\nfadd v0.2d, v0.2d, v2.2d\nfadd v1.2d, v1.2d, v2.2d\nret",
  "giasm": "fmov v2.2d, #7.00000000\nfsub v0.2d, v0.2d, v2.2d\nfsub v1.2d, v1.2d, v2.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a) {\n  %r = fsub <4 x double> %a, <double 7.0, double 7.0, double 7.0, double 7.0>\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <4 x double> %a, splat (double 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "fmul",
  "ty": "half",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcvt s1, h1\nfcvt s0, h0\nfmul s0, s0, s1\nfcvt h0, s0\nret",
  "giasm": "fcvt s0, h0\nfcvt s1, h1\nfmul s0, s0, s1\nfcvt h0, s0\nret",
  "ll": "define half @test(half %a, half %b) {\n  %r = fmul half %a, %b\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul half %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "fmul",
  "ty": "half",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 4,
  "gisize": 6,
  "extrasize": 0,
  "asm": "fcvt s0, h0\nfmov s1, #7.00000000\nfmul s0, s0, s1\nfcvt h0, s0\nret",
  "giasm": "mov w8, #18176                      // =0x4700\nfcvt s0, h0\nfmov s1, w8\nfcvt s1, h1\nfmul s0, s0, s1\nfcvt h0, s0\nret",
  "ll": "define half @test(half %a) {\n  %r = fmul half %a, 7.0\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul half %a, 0xH4700\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "fmul",
  "ty": "float",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmul s0, s0, s1\nret",
  "giasm": "fmul s0, s0, s1\nret",
  "ll": "define float @test(float %a, float %b) {\n  %r = fmul float %a, %b\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul float %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "fmul",
  "ty": "float",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov s1, #7.00000000\nfmul s0, s0, s1\nret",
  "giasm": "fmov s1, #7.00000000\nfmul s0, s0, s1\nret",
  "ll": "define float @test(float %a) {\n  %r = fmul float %a, 7.0\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul float %a, 7.000000e+00\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "fmul",
  "ty": "double",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmul d0, d0, d1\nret",
  "giasm": "fmul d0, d0, d1\nret",
  "ll": "define double @test(double %a, double %b) {\n  %r = fmul double %a, %b\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul double %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "fmul",
  "ty": "double",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov d1, #7.00000000\nfmul d0, d0, d1\nret",
  "giasm": "fmov d1, #7.00000000\nfmul d0, d0, d1\nret",
  "ll": "define double @test(double %a) {\n  %r = fmul double %a, 7.0\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul double %a, 7.000000e+00\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "fmul",
  "ty": "<4 x half>",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcvtl v1.4s, v1.4h\nfcvtl v0.4s, v0.4h\nfmul v0.4s, v0.4s, v1.4s\nfcvtn v0.4h, v0.4s\nret",
  "giasm": "fcvtl v0.4s, v0.4h\nfcvtl v1.4s, v1.4h\nfmul v0.4s, v0.4s, v1.4s\nfcvtn v0.4h, v0.4s\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, <4 x half> %b) {\n  %r = fmul <4 x half> %a, %b\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <4 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "fmul",
  "ty": "<4 x half>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 5,
  "gisize": 6,
  "extrasize": 0,
  "asm": "fcvtl v0.4s, v0.4h\nadrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfmul v0.4s, v0.4s, v1.4s\nfcvtn v0.4h, v0.4s\nret",
  "giasm": "adrp x8, .LCPI0_0\nfcvtl v0.4s, v0.4h\nldr d1, [x8, :lo12:.LCPI0_0]\nfcvtl v1.4s, v1.4h\nfmul v0.4s, v0.4s, v1.4s\nfcvtn v0.4h, v0.4s\nret",
  "ll": "define <4 x half> @test(<4 x half> %a) {\n  %r = fmul <4 x half> %a, <half 7.0, half 6.0, half 7.0, half 6.0>\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <4 x half> %a, <half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600>\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "fmul",
  "ty": "<4 x half>",
  "variant": "binopsplat",
  "codesize": 2,
  "thru": 3,
  "lat": 4,
  "sizelat": 2,
  "size": 5,
  "gisize": 5,
  "extrasize": 0,
  "asm": "fcvtl v0.4s, v0.4h\ndup v1.4h, v1.h[0]\nfcvtl v1.4s, v1.4h\nfmul v0.4s, v0.4s, v1.4s\nfcvtn v0.4h, v0.4s\nret",
  "giasm": "fcvtl v0.4s, v0.4h\ndup v1.4h, v1.h[0]\nfcvtl v1.4s, v1.4h\nfmul v0.4s, v0.4s, v1.4s\nfcvtn v0.4h, v0.4s\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, half %bs) {\n  %i = insertelement <4 x half> poison, half %bs, i64 0\n  %b = shufflevector <4 x half> %i, <4 x half> poison, <4 x i32> zeroinitializer\n  %r = fmul <4 x half> %a, %b\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <4 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <4 x half> %i, <4 x half> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <4 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "fmul",
  "ty": "<4 x half>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 4,
  "gisize": 5,
  "extrasize": 0,
  "asm": "fmov v1.4s, #7.00000000\nfcvtl v0.4s, v0.4h\nfmul v0.4s, v0.4s, v1.4s\nfcvtn v0.4h, v0.4s\nret",
  "giasm": "movi v1.4h, #71, lsl #8\nfcvtl v0.4s, v0.4h\nfcvtl v1.4s, v1.4h\nfmul v0.4s, v0.4s, v1.4s\nfcvtn v0.4h, v0.4s\nret",
  "ll": "define <4 x half> @test(<4 x half> %a) {\n  %r = fmul <4 x half> %a, <half 7.0, half 7.0, half 7.0, half 7.0>\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <4 x half> %a, splat (half 0xH4700)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "fmul",
  "ty": "<8 x half>",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 8,
  "gisize": 8,
  "extrasize": 0,
  "asm": "fcvtl v2.4s, v1.4h\nfcvtl v3.4s, v0.4h\nfcvtl2 v1.4s, v1.8h\nfcvtl2 v0.4s, v0.8h\nfmul v2.4s, v3.4s, v2.4s\nfmul v1.4s, v0.4s, v1.4s\nfcvtn v0.4h, v2.4s\nfcvtn2 v0.8h, v1.4s\nret",
  "giasm": "fcvtl v2.4s, v0.4h\nfcvtl v3.4s, v1.4h\nfcvtl2 v0.4s, v0.8h\nfcvtl2 v1.4s, v1.8h\nfmul v2.4s, v2.4s, v3.4s\nfmul v1.4s, v0.4s, v1.4s\nfcvtn v0.4h, v2.4s\nfcvtn2 v0.8h, v1.4s\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, <8 x half> %b) {\n  %r = fmul <8 x half> %a, %b\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <8 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "fmul",
  "ty": "<8 x half>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 10,
  "gisize": 9,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nfcvtl v2.4s, v0.4h\nfcvtl2 v0.4s, v0.8h\nldr q1, [x8, :lo12:.LCPI0_0]\nfcvtl v3.4s, v1.4h\nfcvtl2 v1.4s, v1.8h\nfmul v2.4s, v2.4s, v3.4s\nfmul v1.4s, v0.4s, v1.4s\nfcvtn v0.4h, v2.4s\nfcvtn2 v0.8h, v1.4s\nret",
  "giasm": "adrp x8, .LCPI0_0\nfcvtl v2.4s, v0.4h\nfcvtl2 v0.4s, v0.8h\nldr d1, [x8, :lo12:.LCPI0_0]\nfcvtl v1.4s, v1.4h\nfmul v2.4s, v2.4s, v1.4s\nfmul v1.4s, v0.4s, v1.4s\nfcvtn v0.4h, v2.4s\nfcvtn2 v0.8h, v1.4s\nret",
  "ll": "define <8 x half> @test(<8 x half> %a) {\n  %r = fmul <8 x half> %a, <half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0>\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <8 x half> %a, <half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600>\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "fmul",
  "ty": "<8 x half>",
  "variant": "binopsplat",
  "codesize": 2,
  "thru": 3,
  "lat": 4,
  "sizelat": 2,
  "size": 9,
  "gisize": 9,
  "extrasize": 0,
  "asm": "fcvtl v3.4s, v0.4h\nfcvtl2 v0.4s, v0.8h\ndup v1.8h, v1.h[0]\nfcvtl v2.4s, v1.4h\nfcvtl2 v1.4s, v1.8h\nfmul v2.4s, v3.4s, v2.4s\nfmul v1.4s, v0.4s, v1.4s\nfcvtn v0.4h, v2.4s\nfcvtn2 v0.8h, v1.4s\nret",
  "giasm": "fcvtl v2.4s, v0.4h\nfcvtl2 v0.4s, v0.8h\ndup v1.8h, v1.h[0]\nfcvtl v3.4s, v1.4h\nfcvtl2 v1.4s, v1.8h\nfmul v2.4s, v2.4s, v3.4s\nfmul v1.4s, v0.4s, v1.4s\nfcvtn v0.4h, v2.4s\nfcvtn2 v0.8h, v1.4s\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, half %bs) {\n  %i = insertelement <8 x half> poison, half %bs, i64 0\n  %b = shufflevector <8 x half> %i, <8 x half> poison, <8 x i32> zeroinitializer\n  %r = fmul <8 x half> %a, %b\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <8 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <8 x half> %i, <8 x half> poison, <8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <8 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "fmul",
  "ty": "<8 x half>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 9,
  "gisize": 8,
  "extrasize": 0,
  "asm": "movi v1.8h, #71, lsl #8\nfcvtl v2.4s, v0.4h\nfcvtl2 v0.4s, v0.8h\nfcvtl v3.4s, v1.4h\nfcvtl2 v1.4s, v1.8h\nfmul v2.4s, v2.4s, v3.4s\nfmul v1.4s, v0.4s, v1.4s\nfcvtn v0.4h, v2.4s\nfcvtn2 v0.8h, v1.4s\nret",
  "giasm": "movi v1.4h, #71, lsl #8\nfcvtl v2.4s, v0.4h\nfcvtl2 v0.4s, v0.8h\nfcvtl v1.4s, v1.4h\nfmul v2.4s, v2.4s, v1.4s\nfmul v1.4s, v0.4s, v1.4s\nfcvtn v0.4h, v2.4s\nfcvtn2 v0.8h, v1.4s\nret",
  "ll": "define <8 x half> @test(<8 x half> %a) {\n  %r = fmul <8 x half> %a, <half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0>\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <8 x half> %a, splat (half 0xH4700)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "fmul",
  "ty": "<16 x half>",
  "variant": "binop",
  "codesize": 1,
  "thru": 4,
  "lat": 3,
  "sizelat": 1,
  "size": 16,
  "gisize": 16,
  "extrasize": 0,
  "asm": "fcvtl v4.4s, v2.4h\nfcvtl v5.4s, v0.4h\nfcvtl v6.4s, v3.4h\nfcvtl v7.4s, v1.4h\nfcvtl2 v2.4s, v2.8h\nfcvtl2 v0.4s, v0.8h\nfcvtl2 v3.4s, v3.8h\nfcvtl2 v1.4s, v1.8h\nfmul v4.4s, v5.4s, v4.4s\nfmul v5.4s, v7.4s, v6.4s\nfmul v2.4s, v0.4s, v2.4s\nfmul v3.4s, v1.4s, v3.4s\nfcvtn v0.4h, v4.4s\nfcvtn v1.4h, v5.4s\nfcvtn2 v0.8h, v2.4s\nfcvtn2 v1.8h, v3.4s\nret",
  "giasm": "fcvtl v4.4s, v0.4h\nfcvtl v5.4s, v1.4h\nfcvtl v6.4s, v2.4h\nfcvtl v7.4s, v3.4h\nfcvtl2 v0.4s, v0.8h\nfcvtl2 v1.4s, v1.8h\nfcvtl2 v2.4s, v2.8h\nfcvtl2 v3.4s, v3.8h\nfmul v4.4s, v4.4s, v6.4s\nfmul v5.4s, v5.4s, v7.4s\nfmul v2.4s, v0.4s, v2.4s\nfmul v3.4s, v1.4s, v3.4s\nfcvtn v0.4h, v4.4s\nfcvtn v1.4h, v5.4s\nfcvtn2 v0.8h, v2.4s\nfcvtn2 v1.8h, v3.4s\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, <16 x half> %b) {\n  %r = fmul <16 x half> %a, %b\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <16 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "fmul",
  "ty": "<16 x half>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 4,
  "lat": 3,
  "sizelat": 1,
  "size": 16,
  "gisize": 15,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nfcvtl v3.4s, v0.4h\nfcvtl v5.4s, v1.4h\nldr q2, [x8, :lo12:.LCPI0_0]\nfcvtl2 v0.4s, v0.8h\nfcvtl2 v1.4s, v1.8h\nfcvtl v4.4s, v2.4h\nfcvtl2 v2.4s, v2.8h\nfmul v3.4s, v3.4s, v4.4s\nfmul v4.4s, v5.4s, v4.4s\nfmul v5.4s, v0.4s, v2.4s\nfmul v2.4s, v1.4s, v2.4s\nfcvtn v0.4h, v3.4s\nfcvtn v1.4h, v4.4s\nfcvtn2 v0.8h, v5.4s\nfcvtn2 v1.8h, v2.4s\nret",
  "giasm": "adrp x8, .LCPI0_0\nfcvtl v3.4s, v0.4h\nfcvtl v4.4s, v1.4h\nldr d2, [x8, :lo12:.LCPI0_0]\nfcvtl2 v0.4s, v0.8h\nfcvtl2 v1.4s, v1.8h\nfcvtl v2.4s, v2.4h\nfmul v3.4s, v3.4s, v2.4s\nfmul v4.4s, v4.4s, v2.4s\nfmul v5.4s, v0.4s, v2.4s\nfmul v2.4s, v1.4s, v2.4s\nfcvtn v0.4h, v3.4s\nfcvtn v1.4h, v4.4s\nfcvtn2 v0.8h, v5.4s\nfcvtn2 v1.8h, v2.4s\nret",
  "ll": "define <16 x half> @test(<16 x half> %a) {\n  %r = fmul <16 x half> %a, <half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0>\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <16 x half> %a, <half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600>\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "fmul",
  "ty": "<16 x half>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 6,
  "lat": 5,
  "sizelat": 3,
  "size": 15,
  "gisize": 18,
  "extrasize": 0,
  "asm": "fcvtl v4.4s, v0.4h\nfcvtl v5.4s, v1.4h\nfcvtl2 v0.4s, v0.8h\ndup v2.8h, v2.h[0]\nfcvtl2 v1.4s, v1.8h\nfcvtl v3.4s, v2.4h\nfcvtl2 v2.4s, v2.8h\nfmul v4.4s, v4.4s, v3.4s\nfmul v3.4s, v5.4s, v3.4s\nfmul v5.4s, v0.4s, v2.4s\nfmul v2.4s, v1.4s, v2.4s\nfcvtn v0.4h, v4.4s\nfcvtn v1.4h, v3.4s\nfcvtn2 v0.8h, v5.4s\nfcvtn2 v1.8h, v2.4s\nret",
  "giasm": "dup v3.8h, v2.h[0]\nfcvtl v4.4s, v0.4h\nfcvtl v5.4s, v1.4h\ndup v2.8h, v2.h[0]\nfcvtl2 v0.4s, v0.8h\nfcvtl2 v1.4s, v1.8h\nfcvtl v6.4s, v3.4h\nfcvtl2 v3.4s, v3.8h\nfcvtl v7.4s, v2.4h\nfcvtl2 v2.4s, v2.8h\nfmul v4.4s, v4.4s, v6.4s\nfmul v3.4s, v0.4s, v3.4s\nfmul v5.4s, v5.4s, v7.4s\nfmul v2.4s, v1.4s, v2.4s\nfcvtn v0.4h, v4.4s\nfcvtn v1.4h, v5.4s\nfcvtn2 v0.8h, v3.4s\nfcvtn2 v1.8h, v2.4s\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, half %bs) {\n  %i = insertelement <16 x half> poison, half %bs, i64 0\n  %b = shufflevector <16 x half> %i, <16 x half> poison, <16 x i32> zeroinitializer\n  %r = fmul <16 x half> %a, %b\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <16 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <16 x half> %i, <16 x half> poison, <16 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <16 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "fmul",
  "ty": "<16 x half>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 4,
  "lat": 3,
  "sizelat": 1,
  "size": 15,
  "gisize": 14,
  "extrasize": 0,
  "asm": "movi v2.8h, #71, lsl #8\nfcvtl v3.4s, v0.4h\nfcvtl v5.4s, v1.4h\nfcvtl2 v0.4s, v0.8h\nfcvtl2 v1.4s, v1.8h\nfcvtl v4.4s, v2.4h\nfcvtl2 v2.4s, v2.8h\nfmul v3.4s, v3.4s, v4.4s\nfmul v4.4s, v5.4s, v4.4s\nfmul v5.4s, v0.4s, v2.4s\nfmul v2.4s, v1.4s, v2.4s\nfcvtn v0.4h, v3.4s\nfcvtn v1.4h, v4.4s\nfcvtn2 v0.8h, v5.4s\nfcvtn2 v1.8h, v2.4s\nret",
  "giasm": "movi v2.4h, #71, lsl #8\nfcvtl v3.4s, v0.4h\nfcvtl v4.4s, v1.4h\nfcvtl2 v0.4s, v0.8h\nfcvtl2 v1.4s, v1.8h\nfcvtl v2.4s, v2.4h\nfmul v3.4s, v3.4s, v2.4s\nfmul v4.4s, v4.4s, v2.4s\nfmul v5.4s, v0.4s, v2.4s\nfmul v2.4s, v1.4s, v2.4s\nfcvtn v0.4h, v3.4s\nfcvtn v1.4h, v4.4s\nfcvtn2 v0.8h, v5.4s\nfcvtn2 v1.8h, v2.4s\nret",
  "ll": "define <16 x half> @test(<16 x half> %a) {\n  %r = fmul <16 x half> %a, <half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0>\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <16 x half> %a, splat (half 0xH4700)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "fmul",
  "ty": "<2 x float>",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmul v0.2s, v0.2s, v1.2s\nret",
  "giasm": "fmul v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, <2 x float> %b) {\n  %r = fmul <2 x float> %a, %b\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <2 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "fmul",
  "ty": "<2 x float>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr d1, [x8, :lo12:.LCPI0_0]\nfmul v0.2s, v0.2s, v1.2s\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr d1, [x8, :lo12:.LCPI0_0]\nfmul v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a) {\n  %r = fmul <2 x float> %a, <float 7.0, float 6.0>\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <2 x float> %a, <float 7.000000e+00, float 6.000000e+00>\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "fmul",
  "ty": "<2 x float>",
  "variant": "binopsplat",
  "codesize": 2,
  "thru": 3,
  "lat": 4,
  "sizelat": 2,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmul v0.2s, v0.2s, v1.s[0]\nret",
  "giasm": "fmul v0.2s, v0.2s, v1.s[0]\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, float %bs) {\n  %i = insertelement <2 x float> poison, float %bs, i64 0\n  %b = shufflevector <2 x float> %i, <2 x float> poison, <2 x i32> zeroinitializer\n  %r = fmul <2 x float> %a, %b\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <2 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <2 x float> %i, <2 x float> poison, <2 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <2 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "fmul",
  "ty": "<2 x float>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov v1.2s, #7.00000000\nfmul v0.2s, v0.2s, v1.2s\nret",
  "giasm": "fmov s1, #7.00000000\nfmul v0.2s, v0.2s, v1.s[0]\nret",
  "ll": "define <2 x float> @test(<2 x float> %a) {\n  %r = fmul <2 x float> %a, <float 7.0, float 7.0>\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <2 x float> %a, splat (float 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "fmul",
  "ty": "<4 x float>",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmul v0.4s, v0.4s, v1.4s\nret",
  "giasm": "fmul v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, <4 x float> %b) {\n  %r = fmul <4 x float> %a, %b\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <4 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "fmul",
  "ty": "<4 x float>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfmul v0.4s, v0.4s, v1.4s\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfmul v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a) {\n  %r = fmul <4 x float> %a, <float 7.0, float 6.0, float 7.0, float 6.0>\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <4 x float> %a, <float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00>\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "fmul",
  "ty": "<4 x float>",
  "variant": "binopsplat",
  "codesize": 2,
  "thru": 3,
  "lat": 4,
  "sizelat": 2,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmul v0.4s, v0.4s, v1.s[0]\nret",
  "giasm": "fmul v0.4s, v0.4s, v1.s[0]\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, float %bs) {\n  %i = insertelement <4 x float> poison, float %bs, i64 0\n  %b = shufflevector <4 x float> %i, <4 x float> poison, <4 x i32> zeroinitializer\n  %r = fmul <4 x float> %a, %b\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <4 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <4 x float> %i, <4 x float> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <4 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "fmul",
  "ty": "<4 x float>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov v1.4s, #7.00000000\nfmul v0.4s, v0.4s, v1.4s\nret",
  "giasm": "fmov s1, #7.00000000\nfmul v0.4s, v0.4s, v1.s[0]\nret",
  "ll": "define <4 x float> @test(<4 x float> %a) {\n  %r = fmul <4 x float> %a, <float 7.0, float 7.0, float 7.0, float 7.0>\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <4 x float> %a, splat (float 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "fmul",
  "ty": "<8 x float>",
  "variant": "binop",
  "codesize": 1,
  "thru": 4,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmul v1.4s, v1.4s, v3.4s\nfmul v0.4s, v0.4s, v2.4s\nret",
  "giasm": "fmul v0.4s, v0.4s, v2.4s\nfmul v1.4s, v1.4s, v3.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, <8 x float> %b) {\n  %r = fmul <8 x float> %a, %b\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <8 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "fmul",
  "ty": "<8 x float>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 4,
  "lat": 3,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfmul v0.4s, v0.4s, v2.4s\nfmul v1.4s, v1.4s, v2.4s\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfmul v0.4s, v0.4s, v2.4s\nfmul v1.4s, v1.4s, v2.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a) {\n  %r = fmul <8 x float> %a, <float 7.0, float 6.0, float 7.0, float 6.0, float 7.0, float 6.0, float 7.0, float 6.0>\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <8 x float> %a, <float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00>\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "fmul",
  "ty": "<8 x float>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 6,
  "lat": 5,
  "sizelat": 3,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmul v0.4s, v0.4s, v2.s[0]\nfmul v1.4s, v1.4s, v2.s[0]\nret",
  "giasm": "fmul v0.4s, v0.4s, v2.s[0]\nfmul v1.4s, v1.4s, v2.s[0]\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, float %bs) {\n  %i = insertelement <8 x float> poison, float %bs, i64 0\n  %b = shufflevector <8 x float> %i, <8 x float> poison, <8 x i32> zeroinitializer\n  %r = fmul <8 x float> %a, %b\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <8 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <8 x float> %i, <8 x float> poison, <8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <8 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "fmul",
  "ty": "<8 x float>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 4,
  "lat": 3,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fmov v2.4s, #7.00000000\nfmul v0.4s, v0.4s, v2.4s\nfmul v1.4s, v1.4s, v2.4s\nret",
  "giasm": "fmov s2, #7.00000000\nfmul v0.4s, v0.4s, v2.s[0]\nfmul v1.4s, v1.4s, v2.s[0]\nret",
  "ll": "define <8 x float> @test(<8 x float> %a) {\n  %r = fmul <8 x float> %a, <float 7.0, float 7.0, float 7.0, float 7.0, float 7.0, float 7.0, float 7.0, float 7.0>\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <8 x float> %a, splat (float 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "fmul",
  "ty": "<2 x double>",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmul v0.2d, v0.2d, v1.2d\nret",
  "giasm": "fmul v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, <2 x double> %b) {\n  %r = fmul <2 x double> %a, %b\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <2 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "fmul",
  "ty": "<2 x double>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfmul v0.2d, v0.2d, v1.2d\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfmul v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a) {\n  %r = fmul <2 x double> %a, <double 7.0, double 6.0>\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <2 x double> %a, <double 7.000000e+00, double 6.000000e+00>\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "fmul",
  "ty": "<2 x double>",
  "variant": "binopsplat",
  "codesize": 2,
  "thru": 3,
  "lat": 4,
  "sizelat": 2,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmul v0.2d, v0.2d, v1.d[0]\nret",
  "giasm": "fmul v0.2d, v0.2d, v1.d[0]\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, double %bs) {\n  %i = insertelement <2 x double> poison, double %bs, i64 0\n  %b = shufflevector <2 x double> %i, <2 x double> poison, <2 x i32> zeroinitializer\n  %r = fmul <2 x double> %a, %b\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <2 x double> poison, double %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <2 x double> %i, <2 x double> poison, <2 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <2 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "fmul",
  "ty": "<2 x double>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov v1.2d, #7.00000000\nfmul v0.2d, v0.2d, v1.2d\nret",
  "giasm": "fmov d1, #7.00000000\nfmul v0.2d, v0.2d, v1.d[0]\nret",
  "ll": "define <2 x double> @test(<2 x double> %a) {\n  %r = fmul <2 x double> %a, <double 7.0, double 7.0>\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <2 x double> %a, splat (double 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "fmul",
  "ty": "<4 x double>",
  "variant": "binop",
  "codesize": 1,
  "thru": 4,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmul v1.2d, v1.2d, v3.2d\nfmul v0.2d, v0.2d, v2.2d\nret",
  "giasm": "fmul v0.2d, v0.2d, v2.2d\nfmul v1.2d, v1.2d, v3.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, <4 x double> %b) {\n  %r = fmul <4 x double> %a, %b\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <4 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "fmul",
  "ty": "<4 x double>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 4,
  "lat": 3,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfmul v0.2d, v0.2d, v2.2d\nfmul v1.2d, v1.2d, v2.2d\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfmul v0.2d, v0.2d, v2.2d\nfmul v1.2d, v1.2d, v2.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a) {\n  %r = fmul <4 x double> %a, <double 7.0, double 6.0, double 7.0, double 6.0>\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <4 x double> %a, <double 7.000000e+00, double 6.000000e+00, double 7.000000e+00, double 6.000000e+00>\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "fmul",
  "ty": "<4 x double>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 6,
  "lat": 5,
  "sizelat": 3,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmul v0.2d, v0.2d, v2.d[0]\nfmul v1.2d, v1.2d, v2.d[0]\nret",
  "giasm": "fmul v0.2d, v0.2d, v2.d[0]\nfmul v1.2d, v1.2d, v2.d[0]\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, double %bs) {\n  %i = insertelement <4 x double> poison, double %bs, i64 0\n  %b = shufflevector <4 x double> %i, <4 x double> poison, <4 x i32> zeroinitializer\n  %r = fmul <4 x double> %a, %b\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <4 x double> poison, double %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <4 x double> %i, <4 x double> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <4 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "fmul",
  "ty": "<4 x double>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 4,
  "lat": 3,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fmov v2.2d, #7.00000000\nfmul v0.2d, v0.2d, v2.2d\nfmul v1.2d, v1.2d, v2.2d\nret",
  "giasm": "fmov d2, #7.00000000\nfmul v0.2d, v0.2d, v2.d[0]\nfmul v1.2d, v1.2d, v2.d[0]\nret",
  "ll": "define <4 x double> @test(<4 x double> %a) {\n  %r = fmul <4 x double> %a, <double 7.0, double 7.0, double 7.0, double 7.0>\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <4 x double> %a, splat (double 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "fdiv",
  "ty": "half",
  "variant": "binop",
  "codesize": 4,
  "thru": 2,
  "lat": 4,
  "sizelat": 4,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcvt s1, h1\nfcvt s0, h0\nfdiv s0, s0, s1\nfcvt h0, s0\nret",
  "giasm": "fcvt s0, h0\nfcvt s1, h1\nfdiv s0, s0, s1\nfcvt h0, s0\nret",
  "ll": "define half @test(half %a, half %b) {\n  %r = fdiv half %a, %b\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv half %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "fdiv",
  "ty": "half",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 2,
  "lat": 4,
  "sizelat": 4,
  "size": 4,
  "gisize": 6,
  "extrasize": 0,
  "asm": "fcvt s0, h0\nfmov s1, #7.00000000\nfdiv s0, s0, s1\nfcvt h0, s0\nret",
  "giasm": "mov w8, #18176                      // =0x4700\nfcvt s0, h0\nfmov s1, w8\nfcvt s1, h1\nfdiv s0, s0, s1\nfcvt h0, s0\nret",
  "ll": "define half @test(half %a) {\n  %r = fdiv half %a, 7.0\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv half %a, 0xH4700\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "fdiv",
  "ty": "float",
  "variant": "binop",
  "codesize": 4,
  "thru": 2,
  "lat": 4,
  "sizelat": 4,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fdiv s0, s0, s1\nret",
  "giasm": "fdiv s0, s0, s1\nret",
  "ll": "define float @test(float %a, float %b) {\n  %r = fdiv float %a, %b\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv float %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "fdiv",
  "ty": "float",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 2,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov s1, #7.00000000\nfdiv s0, s0, s1\nret",
  "giasm": "fmov s1, #7.00000000\nfdiv s0, s0, s1\nret",
  "ll": "define float @test(float %a) {\n  %r = fdiv float %a, 7.0\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv float %a, 7.000000e+00\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "fdiv",
  "ty": "double",
  "variant": "binop",
  "codesize": 4,
  "thru": 2,
  "lat": 4,
  "sizelat": 4,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fdiv d0, d0, d1\nret",
  "giasm": "fdiv d0, d0, d1\nret",
  "ll": "define double @test(double %a, double %b) {\n  %r = fdiv double %a, %b\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv double %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "fdiv",
  "ty": "double",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 2,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov d1, #7.00000000\nfdiv d0, d0, d1\nret",
  "giasm": "fmov d1, #7.00000000\nfdiv d0, d0, d1\nret",
  "ll": "define double @test(double %a) {\n  %r = fdiv double %a, 7.0\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv double %a, 7.000000e+00\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "fdiv",
  "ty": "<4 x half>",
  "variant": "binop",
  "codesize": 4,
  "thru": 2,
  "lat": 4,
  "sizelat": 4,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcvtl v1.4s, v1.4h\nfcvtl v0.4s, v0.4h\nfdiv v0.4s, v0.4s, v1.4s\nfcvtn v0.4h, v0.4s\nret",
  "giasm": "fcvtl v0.4s, v0.4h\nfcvtl v1.4s, v1.4h\nfdiv v0.4s, v0.4s, v1.4s\nfcvtn v0.4h, v0.4s\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, <4 x half> %b) {\n  %r = fdiv <4 x half> %a, %b\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <4 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<4 x half>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 2,
  "lat": 4,
  "sizelat": 4,
  "size": 5,
  "gisize": 6,
  "extrasize": 0,
  "asm": "fcvtl v0.4s, v0.4h\nadrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfdiv v0.4s, v0.4s, v1.4s\nfcvtn v0.4h, v0.4s\nret",
  "giasm": "adrp x8, .LCPI0_0\nfcvtl v0.4s, v0.4h\nldr d1, [x8, :lo12:.LCPI0_0]\nfcvtl v1.4s, v1.4h\nfdiv v0.4s, v0.4s, v1.4s\nfcvtn v0.4h, v0.4s\nret",
  "ll": "define <4 x half> @test(<4 x half> %a) {\n  %r = fdiv <4 x half> %a, <half 7.0, half 6.0, half 7.0, half 6.0>\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <4 x half> %a, <half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600>\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<4 x half>",
  "variant": "binopsplat",
  "codesize": 5,
  "thru": 3,
  "lat": 5,
  "sizelat": 5,
  "size": 5,
  "gisize": 5,
  "extrasize": 0,
  "asm": "fcvtl v0.4s, v0.4h\ndup v1.4h, v1.h[0]\nfcvtl v1.4s, v1.4h\nfdiv v0.4s, v0.4s, v1.4s\nfcvtn v0.4h, v0.4s\nret",
  "giasm": "fcvtl v0.4s, v0.4h\ndup v1.4h, v1.h[0]\nfcvtl v1.4s, v1.4h\nfdiv v0.4s, v0.4s, v1.4s\nfcvtn v0.4h, v0.4s\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, half %bs) {\n  %i = insertelement <4 x half> poison, half %bs, i64 0\n  %b = shufflevector <4 x half> %i, <4 x half> poison, <4 x i32> zeroinitializer\n  %r = fdiv <4 x half> %a, %b\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <4 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <4 x half> %i, <4 x half> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <4 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<4 x half>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 2,
  "lat": 4,
  "sizelat": 4,
  "size": 4,
  "gisize": 5,
  "extrasize": 0,
  "asm": "fmov v1.4s, #7.00000000\nfcvtl v0.4s, v0.4h\nfdiv v0.4s, v0.4s, v1.4s\nfcvtn v0.4h, v0.4s\nret",
  "giasm": "movi v1.4h, #71, lsl #8\nfcvtl v0.4s, v0.4h\nfcvtl v1.4s, v1.4h\nfdiv v0.4s, v0.4s, v1.4s\nfcvtn v0.4h, v0.4s\nret",
  "ll": "define <4 x half> @test(<4 x half> %a) {\n  %r = fdiv <4 x half> %a, <half 7.0, half 7.0, half 7.0, half 7.0>\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <4 x half> %a, splat (half 0xH4700)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<8 x half>",
  "variant": "binop",
  "codesize": 4,
  "thru": 2,
  "lat": 4,
  "sizelat": 4,
  "size": 8,
  "gisize": 8,
  "extrasize": 0,
  "asm": "fcvtl v2.4s, v1.4h\nfcvtl v3.4s, v0.4h\nfcvtl2 v1.4s, v1.8h\nfcvtl2 v0.4s, v0.8h\nfdiv v2.4s, v3.4s, v2.4s\nfdiv v1.4s, v0.4s, v1.4s\nfcvtn v0.4h, v2.4s\nfcvtn2 v0.8h, v1.4s\nret",
  "giasm": "fcvtl v2.4s, v0.4h\nfcvtl v3.4s, v1.4h\nfcvtl2 v0.4s, v0.8h\nfcvtl2 v1.4s, v1.8h\nfdiv v2.4s, v2.4s, v3.4s\nfdiv v1.4s, v0.4s, v1.4s\nfcvtn v0.4h, v2.4s\nfcvtn2 v0.8h, v1.4s\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, <8 x half> %b) {\n  %r = fdiv <8 x half> %a, %b\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <8 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<8 x half>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 2,
  "lat": 4,
  "sizelat": 4,
  "size": 10,
  "gisize": 9,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nfcvtl v2.4s, v0.4h\nfcvtl2 v0.4s, v0.8h\nldr q1, [x8, :lo12:.LCPI0_0]\nfcvtl v3.4s, v1.4h\nfcvtl2 v1.4s, v1.8h\nfdiv v2.4s, v2.4s, v3.4s\nfdiv v1.4s, v0.4s, v1.4s\nfcvtn v0.4h, v2.4s\nfcvtn2 v0.8h, v1.4s\nret",
  "giasm": "adrp x8, .LCPI0_0\nfcvtl v2.4s, v0.4h\nfcvtl2 v0.4s, v0.8h\nldr d1, [x8, :lo12:.LCPI0_0]\nfcvtl v1.4s, v1.4h\nfdiv v2.4s, v2.4s, v1.4s\nfdiv v1.4s, v0.4s, v1.4s\nfcvtn v0.4h, v2.4s\nfcvtn2 v0.8h, v1.4s\nret",
  "ll": "define <8 x half> @test(<8 x half> %a) {\n  %r = fdiv <8 x half> %a, <half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0>\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <8 x half> %a, <half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600>\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<8 x half>",
  "variant": "binopsplat",
  "codesize": 5,
  "thru": 3,
  "lat": 5,
  "sizelat": 5,
  "size": 9,
  "gisize": 9,
  "extrasize": 0,
  "asm": "fcvtl v2.4s, v0.4h\nfcvtl2 v0.4s, v0.8h\ndup v1.8h, v1.h[0]\nfcvtl v3.4s, v1.4h\nfcvtl2 v1.4s, v1.8h\nfdiv v2.4s, v2.4s, v3.4s\nfdiv v1.4s, v0.4s, v1.4s\nfcvtn v0.4h, v2.4s\nfcvtn2 v0.8h, v1.4s\nret",
  "giasm": "fcvtl v2.4s, v0.4h\nfcvtl2 v0.4s, v0.8h\ndup v1.8h, v1.h[0]\nfcvtl v3.4s, v1.4h\nfcvtl2 v1.4s, v1.8h\nfdiv v2.4s, v2.4s, v3.4s\nfdiv v1.4s, v0.4s, v1.4s\nfcvtn v0.4h, v2.4s\nfcvtn2 v0.8h, v1.4s\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, half %bs) {\n  %i = insertelement <8 x half> poison, half %bs, i64 0\n  %b = shufflevector <8 x half> %i, <8 x half> poison, <8 x i32> zeroinitializer\n  %r = fdiv <8 x half> %a, %b\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <8 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <8 x half> %i, <8 x half> poison, <8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <8 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<8 x half>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 2,
  "lat": 4,
  "sizelat": 4,
  "size": 9,
  "gisize": 8,
  "extrasize": 0,
  "asm": "movi v1.8h, #71, lsl #8\nfcvtl v2.4s, v0.4h\nfcvtl2 v0.4s, v0.8h\nfcvtl v3.4s, v1.4h\nfcvtl2 v1.4s, v1.8h\nfdiv v2.4s, v2.4s, v3.4s\nfdiv v1.4s, v0.4s, v1.4s\nfcvtn v0.4h, v2.4s\nfcvtn2 v0.8h, v1.4s\nret",
  "giasm": "movi v1.4h, #71, lsl #8\nfcvtl v2.4s, v0.4h\nfcvtl2 v0.4s, v0.8h\nfcvtl v1.4s, v1.4h\nfdiv v2.4s, v2.4s, v1.4s\nfdiv v1.4s, v0.4s, v1.4s\nfcvtn v0.4h, v2.4s\nfcvtn2 v0.8h, v1.4s\nret",
  "ll": "define <8 x half> @test(<8 x half> %a) {\n  %r = fdiv <8 x half> %a, <half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0>\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <8 x half> %a, splat (half 0xH4700)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<16 x half>",
  "variant": "binop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 16,
  "gisize": 16,
  "extrasize": 0,
  "asm": "fcvtl2 v4.4s, v2.8h\nfcvtl2 v5.4s, v0.8h\nfcvtl v2.4s, v2.4h\nfcvtl v0.4s, v0.4h\nfdiv v4.4s, v5.4s, v4.4s\nfcvtl v5.4s, v1.4h\nfcvtl2 v1.4s, v1.8h\nfdiv v0.4s, v0.4s, v2.4s\nfcvtl v2.4s, v3.4h\nfcvtl2 v3.4s, v3.8h\nfdiv v2.4s, v5.4s, v2.4s\nfcvtn v0.4h, v0.4s\nfcvtn2 v0.8h, v4.4s\nfdiv v3.4s, v1.4s, v3.4s\nfcvtn v1.4h, v2.4s\nfcvtn2 v1.8h, v3.4s\nret",
  "giasm": "fcvtl v4.4s, v0.4h\nfcvtl v5.4s, v2.4h\nfcvtl2 v0.4s, v0.8h\nfcvtl2 v2.4s, v2.8h\nfdiv v4.4s, v4.4s, v5.4s\nfcvtl v5.4s, v3.4h\nfdiv v2.4s, v0.4s, v2.4s\nfcvtl v0.4s, v1.4h\nfdiv v5.4s, v0.4s, v5.4s\nfcvtl2 v0.4s, v1.8h\nfcvtl2 v1.4s, v3.8h\nfdiv v3.4s, v0.4s, v1.4s\nfcvtn v0.4h, v4.4s\nfcvtn v1.4h, v5.4s\nfcvtn2 v0.8h, v2.4s\nfcvtn2 v1.8h, v3.4s\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, <16 x half> %b) {\n  %r = fdiv <16 x half> %a, %b\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <16 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<16 x half>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 16,
  "gisize": 15,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nfcvtl v3.4s, v0.4h\nfcvtl v5.4s, v1.4h\nldr q2, [x8, :lo12:.LCPI0_0]\nfcvtl2 v0.4s, v0.8h\nfcvtl v4.4s, v2.4h\nfcvtl2 v2.4s, v2.8h\nfdiv v3.4s, v3.4s, v4.4s\nfdiv v4.4s, v5.4s, v4.4s\nfdiv v5.4s, v0.4s, v2.4s\nfcvtl2 v0.4s, v1.8h\nfcvtn v1.4h, v4.4s\nfdiv v2.4s, v0.4s, v2.4s\nfcvtn v0.4h, v3.4s\nfcvtn2 v0.8h, v5.4s\nfcvtn2 v1.8h, v2.4s\nret",
  "giasm": "adrp x8, .LCPI0_0\nfcvtl v3.4s, v0.4h\nfcvtl2 v0.4s, v0.8h\nldr d2, [x8, :lo12:.LCPI0_0]\nfcvtl v2.4s, v2.4h\nfdiv v4.4s, v0.4s, v2.4s\nfcvtl v0.4s, v1.4h\nfdiv v3.4s, v3.4s, v2.4s\nfdiv v5.4s, v0.4s, v2.4s\nfcvtl2 v0.4s, v1.8h\nfdiv v2.4s, v0.4s, v2.4s\nfcvtn v0.4h, v3.4s\nfcvtn v1.4h, v5.4s\nfcvtn2 v0.8h, v4.4s\nfcvtn2 v1.8h, v2.4s\nret",
  "ll": "define <16 x half> @test(<16 x half> %a) {\n  %r = fdiv <16 x half> %a, <half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0>\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <16 x half> %a, <half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600>\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<16 x half>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 6,
  "lat": 6,
  "sizelat": 6,
  "size": 15,
  "gisize": 18,
  "extrasize": 0,
  "asm": "fcvtl v3.4s, v0.4h\nfcvtl v5.4s, v1.4h\nfcvtl2 v0.4s, v0.8h\ndup v2.8h, v2.h[0]\nfcvtl v4.4s, v2.4h\nfcvtl2 v2.4s, v2.8h\nfdiv v3.4s, v3.4s, v4.4s\nfdiv v4.4s, v5.4s, v4.4s\nfdiv v5.4s, v0.4s, v2.4s\nfcvtl2 v0.4s, v1.8h\nfcvtn v1.4h, v4.4s\nfdiv v2.4s, v0.4s, v2.4s\nfcvtn v0.4h, v3.4s\nfcvtn2 v0.8h, v5.4s\nfcvtn2 v1.8h, v2.4s\nret",
  "giasm": "dup v3.8h, v2.h[0]\nfcvtl v4.4s, v0.4h\nfcvtl2 v0.4s, v0.8h\nfcvtl v5.4s, v3.4h\nfcvtl2 v3.4s, v3.8h\nfdiv v3.4s, v0.4s, v3.4s\ndup v0.8h, v2.h[0]\nfcvtl v2.4s, v1.4h\nfcvtl2 v1.4s, v1.8h\nfdiv v4.4s, v4.4s, v5.4s\nfcvtl v5.4s, v0.4h\nfcvtl2 v0.4s, v0.8h\nfdiv v2.4s, v2.4s, v5.4s\nfdiv v5.4s, v1.4s, v0.4s\nfcvtn v0.4h, v4.4s\nfcvtn v1.4h, v2.4s\nfcvtn2 v0.8h, v3.4s\nfcvtn2 v1.8h, v5.4s\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, half %bs) {\n  %i = insertelement <16 x half> poison, half %bs, i64 0\n  %b = shufflevector <16 x half> %i, <16 x half> poison, <16 x i32> zeroinitializer\n  %r = fdiv <16 x half> %a, %b\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <16 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <16 x half> %i, <16 x half> poison, <16 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <16 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<16 x half>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 15,
  "gisize": 14,
  "extrasize": 0,
  "asm": "movi v2.8h, #71, lsl #8\nfcvtl v3.4s, v0.4h\nfcvtl v5.4s, v1.4h\nfcvtl2 v0.4s, v0.8h\nfcvtl v4.4s, v2.4h\nfcvtl2 v2.4s, v2.8h\nfdiv v3.4s, v3.4s, v4.4s\nfdiv v4.4s, v5.4s, v4.4s\nfdiv v5.4s, v0.4s, v2.4s\nfcvtl2 v0.4s, v1.8h\nfcvtn v1.4h, v4.4s\nfdiv v2.4s, v0.4s, v2.4s\nfcvtn v0.4h, v3.4s\nfcvtn2 v0.8h, v5.4s\nfcvtn2 v1.8h, v2.4s\nret",
  "giasm": "movi v2.4h, #71, lsl #8\nfcvtl v3.4s, v0.4h\nfcvtl2 v0.4s, v0.8h\nfcvtl v2.4s, v2.4h\nfdiv v4.4s, v0.4s, v2.4s\nfcvtl v0.4s, v1.4h\nfdiv v3.4s, v3.4s, v2.4s\nfdiv v5.4s, v0.4s, v2.4s\nfcvtl2 v0.4s, v1.8h\nfdiv v2.4s, v0.4s, v2.4s\nfcvtn v0.4h, v3.4s\nfcvtn v1.4h, v5.4s\nfcvtn2 v0.8h, v4.4s\nfcvtn2 v1.8h, v2.4s\nret",
  "ll": "define <16 x half> @test(<16 x half> %a) {\n  %r = fdiv <16 x half> %a, <half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0>\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <16 x half> %a, splat (half 0xH4700)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<2 x float>",
  "variant": "binop",
  "codesize": 4,
  "thru": 2,
  "lat": 4,
  "sizelat": 4,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fdiv v0.2s, v0.2s, v1.2s\nret",
  "giasm": "fdiv v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, <2 x float> %b) {\n  %r = fdiv <2 x float> %a, %b\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <2 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<2 x float>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 2,
  "lat": 4,
  "sizelat": 4,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr d1, [x8, :lo12:.LCPI0_0]\nfdiv v0.2s, v0.2s, v1.2s\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr d1, [x8, :lo12:.LCPI0_0]\nfdiv v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a) {\n  %r = fdiv <2 x float> %a, <float 7.0, float 6.0>\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <2 x float> %a, <float 7.000000e+00, float 6.000000e+00>\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<2 x float>",
  "variant": "binopsplat",
  "codesize": 5,
  "thru": 3,
  "lat": 5,
  "sizelat": 5,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "dup v1.2s, v1.s[0]\nfdiv v0.2s, v0.2s, v1.2s\nret",
  "giasm": "dup v1.2s, v1.s[0]\nfdiv v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, float %bs) {\n  %i = insertelement <2 x float> poison, float %bs, i64 0\n  %b = shufflevector <2 x float> %i, <2 x float> poison, <2 x i32> zeroinitializer\n  %r = fdiv <2 x float> %a, %b\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <2 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <2 x float> %i, <2 x float> poison, <2 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <2 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<2 x float>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 2,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov v1.2s, #7.00000000\nfdiv v0.2s, v0.2s, v1.2s\nret",
  "giasm": "fmov v1.2s, #7.00000000\nfdiv v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a) {\n  %r = fdiv <2 x float> %a, <float 7.0, float 7.0>\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <2 x float> %a, splat (float 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<4 x float>",
  "variant": "binop",
  "codesize": 4,
  "thru": 2,
  "lat": 4,
  "sizelat": 4,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fdiv v0.4s, v0.4s, v1.4s\nret",
  "giasm": "fdiv v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, <4 x float> %b) {\n  %r = fdiv <4 x float> %a, %b\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <4 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<4 x float>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 2,
  "lat": 4,
  "sizelat": 4,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfdiv v0.4s, v0.4s, v1.4s\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfdiv v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a) {\n  %r = fdiv <4 x float> %a, <float 7.0, float 6.0, float 7.0, float 6.0>\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <4 x float> %a, <float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00>\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<4 x float>",
  "variant": "binopsplat",
  "codesize": 5,
  "thru": 3,
  "lat": 5,
  "sizelat": 5,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "dup v1.4s, v1.s[0]\nfdiv v0.4s, v0.4s, v1.4s\nret",
  "giasm": "dup v1.4s, v1.s[0]\nfdiv v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, float %bs) {\n  %i = insertelement <4 x float> poison, float %bs, i64 0\n  %b = shufflevector <4 x float> %i, <4 x float> poison, <4 x i32> zeroinitializer\n  %r = fdiv <4 x float> %a, %b\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <4 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <4 x float> %i, <4 x float> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <4 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<4 x float>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 2,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov v1.4s, #7.00000000\nfdiv v0.4s, v0.4s, v1.4s\nret",
  "giasm": "fmov v1.4s, #7.00000000\nfdiv v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a) {\n  %r = fdiv <4 x float> %a, <float 7.0, float 7.0, float 7.0, float 7.0>\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <4 x float> %a, splat (float 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<8 x float>",
  "variant": "binop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fdiv v1.4s, v1.4s, v3.4s\nfdiv v0.4s, v0.4s, v2.4s\nret",
  "giasm": "fdiv v0.4s, v0.4s, v2.4s\nfdiv v1.4s, v1.4s, v3.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, <8 x float> %b) {\n  %r = fdiv <8 x float> %a, %b\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <8 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<8 x float>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfdiv v0.4s, v0.4s, v2.4s\nfdiv v1.4s, v1.4s, v2.4s\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfdiv v0.4s, v0.4s, v2.4s\nfdiv v1.4s, v1.4s, v2.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a) {\n  %r = fdiv <8 x float> %a, <float 7.0, float 6.0, float 7.0, float 6.0, float 7.0, float 6.0, float 7.0, float 6.0>\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <8 x float> %a, <float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00>\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<8 x float>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 6,
  "lat": 6,
  "sizelat": 6,
  "size": 3,
  "gisize": 4,
  "extrasize": 0,
  "asm": "dup v2.4s, v2.s[0]\nfdiv v0.4s, v0.4s, v2.4s\nfdiv v1.4s, v1.4s, v2.4s\nret",
  "giasm": "dup v3.4s, v2.s[0]\ndup v2.4s, v2.s[0]\nfdiv v0.4s, v0.4s, v3.4s\nfdiv v1.4s, v1.4s, v2.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, float %bs) {\n  %i = insertelement <8 x float> poison, float %bs, i64 0\n  %b = shufflevector <8 x float> %i, <8 x float> poison, <8 x i32> zeroinitializer\n  %r = fdiv <8 x float> %a, %b\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <8 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <8 x float> %i, <8 x float> poison, <8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <8 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<8 x float>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fmov v2.4s, #7.00000000\nfdiv v0.4s, v0.4s, v2.4s\nfdiv v1.4s, v1.4s, v2.4s\nret",
  "giasm": "fmov v2.4s, #7.00000000\nfdiv v0.4s, v0.4s, v2.4s\nfdiv v1.4s, v1.4s, v2.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a) {\n  %r = fdiv <8 x float> %a, <float 7.0, float 7.0, float 7.0, float 7.0, float 7.0, float 7.0, float 7.0, float 7.0>\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <8 x float> %a, splat (float 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<2 x double>",
  "variant": "binop",
  "codesize": 4,
  "thru": 2,
  "lat": 4,
  "sizelat": 4,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fdiv v0.2d, v0.2d, v1.2d\nret",
  "giasm": "fdiv v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, <2 x double> %b) {\n  %r = fdiv <2 x double> %a, %b\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <2 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<2 x double>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 2,
  "lat": 4,
  "sizelat": 4,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfdiv v0.2d, v0.2d, v1.2d\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfdiv v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a) {\n  %r = fdiv <2 x double> %a, <double 7.0, double 6.0>\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <2 x double> %a, <double 7.000000e+00, double 6.000000e+00>\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<2 x double>",
  "variant": "binopsplat",
  "codesize": 5,
  "thru": 3,
  "lat": 5,
  "sizelat": 5,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "dup v1.2d, v1.d[0]\nfdiv v0.2d, v0.2d, v1.2d\nret",
  "giasm": "dup v1.2d, v1.d[0]\nfdiv v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, double %bs) {\n  %i = insertelement <2 x double> poison, double %bs, i64 0\n  %b = shufflevector <2 x double> %i, <2 x double> poison, <2 x i32> zeroinitializer\n  %r = fdiv <2 x double> %a, %b\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <2 x double> poison, double %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <2 x double> %i, <2 x double> poison, <2 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <2 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<2 x double>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 2,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov v1.2d, #7.00000000\nfdiv v0.2d, v0.2d, v1.2d\nret",
  "giasm": "fmov v1.2d, #7.00000000\nfdiv v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a) {\n  %r = fdiv <2 x double> %a, <double 7.0, double 7.0>\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <2 x double> %a, splat (double 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<4 x double>",
  "variant": "binop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fdiv v1.2d, v1.2d, v3.2d\nfdiv v0.2d, v0.2d, v2.2d\nret",
  "giasm": "fdiv v0.2d, v0.2d, v2.2d\nfdiv v1.2d, v1.2d, v3.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, <4 x double> %b) {\n  %r = fdiv <4 x double> %a, %b\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <4 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<4 x double>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfdiv v0.2d, v0.2d, v2.2d\nfdiv v1.2d, v1.2d, v2.2d\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfdiv v0.2d, v0.2d, v2.2d\nfdiv v1.2d, v1.2d, v2.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a) {\n  %r = fdiv <4 x double> %a, <double 7.0, double 6.0, double 7.0, double 6.0>\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <4 x double> %a, <double 7.000000e+00, double 6.000000e+00, double 7.000000e+00, double 6.000000e+00>\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<4 x double>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 6,
  "lat": 6,
  "sizelat": 6,
  "size": 3,
  "gisize": 4,
  "extrasize": 0,
  "asm": "dup v2.2d, v2.d[0]\nfdiv v0.2d, v0.2d, v2.2d\nfdiv v1.2d, v1.2d, v2.2d\nret",
  "giasm": "dup v3.2d, v2.d[0]\ndup v2.2d, v2.d[0]\nfdiv v0.2d, v0.2d, v3.2d\nfdiv v1.2d, v1.2d, v2.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, double %bs) {\n  %i = insertelement <4 x double> poison, double %bs, i64 0\n  %b = shufflevector <4 x double> %i, <4 x double> poison, <4 x i32> zeroinitializer\n  %r = fdiv <4 x double> %a, %b\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <4 x double> poison, double %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <4 x double> %i, <4 x double> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <4 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<4 x double>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fmov v2.2d, #7.00000000\nfdiv v0.2d, v0.2d, v2.2d\nfdiv v1.2d, v1.2d, v2.2d\nret",
  "giasm": "fmov v2.2d, #7.00000000\nfdiv v0.2d, v0.2d, v2.2d\nfdiv v1.2d, v1.2d, v2.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a) {\n  %r = fdiv <4 x double> %a, <double 7.0, double 7.0, double 7.0, double 7.0>\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <4 x double> %a, splat (double 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "frem",
  "ty": "half",
  "variant": "binop",
  "codesize": 4,
  "thru": 10,
  "lat": 4,
  "sizelat": 4,
  "size": 6,
  "gisize": 6,
  "extrasize": 0,
  "asm": "str x30, [sp, #-16]!                // 8-byte Folded Spill\nfcvt s0, h0\nfcvt s1, h1\nbl fmodf\nfcvt h0, s0\nldr x30, [sp], #16                  // 8-byte Folded Reload\nret",
  "giasm": "str x30, [sp, #-16]!                // 8-byte Folded Spill\nfcvt s0, h0\nfcvt s1, h1\nbl fmodf\nfcvt h0, s0\nldr x30, [sp], #16                  // 8-byte Folded Reload\nret",
  "ll": "define half @test(half %a, half %b) {\n  %r = frem half %a, %b\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem half %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "frem",
  "ty": "half",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 10,
  "lat": 4,
  "sizelat": 4,
  "size": 6,
  "gisize": 8,
  "extrasize": 0,
  "asm": "str x30, [sp, #-16]!                // 8-byte Folded Spill\nfcvt s0, h0\nfmov s1, #7.00000000\nbl fmodf\nfcvt h0, s0\nldr x30, [sp], #16                  // 8-byte Folded Reload\nret",
  "giasm": "str x30, [sp, #-16]!                // 8-byte Folded Spill\nmov w8, #18176                      // =0x4700\nfcvt s0, h0\nfmov s1, w8\nfcvt s1, h1\nbl fmodf\nfcvt h0, s0\nldr x30, [sp], #16                  // 8-byte Folded Reload\nret",
  "ll": "define half @test(half %a) {\n  %r = frem half %a, 7.0\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem half %a, 0xH4700\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "frem",
  "ty": "float",
  "variant": "binop",
  "codesize": 4,
  "thru": 10,
  "lat": 4,
  "sizelat": 4,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "b fmodf",
  "giasm": "b fmodf",
  "ll": "define float @test(float %a, float %b) {\n  %r = frem float %a, %b\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem float %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "frem",
  "ty": "float",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 10,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov s1, #7.00000000\nb fmodf",
  "giasm": "fmov s1, #7.00000000\nb fmodf",
  "ll": "define float @test(float %a) {\n  %r = frem float %a, 7.0\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem float %a, 7.000000e+00\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "frem",
  "ty": "double",
  "variant": "binop",
  "codesize": 4,
  "thru": 10,
  "lat": 4,
  "sizelat": 4,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "b fmod",
  "giasm": "b fmod",
  "ll": "define double @test(double %a, double %b) {\n  %r = frem double %a, %b\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem double %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "frem",
  "ty": "double",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 10,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov d1, #7.00000000\nb fmod",
  "giasm": "fmov d1, #7.00000000\nb fmod",
  "ll": "define double @test(double %a) {\n  %r = frem double %a, 7.0\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem double %a, 7.000000e+00\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "frem",
  "ty": "<4 x half>",
  "variant": "binop",
  "codesize": 4,
  "thru": 52,
  "lat": 4,
  "sizelat": 4,
  "size": 42,
  "gisize": 44,
  "extrasize": 0,
  "asm": "sub sp, sp, #64\nstr x30, [sp, #48]                  // 8-byte Folded Spill\nmov h3, v0.h[1]\nmov h2, v1.h[1]\nstp q0, q1, [sp, #16]               // 32-byte Folded Spill\nfcvt s0, h3\nfcvt s1, h2\nbl fmodf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp]                        // 16-byte Folded Spill\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl fmodf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nfcvt h3, s0\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nmov h1, v1.h[2]\nmov h2, v0.h[2]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov v3.h[1], v0.h[0]\nfcvt s0, h1\nfcvt s1, h2\nstr q3, [sp]                        // 16-byte Folded Spill\nbl fmodf\nldp q1, q2, [sp, #16]               // 32-byte Folded Reload\nfcvt h0, s0\nldr q3, [sp]                        // 16-byte Folded Reload\nmov h1, v1.h[3]\nmov h2, v2.h[3]\nmov v3.h[2], v0.h[0]\nfcvt s0, h1\nfcvt s1, h2\nstr q3, [sp]                        // 16-byte Folded Spill\nbl fmodf\nfcvt h1, s0\nldr q0, [sp]                        // 16-byte Folded Reload\nldr x30, [sp, #48]                  // 8-byte Folded Reload\nmov v0.h[3], v1.h[0]\nadd sp, sp, #64\nret",
  "giasm": "sub sp, sp, #112\nstp d13, d12, [sp, #48]             // 16-byte Folded Spill\nstp d11, d10, [sp, #64]             // 16-byte Folded Spill\nstp d9, d8, [sp, #80]               // 16-byte Folded Spill\nstr x30, [sp, #96]                  // 8-byte Folded Spill\nmov h8, v0.h[1]\nmov h9, v0.h[2]\nmov h10, v0.h[3]\nmov h11, v1.h[1]\nmov h12, v1.h[2]\nmov h13, v1.h[3]\nfcvt s0, h0\nfcvt s1, h1\nbl fmodf\nfcvt s2, h8\nfcvt h0, s0\nfcvt s1, h11\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nfcvt s2, h9\nfcvt h0, s0\nfcvt s1, h12\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nfcvt s2, h10\nfcvt h0, s0\nfcvt s1, h13\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nldp q3, q2, [sp]                    // 32-byte Folded Reload\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nldp d9, d8, [sp, #80]               // 16-byte Folded Reload\nldp d11, d10, [sp, #64]             // 16-byte Folded Reload\nldr x30, [sp, #96]                  // 8-byte Folded Reload\nmov v1.h[1], v3.h[0]\nldp d13, d12, [sp, #48]             // 16-byte Folded Reload\nmov v1.h[2], v2.h[0]\nmov v1.h[3], v0.h[0]\nmov v0.16b, v1.16b\nadd sp, sp, #112\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, <4 x half> %b) {\n  %r = frem <4 x half> %a, %b\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <4 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "frem",
  "ty": "<4 x half>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 52,
  "lat": 4,
  "sizelat": 4,
  "size": 37,
  "gisize": 44,
  "extrasize": 0,
  "asm": "sub sp, sp, #48\nstr x30, [sp, #32]                  // 8-byte Folded Spill\nmov h1, v0.h[1]\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfcvt s0, h1\nfmov s1, #6.00000000\nbl fmodf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nfmov s1, #7.00000000\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nfcvt h2, s0\nmov h1, v1.h[2]\nfcvt s0, h1\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v2.h[1], v1.h[0]\nfmov s1, #7.00000000\nstr q2, [sp]                        // 16-byte Folded Spill\nbl fmodf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nfcvt h2, s0\nmov h1, v1.h[3]\nfcvt s0, h1\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v1.h[2], v2.h[0]\nstr q1, [sp]                        // 16-byte Folded Spill\nfmov s1, #6.00000000\nbl fmodf\nfcvt h1, s0\nldr q0, [sp]                        // 16-byte Folded Reload\nldr x30, [sp, #32]                  // 8-byte Folded Reload\nmov v0.h[3], v1.h[0]\nadd sp, sp, #48\nret",
  "giasm": "sub sp, sp, #112\nstr d12, [sp, #48]                  // 8-byte Folded Spill\nstp d11, d10, [sp, #64]             // 16-byte Folded Spill\nstp d9, d8, [sp, #80]               // 16-byte Folded Spill\nstp x30, x19, [sp, #96]             // 16-byte Folded Spill\nmov w8, #18176                      // =0x4700\nmov h8, v0.h[1]\nmov h9, v0.h[2]\nfmov s10, w8\nmov h11, v0.h[3]\nmov w19, #17920                     // =0x4600\nfcvt s0, h0\nfcvt s1, h10\nbl fmodf\nfcvt h0, s0\nfmov s12, w19\nfcvt s1, h12\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfcvt s0, h8\nbl fmodf\nfcvt s2, h9\nfcvt h0, s0\nfcvt s1, h10\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nfcvt s2, h11\nfcvt h0, s0\nfcvt s1, h12\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nldp q3, q2, [sp]                    // 32-byte Folded Reload\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nldp x30, x19, [sp, #96]             // 16-byte Folded Reload\nldp d9, d8, [sp, #80]               // 16-byte Folded Reload\nldr d12, [sp, #48]                  // 8-byte Folded Reload\nmov v1.h[1], v3.h[0]\nldp d11, d10, [sp, #64]             // 16-byte Folded Reload\nmov v1.h[2], v2.h[0]\nmov v1.h[3], v0.h[0]\nmov v0.16b, v1.16b\nadd sp, sp, #112\nret",
  "ll": "define <4 x half> @test(<4 x half> %a) {\n  %r = frem <4 x half> %a, <half 7.0, half 6.0, half 7.0, half 6.0>\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <4 x half> %a, <half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600>\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "frem",
  "ty": "<4 x half>",
  "variant": "binopsplat",
  "codesize": 5,
  "thru": 53,
  "lat": 5,
  "sizelat": 5,
  "size": 40,
  "gisize": 45,
  "extrasize": 0,
  "asm": "sub sp, sp, #48\nstr d8, [sp, #32]                   // 8-byte Folded Spill\nstr x30, [sp, #40]                  // 8-byte Folded Spill\nmov h2, v0.h[1]\nfcvt s8, h1\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfcvt s0, h2\nfmov s1, s8\nbl fmodf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nfcvt h0, s0\nfcvt s1, h1\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s8\nbl fmodf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nfcvt h2, s0\nmov h1, v1.h[2]\nfcvt s0, h1\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v2.h[1], v1.h[0]\nfmov s1, s8\nstr q2, [sp]                        // 16-byte Folded Spill\nbl fmodf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nfcvt h2, s0\nmov h1, v1.h[3]\nfcvt s0, h1\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v1.h[2], v2.h[0]\nstr q1, [sp]                        // 16-byte Folded Spill\nfmov s1, s8\nbl fmodf\nfcvt h1, s0\nldr q0, [sp]                        // 16-byte Folded Reload\nldr x30, [sp, #40]                  // 8-byte Folded Reload\nldr d8, [sp, #32]                   // 8-byte Folded Reload\nmov v0.h[3], v1.h[0]\nadd sp, sp, #48\nret",
  "giasm": "sub sp, sp, #112\nstp d13, d12, [sp, #48]             // 16-byte Folded Spill\nstp d11, d10, [sp, #64]             // 16-byte Folded Spill\nstp d9, d8, [sp, #80]               // 16-byte Folded Spill\nstr x30, [sp, #96]                  // 8-byte Folded Spill\nmov h8, v0.h[1]\nmov h9, v0.h[2]\nmov h10, v0.h[3]\ndup v1.4h, v1.h[0]\nfcvt s0, h0\nmov h11, v1.h[1]\nmov h12, v1.h[2]\nmov h13, v1.h[3]\nfcvt s1, h1\nbl fmodf\nfcvt s2, h8\nfcvt h0, s0\nfcvt s1, h11\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nfcvt s2, h9\nfcvt h0, s0\nfcvt s1, h12\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nfcvt s2, h10\nfcvt h0, s0\nfcvt s1, h13\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nldp q3, q2, [sp]                    // 32-byte Folded Reload\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nldp d9, d8, [sp, #80]               // 16-byte Folded Reload\nldp d11, d10, [sp, #64]             // 16-byte Folded Reload\nldr x30, [sp, #96]                  // 8-byte Folded Reload\nmov v1.h[1], v3.h[0]\nldp d13, d12, [sp, #48]             // 16-byte Folded Reload\nmov v1.h[2], v2.h[0]\nmov v1.h[3], v0.h[0]\nmov v0.16b, v1.16b\nadd sp, sp, #112\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, half %bs) {\n  %i = insertelement <4 x half> poison, half %bs, i64 0\n  %b = shufflevector <4 x half> %i, <4 x half> poison, <4 x i32> zeroinitializer\n  %r = frem <4 x half> %a, %b\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <4 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <4 x half> %i, <4 x half> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <4 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "frem",
  "ty": "<4 x half>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 52,
  "lat": 4,
  "sizelat": 4,
  "size": 37,
  "gisize": 41,
  "extrasize": 0,
  "asm": "sub sp, sp, #48\nstr x30, [sp, #32]                  // 8-byte Folded Spill\nmov h1, v0.h[1]\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfcvt s0, h1\nfmov s1, #7.00000000\nbl fmodf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nfmov s1, #7.00000000\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nfcvt h2, s0\nmov h1, v1.h[2]\nfcvt s0, h1\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v2.h[1], v1.h[0]\nfmov s1, #7.00000000\nstr q2, [sp]                        // 16-byte Folded Spill\nbl fmodf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nfcvt h2, s0\nmov h1, v1.h[3]\nfcvt s0, h1\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v1.h[2], v2.h[0]\nstr q1, [sp]                        // 16-byte Folded Spill\nfmov s1, #7.00000000\nbl fmodf\nfcvt h1, s0\nldr q0, [sp]                        // 16-byte Folded Reload\nldr x30, [sp, #32]                  // 8-byte Folded Reload\nmov v0.h[3], v1.h[0]\nadd sp, sp, #48\nret",
  "giasm": "sub sp, sp, #96\nstp d11, d10, [sp, #48]             // 16-byte Folded Spill\nstp d9, d8, [sp, #64]               // 16-byte Folded Spill\nstr x30, [sp, #80]                  // 8-byte Folded Spill\nmov w8, #18176                      // =0x4700\nmov h8, v0.h[1]\nmov h9, v0.h[2]\nfmov s10, w8\nmov h11, v0.h[3]\nfcvt s0, h0\nfcvt s1, h10\nbl fmodf\nfcvt s2, h8\nfcvt h0, s0\nfcvt s1, h10\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nfcvt s2, h9\nfcvt h0, s0\nfcvt s1, h10\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nfcvt s2, h11\nfcvt h0, s0\nfcvt s1, h10\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nldp q3, q2, [sp]                    // 32-byte Folded Reload\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nldp d9, d8, [sp, #64]               // 16-byte Folded Reload\nldp d11, d10, [sp, #48]             // 16-byte Folded Reload\nldr x30, [sp, #80]                  // 8-byte Folded Reload\nmov v1.h[1], v3.h[0]\nmov v1.h[2], v2.h[0]\nmov v1.h[3], v0.h[0]\nmov v0.16b, v1.16b\nadd sp, sp, #96\nret",
  "ll": "define <4 x half> @test(<4 x half> %a) {\n  %r = frem <4 x half> %a, <half 7.0, half 7.0, half 7.0, half 7.0>\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <4 x half> %a, splat (half 0xH4700)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "frem",
  "ty": "<8 x half>",
  "variant": "binop",
  "codesize": 4,
  "thru": 108,
  "lat": 4,
  "sizelat": 4,
  "size": 79,
  "gisize": 97,
  "extrasize": 0,
  "asm": "sub sp, sp, #64\nstr x30, [sp, #48]                  // 8-byte Folded Spill\nmov h3, v0.h[1]\nmov h2, v1.h[1]\nstp q0, q1, [sp]                    // 32-byte Folded Spill\nfcvt s0, h3\nfcvt s1, h2\nbl fmodf\nfcvt h0, s0\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldp q0, q1, [sp]                    // 32-byte Folded Reload\nfcvt s0, h0\nfcvt s1, h1\nbl fmodf\nfcvt h0, s0\nldp q1, q2, [sp, #16]               // 32-byte Folded Reload\nmov h1, v1.h[2]\nmov v0.h[1], v2.h[0]\nfcvt s1, h1\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[2]\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[2], v0.h[0]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nldp q0, q1, [sp]                    // 32-byte Folded Reload\nmov h0, v0.h[3]\nmov h1, v1.h[3]\nfcvt s0, h0\nfcvt s1, h1\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[3], v0.h[0]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nldp q0, q1, [sp]                    // 32-byte Folded Reload\nmov h0, v0.h[4]\nmov h1, v1.h[4]\nfcvt s0, h0\nfcvt s1, h1\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[4], v0.h[0]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nldp q0, q1, [sp]                    // 32-byte Folded Reload\nmov h0, v0.h[5]\nmov h1, v1.h[5]\nfcvt s0, h0\nfcvt s1, h1\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[5], v0.h[0]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nldp q0, q1, [sp]                    // 32-byte Folded Reload\nmov h0, v0.h[6]\nmov h1, v1.h[6]\nfcvt s0, h0\nfcvt s1, h1\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[6], v0.h[0]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nldp q0, q1, [sp]                    // 32-byte Folded Reload\nmov h0, v0.h[7]\nmov h1, v1.h[7]\nfcvt s0, h0\nfcvt s1, h1\nbl fmodf\nfcvt h1, s0\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nldr x30, [sp, #48]                  // 8-byte Folded Reload\nmov v0.h[7], v1.h[0]\nadd sp, sp, #64\nret",
  "giasm": "sub sp, sp, #192\nstp d15, d14, [sp, #112]            // 16-byte Folded Spill\nstp d13, d12, [sp, #128]            // 16-byte Folded Spill\nstp d11, d10, [sp, #144]            // 16-byte Folded Spill\nstp d9, d8, [sp, #160]              // 16-byte Folded Spill\nstr x30, [sp, #176]                 // 8-byte Folded Spill\nmov h2, v0.h[5]\nmov h11, v0.h[1]\nmov h12, v0.h[2]\nmov h13, v0.h[3]\nmov h14, v0.h[4]\nmov h8, v1.h[1]\nmov h9, v1.h[2]\nmov h10, v1.h[3]\nmov h15, v1.h[4]\nstr h2, [sp, #48]                   // 2-byte Folded Spill\nmov h2, v0.h[6]\nstr h2, [sp, #64]                   // 2-byte Folded Spill\nmov h2, v0.h[7]\nfcvt s0, h0\nstr h2, [sp, #96]                   // 2-byte Folded Spill\nmov h2, v1.h[5]\nstr h2, [sp, #186]                  // 2-byte Folded Spill\nmov h2, v1.h[6]\nstr h2, [sp, #188]                  // 2-byte Folded Spill\nmov h2, v1.h[7]\nfcvt s1, h1\nstr h2, [sp, #190]                  // 2-byte Folded Spill\nbl fmodf\nfcvt s2, h11\nfcvt h0, s0\nfcvt s1, h8\nstr q0, [sp, #80]                   // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nfcvt s2, h12\nfcvt h0, s0\nfcvt s1, h9\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nfcvt s2, h13\nfcvt h0, s0\nfcvt s1, h10\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nfcvt s2, h14\nfcvt h0, s0\nfcvt s1, h15\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #48]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nldr h0, [sp, #186]                  // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #64]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #64]                   // 16-byte Folded Spill\nldr h0, [sp, #188]                  // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #96]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #96]                   // 16-byte Folded Spill\nldr h0, [sp, #190]                  // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl fmodf\nldp q2, q3, [sp, #16]               // 32-byte Folded Reload\nfcvt h0, s0\nldr q1, [sp, #80]                   // 16-byte Folded Reload\nldp d9, d8, [sp, #160]              // 16-byte Folded Reload\nldp d11, d10, [sp, #144]            // 16-byte Folded Reload\nldr x30, [sp, #176]                 // 8-byte Folded Reload\nmov v1.h[1], v3.h[0]\nldp d13, d12, [sp, #128]            // 16-byte Folded Reload\nldp d15, d14, [sp, #112]            // 16-byte Folded Reload\nmov v1.h[2], v2.h[0]\nldr q2, [sp]                        // 16-byte Folded Reload\nmov v1.h[3], v2.h[0]\nldp q3, q2, [sp, #48]               // 32-byte Folded Reload\nmov v1.h[4], v3.h[0]\nmov v1.h[5], v2.h[0]\nldr q2, [sp, #96]                   // 16-byte Folded Reload\nmov v1.h[6], v2.h[0]\nmov v1.h[7], v0.h[0]\nmov v0.16b, v1.16b\nadd sp, sp, #192\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, <8 x half> %b) {\n  %r = frem <8 x half> %a, %b\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <8 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "frem",
  "ty": "<8 x half>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 108,
  "lat": 4,
  "sizelat": 4,
  "size": 72,
  "gisize": 82,
  "extrasize": 0,
  "asm": "sub sp, sp, #48\nstr x30, [sp, #32]                  // 8-byte Folded Spill\nmov h1, v0.h[1]\nstr q0, [sp]                        // 16-byte Folded Spill\nfcvt s0, h1\nfmov s1, #6.00000000\nbl fmodf\nfcvt h0, s0\nfmov s1, #7.00000000\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v0.h[1], v1.h[0]\nfmov s1, #7.00000000\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[2]\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[2], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[3]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #6.00000000\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[3], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[4]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[4], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[5]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #6.00000000\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[5], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[6]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[6], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[7]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #6.00000000\nfcvt s0, h0\nbl fmodf\nfcvt h1, s0\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nldr x30, [sp, #32]                  // 8-byte Folded Reload\nmov v0.h[7], v1.h[0]\nadd sp, sp, #48\nret",
  "giasm": "sub sp, sp, #192\nstp d15, d14, [sp, #112]            // 16-byte Folded Spill\nstp d13, d12, [sp, #128]            // 16-byte Folded Spill\nstp d11, d10, [sp, #144]            // 16-byte Folded Spill\nstp d9, d8, [sp, #160]              // 16-byte Folded Spill\nstp x30, x19, [sp, #176]            // 16-byte Folded Spill\nmov w8, #18176                      // =0x4700\nmov h1, v0.h[7]\nmov h11, v0.h[1]\nfmov s10, w8\nmov h12, v0.h[2]\nmov w19, #17920                     // =0x4600\nmov h13, v0.h[3]\nmov h14, v0.h[4]\nmov h15, v0.h[5]\nmov h9, v0.h[6]\nfcvt s0, h0\nstr h1, [sp, #96]                   // 2-byte Folded Spill\nfcvt s1, h10\nbl fmodf\nfcvt h0, s0\nfmov s8, w19\nfcvt s1, h8\nstr q0, [sp, #80]                   // 16-byte Folded Spill\nfcvt s0, h11\nbl fmodf\nfcvt s2, h12\nfcvt h0, s0\nfcvt s1, h10\nstr q0, [sp, #64]                   // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nfcvt s2, h13\nfcvt h0, s0\nfcvt s1, h8\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nfcvt s2, h14\nfcvt h0, s0\nfcvt s1, h10\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nfcvt s2, h15\nfcvt h0, s0\nfcvt s1, h8\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nfcvt s2, h9\nfcvt h0, s0\nfcvt s1, h10\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #96]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nfcvt s1, h8\nstr q0, [sp, #96]                   // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nldp q2, q1, [sp, #64]               // 32-byte Folded Reload\nfcvt h0, s0\nldp x30, x19, [sp, #176]            // 16-byte Folded Reload\nldp d9, d8, [sp, #160]              // 16-byte Folded Reload\nmov v1.h[1], v2.h[0]\nldp q2, q3, [sp, #32]               // 32-byte Folded Reload\nldp d11, d10, [sp, #144]            // 16-byte Folded Reload\nldp d13, d12, [sp, #128]            // 16-byte Folded Reload\nldp d15, d14, [sp, #112]            // 16-byte Folded Reload\nmov v1.h[2], v3.h[0]\nmov v1.h[3], v2.h[0]\nldp q2, q3, [sp]                    // 32-byte Folded Reload\nmov v1.h[4], v3.h[0]\nmov v1.h[5], v2.h[0]\nldr q2, [sp, #96]                   // 16-byte Folded Reload\nmov v1.h[6], v2.h[0]\nmov v1.h[7], v0.h[0]\nmov v0.16b, v1.16b\nadd sp, sp, #192\nret",
  "ll": "define <8 x half> @test(<8 x half> %a) {\n  %r = frem <8 x half> %a, <half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0>\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <8 x half> %a, <half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600>\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "frem",
  "ty": "<8 x half>",
  "variant": "binopsplat",
  "codesize": 5,
  "thru": 109,
  "lat": 5,
  "sizelat": 5,
  "size": 75,
  "gisize": 98,
  "extrasize": 0,
  "asm": "sub sp, sp, #48\nstr d8, [sp, #32]                   // 8-byte Folded Spill\nstr x30, [sp, #40]                  // 8-byte Folded Spill\nmov h2, v0.h[1]\nfcvt s8, h1\nstr q0, [sp]                        // 16-byte Folded Spill\nfcvt s0, h2\nfmov s1, s8\nbl fmodf\nfcvt h0, s0\nfmov s1, s8\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v0.h[1], v1.h[0]\nfmov s1, s8\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[2]\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[2], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[3]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, s8\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[3], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[4]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, s8\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[4], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[5]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, s8\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[5], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[6]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, s8\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[6], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[7]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, s8\nfcvt s0, h0\nbl fmodf\nfcvt h1, s0\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nldr x30, [sp, #40]                  // 8-byte Folded Reload\nldr d8, [sp, #32]                   // 8-byte Folded Reload\nmov v0.h[7], v1.h[0]\nadd sp, sp, #48\nret",
  "giasm": "sub sp, sp, #192\nstp d15, d14, [sp, #112]            // 16-byte Folded Spill\nstp d13, d12, [sp, #128]            // 16-byte Folded Spill\nstp d11, d10, [sp, #144]            // 16-byte Folded Spill\nstp d9, d8, [sp, #160]              // 16-byte Folded Spill\nstr x30, [sp, #176]                 // 8-byte Folded Spill\nmov h2, v0.h[5]\nmov h11, v0.h[1]\nmov h12, v0.h[2]\ndup v1.8h, v1.h[0]\nmov h13, v0.h[3]\nmov h14, v0.h[4]\nstr h2, [sp, #48]                   // 2-byte Folded Spill\nmov h2, v0.h[6]\nmov h8, v1.h[1]\nmov h9, v1.h[2]\nmov h10, v1.h[3]\nmov h15, v1.h[4]\nstr h2, [sp, #64]                   // 2-byte Folded Spill\nmov h2, v0.h[7]\nfcvt s0, h0\nstr h2, [sp, #96]                   // 2-byte Folded Spill\nmov h2, v1.h[5]\nstr h2, [sp, #186]                  // 2-byte Folded Spill\nmov h2, v1.h[6]\nstr h2, [sp, #188]                  // 2-byte Folded Spill\nmov h2, v1.h[7]\nfcvt s1, h1\nstr h2, [sp, #190]                  // 2-byte Folded Spill\nbl fmodf\nfcvt s2, h11\nfcvt h0, s0\nfcvt s1, h8\nstr q0, [sp, #80]                   // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nfcvt s2, h12\nfcvt h0, s0\nfcvt s1, h9\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nfcvt s2, h13\nfcvt h0, s0\nfcvt s1, h10\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nfcvt s2, h14\nfcvt h0, s0\nfcvt s1, h15\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #48]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nldr h0, [sp, #186]                  // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #64]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #64]                   // 16-byte Folded Spill\nldr h0, [sp, #188]                  // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #96]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #96]                   // 16-byte Folded Spill\nldr h0, [sp, #190]                  // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl fmodf\nldp q2, q3, [sp, #16]               // 32-byte Folded Reload\nfcvt h0, s0\nldr q1, [sp, #80]                   // 16-byte Folded Reload\nldp d9, d8, [sp, #160]              // 16-byte Folded Reload\nldp d11, d10, [sp, #144]            // 16-byte Folded Reload\nldr x30, [sp, #176]                 // 8-byte Folded Reload\nmov v1.h[1], v3.h[0]\nldp d13, d12, [sp, #128]            // 16-byte Folded Reload\nldp d15, d14, [sp, #112]            // 16-byte Folded Reload\nmov v1.h[2], v2.h[0]\nldr q2, [sp]                        // 16-byte Folded Reload\nmov v1.h[3], v2.h[0]\nldp q3, q2, [sp, #48]               // 32-byte Folded Reload\nmov v1.h[4], v3.h[0]\nmov v1.h[5], v2.h[0]\nldr q2, [sp, #96]                   // 16-byte Folded Reload\nmov v1.h[6], v2.h[0]\nmov v1.h[7], v0.h[0]\nmov v0.16b, v1.16b\nadd sp, sp, #192\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, half %bs) {\n  %i = insertelement <8 x half> poison, half %bs, i64 0\n  %b = shufflevector <8 x half> %i, <8 x half> poison, <8 x i32> zeroinitializer\n  %r = frem <8 x half> %a, %b\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <8 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <8 x half> %i, <8 x half> poison, <8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <8 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "frem",
  "ty": "<8 x half>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 108,
  "lat": 4,
  "sizelat": 4,
  "size": 72,
  "gisize": 79,
  "extrasize": 0,
  "asm": "sub sp, sp, #48\nstr x30, [sp, #32]                  // 8-byte Folded Spill\nmov h1, v0.h[1]\nstr q0, [sp]                        // 16-byte Folded Spill\nfcvt s0, h1\nfmov s1, #7.00000000\nbl fmodf\nfcvt h0, s0\nfmov s1, #7.00000000\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v0.h[1], v1.h[0]\nfmov s1, #7.00000000\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[2]\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[2], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[3]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[3], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[4]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[4], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[5]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[5], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[6]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[6], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[7]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl fmodf\nfcvt h1, s0\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nldr x30, [sp, #32]                  // 8-byte Folded Reload\nmov v0.h[7], v1.h[0]\nadd sp, sp, #48\nret",
  "giasm": "sub sp, sp, #192\nstp d15, d14, [sp, #112]            // 16-byte Folded Spill\nstp d13, d12, [sp, #128]            // 16-byte Folded Spill\nstp d11, d10, [sp, #144]            // 16-byte Folded Spill\nstp d9, d8, [sp, #160]              // 16-byte Folded Spill\nstr x30, [sp, #176]                 // 8-byte Folded Spill\nmov w8, #18176                      // =0x4700\nmov h10, v0.h[1]\nmov h11, v0.h[2]\nfmov s8, w8\nmov h12, v0.h[3]\nmov h13, v0.h[4]\nmov h14, v0.h[5]\nmov h15, v0.h[6]\nmov h9, v0.h[7]\nfcvt s0, h0\nfcvt s1, h8\nbl fmodf\nfcvt s2, h10\nfcvt h0, s0\nfcvt s1, h8\nstr q0, [sp, #96]                   // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nfcvt s2, h11\nfcvt h0, s0\nfcvt s1, h8\nstr q0, [sp, #80]                   // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nfcvt s2, h12\nfcvt h0, s0\nfcvt s1, h8\nstr q0, [sp, #64]                   // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nfcvt s2, h13\nfcvt h0, s0\nfcvt s1, h8\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nfcvt s2, h14\nfcvt h0, s0\nfcvt s1, h8\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nfcvt s2, h15\nfcvt h0, s0\nfcvt s1, h8\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nfcvt s2, h9\nfcvt h0, s0\nfcvt s1, h8\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nldp q2, q1, [sp, #80]               // 32-byte Folded Reload\nfcvt h0, s0\nldp d9, d8, [sp, #160]              // 16-byte Folded Reload\nldr x30, [sp, #176]                 // 8-byte Folded Reload\nldp d11, d10, [sp, #144]            // 16-byte Folded Reload\nmov v1.h[1], v2.h[0]\nldp q2, q3, [sp, #48]               // 32-byte Folded Reload\nldp d13, d12, [sp, #128]            // 16-byte Folded Reload\nldp d15, d14, [sp, #112]            // 16-byte Folded Reload\nmov v1.h[2], v3.h[0]\nmov v1.h[3], v2.h[0]\nldp q2, q3, [sp, #16]               // 32-byte Folded Reload\nmov v1.h[4], v3.h[0]\nmov v1.h[5], v2.h[0]\nldr q2, [sp]                        // 16-byte Folded Reload\nmov v1.h[6], v2.h[0]\nmov v1.h[7], v0.h[0]\nmov v0.16b, v1.16b\nadd sp, sp, #192\nret",
  "ll": "define <8 x half> @test(<8 x half> %a) {\n  %r = frem <8 x half> %a, <half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0>\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <8 x half> %a, splat (half 0xH4700)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "frem",
  "ty": "<16 x half>",
  "variant": "binop",
  "codesize": 4,
  "thru": 216,
  "lat": 4,
  "sizelat": 4,
  "size": 163,
  "gisize": 208,
  "extrasize": 0,
  "asm": "sub sp, sp, #96\nstr x30, [sp, #80]                  // 8-byte Folded Spill\nstp q0, q1, [sp]                    // 32-byte Folded Spill\nmov h1, v2.h[1]\nstp q3, q2, [sp, #32]               // 32-byte Folded Spill\nmov h3, v0.h[1]\nfcvt s1, h1\nfcvt s0, h3\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nfcvt s1, h1\nstr q0, [sp, #64]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldp q1, q2, [sp, #48]               // 32-byte Folded Reload\nmov h1, v1.h[2]\nmov v0.h[1], v2.h[0]\nfcvt s1, h1\nstr q0, [sp, #64]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[2]\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #64]                   // 16-byte Folded Reload\nmov v1.h[2], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[3]\nstr q1, [sp, #64]                   // 16-byte Folded Spill\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nmov h1, v1.h[3]\nfcvt s0, h0\nfcvt s1, h1\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #64]                   // 16-byte Folded Reload\nmov v1.h[3], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[4]\nstr q1, [sp, #64]                   // 16-byte Folded Spill\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nmov h1, v1.h[4]\nfcvt s0, h0\nfcvt s1, h1\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #64]                   // 16-byte Folded Reload\nmov v1.h[4], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[5]\nstr q1, [sp, #64]                   // 16-byte Folded Spill\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nmov h1, v1.h[5]\nfcvt s0, h0\nfcvt s1, h1\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #64]                   // 16-byte Folded Reload\nmov v1.h[5], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[6]\nstr q1, [sp, #64]                   // 16-byte Folded Spill\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nmov h1, v1.h[6]\nfcvt s0, h0\nfcvt s1, h1\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #64]                   // 16-byte Folded Reload\nmov v1.h[6], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[7]\nstr q1, [sp, #64]                   // 16-byte Folded Spill\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nmov h1, v1.h[7]\nfcvt s0, h0\nfcvt s1, h1\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #64]                   // 16-byte Folded Reload\nmov v1.h[7], v0.h[0]\nstr q1, [sp, #64]                   // 16-byte Folded Spill\nldp q0, q1, [sp, #16]               // 32-byte Folded Reload\nmov h0, v0.h[1]\nmov h1, v1.h[1]\nfcvt s0, h0\nfcvt s1, h1\nbl fmodf\nfcvt h0, s0\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nldp q0, q1, [sp, #16]               // 32-byte Folded Reload\nfcvt s0, h0\nfcvt s1, h1\nbl fmodf\nfcvt h0, s0\nldp q1, q2, [sp, #32]               // 32-byte Folded Reload\nmov h1, v1.h[2]\nmov v0.h[1], v2.h[0]\nfcvt s1, h1\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[2]\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nmov v1.h[2], v0.h[0]\nstr q1, [sp, #48]                   // 16-byte Folded Spill\nldp q0, q1, [sp, #16]               // 32-byte Folded Reload\nmov h0, v0.h[3]\nmov h1, v1.h[3]\nfcvt s0, h0\nfcvt s1, h1\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nmov v1.h[3], v0.h[0]\nstr q1, [sp, #48]                   // 16-byte Folded Spill\nldp q0, q1, [sp, #16]               // 32-byte Folded Reload\nmov h0, v0.h[4]\nmov h1, v1.h[4]\nfcvt s0, h0\nfcvt s1, h1\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nmov v1.h[4], v0.h[0]\nstr q1, [sp, #48]                   // 16-byte Folded Spill\nldp q0, q1, [sp, #16]               // 32-byte Folded Reload\nmov h0, v0.h[5]\nmov h1, v1.h[5]\nfcvt s0, h0\nfcvt s1, h1\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nmov v1.h[5], v0.h[0]\nstr q1, [sp, #48]                   // 16-byte Folded Spill\nldp q0, q1, [sp, #16]               // 32-byte Folded Reload\nmov h0, v0.h[6]\nmov h1, v1.h[6]\nfcvt s0, h0\nfcvt s1, h1\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nmov v1.h[6], v0.h[0]\nstr q1, [sp, #48]                   // 16-byte Folded Spill\nldp q0, q1, [sp, #16]               // 32-byte Folded Reload\nmov h0, v0.h[7]\nmov h1, v1.h[7]\nfcvt s0, h0\nfcvt s1, h1\nbl fmodf\nfmov s1, s0\nldr x30, [sp, #80]                  // 8-byte Folded Reload\nfcvt h2, s1\nldp q1, q0, [sp, #48]               // 32-byte Folded Reload\nmov v1.h[7], v2.h[0]\nadd sp, sp, #96\nret",
  "giasm": "sub sp, sp, #448\nstp d15, d14, [sp, #368]            // 16-byte Folded Spill\nstp d13, d12, [sp, #384]            // 16-byte Folded Spill\nstp d11, d10, [sp, #400]            // 16-byte Folded Spill\nstp d9, d8, [sp, #416]              // 16-byte Folded Spill\nstp x29, x30, [sp, #432]            // 16-byte Folded Spill\nmov v4.16b, v1.16b\nstr q1, [sp, #112]                  // 16-byte Folded Spill\nmov h1, v0.h[4]\nmov h12, v0.h[1]\nmov h13, v0.h[2]\nstr q3, [sp, #16]                   // 16-byte Folded Spill\nmov h14, v0.h[3]\nmov h15, v2.h[1]\nmov h8, v2.h[2]\nmov h9, v2.h[3]\nmov h10, v2.h[4]\nmov h11, v2.h[5]\nstr h1, [sp, #272]                  // 2-byte Folded Spill\nmov h1, v0.h[5]\nstr h1, [sp, #240]                  // 2-byte Folded Spill\nmov h1, v0.h[6]\nstr h1, [sp, #176]                  // 2-byte Folded Spill\nmov h1, v0.h[7]\nfcvt s0, h0\nstr h1, [sp, #144]                  // 2-byte Folded Spill\nmov h1, v4.h[1]\nstr h1, [sp, #48]                   // 2-byte Folded Spill\nmov h1, v4.h[2]\nstr h1, [sp, #80]                   // 2-byte Folded Spill\nmov h1, v4.h[3]\nstr h1, [sp, #128]                  // 2-byte Folded Spill\nmov h1, v4.h[4]\nstr h1, [sp, #192]                  // 2-byte Folded Spill\nmov h1, v4.h[5]\nstr h1, [sp, #256]                  // 2-byte Folded Spill\nmov h1, v4.h[6]\nstr h1, [sp, #336]                  // 2-byte Folded Spill\nmov h1, v4.h[7]\nstr h1, [sp, #352]                  // 2-byte Folded Spill\nmov h1, v2.h[6]\nstr h1, [sp, #12]                   // 2-byte Folded Spill\nmov h1, v2.h[7]\nstr h1, [sp, #14]                   // 2-byte Folded Spill\nmov h1, v3.h[1]\nstr h1, [sp, #44]                   // 2-byte Folded Spill\nmov h1, v3.h[2]\nstr h1, [sp, #46]                   // 2-byte Folded Spill\nmov h1, v3.h[3]\nstr h1, [sp, #78]                   // 2-byte Folded Spill\nmov h1, v3.h[4]\nstr h1, [sp, #110]                  // 2-byte Folded Spill\nmov h1, v3.h[5]\nstr h1, [sp, #174]                  // 2-byte Folded Spill\nmov h1, v3.h[6]\nstr h1, [sp, #238]                  // 2-byte Folded Spill\nmov h1, v3.h[7]\nstr h1, [sp, #302]                  // 2-byte Folded Spill\nfcvt s1, h2\nbl fmodf\nfcvt s2, h12\nfcvt h0, s0\nfcvt s1, h15\nstr q0, [sp, #304]                  // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nfcvt s2, h13\nfcvt h0, s0\nfcvt s1, h8\nstr q0, [sp, #208]                  // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nfcvt s2, h14\nfcvt h0, s0\nfcvt s1, h9\nstr q0, [sp, #320]                  // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #272]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nfcvt s1, h10\nstr q0, [sp, #272]                  // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #240]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nfcvt s1, h11\nstr q0, [sp, #240]                  // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #176]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #176]                  // 16-byte Folded Spill\nldr h0, [sp, #12]                   // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #144]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #144]                  // 16-byte Folded Spill\nldr h0, [sp, #14]                   // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl fmodf\nldr q1, [sp, #112]                  // 16-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #112]                  // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #48]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nldr h0, [sp, #44]                   // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #80]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #80]                   // 16-byte Folded Spill\nldr h0, [sp, #46]                   // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #128]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #128]                  // 16-byte Folded Spill\nldr h0, [sp, #78]                   // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #192]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #192]                  // 16-byte Folded Spill\nldr h0, [sp, #110]                  // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #256]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #256]                  // 16-byte Folded Spill\nldr h0, [sp, #174]                  // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #336]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #336]                  // 16-byte Folded Spill\nldr h0, [sp, #238]                  // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #352]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #352]                  // 16-byte Folded Spill\nldr h0, [sp, #302]                  // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl fmodf\nldr q3, [sp, #304]                  // 16-byte Folded Reload\nldr q2, [sp, #208]                  // 16-byte Folded Reload\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nldp x29, x30, [sp, #432]            // 16-byte Folded Reload\nmov v3.h[1], v2.h[0]\nldr q2, [sp, #80]                   // 16-byte Folded Reload\nldp d9, d8, [sp, #416]              // 16-byte Folded Reload\nmov v1.h[1], v2.h[0]\nldr q2, [sp, #320]                  // 16-byte Folded Reload\nldp d11, d10, [sp, #400]            // 16-byte Folded Reload\nmov v3.h[2], v2.h[0]\nldr q2, [sp, #128]                  // 16-byte Folded Reload\nldp d13, d12, [sp, #384]            // 16-byte Folded Reload\nmov v1.h[2], v2.h[0]\nldr q2, [sp, #272]                  // 16-byte Folded Reload\nldp d15, d14, [sp, #368]            // 16-byte Folded Reload\nmov v3.h[3], v2.h[0]\nldr q2, [sp, #192]                  // 16-byte Folded Reload\nmov v1.h[3], v2.h[0]\nldp q4, q2, [sp, #240]              // 32-byte Folded Reload\nmov v3.h[4], v4.h[0]\nmov v1.h[4], v2.h[0]\nldr q2, [sp, #176]                  // 16-byte Folded Reload\nmov v3.h[5], v2.h[0]\nldr q2, [sp, #336]                  // 16-byte Folded Reload\nmov v1.h[5], v2.h[0]\nfcvt h2, s0\nldr q0, [sp, #144]                  // 16-byte Folded Reload\nmov v3.h[6], v0.h[0]\nldr q0, [sp, #352]                  // 16-byte Folded Reload\nmov v1.h[6], v0.h[0]\nldr q0, [sp, #112]                  // 16-byte Folded Reload\nmov v3.h[7], v0.h[0]\nmov v1.h[7], v2.h[0]\nmov v0.16b, v3.16b\nadd sp, sp, #448\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, <16 x half> %b) {\n  %r = frem <16 x half> %a, %b\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <16 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "frem",
  "ty": "<16 x half>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 216,
  "lat": 4,
  "sizelat": 4,
  "size": 142,
  "gisize": 172,
  "extrasize": 0,
  "asm": "sub sp, sp, #64\nstr x30, [sp, #48]                  // 8-byte Folded Spill\nstp q1, q0, [sp]                    // 32-byte Folded Spill\nmov h1, v0.h[1]\nfcvt s0, h1\nfmov s1, #6.00000000\nbl fmodf\nfcvt h0, s0\nfmov s1, #7.00000000\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v0.h[1], v1.h[0]\nfmov s1, #7.00000000\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[2]\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[2], v0.h[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[3]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, #6.00000000\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[3], v0.h[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[4]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[4], v0.h[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[5]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, #6.00000000\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[5], v0.h[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[6]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[6], v0.h[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[7]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, #6.00000000\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[7], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[1]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, #6.00000000\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nfmov s1, #7.00000000\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v0.h[1], v1.h[0]\nfmov s1, #7.00000000\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[2]\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[2], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[3]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #6.00000000\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[3], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[4]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[4], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[5]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #6.00000000\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[5], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[6]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[6], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[7]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #6.00000000\nfcvt s0, h0\nbl fmodf\nfmov s1, s0\nldr x30, [sp, #48]                  // 8-byte Folded Reload\nfcvt h2, s1\nldp q1, q0, [sp, #16]               // 32-byte Folded Reload\nmov v1.h[7], v2.h[0]\nadd sp, sp, #64\nret",
  "giasm": "sub sp, sp, #336\nstp d15, d14, [sp, #240]            // 16-byte Folded Spill\nstp d13, d12, [sp, #256]            // 16-byte Folded Spill\nstp d11, d10, [sp, #272]            // 16-byte Folded Spill\nstp d9, d8, [sp, #288]              // 16-byte Folded Spill\nstr x29, [sp, #304]                 // 8-byte Folded Spill\nstp x30, x19, [sp, #320]            // 16-byte Folded Spill\nmov v2.16b, v1.16b\nstr q1, [sp, #48]                   // 16-byte Folded Spill\nmov h1, v0.h[7]\nmov w8, #18176                      // =0x4700\nmov h14, v0.h[1]\nmov h15, v0.h[2]\nfmov s10, w8\nmov h8, v0.h[3]\nmov w19, #17920                     // =0x4600\nmov h9, v0.h[4]\nmov h13, v0.h[5]\nmov h12, v0.h[6]\nstr h1, [sp, #80]                   // 2-byte Folded Spill\nmov h1, v2.h[1]\nfcvt s0, h0\nstr h1, [sp]                        // 2-byte Folded Spill\nmov h1, v2.h[2]\nstr h1, [sp, #16]                   // 2-byte Folded Spill\nmov h1, v2.h[3]\nstr h1, [sp, #32]                   // 2-byte Folded Spill\nmov h1, v2.h[4]\nstr h1, [sp, #64]                   // 2-byte Folded Spill\nmov h1, v2.h[5]\nstr h1, [sp, #112]                  // 2-byte Folded Spill\nmov h1, v2.h[6]\nstr h1, [sp, #160]                  // 2-byte Folded Spill\nmov h1, v2.h[7]\nstr h1, [sp, #208]                  // 2-byte Folded Spill\nfcvt s1, h10\nbl fmodf\nfcvt h0, s0\nfmov s11, w19\nfcvt s1, h11\nstr q0, [sp, #192]                  // 16-byte Folded Spill\nfcvt s0, h14\nbl fmodf\nfcvt s2, h15\nfcvt h0, s0\nfcvt s1, h10\nstr q0, [sp, #128]                  // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nfcvt s2, h8\nfcvt h0, s0\nfcvt s1, h11\nstr q0, [sp, #224]                  // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nfcvt s2, h9\nfcvt h0, s0\nfcvt s1, h10\nstr q0, [sp, #176]                  // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nfcvt s2, h13\nfcvt h0, s0\nfcvt s1, h11\nstr q0, [sp, #144]                  // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nfcvt s2, h12\nfcvt h0, s0\nfcvt s1, h10\nstr q0, [sp, #96]                   // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #80]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nfcvt s1, h11\nstr q0, [sp, #80]                   // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nfcvt s1, h10\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nldr h1, [sp]                        // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nfcvt s1, h11\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #16]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nfcvt s1, h10\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #32]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nfcvt s1, h11\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #64]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nfcvt s1, h10\nstr q0, [sp, #64]                   // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #112]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nfcvt s1, h11\nstr q0, [sp, #112]                  // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #160]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nfcvt s1, h10\nstr q0, [sp, #160]                  // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #208]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nfcvt s1, h11\nstr q0, [sp, #208]                  // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nldr q3, [sp, #192]                  // 16-byte Folded Reload\nldr q2, [sp, #128]                  // 16-byte Folded Reload\nldr x29, [sp, #304]                 // 8-byte Folded Reload\nldp x30, x19, [sp, #320]            // 16-byte Folded Reload\nmov v3.h[1], v2.h[0]\nldp q1, q2, [sp]                    // 32-byte Folded Reload\nldp d9, d8, [sp, #288]              // 16-byte Folded Reload\nldp d11, d10, [sp, #272]            // 16-byte Folded Reload\nmov v1.h[1], v2.h[0]\nldr q2, [sp, #224]                  // 16-byte Folded Reload\nldp d13, d12, [sp, #256]            // 16-byte Folded Reload\nmov v3.h[2], v2.h[0]\nldr q2, [sp, #32]                   // 16-byte Folded Reload\nldp d15, d14, [sp, #240]            // 16-byte Folded Reload\nmov v1.h[2], v2.h[0]\nldr q2, [sp, #176]                  // 16-byte Folded Reload\nmov v3.h[3], v2.h[0]\nldr q2, [sp, #64]                   // 16-byte Folded Reload\nmov v1.h[3], v2.h[0]\nldr q2, [sp, #144]                  // 16-byte Folded Reload\nmov v3.h[4], v2.h[0]\nldp q2, q4, [sp, #96]               // 32-byte Folded Reload\nmov v1.h[4], v4.h[0]\nmov v3.h[5], v2.h[0]\nldr q2, [sp, #160]                  // 16-byte Folded Reload\nmov v1.h[5], v2.h[0]\nfcvt h2, s0\nldr q0, [sp, #80]                   // 16-byte Folded Reload\nmov v3.h[6], v0.h[0]\nldr q0, [sp, #208]                  // 16-byte Folded Reload\nmov v1.h[6], v0.h[0]\nldr q0, [sp, #48]                   // 16-byte Folded Reload\nmov v3.h[7], v0.h[0]\nmov v1.h[7], v2.h[0]\nmov v0.16b, v3.16b\nadd sp, sp, #336\nret",
  "ll": "define <16 x half> @test(<16 x half> %a) {\n  %r = frem <16 x half> %a, <half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0>\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <16 x half> %a, <half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600>\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "frem",
  "ty": "<16 x half>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 218,
  "lat": 6,
  "sizelat": 6,
  "size": 145,
  "gisize": 209,
  "extrasize": 0,
  "asm": "sub sp, sp, #64\nstr d8, [sp, #48]                   // 8-byte Folded Spill\nstr x30, [sp, #56]                  // 8-byte Folded Spill\nstp q1, q0, [sp]                    // 32-byte Folded Spill\nmov h1, v0.h[1]\nfcvt s8, h2\nfcvt s0, h1\nfmov s1, s8\nbl fmodf\nfcvt h0, s0\nfmov s1, s8\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v0.h[1], v1.h[0]\nfmov s1, s8\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[2]\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[2], v0.h[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[3]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, s8\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[3], v0.h[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[4]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, s8\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[4], v0.h[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[5]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, s8\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[5], v0.h[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[6]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, s8\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[6], v0.h[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[7]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, s8\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[7], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[1]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, s8\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nfmov s1, s8\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v0.h[1], v1.h[0]\nfmov s1, s8\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[2]\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[2], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[3]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, s8\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[3], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[4]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, s8\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[4], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[5]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, s8\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[5], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[6]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, s8\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[6], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[7]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, s8\nfcvt s0, h0\nbl fmodf\nfmov s1, s0\nldr x30, [sp, #56]                  // 8-byte Folded Reload\nldr d8, [sp, #48]                   // 8-byte Folded Reload\nfcvt h2, s1\nldp q1, q0, [sp, #16]               // 32-byte Folded Reload\nmov v1.h[7], v2.h[0]\nadd sp, sp, #64\nret",
  "giasm": "sub sp, sp, #448\nstp d15, d14, [sp, #368]            // 16-byte Folded Spill\nstp d13, d12, [sp, #384]            // 16-byte Folded Spill\nstp d11, d10, [sp, #400]            // 16-byte Folded Spill\nstp d9, d8, [sp, #416]              // 16-byte Folded Spill\nstp x29, x30, [sp, #432]            // 16-byte Folded Spill\ndup v3.8h, v2.h[0]\ndup v4.8h, v2.h[0]\nstr q1, [sp, #112]                  // 16-byte Folded Spill\nmov h2, v0.h[4]\nmov h12, v0.h[1]\nmov h13, v0.h[2]\nmov h14, v0.h[3]\nmov h15, v3.h[1]\nmov h8, v3.h[2]\nstr q4, [sp, #16]                   // 16-byte Folded Spill\nmov h9, v3.h[3]\nmov h10, v3.h[4]\nmov h11, v3.h[5]\nstr h2, [sp, #272]                  // 2-byte Folded Spill\nmov h2, v0.h[5]\nstr h2, [sp, #240]                  // 2-byte Folded Spill\nmov h2, v0.h[6]\nstr h2, [sp, #176]                  // 2-byte Folded Spill\nmov h2, v0.h[7]\nfcvt s0, h0\nstr h2, [sp, #144]                  // 2-byte Folded Spill\nmov h2, v1.h[1]\nstr h2, [sp, #48]                   // 2-byte Folded Spill\nmov h2, v1.h[2]\nstr h2, [sp, #80]                   // 2-byte Folded Spill\nmov h2, v1.h[3]\nstr h2, [sp, #128]                  // 2-byte Folded Spill\nmov h2, v1.h[4]\nstr h2, [sp, #192]                  // 2-byte Folded Spill\nmov h2, v1.h[5]\nstr h2, [sp, #256]                  // 2-byte Folded Spill\nmov h2, v1.h[6]\nstr h2, [sp, #336]                  // 2-byte Folded Spill\nmov h2, v1.h[7]\nmov h1, v3.h[6]\nstr h1, [sp, #12]                   // 2-byte Folded Spill\nmov h1, v3.h[7]\nstr h2, [sp, #352]                  // 2-byte Folded Spill\nmov h2, v4.h[4]\nstr h1, [sp, #14]                   // 2-byte Folded Spill\nmov h1, v4.h[1]\nstr h2, [sp, #110]                  // 2-byte Folded Spill\nmov h2, v4.h[5]\nstr h1, [sp, #44]                   // 2-byte Folded Spill\nmov h1, v4.h[2]\nstr h2, [sp, #174]                  // 2-byte Folded Spill\nmov h2, v4.h[6]\nstr h1, [sp, #46]                   // 2-byte Folded Spill\nmov h1, v4.h[3]\nstr h2, [sp, #238]                  // 2-byte Folded Spill\nmov h2, v4.h[7]\nstr h1, [sp, #78]                   // 2-byte Folded Spill\nfcvt s1, h3\nstr h2, [sp, #302]                  // 2-byte Folded Spill\nbl fmodf\nfcvt s2, h12\nfcvt h0, s0\nfcvt s1, h15\nstr q0, [sp, #304]                  // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nfcvt s2, h13\nfcvt h0, s0\nfcvt s1, h8\nstr q0, [sp, #208]                  // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nfcvt s2, h14\nfcvt h0, s0\nfcvt s1, h9\nstr q0, [sp, #320]                  // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #272]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nfcvt s1, h10\nstr q0, [sp, #272]                  // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #240]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nfcvt s1, h11\nstr q0, [sp, #240]                  // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #176]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #176]                  // 16-byte Folded Spill\nldr h0, [sp, #12]                   // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #144]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #144]                  // 16-byte Folded Spill\nldr h0, [sp, #14]                   // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl fmodf\nldr q1, [sp, #112]                  // 16-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #112]                  // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #48]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nldr h0, [sp, #44]                   // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #80]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #80]                   // 16-byte Folded Spill\nldr h0, [sp, #46]                   // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #128]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #128]                  // 16-byte Folded Spill\nldr h0, [sp, #78]                   // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #192]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #192]                  // 16-byte Folded Spill\nldr h0, [sp, #110]                  // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #256]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #256]                  // 16-byte Folded Spill\nldr h0, [sp, #174]                  // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #336]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #336]                  // 16-byte Folded Spill\nldr h0, [sp, #238]                  // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #352]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #352]                  // 16-byte Folded Spill\nldr h0, [sp, #302]                  // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl fmodf\nldr q3, [sp, #304]                  // 16-byte Folded Reload\nldr q2, [sp, #208]                  // 16-byte Folded Reload\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nldp x29, x30, [sp, #432]            // 16-byte Folded Reload\nmov v3.h[1], v2.h[0]\nldr q2, [sp, #80]                   // 16-byte Folded Reload\nldp d9, d8, [sp, #416]              // 16-byte Folded Reload\nmov v1.h[1], v2.h[0]\nldr q2, [sp, #320]                  // 16-byte Folded Reload\nldp d11, d10, [sp, #400]            // 16-byte Folded Reload\nmov v3.h[2], v2.h[0]\nldr q2, [sp, #128]                  // 16-byte Folded Reload\nldp d13, d12, [sp, #384]            // 16-byte Folded Reload\nmov v1.h[2], v2.h[0]\nldr q2, [sp, #272]                  // 16-byte Folded Reload\nldp d15, d14, [sp, #368]            // 16-byte Folded Reload\nmov v3.h[3], v2.h[0]\nldr q2, [sp, #192]                  // 16-byte Folded Reload\nmov v1.h[3], v2.h[0]\nldp q4, q2, [sp, #240]              // 32-byte Folded Reload\nmov v3.h[4], v4.h[0]\nmov v1.h[4], v2.h[0]\nldr q2, [sp, #176]                  // 16-byte Folded Reload\nmov v3.h[5], v2.h[0]\nldr q2, [sp, #336]                  // 16-byte Folded Reload\nmov v1.h[5], v2.h[0]\nfcvt h2, s0\nldr q0, [sp, #144]                  // 16-byte Folded Reload\nmov v3.h[6], v0.h[0]\nldr q0, [sp, #352]                  // 16-byte Folded Reload\nmov v1.h[6], v0.h[0]\nldr q0, [sp, #112]                  // 16-byte Folded Reload\nmov v3.h[7], v0.h[0]\nmov v1.h[7], v2.h[0]\nmov v0.16b, v3.16b\nadd sp, sp, #448\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, half %bs) {\n  %i = insertelement <16 x half> poison, half %bs, i64 0\n  %b = shufflevector <16 x half> %i, <16 x half> poison, <16 x i32> zeroinitializer\n  %r = frem <16 x half> %a, %b\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <16 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <16 x half> %i, <16 x half> poison, <16 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <16 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "frem",
  "ty": "<16 x half>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 216,
  "lat": 4,
  "sizelat": 4,
  "size": 142,
  "gisize": 167,
  "extrasize": 0,
  "asm": "sub sp, sp, #64\nstr x30, [sp, #48]                  // 8-byte Folded Spill\nstp q1, q0, [sp]                    // 32-byte Folded Spill\nmov h1, v0.h[1]\nfcvt s0, h1\nfmov s1, #7.00000000\nbl fmodf\nfcvt h0, s0\nfmov s1, #7.00000000\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v0.h[1], v1.h[0]\nfmov s1, #7.00000000\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[2]\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[2], v0.h[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[3]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[3], v0.h[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[4]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[4], v0.h[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[5]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[5], v0.h[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[6]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[6], v0.h[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[7]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[7], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[1]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nfmov s1, #7.00000000\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v0.h[1], v1.h[0]\nfmov s1, #7.00000000\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[2]\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[2], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[3]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[3], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[4]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[4], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[5]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[5], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[6]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[6], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[7]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl fmodf\nfmov s1, s0\nldr x30, [sp, #48]                  // 8-byte Folded Reload\nfcvt h2, s1\nldp q1, q0, [sp, #16]               // 32-byte Folded Reload\nmov v1.h[7], v2.h[0]\nadd sp, sp, #64\nret",
  "giasm": "sub sp, sp, #320\nstp d15, d14, [sp, #240]            // 16-byte Folded Spill\nstp d13, d12, [sp, #256]            // 16-byte Folded Spill\nstp d11, d10, [sp, #272]            // 16-byte Folded Spill\nstp d9, d8, [sp, #288]              // 16-byte Folded Spill\nstp x29, x30, [sp, #304]            // 16-byte Folded Spill\nmov v2.16b, v1.16b\nstr q1, [sp, #64]                   // 16-byte Folded Spill\nmov h1, v1.h[1]\nmov w8, #18176                      // =0x4700\nmov h11, v0.h[1]\nmov h12, v0.h[2]\nfmov s8, w8\nmov h13, v0.h[3]\nmov h14, v0.h[4]\nmov h15, v0.h[5]\nmov h10, v0.h[6]\nmov h9, v0.h[7]\nstr h1, [sp]                        // 2-byte Folded Spill\nmov h1, v2.h[2]\nfcvt s0, h0\nstr h1, [sp, #16]                   // 2-byte Folded Spill\nmov h1, v2.h[3]\nstr h1, [sp, #32]                   // 2-byte Folded Spill\nmov h1, v2.h[4]\nstr h1, [sp, #48]                   // 2-byte Folded Spill\nmov h1, v2.h[5]\nstr h1, [sp, #96]                   // 2-byte Folded Spill\nmov h1, v2.h[6]\nstr h1, [sp, #160]                  // 2-byte Folded Spill\nmov h1, v2.h[7]\nstr h1, [sp, #192]                  // 2-byte Folded Spill\nfcvt s1, h8\nbl fmodf\nfcvt s2, h11\nfcvt h0, s0\nfcvt s1, h8\nstr q0, [sp, #208]                  // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nfcvt s2, h12\nfcvt h0, s0\nfcvt s1, h8\nstr q0, [sp, #128]                  // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nfcvt s2, h13\nfcvt h0, s0\nfcvt s1, h8\nstr q0, [sp, #224]                  // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nfcvt s2, h14\nfcvt h0, s0\nfcvt s1, h8\nstr q0, [sp, #176]                  // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nfcvt s2, h15\nfcvt h0, s0\nfcvt s1, h8\nstr q0, [sp, #144]                  // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nfcvt s2, h10\nfcvt h0, s0\nfcvt s1, h8\nstr q0, [sp, #112]                  // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nfcvt s2, h9\nfcvt h0, s0\nfcvt s1, h8\nstr q0, [sp, #80]                   // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nldr q1, [sp, #64]                   // 16-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nfcvt s1, h8\nstr q0, [sp, #64]                   // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nldr h1, [sp]                        // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nfcvt s1, h8\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #16]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nfcvt s1, h8\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #32]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nfcvt s1, h8\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #48]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nfcvt s1, h8\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #96]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nfcvt s1, h8\nstr q0, [sp, #96]                   // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #160]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nfcvt s1, h8\nstr q0, [sp, #160]                  // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #192]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nfcvt s1, h8\nstr q0, [sp, #192]                  // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nldr q3, [sp, #208]                  // 16-byte Folded Reload\nldr q2, [sp, #128]                  // 16-byte Folded Reload\nldp x29, x30, [sp, #304]            // 16-byte Folded Reload\nmov v3.h[1], v2.h[0]\nldp q1, q2, [sp]                    // 32-byte Folded Reload\nldp d9, d8, [sp, #288]              // 16-byte Folded Reload\nldp d11, d10, [sp, #272]            // 16-byte Folded Reload\nmov v1.h[1], v2.h[0]\nldr q2, [sp, #224]                  // 16-byte Folded Reload\nldp d13, d12, [sp, #256]            // 16-byte Folded Reload\nmov v3.h[2], v2.h[0]\nldr q2, [sp, #32]                   // 16-byte Folded Reload\nldp d15, d14, [sp, #240]            // 16-byte Folded Reload\nmov v1.h[2], v2.h[0]\nldr q2, [sp, #176]                  // 16-byte Folded Reload\nmov v3.h[3], v2.h[0]\nldr q2, [sp, #48]                   // 16-byte Folded Reload\nmov v1.h[3], v2.h[0]\nldr q2, [sp, #144]                  // 16-byte Folded Reload\nmov v3.h[4], v2.h[0]\nldp q4, q2, [sp, #96]               // 32-byte Folded Reload\nmov v1.h[4], v4.h[0]\nmov v3.h[5], v2.h[0]\nldr q2, [sp, #160]                  // 16-byte Folded Reload\nmov v1.h[5], v2.h[0]\nfcvt h2, s0\nldr q0, [sp, #80]                   // 16-byte Folded Reload\nmov v3.h[6], v0.h[0]\nldr q0, [sp, #192]                  // 16-byte Folded Reload\nmov v1.h[6], v0.h[0]\nldr q0, [sp, #64]                   // 16-byte Folded Reload\nmov v3.h[7], v0.h[0]\nmov v1.h[7], v2.h[0]\nmov v0.16b, v3.16b\nadd sp, sp, #320\nret",
  "ll": "define <16 x half> @test(<16 x half> %a) {\n  %r = frem <16 x half> %a, <half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0>\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <16 x half> %a, splat (half 0xH4700)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "frem",
  "ty": "<2 x float>",
  "variant": "binop",
  "codesize": 4,
  "thru": 24,
  "lat": 4,
  "sizelat": 4,
  "size": 13,
  "gisize": 16,
  "extrasize": 0,
  "asm": "sub sp, sp, #64\nstr x30, [sp, #48]                  // 8-byte Folded Spill\nstp q0, q1, [sp]                    // 32-byte Folded Spill\nmov s0, v0.s[1]\nmov s1, v1.s[1]\nbl fmodf\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldp q0, q1, [sp]                    // 32-byte Folded Reload\nbl fmodf\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nldr x30, [sp, #48]                  // 8-byte Folded Reload\nmov v0.s[1], v1.s[0]\nadd sp, sp, #64\nret",
  "giasm": "sub sp, sp, #48\nstp d9, d8, [sp, #16]               // 16-byte Folded Spill\nstr x30, [sp, #32]                  // 8-byte Folded Spill\nmov s8, v0.s[1]\nmov s9, v1.s[1]\nbl fmodf\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s1, s9\nfmov s0, s8\nbl fmodf\nldr q1, [sp]                        // 16-byte Folded Reload\nldp d9, d8, [sp, #16]               // 16-byte Folded Reload\nldr x30, [sp, #32]                  // 8-byte Folded Reload\nmov v1.s[1], v0.s[0]\nfmov d0, d1\nadd sp, sp, #48\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, <2 x float> %b) {\n  %r = frem <2 x float> %a, %b\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <2 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "frem",
  "ty": "<2 x float>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 24,
  "lat": 4,
  "sizelat": 4,
  "size": 14,
  "gisize": 16,
  "extrasize": 0,
  "asm": "sub sp, sp, #48\nstr x30, [sp, #32]                  // 8-byte Folded Spill\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s1, #6.00000000\nmov s0, v0.s[1]\nbl fmodf\nfmov s1, #7.00000000\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nbl fmodf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nldr x30, [sp, #32]                  // 8-byte Folded Reload\nmov v0.s[1], v1.s[0]\nadd sp, sp, #48\nret",
  "giasm": "sub sp, sp, #32\nstr d8, [sp, #16]                   // 8-byte Folded Spill\nstr x30, [sp, #24]                  // 8-byte Folded Spill\nfmov s1, #7.00000000\nmov s8, v0.s[1]\nbl fmodf\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s1, #6.00000000\nfmov s0, s8\nbl fmodf\nldr q1, [sp]                        // 16-byte Folded Reload\nldr x30, [sp, #24]                  // 8-byte Folded Reload\nldr d8, [sp, #16]                   // 8-byte Folded Reload\nmov v1.s[1], v0.s[0]\nfmov d0, d1\nadd sp, sp, #32\nret",
  "ll": "define <2 x float> @test(<2 x float> %a) {\n  %r = frem <2 x float> %a, <float 7.0, float 6.0>\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <2 x float> %a, <float 7.000000e+00, float 6.000000e+00>\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "frem",
  "ty": "<2 x float>",
  "variant": "binopsplat",
  "codesize": 5,
  "thru": 25,
  "lat": 5,
  "sizelat": 5,
  "size": 16,
  "gisize": 17,
  "extrasize": 0,
  "asm": "sub sp, sp, #48\nstr d8, [sp, #32]                   // 8-byte Folded Spill\nstr x30, [sp, #40]                  // 8-byte Folded Spill\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s8, s1\nmov s0, v0.s[1]\nbl fmodf\nfmov s1, s8\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nbl fmodf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nldr x30, [sp, #40]                  // 8-byte Folded Reload\nldr d8, [sp, #32]                   // 8-byte Folded Reload\nmov v0.s[1], v1.s[0]\nadd sp, sp, #48\nret",
  "giasm": "sub sp, sp, #48\nstp d9, d8, [sp, #16]               // 16-byte Folded Spill\nstr x30, [sp, #32]                  // 8-byte Folded Spill\nmov s8, v0.s[1]\ndup v1.2s, v1.s[0]\nmov s9, v1.s[1]\nbl fmodf\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s1, s9\nfmov s0, s8\nbl fmodf\nldr q1, [sp]                        // 16-byte Folded Reload\nldp d9, d8, [sp, #16]               // 16-byte Folded Reload\nldr x30, [sp, #32]                  // 8-byte Folded Reload\nmov v1.s[1], v0.s[0]\nfmov d0, d1\nadd sp, sp, #48\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, float %bs) {\n  %i = insertelement <2 x float> poison, float %bs, i64 0\n  %b = shufflevector <2 x float> %i, <2 x float> poison, <2 x i32> zeroinitializer\n  %r = frem <2 x float> %a, %b\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <2 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <2 x float> %i, <2 x float> poison, <2 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <2 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "frem",
  "ty": "<2 x float>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 24,
  "lat": 4,
  "sizelat": 4,
  "size": 14,
  "gisize": 16,
  "extrasize": 0,
  "asm": "sub sp, sp, #48\nstr x30, [sp, #32]                  // 8-byte Folded Spill\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s1, #7.00000000\nmov s0, v0.s[1]\nbl fmodf\nfmov s1, #7.00000000\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nbl fmodf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nldr x30, [sp, #32]                  // 8-byte Folded Reload\nmov v0.s[1], v1.s[0]\nadd sp, sp, #48\nret",
  "giasm": "sub sp, sp, #32\nstr d8, [sp, #16]                   // 8-byte Folded Spill\nstr x30, [sp, #24]                  // 8-byte Folded Spill\nfmov s1, #7.00000000\nmov s8, v0.s[1]\nbl fmodf\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s1, #7.00000000\nfmov s0, s8\nbl fmodf\nldr q1, [sp]                        // 16-byte Folded Reload\nldr x30, [sp, #24]                  // 8-byte Folded Reload\nldr d8, [sp, #16]                   // 8-byte Folded Reload\nmov v1.s[1], v0.s[0]\nfmov d0, d1\nadd sp, sp, #32\nret",
  "ll": "define <2 x float> @test(<2 x float> %a) {\n  %r = frem <2 x float> %a, <float 7.0, float 7.0>\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <2 x float> %a, splat (float 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "frem",
  "ty": "<4 x float>",
  "variant": "binop",
  "codesize": 4,
  "thru": 52,
  "lat": 4,
  "sizelat": 4,
  "size": 28,
  "gisize": 35,
  "extrasize": 0,
  "asm": "sub sp, sp, #64\nstr x30, [sp, #48]                  // 8-byte Folded Spill\nstp q0, q1, [sp, #16]               // 32-byte Folded Spill\nmov s0, v0.s[1]\nmov s1, v1.s[1]\nbl fmodf\nstr q0, [sp]                        // 16-byte Folded Spill\nldp q0, q1, [sp, #16]               // 32-byte Folded Reload\nbl fmodf\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v0.s[1], v1.s[0]\nstr q0, [sp]                        // 16-byte Folded Spill\nldp q0, q1, [sp, #16]               // 32-byte Folded Reload\nmov s0, v0.s[2]\nmov s1, v1.s[2]\nbl fmodf\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v1.s[2], v0.s[0]\nstr q1, [sp]                        // 16-byte Folded Spill\nldp q0, q1, [sp, #16]               // 32-byte Folded Reload\nmov s0, v0.s[3]\nmov s1, v1.s[3]\nbl fmodf\nldr q1, [sp]                        // 16-byte Folded Reload\nldr x30, [sp, #48]                  // 8-byte Folded Reload\nmov v1.s[3], v0.s[0]\nmov v0.16b, v1.16b\nadd sp, sp, #64\nret",
  "giasm": "sub sp, sp, #112\nstp d13, d12, [sp, #48]             // 16-byte Folded Spill\nstp d11, d10, [sp, #64]             // 16-byte Folded Spill\nstp d9, d8, [sp, #80]               // 16-byte Folded Spill\nstr x30, [sp, #96]                  // 8-byte Folded Spill\nmov s8, v0.s[1]\nmov s9, v0.s[2]\nmov s10, v0.s[3]\nmov s11, v1.s[1]\nmov s12, v1.s[2]\nmov s13, v1.s[3]\nbl fmodf\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, s11\nfmov s0, s8\nbl fmodf\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, s12\nfmov s0, s9\nbl fmodf\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s1, s13\nfmov s0, s10\nbl fmodf\nldp q2, q1, [sp, #16]               // 32-byte Folded Reload\nldr x30, [sp, #96]                  // 8-byte Folded Reload\nldp d9, d8, [sp, #80]               // 16-byte Folded Reload\nldp d11, d10, [sp, #64]             // 16-byte Folded Reload\nmov v1.s[1], v2.s[0]\nldr q2, [sp]                        // 16-byte Folded Reload\nldp d13, d12, [sp, #48]             // 16-byte Folded Reload\nmov v1.s[2], v2.s[0]\nmov v1.s[3], v0.s[0]\nmov v0.16b, v1.16b\nadd sp, sp, #112\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, <4 x float> %b) {\n  %r = frem <4 x float> %a, %b\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <4 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "frem",
  "ty": "<4 x float>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 52,
  "lat": 4,
  "sizelat": 4,
  "size": 29,
  "gisize": 31,
  "extrasize": 0,
  "asm": "sub sp, sp, #48\nstr x30, [sp, #32]                  // 8-byte Folded Spill\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nmov s0, v0.s[1]\nfmov s1, #6.00000000\nbl fmodf\nfmov s1, #7.00000000\nstr q0, [sp]                        // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nbl fmodf\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v0.s[1], v1.s[0]\nfmov s1, #7.00000000\nstr q0, [sp]                        // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov s0, v0.s[2]\nbl fmodf\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v1.s[2], v0.s[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov s0, v0.s[3]\nstr q1, [sp]                        // 16-byte Folded Spill\nfmov s1, #6.00000000\nbl fmodf\nldr q1, [sp]                        // 16-byte Folded Reload\nldr x30, [sp, #32]                  // 8-byte Folded Reload\nmov v1.s[3], v0.s[0]\nmov v0.16b, v1.16b\nadd sp, sp, #48\nret",
  "giasm": "sub sp, sp, #80\nstr d10, [sp, #48]                  // 8-byte Folded Spill\nstp d9, d8, [sp, #56]               // 16-byte Folded Spill\nstr x30, [sp, #72]                  // 8-byte Folded Spill\nfmov s1, #7.00000000\nmov s8, v0.s[1]\nmov s9, v0.s[2]\nmov s10, v0.s[3]\nbl fmodf\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, #6.00000000\nfmov s0, s8\nbl fmodf\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfmov s0, s9\nbl fmodf\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s1, #6.00000000\nfmov s0, s10\nbl fmodf\nldp q2, q1, [sp, #16]               // 32-byte Folded Reload\nldr x30, [sp, #72]                  // 8-byte Folded Reload\nldp d9, d8, [sp, #56]               // 16-byte Folded Reload\nldr d10, [sp, #48]                  // 8-byte Folded Reload\nmov v1.s[1], v2.s[0]\nldr q2, [sp]                        // 16-byte Folded Reload\nmov v1.s[2], v2.s[0]\nmov v1.s[3], v0.s[0]\nmov v0.16b, v1.16b\nadd sp, sp, #80\nret",
  "ll": "define <4 x float> @test(<4 x float> %a) {\n  %r = frem <4 x float> %a, <float 7.0, float 6.0, float 7.0, float 6.0>\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <4 x float> %a, <float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00>\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "frem",
  "ty": "<4 x float>",
  "variant": "binopsplat",
  "codesize": 5,
  "thru": 53,
  "lat": 5,
  "sizelat": 5,
  "size": 31,
  "gisize": 36,
  "extrasize": 0,
  "asm": "sub sp, sp, #48\nstr d8, [sp, #32]                   // 8-byte Folded Spill\nstr x30, [sp, #40]                  // 8-byte Folded Spill\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nmov s0, v0.s[1]\nfmov s8, s1\nbl fmodf\nfmov s1, s8\nstr q0, [sp]                        // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nbl fmodf\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v0.s[1], v1.s[0]\nfmov s1, s8\nstr q0, [sp]                        // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov s0, v0.s[2]\nbl fmodf\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v1.s[2], v0.s[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov s0, v0.s[3]\nstr q1, [sp]                        // 16-byte Folded Spill\nfmov s1, s8\nbl fmodf\nldr q1, [sp]                        // 16-byte Folded Reload\nldr x30, [sp, #40]                  // 8-byte Folded Reload\nldr d8, [sp, #32]                   // 8-byte Folded Reload\nmov v1.s[3], v0.s[0]\nmov v0.16b, v1.16b\nadd sp, sp, #48\nret",
  "giasm": "sub sp, sp, #112\nstp d13, d12, [sp, #48]             // 16-byte Folded Spill\nstp d11, d10, [sp, #64]             // 16-byte Folded Spill\nstp d9, d8, [sp, #80]               // 16-byte Folded Spill\nstr x30, [sp, #96]                  // 8-byte Folded Spill\nmov s8, v0.s[1]\nmov s9, v0.s[2]\nmov s10, v0.s[3]\ndup v1.4s, v1.s[0]\nmov s11, v1.s[1]\nmov s12, v1.s[2]\nmov s13, v1.s[3]\nbl fmodf\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, s11\nfmov s0, s8\nbl fmodf\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, s12\nfmov s0, s9\nbl fmodf\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s1, s13\nfmov s0, s10\nbl fmodf\nldp q2, q1, [sp, #16]               // 32-byte Folded Reload\nldr x30, [sp, #96]                  // 8-byte Folded Reload\nldp d9, d8, [sp, #80]               // 16-byte Folded Reload\nldp d11, d10, [sp, #64]             // 16-byte Folded Reload\nmov v1.s[1], v2.s[0]\nldr q2, [sp]                        // 16-byte Folded Reload\nldp d13, d12, [sp, #48]             // 16-byte Folded Reload\nmov v1.s[2], v2.s[0]\nmov v1.s[3], v0.s[0]\nmov v0.16b, v1.16b\nadd sp, sp, #112\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, float %bs) {\n  %i = insertelement <4 x float> poison, float %bs, i64 0\n  %b = shufflevector <4 x float> %i, <4 x float> poison, <4 x i32> zeroinitializer\n  %r = frem <4 x float> %a, %b\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <4 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <4 x float> %i, <4 x float> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <4 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "frem",
  "ty": "<4 x float>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 52,
  "lat": 4,
  "sizelat": 4,
  "size": 29,
  "gisize": 31,
  "extrasize": 0,
  "asm": "sub sp, sp, #48\nstr x30, [sp, #32]                  // 8-byte Folded Spill\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nmov s0, v0.s[1]\nfmov s1, #7.00000000\nbl fmodf\nfmov s1, #7.00000000\nstr q0, [sp]                        // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nbl fmodf\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v0.s[1], v1.s[0]\nfmov s1, #7.00000000\nstr q0, [sp]                        // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov s0, v0.s[2]\nbl fmodf\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v1.s[2], v0.s[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov s0, v0.s[3]\nstr q1, [sp]                        // 16-byte Folded Spill\nfmov s1, #7.00000000\nbl fmodf\nldr q1, [sp]                        // 16-byte Folded Reload\nldr x30, [sp, #32]                  // 8-byte Folded Reload\nmov v1.s[3], v0.s[0]\nmov v0.16b, v1.16b\nadd sp, sp, #48\nret",
  "giasm": "sub sp, sp, #80\nstr d10, [sp, #48]                  // 8-byte Folded Spill\nstp d9, d8, [sp, #56]               // 16-byte Folded Spill\nstr x30, [sp, #72]                  // 8-byte Folded Spill\nfmov s1, #7.00000000\nmov s8, v0.s[1]\nmov s9, v0.s[2]\nmov s10, v0.s[3]\nbl fmodf\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfmov s0, s8\nbl fmodf\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfmov s0, s9\nbl fmodf\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s1, #7.00000000\nfmov s0, s10\nbl fmodf\nldp q2, q1, [sp, #16]               // 32-byte Folded Reload\nldr x30, [sp, #72]                  // 8-byte Folded Reload\nldp d9, d8, [sp, #56]               // 16-byte Folded Reload\nldr d10, [sp, #48]                  // 8-byte Folded Reload\nmov v1.s[1], v2.s[0]\nldr q2, [sp]                        // 16-byte Folded Reload\nmov v1.s[2], v2.s[0]\nmov v1.s[3], v0.s[0]\nmov v0.16b, v1.16b\nadd sp, sp, #80\nret",
  "ll": "define <4 x float> @test(<4 x float> %a) {\n  %r = frem <4 x float> %a, <float 7.0, float 7.0, float 7.0, float 7.0>\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <4 x float> %a, splat (float 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "frem",
  "ty": "<8 x float>",
  "variant": "binop",
  "codesize": 4,
  "thru": 104,
  "lat": 4,
  "sizelat": 4,
  "size": 54,
  "gisize": 72,
  "extrasize": 0,
  "asm": "sub sp, sp, #96\nstr x30, [sp, #80]                  // 8-byte Folded Spill\nstp q0, q2, [sp]                    // 32-byte Folded Spill\nmov s0, v0.s[1]\nstp q1, q3, [sp, #32]               // 32-byte Folded Spill\nmov s1, v2.s[1]\nbl fmodf\nstr q0, [sp, #64]                   // 16-byte Folded Spill\nldp q0, q1, [sp]                    // 32-byte Folded Reload\nbl fmodf\nldr q1, [sp, #64]                   // 16-byte Folded Reload\nmov v0.s[1], v1.s[0]\nstr q0, [sp, #64]                   // 16-byte Folded Spill\nldp q0, q1, [sp]                    // 32-byte Folded Reload\nmov s0, v0.s[2]\nmov s1, v1.s[2]\nbl fmodf\nldr q1, [sp, #64]                   // 16-byte Folded Reload\nmov v1.s[2], v0.s[0]\nstr q1, [sp, #64]                   // 16-byte Folded Spill\nldp q0, q1, [sp]                    // 32-byte Folded Reload\nmov s0, v0.s[3]\nmov s1, v1.s[3]\nbl fmodf\nldr q1, [sp, #64]                   // 16-byte Folded Reload\nmov v1.s[3], v0.s[0]\nstr q1, [sp, #64]                   // 16-byte Folded Spill\nldp q0, q1, [sp, #32]               // 32-byte Folded Reload\nmov s0, v0.s[1]\nmov s1, v1.s[1]\nbl fmodf\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldp q0, q1, [sp, #32]               // 32-byte Folded Reload\nbl fmodf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v0.s[1], v1.s[0]\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldp q0, q1, [sp, #32]               // 32-byte Folded Reload\nmov s0, v0.s[2]\nmov s1, v1.s[2]\nbl fmodf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.s[2], v0.s[0]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nldp q0, q1, [sp, #32]               // 32-byte Folded Reload\nmov s0, v0.s[3]\nmov s1, v1.s[3]\nbl fmodf\nfmov s2, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nldr q0, [sp, #64]                   // 16-byte Folded Reload\nldr x30, [sp, #80]                  // 8-byte Folded Reload\nmov v1.s[3], v2.s[0]\nadd sp, sp, #96\nret",
  "giasm": "sub sp, sp, #208\nstp d15, d14, [sp, #128]            // 16-byte Folded Spill\nstp d13, d12, [sp, #144]            // 16-byte Folded Spill\nstp d11, d10, [sp, #160]            // 16-byte Folded Spill\nstp d9, d8, [sp, #176]              // 16-byte Folded Spill\nstr x30, [sp, #192]                 // 8-byte Folded Spill\nmov v4.16b, v1.16b\nmov v1.16b, v2.16b\nmov s8, v0.s[1]\nmov s9, v0.s[2]\nmov s10, v0.s[3]\nmov s12, v3.s[1]\nmov s11, v3.s[2]\nmov s2, v4.s[1]\nstp q3, q4, [sp]                    // 32-byte Folded Spill\nmov s5, v4.s[3]\nmov s14, v1.s[1]\nmov s15, v1.s[2]\nmov s13, v1.s[3]\nstr s2, [sp, #48]                   // 4-byte Folded Spill\nmov s2, v4.s[2]\nstr s2, [sp, #112]                  // 4-byte Folded Spill\nmov s2, v3.s[3]\nstp s2, s5, [sp, #200]              // 8-byte Folded Spill\nbl fmodf\nstr q0, [sp, #96]                   // 16-byte Folded Spill\nfmov s1, s14\nfmov s0, s8\nbl fmodf\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, s15\nfmov s0, s9\nbl fmodf\nstr q0, [sp, #80]                   // 16-byte Folded Spill\nfmov s1, s13\nfmov s0, s10\nbl fmodf\nstr q0, [sp, #64]                   // 16-byte Folded Spill\nldp q1, q0, [sp]                    // 32-byte Folded Reload\nbl fmodf\nfmov s1, s12\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr s0, [sp, #48]                   // 4-byte Folded Reload\nbl fmodf\nfmov s1, s11\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nldr s0, [sp, #112]                  // 4-byte Folded Reload\nbl fmodf\nstr q0, [sp, #112]                  // 16-byte Folded Spill\nldp s1, s0, [sp, #200]              // 8-byte Folded Reload\nbl fmodf\nldp q3, q2, [sp, #16]               // 32-byte Folded Reload\nldr q1, [sp, #96]                   // 16-byte Folded Reload\nldp d9, d8, [sp, #176]              // 16-byte Folded Reload\nldr x30, [sp, #192]                 // 8-byte Folded Reload\nldp d11, d10, [sp, #160]            // 16-byte Folded Reload\nmov v1.s[1], v2.s[0]\nldr q2, [sp, #48]                   // 16-byte Folded Reload\nldp d13, d12, [sp, #144]            // 16-byte Folded Reload\nmov v3.s[1], v2.s[0]\nldr q2, [sp, #80]                   // 16-byte Folded Reload\nldp d15, d14, [sp, #128]            // 16-byte Folded Reload\nmov v1.s[2], v2.s[0]\nldr q2, [sp, #112]                  // 16-byte Folded Reload\nmov v3.s[2], v2.s[0]\nldr q2, [sp, #64]                   // 16-byte Folded Reload\nmov v1.s[3], v2.s[0]\nmov v3.s[3], v0.s[0]\nmov v2.16b, v1.16b\nmov v1.16b, v3.16b\nmov v0.16b, v2.16b\nadd sp, sp, #208\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, <8 x float> %b) {\n  %r = frem <8 x float> %a, %b\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <8 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "frem",
  "ty": "<8 x float>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 104,
  "lat": 4,
  "sizelat": 4,
  "size": 55,
  "gisize": 62,
  "extrasize": 0,
  "asm": "sub sp, sp, #64\nstr x30, [sp, #48]                  // 8-byte Folded Spill\nstp q0, q1, [sp]                    // 32-byte Folded Spill\nmov s0, v0.s[1]\nfmov s1, #6.00000000\nbl fmodf\nfmov s1, #7.00000000\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nbl fmodf\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v0.s[1], v1.s[0]\nfmov s1, #7.00000000\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nmov s0, v0.s[2]\nbl fmodf\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.s[2], v0.s[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov s0, v0.s[3]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, #6.00000000\nbl fmodf\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.s[3], v0.s[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov s0, v0.s[1]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, #6.00000000\nbl fmodf\nfmov s1, #7.00000000\nstr q0, [sp]                        // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nbl fmodf\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v0.s[1], v1.s[0]\nfmov s1, #7.00000000\nstr q0, [sp]                        // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov s0, v0.s[2]\nbl fmodf\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v1.s[2], v0.s[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov s0, v0.s[3]\nstr q1, [sp]                        // 16-byte Folded Spill\nfmov s1, #6.00000000\nbl fmodf\nfmov s2, s0\nldr q1, [sp]                        // 16-byte Folded Reload\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nldr x30, [sp, #48]                  // 8-byte Folded Reload\nmov v1.s[3], v2.s[0]\nadd sp, sp, #64\nret",
  "giasm": "sub sp, sp, #176\nstp d13, d12, [sp, #112]            // 16-byte Folded Spill\nstp d11, d10, [sp, #128]            // 16-byte Folded Spill\nstp d9, d8, [sp, #144]              // 16-byte Folded Spill\nstr x30, [sp, #160]                 // 8-byte Folded Spill\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nmov s11, v1.s[1]\nmov s12, v1.s[2]\nmov s13, v1.s[3]\nfmov s1, #7.00000000\nmov s8, v0.s[1]\nmov s9, v0.s[2]\nmov s10, v0.s[3]\nbl fmodf\nstr q0, [sp, #96]                   // 16-byte Folded Spill\nfmov s1, #6.00000000\nfmov s0, s8\nbl fmodf\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfmov s0, s9\nbl fmodf\nstr q0, [sp, #80]                   // 16-byte Folded Spill\nfmov s1, #6.00000000\nfmov s0, s10\nbl fmodf\nfmov s1, #7.00000000\nstr q0, [sp, #64]                   // 16-byte Folded Spill\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nbl fmodf\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, #6.00000000\nfmov s0, s11\nbl fmodf\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfmov s0, s12\nbl fmodf\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s1, #6.00000000\nfmov s0, s13\nbl fmodf\nldp q3, q2, [sp, #32]               // 32-byte Folded Reload\nldr q1, [sp, #96]                   // 16-byte Folded Reload\nldp d9, d8, [sp, #144]              // 16-byte Folded Reload\nldr x30, [sp, #160]                 // 8-byte Folded Reload\nldp d11, d10, [sp, #128]            // 16-byte Folded Reload\nmov v1.s[1], v2.s[0]\nldr q2, [sp, #16]                   // 16-byte Folded Reload\nldp d13, d12, [sp, #112]            // 16-byte Folded Reload\nmov v3.s[1], v2.s[0]\nldr q2, [sp, #80]                   // 16-byte Folded Reload\nmov v1.s[2], v2.s[0]\nldr q2, [sp]                        // 16-byte Folded Reload\nmov v3.s[2], v2.s[0]\nldr q2, [sp, #64]                   // 16-byte Folded Reload\nmov v1.s[3], v2.s[0]\nmov v3.s[3], v0.s[0]\nmov v2.16b, v1.16b\nmov v1.16b, v3.16b\nmov v0.16b, v2.16b\nadd sp, sp, #176\nret",
  "ll": "define <8 x float> @test(<8 x float> %a) {\n  %r = frem <8 x float> %a, <float 7.0, float 6.0, float 7.0, float 6.0, float 7.0, float 6.0, float 7.0, float 6.0>\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <8 x float> %a, <float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00>\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "frem",
  "ty": "<8 x float>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 106,
  "lat": 6,
  "sizelat": 6,
  "size": 58,
  "gisize": 73,
  "extrasize": 0,
  "asm": "sub sp, sp, #64\nstr d8, [sp, #48]                   // 8-byte Folded Spill\nstr x30, [sp, #56]                  // 8-byte Folded Spill\nstp q0, q1, [sp]                    // 32-byte Folded Spill\nmov s0, v0.s[1]\nfmov s1, s2\nfmov s8, s2\nbl fmodf\nfmov s1, s8\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nbl fmodf\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v0.s[1], v1.s[0]\nfmov s1, s8\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nmov s0, v0.s[2]\nbl fmodf\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.s[2], v0.s[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov s0, v0.s[3]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, s8\nbl fmodf\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.s[3], v0.s[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov s0, v0.s[1]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, s8\nbl fmodf\nfmov s1, s8\nstr q0, [sp]                        // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nbl fmodf\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v0.s[1], v1.s[0]\nfmov s1, s8\nstr q0, [sp]                        // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov s0, v0.s[2]\nbl fmodf\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v1.s[2], v0.s[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov s0, v0.s[3]\nstr q1, [sp]                        // 16-byte Folded Spill\nfmov s1, s8\nbl fmodf\nfmov s2, s0\nldr q1, [sp]                        // 16-byte Folded Reload\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nldr x30, [sp, #56]                  // 8-byte Folded Reload\nldr d8, [sp, #48]                   // 8-byte Folded Reload\nmov v1.s[3], v2.s[0]\nadd sp, sp, #64\nret",
  "giasm": "sub sp, sp, #208\nstp d15, d14, [sp, #128]            // 16-byte Folded Spill\nstp d13, d12, [sp, #144]            // 16-byte Folded Spill\nstp d11, d10, [sp, #160]            // 16-byte Folded Spill\nstp d9, d8, [sp, #176]              // 16-byte Folded Spill\nstr x30, [sp, #192]                 // 8-byte Folded Spill\nmov v3.16b, v1.16b\ndup v1.4s, v2.s[0]\ndup v4.4s, v2.s[0]\nmov s8, v0.s[1]\nmov s9, v0.s[2]\nmov s10, v0.s[3]\nmov s2, v3.s[1]\nmov s5, v3.s[3]\nstp q4, q3, [sp]                    // 32-byte Folded Spill\nmov s14, v1.s[1]\nmov s15, v1.s[2]\nmov s13, v1.s[3]\nmov s12, v4.s[1]\nmov s11, v4.s[2]\nstr s2, [sp, #48]                   // 4-byte Folded Spill\nmov s2, v3.s[2]\nstr s2, [sp, #112]                  // 4-byte Folded Spill\nmov s2, v4.s[3]\nstp s2, s5, [sp, #200]              // 8-byte Folded Spill\nbl fmodf\nstr q0, [sp, #96]                   // 16-byte Folded Spill\nfmov s1, s14\nfmov s0, s8\nbl fmodf\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, s15\nfmov s0, s9\nbl fmodf\nstr q0, [sp, #80]                   // 16-byte Folded Spill\nfmov s1, s13\nfmov s0, s10\nbl fmodf\nstr q0, [sp, #64]                   // 16-byte Folded Spill\nldp q1, q0, [sp]                    // 32-byte Folded Reload\nbl fmodf\nfmov s1, s12\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr s0, [sp, #48]                   // 4-byte Folded Reload\nbl fmodf\nfmov s1, s11\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nldr s0, [sp, #112]                  // 4-byte Folded Reload\nbl fmodf\nstr q0, [sp, #112]                  // 16-byte Folded Spill\nldp s1, s0, [sp, #200]              // 8-byte Folded Reload\nbl fmodf\nldp q3, q2, [sp, #16]               // 32-byte Folded Reload\nldr q1, [sp, #96]                   // 16-byte Folded Reload\nldp d9, d8, [sp, #176]              // 16-byte Folded Reload\nldr x30, [sp, #192]                 // 8-byte Folded Reload\nldp d11, d10, [sp, #160]            // 16-byte Folded Reload\nmov v1.s[1], v2.s[0]\nldr q2, [sp, #48]                   // 16-byte Folded Reload\nldp d13, d12, [sp, #144]            // 16-byte Folded Reload\nmov v3.s[1], v2.s[0]\nldr q2, [sp, #80]                   // 16-byte Folded Reload\nldp d15, d14, [sp, #128]            // 16-byte Folded Reload\nmov v1.s[2], v2.s[0]\nldr q2, [sp, #112]                  // 16-byte Folded Reload\nmov v3.s[2], v2.s[0]\nldr q2, [sp, #64]                   // 16-byte Folded Reload\nmov v1.s[3], v2.s[0]\nmov v3.s[3], v0.s[0]\nmov v2.16b, v1.16b\nmov v1.16b, v3.16b\nmov v0.16b, v2.16b\nadd sp, sp, #208\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, float %bs) {\n  %i = insertelement <8 x float> poison, float %bs, i64 0\n  %b = shufflevector <8 x float> %i, <8 x float> poison, <8 x i32> zeroinitializer\n  %r = frem <8 x float> %a, %b\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <8 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <8 x float> %i, <8 x float> poison, <8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <8 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "frem",
  "ty": "<8 x float>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 104,
  "lat": 4,
  "sizelat": 4,
  "size": 55,
  "gisize": 62,
  "extrasize": 0,
  "asm": "sub sp, sp, #64\nstr x30, [sp, #48]                  // 8-byte Folded Spill\nstp q0, q1, [sp]                    // 32-byte Folded Spill\nmov s0, v0.s[1]\nfmov s1, #7.00000000\nbl fmodf\nfmov s1, #7.00000000\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nbl fmodf\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v0.s[1], v1.s[0]\nfmov s1, #7.00000000\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nmov s0, v0.s[2]\nbl fmodf\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.s[2], v0.s[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov s0, v0.s[3]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nbl fmodf\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.s[3], v0.s[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov s0, v0.s[1]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nbl fmodf\nfmov s1, #7.00000000\nstr q0, [sp]                        // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nbl fmodf\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v0.s[1], v1.s[0]\nfmov s1, #7.00000000\nstr q0, [sp]                        // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov s0, v0.s[2]\nbl fmodf\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v1.s[2], v0.s[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov s0, v0.s[3]\nstr q1, [sp]                        // 16-byte Folded Spill\nfmov s1, #7.00000000\nbl fmodf\nfmov s2, s0\nldr q1, [sp]                        // 16-byte Folded Reload\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nldr x30, [sp, #48]                  // 8-byte Folded Reload\nmov v1.s[3], v2.s[0]\nadd sp, sp, #64\nret",
  "giasm": "sub sp, sp, #176\nstp d13, d12, [sp, #112]            // 16-byte Folded Spill\nstp d11, d10, [sp, #128]            // 16-byte Folded Spill\nstp d9, d8, [sp, #144]              // 16-byte Folded Spill\nstr x30, [sp, #160]                 // 8-byte Folded Spill\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nmov s11, v1.s[1]\nmov s12, v1.s[2]\nmov s13, v1.s[3]\nfmov s1, #7.00000000\nmov s8, v0.s[1]\nmov s9, v0.s[2]\nmov s10, v0.s[3]\nbl fmodf\nstr q0, [sp, #96]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfmov s0, s8\nbl fmodf\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfmov s0, s9\nbl fmodf\nstr q0, [sp, #80]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfmov s0, s10\nbl fmodf\nfmov s1, #7.00000000\nstr q0, [sp, #64]                   // 16-byte Folded Spill\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nbl fmodf\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfmov s0, s11\nbl fmodf\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfmov s0, s12\nbl fmodf\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s1, #7.00000000\nfmov s0, s13\nbl fmodf\nldp q3, q2, [sp, #32]               // 32-byte Folded Reload\nldr q1, [sp, #96]                   // 16-byte Folded Reload\nldp d9, d8, [sp, #144]              // 16-byte Folded Reload\nldr x30, [sp, #160]                 // 8-byte Folded Reload\nldp d11, d10, [sp, #128]            // 16-byte Folded Reload\nmov v1.s[1], v2.s[0]\nldr q2, [sp, #16]                   // 16-byte Folded Reload\nldp d13, d12, [sp, #112]            // 16-byte Folded Reload\nmov v3.s[1], v2.s[0]\nldr q2, [sp, #80]                   // 16-byte Folded Reload\nmov v1.s[2], v2.s[0]\nldr q2, [sp]                        // 16-byte Folded Reload\nmov v3.s[2], v2.s[0]\nldr q2, [sp, #64]                   // 16-byte Folded Reload\nmov v1.s[3], v2.s[0]\nmov v3.s[3], v0.s[0]\nmov v2.16b, v1.16b\nmov v1.16b, v3.16b\nmov v0.16b, v2.16b\nadd sp, sp, #176\nret",
  "ll": "define <8 x float> @test(<8 x float> %a) {\n  %r = frem <8 x float> %a, <float 7.0, float 7.0, float 7.0, float 7.0, float 7.0, float 7.0, float 7.0, float 7.0>\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <8 x float> %a, splat (float 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "frem",
  "ty": "<2 x double>",
  "variant": "binop",
  "codesize": 4,
  "thru": 24,
  "lat": 4,
  "sizelat": 4,
  "size": 13,
  "gisize": 16,
  "extrasize": 0,
  "asm": "sub sp, sp, #64\nstr x30, [sp, #48]                  // 8-byte Folded Spill\nstp q0, q1, [sp]                    // 32-byte Folded Spill\nmov d0, v0.d[1]\nmov d1, v1.d[1]\nbl fmod\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldp q0, q1, [sp]                    // 32-byte Folded Reload\nbl fmod\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nldr x30, [sp, #48]                  // 8-byte Folded Reload\nmov v0.d[1], v1.d[0]\nadd sp, sp, #64\nret",
  "giasm": "sub sp, sp, #48\nstp d9, d8, [sp, #16]               // 16-byte Folded Spill\nstr x30, [sp, #32]                  // 8-byte Folded Spill\nmov d8, v0.d[1]\nmov d9, v1.d[1]\nbl fmod\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov d1, d9\nfmov d0, d8\nbl fmod\nldr q1, [sp]                        // 16-byte Folded Reload\nldp d9, d8, [sp, #16]               // 16-byte Folded Reload\nldr x30, [sp, #32]                  // 8-byte Folded Reload\nmov v1.d[1], v0.d[0]\nmov v0.16b, v1.16b\nadd sp, sp, #48\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, <2 x double> %b) {\n  %r = frem <2 x double> %a, %b\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <2 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "frem",
  "ty": "<2 x double>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 24,
  "lat": 4,
  "sizelat": 4,
  "size": 14,
  "gisize": 16,
  "extrasize": 0,
  "asm": "sub sp, sp, #48\nstr x30, [sp, #32]                  // 8-byte Folded Spill\nstr q0, [sp]                        // 16-byte Folded Spill\nmov d0, v0.d[1]\nfmov d1, #6.00000000\nbl fmod\nfmov d1, #7.00000000\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nbl fmod\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nldr x30, [sp, #32]                  // 8-byte Folded Reload\nmov v0.d[1], v1.d[0]\nadd sp, sp, #48\nret",
  "giasm": "sub sp, sp, #32\nstr d8, [sp, #16]                   // 8-byte Folded Spill\nstr x30, [sp, #24]                  // 8-byte Folded Spill\nfmov d1, #7.00000000\nmov d8, v0.d[1]\nbl fmod\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov d1, #6.00000000\nfmov d0, d8\nbl fmod\nldr q1, [sp]                        // 16-byte Folded Reload\nldr x30, [sp, #24]                  // 8-byte Folded Reload\nldr d8, [sp, #16]                   // 8-byte Folded Reload\nmov v1.d[1], v0.d[0]\nmov v0.16b, v1.16b\nadd sp, sp, #32\nret",
  "ll": "define <2 x double> @test(<2 x double> %a) {\n  %r = frem <2 x double> %a, <double 7.0, double 6.0>\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <2 x double> %a, <double 7.000000e+00, double 6.000000e+00>\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "frem",
  "ty": "<2 x double>",
  "variant": "binopsplat",
  "codesize": 5,
  "thru": 25,
  "lat": 5,
  "sizelat": 5,
  "size": 16,
  "gisize": 17,
  "extrasize": 0,
  "asm": "sub sp, sp, #48\nstr d8, [sp, #32]                   // 8-byte Folded Spill\nstr x30, [sp, #40]                  // 8-byte Folded Spill\nstr q0, [sp]                        // 16-byte Folded Spill\nmov d0, v0.d[1]\nfmov d8, d1\nbl fmod\nfmov d1, d8\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nbl fmod\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nldr x30, [sp, #40]                  // 8-byte Folded Reload\nldr d8, [sp, #32]                   // 8-byte Folded Reload\nmov v0.d[1], v1.d[0]\nadd sp, sp, #48\nret",
  "giasm": "sub sp, sp, #48\nstp d9, d8, [sp, #16]               // 16-byte Folded Spill\nstr x30, [sp, #32]                  // 8-byte Folded Spill\nmov d8, v0.d[1]\ndup v1.2d, v1.d[0]\nmov d9, v1.d[1]\nbl fmod\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov d1, d9\nfmov d0, d8\nbl fmod\nldr q1, [sp]                        // 16-byte Folded Reload\nldp d9, d8, [sp, #16]               // 16-byte Folded Reload\nldr x30, [sp, #32]                  // 8-byte Folded Reload\nmov v1.d[1], v0.d[0]\nmov v0.16b, v1.16b\nadd sp, sp, #48\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, double %bs) {\n  %i = insertelement <2 x double> poison, double %bs, i64 0\n  %b = shufflevector <2 x double> %i, <2 x double> poison, <2 x i32> zeroinitializer\n  %r = frem <2 x double> %a, %b\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <2 x double> poison, double %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <2 x double> %i, <2 x double> poison, <2 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <2 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "frem",
  "ty": "<2 x double>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 24,
  "lat": 4,
  "sizelat": 4,
  "size": 14,
  "gisize": 16,
  "extrasize": 0,
  "asm": "sub sp, sp, #48\nstr x30, [sp, #32]                  // 8-byte Folded Spill\nstr q0, [sp]                        // 16-byte Folded Spill\nmov d0, v0.d[1]\nfmov d1, #7.00000000\nbl fmod\nfmov d1, #7.00000000\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nbl fmod\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nldr x30, [sp, #32]                  // 8-byte Folded Reload\nmov v0.d[1], v1.d[0]\nadd sp, sp, #48\nret",
  "giasm": "sub sp, sp, #32\nstr d8, [sp, #16]                   // 8-byte Folded Spill\nstr x30, [sp, #24]                  // 8-byte Folded Spill\nfmov d1, #7.00000000\nmov d8, v0.d[1]\nbl fmod\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov d1, #7.00000000\nfmov d0, d8\nbl fmod\nldr q1, [sp]                        // 16-byte Folded Reload\nldr x30, [sp, #24]                  // 8-byte Folded Reload\nldr d8, [sp, #16]                   // 8-byte Folded Reload\nmov v1.d[1], v0.d[0]\nmov v0.16b, v1.16b\nadd sp, sp, #32\nret",
  "ll": "define <2 x double> @test(<2 x double> %a) {\n  %r = frem <2 x double> %a, <double 7.0, double 7.0>\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <2 x double> %a, splat (double 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "frem",
  "ty": "<4 x double>",
  "variant": "binop",
  "codesize": 4,
  "thru": 48,
  "lat": 4,
  "sizelat": 4,
  "size": 25,
  "gisize": 34,
  "extrasize": 0,
  "asm": "sub sp, sp, #96\nstr x30, [sp, #80]                  // 8-byte Folded Spill\nstp q0, q2, [sp]                    // 32-byte Folded Spill\nmov d0, v0.d[1]\nstp q1, q3, [sp, #48]               // 32-byte Folded Spill\nmov d1, v2.d[1]\nbl fmod\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldp q0, q1, [sp]                    // 32-byte Folded Reload\nbl fmod\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v0.d[1], v1.d[0]\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldp q0, q1, [sp, #48]               // 32-byte Folded Reload\nmov d0, v0.d[1]\nmov d1, v1.d[1]\nbl fmod\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldp q0, q1, [sp, #48]               // 32-byte Folded Reload\nbl fmod\nfmov d1, d0\nldp q2, q0, [sp, #16]               // 32-byte Folded Reload\nldr x30, [sp, #80]                  // 8-byte Folded Reload\nmov v1.d[1], v2.d[0]\nadd sp, sp, #96\nret",
  "giasm": "sub sp, sp, #112\nstp d11, d10, [sp, #64]             // 16-byte Folded Spill\nstp d9, d8, [sp, #80]               // 16-byte Folded Spill\nstr x30, [sp, #96]                  // 8-byte Folded Spill\nmov v4.16b, v1.16b\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nmov v1.16b, v2.16b\nstr q3, [sp]                        // 16-byte Folded Spill\nmov d8, v0.d[1]\nmov d10, v2.d[1]\nmov d11, v3.d[1]\nmov d9, v4.d[1]\nbl fmod\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nfmov d1, d10\nfmov d0, d8\nbl fmod\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q1, [sp]                        // 16-byte Folded Reload\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nbl fmod\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov d1, d11\nfmov d0, d9\nbl fmod\nldp q3, q1, [sp, #16]               // 32-byte Folded Reload\nldr q2, [sp, #48]                   // 16-byte Folded Reload\nldp d9, d8, [sp, #80]               // 16-byte Folded Reload\nldr x30, [sp, #96]                  // 8-byte Folded Reload\nldp d11, d10, [sp, #64]             // 16-byte Folded Reload\nmov v2.d[1], v3.d[0]\nmov v1.d[1], v0.d[0]\nmov v0.16b, v2.16b\nadd sp, sp, #112\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, <4 x double> %b) {\n  %r = frem <4 x double> %a, %b\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <4 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "frem",
  "ty": "<4 x double>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 48,
  "lat": 4,
  "sizelat": 4,
  "size": 27,
  "gisize": 28,
  "extrasize": 0,
  "asm": "sub sp, sp, #64\nstr x30, [sp, #48]                  // 8-byte Folded Spill\nstr q0, [sp]                        // 16-byte Folded Spill\nmov d0, v0.d[1]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov d1, #6.00000000\nbl fmod\nfmov d1, #7.00000000\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nbl fmod\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v0.d[1], v1.d[0]\nfmov d1, #6.00000000\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nmov d0, v0.d[1]\nbl fmod\nfmov d1, #7.00000000\nstr q0, [sp]                        // 16-byte Folded Spill\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nbl fmod\nfmov d1, d0\nldp q2, q0, [sp]                    // 32-byte Folded Reload\nldr x30, [sp, #48]                  // 8-byte Folded Reload\nmov v1.d[1], v2.d[0]\nadd sp, sp, #64\nret",
  "giasm": "sub sp, sp, #80\nstp d9, d8, [sp, #48]               // 16-byte Folded Spill\nstr x30, [sp, #64]                  // 8-byte Folded Spill\nstr q1, [sp]                        // 16-byte Folded Spill\nmov d9, v1.d[1]\nfmov d1, #7.00000000\nmov d8, v0.d[1]\nbl fmod\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov d1, #6.00000000\nfmov d0, d8\nbl fmod\nfmov d1, #7.00000000\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nbl fmod\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov d1, #6.00000000\nfmov d0, d9\nbl fmod\nldp q2, q3, [sp, #16]               // 32-byte Folded Reload\nldr q1, [sp]                        // 16-byte Folded Reload\nldp d9, d8, [sp, #48]               // 16-byte Folded Reload\nldr x30, [sp, #64]                  // 8-byte Folded Reload\nmov v1.d[1], v0.d[0]\nmov v3.d[1], v2.d[0]\nmov v0.16b, v3.16b\nadd sp, sp, #80\nret",
  "ll": "define <4 x double> @test(<4 x double> %a) {\n  %r = frem <4 x double> %a, <double 7.0, double 6.0, double 7.0, double 6.0>\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <4 x double> %a, <double 7.000000e+00, double 6.000000e+00, double 7.000000e+00, double 6.000000e+00>\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "frem",
  "ty": "<4 x double>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 50,
  "lat": 6,
  "sizelat": 6,
  "size": 30,
  "gisize": 35,
  "extrasize": 0,
  "asm": "sub sp, sp, #64\nstr d8, [sp, #48]                   // 8-byte Folded Spill\nstr x30, [sp, #56]                  // 8-byte Folded Spill\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov d1, d2\nfmov d8, d2\nstr q0, [sp]                        // 16-byte Folded Spill\nmov d0, v0.d[1]\nbl fmod\nfmov d1, d8\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nbl fmod\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v0.d[1], v1.d[0]\nfmov d1, d8\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nmov d0, v0.d[1]\nbl fmod\nfmov d1, d8\nstr q0, [sp]                        // 16-byte Folded Spill\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nbl fmod\nfmov d1, d0\nldp q2, q0, [sp]                    // 32-byte Folded Reload\nldr x30, [sp, #56]                  // 8-byte Folded Reload\nldr d8, [sp, #48]                   // 8-byte Folded Reload\nmov v1.d[1], v2.d[0]\nadd sp, sp, #64\nret",
  "giasm": "sub sp, sp, #112\nstp d11, d10, [sp, #64]             // 16-byte Folded Spill\nstp d9, d8, [sp, #80]               // 16-byte Folded Spill\nstr x30, [sp, #96]                  // 8-byte Folded Spill\nmov v3.16b, v1.16b\nstr q1, [sp, #32]                   // 16-byte Folded Spill\ndup v1.2d, v2.d[0]\ndup v2.2d, v2.d[0]\nmov d8, v0.d[1]\nmov d9, v3.d[1]\nmov d10, v1.d[1]\nstr q2, [sp]                        // 16-byte Folded Spill\nmov d11, v2.d[1]\nbl fmod\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nfmov d1, d10\nfmov d0, d8\nbl fmod\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q1, [sp]                        // 16-byte Folded Reload\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nbl fmod\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov d1, d11\nfmov d0, d9\nbl fmod\nldp q3, q1, [sp, #16]               // 32-byte Folded Reload\nldr q2, [sp, #48]                   // 16-byte Folded Reload\nldp d9, d8, [sp, #80]               // 16-byte Folded Reload\nldr x30, [sp, #96]                  // 8-byte Folded Reload\nldp d11, d10, [sp, #64]             // 16-byte Folded Reload\nmov v2.d[1], v3.d[0]\nmov v1.d[1], v0.d[0]\nmov v0.16b, v2.16b\nadd sp, sp, #112\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, double %bs) {\n  %i = insertelement <4 x double> poison, double %bs, i64 0\n  %b = shufflevector <4 x double> %i, <4 x double> poison, <4 x i32> zeroinitializer\n  %r = frem <4 x double> %a, %b\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <4 x double> poison, double %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <4 x double> %i, <4 x double> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <4 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "frem",
  "ty": "<4 x double>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 48,
  "lat": 4,
  "sizelat": 4,
  "size": 27,
  "gisize": 28,
  "extrasize": 0,
  "asm": "sub sp, sp, #64\nstr x30, [sp, #48]                  // 8-byte Folded Spill\nstr q0, [sp]                        // 16-byte Folded Spill\nmov d0, v0.d[1]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov d1, #7.00000000\nbl fmod\nfmov d1, #7.00000000\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nbl fmod\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v0.d[1], v1.d[0]\nfmov d1, #7.00000000\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nmov d0, v0.d[1]\nbl fmod\nfmov d1, #7.00000000\nstr q0, [sp]                        // 16-byte Folded Spill\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nbl fmod\nfmov d1, d0\nldp q2, q0, [sp]                    // 32-byte Folded Reload\nldr x30, [sp, #48]                  // 8-byte Folded Reload\nmov v1.d[1], v2.d[0]\nadd sp, sp, #64\nret",
  "giasm": "sub sp, sp, #80\nstp d9, d8, [sp, #48]               // 16-byte Folded Spill\nstr x30, [sp, #64]                  // 8-byte Folded Spill\nstr q1, [sp]                        // 16-byte Folded Spill\nmov d9, v1.d[1]\nfmov d1, #7.00000000\nmov d8, v0.d[1]\nbl fmod\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov d1, #7.00000000\nfmov d0, d8\nbl fmod\nfmov d1, #7.00000000\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nbl fmod\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov d1, #7.00000000\nfmov d0, d9\nbl fmod\nldp q2, q3, [sp, #16]               // 32-byte Folded Reload\nldr q1, [sp]                        // 16-byte Folded Reload\nldp d9, d8, [sp, #48]               // 16-byte Folded Reload\nldr x30, [sp, #64]                  // 8-byte Folded Reload\nmov v1.d[1], v0.d[0]\nmov v3.d[1], v2.d[0]\nmov v0.16b, v3.16b\nadd sp, sp, #80\nret",
  "ll": "define <4 x double> @test(<4 x double> %a) {\n  %r = frem <4 x double> %a, <double 7.0, double 7.0, double 7.0, double 7.0>\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <4 x double> %a, splat (double 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "minnum",
  "ty": "half",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcvt s1, h1\nfcvt s0, h0\nfminnm s0, s0, s1\nfcvt h0, s0\nret",
  "giasm": "fcvt s0, h0\nfcvt s1, h1\nfminnm s0, s0, s1\nfcvt h0, s0\nret",
  "ll": "define half @test(half %a, half %b) {\n  %r = call half @llvm.minnum(half %a, half %b)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call half @llvm.minnum.f16(half %a, half %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "minnum",
  "ty": "half",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 6,
  "extrasize": 0,
  "asm": "fcvt s0, h0\nfmov s1, #7.00000000\nfminnm s0, s0, s1\nfcvt h0, s0\nret",
  "giasm": "mov w8, #18176                      // =0x4700\nfcvt s0, h0\nfmov s1, w8\nfcvt s1, h1\nfminnm s0, s0, s1\nfcvt h0, s0\nret",
  "ll": "define half @test(half %a) {\n  %r = call half @llvm.minnum(half %a, half 7.0)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call half @llvm.minnum.f16(half %a, half 0xH4700)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "minnum",
  "ty": "float",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fminnm s0, s0, s1\nret",
  "giasm": "fminnm s0, s0, s1\nret",
  "ll": "define float @test(float %a, float %b) {\n  %r = call float @llvm.minnum(float %a, float %b)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call float @llvm.minnum.f32(float %a, float %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "minnum",
  "ty": "float",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov s1, #7.00000000\nfminnm s0, s0, s1\nret",
  "giasm": "fmov s1, #7.00000000\nfminnm s0, s0, s1\nret",
  "ll": "define float @test(float %a) {\n  %r = call float @llvm.minnum(float %a, float 7.0)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call float @llvm.minnum.f32(float %a, float 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "minnum",
  "ty": "double",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fminnm d0, d0, d1\nret",
  "giasm": "fminnm d0, d0, d1\nret",
  "ll": "define double @test(double %a, double %b) {\n  %r = call double @llvm.minnum(double %a, double %b)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call double @llvm.minnum.f64(double %a, double %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "minnum",
  "ty": "double",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov d1, #7.00000000\nfminnm d0, d0, d1\nret",
  "giasm": "fmov d1, #7.00000000\nfminnm d0, d0, d1\nret",
  "ll": "define double @test(double %a) {\n  %r = call double @llvm.minnum(double %a, double 7.0)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call double @llvm.minnum.f64(double %a, double 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "minnum",
  "ty": "<4 x half>",
  "variant": "binop",
  "codesize": 22,
  "thru": 22,
  "lat": 22,
  "sizelat": 22,
  "size": 25,
  "gisize": 4,
  "extrasize": 0,
  "asm": "mov h2, v1.h[1]\nmov h3, v0.h[1]\nmov h4, v1.h[2]\nmov h5, v0.h[2]\nfcvt s6, h1\nfcvt s7, h0\nmov h1, v1.h[3]\nfcvt s2, h2\nfcvt s3, h3\nfcvt s1, h1\nfminnm s2, s3, s2\nfcvt s3, h4\nfcvt s4, h5\nfminnm s5, s7, s6\nmov h6, v0.h[3]\nfminnm s3, s4, s3\nfcvt h2, s2\nfcvt h0, s5\nfcvt s4, h6\nmov v0.h[1], v2.h[0]\nfcvt h2, s3\nfminnm s1, s4, s1\nmov v0.h[2], v2.h[0]\nfcvt h1, s1\nmov v0.h[3], v1.h[0]\nret",
  "giasm": "fcvtl v0.4s, v0.4h\nfcvtl v1.4s, v1.4h\nfminnm v0.4s, v0.4s, v1.4s\nfcvtn v0.4h, v0.4s\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, <4 x half> %b) {\n  %r = call <4 x half> @llvm.minnum(<4 x half> %a, <4 x half> %b)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 22 for instruction:   %r = call <4 x half> @llvm.minnum.v4f16(<4 x half> %a, <4 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "minnum",
  "ty": "<4 x half>",
  "variant": "binopconst",
  "codesize": 16,
  "thru": 16,
  "lat": 16,
  "sizelat": 16,
  "size": 20,
  "gisize": 6,
  "extrasize": 0,
  "asm": "mov h1, v0.h[1]\nmov h2, v0.h[2]\nfcvt s3, h0\nfmov s4, #6.00000000\nfmov s5, #7.00000000\nmov h6, v0.h[3]\nfcvt s1, h1\nfcvt s2, h2\nfminnm s3, s3, s5\nfminnm s1, s1, s4\nfminnm s2, s2, s5\nfcvt h0, s3\nfcvt s3, h6\nfcvt h1, s1\nmov v0.h[1], v1.h[0]\nfcvt h1, s2\nfminnm s2, s3, s4\nmov v0.h[2], v1.h[0]\nfcvt h1, s2\nmov v0.h[3], v1.h[0]\nret",
  "giasm": "adrp x8, .LCPI0_0\nfcvtl v0.4s, v0.4h\nldr d1, [x8, :lo12:.LCPI0_0]\nfcvtl v1.4s, v1.4h\nfminnm v0.4s, v0.4s, v1.4s\nfcvtn v0.4h, v0.4s\nret",
  "ll": "define <4 x half> @test(<4 x half> %a) {\n  %r = call <4 x half> @llvm.minnum(<4 x half> %a, <4 x half> <half 7.0, half 6.0, half 7.0, half 6.0>)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 16 for instruction:   %r = call <4 x half> @llvm.minnum.v4f16(<4 x half> %a, <4 x half> <half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "minnum",
  "ty": "<4 x half>",
  "variant": "binopsplat",
  "codesize": 23,
  "thru": 23,
  "lat": 23,
  "sizelat": 23,
  "size": 19,
  "gisize": 5,
  "extrasize": 0,
  "asm": "mov h2, v0.h[1]\nfcvt s1, h1\nfcvt s3, h0\nmov h4, v0.h[2]\nmov h5, v0.h[3]\nfcvt s2, h2\nfminnm s0, s3, s1\nfcvt s3, h4\nfcvt s4, h5\nfminnm s2, s2, s1\nfcvt h0, s0\nfminnm s3, s3, s1\nfminnm s1, s4, s1\nfcvt h2, s2\nfcvt h1, s1\nmov v0.h[1], v2.h[0]\nfcvt h2, s3\nmov v0.h[2], v2.h[0]\nmov v0.h[3], v1.h[0]\nret",
  "giasm": "fcvtl v0.4s, v0.4h\ndup v1.4h, v1.h[0]\nfcvtl v1.4s, v1.4h\nfminnm v0.4s, v0.4s, v1.4s\nfcvtn v0.4h, v0.4s\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, half %bs) {\n  %i = insertelement <4 x half> poison, half %bs, i64 0\n  %b = shufflevector <4 x half> %i, <4 x half> poison, <4 x i32> zeroinitializer\n  %r = call <4 x half> @llvm.minnum(<4 x half> %a, <4 x half> %b)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <4 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <4 x half> %i, <4 x half> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 22 for instruction:   %r = call <4 x half> @llvm.minnum.v4f16(<4 x half> %a, <4 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "minnum",
  "ty": "<4 x half>",
  "variant": "binopconstsplat",
  "codesize": 16,
  "thru": 16,
  "lat": 16,
  "sizelat": 16,
  "size": 19,
  "gisize": 5,
  "extrasize": 0,
  "asm": "mov h2, v0.h[1]\nfcvt s3, h0\nmov h4, v0.h[2]\nfmov s1, #7.00000000\nmov h5, v0.h[3]\nfcvt s2, h2\nfminnm s0, s3, s1\nfcvt s3, h4\nfcvt s4, h5\nfminnm s2, s2, s1\nfcvt h0, s0\nfminnm s3, s3, s1\nfminnm s1, s4, s1\nfcvt h2, s2\nfcvt h1, s1\nmov v0.h[1], v2.h[0]\nfcvt h2, s3\nmov v0.h[2], v2.h[0]\nmov v0.h[3], v1.h[0]\nret",
  "giasm": "movi v1.4h, #71, lsl #8\nfcvtl v0.4s, v0.4h\nfcvtl v1.4s, v1.4h\nfminnm v0.4s, v0.4s, v1.4s\nfcvtn v0.4h, v0.4s\nret",
  "ll": "define <4 x half> @test(<4 x half> %a) {\n  %r = call <4 x half> @llvm.minnum(<4 x half> %a, <4 x half> <half 7.0, half 7.0, half 7.0, half 7.0>)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 16 for instruction:   %r = call <4 x half> @llvm.minnum.v4f16(<4 x half> %a, <4 x half> splat (half 0xH4700))\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "minnum",
  "ty": "<8 x half>",
  "variant": "binop",
  "codesize": 50,
  "thru": 50,
  "lat": 50,
  "sizelat": 50,
  "size": 54,
  "gisize": 8,
  "extrasize": 0,
  "asm": "mov h2, v1.h[1]\nmov h3, v0.h[1]\nfcvt s4, h1\nfcvt s5, h0\nmov h6, v1.h[2]\nmov h7, v0.h[2]\nmov h16, v1.h[3]\nfcvt s2, h2\nfcvt s3, h3\nfminnm s4, s5, s4\nmov h5, v0.h[3]\nfcvt s6, h6\nfcvt s7, h7\nfcvt s16, h16\nfminnm s3, s3, s2\nfcvt s5, h5\nfcvt h2, s4\nfminnm s4, s7, s6\nmov h6, v1.h[4]\nmov h7, v0.h[4]\nfcvt h3, s3\nfminnm s5, s5, s16\nmov h16, v0.h[5]\nfcvt h4, s4\nmov v2.h[1], v3.h[0]\nfcvt s3, h6\nfcvt s6, h7\nmov h7, v1.h[5]\nfcvt h5, s5\nfcvt s16, h16\nmov v2.h[2], v4.h[0]\nmov h4, v1.h[6]\nfminnm s3, s6, s3\nmov h6, v0.h[6]\nfcvt s7, h7\nmov h1, v1.h[7]\nmov h0, v0.h[7]\nmov v2.h[3], v5.h[0]\nfcvt s4, h4\nfcvt h3, s3\nfcvt s5, h6\nfminnm s6, s16, s7\nfcvt s1, h1\nfcvt s0, h0\nmov v2.h[4], v3.h[0]\nfminnm s4, s5, s4\nfcvt h3, s6\nfminnm s0, s0, s1\nmov v2.h[5], v3.h[0]\nfcvt h3, s4\nfcvt h0, s0\nmov v2.h[6], v3.h[0]\nmov v2.h[7], v0.h[0]\nmov v0.16b, v2.16b\nret",
  "giasm": "fcvtl v2.4s, v0.4h\nfcvtl v3.4s, v1.4h\nfcvtl2 v0.4s, v0.8h\nfcvtl2 v1.4s, v1.8h\nfminnm v2.4s, v2.4s, v3.4s\nfminnm v1.4s, v0.4s, v1.4s\nfcvtn v0.4h, v2.4s\nfcvtn2 v0.8h, v1.4s\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, <8 x half> %b) {\n  %r = call <8 x half> @llvm.minnum(<8 x half> %a, <8 x half> %b)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 50 for instruction:   %r = call <8 x half> @llvm.minnum.v8f16(<8 x half> %a, <8 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "minnum",
  "ty": "<8 x half>",
  "variant": "binopconst",
  "codesize": 36,
  "thru": 36,
  "lat": 36,
  "sizelat": 36,
  "size": 41,
  "gisize": 9,
  "extrasize": 0,
  "asm": "mov h1, v0.h[1]\nfcvt s2, h0\nmov h3, v0.h[2]\nfmov s4, #6.00000000\nfmov s5, #7.00000000\nmov h6, v0.h[3]\nmov h16, v0.h[4]\nfcvt s1, h1\nfminnm s2, s2, s5\nfcvt s3, h3\nfcvt s6, h6\nfminnm s7, s1, s4\nfcvt h1, s2\nfminnm s2, s3, s5\nfminnm s6, s6, s4\nfcvt h3, s7\nfcvt s7, h16\nfcvt h2, s2\nfcvt h6, s6\nmov v1.h[1], v3.h[0]\nmov h3, v0.h[5]\nfminnm s7, s7, s5\nmov v1.h[2], v2.h[0]\nmov h2, v0.h[6]\nfcvt s3, h3\nmov h0, v0.h[7]\nmov v1.h[3], v6.h[0]\nfcvt h6, s7\nfcvt s2, h2\nfminnm s3, s3, s4\nfcvt s0, h0\nmov v1.h[4], v6.h[0]\nfminnm s2, s2, s5\nfcvt h3, s3\nfminnm s0, s0, s4\nfcvt h2, s2\nmov v1.h[5], v3.h[0]\nfcvt h0, s0\nmov v1.h[6], v2.h[0]\nmov v1.h[7], v0.h[0]\nmov v0.16b, v1.16b\nret",
  "giasm": "adrp x8, .LCPI0_0\nfcvtl v2.4s, v0.4h\nfcvtl2 v0.4s, v0.8h\nldr d1, [x8, :lo12:.LCPI0_0]\nfcvtl v1.4s, v1.4h\nfminnm v2.4s, v2.4s, v1.4s\nfminnm v1.4s, v0.4s, v1.4s\nfcvtn v0.4h, v2.4s\nfcvtn2 v0.8h, v1.4s\nret",
  "ll": "define <8 x half> @test(<8 x half> %a) {\n  %r = call <8 x half> @llvm.minnum(<8 x half> %a, <8 x half> <half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0>)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 36 for instruction:   %r = call <8 x half> @llvm.minnum.v8f16(<8 x half> %a, <8 x half> <half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "minnum",
  "ty": "<8 x half>",
  "variant": "binopsplat",
  "codesize": 51,
  "thru": 51,
  "lat": 51,
  "sizelat": 51,
  "size": 40,
  "gisize": 9,
  "extrasize": 0,
  "asm": "mov h3, v0.h[1]\nfcvt s2, h1\nfcvt s1, h0\nmov h4, v0.h[2]\nmov h5, v0.h[3]\nmov h6, v0.h[4]\nfcvt s3, h3\nfminnm s1, s1, s2\nfcvt s4, h4\nfcvt s5, h5\nfcvt s6, h6\nfminnm s3, s3, s2\nfcvt h1, s1\nfminnm s4, s4, s2\nfminnm s5, s5, s2\nfminnm s6, s6, s2\nfcvt h3, s3\nfcvt h4, s4\nfcvt h5, s5\nmov v1.h[1], v3.h[0]\nmov h3, v0.h[5]\nmov v1.h[2], v4.h[0]\nmov h4, v0.h[6]\nfcvt s3, h3\nmov h0, v0.h[7]\nmov v1.h[3], v5.h[0]\nfcvt h5, s6\nfcvt s4, h4\nfminnm s3, s3, s2\nfcvt s0, h0\nmov v1.h[4], v5.h[0]\nfminnm s4, s4, s2\nfcvt h3, s3\nfminnm s0, s0, s2\nmov v1.h[5], v3.h[0]\nfcvt h3, s4\nfcvt h0, s0\nmov v1.h[6], v3.h[0]\nmov v1.h[7], v0.h[0]\nmov v0.16b, v1.16b\nret",
  "giasm": "fcvtl v2.4s, v0.4h\nfcvtl2 v0.4s, v0.8h\ndup v1.8h, v1.h[0]\nfcvtl v3.4s, v1.4h\nfcvtl2 v1.4s, v1.8h\nfminnm v2.4s, v2.4s, v3.4s\nfminnm v1.4s, v0.4s, v1.4s\nfcvtn v0.4h, v2.4s\nfcvtn2 v0.8h, v1.4s\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, half %bs) {\n  %i = insertelement <8 x half> poison, half %bs, i64 0\n  %b = shufflevector <8 x half> %i, <8 x half> poison, <8 x i32> zeroinitializer\n  %r = call <8 x half> @llvm.minnum(<8 x half> %a, <8 x half> %b)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <8 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <8 x half> %i, <8 x half> poison, <8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 50 for instruction:   %r = call <8 x half> @llvm.minnum.v8f16(<8 x half> %a, <8 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "minnum",
  "ty": "<8 x half>",
  "variant": "binopconstsplat",
  "codesize": 36,
  "thru": 36,
  "lat": 36,
  "sizelat": 36,
  "size": 40,
  "gisize": 8,
  "extrasize": 0,
  "asm": "mov h1, v0.h[1]\nfcvt s3, h0\nmov h4, v0.h[2]\nfmov s2, #7.00000000\nmov h5, v0.h[3]\nmov h7, v0.h[4]\nfcvt s1, h1\nfminnm s3, s3, s2\nfcvt s4, h4\nfcvt s5, h5\nfminnm s6, s1, s2\nfcvt h1, s3\nfminnm s3, s4, s2\nfminnm s5, s5, s2\nfcvt h4, s6\nfcvt s6, h7\nfcvt h3, s3\nfcvt h5, s5\nmov v1.h[1], v4.h[0]\nmov h4, v0.h[5]\nfminnm s6, s6, s2\nmov v1.h[2], v3.h[0]\nmov h3, v0.h[6]\nfcvt s4, h4\nmov h0, v0.h[7]\nmov v1.h[3], v5.h[0]\nfcvt h5, s6\nfcvt s3, h3\nfminnm s4, s4, s2\nfcvt s0, h0\nmov v1.h[4], v5.h[0]\nfminnm s3, s3, s2\nfcvt h4, s4\nfminnm s0, s0, s2\nfcvt h3, s3\nmov v1.h[5], v4.h[0]\nfcvt h0, s0\nmov v1.h[6], v3.h[0]\nmov v1.h[7], v0.h[0]\nmov v0.16b, v1.16b\nret",
  "giasm": "movi v1.4h, #71, lsl #8\nfcvtl v2.4s, v0.4h\nfcvtl2 v0.4s, v0.8h\nfcvtl v1.4s, v1.4h\nfminnm v2.4s, v2.4s, v1.4s\nfminnm v1.4s, v0.4s, v1.4s\nfcvtn v0.4h, v2.4s\nfcvtn2 v0.8h, v1.4s\nret",
  "ll": "define <8 x half> @test(<8 x half> %a) {\n  %r = call <8 x half> @llvm.minnum(<8 x half> %a, <8 x half> <half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0>)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 36 for instruction:   %r = call <8 x half> @llvm.minnum.v8f16(<8 x half> %a, <8 x half> splat (half 0xH4700))\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "minnum",
  "ty": "<16 x half>",
  "variant": "binop",
  "codesize": 100,
  "thru": 100,
  "lat": 100,
  "sizelat": 100,
  "size": 108,
  "gisize": 16,
  "extrasize": 0,
  "asm": "mov h6, v2.h[1]\nmov h7, v0.h[1]\nfcvt s4, h2\nfcvt s5, h0\nmov h16, v3.h[1]\nmov h17, v1.h[1]\nmov h18, v2.h[2]\nmov h19, v0.h[2]\nfcvt s20, h3\nfcvt s21, h1\nmov h22, v3.h[2]\nmov h23, v1.h[2]\nfcvt s6, h6\nfcvt s7, h7\nmov h24, v0.h[6]\nfminnm s4, s5, s4\nfcvt s5, h16\nfcvt s16, h17\nfcvt s17, h18\nfcvt s18, h19\nmov h19, v0.h[3]\nfminnm s20, s21, s20\nfcvt s21, h22\nmov h22, v3.h[3]\nfminnm s6, s7, s6\nmov h7, v2.h[3]\nmov h25, v1.h[6]\nfcvt h4, s4\nfminnm s5, s16, s5\nfcvt s16, h23\nmov h23, v1.h[3]\nfminnm s17, s18, s17\nfcvt s18, h19\nfcvt h6, s6\nfcvt s7, h7\nfcvt h19, s5\nfcvt h5, s20\nfminnm s16, s16, s21\nfcvt s20, h23\nfcvt h17, s17\nmov h21, v2.h[4]\nmov h23, v1.h[4]\nmov v4.h[1], v6.h[0]\nfcvt s6, h22\nmov h22, v0.h[4]\nfminnm s7, s18, s7\nmov h18, v3.h[4]\nmov v5.h[1], v19.h[0]\nfcvt h16, s16\nfminnm s6, s20, s6\nmov v4.h[2], v17.h[0]\nfcvt s17, h21\nfcvt s19, h22\nfcvt h7, s7\nfcvt s18, h18\nfcvt s20, h23\nmov h21, v2.h[5]\nmov h22, v0.h[5]\nmov v5.h[2], v16.h[0]\nmov h16, v3.h[5]\nmov h23, v1.h[5]\nfcvt h6, s6\nmov h0, v0.h[7]\nmov h1, v1.h[7]\nfminnm s17, s19, s17\nmov h19, v2.h[6]\nmov v4.h[3], v7.h[0]\nfminnm s18, s20, s18\nmov h20, v3.h[6]\nfcvt s7, h21\nfcvt s21, h22\nfcvt s22, h24\nmov h2, v2.h[7]\nmov v5.h[3], v6.h[0]\nfcvt s6, h16\nfcvt s16, h23\nfcvt h17, s17\nfcvt s19, h19\nfcvt s23, h25\nfcvt h18, s18\nfcvt s20, h20\nmov h3, v3.h[7]\nfminnm s7, s21, s7\nfcvt s2, h2\nfcvt s0, h0\nfminnm s6, s16, s6\nfcvt s1, h1\nmov v4.h[4], v17.h[0]\nfminnm s16, s22, s19\nmov v5.h[4], v18.h[0]\nfminnm s17, s23, s20\nfcvt s3, h3\nfcvt h7, s7\nfminnm s0, s0, s2\nfcvt h6, s6\nfcvt h2, s16\nfminnm s1, s1, s3\nmov v4.h[5], v7.h[0]\nfcvt h0, s0\nmov v5.h[5], v6.h[0]\nfcvt h6, s17\nfcvt h1, s1\nmov v4.h[6], v2.h[0]\nmov v5.h[6], v6.h[0]\nmov v4.h[7], v0.h[0]\nmov v5.h[7], v1.h[0]\nmov v0.16b, v4.16b\nmov v1.16b, v5.16b\nret",
  "giasm": "fcvtl v4.4s, v0.4h\nfcvtl v5.4s, v1.4h\nfcvtl v6.4s, v2.4h\nfcvtl v7.4s, v3.4h\nfcvtl2 v0.4s, v0.8h\nfcvtl2 v1.4s, v1.8h\nfcvtl2 v2.4s, v2.8h\nfcvtl2 v3.4s, v3.8h\nfminnm v4.4s, v4.4s, v6.4s\nfminnm v5.4s, v5.4s, v7.4s\nfminnm v2.4s, v0.4s, v2.4s\nfminnm v3.4s, v1.4s, v3.4s\nfcvtn v0.4h, v4.4s\nfcvtn v1.4h, v5.4s\nfcvtn2 v0.8h, v2.4s\nfcvtn2 v1.8h, v3.4s\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, <16 x half> %b) {\n  %r = call <16 x half> @llvm.minnum(<16 x half> %a, <16 x half> %b)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 100 for instruction:   %r = call <16 x half> @llvm.minnum.v16f16(<16 x half> %a, <16 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "minnum",
  "ty": "<16 x half>",
  "variant": "binopconst",
  "codesize": 72,
  "thru": 72,
  "lat": 72,
  "sizelat": 72,
  "size": 80,
  "gisize": 15,
  "extrasize": 0,
  "asm": "mov h2, v0.h[1]\nmov h3, v1.h[1]\nfcvt s6, h0\nmov h7, v0.h[2]\nfcvt s16, h1\nmov h17, v1.h[2]\nfmov s4, #6.00000000\nfmov s5, #7.00000000\nmov h18, v0.h[3]\nmov h19, v1.h[3]\nmov h22, v0.h[4]\nmov h23, v1.h[4]\nfcvt s2, h2\nfcvt s3, h3\nfminnm s6, s6, s5\nfcvt s7, h7\nfminnm s16, s16, s5\nfcvt s17, h17\nfcvt s18, h18\nfcvt s19, h19\nfminnm s20, s2, s4\nfminnm s21, s3, s4\nfcvt h2, s6\nfminnm s6, s7, s5\nfcvt h3, s16\nfminnm s16, s17, s5\nfminnm s18, s18, s4\nfcvt h7, s20\nfcvt h17, s21\nfcvt s20, h22\nfcvt s21, h23\nfcvt h6, s6\nfcvt h16, s16\nfcvt h18, s18\nmov v2.h[1], v7.h[0]\nfminnm s7, s19, s4\nmov v3.h[1], v17.h[0]\nmov h17, v0.h[5]\nmov h19, v1.h[5]\nfminnm s20, s20, s5\nmov v2.h[2], v6.h[0]\nfminnm s6, s21, s5\nfcvt h7, s7\nmov v3.h[2], v16.h[0]\nmov h16, v0.h[6]\nfcvt s17, h17\nfcvt s19, h19\nmov h21, v1.h[6]\nmov h0, v0.h[7]\nmov h1, v1.h[7]\nmov v2.h[3], v18.h[0]\nfcvt h6, s6\nmov v3.h[3], v7.h[0]\nfcvt h7, s20\nfcvt s16, h16\nfminnm s17, s17, s4\nfminnm s18, s19, s4\nfcvt s19, h21\nfcvt s0, h0\nfcvt s1, h1\nmov v2.h[4], v7.h[0]\nmov v3.h[4], v6.h[0]\nfminnm s7, s16, s5\nfcvt h6, s17\nfcvt h16, s18\nfminnm s5, s19, s5\nfminnm s0, s0, s4\nfminnm s1, s1, s4\nmov v2.h[5], v6.h[0]\nmov v3.h[5], v16.h[0]\nfcvt h6, s7\nfcvt h4, s5\nfcvt h0, s0\nfcvt h1, s1\nmov v2.h[6], v6.h[0]\nmov v3.h[6], v4.h[0]\nmov v2.h[7], v0.h[0]\nmov v3.h[7], v1.h[0]\nmov v0.16b, v2.16b\nmov v1.16b, v3.16b\nret",
  "giasm": "adrp x8, .LCPI0_0\nfcvtl v3.4s, v0.4h\nfcvtl v4.4s, v1.4h\nldr d2, [x8, :lo12:.LCPI0_0]\nfcvtl2 v0.4s, v0.8h\nfcvtl2 v1.4s, v1.8h\nfcvtl v2.4s, v2.4h\nfminnm v3.4s, v3.4s, v2.4s\nfminnm v4.4s, v4.4s, v2.4s\nfminnm v5.4s, v0.4s, v2.4s\nfminnm v2.4s, v1.4s, v2.4s\nfcvtn v0.4h, v3.4s\nfcvtn v1.4h, v4.4s\nfcvtn2 v0.8h, v5.4s\nfcvtn2 v1.8h, v2.4s\nret",
  "ll": "define <16 x half> @test(<16 x half> %a) {\n  %r = call <16 x half> @llvm.minnum(<16 x half> %a, <16 x half> <half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0>)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 72 for instruction:   %r = call <16 x half> @llvm.minnum.v16f16(<16 x half> %a, <16 x half> <half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "minnum",
  "ty": "<16 x half>",
  "variant": "binopsplat",
  "codesize": 102,
  "thru": 102,
  "lat": 102,
  "sizelat": 102,
  "size": 79,
  "gisize": 18,
  "extrasize": 0,
  "asm": "mov h3, v0.h[1]\nmov h5, v1.h[1]\nfcvt s4, h2\nfcvt s2, h0\nmov h6, v0.h[2]\nfcvt s7, h1\nmov h16, v1.h[2]\nmov h17, v0.h[3]\nmov h18, v1.h[3]\nmov h19, v0.h[4]\nmov h20, v1.h[4]\nfcvt s3, h3\nfcvt s5, h5\nfminnm s2, s2, s4\nfcvt s6, h6\nfminnm s7, s7, s4\nfcvt s16, h16\nfcvt s17, h17\nfcvt s18, h18\nfminnm s3, s3, s4\nfminnm s5, s5, s4\nfcvt h2, s2\nfminnm s6, s6, s4\nfminnm s17, s17, s4\nfminnm s18, s18, s4\nfcvt h21, s3\nfcvt h3, s7\nfminnm s7, s16, s4\nfcvt h5, s5\nfcvt s16, h19\nfcvt s19, h20\nfcvt h6, s6\nmov h20, v1.h[5]\nfcvt h17, s17\nfcvt h18, s18\nmov v2.h[1], v21.h[0]\nfcvt h7, s7\nmov v3.h[1], v5.h[0]\nmov h5, v0.h[5]\nfminnm s16, s16, s4\nfcvt s20, h20\nmov v2.h[2], v6.h[0]\nfminnm s6, s19, s4\nmov h19, v1.h[6]\nmov v3.h[2], v7.h[0]\nmov h7, v0.h[6]\nfcvt s5, h5\nfcvt h16, s16\nmov h0, v0.h[7]\nmov h1, v1.h[7]\nmov v2.h[3], v17.h[0]\nfcvt h6, s6\nfcvt s17, h19\nmov v3.h[3], v18.h[0]\nfcvt s7, h7\nfminnm s5, s5, s4\nfminnm s18, s20, s4\nfcvt s0, h0\nfcvt s1, h1\nmov v2.h[4], v16.h[0]\nfminnm s16, s17, s4\nmov v3.h[4], v6.h[0]\nfcvt h5, s5\nfminnm s6, s7, s4\nfcvt h7, s18\nfminnm s0, s0, s4\nfminnm s1, s1, s4\nfcvt h4, s16\nmov v2.h[5], v5.h[0]\nfcvt h5, s6\nmov v3.h[5], v7.h[0]\nfcvt h0, s0\nfcvt h1, s1\nmov v2.h[6], v5.h[0]\nmov v3.h[6], v4.h[0]\nmov v2.h[7], v0.h[0]\nmov v3.h[7], v1.h[0]\nmov v0.16b, v2.16b\nmov v1.16b, v3.16b\nret",
  "giasm": "dup v3.8h, v2.h[0]\nfcvtl v4.4s, v0.4h\nfcvtl v5.4s, v1.4h\ndup v2.8h, v2.h[0]\nfcvtl2 v0.4s, v0.8h\nfcvtl2 v1.4s, v1.8h\nfcvtl v6.4s, v3.4h\nfcvtl2 v3.4s, v3.8h\nfcvtl v7.4s, v2.4h\nfcvtl2 v2.4s, v2.8h\nfminnm v4.4s, v4.4s, v6.4s\nfminnm v3.4s, v0.4s, v3.4s\nfminnm v5.4s, v5.4s, v7.4s\nfminnm v2.4s, v1.4s, v2.4s\nfcvtn v0.4h, v4.4s\nfcvtn v1.4h, v5.4s\nfcvtn2 v0.8h, v3.4s\nfcvtn2 v1.8h, v2.4s\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, half %bs) {\n  %i = insertelement <16 x half> poison, half %bs, i64 0\n  %b = shufflevector <16 x half> %i, <16 x half> poison, <16 x i32> zeroinitializer\n  %r = call <16 x half> @llvm.minnum(<16 x half> %a, <16 x half> %b)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <16 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <16 x half> %i, <16 x half> poison, <16 x i32> zeroinitializer\nCost Model: Found an estimated cost of 100 for instruction:   %r = call <16 x half> @llvm.minnum.v16f16(<16 x half> %a, <16 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "minnum",
  "ty": "<16 x half>",
  "variant": "binopconstsplat",
  "codesize": 72,
  "thru": 72,
  "lat": 72,
  "sizelat": 72,
  "size": 79,
  "gisize": 14,
  "extrasize": 0,
  "asm": "mov h2, v0.h[1]\nmov h3, v1.h[1]\nfcvt s5, h0\nmov h6, v0.h[2]\nfcvt s7, h1\nmov h16, v1.h[2]\nfmov s4, #7.00000000\nmov h17, v0.h[3]\nmov h18, v1.h[3]\nmov h21, v0.h[4]\nmov h22, v1.h[4]\nfcvt s2, h2\nfcvt s3, h3\nfminnm s5, s5, s4\nfcvt s6, h6\nfminnm s7, s7, s4\nfcvt s16, h16\nfcvt s17, h17\nfcvt s18, h18\nfminnm s19, s2, s4\nfminnm s20, s3, s4\nfcvt h2, s5\nfminnm s5, s6, s4\nfcvt h3, s7\nfminnm s7, s16, s4\nfminnm s17, s17, s4\nfcvt h6, s19\nfcvt h16, s20\nfcvt s19, h21\nfcvt s20, h22\nfcvt h5, s5\nfcvt h7, s7\nfcvt h17, s17\nmov v2.h[1], v6.h[0]\nfminnm s6, s18, s4\nmov v3.h[1], v16.h[0]\nmov h16, v0.h[5]\nmov h18, v1.h[5]\nfminnm s19, s19, s4\nmov v2.h[2], v5.h[0]\nfminnm s5, s20, s4\nfcvt h6, s6\nmov v3.h[2], v7.h[0]\nmov h7, v0.h[6]\nfcvt s16, h16\nmov h20, v1.h[6]\nfcvt s18, h18\nmov h0, v0.h[7]\nmov h1, v1.h[7]\nmov v2.h[3], v17.h[0]\nfcvt h5, s5\nmov v3.h[3], v6.h[0]\nfcvt h6, s19\nfcvt s7, h7\nfminnm s16, s16, s4\nfcvt s17, h20\nfminnm s18, s18, s4\nfcvt s0, h0\nfcvt s1, h1\nmov v2.h[4], v6.h[0]\nmov v3.h[4], v5.h[0]\nfminnm s6, s7, s4\nfcvt h5, s16\nfcvt h7, s18\nfminnm s16, s17, s4\nfminnm s0, s0, s4\nfminnm s1, s1, s4\nmov v2.h[5], v5.h[0]\nfcvt h5, s6\nmov v3.h[5], v7.h[0]\nfcvt h4, s16\nfcvt h0, s0\nfcvt h1, s1\nmov v2.h[6], v5.h[0]\nmov v3.h[6], v4.h[0]\nmov v2.h[7], v0.h[0]\nmov v3.h[7], v1.h[0]\nmov v0.16b, v2.16b\nmov v1.16b, v3.16b\nret",
  "giasm": "movi v2.4h, #71, lsl #8\nfcvtl v3.4s, v0.4h\nfcvtl v4.4s, v1.4h\nfcvtl2 v0.4s, v0.8h\nfcvtl2 v1.4s, v1.8h\nfcvtl v2.4s, v2.4h\nfminnm v3.4s, v3.4s, v2.4s\nfminnm v4.4s, v4.4s, v2.4s\nfminnm v5.4s, v0.4s, v2.4s\nfminnm v2.4s, v1.4s, v2.4s\nfcvtn v0.4h, v3.4s\nfcvtn v1.4h, v4.4s\nfcvtn2 v0.8h, v5.4s\nfcvtn2 v1.8h, v2.4s\nret",
  "ll": "define <16 x half> @test(<16 x half> %a) {\n  %r = call <16 x half> @llvm.minnum(<16 x half> %a, <16 x half> <half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0>)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 72 for instruction:   %r = call <16 x half> @llvm.minnum.v16f16(<16 x half> %a, <16 x half> splat (half 0xH4700))\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "minnum",
  "ty": "<2 x float>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fminnm v0.2s, v0.2s, v1.2s\nret",
  "giasm": "fminnm v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, <2 x float> %b) {\n  %r = call <2 x float> @llvm.minnum(<2 x float> %a, <2 x float> %b)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x float> @llvm.minnum.v2f32(<2 x float> %a, <2 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "minnum",
  "ty": "<2 x float>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr d1, [x8, :lo12:.LCPI0_0]\nfminnm v0.2s, v0.2s, v1.2s\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr d1, [x8, :lo12:.LCPI0_0]\nfminnm v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a) {\n  %r = call <2 x float> @llvm.minnum(<2 x float> %a, <2 x float> <float 7.0, float 6.0>)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x float> @llvm.minnum.v2f32(<2 x float> %a, <2 x float> <float 7.000000e+00, float 6.000000e+00>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "minnum",
  "ty": "<2 x float>",
  "variant": "binopsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "dup v1.2s, v1.s[0]\nfminnm v0.2s, v0.2s, v1.2s\nret",
  "giasm": "dup v1.2s, v1.s[0]\nfminnm v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, float %bs) {\n  %i = insertelement <2 x float> poison, float %bs, i64 0\n  %b = shufflevector <2 x float> %i, <2 x float> poison, <2 x i32> zeroinitializer\n  %r = call <2 x float> @llvm.minnum(<2 x float> %a, <2 x float> %b)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <2 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <2 x float> %i, <2 x float> poison, <2 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x float> @llvm.minnum.v2f32(<2 x float> %a, <2 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "minnum",
  "ty": "<2 x float>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov v1.2s, #7.00000000\nfminnm v0.2s, v0.2s, v1.2s\nret",
  "giasm": "fmov v1.2s, #7.00000000\nfminnm v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a) {\n  %r = call <2 x float> @llvm.minnum(<2 x float> %a, <2 x float> <float 7.0, float 7.0>)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x float> @llvm.minnum.v2f32(<2 x float> %a, <2 x float> splat (float 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "minnum",
  "ty": "<4 x float>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fminnm v0.4s, v0.4s, v1.4s\nret",
  "giasm": "fminnm v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, <4 x float> %b) {\n  %r = call <4 x float> @llvm.minnum(<4 x float> %a, <4 x float> %b)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x float> @llvm.minnum.v4f32(<4 x float> %a, <4 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "minnum",
  "ty": "<4 x float>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfminnm v0.4s, v0.4s, v1.4s\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfminnm v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a) {\n  %r = call <4 x float> @llvm.minnum(<4 x float> %a, <4 x float> <float 7.0, float 6.0, float 7.0, float 6.0>)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x float> @llvm.minnum.v4f32(<4 x float> %a, <4 x float> <float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "minnum",
  "ty": "<4 x float>",
  "variant": "binopsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "dup v1.4s, v1.s[0]\nfminnm v0.4s, v0.4s, v1.4s\nret",
  "giasm": "dup v1.4s, v1.s[0]\nfminnm v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, float %bs) {\n  %i = insertelement <4 x float> poison, float %bs, i64 0\n  %b = shufflevector <4 x float> %i, <4 x float> poison, <4 x i32> zeroinitializer\n  %r = call <4 x float> @llvm.minnum(<4 x float> %a, <4 x float> %b)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <4 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <4 x float> %i, <4 x float> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x float> @llvm.minnum.v4f32(<4 x float> %a, <4 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "minnum",
  "ty": "<4 x float>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov v1.4s, #7.00000000\nfminnm v0.4s, v0.4s, v1.4s\nret",
  "giasm": "fmov v1.4s, #7.00000000\nfminnm v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a) {\n  %r = call <4 x float> @llvm.minnum(<4 x float> %a, <4 x float> <float 7.0, float 7.0, float 7.0, float 7.0>)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x float> @llvm.minnum.v4f32(<4 x float> %a, <4 x float> splat (float 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "minnum",
  "ty": "<8 x float>",
  "variant": "binop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fminnm v1.4s, v1.4s, v3.4s\nfminnm v0.4s, v0.4s, v2.4s\nret",
  "giasm": "fminnm v0.4s, v0.4s, v2.4s\nfminnm v1.4s, v1.4s, v3.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, <8 x float> %b) {\n  %r = call <8 x float> @llvm.minnum(<8 x float> %a, <8 x float> %b)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x float> @llvm.minnum.v8f32(<8 x float> %a, <8 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "minnum",
  "ty": "<8 x float>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfminnm v0.4s, v0.4s, v2.4s\nfminnm v1.4s, v1.4s, v2.4s\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfminnm v0.4s, v0.4s, v2.4s\nfminnm v1.4s, v1.4s, v2.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a) {\n  %r = call <8 x float> @llvm.minnum(<8 x float> %a, <8 x float> <float 7.0, float 6.0, float 7.0, float 6.0, float 7.0, float 6.0, float 7.0, float 6.0>)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x float> @llvm.minnum.v8f32(<8 x float> %a, <8 x float> <float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "minnum",
  "ty": "<8 x float>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 6,
  "lat": 6,
  "sizelat": 6,
  "size": 3,
  "gisize": 4,
  "extrasize": 0,
  "asm": "dup v2.4s, v2.s[0]\nfminnm v0.4s, v0.4s, v2.4s\nfminnm v1.4s, v1.4s, v2.4s\nret",
  "giasm": "dup v3.4s, v2.s[0]\ndup v2.4s, v2.s[0]\nfminnm v0.4s, v0.4s, v3.4s\nfminnm v1.4s, v1.4s, v2.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, float %bs) {\n  %i = insertelement <8 x float> poison, float %bs, i64 0\n  %b = shufflevector <8 x float> %i, <8 x float> poison, <8 x i32> zeroinitializer\n  %r = call <8 x float> @llvm.minnum(<8 x float> %a, <8 x float> %b)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <8 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <8 x float> %i, <8 x float> poison, <8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x float> @llvm.minnum.v8f32(<8 x float> %a, <8 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "minnum",
  "ty": "<8 x float>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fmov v2.4s, #7.00000000\nfminnm v0.4s, v0.4s, v2.4s\nfminnm v1.4s, v1.4s, v2.4s\nret",
  "giasm": "fmov v2.4s, #7.00000000\nfminnm v0.4s, v0.4s, v2.4s\nfminnm v1.4s, v1.4s, v2.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a) {\n  %r = call <8 x float> @llvm.minnum(<8 x float> %a, <8 x float> <float 7.0, float 7.0, float 7.0, float 7.0, float 7.0, float 7.0, float 7.0, float 7.0>)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x float> @llvm.minnum.v8f32(<8 x float> %a, <8 x float> splat (float 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "minnum",
  "ty": "<2 x double>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fminnm v0.2d, v0.2d, v1.2d\nret",
  "giasm": "fminnm v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, <2 x double> %b) {\n  %r = call <2 x double> @llvm.minnum(<2 x double> %a, <2 x double> %b)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x double> @llvm.minnum.v2f64(<2 x double> %a, <2 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "minnum",
  "ty": "<2 x double>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfminnm v0.2d, v0.2d, v1.2d\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfminnm v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a) {\n  %r = call <2 x double> @llvm.minnum(<2 x double> %a, <2 x double> <double 7.0, double 6.0>)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x double> @llvm.minnum.v2f64(<2 x double> %a, <2 x double> <double 7.000000e+00, double 6.000000e+00>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "minnum",
  "ty": "<2 x double>",
  "variant": "binopsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "dup v1.2d, v1.d[0]\nfminnm v0.2d, v0.2d, v1.2d\nret",
  "giasm": "dup v1.2d, v1.d[0]\nfminnm v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, double %bs) {\n  %i = insertelement <2 x double> poison, double %bs, i64 0\n  %b = shufflevector <2 x double> %i, <2 x double> poison, <2 x i32> zeroinitializer\n  %r = call <2 x double> @llvm.minnum(<2 x double> %a, <2 x double> %b)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <2 x double> poison, double %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <2 x double> %i, <2 x double> poison, <2 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x double> @llvm.minnum.v2f64(<2 x double> %a, <2 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "minnum",
  "ty": "<2 x double>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov v1.2d, #7.00000000\nfminnm v0.2d, v0.2d, v1.2d\nret",
  "giasm": "fmov v1.2d, #7.00000000\nfminnm v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a) {\n  %r = call <2 x double> @llvm.minnum(<2 x double> %a, <2 x double> <double 7.0, double 7.0>)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x double> @llvm.minnum.v2f64(<2 x double> %a, <2 x double> splat (double 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "minnum",
  "ty": "<4 x double>",
  "variant": "binop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fminnm v1.2d, v1.2d, v3.2d\nfminnm v0.2d, v0.2d, v2.2d\nret",
  "giasm": "fminnm v0.2d, v0.2d, v2.2d\nfminnm v1.2d, v1.2d, v3.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, <4 x double> %b) {\n  %r = call <4 x double> @llvm.minnum(<4 x double> %a, <4 x double> %b)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x double> @llvm.minnum.v4f64(<4 x double> %a, <4 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "minnum",
  "ty": "<4 x double>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfminnm v0.2d, v0.2d, v2.2d\nfminnm v1.2d, v1.2d, v2.2d\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfminnm v0.2d, v0.2d, v2.2d\nfminnm v1.2d, v1.2d, v2.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a) {\n  %r = call <4 x double> @llvm.minnum(<4 x double> %a, <4 x double> <double 7.0, double 6.0, double 7.0, double 6.0>)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x double> @llvm.minnum.v4f64(<4 x double> %a, <4 x double> <double 7.000000e+00, double 6.000000e+00, double 7.000000e+00, double 6.000000e+00>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "minnum",
  "ty": "<4 x double>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 6,
  "lat": 6,
  "sizelat": 6,
  "size": 3,
  "gisize": 4,
  "extrasize": 0,
  "asm": "dup v2.2d, v2.d[0]\nfminnm v0.2d, v0.2d, v2.2d\nfminnm v1.2d, v1.2d, v2.2d\nret",
  "giasm": "dup v3.2d, v2.d[0]\ndup v2.2d, v2.d[0]\nfminnm v0.2d, v0.2d, v3.2d\nfminnm v1.2d, v1.2d, v2.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, double %bs) {\n  %i = insertelement <4 x double> poison, double %bs, i64 0\n  %b = shufflevector <4 x double> %i, <4 x double> poison, <4 x i32> zeroinitializer\n  %r = call <4 x double> @llvm.minnum(<4 x double> %a, <4 x double> %b)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <4 x double> poison, double %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <4 x double> %i, <4 x double> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x double> @llvm.minnum.v4f64(<4 x double> %a, <4 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "minnum",
  "ty": "<4 x double>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fmov v2.2d, #7.00000000\nfminnm v0.2d, v0.2d, v2.2d\nfminnm v1.2d, v1.2d, v2.2d\nret",
  "giasm": "fmov v2.2d, #7.00000000\nfminnm v0.2d, v0.2d, v2.2d\nfminnm v1.2d, v1.2d, v2.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a) {\n  %r = call <4 x double> @llvm.minnum(<4 x double> %a, <4 x double> <double 7.0, double 7.0, double 7.0, double 7.0>)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x double> @llvm.minnum.v4f64(<4 x double> %a, <4 x double> splat (double 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "maxnum",
  "ty": "half",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcvt s1, h1\nfcvt s0, h0\nfmaxnm s0, s0, s1\nfcvt h0, s0\nret",
  "giasm": "fcvt s0, h0\nfcvt s1, h1\nfmaxnm s0, s0, s1\nfcvt h0, s0\nret",
  "ll": "define half @test(half %a, half %b) {\n  %r = call half @llvm.maxnum(half %a, half %b)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call half @llvm.maxnum.f16(half %a, half %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "maxnum",
  "ty": "half",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 6,
  "extrasize": 0,
  "asm": "fcvt s0, h0\nfmov s1, #7.00000000\nfmaxnm s0, s0, s1\nfcvt h0, s0\nret",
  "giasm": "mov w8, #18176                      // =0x4700\nfcvt s0, h0\nfmov s1, w8\nfcvt s1, h1\nfmaxnm s0, s0, s1\nfcvt h0, s0\nret",
  "ll": "define half @test(half %a) {\n  %r = call half @llvm.maxnum(half %a, half 7.0)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call half @llvm.maxnum.f16(half %a, half 0xH4700)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "maxnum",
  "ty": "float",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmaxnm s0, s0, s1\nret",
  "giasm": "fmaxnm s0, s0, s1\nret",
  "ll": "define float @test(float %a, float %b) {\n  %r = call float @llvm.maxnum(float %a, float %b)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call float @llvm.maxnum.f32(float %a, float %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "maxnum",
  "ty": "float",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov s1, #7.00000000\nfmaxnm s0, s0, s1\nret",
  "giasm": "fmov s1, #7.00000000\nfmaxnm s0, s0, s1\nret",
  "ll": "define float @test(float %a) {\n  %r = call float @llvm.maxnum(float %a, float 7.0)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call float @llvm.maxnum.f32(float %a, float 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "maxnum",
  "ty": "double",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmaxnm d0, d0, d1\nret",
  "giasm": "fmaxnm d0, d0, d1\nret",
  "ll": "define double @test(double %a, double %b) {\n  %r = call double @llvm.maxnum(double %a, double %b)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call double @llvm.maxnum.f64(double %a, double %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "maxnum",
  "ty": "double",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov d1, #7.00000000\nfmaxnm d0, d0, d1\nret",
  "giasm": "fmov d1, #7.00000000\nfmaxnm d0, d0, d1\nret",
  "ll": "define double @test(double %a) {\n  %r = call double @llvm.maxnum(double %a, double 7.0)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call double @llvm.maxnum.f64(double %a, double 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "maxnum",
  "ty": "<4 x half>",
  "variant": "binop",
  "codesize": 22,
  "thru": 22,
  "lat": 22,
  "sizelat": 22,
  "size": 25,
  "gisize": 4,
  "extrasize": 0,
  "asm": "mov h2, v1.h[1]\nmov h3, v0.h[1]\nmov h4, v1.h[2]\nmov h5, v0.h[2]\nfcvt s6, h1\nfcvt s7, h0\nmov h1, v1.h[3]\nfcvt s2, h2\nfcvt s3, h3\nfcvt s1, h1\nfmaxnm s2, s3, s2\nfcvt s3, h4\nfcvt s4, h5\nfmaxnm s5, s7, s6\nmov h6, v0.h[3]\nfmaxnm s3, s4, s3\nfcvt h2, s2\nfcvt h0, s5\nfcvt s4, h6\nmov v0.h[1], v2.h[0]\nfcvt h2, s3\nfmaxnm s1, s4, s1\nmov v0.h[2], v2.h[0]\nfcvt h1, s1\nmov v0.h[3], v1.h[0]\nret",
  "giasm": "fcvtl v0.4s, v0.4h\nfcvtl v1.4s, v1.4h\nfmaxnm v0.4s, v0.4s, v1.4s\nfcvtn v0.4h, v0.4s\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, <4 x half> %b) {\n  %r = call <4 x half> @llvm.maxnum(<4 x half> %a, <4 x half> %b)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 22 for instruction:   %r = call <4 x half> @llvm.maxnum.v4f16(<4 x half> %a, <4 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<4 x half>",
  "variant": "binopconst",
  "codesize": 16,
  "thru": 16,
  "lat": 16,
  "sizelat": 16,
  "size": 20,
  "gisize": 6,
  "extrasize": 0,
  "asm": "mov h1, v0.h[1]\nmov h2, v0.h[2]\nfcvt s3, h0\nfmov s4, #6.00000000\nfmov s5, #7.00000000\nmov h6, v0.h[3]\nfcvt s1, h1\nfcvt s2, h2\nfmaxnm s3, s3, s5\nfmaxnm s1, s1, s4\nfmaxnm s2, s2, s5\nfcvt h0, s3\nfcvt s3, h6\nfcvt h1, s1\nmov v0.h[1], v1.h[0]\nfcvt h1, s2\nfmaxnm s2, s3, s4\nmov v0.h[2], v1.h[0]\nfcvt h1, s2\nmov v0.h[3], v1.h[0]\nret",
  "giasm": "adrp x8, .LCPI0_0\nfcvtl v0.4s, v0.4h\nldr d1, [x8, :lo12:.LCPI0_0]\nfcvtl v1.4s, v1.4h\nfmaxnm v0.4s, v0.4s, v1.4s\nfcvtn v0.4h, v0.4s\nret",
  "ll": "define <4 x half> @test(<4 x half> %a) {\n  %r = call <4 x half> @llvm.maxnum(<4 x half> %a, <4 x half> <half 7.0, half 6.0, half 7.0, half 6.0>)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 16 for instruction:   %r = call <4 x half> @llvm.maxnum.v4f16(<4 x half> %a, <4 x half> <half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<4 x half>",
  "variant": "binopsplat",
  "codesize": 23,
  "thru": 23,
  "lat": 23,
  "sizelat": 23,
  "size": 19,
  "gisize": 5,
  "extrasize": 0,
  "asm": "mov h2, v0.h[1]\nfcvt s1, h1\nfcvt s3, h0\nmov h4, v0.h[2]\nmov h5, v0.h[3]\nfcvt s2, h2\nfmaxnm s0, s3, s1\nfcvt s3, h4\nfcvt s4, h5\nfmaxnm s2, s2, s1\nfcvt h0, s0\nfmaxnm s3, s3, s1\nfmaxnm s1, s4, s1\nfcvt h2, s2\nfcvt h1, s1\nmov v0.h[1], v2.h[0]\nfcvt h2, s3\nmov v0.h[2], v2.h[0]\nmov v0.h[3], v1.h[0]\nret",
  "giasm": "fcvtl v0.4s, v0.4h\ndup v1.4h, v1.h[0]\nfcvtl v1.4s, v1.4h\nfmaxnm v0.4s, v0.4s, v1.4s\nfcvtn v0.4h, v0.4s\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, half %bs) {\n  %i = insertelement <4 x half> poison, half %bs, i64 0\n  %b = shufflevector <4 x half> %i, <4 x half> poison, <4 x i32> zeroinitializer\n  %r = call <4 x half> @llvm.maxnum(<4 x half> %a, <4 x half> %b)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <4 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <4 x half> %i, <4 x half> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 22 for instruction:   %r = call <4 x half> @llvm.maxnum.v4f16(<4 x half> %a, <4 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<4 x half>",
  "variant": "binopconstsplat",
  "codesize": 16,
  "thru": 16,
  "lat": 16,
  "sizelat": 16,
  "size": 19,
  "gisize": 5,
  "extrasize": 0,
  "asm": "mov h2, v0.h[1]\nfcvt s3, h0\nmov h4, v0.h[2]\nfmov s1, #7.00000000\nmov h5, v0.h[3]\nfcvt s2, h2\nfmaxnm s0, s3, s1\nfcvt s3, h4\nfcvt s4, h5\nfmaxnm s2, s2, s1\nfcvt h0, s0\nfmaxnm s3, s3, s1\nfmaxnm s1, s4, s1\nfcvt h2, s2\nfcvt h1, s1\nmov v0.h[1], v2.h[0]\nfcvt h2, s3\nmov v0.h[2], v2.h[0]\nmov v0.h[3], v1.h[0]\nret",
  "giasm": "movi v1.4h, #71, lsl #8\nfcvtl v0.4s, v0.4h\nfcvtl v1.4s, v1.4h\nfmaxnm v0.4s, v0.4s, v1.4s\nfcvtn v0.4h, v0.4s\nret",
  "ll": "define <4 x half> @test(<4 x half> %a) {\n  %r = call <4 x half> @llvm.maxnum(<4 x half> %a, <4 x half> <half 7.0, half 7.0, half 7.0, half 7.0>)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 16 for instruction:   %r = call <4 x half> @llvm.maxnum.v4f16(<4 x half> %a, <4 x half> splat (half 0xH4700))\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<8 x half>",
  "variant": "binop",
  "codesize": 50,
  "thru": 50,
  "lat": 50,
  "sizelat": 50,
  "size": 54,
  "gisize": 8,
  "extrasize": 0,
  "asm": "mov h2, v1.h[1]\nmov h3, v0.h[1]\nfcvt s4, h1\nfcvt s5, h0\nmov h6, v1.h[2]\nmov h7, v0.h[2]\nmov h16, v1.h[3]\nfcvt s2, h2\nfcvt s3, h3\nfmaxnm s4, s5, s4\nmov h5, v0.h[3]\nfcvt s6, h6\nfcvt s7, h7\nfcvt s16, h16\nfmaxnm s3, s3, s2\nfcvt s5, h5\nfcvt h2, s4\nfmaxnm s4, s7, s6\nmov h6, v1.h[4]\nmov h7, v0.h[4]\nfcvt h3, s3\nfmaxnm s5, s5, s16\nmov h16, v0.h[5]\nfcvt h4, s4\nmov v2.h[1], v3.h[0]\nfcvt s3, h6\nfcvt s6, h7\nmov h7, v1.h[5]\nfcvt h5, s5\nfcvt s16, h16\nmov v2.h[2], v4.h[0]\nmov h4, v1.h[6]\nfmaxnm s3, s6, s3\nmov h6, v0.h[6]\nfcvt s7, h7\nmov h1, v1.h[7]\nmov h0, v0.h[7]\nmov v2.h[3], v5.h[0]\nfcvt s4, h4\nfcvt h3, s3\nfcvt s5, h6\nfmaxnm s6, s16, s7\nfcvt s1, h1\nfcvt s0, h0\nmov v2.h[4], v3.h[0]\nfmaxnm s4, s5, s4\nfcvt h3, s6\nfmaxnm s0, s0, s1\nmov v2.h[5], v3.h[0]\nfcvt h3, s4\nfcvt h0, s0\nmov v2.h[6], v3.h[0]\nmov v2.h[7], v0.h[0]\nmov v0.16b, v2.16b\nret",
  "giasm": "fcvtl v2.4s, v0.4h\nfcvtl v3.4s, v1.4h\nfcvtl2 v0.4s, v0.8h\nfcvtl2 v1.4s, v1.8h\nfmaxnm v2.4s, v2.4s, v3.4s\nfmaxnm v1.4s, v0.4s, v1.4s\nfcvtn v0.4h, v2.4s\nfcvtn2 v0.8h, v1.4s\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, <8 x half> %b) {\n  %r = call <8 x half> @llvm.maxnum(<8 x half> %a, <8 x half> %b)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 50 for instruction:   %r = call <8 x half> @llvm.maxnum.v8f16(<8 x half> %a, <8 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<8 x half>",
  "variant": "binopconst",
  "codesize": 36,
  "thru": 36,
  "lat": 36,
  "sizelat": 36,
  "size": 41,
  "gisize": 9,
  "extrasize": 0,
  "asm": "mov h1, v0.h[1]\nfcvt s2, h0\nmov h3, v0.h[2]\nfmov s4, #6.00000000\nfmov s5, #7.00000000\nmov h6, v0.h[3]\nmov h16, v0.h[4]\nfcvt s1, h1\nfmaxnm s2, s2, s5\nfcvt s3, h3\nfcvt s6, h6\nfmaxnm s7, s1, s4\nfcvt h1, s2\nfmaxnm s2, s3, s5\nfmaxnm s6, s6, s4\nfcvt h3, s7\nfcvt s7, h16\nfcvt h2, s2\nfcvt h6, s6\nmov v1.h[1], v3.h[0]\nmov h3, v0.h[5]\nfmaxnm s7, s7, s5\nmov v1.h[2], v2.h[0]\nmov h2, v0.h[6]\nfcvt s3, h3\nmov h0, v0.h[7]\nmov v1.h[3], v6.h[0]\nfcvt h6, s7\nfcvt s2, h2\nfmaxnm s3, s3, s4\nfcvt s0, h0\nmov v1.h[4], v6.h[0]\nfmaxnm s2, s2, s5\nfcvt h3, s3\nfmaxnm s0, s0, s4\nfcvt h2, s2\nmov v1.h[5], v3.h[0]\nfcvt h0, s0\nmov v1.h[6], v2.h[0]\nmov v1.h[7], v0.h[0]\nmov v0.16b, v1.16b\nret",
  "giasm": "adrp x8, .LCPI0_0\nfcvtl v2.4s, v0.4h\nfcvtl2 v0.4s, v0.8h\nldr d1, [x8, :lo12:.LCPI0_0]\nfcvtl v1.4s, v1.4h\nfmaxnm v2.4s, v2.4s, v1.4s\nfmaxnm v1.4s, v0.4s, v1.4s\nfcvtn v0.4h, v2.4s\nfcvtn2 v0.8h, v1.4s\nret",
  "ll": "define <8 x half> @test(<8 x half> %a) {\n  %r = call <8 x half> @llvm.maxnum(<8 x half> %a, <8 x half> <half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0>)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 36 for instruction:   %r = call <8 x half> @llvm.maxnum.v8f16(<8 x half> %a, <8 x half> <half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<8 x half>",
  "variant": "binopsplat",
  "codesize": 51,
  "thru": 51,
  "lat": 51,
  "sizelat": 51,
  "size": 40,
  "gisize": 9,
  "extrasize": 0,
  "asm": "mov h3, v0.h[1]\nfcvt s2, h1\nfcvt s1, h0\nmov h4, v0.h[2]\nmov h5, v0.h[3]\nmov h6, v0.h[4]\nfcvt s3, h3\nfmaxnm s1, s1, s2\nfcvt s4, h4\nfcvt s5, h5\nfcvt s6, h6\nfmaxnm s3, s3, s2\nfcvt h1, s1\nfmaxnm s4, s4, s2\nfmaxnm s5, s5, s2\nfmaxnm s6, s6, s2\nfcvt h3, s3\nfcvt h4, s4\nfcvt h5, s5\nmov v1.h[1], v3.h[0]\nmov h3, v0.h[5]\nmov v1.h[2], v4.h[0]\nmov h4, v0.h[6]\nfcvt s3, h3\nmov h0, v0.h[7]\nmov v1.h[3], v5.h[0]\nfcvt h5, s6\nfcvt s4, h4\nfmaxnm s3, s3, s2\nfcvt s0, h0\nmov v1.h[4], v5.h[0]\nfmaxnm s4, s4, s2\nfcvt h3, s3\nfmaxnm s0, s0, s2\nmov v1.h[5], v3.h[0]\nfcvt h3, s4\nfcvt h0, s0\nmov v1.h[6], v3.h[0]\nmov v1.h[7], v0.h[0]\nmov v0.16b, v1.16b\nret",
  "giasm": "fcvtl v2.4s, v0.4h\nfcvtl2 v0.4s, v0.8h\ndup v1.8h, v1.h[0]\nfcvtl v3.4s, v1.4h\nfcvtl2 v1.4s, v1.8h\nfmaxnm v2.4s, v2.4s, v3.4s\nfmaxnm v1.4s, v0.4s, v1.4s\nfcvtn v0.4h, v2.4s\nfcvtn2 v0.8h, v1.4s\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, half %bs) {\n  %i = insertelement <8 x half> poison, half %bs, i64 0\n  %b = shufflevector <8 x half> %i, <8 x half> poison, <8 x i32> zeroinitializer\n  %r = call <8 x half> @llvm.maxnum(<8 x half> %a, <8 x half> %b)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <8 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <8 x half> %i, <8 x half> poison, <8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 50 for instruction:   %r = call <8 x half> @llvm.maxnum.v8f16(<8 x half> %a, <8 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<8 x half>",
  "variant": "binopconstsplat",
  "codesize": 36,
  "thru": 36,
  "lat": 36,
  "sizelat": 36,
  "size": 40,
  "gisize": 8,
  "extrasize": 0,
  "asm": "mov h1, v0.h[1]\nfcvt s3, h0\nmov h4, v0.h[2]\nfmov s2, #7.00000000\nmov h5, v0.h[3]\nmov h7, v0.h[4]\nfcvt s1, h1\nfmaxnm s3, s3, s2\nfcvt s4, h4\nfcvt s5, h5\nfmaxnm s6, s1, s2\nfcvt h1, s3\nfmaxnm s3, s4, s2\nfmaxnm s5, s5, s2\nfcvt h4, s6\nfcvt s6, h7\nfcvt h3, s3\nfcvt h5, s5\nmov v1.h[1], v4.h[0]\nmov h4, v0.h[5]\nfmaxnm s6, s6, s2\nmov v1.h[2], v3.h[0]\nmov h3, v0.h[6]\nfcvt s4, h4\nmov h0, v0.h[7]\nmov v1.h[3], v5.h[0]\nfcvt h5, s6\nfcvt s3, h3\nfmaxnm s4, s4, s2\nfcvt s0, h0\nmov v1.h[4], v5.h[0]\nfmaxnm s3, s3, s2\nfcvt h4, s4\nfmaxnm s0, s0, s2\nfcvt h3, s3\nmov v1.h[5], v4.h[0]\nfcvt h0, s0\nmov v1.h[6], v3.h[0]\nmov v1.h[7], v0.h[0]\nmov v0.16b, v1.16b\nret",
  "giasm": "movi v1.4h, #71, lsl #8\nfcvtl v2.4s, v0.4h\nfcvtl2 v0.4s, v0.8h\nfcvtl v1.4s, v1.4h\nfmaxnm v2.4s, v2.4s, v1.4s\nfmaxnm v1.4s, v0.4s, v1.4s\nfcvtn v0.4h, v2.4s\nfcvtn2 v0.8h, v1.4s\nret",
  "ll": "define <8 x half> @test(<8 x half> %a) {\n  %r = call <8 x half> @llvm.maxnum(<8 x half> %a, <8 x half> <half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0>)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 36 for instruction:   %r = call <8 x half> @llvm.maxnum.v8f16(<8 x half> %a, <8 x half> splat (half 0xH4700))\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<16 x half>",
  "variant": "binop",
  "codesize": 100,
  "thru": 100,
  "lat": 100,
  "sizelat": 100,
  "size": 108,
  "gisize": 16,
  "extrasize": 0,
  "asm": "mov h6, v2.h[1]\nmov h7, v0.h[1]\nfcvt s4, h2\nfcvt s5, h0\nmov h16, v3.h[1]\nmov h17, v1.h[1]\nmov h18, v2.h[2]\nmov h19, v0.h[2]\nfcvt s20, h3\nfcvt s21, h1\nmov h22, v3.h[2]\nmov h23, v1.h[2]\nfcvt s6, h6\nfcvt s7, h7\nmov h24, v0.h[6]\nfmaxnm s4, s5, s4\nfcvt s5, h16\nfcvt s16, h17\nfcvt s17, h18\nfcvt s18, h19\nmov h19, v0.h[3]\nfmaxnm s20, s21, s20\nfcvt s21, h22\nmov h22, v3.h[3]\nfmaxnm s6, s7, s6\nmov h7, v2.h[3]\nmov h25, v1.h[6]\nfcvt h4, s4\nfmaxnm s5, s16, s5\nfcvt s16, h23\nmov h23, v1.h[3]\nfmaxnm s17, s18, s17\nfcvt s18, h19\nfcvt h6, s6\nfcvt s7, h7\nfcvt h19, s5\nfcvt h5, s20\nfmaxnm s16, s16, s21\nfcvt s20, h23\nfcvt h17, s17\nmov h21, v2.h[4]\nmov h23, v1.h[4]\nmov v4.h[1], v6.h[0]\nfcvt s6, h22\nmov h22, v0.h[4]\nfmaxnm s7, s18, s7\nmov h18, v3.h[4]\nmov v5.h[1], v19.h[0]\nfcvt h16, s16\nfmaxnm s6, s20, s6\nmov v4.h[2], v17.h[0]\nfcvt s17, h21\nfcvt s19, h22\nfcvt h7, s7\nfcvt s18, h18\nfcvt s20, h23\nmov h21, v2.h[5]\nmov h22, v0.h[5]\nmov v5.h[2], v16.h[0]\nmov h16, v3.h[5]\nmov h23, v1.h[5]\nfcvt h6, s6\nmov h0, v0.h[7]\nmov h1, v1.h[7]\nfmaxnm s17, s19, s17\nmov h19, v2.h[6]\nmov v4.h[3], v7.h[0]\nfmaxnm s18, s20, s18\nmov h20, v3.h[6]\nfcvt s7, h21\nfcvt s21, h22\nfcvt s22, h24\nmov h2, v2.h[7]\nmov v5.h[3], v6.h[0]\nfcvt s6, h16\nfcvt s16, h23\nfcvt h17, s17\nfcvt s19, h19\nfcvt s23, h25\nfcvt h18, s18\nfcvt s20, h20\nmov h3, v3.h[7]\nfmaxnm s7, s21, s7\nfcvt s2, h2\nfcvt s0, h0\nfmaxnm s6, s16, s6\nfcvt s1, h1\nmov v4.h[4], v17.h[0]\nfmaxnm s16, s22, s19\nmov v5.h[4], v18.h[0]\nfmaxnm s17, s23, s20\nfcvt s3, h3\nfcvt h7, s7\nfmaxnm s0, s0, s2\nfcvt h6, s6\nfcvt h2, s16\nfmaxnm s1, s1, s3\nmov v4.h[5], v7.h[0]\nfcvt h0, s0\nmov v5.h[5], v6.h[0]\nfcvt h6, s17\nfcvt h1, s1\nmov v4.h[6], v2.h[0]\nmov v5.h[6], v6.h[0]\nmov v4.h[7], v0.h[0]\nmov v5.h[7], v1.h[0]\nmov v0.16b, v4.16b\nmov v1.16b, v5.16b\nret",
  "giasm": "fcvtl v4.4s, v0.4h\nfcvtl v5.4s, v1.4h\nfcvtl v6.4s, v2.4h\nfcvtl v7.4s, v3.4h\nfcvtl2 v0.4s, v0.8h\nfcvtl2 v1.4s, v1.8h\nfcvtl2 v2.4s, v2.8h\nfcvtl2 v3.4s, v3.8h\nfmaxnm v4.4s, v4.4s, v6.4s\nfmaxnm v5.4s, v5.4s, v7.4s\nfmaxnm v2.4s, v0.4s, v2.4s\nfmaxnm v3.4s, v1.4s, v3.4s\nfcvtn v0.4h, v4.4s\nfcvtn v1.4h, v5.4s\nfcvtn2 v0.8h, v2.4s\nfcvtn2 v1.8h, v3.4s\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, <16 x half> %b) {\n  %r = call <16 x half> @llvm.maxnum(<16 x half> %a, <16 x half> %b)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 100 for instruction:   %r = call <16 x half> @llvm.maxnum.v16f16(<16 x half> %a, <16 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<16 x half>",
  "variant": "binopconst",
  "codesize": 72,
  "thru": 72,
  "lat": 72,
  "sizelat": 72,
  "size": 80,
  "gisize": 15,
  "extrasize": 0,
  "asm": "mov h2, v0.h[1]\nmov h3, v1.h[1]\nfcvt s6, h0\nmov h7, v0.h[2]\nfcvt s16, h1\nmov h17, v1.h[2]\nfmov s4, #6.00000000\nfmov s5, #7.00000000\nmov h18, v0.h[3]\nmov h19, v1.h[3]\nmov h22, v0.h[4]\nmov h23, v1.h[4]\nfcvt s2, h2\nfcvt s3, h3\nfmaxnm s6, s6, s5\nfcvt s7, h7\nfmaxnm s16, s16, s5\nfcvt s17, h17\nfcvt s18, h18\nfcvt s19, h19\nfmaxnm s20, s2, s4\nfmaxnm s21, s3, s4\nfcvt h2, s6\nfmaxnm s6, s7, s5\nfcvt h3, s16\nfmaxnm s16, s17, s5\nfmaxnm s18, s18, s4\nfcvt h7, s20\nfcvt h17, s21\nfcvt s20, h22\nfcvt s21, h23\nfcvt h6, s6\nfcvt h16, s16\nfcvt h18, s18\nmov v2.h[1], v7.h[0]\nfmaxnm s7, s19, s4\nmov v3.h[1], v17.h[0]\nmov h17, v0.h[5]\nmov h19, v1.h[5]\nfmaxnm s20, s20, s5\nmov v2.h[2], v6.h[0]\nfmaxnm s6, s21, s5\nfcvt h7, s7\nmov v3.h[2], v16.h[0]\nmov h16, v0.h[6]\nfcvt s17, h17\nfcvt s19, h19\nmov h21, v1.h[6]\nmov h0, v0.h[7]\nmov h1, v1.h[7]\nmov v2.h[3], v18.h[0]\nfcvt h6, s6\nmov v3.h[3], v7.h[0]\nfcvt h7, s20\nfcvt s16, h16\nfmaxnm s17, s17, s4\nfmaxnm s18, s19, s4\nfcvt s19, h21\nfcvt s0, h0\nfcvt s1, h1\nmov v2.h[4], v7.h[0]\nmov v3.h[4], v6.h[0]\nfmaxnm s7, s16, s5\nfcvt h6, s17\nfcvt h16, s18\nfmaxnm s5, s19, s5\nfmaxnm s0, s0, s4\nfmaxnm s1, s1, s4\nmov v2.h[5], v6.h[0]\nmov v3.h[5], v16.h[0]\nfcvt h6, s7\nfcvt h4, s5\nfcvt h0, s0\nfcvt h1, s1\nmov v2.h[6], v6.h[0]\nmov v3.h[6], v4.h[0]\nmov v2.h[7], v0.h[0]\nmov v3.h[7], v1.h[0]\nmov v0.16b, v2.16b\nmov v1.16b, v3.16b\nret",
  "giasm": "adrp x8, .LCPI0_0\nfcvtl v3.4s, v0.4h\nfcvtl v4.4s, v1.4h\nldr d2, [x8, :lo12:.LCPI0_0]\nfcvtl2 v0.4s, v0.8h\nfcvtl2 v1.4s, v1.8h\nfcvtl v2.4s, v2.4h\nfmaxnm v3.4s, v3.4s, v2.4s\nfmaxnm v4.4s, v4.4s, v2.4s\nfmaxnm v5.4s, v0.4s, v2.4s\nfmaxnm v2.4s, v1.4s, v2.4s\nfcvtn v0.4h, v3.4s\nfcvtn v1.4h, v4.4s\nfcvtn2 v0.8h, v5.4s\nfcvtn2 v1.8h, v2.4s\nret",
  "ll": "define <16 x half> @test(<16 x half> %a) {\n  %r = call <16 x half> @llvm.maxnum(<16 x half> %a, <16 x half> <half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0>)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 72 for instruction:   %r = call <16 x half> @llvm.maxnum.v16f16(<16 x half> %a, <16 x half> <half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<16 x half>",
  "variant": "binopsplat",
  "codesize": 102,
  "thru": 102,
  "lat": 102,
  "sizelat": 102,
  "size": 79,
  "gisize": 18,
  "extrasize": 0,
  "asm": "mov h3, v0.h[1]\nmov h5, v1.h[1]\nfcvt s4, h2\nfcvt s2, h0\nmov h6, v0.h[2]\nfcvt s7, h1\nmov h16, v1.h[2]\nmov h17, v0.h[3]\nmov h18, v1.h[3]\nmov h19, v0.h[4]\nmov h20, v1.h[4]\nfcvt s3, h3\nfcvt s5, h5\nfmaxnm s2, s2, s4\nfcvt s6, h6\nfmaxnm s7, s7, s4\nfcvt s16, h16\nfcvt s17, h17\nfcvt s18, h18\nfmaxnm s3, s3, s4\nfmaxnm s5, s5, s4\nfcvt h2, s2\nfmaxnm s6, s6, s4\nfmaxnm s17, s17, s4\nfmaxnm s18, s18, s4\nfcvt h21, s3\nfcvt h3, s7\nfmaxnm s7, s16, s4\nfcvt h5, s5\nfcvt s16, h19\nfcvt s19, h20\nfcvt h6, s6\nmov h20, v1.h[5]\nfcvt h17, s17\nfcvt h18, s18\nmov v2.h[1], v21.h[0]\nfcvt h7, s7\nmov v3.h[1], v5.h[0]\nmov h5, v0.h[5]\nfmaxnm s16, s16, s4\nfcvt s20, h20\nmov v2.h[2], v6.h[0]\nfmaxnm s6, s19, s4\nmov h19, v1.h[6]\nmov v3.h[2], v7.h[0]\nmov h7, v0.h[6]\nfcvt s5, h5\nfcvt h16, s16\nmov h0, v0.h[7]\nmov h1, v1.h[7]\nmov v2.h[3], v17.h[0]\nfcvt h6, s6\nfcvt s17, h19\nmov v3.h[3], v18.h[0]\nfcvt s7, h7\nfmaxnm s5, s5, s4\nfmaxnm s18, s20, s4\nfcvt s0, h0\nfcvt s1, h1\nmov v2.h[4], v16.h[0]\nfmaxnm s16, s17, s4\nmov v3.h[4], v6.h[0]\nfcvt h5, s5\nfmaxnm s6, s7, s4\nfcvt h7, s18\nfmaxnm s0, s0, s4\nfmaxnm s1, s1, s4\nfcvt h4, s16\nmov v2.h[5], v5.h[0]\nfcvt h5, s6\nmov v3.h[5], v7.h[0]\nfcvt h0, s0\nfcvt h1, s1\nmov v2.h[6], v5.h[0]\nmov v3.h[6], v4.h[0]\nmov v2.h[7], v0.h[0]\nmov v3.h[7], v1.h[0]\nmov v0.16b, v2.16b\nmov v1.16b, v3.16b\nret",
  "giasm": "dup v3.8h, v2.h[0]\nfcvtl v4.4s, v0.4h\nfcvtl v5.4s, v1.4h\ndup v2.8h, v2.h[0]\nfcvtl2 v0.4s, v0.8h\nfcvtl2 v1.4s, v1.8h\nfcvtl v6.4s, v3.4h\nfcvtl2 v3.4s, v3.8h\nfcvtl v7.4s, v2.4h\nfcvtl2 v2.4s, v2.8h\nfmaxnm v4.4s, v4.4s, v6.4s\nfmaxnm v3.4s, v0.4s, v3.4s\nfmaxnm v5.4s, v5.4s, v7.4s\nfmaxnm v2.4s, v1.4s, v2.4s\nfcvtn v0.4h, v4.4s\nfcvtn v1.4h, v5.4s\nfcvtn2 v0.8h, v3.4s\nfcvtn2 v1.8h, v2.4s\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, half %bs) {\n  %i = insertelement <16 x half> poison, half %bs, i64 0\n  %b = shufflevector <16 x half> %i, <16 x half> poison, <16 x i32> zeroinitializer\n  %r = call <16 x half> @llvm.maxnum(<16 x half> %a, <16 x half> %b)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <16 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <16 x half> %i, <16 x half> poison, <16 x i32> zeroinitializer\nCost Model: Found an estimated cost of 100 for instruction:   %r = call <16 x half> @llvm.maxnum.v16f16(<16 x half> %a, <16 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<16 x half>",
  "variant": "binopconstsplat",
  "codesize": 72,
  "thru": 72,
  "lat": 72,
  "sizelat": 72,
  "size": 79,
  "gisize": 14,
  "extrasize": 0,
  "asm": "mov h2, v0.h[1]\nmov h3, v1.h[1]\nfcvt s5, h0\nmov h6, v0.h[2]\nfcvt s7, h1\nmov h16, v1.h[2]\nfmov s4, #7.00000000\nmov h17, v0.h[3]\nmov h18, v1.h[3]\nmov h21, v0.h[4]\nmov h22, v1.h[4]\nfcvt s2, h2\nfcvt s3, h3\nfmaxnm s5, s5, s4\nfcvt s6, h6\nfmaxnm s7, s7, s4\nfcvt s16, h16\nfcvt s17, h17\nfcvt s18, h18\nfmaxnm s19, s2, s4\nfmaxnm s20, s3, s4\nfcvt h2, s5\nfmaxnm s5, s6, s4\nfcvt h3, s7\nfmaxnm s7, s16, s4\nfmaxnm s17, s17, s4\nfcvt h6, s19\nfcvt h16, s20\nfcvt s19, h21\nfcvt s20, h22\nfcvt h5, s5\nfcvt h7, s7\nfcvt h17, s17\nmov v2.h[1], v6.h[0]\nfmaxnm s6, s18, s4\nmov v3.h[1], v16.h[0]\nmov h16, v0.h[5]\nmov h18, v1.h[5]\nfmaxnm s19, s19, s4\nmov v2.h[2], v5.h[0]\nfmaxnm s5, s20, s4\nfcvt h6, s6\nmov v3.h[2], v7.h[0]\nmov h7, v0.h[6]\nfcvt s16, h16\nmov h20, v1.h[6]\nfcvt s18, h18\nmov h0, v0.h[7]\nmov h1, v1.h[7]\nmov v2.h[3], v17.h[0]\nfcvt h5, s5\nmov v3.h[3], v6.h[0]\nfcvt h6, s19\nfcvt s7, h7\nfmaxnm s16, s16, s4\nfcvt s17, h20\nfmaxnm s18, s18, s4\nfcvt s0, h0\nfcvt s1, h1\nmov v2.h[4], v6.h[0]\nmov v3.h[4], v5.h[0]\nfmaxnm s6, s7, s4\nfcvt h5, s16\nfcvt h7, s18\nfmaxnm s16, s17, s4\nfmaxnm s0, s0, s4\nfmaxnm s1, s1, s4\nmov v2.h[5], v5.h[0]\nfcvt h5, s6\nmov v3.h[5], v7.h[0]\nfcvt h4, s16\nfcvt h0, s0\nfcvt h1, s1\nmov v2.h[6], v5.h[0]\nmov v3.h[6], v4.h[0]\nmov v2.h[7], v0.h[0]\nmov v3.h[7], v1.h[0]\nmov v0.16b, v2.16b\nmov v1.16b, v3.16b\nret",
  "giasm": "movi v2.4h, #71, lsl #8\nfcvtl v3.4s, v0.4h\nfcvtl v4.4s, v1.4h\nfcvtl2 v0.4s, v0.8h\nfcvtl2 v1.4s, v1.8h\nfcvtl v2.4s, v2.4h\nfmaxnm v3.4s, v3.4s, v2.4s\nfmaxnm v4.4s, v4.4s, v2.4s\nfmaxnm v5.4s, v0.4s, v2.4s\nfmaxnm v2.4s, v1.4s, v2.4s\nfcvtn v0.4h, v3.4s\nfcvtn v1.4h, v4.4s\nfcvtn2 v0.8h, v5.4s\nfcvtn2 v1.8h, v2.4s\nret",
  "ll": "define <16 x half> @test(<16 x half> %a) {\n  %r = call <16 x half> @llvm.maxnum(<16 x half> %a, <16 x half> <half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0>)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 72 for instruction:   %r = call <16 x half> @llvm.maxnum.v16f16(<16 x half> %a, <16 x half> splat (half 0xH4700))\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<2 x float>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmaxnm v0.2s, v0.2s, v1.2s\nret",
  "giasm": "fmaxnm v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, <2 x float> %b) {\n  %r = call <2 x float> @llvm.maxnum(<2 x float> %a, <2 x float> %b)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x float> @llvm.maxnum.v2f32(<2 x float> %a, <2 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<2 x float>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr d1, [x8, :lo12:.LCPI0_0]\nfmaxnm v0.2s, v0.2s, v1.2s\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr d1, [x8, :lo12:.LCPI0_0]\nfmaxnm v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a) {\n  %r = call <2 x float> @llvm.maxnum(<2 x float> %a, <2 x float> <float 7.0, float 6.0>)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x float> @llvm.maxnum.v2f32(<2 x float> %a, <2 x float> <float 7.000000e+00, float 6.000000e+00>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<2 x float>",
  "variant": "binopsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "dup v1.2s, v1.s[0]\nfmaxnm v0.2s, v0.2s, v1.2s\nret",
  "giasm": "dup v1.2s, v1.s[0]\nfmaxnm v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, float %bs) {\n  %i = insertelement <2 x float> poison, float %bs, i64 0\n  %b = shufflevector <2 x float> %i, <2 x float> poison, <2 x i32> zeroinitializer\n  %r = call <2 x float> @llvm.maxnum(<2 x float> %a, <2 x float> %b)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <2 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <2 x float> %i, <2 x float> poison, <2 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x float> @llvm.maxnum.v2f32(<2 x float> %a, <2 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<2 x float>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov v1.2s, #7.00000000\nfmaxnm v0.2s, v0.2s, v1.2s\nret",
  "giasm": "fmov v1.2s, #7.00000000\nfmaxnm v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a) {\n  %r = call <2 x float> @llvm.maxnum(<2 x float> %a, <2 x float> <float 7.0, float 7.0>)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x float> @llvm.maxnum.v2f32(<2 x float> %a, <2 x float> splat (float 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<4 x float>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmaxnm v0.4s, v0.4s, v1.4s\nret",
  "giasm": "fmaxnm v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, <4 x float> %b) {\n  %r = call <4 x float> @llvm.maxnum(<4 x float> %a, <4 x float> %b)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x float> @llvm.maxnum.v4f32(<4 x float> %a, <4 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<4 x float>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfmaxnm v0.4s, v0.4s, v1.4s\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfmaxnm v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a) {\n  %r = call <4 x float> @llvm.maxnum(<4 x float> %a, <4 x float> <float 7.0, float 6.0, float 7.0, float 6.0>)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x float> @llvm.maxnum.v4f32(<4 x float> %a, <4 x float> <float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<4 x float>",
  "variant": "binopsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "dup v1.4s, v1.s[0]\nfmaxnm v0.4s, v0.4s, v1.4s\nret",
  "giasm": "dup v1.4s, v1.s[0]\nfmaxnm v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, float %bs) {\n  %i = insertelement <4 x float> poison, float %bs, i64 0\n  %b = shufflevector <4 x float> %i, <4 x float> poison, <4 x i32> zeroinitializer\n  %r = call <4 x float> @llvm.maxnum(<4 x float> %a, <4 x float> %b)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <4 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <4 x float> %i, <4 x float> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x float> @llvm.maxnum.v4f32(<4 x float> %a, <4 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<4 x float>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov v1.4s, #7.00000000\nfmaxnm v0.4s, v0.4s, v1.4s\nret",
  "giasm": "fmov v1.4s, #7.00000000\nfmaxnm v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a) {\n  %r = call <4 x float> @llvm.maxnum(<4 x float> %a, <4 x float> <float 7.0, float 7.0, float 7.0, float 7.0>)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x float> @llvm.maxnum.v4f32(<4 x float> %a, <4 x float> splat (float 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<8 x float>",
  "variant": "binop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmaxnm v1.4s, v1.4s, v3.4s\nfmaxnm v0.4s, v0.4s, v2.4s\nret",
  "giasm": "fmaxnm v0.4s, v0.4s, v2.4s\nfmaxnm v1.4s, v1.4s, v3.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, <8 x float> %b) {\n  %r = call <8 x float> @llvm.maxnum(<8 x float> %a, <8 x float> %b)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x float> @llvm.maxnum.v8f32(<8 x float> %a, <8 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<8 x float>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfmaxnm v0.4s, v0.4s, v2.4s\nfmaxnm v1.4s, v1.4s, v2.4s\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfmaxnm v0.4s, v0.4s, v2.4s\nfmaxnm v1.4s, v1.4s, v2.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a) {\n  %r = call <8 x float> @llvm.maxnum(<8 x float> %a, <8 x float> <float 7.0, float 6.0, float 7.0, float 6.0, float 7.0, float 6.0, float 7.0, float 6.0>)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x float> @llvm.maxnum.v8f32(<8 x float> %a, <8 x float> <float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<8 x float>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 6,
  "lat": 6,
  "sizelat": 6,
  "size": 3,
  "gisize": 4,
  "extrasize": 0,
  "asm": "dup v2.4s, v2.s[0]\nfmaxnm v0.4s, v0.4s, v2.4s\nfmaxnm v1.4s, v1.4s, v2.4s\nret",
  "giasm": "dup v3.4s, v2.s[0]\ndup v2.4s, v2.s[0]\nfmaxnm v0.4s, v0.4s, v3.4s\nfmaxnm v1.4s, v1.4s, v2.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, float %bs) {\n  %i = insertelement <8 x float> poison, float %bs, i64 0\n  %b = shufflevector <8 x float> %i, <8 x float> poison, <8 x i32> zeroinitializer\n  %r = call <8 x float> @llvm.maxnum(<8 x float> %a, <8 x float> %b)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <8 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <8 x float> %i, <8 x float> poison, <8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x float> @llvm.maxnum.v8f32(<8 x float> %a, <8 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<8 x float>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fmov v2.4s, #7.00000000\nfmaxnm v0.4s, v0.4s, v2.4s\nfmaxnm v1.4s, v1.4s, v2.4s\nret",
  "giasm": "fmov v2.4s, #7.00000000\nfmaxnm v0.4s, v0.4s, v2.4s\nfmaxnm v1.4s, v1.4s, v2.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a) {\n  %r = call <8 x float> @llvm.maxnum(<8 x float> %a, <8 x float> <float 7.0, float 7.0, float 7.0, float 7.0, float 7.0, float 7.0, float 7.0, float 7.0>)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x float> @llvm.maxnum.v8f32(<8 x float> %a, <8 x float> splat (float 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<2 x double>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmaxnm v0.2d, v0.2d, v1.2d\nret",
  "giasm": "fmaxnm v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, <2 x double> %b) {\n  %r = call <2 x double> @llvm.maxnum(<2 x double> %a, <2 x double> %b)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x double> @llvm.maxnum.v2f64(<2 x double> %a, <2 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<2 x double>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfmaxnm v0.2d, v0.2d, v1.2d\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfmaxnm v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a) {\n  %r = call <2 x double> @llvm.maxnum(<2 x double> %a, <2 x double> <double 7.0, double 6.0>)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x double> @llvm.maxnum.v2f64(<2 x double> %a, <2 x double> <double 7.000000e+00, double 6.000000e+00>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<2 x double>",
  "variant": "binopsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "dup v1.2d, v1.d[0]\nfmaxnm v0.2d, v0.2d, v1.2d\nret",
  "giasm": "dup v1.2d, v1.d[0]\nfmaxnm v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, double %bs) {\n  %i = insertelement <2 x double> poison, double %bs, i64 0\n  %b = shufflevector <2 x double> %i, <2 x double> poison, <2 x i32> zeroinitializer\n  %r = call <2 x double> @llvm.maxnum(<2 x double> %a, <2 x double> %b)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <2 x double> poison, double %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <2 x double> %i, <2 x double> poison, <2 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x double> @llvm.maxnum.v2f64(<2 x double> %a, <2 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<2 x double>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov v1.2d, #7.00000000\nfmaxnm v0.2d, v0.2d, v1.2d\nret",
  "giasm": "fmov v1.2d, #7.00000000\nfmaxnm v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a) {\n  %r = call <2 x double> @llvm.maxnum(<2 x double> %a, <2 x double> <double 7.0, double 7.0>)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x double> @llvm.maxnum.v2f64(<2 x double> %a, <2 x double> splat (double 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<4 x double>",
  "variant": "binop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmaxnm v1.2d, v1.2d, v3.2d\nfmaxnm v0.2d, v0.2d, v2.2d\nret",
  "giasm": "fmaxnm v0.2d, v0.2d, v2.2d\nfmaxnm v1.2d, v1.2d, v3.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, <4 x double> %b) {\n  %r = call <4 x double> @llvm.maxnum(<4 x double> %a, <4 x double> %b)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x double> @llvm.maxnum.v4f64(<4 x double> %a, <4 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<4 x double>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfmaxnm v0.2d, v0.2d, v2.2d\nfmaxnm v1.2d, v1.2d, v2.2d\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfmaxnm v0.2d, v0.2d, v2.2d\nfmaxnm v1.2d, v1.2d, v2.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a) {\n  %r = call <4 x double> @llvm.maxnum(<4 x double> %a, <4 x double> <double 7.0, double 6.0, double 7.0, double 6.0>)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x double> @llvm.maxnum.v4f64(<4 x double> %a, <4 x double> <double 7.000000e+00, double 6.000000e+00, double 7.000000e+00, double 6.000000e+00>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<4 x double>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 6,
  "lat": 6,
  "sizelat": 6,
  "size": 3,
  "gisize": 4,
  "extrasize": 0,
  "asm": "dup v2.2d, v2.d[0]\nfmaxnm v0.2d, v0.2d, v2.2d\nfmaxnm v1.2d, v1.2d, v2.2d\nret",
  "giasm": "dup v3.2d, v2.d[0]\ndup v2.2d, v2.d[0]\nfmaxnm v0.2d, v0.2d, v3.2d\nfmaxnm v1.2d, v1.2d, v2.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, double %bs) {\n  %i = insertelement <4 x double> poison, double %bs, i64 0\n  %b = shufflevector <4 x double> %i, <4 x double> poison, <4 x i32> zeroinitializer\n  %r = call <4 x double> @llvm.maxnum(<4 x double> %a, <4 x double> %b)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <4 x double> poison, double %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <4 x double> %i, <4 x double> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x double> @llvm.maxnum.v4f64(<4 x double> %a, <4 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<4 x double>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fmov v2.2d, #7.00000000\nfmaxnm v0.2d, v0.2d, v2.2d\nfmaxnm v1.2d, v1.2d, v2.2d\nret",
  "giasm": "fmov v2.2d, #7.00000000\nfmaxnm v0.2d, v0.2d, v2.2d\nfmaxnm v1.2d, v1.2d, v2.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a) {\n  %r = call <4 x double> @llvm.maxnum(<4 x double> %a, <4 x double> <double 7.0, double 7.0, double 7.0, double 7.0>)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x double> @llvm.maxnum.v4f64(<4 x double> %a, <4 x double> splat (double 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "minimum",
  "ty": "half",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcvt s1, h1\nfcvt s0, h0\nfmin s0, s0, s1\nfcvt h0, s0\nret",
  "giasm": "fcvt s0, h0\nfcvt s1, h1\nfmin s0, s0, s1\nfcvt h0, s0\nret",
  "ll": "define half @test(half %a, half %b) {\n  %r = call half @llvm.minimum(half %a, half %b)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call half @llvm.minimum.f16(half %a, half %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "minimum",
  "ty": "half",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 6,
  "extrasize": 0,
  "asm": "fcvt s0, h0\nfmov s1, #7.00000000\nfmin s0, s0, s1\nfcvt h0, s0\nret",
  "giasm": "mov w8, #18176                      // =0x4700\nfcvt s0, h0\nfmov s1, w8\nfcvt s1, h1\nfmin s0, s0, s1\nfcvt h0, s0\nret",
  "ll": "define half @test(half %a) {\n  %r = call half @llvm.minimum(half %a, half 7.0)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call half @llvm.minimum.f16(half %a, half 0xH4700)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "minimum",
  "ty": "float",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmin s0, s0, s1\nret",
  "giasm": "fmin s0, s0, s1\nret",
  "ll": "define float @test(float %a, float %b) {\n  %r = call float @llvm.minimum(float %a, float %b)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call float @llvm.minimum.f32(float %a, float %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "minimum",
  "ty": "float",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov s1, #7.00000000\nfmin s0, s0, s1\nret",
  "giasm": "fmov s1, #7.00000000\nfmin s0, s0, s1\nret",
  "ll": "define float @test(float %a) {\n  %r = call float @llvm.minimum(float %a, float 7.0)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call float @llvm.minimum.f32(float %a, float 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "minimum",
  "ty": "double",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmin d0, d0, d1\nret",
  "giasm": "fmin d0, d0, d1\nret",
  "ll": "define double @test(double %a, double %b) {\n  %r = call double @llvm.minimum(double %a, double %b)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call double @llvm.minimum.f64(double %a, double %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "minimum",
  "ty": "double",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov d1, #7.00000000\nfmin d0, d0, d1\nret",
  "giasm": "fmov d1, #7.00000000\nfmin d0, d0, d1\nret",
  "ll": "define double @test(double %a) {\n  %r = call double @llvm.minimum(double %a, double 7.0)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call double @llvm.minimum.f64(double %a, double 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "minimum",
  "ty": "<4 x half>",
  "variant": "binop",
  "codesize": 22,
  "thru": 22,
  "lat": 22,
  "sizelat": 22,
  "size": 25,
  "gisize": 4,
  "extrasize": 0,
  "asm": "mov h2, v1.h[1]\nmov h3, v0.h[1]\nmov h4, v1.h[2]\nmov h5, v0.h[2]\nfcvt s6, h1\nfcvt s7, h0\nmov h1, v1.h[3]\nfcvt s2, h2\nfcvt s3, h3\nfcvt s1, h1\nfmin s2, s3, s2\nfcvt s3, h4\nfcvt s4, h5\nfmin s5, s7, s6\nmov h6, v0.h[3]\nfmin s3, s4, s3\nfcvt h2, s2\nfcvt h0, s5\nfcvt s4, h6\nmov v0.h[1], v2.h[0]\nfcvt h2, s3\nfmin s1, s4, s1\nmov v0.h[2], v2.h[0]\nfcvt h1, s1\nmov v0.h[3], v1.h[0]\nret",
  "giasm": "fcvtl v0.4s, v0.4h\nfcvtl v1.4s, v1.4h\nfmin v0.4s, v0.4s, v1.4s\nfcvtn v0.4h, v0.4s\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, <4 x half> %b) {\n  %r = call <4 x half> @llvm.minimum(<4 x half> %a, <4 x half> %b)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 22 for instruction:   %r = call <4 x half> @llvm.minimum.v4f16(<4 x half> %a, <4 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "minimum",
  "ty": "<4 x half>",
  "variant": "binopconst",
  "codesize": 16,
  "thru": 16,
  "lat": 16,
  "sizelat": 16,
  "size": 20,
  "gisize": 6,
  "extrasize": 0,
  "asm": "mov h1, v0.h[1]\nmov h2, v0.h[2]\nfcvt s3, h0\nfmov s4, #6.00000000\nfmov s5, #7.00000000\nmov h6, v0.h[3]\nfcvt s1, h1\nfcvt s2, h2\nfmin s3, s3, s5\nfmin s1, s1, s4\nfmin s2, s2, s5\nfcvt h0, s3\nfcvt s3, h6\nfcvt h1, s1\nmov v0.h[1], v1.h[0]\nfcvt h1, s2\nfmin s2, s3, s4\nmov v0.h[2], v1.h[0]\nfcvt h1, s2\nmov v0.h[3], v1.h[0]\nret",
  "giasm": "adrp x8, .LCPI0_0\nfcvtl v0.4s, v0.4h\nldr d1, [x8, :lo12:.LCPI0_0]\nfcvtl v1.4s, v1.4h\nfmin v0.4s, v0.4s, v1.4s\nfcvtn v0.4h, v0.4s\nret",
  "ll": "define <4 x half> @test(<4 x half> %a) {\n  %r = call <4 x half> @llvm.minimum(<4 x half> %a, <4 x half> <half 7.0, half 6.0, half 7.0, half 6.0>)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 16 for instruction:   %r = call <4 x half> @llvm.minimum.v4f16(<4 x half> %a, <4 x half> <half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "minimum",
  "ty": "<4 x half>",
  "variant": "binopsplat",
  "codesize": 23,
  "thru": 23,
  "lat": 23,
  "sizelat": 23,
  "size": 19,
  "gisize": 5,
  "extrasize": 0,
  "asm": "mov h2, v0.h[1]\nfcvt s1, h1\nfcvt s3, h0\nmov h4, v0.h[2]\nmov h5, v0.h[3]\nfcvt s2, h2\nfmin s0, s3, s1\nfcvt s3, h4\nfcvt s4, h5\nfmin s2, s2, s1\nfcvt h0, s0\nfmin s3, s3, s1\nfmin s1, s4, s1\nfcvt h2, s2\nfcvt h1, s1\nmov v0.h[1], v2.h[0]\nfcvt h2, s3\nmov v0.h[2], v2.h[0]\nmov v0.h[3], v1.h[0]\nret",
  "giasm": "fcvtl v0.4s, v0.4h\ndup v1.4h, v1.h[0]\nfcvtl v1.4s, v1.4h\nfmin v0.4s, v0.4s, v1.4s\nfcvtn v0.4h, v0.4s\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, half %bs) {\n  %i = insertelement <4 x half> poison, half %bs, i64 0\n  %b = shufflevector <4 x half> %i, <4 x half> poison, <4 x i32> zeroinitializer\n  %r = call <4 x half> @llvm.minimum(<4 x half> %a, <4 x half> %b)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <4 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <4 x half> %i, <4 x half> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 22 for instruction:   %r = call <4 x half> @llvm.minimum.v4f16(<4 x half> %a, <4 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "minimum",
  "ty": "<4 x half>",
  "variant": "binopconstsplat",
  "codesize": 16,
  "thru": 16,
  "lat": 16,
  "sizelat": 16,
  "size": 19,
  "gisize": 5,
  "extrasize": 0,
  "asm": "mov h2, v0.h[1]\nfcvt s3, h0\nmov h4, v0.h[2]\nfmov s1, #7.00000000\nmov h5, v0.h[3]\nfcvt s2, h2\nfmin s0, s3, s1\nfcvt s3, h4\nfcvt s4, h5\nfmin s2, s2, s1\nfcvt h0, s0\nfmin s3, s3, s1\nfmin s1, s4, s1\nfcvt h2, s2\nfcvt h1, s1\nmov v0.h[1], v2.h[0]\nfcvt h2, s3\nmov v0.h[2], v2.h[0]\nmov v0.h[3], v1.h[0]\nret",
  "giasm": "movi v1.4h, #71, lsl #8\nfcvtl v0.4s, v0.4h\nfcvtl v1.4s, v1.4h\nfmin v0.4s, v0.4s, v1.4s\nfcvtn v0.4h, v0.4s\nret",
  "ll": "define <4 x half> @test(<4 x half> %a) {\n  %r = call <4 x half> @llvm.minimum(<4 x half> %a, <4 x half> <half 7.0, half 7.0, half 7.0, half 7.0>)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 16 for instruction:   %r = call <4 x half> @llvm.minimum.v4f16(<4 x half> %a, <4 x half> splat (half 0xH4700))\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "minimum",
  "ty": "<8 x half>",
  "variant": "binop",
  "codesize": 50,
  "thru": 50,
  "lat": 50,
  "sizelat": 50,
  "size": 54,
  "gisize": 8,
  "extrasize": 0,
  "asm": "mov h2, v1.h[1]\nmov h3, v0.h[1]\nfcvt s4, h1\nfcvt s5, h0\nmov h6, v1.h[2]\nmov h7, v0.h[2]\nmov h16, v1.h[3]\nfcvt s2, h2\nfcvt s3, h3\nfmin s4, s5, s4\nmov h5, v0.h[3]\nfcvt s6, h6\nfcvt s7, h7\nfcvt s16, h16\nfmin s3, s3, s2\nfcvt s5, h5\nfcvt h2, s4\nfmin s4, s7, s6\nmov h6, v1.h[4]\nmov h7, v0.h[4]\nfcvt h3, s3\nfmin s5, s5, s16\nmov h16, v0.h[5]\nfcvt h4, s4\nmov v2.h[1], v3.h[0]\nfcvt s3, h6\nfcvt s6, h7\nmov h7, v1.h[5]\nfcvt h5, s5\nfcvt s16, h16\nmov v2.h[2], v4.h[0]\nmov h4, v1.h[6]\nfmin s3, s6, s3\nmov h6, v0.h[6]\nfcvt s7, h7\nmov h1, v1.h[7]\nmov h0, v0.h[7]\nmov v2.h[3], v5.h[0]\nfcvt s4, h4\nfcvt h3, s3\nfcvt s5, h6\nfmin s6, s16, s7\nfcvt s1, h1\nfcvt s0, h0\nmov v2.h[4], v3.h[0]\nfmin s4, s5, s4\nfcvt h3, s6\nfmin s0, s0, s1\nmov v2.h[5], v3.h[0]\nfcvt h3, s4\nfcvt h0, s0\nmov v2.h[6], v3.h[0]\nmov v2.h[7], v0.h[0]\nmov v0.16b, v2.16b\nret",
  "giasm": "fcvtl v2.4s, v0.4h\nfcvtl v3.4s, v1.4h\nfcvtl2 v0.4s, v0.8h\nfcvtl2 v1.4s, v1.8h\nfmin v2.4s, v2.4s, v3.4s\nfmin v1.4s, v0.4s, v1.4s\nfcvtn v0.4h, v2.4s\nfcvtn2 v0.8h, v1.4s\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, <8 x half> %b) {\n  %r = call <8 x half> @llvm.minimum(<8 x half> %a, <8 x half> %b)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 50 for instruction:   %r = call <8 x half> @llvm.minimum.v8f16(<8 x half> %a, <8 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "minimum",
  "ty": "<8 x half>",
  "variant": "binopconst",
  "codesize": 36,
  "thru": 36,
  "lat": 36,
  "sizelat": 36,
  "size": 41,
  "gisize": 9,
  "extrasize": 0,
  "asm": "mov h1, v0.h[1]\nfcvt s2, h0\nmov h3, v0.h[2]\nfmov s4, #6.00000000\nfmov s5, #7.00000000\nmov h6, v0.h[3]\nmov h16, v0.h[4]\nfcvt s1, h1\nfmin s2, s2, s5\nfcvt s3, h3\nfcvt s6, h6\nfmin s7, s1, s4\nfcvt h1, s2\nfmin s2, s3, s5\nfmin s6, s6, s4\nfcvt h3, s7\nfcvt s7, h16\nfcvt h2, s2\nfcvt h6, s6\nmov v1.h[1], v3.h[0]\nmov h3, v0.h[5]\nfmin s7, s7, s5\nmov v1.h[2], v2.h[0]\nmov h2, v0.h[6]\nfcvt s3, h3\nmov h0, v0.h[7]\nmov v1.h[3], v6.h[0]\nfcvt h6, s7\nfcvt s2, h2\nfmin s3, s3, s4\nfcvt s0, h0\nmov v1.h[4], v6.h[0]\nfmin s2, s2, s5\nfcvt h3, s3\nfmin s0, s0, s4\nfcvt h2, s2\nmov v1.h[5], v3.h[0]\nfcvt h0, s0\nmov v1.h[6], v2.h[0]\nmov v1.h[7], v0.h[0]\nmov v0.16b, v1.16b\nret",
  "giasm": "adrp x8, .LCPI0_0\nfcvtl v2.4s, v0.4h\nfcvtl2 v0.4s, v0.8h\nldr d1, [x8, :lo12:.LCPI0_0]\nfcvtl v1.4s, v1.4h\nfmin v2.4s, v2.4s, v1.4s\nfmin v1.4s, v0.4s, v1.4s\nfcvtn v0.4h, v2.4s\nfcvtn2 v0.8h, v1.4s\nret",
  "ll": "define <8 x half> @test(<8 x half> %a) {\n  %r = call <8 x half> @llvm.minimum(<8 x half> %a, <8 x half> <half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0>)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 36 for instruction:   %r = call <8 x half> @llvm.minimum.v8f16(<8 x half> %a, <8 x half> <half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "minimum",
  "ty": "<8 x half>",
  "variant": "binopsplat",
  "codesize": 51,
  "thru": 51,
  "lat": 51,
  "sizelat": 51,
  "size": 40,
  "gisize": 9,
  "extrasize": 0,
  "asm": "mov h3, v0.h[1]\nfcvt s2, h1\nfcvt s1, h0\nmov h4, v0.h[2]\nmov h5, v0.h[3]\nmov h6, v0.h[4]\nfcvt s3, h3\nfmin s1, s1, s2\nfcvt s4, h4\nfcvt s5, h5\nfcvt s6, h6\nfmin s3, s3, s2\nfcvt h1, s1\nfmin s4, s4, s2\nfmin s5, s5, s2\nfmin s6, s6, s2\nfcvt h3, s3\nfcvt h4, s4\nfcvt h5, s5\nmov v1.h[1], v3.h[0]\nmov h3, v0.h[5]\nmov v1.h[2], v4.h[0]\nmov h4, v0.h[6]\nfcvt s3, h3\nmov h0, v0.h[7]\nmov v1.h[3], v5.h[0]\nfcvt h5, s6\nfcvt s4, h4\nfmin s3, s3, s2\nfcvt s0, h0\nmov v1.h[4], v5.h[0]\nfmin s4, s4, s2\nfcvt h3, s3\nfmin s0, s0, s2\nmov v1.h[5], v3.h[0]\nfcvt h3, s4\nfcvt h0, s0\nmov v1.h[6], v3.h[0]\nmov v1.h[7], v0.h[0]\nmov v0.16b, v1.16b\nret",
  "giasm": "fcvtl v2.4s, v0.4h\nfcvtl2 v0.4s, v0.8h\ndup v1.8h, v1.h[0]\nfcvtl v3.4s, v1.4h\nfcvtl2 v1.4s, v1.8h\nfmin v2.4s, v2.4s, v3.4s\nfmin v1.4s, v0.4s, v1.4s\nfcvtn v0.4h, v2.4s\nfcvtn2 v0.8h, v1.4s\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, half %bs) {\n  %i = insertelement <8 x half> poison, half %bs, i64 0\n  %b = shufflevector <8 x half> %i, <8 x half> poison, <8 x i32> zeroinitializer\n  %r = call <8 x half> @llvm.minimum(<8 x half> %a, <8 x half> %b)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <8 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <8 x half> %i, <8 x half> poison, <8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 50 for instruction:   %r = call <8 x half> @llvm.minimum.v8f16(<8 x half> %a, <8 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "minimum",
  "ty": "<8 x half>",
  "variant": "binopconstsplat",
  "codesize": 36,
  "thru": 36,
  "lat": 36,
  "sizelat": 36,
  "size": 40,
  "gisize": 8,
  "extrasize": 0,
  "asm": "mov h1, v0.h[1]\nfcvt s3, h0\nmov h4, v0.h[2]\nfmov s2, #7.00000000\nmov h5, v0.h[3]\nmov h7, v0.h[4]\nfcvt s1, h1\nfmin s3, s3, s2\nfcvt s4, h4\nfcvt s5, h5\nfmin s6, s1, s2\nfcvt h1, s3\nfmin s3, s4, s2\nfmin s5, s5, s2\nfcvt h4, s6\nfcvt s6, h7\nfcvt h3, s3\nfcvt h5, s5\nmov v1.h[1], v4.h[0]\nmov h4, v0.h[5]\nfmin s6, s6, s2\nmov v1.h[2], v3.h[0]\nmov h3, v0.h[6]\nfcvt s4, h4\nmov h0, v0.h[7]\nmov v1.h[3], v5.h[0]\nfcvt h5, s6\nfcvt s3, h3\nfmin s4, s4, s2\nfcvt s0, h0\nmov v1.h[4], v5.h[0]\nfmin s3, s3, s2\nfcvt h4, s4\nfmin s0, s0, s2\nfcvt h3, s3\nmov v1.h[5], v4.h[0]\nfcvt h0, s0\nmov v1.h[6], v3.h[0]\nmov v1.h[7], v0.h[0]\nmov v0.16b, v1.16b\nret",
  "giasm": "movi v1.4h, #71, lsl #8\nfcvtl v2.4s, v0.4h\nfcvtl2 v0.4s, v0.8h\nfcvtl v1.4s, v1.4h\nfmin v2.4s, v2.4s, v1.4s\nfmin v1.4s, v0.4s, v1.4s\nfcvtn v0.4h, v2.4s\nfcvtn2 v0.8h, v1.4s\nret",
  "ll": "define <8 x half> @test(<8 x half> %a) {\n  %r = call <8 x half> @llvm.minimum(<8 x half> %a, <8 x half> <half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0>)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 36 for instruction:   %r = call <8 x half> @llvm.minimum.v8f16(<8 x half> %a, <8 x half> splat (half 0xH4700))\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "minimum",
  "ty": "<16 x half>",
  "variant": "binop",
  "codesize": 100,
  "thru": 100,
  "lat": 100,
  "sizelat": 100,
  "size": 108,
  "gisize": 16,
  "extrasize": 0,
  "asm": "mov h6, v2.h[1]\nmov h7, v0.h[1]\nfcvt s4, h2\nfcvt s5, h0\nmov h16, v3.h[1]\nmov h17, v1.h[1]\nmov h18, v2.h[2]\nmov h19, v0.h[2]\nfcvt s20, h3\nfcvt s21, h1\nmov h22, v3.h[2]\nmov h23, v1.h[2]\nfcvt s6, h6\nfcvt s7, h7\nmov h24, v0.h[6]\nfmin s4, s5, s4\nfcvt s5, h16\nfcvt s16, h17\nfcvt s17, h18\nfcvt s18, h19\nmov h19, v0.h[3]\nfmin s20, s21, s20\nfcvt s21, h22\nmov h22, v3.h[3]\nfmin s6, s7, s6\nmov h7, v2.h[3]\nmov h25, v1.h[6]\nfcvt h4, s4\nfmin s5, s16, s5\nfcvt s16, h23\nmov h23, v1.h[3]\nfmin s17, s18, s17\nfcvt s18, h19\nfcvt h6, s6\nfcvt s7, h7\nfcvt h19, s5\nfcvt h5, s20\nfmin s16, s16, s21\nfcvt s20, h23\nfcvt h17, s17\nmov h21, v2.h[4]\nmov h23, v1.h[4]\nmov v4.h[1], v6.h[0]\nfcvt s6, h22\nmov h22, v0.h[4]\nfmin s7, s18, s7\nmov h18, v3.h[4]\nmov v5.h[1], v19.h[0]\nfcvt h16, s16\nfmin s6, s20, s6\nmov v4.h[2], v17.h[0]\nfcvt s17, h21\nfcvt s19, h22\nfcvt h7, s7\nfcvt s18, h18\nfcvt s20, h23\nmov h21, v2.h[5]\nmov h22, v0.h[5]\nmov v5.h[2], v16.h[0]\nmov h16, v3.h[5]\nmov h23, v1.h[5]\nfcvt h6, s6\nmov h0, v0.h[7]\nmov h1, v1.h[7]\nfmin s17, s19, s17\nmov h19, v2.h[6]\nmov v4.h[3], v7.h[0]\nfmin s18, s20, s18\nmov h20, v3.h[6]\nfcvt s7, h21\nfcvt s21, h22\nfcvt s22, h24\nmov h2, v2.h[7]\nmov v5.h[3], v6.h[0]\nfcvt s6, h16\nfcvt s16, h23\nfcvt h17, s17\nfcvt s19, h19\nfcvt s23, h25\nfcvt h18, s18\nfcvt s20, h20\nmov h3, v3.h[7]\nfmin s7, s21, s7\nfcvt s2, h2\nfcvt s0, h0\nfmin s6, s16, s6\nfcvt s1, h1\nmov v4.h[4], v17.h[0]\nfmin s16, s22, s19\nmov v5.h[4], v18.h[0]\nfmin s17, s23, s20\nfcvt s3, h3\nfcvt h7, s7\nfmin s0, s0, s2\nfcvt h6, s6\nfcvt h2, s16\nfmin s1, s1, s3\nmov v4.h[5], v7.h[0]\nfcvt h0, s0\nmov v5.h[5], v6.h[0]\nfcvt h6, s17\nfcvt h1, s1\nmov v4.h[6], v2.h[0]\nmov v5.h[6], v6.h[0]\nmov v4.h[7], v0.h[0]\nmov v5.h[7], v1.h[0]\nmov v0.16b, v4.16b\nmov v1.16b, v5.16b\nret",
  "giasm": "fcvtl v4.4s, v0.4h\nfcvtl v5.4s, v1.4h\nfcvtl v6.4s, v2.4h\nfcvtl v7.4s, v3.4h\nfcvtl2 v0.4s, v0.8h\nfcvtl2 v1.4s, v1.8h\nfcvtl2 v2.4s, v2.8h\nfcvtl2 v3.4s, v3.8h\nfmin v4.4s, v4.4s, v6.4s\nfmin v5.4s, v5.4s, v7.4s\nfmin v2.4s, v0.4s, v2.4s\nfmin v3.4s, v1.4s, v3.4s\nfcvtn v0.4h, v4.4s\nfcvtn v1.4h, v5.4s\nfcvtn2 v0.8h, v2.4s\nfcvtn2 v1.8h, v3.4s\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, <16 x half> %b) {\n  %r = call <16 x half> @llvm.minimum(<16 x half> %a, <16 x half> %b)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 100 for instruction:   %r = call <16 x half> @llvm.minimum.v16f16(<16 x half> %a, <16 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "minimum",
  "ty": "<16 x half>",
  "variant": "binopconst",
  "codesize": 72,
  "thru": 72,
  "lat": 72,
  "sizelat": 72,
  "size": 80,
  "gisize": 15,
  "extrasize": 0,
  "asm": "mov h2, v0.h[1]\nmov h3, v1.h[1]\nfcvt s6, h0\nmov h7, v0.h[2]\nfcvt s16, h1\nmov h17, v1.h[2]\nfmov s4, #6.00000000\nfmov s5, #7.00000000\nmov h18, v0.h[3]\nmov h19, v1.h[3]\nmov h22, v0.h[4]\nmov h23, v1.h[4]\nfcvt s2, h2\nfcvt s3, h3\nfmin s6, s6, s5\nfcvt s7, h7\nfmin s16, s16, s5\nfcvt s17, h17\nfcvt s18, h18\nfcvt s19, h19\nfmin s20, s2, s4\nfmin s21, s3, s4\nfcvt h2, s6\nfmin s6, s7, s5\nfcvt h3, s16\nfmin s16, s17, s5\nfmin s18, s18, s4\nfcvt h7, s20\nfcvt h17, s21\nfcvt s20, h22\nfcvt s21, h23\nfcvt h6, s6\nfcvt h16, s16\nfcvt h18, s18\nmov v2.h[1], v7.h[0]\nfmin s7, s19, s4\nmov v3.h[1], v17.h[0]\nmov h17, v0.h[5]\nmov h19, v1.h[5]\nfmin s20, s20, s5\nmov v2.h[2], v6.h[0]\nfmin s6, s21, s5\nfcvt h7, s7\nmov v3.h[2], v16.h[0]\nmov h16, v0.h[6]\nfcvt s17, h17\nfcvt s19, h19\nmov h21, v1.h[6]\nmov h0, v0.h[7]\nmov h1, v1.h[7]\nmov v2.h[3], v18.h[0]\nfcvt h6, s6\nmov v3.h[3], v7.h[0]\nfcvt h7, s20\nfcvt s16, h16\nfmin s17, s17, s4\nfmin s18, s19, s4\nfcvt s19, h21\nfcvt s0, h0\nfcvt s1, h1\nmov v2.h[4], v7.h[0]\nmov v3.h[4], v6.h[0]\nfmin s7, s16, s5\nfcvt h6, s17\nfcvt h16, s18\nfmin s5, s19, s5\nfmin s0, s0, s4\nfmin s1, s1, s4\nmov v2.h[5], v6.h[0]\nmov v3.h[5], v16.h[0]\nfcvt h6, s7\nfcvt h4, s5\nfcvt h0, s0\nfcvt h1, s1\nmov v2.h[6], v6.h[0]\nmov v3.h[6], v4.h[0]\nmov v2.h[7], v0.h[0]\nmov v3.h[7], v1.h[0]\nmov v0.16b, v2.16b\nmov v1.16b, v3.16b\nret",
  "giasm": "adrp x8, .LCPI0_0\nfcvtl v3.4s, v0.4h\nfcvtl v4.4s, v1.4h\nldr d2, [x8, :lo12:.LCPI0_0]\nfcvtl2 v0.4s, v0.8h\nfcvtl2 v1.4s, v1.8h\nfcvtl v2.4s, v2.4h\nfmin v3.4s, v3.4s, v2.4s\nfmin v4.4s, v4.4s, v2.4s\nfmin v5.4s, v0.4s, v2.4s\nfmin v2.4s, v1.4s, v2.4s\nfcvtn v0.4h, v3.4s\nfcvtn v1.4h, v4.4s\nfcvtn2 v0.8h, v5.4s\nfcvtn2 v1.8h, v2.4s\nret",
  "ll": "define <16 x half> @test(<16 x half> %a) {\n  %r = call <16 x half> @llvm.minimum(<16 x half> %a, <16 x half> <half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0>)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 72 for instruction:   %r = call <16 x half> @llvm.minimum.v16f16(<16 x half> %a, <16 x half> <half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "minimum",
  "ty": "<16 x half>",
  "variant": "binopsplat",
  "codesize": 102,
  "thru": 102,
  "lat": 102,
  "sizelat": 102,
  "size": 79,
  "gisize": 18,
  "extrasize": 0,
  "asm": "mov h3, v0.h[1]\nmov h5, v1.h[1]\nfcvt s4, h2\nfcvt s2, h0\nmov h6, v0.h[2]\nfcvt s7, h1\nmov h16, v1.h[2]\nmov h17, v0.h[3]\nmov h18, v1.h[3]\nmov h19, v0.h[4]\nmov h20, v1.h[4]\nfcvt s3, h3\nfcvt s5, h5\nfmin s2, s2, s4\nfcvt s6, h6\nfmin s7, s7, s4\nfcvt s16, h16\nfcvt s17, h17\nfcvt s18, h18\nfmin s3, s3, s4\nfmin s5, s5, s4\nfcvt h2, s2\nfmin s6, s6, s4\nfmin s17, s17, s4\nfmin s18, s18, s4\nfcvt h21, s3\nfcvt h3, s7\nfmin s7, s16, s4\nfcvt h5, s5\nfcvt s16, h19\nfcvt s19, h20\nfcvt h6, s6\nmov h20, v1.h[5]\nfcvt h17, s17\nfcvt h18, s18\nmov v2.h[1], v21.h[0]\nfcvt h7, s7\nmov v3.h[1], v5.h[0]\nmov h5, v0.h[5]\nfmin s16, s16, s4\nfcvt s20, h20\nmov v2.h[2], v6.h[0]\nfmin s6, s19, s4\nmov h19, v1.h[6]\nmov v3.h[2], v7.h[0]\nmov h7, v0.h[6]\nfcvt s5, h5\nfcvt h16, s16\nmov h0, v0.h[7]\nmov h1, v1.h[7]\nmov v2.h[3], v17.h[0]\nfcvt h6, s6\nfcvt s17, h19\nmov v3.h[3], v18.h[0]\nfcvt s7, h7\nfmin s5, s5, s4\nfmin s18, s20, s4\nfcvt s0, h0\nfcvt s1, h1\nmov v2.h[4], v16.h[0]\nfmin s16, s17, s4\nmov v3.h[4], v6.h[0]\nfcvt h5, s5\nfmin s6, s7, s4\nfcvt h7, s18\nfmin s0, s0, s4\nfmin s1, s1, s4\nfcvt h4, s16\nmov v2.h[5], v5.h[0]\nfcvt h5, s6\nmov v3.h[5], v7.h[0]\nfcvt h0, s0\nfcvt h1, s1\nmov v2.h[6], v5.h[0]\nmov v3.h[6], v4.h[0]\nmov v2.h[7], v0.h[0]\nmov v3.h[7], v1.h[0]\nmov v0.16b, v2.16b\nmov v1.16b, v3.16b\nret",
  "giasm": "dup v3.8h, v2.h[0]\nfcvtl v4.4s, v0.4h\nfcvtl v5.4s, v1.4h\ndup v2.8h, v2.h[0]\nfcvtl2 v0.4s, v0.8h\nfcvtl2 v1.4s, v1.8h\nfcvtl v6.4s, v3.4h\nfcvtl2 v3.4s, v3.8h\nfcvtl v7.4s, v2.4h\nfcvtl2 v2.4s, v2.8h\nfmin v4.4s, v4.4s, v6.4s\nfmin v3.4s, v0.4s, v3.4s\nfmin v5.4s, v5.4s, v7.4s\nfmin v2.4s, v1.4s, v2.4s\nfcvtn v0.4h, v4.4s\nfcvtn v1.4h, v5.4s\nfcvtn2 v0.8h, v3.4s\nfcvtn2 v1.8h, v2.4s\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, half %bs) {\n  %i = insertelement <16 x half> poison, half %bs, i64 0\n  %b = shufflevector <16 x half> %i, <16 x half> poison, <16 x i32> zeroinitializer\n  %r = call <16 x half> @llvm.minimum(<16 x half> %a, <16 x half> %b)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <16 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <16 x half> %i, <16 x half> poison, <16 x i32> zeroinitializer\nCost Model: Found an estimated cost of 100 for instruction:   %r = call <16 x half> @llvm.minimum.v16f16(<16 x half> %a, <16 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "minimum",
  "ty": "<16 x half>",
  "variant": "binopconstsplat",
  "codesize": 72,
  "thru": 72,
  "lat": 72,
  "sizelat": 72,
  "size": 79,
  "gisize": 14,
  "extrasize": 0,
  "asm": "mov h2, v0.h[1]\nmov h3, v1.h[1]\nfcvt s5, h0\nmov h6, v0.h[2]\nfcvt s7, h1\nmov h16, v1.h[2]\nfmov s4, #7.00000000\nmov h17, v0.h[3]\nmov h18, v1.h[3]\nmov h21, v0.h[4]\nmov h22, v1.h[4]\nfcvt s2, h2\nfcvt s3, h3\nfmin s5, s5, s4\nfcvt s6, h6\nfmin s7, s7, s4\nfcvt s16, h16\nfcvt s17, h17\nfcvt s18, h18\nfmin s19, s2, s4\nfmin s20, s3, s4\nfcvt h2, s5\nfmin s5, s6, s4\nfcvt h3, s7\nfmin s7, s16, s4\nfmin s17, s17, s4\nfcvt h6, s19\nfcvt h16, s20\nfcvt s19, h21\nfcvt s20, h22\nfcvt h5, s5\nfcvt h7, s7\nfcvt h17, s17\nmov v2.h[1], v6.h[0]\nfmin s6, s18, s4\nmov v3.h[1], v16.h[0]\nmov h16, v0.h[5]\nmov h18, v1.h[5]\nfmin s19, s19, s4\nmov v2.h[2], v5.h[0]\nfmin s5, s20, s4\nfcvt h6, s6\nmov v3.h[2], v7.h[0]\nmov h7, v0.h[6]\nfcvt s16, h16\nmov h20, v1.h[6]\nfcvt s18, h18\nmov h0, v0.h[7]\nmov h1, v1.h[7]\nmov v2.h[3], v17.h[0]\nfcvt h5, s5\nmov v3.h[3], v6.h[0]\nfcvt h6, s19\nfcvt s7, h7\nfmin s16, s16, s4\nfcvt s17, h20\nfmin s18, s18, s4\nfcvt s0, h0\nfcvt s1, h1\nmov v2.h[4], v6.h[0]\nmov v3.h[4], v5.h[0]\nfmin s6, s7, s4\nfcvt h5, s16\nfcvt h7, s18\nfmin s16, s17, s4\nfmin s0, s0, s4\nfmin s1, s1, s4\nmov v2.h[5], v5.h[0]\nfcvt h5, s6\nmov v3.h[5], v7.h[0]\nfcvt h4, s16\nfcvt h0, s0\nfcvt h1, s1\nmov v2.h[6], v5.h[0]\nmov v3.h[6], v4.h[0]\nmov v2.h[7], v0.h[0]\nmov v3.h[7], v1.h[0]\nmov v0.16b, v2.16b\nmov v1.16b, v3.16b\nret",
  "giasm": "movi v2.4h, #71, lsl #8\nfcvtl v3.4s, v0.4h\nfcvtl v4.4s, v1.4h\nfcvtl2 v0.4s, v0.8h\nfcvtl2 v1.4s, v1.8h\nfcvtl v2.4s, v2.4h\nfmin v3.4s, v3.4s, v2.4s\nfmin v4.4s, v4.4s, v2.4s\nfmin v5.4s, v0.4s, v2.4s\nfmin v2.4s, v1.4s, v2.4s\nfcvtn v0.4h, v3.4s\nfcvtn v1.4h, v4.4s\nfcvtn2 v0.8h, v5.4s\nfcvtn2 v1.8h, v2.4s\nret",
  "ll": "define <16 x half> @test(<16 x half> %a) {\n  %r = call <16 x half> @llvm.minimum(<16 x half> %a, <16 x half> <half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0>)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 72 for instruction:   %r = call <16 x half> @llvm.minimum.v16f16(<16 x half> %a, <16 x half> splat (half 0xH4700))\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "minimum",
  "ty": "<2 x float>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmin v0.2s, v0.2s, v1.2s\nret",
  "giasm": "fmin v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, <2 x float> %b) {\n  %r = call <2 x float> @llvm.minimum(<2 x float> %a, <2 x float> %b)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x float> @llvm.minimum.v2f32(<2 x float> %a, <2 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "minimum",
  "ty": "<2 x float>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr d1, [x8, :lo12:.LCPI0_0]\nfmin v0.2s, v0.2s, v1.2s\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr d1, [x8, :lo12:.LCPI0_0]\nfmin v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a) {\n  %r = call <2 x float> @llvm.minimum(<2 x float> %a, <2 x float> <float 7.0, float 6.0>)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x float> @llvm.minimum.v2f32(<2 x float> %a, <2 x float> <float 7.000000e+00, float 6.000000e+00>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "minimum",
  "ty": "<2 x float>",
  "variant": "binopsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "dup v1.2s, v1.s[0]\nfmin v0.2s, v0.2s, v1.2s\nret",
  "giasm": "dup v1.2s, v1.s[0]\nfmin v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, float %bs) {\n  %i = insertelement <2 x float> poison, float %bs, i64 0\n  %b = shufflevector <2 x float> %i, <2 x float> poison, <2 x i32> zeroinitializer\n  %r = call <2 x float> @llvm.minimum(<2 x float> %a, <2 x float> %b)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <2 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <2 x float> %i, <2 x float> poison, <2 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x float> @llvm.minimum.v2f32(<2 x float> %a, <2 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "minimum",
  "ty": "<2 x float>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov v1.2s, #7.00000000\nfmin v0.2s, v0.2s, v1.2s\nret",
  "giasm": "fmov v1.2s, #7.00000000\nfmin v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a) {\n  %r = call <2 x float> @llvm.minimum(<2 x float> %a, <2 x float> <float 7.0, float 7.0>)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x float> @llvm.minimum.v2f32(<2 x float> %a, <2 x float> splat (float 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "minimum",
  "ty": "<4 x float>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmin v0.4s, v0.4s, v1.4s\nret",
  "giasm": "fmin v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, <4 x float> %b) {\n  %r = call <4 x float> @llvm.minimum(<4 x float> %a, <4 x float> %b)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x float> @llvm.minimum.v4f32(<4 x float> %a, <4 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "minimum",
  "ty": "<4 x float>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfmin v0.4s, v0.4s, v1.4s\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfmin v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a) {\n  %r = call <4 x float> @llvm.minimum(<4 x float> %a, <4 x float> <float 7.0, float 6.0, float 7.0, float 6.0>)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x float> @llvm.minimum.v4f32(<4 x float> %a, <4 x float> <float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "minimum",
  "ty": "<4 x float>",
  "variant": "binopsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "dup v1.4s, v1.s[0]\nfmin v0.4s, v0.4s, v1.4s\nret",
  "giasm": "dup v1.4s, v1.s[0]\nfmin v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, float %bs) {\n  %i = insertelement <4 x float> poison, float %bs, i64 0\n  %b = shufflevector <4 x float> %i, <4 x float> poison, <4 x i32> zeroinitializer\n  %r = call <4 x float> @llvm.minimum(<4 x float> %a, <4 x float> %b)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <4 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <4 x float> %i, <4 x float> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x float> @llvm.minimum.v4f32(<4 x float> %a, <4 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "minimum",
  "ty": "<4 x float>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov v1.4s, #7.00000000\nfmin v0.4s, v0.4s, v1.4s\nret",
  "giasm": "fmov v1.4s, #7.00000000\nfmin v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a) {\n  %r = call <4 x float> @llvm.minimum(<4 x float> %a, <4 x float> <float 7.0, float 7.0, float 7.0, float 7.0>)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x float> @llvm.minimum.v4f32(<4 x float> %a, <4 x float> splat (float 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "minimum",
  "ty": "<8 x float>",
  "variant": "binop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmin v1.4s, v1.4s, v3.4s\nfmin v0.4s, v0.4s, v2.4s\nret",
  "giasm": "fmin v0.4s, v0.4s, v2.4s\nfmin v1.4s, v1.4s, v3.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, <8 x float> %b) {\n  %r = call <8 x float> @llvm.minimum(<8 x float> %a, <8 x float> %b)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x float> @llvm.minimum.v8f32(<8 x float> %a, <8 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "minimum",
  "ty": "<8 x float>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfmin v0.4s, v0.4s, v2.4s\nfmin v1.4s, v1.4s, v2.4s\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfmin v0.4s, v0.4s, v2.4s\nfmin v1.4s, v1.4s, v2.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a) {\n  %r = call <8 x float> @llvm.minimum(<8 x float> %a, <8 x float> <float 7.0, float 6.0, float 7.0, float 6.0, float 7.0, float 6.0, float 7.0, float 6.0>)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x float> @llvm.minimum.v8f32(<8 x float> %a, <8 x float> <float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "minimum",
  "ty": "<8 x float>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 6,
  "lat": 6,
  "sizelat": 6,
  "size": 3,
  "gisize": 4,
  "extrasize": 0,
  "asm": "dup v2.4s, v2.s[0]\nfmin v0.4s, v0.4s, v2.4s\nfmin v1.4s, v1.4s, v2.4s\nret",
  "giasm": "dup v3.4s, v2.s[0]\ndup v2.4s, v2.s[0]\nfmin v0.4s, v0.4s, v3.4s\nfmin v1.4s, v1.4s, v2.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, float %bs) {\n  %i = insertelement <8 x float> poison, float %bs, i64 0\n  %b = shufflevector <8 x float> %i, <8 x float> poison, <8 x i32> zeroinitializer\n  %r = call <8 x float> @llvm.minimum(<8 x float> %a, <8 x float> %b)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <8 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <8 x float> %i, <8 x float> poison, <8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x float> @llvm.minimum.v8f32(<8 x float> %a, <8 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "minimum",
  "ty": "<8 x float>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fmov v2.4s, #7.00000000\nfmin v0.4s, v0.4s, v2.4s\nfmin v1.4s, v1.4s, v2.4s\nret",
  "giasm": "fmov v2.4s, #7.00000000\nfmin v0.4s, v0.4s, v2.4s\nfmin v1.4s, v1.4s, v2.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a) {\n  %r = call <8 x float> @llvm.minimum(<8 x float> %a, <8 x float> <float 7.0, float 7.0, float 7.0, float 7.0, float 7.0, float 7.0, float 7.0, float 7.0>)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x float> @llvm.minimum.v8f32(<8 x float> %a, <8 x float> splat (float 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "minimum",
  "ty": "<2 x double>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmin v0.2d, v0.2d, v1.2d\nret",
  "giasm": "fmin v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, <2 x double> %b) {\n  %r = call <2 x double> @llvm.minimum(<2 x double> %a, <2 x double> %b)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x double> @llvm.minimum.v2f64(<2 x double> %a, <2 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "minimum",
  "ty": "<2 x double>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfmin v0.2d, v0.2d, v1.2d\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfmin v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a) {\n  %r = call <2 x double> @llvm.minimum(<2 x double> %a, <2 x double> <double 7.0, double 6.0>)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x double> @llvm.minimum.v2f64(<2 x double> %a, <2 x double> <double 7.000000e+00, double 6.000000e+00>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "minimum",
  "ty": "<2 x double>",
  "variant": "binopsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "dup v1.2d, v1.d[0]\nfmin v0.2d, v0.2d, v1.2d\nret",
  "giasm": "dup v1.2d, v1.d[0]\nfmin v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, double %bs) {\n  %i = insertelement <2 x double> poison, double %bs, i64 0\n  %b = shufflevector <2 x double> %i, <2 x double> poison, <2 x i32> zeroinitializer\n  %r = call <2 x double> @llvm.minimum(<2 x double> %a, <2 x double> %b)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <2 x double> poison, double %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <2 x double> %i, <2 x double> poison, <2 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x double> @llvm.minimum.v2f64(<2 x double> %a, <2 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "minimum",
  "ty": "<2 x double>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov v1.2d, #7.00000000\nfmin v0.2d, v0.2d, v1.2d\nret",
  "giasm": "fmov v1.2d, #7.00000000\nfmin v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a) {\n  %r = call <2 x double> @llvm.minimum(<2 x double> %a, <2 x double> <double 7.0, double 7.0>)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x double> @llvm.minimum.v2f64(<2 x double> %a, <2 x double> splat (double 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "minimum",
  "ty": "<4 x double>",
  "variant": "binop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmin v1.2d, v1.2d, v3.2d\nfmin v0.2d, v0.2d, v2.2d\nret",
  "giasm": "fmin v0.2d, v0.2d, v2.2d\nfmin v1.2d, v1.2d, v3.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, <4 x double> %b) {\n  %r = call <4 x double> @llvm.minimum(<4 x double> %a, <4 x double> %b)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x double> @llvm.minimum.v4f64(<4 x double> %a, <4 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "minimum",
  "ty": "<4 x double>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfmin v0.2d, v0.2d, v2.2d\nfmin v1.2d, v1.2d, v2.2d\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfmin v0.2d, v0.2d, v2.2d\nfmin v1.2d, v1.2d, v2.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a) {\n  %r = call <4 x double> @llvm.minimum(<4 x double> %a, <4 x double> <double 7.0, double 6.0, double 7.0, double 6.0>)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x double> @llvm.minimum.v4f64(<4 x double> %a, <4 x double> <double 7.000000e+00, double 6.000000e+00, double 7.000000e+00, double 6.000000e+00>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "minimum",
  "ty": "<4 x double>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 6,
  "lat": 6,
  "sizelat": 6,
  "size": 3,
  "gisize": 4,
  "extrasize": 0,
  "asm": "dup v2.2d, v2.d[0]\nfmin v0.2d, v0.2d, v2.2d\nfmin v1.2d, v1.2d, v2.2d\nret",
  "giasm": "dup v3.2d, v2.d[0]\ndup v2.2d, v2.d[0]\nfmin v0.2d, v0.2d, v3.2d\nfmin v1.2d, v1.2d, v2.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, double %bs) {\n  %i = insertelement <4 x double> poison, double %bs, i64 0\n  %b = shufflevector <4 x double> %i, <4 x double> poison, <4 x i32> zeroinitializer\n  %r = call <4 x double> @llvm.minimum(<4 x double> %a, <4 x double> %b)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <4 x double> poison, double %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <4 x double> %i, <4 x double> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x double> @llvm.minimum.v4f64(<4 x double> %a, <4 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "minimum",
  "ty": "<4 x double>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fmov v2.2d, #7.00000000\nfmin v0.2d, v0.2d, v2.2d\nfmin v1.2d, v1.2d, v2.2d\nret",
  "giasm": "fmov v2.2d, #7.00000000\nfmin v0.2d, v0.2d, v2.2d\nfmin v1.2d, v1.2d, v2.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a) {\n  %r = call <4 x double> @llvm.minimum(<4 x double> %a, <4 x double> <double 7.0, double 7.0, double 7.0, double 7.0>)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x double> @llvm.minimum.v4f64(<4 x double> %a, <4 x double> splat (double 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "maximum",
  "ty": "half",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcvt s1, h1\nfcvt s0, h0\nfmax s0, s0, s1\nfcvt h0, s0\nret",
  "giasm": "fcvt s0, h0\nfcvt s1, h1\nfmax s0, s0, s1\nfcvt h0, s0\nret",
  "ll": "define half @test(half %a, half %b) {\n  %r = call half @llvm.maximum(half %a, half %b)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call half @llvm.maximum.f16(half %a, half %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "maximum",
  "ty": "half",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 6,
  "extrasize": 0,
  "asm": "fcvt s0, h0\nfmov s1, #7.00000000\nfmax s0, s0, s1\nfcvt h0, s0\nret",
  "giasm": "mov w8, #18176                      // =0x4700\nfcvt s0, h0\nfmov s1, w8\nfcvt s1, h1\nfmax s0, s0, s1\nfcvt h0, s0\nret",
  "ll": "define half @test(half %a) {\n  %r = call half @llvm.maximum(half %a, half 7.0)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call half @llvm.maximum.f16(half %a, half 0xH4700)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "maximum",
  "ty": "float",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmax s0, s0, s1\nret",
  "giasm": "fmax s0, s0, s1\nret",
  "ll": "define float @test(float %a, float %b) {\n  %r = call float @llvm.maximum(float %a, float %b)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call float @llvm.maximum.f32(float %a, float %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "maximum",
  "ty": "float",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov s1, #7.00000000\nfmax s0, s0, s1\nret",
  "giasm": "fmov s1, #7.00000000\nfmax s0, s0, s1\nret",
  "ll": "define float @test(float %a) {\n  %r = call float @llvm.maximum(float %a, float 7.0)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call float @llvm.maximum.f32(float %a, float 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "maximum",
  "ty": "double",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmax d0, d0, d1\nret",
  "giasm": "fmax d0, d0, d1\nret",
  "ll": "define double @test(double %a, double %b) {\n  %r = call double @llvm.maximum(double %a, double %b)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call double @llvm.maximum.f64(double %a, double %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "maximum",
  "ty": "double",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov d1, #7.00000000\nfmax d0, d0, d1\nret",
  "giasm": "fmov d1, #7.00000000\nfmax d0, d0, d1\nret",
  "ll": "define double @test(double %a) {\n  %r = call double @llvm.maximum(double %a, double 7.0)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call double @llvm.maximum.f64(double %a, double 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "maximum",
  "ty": "<4 x half>",
  "variant": "binop",
  "codesize": 22,
  "thru": 22,
  "lat": 22,
  "sizelat": 22,
  "size": 25,
  "gisize": 4,
  "extrasize": 0,
  "asm": "mov h2, v1.h[1]\nmov h3, v0.h[1]\nmov h4, v1.h[2]\nmov h5, v0.h[2]\nfcvt s6, h1\nfcvt s7, h0\nmov h1, v1.h[3]\nfcvt s2, h2\nfcvt s3, h3\nfcvt s1, h1\nfmax s2, s3, s2\nfcvt s3, h4\nfcvt s4, h5\nfmax s5, s7, s6\nmov h6, v0.h[3]\nfmax s3, s4, s3\nfcvt h2, s2\nfcvt h0, s5\nfcvt s4, h6\nmov v0.h[1], v2.h[0]\nfcvt h2, s3\nfmax s1, s4, s1\nmov v0.h[2], v2.h[0]\nfcvt h1, s1\nmov v0.h[3], v1.h[0]\nret",
  "giasm": "fcvtl v0.4s, v0.4h\nfcvtl v1.4s, v1.4h\nfmax v0.4s, v0.4s, v1.4s\nfcvtn v0.4h, v0.4s\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, <4 x half> %b) {\n  %r = call <4 x half> @llvm.maximum(<4 x half> %a, <4 x half> %b)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 22 for instruction:   %r = call <4 x half> @llvm.maximum.v4f16(<4 x half> %a, <4 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "maximum",
  "ty": "<4 x half>",
  "variant": "binopconst",
  "codesize": 16,
  "thru": 16,
  "lat": 16,
  "sizelat": 16,
  "size": 20,
  "gisize": 6,
  "extrasize": 0,
  "asm": "mov h1, v0.h[1]\nmov h2, v0.h[2]\nfcvt s3, h0\nfmov s4, #6.00000000\nfmov s5, #7.00000000\nmov h6, v0.h[3]\nfcvt s1, h1\nfcvt s2, h2\nfmax s3, s3, s5\nfmax s1, s1, s4\nfmax s2, s2, s5\nfcvt h0, s3\nfcvt s3, h6\nfcvt h1, s1\nmov v0.h[1], v1.h[0]\nfcvt h1, s2\nfmax s2, s3, s4\nmov v0.h[2], v1.h[0]\nfcvt h1, s2\nmov v0.h[3], v1.h[0]\nret",
  "giasm": "adrp x8, .LCPI0_0\nfcvtl v0.4s, v0.4h\nldr d1, [x8, :lo12:.LCPI0_0]\nfcvtl v1.4s, v1.4h\nfmax v0.4s, v0.4s, v1.4s\nfcvtn v0.4h, v0.4s\nret",
  "ll": "define <4 x half> @test(<4 x half> %a) {\n  %r = call <4 x half> @llvm.maximum(<4 x half> %a, <4 x half> <half 7.0, half 6.0, half 7.0, half 6.0>)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 16 for instruction:   %r = call <4 x half> @llvm.maximum.v4f16(<4 x half> %a, <4 x half> <half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "maximum",
  "ty": "<4 x half>",
  "variant": "binopsplat",
  "codesize": 23,
  "thru": 23,
  "lat": 23,
  "sizelat": 23,
  "size": 19,
  "gisize": 5,
  "extrasize": 0,
  "asm": "mov h2, v0.h[1]\nfcvt s1, h1\nfcvt s3, h0\nmov h4, v0.h[2]\nmov h5, v0.h[3]\nfcvt s2, h2\nfmax s0, s3, s1\nfcvt s3, h4\nfcvt s4, h5\nfmax s2, s2, s1\nfcvt h0, s0\nfmax s3, s3, s1\nfmax s1, s4, s1\nfcvt h2, s2\nfcvt h1, s1\nmov v0.h[1], v2.h[0]\nfcvt h2, s3\nmov v0.h[2], v2.h[0]\nmov v0.h[3], v1.h[0]\nret",
  "giasm": "fcvtl v0.4s, v0.4h\ndup v1.4h, v1.h[0]\nfcvtl v1.4s, v1.4h\nfmax v0.4s, v0.4s, v1.4s\nfcvtn v0.4h, v0.4s\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, half %bs) {\n  %i = insertelement <4 x half> poison, half %bs, i64 0\n  %b = shufflevector <4 x half> %i, <4 x half> poison, <4 x i32> zeroinitializer\n  %r = call <4 x half> @llvm.maximum(<4 x half> %a, <4 x half> %b)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <4 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <4 x half> %i, <4 x half> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 22 for instruction:   %r = call <4 x half> @llvm.maximum.v4f16(<4 x half> %a, <4 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "maximum",
  "ty": "<4 x half>",
  "variant": "binopconstsplat",
  "codesize": 16,
  "thru": 16,
  "lat": 16,
  "sizelat": 16,
  "size": 19,
  "gisize": 5,
  "extrasize": 0,
  "asm": "mov h2, v0.h[1]\nfcvt s3, h0\nmov h4, v0.h[2]\nfmov s1, #7.00000000\nmov h5, v0.h[3]\nfcvt s2, h2\nfmax s0, s3, s1\nfcvt s3, h4\nfcvt s4, h5\nfmax s2, s2, s1\nfcvt h0, s0\nfmax s3, s3, s1\nfmax s1, s4, s1\nfcvt h2, s2\nfcvt h1, s1\nmov v0.h[1], v2.h[0]\nfcvt h2, s3\nmov v0.h[2], v2.h[0]\nmov v0.h[3], v1.h[0]\nret",
  "giasm": "movi v1.4h, #71, lsl #8\nfcvtl v0.4s, v0.4h\nfcvtl v1.4s, v1.4h\nfmax v0.4s, v0.4s, v1.4s\nfcvtn v0.4h, v0.4s\nret",
  "ll": "define <4 x half> @test(<4 x half> %a) {\n  %r = call <4 x half> @llvm.maximum(<4 x half> %a, <4 x half> <half 7.0, half 7.0, half 7.0, half 7.0>)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 16 for instruction:   %r = call <4 x half> @llvm.maximum.v4f16(<4 x half> %a, <4 x half> splat (half 0xH4700))\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "maximum",
  "ty": "<8 x half>",
  "variant": "binop",
  "codesize": 50,
  "thru": 50,
  "lat": 50,
  "sizelat": 50,
  "size": 54,
  "gisize": 8,
  "extrasize": 0,
  "asm": "mov h2, v1.h[1]\nmov h3, v0.h[1]\nfcvt s4, h1\nfcvt s5, h0\nmov h6, v1.h[2]\nmov h7, v0.h[2]\nmov h16, v1.h[3]\nfcvt s2, h2\nfcvt s3, h3\nfmax s4, s5, s4\nmov h5, v0.h[3]\nfcvt s6, h6\nfcvt s7, h7\nfcvt s16, h16\nfmax s3, s3, s2\nfcvt s5, h5\nfcvt h2, s4\nfmax s4, s7, s6\nmov h6, v1.h[4]\nmov h7, v0.h[4]\nfcvt h3, s3\nfmax s5, s5, s16\nmov h16, v0.h[5]\nfcvt h4, s4\nmov v2.h[1], v3.h[0]\nfcvt s3, h6\nfcvt s6, h7\nmov h7, v1.h[5]\nfcvt h5, s5\nfcvt s16, h16\nmov v2.h[2], v4.h[0]\nmov h4, v1.h[6]\nfmax s3, s6, s3\nmov h6, v0.h[6]\nfcvt s7, h7\nmov h1, v1.h[7]\nmov h0, v0.h[7]\nmov v2.h[3], v5.h[0]\nfcvt s4, h4\nfcvt h3, s3\nfcvt s5, h6\nfmax s6, s16, s7\nfcvt s1, h1\nfcvt s0, h0\nmov v2.h[4], v3.h[0]\nfmax s4, s5, s4\nfcvt h3, s6\nfmax s0, s0, s1\nmov v2.h[5], v3.h[0]\nfcvt h3, s4\nfcvt h0, s0\nmov v2.h[6], v3.h[0]\nmov v2.h[7], v0.h[0]\nmov v0.16b, v2.16b\nret",
  "giasm": "fcvtl v2.4s, v0.4h\nfcvtl v3.4s, v1.4h\nfcvtl2 v0.4s, v0.8h\nfcvtl2 v1.4s, v1.8h\nfmax v2.4s, v2.4s, v3.4s\nfmax v1.4s, v0.4s, v1.4s\nfcvtn v0.4h, v2.4s\nfcvtn2 v0.8h, v1.4s\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, <8 x half> %b) {\n  %r = call <8 x half> @llvm.maximum(<8 x half> %a, <8 x half> %b)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 50 for instruction:   %r = call <8 x half> @llvm.maximum.v8f16(<8 x half> %a, <8 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "maximum",
  "ty": "<8 x half>",
  "variant": "binopconst",
  "codesize": 36,
  "thru": 36,
  "lat": 36,
  "sizelat": 36,
  "size": 41,
  "gisize": 9,
  "extrasize": 0,
  "asm": "mov h1, v0.h[1]\nfcvt s2, h0\nmov h3, v0.h[2]\nfmov s4, #6.00000000\nfmov s5, #7.00000000\nmov h6, v0.h[3]\nmov h16, v0.h[4]\nfcvt s1, h1\nfmax s2, s2, s5\nfcvt s3, h3\nfcvt s6, h6\nfmax s7, s1, s4\nfcvt h1, s2\nfmax s2, s3, s5\nfmax s6, s6, s4\nfcvt h3, s7\nfcvt s7, h16\nfcvt h2, s2\nfcvt h6, s6\nmov v1.h[1], v3.h[0]\nmov h3, v0.h[5]\nfmax s7, s7, s5\nmov v1.h[2], v2.h[0]\nmov h2, v0.h[6]\nfcvt s3, h3\nmov h0, v0.h[7]\nmov v1.h[3], v6.h[0]\nfcvt h6, s7\nfcvt s2, h2\nfmax s3, s3, s4\nfcvt s0, h0\nmov v1.h[4], v6.h[0]\nfmax s2, s2, s5\nfcvt h3, s3\nfmax s0, s0, s4\nfcvt h2, s2\nmov v1.h[5], v3.h[0]\nfcvt h0, s0\nmov v1.h[6], v2.h[0]\nmov v1.h[7], v0.h[0]\nmov v0.16b, v1.16b\nret",
  "giasm": "adrp x8, .LCPI0_0\nfcvtl v2.4s, v0.4h\nfcvtl2 v0.4s, v0.8h\nldr d1, [x8, :lo12:.LCPI0_0]\nfcvtl v1.4s, v1.4h\nfmax v2.4s, v2.4s, v1.4s\nfmax v1.4s, v0.4s, v1.4s\nfcvtn v0.4h, v2.4s\nfcvtn2 v0.8h, v1.4s\nret",
  "ll": "define <8 x half> @test(<8 x half> %a) {\n  %r = call <8 x half> @llvm.maximum(<8 x half> %a, <8 x half> <half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0>)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 36 for instruction:   %r = call <8 x half> @llvm.maximum.v8f16(<8 x half> %a, <8 x half> <half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "maximum",
  "ty": "<8 x half>",
  "variant": "binopsplat",
  "codesize": 51,
  "thru": 51,
  "lat": 51,
  "sizelat": 51,
  "size": 40,
  "gisize": 9,
  "extrasize": 0,
  "asm": "mov h3, v0.h[1]\nfcvt s2, h1\nfcvt s1, h0\nmov h4, v0.h[2]\nmov h5, v0.h[3]\nmov h6, v0.h[4]\nfcvt s3, h3\nfmax s1, s1, s2\nfcvt s4, h4\nfcvt s5, h5\nfcvt s6, h6\nfmax s3, s3, s2\nfcvt h1, s1\nfmax s4, s4, s2\nfmax s5, s5, s2\nfmax s6, s6, s2\nfcvt h3, s3\nfcvt h4, s4\nfcvt h5, s5\nmov v1.h[1], v3.h[0]\nmov h3, v0.h[5]\nmov v1.h[2], v4.h[0]\nmov h4, v0.h[6]\nfcvt s3, h3\nmov h0, v0.h[7]\nmov v1.h[3], v5.h[0]\nfcvt h5, s6\nfcvt s4, h4\nfmax s3, s3, s2\nfcvt s0, h0\nmov v1.h[4], v5.h[0]\nfmax s4, s4, s2\nfcvt h3, s3\nfmax s0, s0, s2\nmov v1.h[5], v3.h[0]\nfcvt h3, s4\nfcvt h0, s0\nmov v1.h[6], v3.h[0]\nmov v1.h[7], v0.h[0]\nmov v0.16b, v1.16b\nret",
  "giasm": "fcvtl v2.4s, v0.4h\nfcvtl2 v0.4s, v0.8h\ndup v1.8h, v1.h[0]\nfcvtl v3.4s, v1.4h\nfcvtl2 v1.4s, v1.8h\nfmax v2.4s, v2.4s, v3.4s\nfmax v1.4s, v0.4s, v1.4s\nfcvtn v0.4h, v2.4s\nfcvtn2 v0.8h, v1.4s\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, half %bs) {\n  %i = insertelement <8 x half> poison, half %bs, i64 0\n  %b = shufflevector <8 x half> %i, <8 x half> poison, <8 x i32> zeroinitializer\n  %r = call <8 x half> @llvm.maximum(<8 x half> %a, <8 x half> %b)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <8 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <8 x half> %i, <8 x half> poison, <8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 50 for instruction:   %r = call <8 x half> @llvm.maximum.v8f16(<8 x half> %a, <8 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "maximum",
  "ty": "<8 x half>",
  "variant": "binopconstsplat",
  "codesize": 36,
  "thru": 36,
  "lat": 36,
  "sizelat": 36,
  "size": 40,
  "gisize": 8,
  "extrasize": 0,
  "asm": "mov h1, v0.h[1]\nfcvt s3, h0\nmov h4, v0.h[2]\nfmov s2, #7.00000000\nmov h5, v0.h[3]\nmov h7, v0.h[4]\nfcvt s1, h1\nfmax s3, s3, s2\nfcvt s4, h4\nfcvt s5, h5\nfmax s6, s1, s2\nfcvt h1, s3\nfmax s3, s4, s2\nfmax s5, s5, s2\nfcvt h4, s6\nfcvt s6, h7\nfcvt h3, s3\nfcvt h5, s5\nmov v1.h[1], v4.h[0]\nmov h4, v0.h[5]\nfmax s6, s6, s2\nmov v1.h[2], v3.h[0]\nmov h3, v0.h[6]\nfcvt s4, h4\nmov h0, v0.h[7]\nmov v1.h[3], v5.h[0]\nfcvt h5, s6\nfcvt s3, h3\nfmax s4, s4, s2\nfcvt s0, h0\nmov v1.h[4], v5.h[0]\nfmax s3, s3, s2\nfcvt h4, s4\nfmax s0, s0, s2\nfcvt h3, s3\nmov v1.h[5], v4.h[0]\nfcvt h0, s0\nmov v1.h[6], v3.h[0]\nmov v1.h[7], v0.h[0]\nmov v0.16b, v1.16b\nret",
  "giasm": "movi v1.4h, #71, lsl #8\nfcvtl v2.4s, v0.4h\nfcvtl2 v0.4s, v0.8h\nfcvtl v1.4s, v1.4h\nfmax v2.4s, v2.4s, v1.4s\nfmax v1.4s, v0.4s, v1.4s\nfcvtn v0.4h, v2.4s\nfcvtn2 v0.8h, v1.4s\nret",
  "ll": "define <8 x half> @test(<8 x half> %a) {\n  %r = call <8 x half> @llvm.maximum(<8 x half> %a, <8 x half> <half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0>)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 36 for instruction:   %r = call <8 x half> @llvm.maximum.v8f16(<8 x half> %a, <8 x half> splat (half 0xH4700))\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "maximum",
  "ty": "<16 x half>",
  "variant": "binop",
  "codesize": 100,
  "thru": 100,
  "lat": 100,
  "sizelat": 100,
  "size": 108,
  "gisize": 16,
  "extrasize": 0,
  "asm": "mov h6, v2.h[1]\nmov h7, v0.h[1]\nfcvt s4, h2\nfcvt s5, h0\nmov h16, v3.h[1]\nmov h17, v1.h[1]\nmov h18, v2.h[2]\nmov h19, v0.h[2]\nfcvt s20, h3\nfcvt s21, h1\nmov h22, v3.h[2]\nmov h23, v1.h[2]\nfcvt s6, h6\nfcvt s7, h7\nmov h24, v0.h[6]\nfmax s4, s5, s4\nfcvt s5, h16\nfcvt s16, h17\nfcvt s17, h18\nfcvt s18, h19\nmov h19, v0.h[3]\nfmax s20, s21, s20\nfcvt s21, h22\nmov h22, v3.h[3]\nfmax s6, s7, s6\nmov h7, v2.h[3]\nmov h25, v1.h[6]\nfcvt h4, s4\nfmax s5, s16, s5\nfcvt s16, h23\nmov h23, v1.h[3]\nfmax s17, s18, s17\nfcvt s18, h19\nfcvt h6, s6\nfcvt s7, h7\nfcvt h19, s5\nfcvt h5, s20\nfmax s16, s16, s21\nfcvt s20, h23\nfcvt h17, s17\nmov h21, v2.h[4]\nmov h23, v1.h[4]\nmov v4.h[1], v6.h[0]\nfcvt s6, h22\nmov h22, v0.h[4]\nfmax s7, s18, s7\nmov h18, v3.h[4]\nmov v5.h[1], v19.h[0]\nfcvt h16, s16\nfmax s6, s20, s6\nmov v4.h[2], v17.h[0]\nfcvt s17, h21\nfcvt s19, h22\nfcvt h7, s7\nfcvt s18, h18\nfcvt s20, h23\nmov h21, v2.h[5]\nmov h22, v0.h[5]\nmov v5.h[2], v16.h[0]\nmov h16, v3.h[5]\nmov h23, v1.h[5]\nfcvt h6, s6\nmov h0, v0.h[7]\nmov h1, v1.h[7]\nfmax s17, s19, s17\nmov h19, v2.h[6]\nmov v4.h[3], v7.h[0]\nfmax s18, s20, s18\nmov h20, v3.h[6]\nfcvt s7, h21\nfcvt s21, h22\nfcvt s22, h24\nmov h2, v2.h[7]\nmov v5.h[3], v6.h[0]\nfcvt s6, h16\nfcvt s16, h23\nfcvt h17, s17\nfcvt s19, h19\nfcvt s23, h25\nfcvt h18, s18\nfcvt s20, h20\nmov h3, v3.h[7]\nfmax s7, s21, s7\nfcvt s2, h2\nfcvt s0, h0\nfmax s6, s16, s6\nfcvt s1, h1\nmov v4.h[4], v17.h[0]\nfmax s16, s22, s19\nmov v5.h[4], v18.h[0]\nfmax s17, s23, s20\nfcvt s3, h3\nfcvt h7, s7\nfmax s0, s0, s2\nfcvt h6, s6\nfcvt h2, s16\nfmax s1, s1, s3\nmov v4.h[5], v7.h[0]\nfcvt h0, s0\nmov v5.h[5], v6.h[0]\nfcvt h6, s17\nfcvt h1, s1\nmov v4.h[6], v2.h[0]\nmov v5.h[6], v6.h[0]\nmov v4.h[7], v0.h[0]\nmov v5.h[7], v1.h[0]\nmov v0.16b, v4.16b\nmov v1.16b, v5.16b\nret",
  "giasm": "fcvtl v4.4s, v0.4h\nfcvtl v5.4s, v1.4h\nfcvtl v6.4s, v2.4h\nfcvtl v7.4s, v3.4h\nfcvtl2 v0.4s, v0.8h\nfcvtl2 v1.4s, v1.8h\nfcvtl2 v2.4s, v2.8h\nfcvtl2 v3.4s, v3.8h\nfmax v4.4s, v4.4s, v6.4s\nfmax v5.4s, v5.4s, v7.4s\nfmax v2.4s, v0.4s, v2.4s\nfmax v3.4s, v1.4s, v3.4s\nfcvtn v0.4h, v4.4s\nfcvtn v1.4h, v5.4s\nfcvtn2 v0.8h, v2.4s\nfcvtn2 v1.8h, v3.4s\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, <16 x half> %b) {\n  %r = call <16 x half> @llvm.maximum(<16 x half> %a, <16 x half> %b)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 100 for instruction:   %r = call <16 x half> @llvm.maximum.v16f16(<16 x half> %a, <16 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "maximum",
  "ty": "<16 x half>",
  "variant": "binopconst",
  "codesize": 72,
  "thru": 72,
  "lat": 72,
  "sizelat": 72,
  "size": 80,
  "gisize": 15,
  "extrasize": 0,
  "asm": "mov h2, v0.h[1]\nmov h3, v1.h[1]\nfcvt s6, h0\nmov h7, v0.h[2]\nfcvt s16, h1\nmov h17, v1.h[2]\nfmov s4, #6.00000000\nfmov s5, #7.00000000\nmov h18, v0.h[3]\nmov h19, v1.h[3]\nmov h22, v0.h[4]\nmov h23, v1.h[4]\nfcvt s2, h2\nfcvt s3, h3\nfmax s6, s6, s5\nfcvt s7, h7\nfmax s16, s16, s5\nfcvt s17, h17\nfcvt s18, h18\nfcvt s19, h19\nfmax s20, s2, s4\nfmax s21, s3, s4\nfcvt h2, s6\nfmax s6, s7, s5\nfcvt h3, s16\nfmax s16, s17, s5\nfmax s18, s18, s4\nfcvt h7, s20\nfcvt h17, s21\nfcvt s20, h22\nfcvt s21, h23\nfcvt h6, s6\nfcvt h16, s16\nfcvt h18, s18\nmov v2.h[1], v7.h[0]\nfmax s7, s19, s4\nmov v3.h[1], v17.h[0]\nmov h17, v0.h[5]\nmov h19, v1.h[5]\nfmax s20, s20, s5\nmov v2.h[2], v6.h[0]\nfmax s6, s21, s5\nfcvt h7, s7\nmov v3.h[2], v16.h[0]\nmov h16, v0.h[6]\nfcvt s17, h17\nfcvt s19, h19\nmov h21, v1.h[6]\nmov h0, v0.h[7]\nmov h1, v1.h[7]\nmov v2.h[3], v18.h[0]\nfcvt h6, s6\nmov v3.h[3], v7.h[0]\nfcvt h7, s20\nfcvt s16, h16\nfmax s17, s17, s4\nfmax s18, s19, s4\nfcvt s19, h21\nfcvt s0, h0\nfcvt s1, h1\nmov v2.h[4], v7.h[0]\nmov v3.h[4], v6.h[0]\nfmax s7, s16, s5\nfcvt h6, s17\nfcvt h16, s18\nfmax s5, s19, s5\nfmax s0, s0, s4\nfmax s1, s1, s4\nmov v2.h[5], v6.h[0]\nmov v3.h[5], v16.h[0]\nfcvt h6, s7\nfcvt h4, s5\nfcvt h0, s0\nfcvt h1, s1\nmov v2.h[6], v6.h[0]\nmov v3.h[6], v4.h[0]\nmov v2.h[7], v0.h[0]\nmov v3.h[7], v1.h[0]\nmov v0.16b, v2.16b\nmov v1.16b, v3.16b\nret",
  "giasm": "adrp x8, .LCPI0_0\nfcvtl v3.4s, v0.4h\nfcvtl v4.4s, v1.4h\nldr d2, [x8, :lo12:.LCPI0_0]\nfcvtl2 v0.4s, v0.8h\nfcvtl2 v1.4s, v1.8h\nfcvtl v2.4s, v2.4h\nfmax v3.4s, v3.4s, v2.4s\nfmax v4.4s, v4.4s, v2.4s\nfmax v5.4s, v0.4s, v2.4s\nfmax v2.4s, v1.4s, v2.4s\nfcvtn v0.4h, v3.4s\nfcvtn v1.4h, v4.4s\nfcvtn2 v0.8h, v5.4s\nfcvtn2 v1.8h, v2.4s\nret",
  "ll": "define <16 x half> @test(<16 x half> %a) {\n  %r = call <16 x half> @llvm.maximum(<16 x half> %a, <16 x half> <half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0>)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 72 for instruction:   %r = call <16 x half> @llvm.maximum.v16f16(<16 x half> %a, <16 x half> <half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "maximum",
  "ty": "<16 x half>",
  "variant": "binopsplat",
  "codesize": 102,
  "thru": 102,
  "lat": 102,
  "sizelat": 102,
  "size": 79,
  "gisize": 18,
  "extrasize": 0,
  "asm": "mov h3, v0.h[1]\nmov h5, v1.h[1]\nfcvt s4, h2\nfcvt s2, h0\nmov h6, v0.h[2]\nfcvt s7, h1\nmov h16, v1.h[2]\nmov h17, v0.h[3]\nmov h18, v1.h[3]\nmov h19, v0.h[4]\nmov h20, v1.h[4]\nfcvt s3, h3\nfcvt s5, h5\nfmax s2, s2, s4\nfcvt s6, h6\nfmax s7, s7, s4\nfcvt s16, h16\nfcvt s17, h17\nfcvt s18, h18\nfmax s3, s3, s4\nfmax s5, s5, s4\nfcvt h2, s2\nfmax s6, s6, s4\nfmax s17, s17, s4\nfmax s18, s18, s4\nfcvt h21, s3\nfcvt h3, s7\nfmax s7, s16, s4\nfcvt h5, s5\nfcvt s16, h19\nfcvt s19, h20\nfcvt h6, s6\nmov h20, v1.h[5]\nfcvt h17, s17\nfcvt h18, s18\nmov v2.h[1], v21.h[0]\nfcvt h7, s7\nmov v3.h[1], v5.h[0]\nmov h5, v0.h[5]\nfmax s16, s16, s4\nfcvt s20, h20\nmov v2.h[2], v6.h[0]\nfmax s6, s19, s4\nmov h19, v1.h[6]\nmov v3.h[2], v7.h[0]\nmov h7, v0.h[6]\nfcvt s5, h5\nfcvt h16, s16\nmov h0, v0.h[7]\nmov h1, v1.h[7]\nmov v2.h[3], v17.h[0]\nfcvt h6, s6\nfcvt s17, h19\nmov v3.h[3], v18.h[0]\nfcvt s7, h7\nfmax s5, s5, s4\nfmax s18, s20, s4\nfcvt s0, h0\nfcvt s1, h1\nmov v2.h[4], v16.h[0]\nfmax s16, s17, s4\nmov v3.h[4], v6.h[0]\nfcvt h5, s5\nfmax s6, s7, s4\nfcvt h7, s18\nfmax s0, s0, s4\nfmax s1, s1, s4\nfcvt h4, s16\nmov v2.h[5], v5.h[0]\nfcvt h5, s6\nmov v3.h[5], v7.h[0]\nfcvt h0, s0\nfcvt h1, s1\nmov v2.h[6], v5.h[0]\nmov v3.h[6], v4.h[0]\nmov v2.h[7], v0.h[0]\nmov v3.h[7], v1.h[0]\nmov v0.16b, v2.16b\nmov v1.16b, v3.16b\nret",
  "giasm": "dup v3.8h, v2.h[0]\nfcvtl v4.4s, v0.4h\nfcvtl v5.4s, v1.4h\ndup v2.8h, v2.h[0]\nfcvtl2 v0.4s, v0.8h\nfcvtl2 v1.4s, v1.8h\nfcvtl v6.4s, v3.4h\nfcvtl2 v3.4s, v3.8h\nfcvtl v7.4s, v2.4h\nfcvtl2 v2.4s, v2.8h\nfmax v4.4s, v4.4s, v6.4s\nfmax v3.4s, v0.4s, v3.4s\nfmax v5.4s, v5.4s, v7.4s\nfmax v2.4s, v1.4s, v2.4s\nfcvtn v0.4h, v4.4s\nfcvtn v1.4h, v5.4s\nfcvtn2 v0.8h, v3.4s\nfcvtn2 v1.8h, v2.4s\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, half %bs) {\n  %i = insertelement <16 x half> poison, half %bs, i64 0\n  %b = shufflevector <16 x half> %i, <16 x half> poison, <16 x i32> zeroinitializer\n  %r = call <16 x half> @llvm.maximum(<16 x half> %a, <16 x half> %b)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <16 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <16 x half> %i, <16 x half> poison, <16 x i32> zeroinitializer\nCost Model: Found an estimated cost of 100 for instruction:   %r = call <16 x half> @llvm.maximum.v16f16(<16 x half> %a, <16 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "maximum",
  "ty": "<16 x half>",
  "variant": "binopconstsplat",
  "codesize": 72,
  "thru": 72,
  "lat": 72,
  "sizelat": 72,
  "size": 79,
  "gisize": 14,
  "extrasize": 0,
  "asm": "mov h2, v0.h[1]\nmov h3, v1.h[1]\nfcvt s5, h0\nmov h6, v0.h[2]\nfcvt s7, h1\nmov h16, v1.h[2]\nfmov s4, #7.00000000\nmov h17, v0.h[3]\nmov h18, v1.h[3]\nmov h21, v0.h[4]\nmov h22, v1.h[4]\nfcvt s2, h2\nfcvt s3, h3\nfmax s5, s5, s4\nfcvt s6, h6\nfmax s7, s7, s4\nfcvt s16, h16\nfcvt s17, h17\nfcvt s18, h18\nfmax s19, s2, s4\nfmax s20, s3, s4\nfcvt h2, s5\nfmax s5, s6, s4\nfcvt h3, s7\nfmax s7, s16, s4\nfmax s17, s17, s4\nfcvt h6, s19\nfcvt h16, s20\nfcvt s19, h21\nfcvt s20, h22\nfcvt h5, s5\nfcvt h7, s7\nfcvt h17, s17\nmov v2.h[1], v6.h[0]\nfmax s6, s18, s4\nmov v3.h[1], v16.h[0]\nmov h16, v0.h[5]\nmov h18, v1.h[5]\nfmax s19, s19, s4\nmov v2.h[2], v5.h[0]\nfmax s5, s20, s4\nfcvt h6, s6\nmov v3.h[2], v7.h[0]\nmov h7, v0.h[6]\nfcvt s16, h16\nmov h20, v1.h[6]\nfcvt s18, h18\nmov h0, v0.h[7]\nmov h1, v1.h[7]\nmov v2.h[3], v17.h[0]\nfcvt h5, s5\nmov v3.h[3], v6.h[0]\nfcvt h6, s19\nfcvt s7, h7\nfmax s16, s16, s4\nfcvt s17, h20\nfmax s18, s18, s4\nfcvt s0, h0\nfcvt s1, h1\nmov v2.h[4], v6.h[0]\nmov v3.h[4], v5.h[0]\nfmax s6, s7, s4\nfcvt h5, s16\nfcvt h7, s18\nfmax s16, s17, s4\nfmax s0, s0, s4\nfmax s1, s1, s4\nmov v2.h[5], v5.h[0]\nfcvt h5, s6\nmov v3.h[5], v7.h[0]\nfcvt h4, s16\nfcvt h0, s0\nfcvt h1, s1\nmov v2.h[6], v5.h[0]\nmov v3.h[6], v4.h[0]\nmov v2.h[7], v0.h[0]\nmov v3.h[7], v1.h[0]\nmov v0.16b, v2.16b\nmov v1.16b, v3.16b\nret",
  "giasm": "movi v2.4h, #71, lsl #8\nfcvtl v3.4s, v0.4h\nfcvtl v4.4s, v1.4h\nfcvtl2 v0.4s, v0.8h\nfcvtl2 v1.4s, v1.8h\nfcvtl v2.4s, v2.4h\nfmax v3.4s, v3.4s, v2.4s\nfmax v4.4s, v4.4s, v2.4s\nfmax v5.4s, v0.4s, v2.4s\nfmax v2.4s, v1.4s, v2.4s\nfcvtn v0.4h, v3.4s\nfcvtn v1.4h, v4.4s\nfcvtn2 v0.8h, v5.4s\nfcvtn2 v1.8h, v2.4s\nret",
  "ll": "define <16 x half> @test(<16 x half> %a) {\n  %r = call <16 x half> @llvm.maximum(<16 x half> %a, <16 x half> <half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0>)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 72 for instruction:   %r = call <16 x half> @llvm.maximum.v16f16(<16 x half> %a, <16 x half> splat (half 0xH4700))\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "maximum",
  "ty": "<2 x float>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmax v0.2s, v0.2s, v1.2s\nret",
  "giasm": "fmax v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, <2 x float> %b) {\n  %r = call <2 x float> @llvm.maximum(<2 x float> %a, <2 x float> %b)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x float> @llvm.maximum.v2f32(<2 x float> %a, <2 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "maximum",
  "ty": "<2 x float>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr d1, [x8, :lo12:.LCPI0_0]\nfmax v0.2s, v0.2s, v1.2s\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr d1, [x8, :lo12:.LCPI0_0]\nfmax v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a) {\n  %r = call <2 x float> @llvm.maximum(<2 x float> %a, <2 x float> <float 7.0, float 6.0>)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x float> @llvm.maximum.v2f32(<2 x float> %a, <2 x float> <float 7.000000e+00, float 6.000000e+00>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "maximum",
  "ty": "<2 x float>",
  "variant": "binopsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "dup v1.2s, v1.s[0]\nfmax v0.2s, v0.2s, v1.2s\nret",
  "giasm": "dup v1.2s, v1.s[0]\nfmax v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, float %bs) {\n  %i = insertelement <2 x float> poison, float %bs, i64 0\n  %b = shufflevector <2 x float> %i, <2 x float> poison, <2 x i32> zeroinitializer\n  %r = call <2 x float> @llvm.maximum(<2 x float> %a, <2 x float> %b)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <2 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <2 x float> %i, <2 x float> poison, <2 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x float> @llvm.maximum.v2f32(<2 x float> %a, <2 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "maximum",
  "ty": "<2 x float>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov v1.2s, #7.00000000\nfmax v0.2s, v0.2s, v1.2s\nret",
  "giasm": "fmov v1.2s, #7.00000000\nfmax v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a) {\n  %r = call <2 x float> @llvm.maximum(<2 x float> %a, <2 x float> <float 7.0, float 7.0>)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x float> @llvm.maximum.v2f32(<2 x float> %a, <2 x float> splat (float 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "maximum",
  "ty": "<4 x float>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmax v0.4s, v0.4s, v1.4s\nret",
  "giasm": "fmax v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, <4 x float> %b) {\n  %r = call <4 x float> @llvm.maximum(<4 x float> %a, <4 x float> %b)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x float> @llvm.maximum.v4f32(<4 x float> %a, <4 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "maximum",
  "ty": "<4 x float>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfmax v0.4s, v0.4s, v1.4s\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfmax v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a) {\n  %r = call <4 x float> @llvm.maximum(<4 x float> %a, <4 x float> <float 7.0, float 6.0, float 7.0, float 6.0>)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x float> @llvm.maximum.v4f32(<4 x float> %a, <4 x float> <float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "maximum",
  "ty": "<4 x float>",
  "variant": "binopsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "dup v1.4s, v1.s[0]\nfmax v0.4s, v0.4s, v1.4s\nret",
  "giasm": "dup v1.4s, v1.s[0]\nfmax v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, float %bs) {\n  %i = insertelement <4 x float> poison, float %bs, i64 0\n  %b = shufflevector <4 x float> %i, <4 x float> poison, <4 x i32> zeroinitializer\n  %r = call <4 x float> @llvm.maximum(<4 x float> %a, <4 x float> %b)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <4 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <4 x float> %i, <4 x float> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x float> @llvm.maximum.v4f32(<4 x float> %a, <4 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "maximum",
  "ty": "<4 x float>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov v1.4s, #7.00000000\nfmax v0.4s, v0.4s, v1.4s\nret",
  "giasm": "fmov v1.4s, #7.00000000\nfmax v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a) {\n  %r = call <4 x float> @llvm.maximum(<4 x float> %a, <4 x float> <float 7.0, float 7.0, float 7.0, float 7.0>)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x float> @llvm.maximum.v4f32(<4 x float> %a, <4 x float> splat (float 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "maximum",
  "ty": "<8 x float>",
  "variant": "binop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmax v1.4s, v1.4s, v3.4s\nfmax v0.4s, v0.4s, v2.4s\nret",
  "giasm": "fmax v0.4s, v0.4s, v2.4s\nfmax v1.4s, v1.4s, v3.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, <8 x float> %b) {\n  %r = call <8 x float> @llvm.maximum(<8 x float> %a, <8 x float> %b)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x float> @llvm.maximum.v8f32(<8 x float> %a, <8 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "maximum",
  "ty": "<8 x float>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfmax v0.4s, v0.4s, v2.4s\nfmax v1.4s, v1.4s, v2.4s\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfmax v0.4s, v0.4s, v2.4s\nfmax v1.4s, v1.4s, v2.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a) {\n  %r = call <8 x float> @llvm.maximum(<8 x float> %a, <8 x float> <float 7.0, float 6.0, float 7.0, float 6.0, float 7.0, float 6.0, float 7.0, float 6.0>)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x float> @llvm.maximum.v8f32(<8 x float> %a, <8 x float> <float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "maximum",
  "ty": "<8 x float>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 6,
  "lat": 6,
  "sizelat": 6,
  "size": 3,
  "gisize": 4,
  "extrasize": 0,
  "asm": "dup v2.4s, v2.s[0]\nfmax v0.4s, v0.4s, v2.4s\nfmax v1.4s, v1.4s, v2.4s\nret",
  "giasm": "dup v3.4s, v2.s[0]\ndup v2.4s, v2.s[0]\nfmax v0.4s, v0.4s, v3.4s\nfmax v1.4s, v1.4s, v2.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, float %bs) {\n  %i = insertelement <8 x float> poison, float %bs, i64 0\n  %b = shufflevector <8 x float> %i, <8 x float> poison, <8 x i32> zeroinitializer\n  %r = call <8 x float> @llvm.maximum(<8 x float> %a, <8 x float> %b)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <8 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <8 x float> %i, <8 x float> poison, <8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x float> @llvm.maximum.v8f32(<8 x float> %a, <8 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "maximum",
  "ty": "<8 x float>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fmov v2.4s, #7.00000000\nfmax v0.4s, v0.4s, v2.4s\nfmax v1.4s, v1.4s, v2.4s\nret",
  "giasm": "fmov v2.4s, #7.00000000\nfmax v0.4s, v0.4s, v2.4s\nfmax v1.4s, v1.4s, v2.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a) {\n  %r = call <8 x float> @llvm.maximum(<8 x float> %a, <8 x float> <float 7.0, float 7.0, float 7.0, float 7.0, float 7.0, float 7.0, float 7.0, float 7.0>)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x float> @llvm.maximum.v8f32(<8 x float> %a, <8 x float> splat (float 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "maximum",
  "ty": "<2 x double>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmax v0.2d, v0.2d, v1.2d\nret",
  "giasm": "fmax v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, <2 x double> %b) {\n  %r = call <2 x double> @llvm.maximum(<2 x double> %a, <2 x double> %b)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x double> @llvm.maximum.v2f64(<2 x double> %a, <2 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "maximum",
  "ty": "<2 x double>",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfmax v0.2d, v0.2d, v1.2d\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q1, [x8, :lo12:.LCPI0_0]\nfmax v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a) {\n  %r = call <2 x double> @llvm.maximum(<2 x double> %a, <2 x double> <double 7.0, double 6.0>)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x double> @llvm.maximum.v2f64(<2 x double> %a, <2 x double> <double 7.000000e+00, double 6.000000e+00>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "maximum",
  "ty": "<2 x double>",
  "variant": "binopsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "dup v1.2d, v1.d[0]\nfmax v0.2d, v0.2d, v1.2d\nret",
  "giasm": "dup v1.2d, v1.d[0]\nfmax v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, double %bs) {\n  %i = insertelement <2 x double> poison, double %bs, i64 0\n  %b = shufflevector <2 x double> %i, <2 x double> poison, <2 x i32> zeroinitializer\n  %r = call <2 x double> @llvm.maximum(<2 x double> %a, <2 x double> %b)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <2 x double> poison, double %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <2 x double> %i, <2 x double> poison, <2 x i32> zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x double> @llvm.maximum.v2f64(<2 x double> %a, <2 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "maximum",
  "ty": "<2 x double>",
  "variant": "binopconstsplat",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov v1.2d, #7.00000000\nfmax v0.2d, v0.2d, v1.2d\nret",
  "giasm": "fmov v1.2d, #7.00000000\nfmax v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a) {\n  %r = call <2 x double> @llvm.maximum(<2 x double> %a, <2 x double> <double 7.0, double 7.0>)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x double> @llvm.maximum.v2f64(<2 x double> %a, <2 x double> splat (double 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "maximum",
  "ty": "<4 x double>",
  "variant": "binop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmax v1.2d, v1.2d, v3.2d\nfmax v0.2d, v0.2d, v2.2d\nret",
  "giasm": "fmax v0.2d, v0.2d, v2.2d\nfmax v1.2d, v1.2d, v3.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, <4 x double> %b) {\n  %r = call <4 x double> @llvm.maximum(<4 x double> %a, <4 x double> %b)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x double> @llvm.maximum.v4f64(<4 x double> %a, <4 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "maximum",
  "ty": "<4 x double>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfmax v0.2d, v0.2d, v2.2d\nfmax v1.2d, v1.2d, v2.2d\nret",
  "giasm": "adrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfmax v0.2d, v0.2d, v2.2d\nfmax v1.2d, v1.2d, v2.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a) {\n  %r = call <4 x double> @llvm.maximum(<4 x double> %a, <4 x double> <double 7.0, double 6.0, double 7.0, double 6.0>)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x double> @llvm.maximum.v4f64(<4 x double> %a, <4 x double> <double 7.000000e+00, double 6.000000e+00, double 7.000000e+00, double 6.000000e+00>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "maximum",
  "ty": "<4 x double>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 6,
  "lat": 6,
  "sizelat": 6,
  "size": 3,
  "gisize": 4,
  "extrasize": 0,
  "asm": "dup v2.2d, v2.d[0]\nfmax v0.2d, v0.2d, v2.2d\nfmax v1.2d, v1.2d, v2.2d\nret",
  "giasm": "dup v3.2d, v2.d[0]\ndup v2.2d, v2.d[0]\nfmax v0.2d, v0.2d, v3.2d\nfmax v1.2d, v1.2d, v2.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, double %bs) {\n  %i = insertelement <4 x double> poison, double %bs, i64 0\n  %b = shufflevector <4 x double> %i, <4 x double> poison, <4 x i32> zeroinitializer\n  %r = call <4 x double> @llvm.maximum(<4 x double> %a, <4 x double> %b)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <4 x double> poison, double %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <4 x double> %i, <4 x double> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x double> @llvm.maximum.v4f64(<4 x double> %a, <4 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "maximum",
  "ty": "<4 x double>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fmov v2.2d, #7.00000000\nfmax v0.2d, v0.2d, v2.2d\nfmax v1.2d, v1.2d, v2.2d\nret",
  "giasm": "fmov v2.2d, #7.00000000\nfmax v0.2d, v0.2d, v2.2d\nfmax v1.2d, v1.2d, v2.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a) {\n  %r = call <4 x double> @llvm.maximum(<4 x double> %a, <4 x double> <double 7.0, double 7.0, double 7.0, double 7.0>)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x double> @llvm.maximum.v4f64(<4 x double> %a, <4 x double> splat (double 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "copysign",
  "ty": "half",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 5,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcvt s1, h1\nfcvt s0, h0\nmvni v2.4s, #128, lsl #24\nbif v0.16b, v1.16b, v2.16b\nfcvt h0, s0\nret",
  "giasm": "mvni v2.4h, #128, lsl #8\nbif v0.8b, v1.8b, v2.8b\nret",
  "ll": "define half @test(half %a, half %b) {\n  %r = call half @llvm.copysign(half %a, half %b)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call half @llvm.copysign.f16(half %a, half %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "copysign",
  "ty": "half",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fmov w8, s0\nand w8, w8, #0x7fff\nfmov s0, w8\nret",
  "giasm": "mov w8, #18176                      // =0x4700\nmvni v1.4h, #128, lsl #8\nfmov s2, w8\nbif v0.8b, v2.8b, v1.8b\nret",
  "ll": "define half @test(half %a) {\n  %r = call half @llvm.copysign(half %a, half 7.0)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call half @llvm.copysign.f16(half %a, half 0xH4700)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "copysign",
  "ty": "float",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "mvni v2.4s, #128, lsl #24\nbif v0.16b, v1.16b, v2.16b\nret",
  "giasm": "mvni v2.2s, #128, lsl #24\nbif v0.8b, v1.8b, v2.8b\nret",
  "ll": "define float @test(float %a, float %b) {\n  %r = call float @llvm.copysign(float %a, float %b)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call float @llvm.copysign.f32(float %a, float %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "copysign",
  "ty": "float",
  "variant": "binopconst",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fabs s0, s0\nret",
  "giasm": "fmov s1, #7.00000000\nmvni v2.2s, #128, lsl #24\nbif v0.8b, v1.8b, v2.8b\nret",
  "ll": "define float @test(float %a) {\n  %r = call float @llvm.copysign(float %a, float 7.0)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call float @llvm.copysign.f32(float %a, float 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "copysign",
  "ty": "double",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "movi v2.2d, #0xffffffffffffffff\nfneg v2.2d, v2.2d\nbif v0.16b, v1.16b, v2.16b\nret",
  "giasm": "movi v2.2d, #0xffffffffffffffff\nfneg v2.2d, v2.2d\nbif v0.16b, v1.16b, v2.16b\nret",
  "ll": "define double @test(double %a, double %b) {\n  %r = call double @llvm.copysign(double %a, double %b)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call double @llvm.copysign.f64(double %a, double %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "copysign",
  "ty": "double",
  "variant": "binopconst",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fabs d0, d0\nret",
  "giasm": "movi v1.2d, #0xffffffffffffffff\nfmov d2, #7.00000000\nfneg v1.2d, v1.2d\nbif v0.16b, v2.16b, v1.16b\nret",
  "ll": "define double @test(double %a) {\n  %r = call double @llvm.copysign(double %a, double 7.0)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call double @llvm.copysign.f64(double %a, double 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "copysign",
  "ty": "<4 x half>",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "mvni v2.4h, #128, lsl #8\nbif v0.8b, v1.8b, v2.8b\nret",
  "giasm": "mvni v2.4h, #128, lsl #8\nbif v0.8b, v1.8b, v2.8b\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, <4 x half> %b) {\n  %r = call <4 x half> @llvm.copysign(<4 x half> %a, <4 x half> %b)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <4 x half> @llvm.copysign.v4f16(<4 x half> %a, <4 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "copysign",
  "ty": "<4 x half>",
  "variant": "binopconst",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 2,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nmvni v1.4h, #128, lsl #8\nldr d2, [x8, :lo12:.LCPI0_0]\nbif v0.8b, v2.8b, v1.8b\nret",
  "giasm": "mvni v1.4h, #128, lsl #8\nand v0.8b, v0.8b, v1.8b\nret",
  "ll": "define <4 x half> @test(<4 x half> %a) {\n  %r = call <4 x half> @llvm.copysign(<4 x half> %a, <4 x half> <half 7.0, half 6.0, half 7.0, half 6.0>)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <4 x half> @llvm.copysign.v4f16(<4 x half> %a, <4 x half> <half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "copysign",
  "ty": "<4 x half>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "mvni v2.4h, #128, lsl #8\ndup v1.4h, v1.h[0]\nbif v0.8b, v1.8b, v2.8b\nret",
  "giasm": "mvni v2.4h, #128, lsl #8\ndup v1.4h, v1.h[0]\nbif v0.8b, v1.8b, v2.8b\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, half %bs) {\n  %i = insertelement <4 x half> poison, half %bs, i64 0\n  %b = shufflevector <4 x half> %i, <4 x half> poison, <4 x i32> zeroinitializer\n  %r = call <4 x half> @llvm.copysign(<4 x half> %a, <4 x half> %b)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <4 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <4 x half> %i, <4 x half> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <4 x half> @llvm.copysign.v4f16(<4 x half> %a, <4 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "copysign",
  "ty": "<4 x half>",
  "variant": "binopconstsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": 2,
  "extrasize": 0,
  "asm": "bic v0.4h, #128, lsl #8\nret",
  "giasm": "mvni v1.4h, #128, lsl #8\nand v0.8b, v0.8b, v1.8b\nret",
  "ll": "define <4 x half> @test(<4 x half> %a) {\n  %r = call <4 x half> @llvm.copysign(<4 x half> %a, <4 x half> <half 7.0, half 7.0, half 7.0, half 7.0>)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <4 x half> @llvm.copysign.v4f16(<4 x half> %a, <4 x half> splat (half 0xH4700))\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "copysign",
  "ty": "<8 x half>",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "mvni v2.8h, #128, lsl #8\nbif v0.16b, v1.16b, v2.16b\nret",
  "giasm": "mvni v2.8h, #128, lsl #8\nbif v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, <8 x half> %b) {\n  %r = call <8 x half> @llvm.copysign(<8 x half> %a, <8 x half> %b)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <8 x half> @llvm.copysign.v8f16(<8 x half> %a, <8 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "copysign",
  "ty": "<8 x half>",
  "variant": "binopconst",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 2,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nmvni v1.8h, #128, lsl #8\nldr q2, [x8, :lo12:.LCPI0_0]\nbif v0.16b, v2.16b, v1.16b\nret",
  "giasm": "mvni v1.8h, #128, lsl #8\nand v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <8 x half> @test(<8 x half> %a) {\n  %r = call <8 x half> @llvm.copysign(<8 x half> %a, <8 x half> <half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0>)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <8 x half> @llvm.copysign.v8f16(<8 x half> %a, <8 x half> <half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "copysign",
  "ty": "<8 x half>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "mvni v2.8h, #128, lsl #8\ndup v1.8h, v1.h[0]\nbif v0.16b, v1.16b, v2.16b\nret",
  "giasm": "mvni v2.8h, #128, lsl #8\ndup v1.8h, v1.h[0]\nbif v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, half %bs) {\n  %i = insertelement <8 x half> poison, half %bs, i64 0\n  %b = shufflevector <8 x half> %i, <8 x half> poison, <8 x i32> zeroinitializer\n  %r = call <8 x half> @llvm.copysign(<8 x half> %a, <8 x half> %b)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <8 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <8 x half> %i, <8 x half> poison, <8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <8 x half> @llvm.copysign.v8f16(<8 x half> %a, <8 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "copysign",
  "ty": "<8 x half>",
  "variant": "binopconstsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": 2,
  "extrasize": 0,
  "asm": "bic v0.8h, #128, lsl #8\nret",
  "giasm": "mvni v1.8h, #128, lsl #8\nand v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <8 x half> @test(<8 x half> %a) {\n  %r = call <8 x half> @llvm.copysign(<8 x half> %a, <8 x half> <half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0>)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <8 x half> @llvm.copysign.v8f16(<8 x half> %a, <8 x half> splat (half 0xH4700))\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "copysign",
  "ty": "<16 x half>",
  "variant": "binop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "mvni v4.8h, #128, lsl #8\nbif v0.16b, v2.16b, v4.16b\nbif v1.16b, v3.16b, v4.16b\nret",
  "giasm": "mvni v4.8h, #128, lsl #8\nbif v0.16b, v2.16b, v4.16b\nbif v1.16b, v3.16b, v4.16b\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, <16 x half> %b) {\n  %r = call <16 x half> @llvm.copysign(<16 x half> %a, <16 x half> %b)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <16 x half> @llvm.copysign.v16f16(<16 x half> %a, <16 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "copysign",
  "ty": "<16 x half>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 5,
  "gisize": 3,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nmvni v2.8h, #128, lsl #8\nldr q3, [x8, :lo12:.LCPI0_0]\nbif v0.16b, v3.16b, v2.16b\nbif v1.16b, v3.16b, v2.16b\nret",
  "giasm": "mvni v2.8h, #128, lsl #8\nand v0.16b, v0.16b, v2.16b\nand v1.16b, v1.16b, v2.16b\nret",
  "ll": "define <16 x half> @test(<16 x half> %a) {\n  %r = call <16 x half> @llvm.copysign(<16 x half> %a, <16 x half> <half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0>)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <16 x half> @llvm.copysign.v16f16(<16 x half> %a, <16 x half> <half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "copysign",
  "ty": "<16 x half>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 6,
  "lat": 6,
  "sizelat": 6,
  "size": 4,
  "gisize": 5,
  "extrasize": 0,
  "asm": "mvni v3.8h, #128, lsl #8\ndup v2.8h, v2.h[0]\nbif v0.16b, v2.16b, v3.16b\nbif v1.16b, v2.16b, v3.16b\nret",
  "giasm": "dup v3.8h, v2.h[0]\nmvni v4.8h, #128, lsl #8\ndup v2.8h, v2.h[0]\nbif v0.16b, v3.16b, v4.16b\nbif v1.16b, v2.16b, v4.16b\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, half %bs) {\n  %i = insertelement <16 x half> poison, half %bs, i64 0\n  %b = shufflevector <16 x half> %i, <16 x half> poison, <16 x i32> zeroinitializer\n  %r = call <16 x half> @llvm.copysign(<16 x half> %a, <16 x half> %b)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <16 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <16 x half> %i, <16 x half> poison, <16 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <16 x half> @llvm.copysign.v16f16(<16 x half> %a, <16 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "copysign",
  "ty": "<16 x half>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "bic v0.8h, #128, lsl #8\nbic v1.8h, #128, lsl #8\nret",
  "giasm": "mvni v2.8h, #128, lsl #8\nand v0.16b, v0.16b, v2.16b\nand v1.16b, v1.16b, v2.16b\nret",
  "ll": "define <16 x half> @test(<16 x half> %a) {\n  %r = call <16 x half> @llvm.copysign(<16 x half> %a, <16 x half> <half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0>)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <16 x half> @llvm.copysign.v16f16(<16 x half> %a, <16 x half> splat (half 0xH4700))\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "copysign",
  "ty": "<2 x float>",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "mvni v2.2s, #128, lsl #24\nbif v0.8b, v1.8b, v2.8b\nret",
  "giasm": "mvni v2.2s, #128, lsl #24\nbif v0.8b, v1.8b, v2.8b\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, <2 x float> %b) {\n  %r = call <2 x float> @llvm.copysign(<2 x float> %a, <2 x float> %b)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <2 x float> @llvm.copysign.v2f32(<2 x float> %a, <2 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "copysign",
  "ty": "<2 x float>",
  "variant": "binopconst",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 2,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nmvni v1.2s, #128, lsl #24\nldr d2, [x8, :lo12:.LCPI0_0]\nbif v0.8b, v2.8b, v1.8b\nret",
  "giasm": "mvni v1.2s, #128, lsl #24\nand v0.8b, v0.8b, v1.8b\nret",
  "ll": "define <2 x float> @test(<2 x float> %a) {\n  %r = call <2 x float> @llvm.copysign(<2 x float> %a, <2 x float> <float 7.0, float 6.0>)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <2 x float> @llvm.copysign.v2f32(<2 x float> %a, <2 x float> <float 7.000000e+00, float 6.000000e+00>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "copysign",
  "ty": "<2 x float>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "mvni v2.2s, #128, lsl #24\ndup v1.2s, v1.s[0]\nbif v0.8b, v1.8b, v2.8b\nret",
  "giasm": "mvni v2.2s, #128, lsl #24\ndup v1.2s, v1.s[0]\nbif v0.8b, v1.8b, v2.8b\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, float %bs) {\n  %i = insertelement <2 x float> poison, float %bs, i64 0\n  %b = shufflevector <2 x float> %i, <2 x float> poison, <2 x i32> zeroinitializer\n  %r = call <2 x float> @llvm.copysign(<2 x float> %a, <2 x float> %b)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <2 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <2 x float> %i, <2 x float> poison, <2 x i32> zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <2 x float> @llvm.copysign.v2f32(<2 x float> %a, <2 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "copysign",
  "ty": "<2 x float>",
  "variant": "binopconstsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fabs v0.2s, v0.2s\nret",
  "giasm": "mvni v1.2s, #128, lsl #24\nand v0.8b, v0.8b, v1.8b\nret",
  "ll": "define <2 x float> @test(<2 x float> %a) {\n  %r = call <2 x float> @llvm.copysign(<2 x float> %a, <2 x float> <float 7.0, float 7.0>)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <2 x float> @llvm.copysign.v2f32(<2 x float> %a, <2 x float> splat (float 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "copysign",
  "ty": "<4 x float>",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "mvni v2.4s, #128, lsl #24\nbif v0.16b, v1.16b, v2.16b\nret",
  "giasm": "mvni v2.4s, #128, lsl #24\nbif v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, <4 x float> %b) {\n  %r = call <4 x float> @llvm.copysign(<4 x float> %a, <4 x float> %b)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <4 x float> @llvm.copysign.v4f32(<4 x float> %a, <4 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "copysign",
  "ty": "<4 x float>",
  "variant": "binopconst",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 2,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nmvni v1.4s, #128, lsl #24\nldr q2, [x8, :lo12:.LCPI0_0]\nbif v0.16b, v2.16b, v1.16b\nret",
  "giasm": "mvni v1.4s, #128, lsl #24\nand v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <4 x float> @test(<4 x float> %a) {\n  %r = call <4 x float> @llvm.copysign(<4 x float> %a, <4 x float> <float 7.0, float 6.0, float 7.0, float 6.0>)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <4 x float> @llvm.copysign.v4f32(<4 x float> %a, <4 x float> <float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "copysign",
  "ty": "<4 x float>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "mvni v2.4s, #128, lsl #24\ndup v1.4s, v1.s[0]\nbif v0.16b, v1.16b, v2.16b\nret",
  "giasm": "mvni v2.4s, #128, lsl #24\ndup v1.4s, v1.s[0]\nbif v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, float %bs) {\n  %i = insertelement <4 x float> poison, float %bs, i64 0\n  %b = shufflevector <4 x float> %i, <4 x float> poison, <4 x i32> zeroinitializer\n  %r = call <4 x float> @llvm.copysign(<4 x float> %a, <4 x float> %b)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <4 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <4 x float> %i, <4 x float> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <4 x float> @llvm.copysign.v4f32(<4 x float> %a, <4 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "copysign",
  "ty": "<4 x float>",
  "variant": "binopconstsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fabs v0.4s, v0.4s\nret",
  "giasm": "mvni v1.4s, #128, lsl #24\nand v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <4 x float> @test(<4 x float> %a) {\n  %r = call <4 x float> @llvm.copysign(<4 x float> %a, <4 x float> <float 7.0, float 7.0, float 7.0, float 7.0>)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <4 x float> @llvm.copysign.v4f32(<4 x float> %a, <4 x float> splat (float 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "copysign",
  "ty": "<8 x float>",
  "variant": "binop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "mvni v4.4s, #128, lsl #24\nbif v0.16b, v2.16b, v4.16b\nbif v1.16b, v3.16b, v4.16b\nret",
  "giasm": "mvni v4.4s, #128, lsl #24\nbif v0.16b, v2.16b, v4.16b\nbif v1.16b, v3.16b, v4.16b\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, <8 x float> %b) {\n  %r = call <8 x float> @llvm.copysign(<8 x float> %a, <8 x float> %b)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x float> @llvm.copysign.v8f32(<8 x float> %a, <8 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "copysign",
  "ty": "<8 x float>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 5,
  "gisize": 3,
  "extrasize": 0,
  "asm": "adrp x8, .LCPI0_0\nmvni v2.4s, #128, lsl #24\nldr q3, [x8, :lo12:.LCPI0_0]\nbif v0.16b, v3.16b, v2.16b\nbif v1.16b, v3.16b, v2.16b\nret",
  "giasm": "mvni v2.4s, #128, lsl #24\nand v0.16b, v0.16b, v2.16b\nand v1.16b, v1.16b, v2.16b\nret",
  "ll": "define <8 x float> @test(<8 x float> %a) {\n  %r = call <8 x float> @llvm.copysign(<8 x float> %a, <8 x float> <float 7.0, float 6.0, float 7.0, float 6.0, float 7.0, float 6.0, float 7.0, float 6.0>)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x float> @llvm.copysign.v8f32(<8 x float> %a, <8 x float> <float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "copysign",
  "ty": "<8 x float>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 6,
  "lat": 6,
  "sizelat": 6,
  "size": 4,
  "gisize": 5,
  "extrasize": 0,
  "asm": "mvni v3.4s, #128, lsl #24\ndup v2.4s, v2.s[0]\nbif v0.16b, v2.16b, v3.16b\nbif v1.16b, v2.16b, v3.16b\nret",
  "giasm": "dup v3.4s, v2.s[0]\nmvni v4.4s, #128, lsl #24\ndup v2.4s, v2.s[0]\nbif v0.16b, v3.16b, v4.16b\nbif v1.16b, v2.16b, v4.16b\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, float %bs) {\n  %i = insertelement <8 x float> poison, float %bs, i64 0\n  %b = shufflevector <8 x float> %i, <8 x float> poison, <8 x i32> zeroinitializer\n  %r = call <8 x float> @llvm.copysign(<8 x float> %a, <8 x float> %b)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <8 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <8 x float> %i, <8 x float> poison, <8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x float> @llvm.copysign.v8f32(<8 x float> %a, <8 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "copysign",
  "ty": "<8 x float>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fabs v0.4s, v0.4s\nfabs v1.4s, v1.4s\nret",
  "giasm": "mvni v2.4s, #128, lsl #24\nand v0.16b, v0.16b, v2.16b\nand v1.16b, v1.16b, v2.16b\nret",
  "ll": "define <8 x float> @test(<8 x float> %a) {\n  %r = call <8 x float> @llvm.copysign(<8 x float> %a, <8 x float> <float 7.0, float 7.0, float 7.0, float 7.0, float 7.0, float 7.0, float 7.0, float 7.0>)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x float> @llvm.copysign.v8f32(<8 x float> %a, <8 x float> splat (float 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "copysign",
  "ty": "<2 x double>",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "movi v2.2d, #0xffffffffffffffff\nfneg v2.2d, v2.2d\nbif v0.16b, v1.16b, v2.16b\nret",
  "giasm": "movi v2.2d, #0xffffffffffffffff\nfneg v2.2d, v2.2d\nbif v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, <2 x double> %b) {\n  %r = call <2 x double> @llvm.copysign(<2 x double> %a, <2 x double> %b)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <2 x double> @llvm.copysign.v2f64(<2 x double> %a, <2 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "copysign",
  "ty": "<2 x double>",
  "variant": "binopconst",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 5,
  "gisize": 3,
  "extrasize": 0,
  "asm": "movi v1.2d, #0xffffffffffffffff\nadrp x8, .LCPI0_0\nldr q2, [x8, :lo12:.LCPI0_0]\nfneg v1.2d, v1.2d\nbif v0.16b, v2.16b, v1.16b\nret",
  "giasm": "movi v1.2d, #0xffffffffffffffff\nfneg v1.2d, v1.2d\nand v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <2 x double> @test(<2 x double> %a) {\n  %r = call <2 x double> @llvm.copysign(<2 x double> %a, <2 x double> <double 7.0, double 6.0>)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <2 x double> @llvm.copysign.v2f64(<2 x double> %a, <2 x double> <double 7.000000e+00, double 6.000000e+00>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "copysign",
  "ty": "<2 x double>",
  "variant": "binopsplat",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "movi v2.2d, #0xffffffffffffffff\ndup v1.2d, v1.d[0]\nfneg v2.2d, v2.2d\nbif v0.16b, v1.16b, v2.16b\nret",
  "giasm": "movi v2.2d, #0xffffffffffffffff\ndup v1.2d, v1.d[0]\nfneg v2.2d, v2.2d\nbif v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, double %bs) {\n  %i = insertelement <2 x double> poison, double %bs, i64 0\n  %b = shufflevector <2 x double> %i, <2 x double> poison, <2 x i32> zeroinitializer\n  %r = call <2 x double> @llvm.copysign(<2 x double> %a, <2 x double> %b)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <2 x double> poison, double %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <2 x double> %i, <2 x double> poison, <2 x i32> zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <2 x double> @llvm.copysign.v2f64(<2 x double> %a, <2 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "copysign",
  "ty": "<2 x double>",
  "variant": "binopconstsplat",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fabs v0.2d, v0.2d\nret",
  "giasm": "movi v1.2d, #0xffffffffffffffff\nfneg v1.2d, v1.2d\nand v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <2 x double> @test(<2 x double> %a) {\n  %r = call <2 x double> @llvm.copysign(<2 x double> %a, <2 x double> <double 7.0, double 7.0>)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <2 x double> @llvm.copysign.v2f64(<2 x double> %a, <2 x double> splat (double 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "copysign",
  "ty": "<4 x double>",
  "variant": "binop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "movi v4.2d, #0xffffffffffffffff\nfneg v4.2d, v4.2d\nbif v0.16b, v2.16b, v4.16b\nbif v1.16b, v3.16b, v4.16b\nret",
  "giasm": "movi v4.2d, #0xffffffffffffffff\nfneg v4.2d, v4.2d\nbif v0.16b, v2.16b, v4.16b\nbif v1.16b, v3.16b, v4.16b\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, <4 x double> %b) {\n  %r = call <4 x double> @llvm.copysign(<4 x double> %a, <4 x double> %b)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x double> @llvm.copysign.v4f64(<4 x double> %a, <4 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "copysign",
  "ty": "<4 x double>",
  "variant": "binopconst",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 6,
  "gisize": 4,
  "extrasize": 0,
  "asm": "movi v2.2d, #0xffffffffffffffff\nadrp x8, .LCPI0_0\nldr q3, [x8, :lo12:.LCPI0_0]\nfneg v2.2d, v2.2d\nbif v0.16b, v3.16b, v2.16b\nbif v1.16b, v3.16b, v2.16b\nret",
  "giasm": "movi v2.2d, #0xffffffffffffffff\nfneg v2.2d, v2.2d\nand v0.16b, v0.16b, v2.16b\nand v1.16b, v1.16b, v2.16b\nret",
  "ll": "define <4 x double> @test(<4 x double> %a) {\n  %r = call <4 x double> @llvm.copysign(<4 x double> %a, <4 x double> <double 7.0, double 6.0, double 7.0, double 6.0>)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x double> @llvm.copysign.v4f64(<4 x double> %a, <4 x double> <double 7.000000e+00, double 6.000000e+00, double 7.000000e+00, double 6.000000e+00>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "copysign",
  "ty": "<4 x double>",
  "variant": "binopsplat",
  "codesize": 6,
  "thru": 6,
  "lat": 6,
  "sizelat": 6,
  "size": 5,
  "gisize": 6,
  "extrasize": 0,
  "asm": "movi v3.2d, #0xffffffffffffffff\ndup v2.2d, v2.d[0]\nfneg v3.2d, v3.2d\nbif v0.16b, v2.16b, v3.16b\nbif v1.16b, v2.16b, v3.16b\nret",
  "giasm": "movi v3.2d, #0xffffffffffffffff\ndup v4.2d, v2.d[0]\ndup v2.2d, v2.d[0]\nfneg v3.2d, v3.2d\nbif v0.16b, v4.16b, v3.16b\nbif v1.16b, v2.16b, v3.16b\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, double %bs) {\n  %i = insertelement <4 x double> poison, double %bs, i64 0\n  %b = shufflevector <4 x double> %i, <4 x double> poison, <4 x i32> zeroinitializer\n  %r = call <4 x double> @llvm.copysign(<4 x double> %a, <4 x double> %b)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <4 x double> poison, double %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <4 x double> %i, <4 x double> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x double> @llvm.copysign.v4f64(<4 x double> %a, <4 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "copysign",
  "ty": "<4 x double>",
  "variant": "binopconstsplat",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fabs v0.2d, v0.2d\nfabs v1.2d, v1.2d\nret",
  "giasm": "movi v2.2d, #0xffffffffffffffff\nfneg v2.2d, v2.2d\nand v0.16b, v0.16b, v2.16b\nand v1.16b, v1.16b, v2.16b\nret",
  "ll": "define <4 x double> @test(<4 x double> %a) {\n  %r = call <4 x double> @llvm.copysign(<4 x double> %a, <4 x double> <double 7.0, double 7.0, double 7.0, double 7.0>)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x double> @llvm.copysign.v4f64(<4 x double> %a, <4 x double> splat (double 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "pow",
  "ty": "half",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 6,
  "gisize": 6,
  "extrasize": 0,
  "asm": "str x30, [sp, #-16]!                // 8-byte Folded Spill\nfcvt s0, h0\nfcvt s1, h1\nbl powf\nfcvt h0, s0\nldr x30, [sp], #16                  // 8-byte Folded Reload\nret",
  "giasm": "str x30, [sp, #-16]!                // 8-byte Folded Spill\nfcvt s0, h0\nfcvt s1, h1\nbl powf\nfcvt h0, s0\nldr x30, [sp], #16                  // 8-byte Folded Reload\nret",
  "ll": "define half @test(half %a, half %b) {\n  %r = call half @llvm.pow(half %a, half %b)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call half @llvm.pow.f16(half %a, half %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "pow",
  "ty": "half",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 6,
  "gisize": 8,
  "extrasize": 0,
  "asm": "str x30, [sp, #-16]!                // 8-byte Folded Spill\nfcvt s0, h0\nfmov s1, #7.00000000\nbl powf\nfcvt h0, s0\nldr x30, [sp], #16                  // 8-byte Folded Reload\nret",
  "giasm": "str x30, [sp, #-16]!                // 8-byte Folded Spill\nmov w8, #18176                      // =0x4700\nfcvt s0, h0\nfmov s1, w8\nfcvt s1, h1\nbl powf\nfcvt h0, s0\nldr x30, [sp], #16                  // 8-byte Folded Reload\nret",
  "ll": "define half @test(half %a) {\n  %r = call half @llvm.pow(half %a, half 7.0)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call half @llvm.pow.f16(half %a, half 0xH4700)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "pow",
  "ty": "float",
  "variant": "binop",
  "codesize": 1,
  "thru": 10,
  "lat": 10,
  "sizelat": 10,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "b powf",
  "giasm": "b powf",
  "ll": "define float @test(float %a, float %b) {\n  %r = call float @llvm.pow(float %a, float %b)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call float @llvm.pow.f32(float %a, float %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "pow",
  "ty": "float",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 10,
  "lat": 10,
  "sizelat": 10,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov s1, #7.00000000\nb powf",
  "giasm": "fmov s1, #7.00000000\nb powf",
  "ll": "define float @test(float %a) {\n  %r = call float @llvm.pow(float %a, float 7.0)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call float @llvm.pow.f32(float %a, float 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "pow",
  "ty": "double",
  "variant": "binop",
  "codesize": 1,
  "thru": 10,
  "lat": 10,
  "sizelat": 10,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "b pow",
  "giasm": "b pow",
  "ll": "define double @test(double %a, double %b) {\n  %r = call double @llvm.pow(double %a, double %b)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call double @llvm.pow.f64(double %a, double %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "pow",
  "ty": "double",
  "variant": "binopconst",
  "codesize": 1,
  "thru": 10,
  "lat": 10,
  "sizelat": 10,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmov d1, #7.00000000\nb pow",
  "giasm": "fmov d1, #7.00000000\nb pow",
  "ll": "define double @test(double %a) {\n  %r = call double @llvm.pow(double %a, double 7.0)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call double @llvm.pow.f64(double %a, double 7.000000e+00)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "pow",
  "ty": "<4 x half>",
  "variant": "binop",
  "codesize": 22,
  "thru": 22,
  "lat": 22,
  "sizelat": 22,
  "size": 42,
  "gisize": 44,
  "extrasize": 0,
  "asm": "sub sp, sp, #64\nstr x30, [sp, #48]                  // 8-byte Folded Spill\nmov h3, v0.h[1]\nmov h2, v1.h[1]\nstp q0, q1, [sp, #16]               // 32-byte Folded Spill\nfcvt s0, h3\nfcvt s1, h2\nbl powf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp]                        // 16-byte Folded Spill\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl powf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nfcvt h3, s0\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nmov h1, v1.h[2]\nmov h2, v0.h[2]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov v3.h[1], v0.h[0]\nfcvt s0, h1\nfcvt s1, h2\nstr q3, [sp]                        // 16-byte Folded Spill\nbl powf\nldp q1, q2, [sp, #16]               // 32-byte Folded Reload\nfcvt h0, s0\nldr q3, [sp]                        // 16-byte Folded Reload\nmov h1, v1.h[3]\nmov h2, v2.h[3]\nmov v3.h[2], v0.h[0]\nfcvt s0, h1\nfcvt s1, h2\nstr q3, [sp]                        // 16-byte Folded Spill\nbl powf\nfcvt h1, s0\nldr q0, [sp]                        // 16-byte Folded Reload\nldr x30, [sp, #48]                  // 8-byte Folded Reload\nmov v0.h[3], v1.h[0]\nadd sp, sp, #64\nret",
  "giasm": "sub sp, sp, #112\nstp d13, d12, [sp, #48]             // 16-byte Folded Spill\nstp d11, d10, [sp, #64]             // 16-byte Folded Spill\nstp d9, d8, [sp, #80]               // 16-byte Folded Spill\nstr x30, [sp, #96]                  // 8-byte Folded Spill\nmov h8, v0.h[1]\nmov h9, v0.h[2]\nmov h10, v0.h[3]\nmov h11, v1.h[1]\nmov h12, v1.h[2]\nmov h13, v1.h[3]\nfcvt s0, h0\nfcvt s1, h1\nbl powf\nfcvt s2, h8\nfcvt h0, s0\nfcvt s1, h11\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nfcvt s2, h9\nfcvt h0, s0\nfcvt s1, h12\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nfcvt s2, h10\nfcvt h0, s0\nfcvt s1, h13\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nldp q3, q2, [sp]                    // 32-byte Folded Reload\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nldp d9, d8, [sp, #80]               // 16-byte Folded Reload\nldp d11, d10, [sp, #64]             // 16-byte Folded Reload\nldr x30, [sp, #96]                  // 8-byte Folded Reload\nmov v1.h[1], v3.h[0]\nldp d13, d12, [sp, #48]             // 16-byte Folded Reload\nmov v1.h[2], v2.h[0]\nmov v1.h[3], v0.h[0]\nmov v0.16b, v1.16b\nadd sp, sp, #112\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, <4 x half> %b) {\n  %r = call <4 x half> @llvm.pow(<4 x half> %a, <4 x half> %b)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 22 for instruction:   %r = call <4 x half> @llvm.pow.v4f16(<4 x half> %a, <4 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "pow",
  "ty": "<4 x half>",
  "variant": "binopconst",
  "codesize": 16,
  "thru": 16,
  "lat": 16,
  "sizelat": 16,
  "size": 37,
  "gisize": 44,
  "extrasize": 0,
  "asm": "sub sp, sp, #48\nstr x30, [sp, #32]                  // 8-byte Folded Spill\nmov h1, v0.h[1]\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfcvt s0, h1\nfmov s1, #6.00000000\nbl powf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nfmov s1, #7.00000000\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nfcvt h2, s0\nmov h1, v1.h[2]\nfcvt s0, h1\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v2.h[1], v1.h[0]\nfmov s1, #7.00000000\nstr q2, [sp]                        // 16-byte Folded Spill\nbl powf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nfcvt h2, s0\nmov h1, v1.h[3]\nfcvt s0, h1\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v1.h[2], v2.h[0]\nstr q1, [sp]                        // 16-byte Folded Spill\nfmov s1, #6.00000000\nbl powf\nfcvt h1, s0\nldr q0, [sp]                        // 16-byte Folded Reload\nldr x30, [sp, #32]                  // 8-byte Folded Reload\nmov v0.h[3], v1.h[0]\nadd sp, sp, #48\nret",
  "giasm": "sub sp, sp, #112\nstr d12, [sp, #48]                  // 8-byte Folded Spill\nstp d11, d10, [sp, #64]             // 16-byte Folded Spill\nstp d9, d8, [sp, #80]               // 16-byte Folded Spill\nstp x30, x19, [sp, #96]             // 16-byte Folded Spill\nmov w8, #18176                      // =0x4700\nmov h8, v0.h[1]\nmov h9, v0.h[2]\nfmov s10, w8\nmov h11, v0.h[3]\nmov w19, #17920                     // =0x4600\nfcvt s0, h0\nfcvt s1, h10\nbl powf\nfcvt h0, s0\nfmov s12, w19\nfcvt s1, h12\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfcvt s0, h8\nbl powf\nfcvt s2, h9\nfcvt h0, s0\nfcvt s1, h10\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nfcvt s2, h11\nfcvt h0, s0\nfcvt s1, h12\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nldp q3, q2, [sp]                    // 32-byte Folded Reload\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nldp x30, x19, [sp, #96]             // 16-byte Folded Reload\nldp d9, d8, [sp, #80]               // 16-byte Folded Reload\nldr d12, [sp, #48]                  // 8-byte Folded Reload\nmov v1.h[1], v3.h[0]\nldp d11, d10, [sp, #64]             // 16-byte Folded Reload\nmov v1.h[2], v2.h[0]\nmov v1.h[3], v0.h[0]\nmov v0.16b, v1.16b\nadd sp, sp, #112\nret",
  "ll": "define <4 x half> @test(<4 x half> %a) {\n  %r = call <4 x half> @llvm.pow(<4 x half> %a, <4 x half> <half 7.0, half 6.0, half 7.0, half 6.0>)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 16 for instruction:   %r = call <4 x half> @llvm.pow.v4f16(<4 x half> %a, <4 x half> <half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "pow",
  "ty": "<4 x half>",
  "variant": "binopsplat",
  "codesize": 23,
  "thru": 23,
  "lat": 23,
  "sizelat": 23,
  "size": 40,
  "gisize": 45,
  "extrasize": 0,
  "asm": "sub sp, sp, #48\nstr d8, [sp, #32]                   // 8-byte Folded Spill\nstr x30, [sp, #40]                  // 8-byte Folded Spill\nmov h2, v0.h[1]\nfcvt s8, h1\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfcvt s0, h2\nfmov s1, s8\nbl powf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nfcvt h0, s0\nfcvt s1, h1\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s0, s1\nfmov s1, s8\nbl powf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nfcvt h2, s0\nmov h1, v1.h[2]\nfcvt s0, h1\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v2.h[1], v1.h[0]\nfmov s1, s8\nstr q2, [sp]                        // 16-byte Folded Spill\nbl powf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nfcvt h2, s0\nmov h1, v1.h[3]\nfcvt s0, h1\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v1.h[2], v2.h[0]\nstr q1, [sp]                        // 16-byte Folded Spill\nfmov s1, s8\nbl powf\nfcvt h1, s0\nldr q0, [sp]                        // 16-byte Folded Reload\nldr x30, [sp, #40]                  // 8-byte Folded Reload\nldr d8, [sp, #32]                   // 8-byte Folded Reload\nmov v0.h[3], v1.h[0]\nadd sp, sp, #48\nret",
  "giasm": "sub sp, sp, #112\nstp d13, d12, [sp, #48]             // 16-byte Folded Spill\nstp d11, d10, [sp, #64]             // 16-byte Folded Spill\nstp d9, d8, [sp, #80]               // 16-byte Folded Spill\nstr x30, [sp, #96]                  // 8-byte Folded Spill\nmov h8, v0.h[1]\nmov h9, v0.h[2]\nmov h10, v0.h[3]\ndup v1.4h, v1.h[0]\nfcvt s0, h0\nmov h11, v1.h[1]\nmov h12, v1.h[2]\nmov h13, v1.h[3]\nfcvt s1, h1\nbl powf\nfcvt s2, h8\nfcvt h0, s0\nfcvt s1, h11\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nfcvt s2, h9\nfcvt h0, s0\nfcvt s1, h12\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nfcvt s2, h10\nfcvt h0, s0\nfcvt s1, h13\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nldp q3, q2, [sp]                    // 32-byte Folded Reload\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nldp d9, d8, [sp, #80]               // 16-byte Folded Reload\nldp d11, d10, [sp, #64]             // 16-byte Folded Reload\nldr x30, [sp, #96]                  // 8-byte Folded Reload\nmov v1.h[1], v3.h[0]\nldp d13, d12, [sp, #48]             // 16-byte Folded Reload\nmov v1.h[2], v2.h[0]\nmov v1.h[3], v0.h[0]\nmov v0.16b, v1.16b\nadd sp, sp, #112\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, half %bs) {\n  %i = insertelement <4 x half> poison, half %bs, i64 0\n  %b = shufflevector <4 x half> %i, <4 x half> poison, <4 x i32> zeroinitializer\n  %r = call <4 x half> @llvm.pow(<4 x half> %a, <4 x half> %b)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <4 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <4 x half> %i, <4 x half> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 22 for instruction:   %r = call <4 x half> @llvm.pow.v4f16(<4 x half> %a, <4 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "pow",
  "ty": "<4 x half>",
  "variant": "binopconstsplat",
  "codesize": 16,
  "thru": 16,
  "lat": 16,
  "sizelat": 16,
  "size": 37,
  "gisize": 41,
  "extrasize": 0,
  "asm": "sub sp, sp, #48\nstr x30, [sp, #32]                  // 8-byte Folded Spill\nmov h1, v0.h[1]\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfcvt s0, h1\nfmov s1, #7.00000000\nbl powf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nfmov s1, #7.00000000\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nfcvt h2, s0\nmov h1, v1.h[2]\nfcvt s0, h1\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v2.h[1], v1.h[0]\nfmov s1, #7.00000000\nstr q2, [sp]                        // 16-byte Folded Spill\nbl powf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nfcvt h2, s0\nmov h1, v1.h[3]\nfcvt s0, h1\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v1.h[2], v2.h[0]\nstr q1, [sp]                        // 16-byte Folded Spill\nfmov s1, #7.00000000\nbl powf\nfcvt h1, s0\nldr q0, [sp]                        // 16-byte Folded Reload\nldr x30, [sp, #32]                  // 8-byte Folded Reload\nmov v0.h[3], v1.h[0]\nadd sp, sp, #48\nret",
  "giasm": "sub sp, sp, #96\nstp d11, d10, [sp, #48]             // 16-byte Folded Spill\nstp d9, d8, [sp, #64]               // 16-byte Folded Spill\nstr x30, [sp, #80]                  // 8-byte Folded Spill\nmov w8, #18176                      // =0x4700\nmov h8, v0.h[1]\nmov h9, v0.h[2]\nfmov s10, w8\nmov h11, v0.h[3]\nfcvt s0, h0\nfcvt s1, h10\nbl powf\nfcvt s2, h8\nfcvt h0, s0\nfcvt s1, h10\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nfcvt s2, h9\nfcvt h0, s0\nfcvt s1, h10\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nfcvt s2, h11\nfcvt h0, s0\nfcvt s1, h10\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nldp q3, q2, [sp]                    // 32-byte Folded Reload\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nldp d9, d8, [sp, #64]               // 16-byte Folded Reload\nldp d11, d10, [sp, #48]             // 16-byte Folded Reload\nldr x30, [sp, #80]                  // 8-byte Folded Reload\nmov v1.h[1], v3.h[0]\nmov v1.h[2], v2.h[0]\nmov v1.h[3], v0.h[0]\nmov v0.16b, v1.16b\nadd sp, sp, #96\nret",
  "ll": "define <4 x half> @test(<4 x half> %a) {\n  %r = call <4 x half> @llvm.pow(<4 x half> %a, <4 x half> <half 7.0, half 7.0, half 7.0, half 7.0>)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 16 for instruction:   %r = call <4 x half> @llvm.pow.v4f16(<4 x half> %a, <4 x half> splat (half 0xH4700))\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "pow",
  "ty": "<8 x half>",
  "variant": "binop",
  "codesize": 50,
  "thru": 50,
  "lat": 50,
  "sizelat": 50,
  "size": 79,
  "gisize": 97,
  "extrasize": 0,
  "asm": "sub sp, sp, #64\nstr x30, [sp, #48]                  // 8-byte Folded Spill\nmov h3, v0.h[1]\nmov h2, v1.h[1]\nstp q0, q1, [sp]                    // 32-byte Folded Spill\nfcvt s0, h3\nfcvt s1, h2\nbl powf\nfcvt h0, s0\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldp q0, q1, [sp]                    // 32-byte Folded Reload\nfcvt s0, h0\nfcvt s1, h1\nbl powf\nfcvt h0, s0\nldp q1, q2, [sp, #16]               // 32-byte Folded Reload\nmov h1, v1.h[2]\nmov v0.h[1], v2.h[0]\nfcvt s1, h1\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[2]\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[2], v0.h[0]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nldp q0, q1, [sp]                    // 32-byte Folded Reload\nmov h0, v0.h[3]\nmov h1, v1.h[3]\nfcvt s0, h0\nfcvt s1, h1\nbl powf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[3], v0.h[0]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nldp q0, q1, [sp]                    // 32-byte Folded Reload\nmov h0, v0.h[4]\nmov h1, v1.h[4]\nfcvt s0, h0\nfcvt s1, h1\nbl powf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[4], v0.h[0]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nldp q0, q1, [sp]                    // 32-byte Folded Reload\nmov h0, v0.h[5]\nmov h1, v1.h[5]\nfcvt s0, h0\nfcvt s1, h1\nbl powf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[5], v0.h[0]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nldp q0, q1, [sp]                    // 32-byte Folded Reload\nmov h0, v0.h[6]\nmov h1, v1.h[6]\nfcvt s0, h0\nfcvt s1, h1\nbl powf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[6], v0.h[0]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nldp q0, q1, [sp]                    // 32-byte Folded Reload\nmov h0, v0.h[7]\nmov h1, v1.h[7]\nfcvt s0, h0\nfcvt s1, h1\nbl powf\nfcvt h1, s0\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nldr x30, [sp, #48]                  // 8-byte Folded Reload\nmov v0.h[7], v1.h[0]\nadd sp, sp, #64\nret",
  "giasm": "sub sp, sp, #192\nstp d15, d14, [sp, #112]            // 16-byte Folded Spill\nstp d13, d12, [sp, #128]            // 16-byte Folded Spill\nstp d11, d10, [sp, #144]            // 16-byte Folded Spill\nstp d9, d8, [sp, #160]              // 16-byte Folded Spill\nstr x30, [sp, #176]                 // 8-byte Folded Spill\nmov h2, v0.h[5]\nmov h11, v0.h[1]\nmov h12, v0.h[2]\nmov h13, v0.h[3]\nmov h14, v0.h[4]\nmov h8, v1.h[1]\nmov h9, v1.h[2]\nmov h10, v1.h[3]\nmov h15, v1.h[4]\nstr h2, [sp, #48]                   // 2-byte Folded Spill\nmov h2, v0.h[6]\nstr h2, [sp, #64]                   // 2-byte Folded Spill\nmov h2, v0.h[7]\nfcvt s0, h0\nstr h2, [sp, #96]                   // 2-byte Folded Spill\nmov h2, v1.h[5]\nstr h2, [sp, #186]                  // 2-byte Folded Spill\nmov h2, v1.h[6]\nstr h2, [sp, #188]                  // 2-byte Folded Spill\nmov h2, v1.h[7]\nfcvt s1, h1\nstr h2, [sp, #190]                  // 2-byte Folded Spill\nbl powf\nfcvt s2, h11\nfcvt h0, s0\nfcvt s1, h8\nstr q0, [sp, #80]                   // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nfcvt s2, h12\nfcvt h0, s0\nfcvt s1, h9\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nfcvt s2, h13\nfcvt h0, s0\nfcvt s1, h10\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nfcvt s2, h14\nfcvt h0, s0\nfcvt s1, h15\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nldr h1, [sp, #48]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nldr h0, [sp, #186]                  // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl powf\nldr h1, [sp, #64]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #64]                   // 16-byte Folded Spill\nldr h0, [sp, #188]                  // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl powf\nldr h1, [sp, #96]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #96]                   // 16-byte Folded Spill\nldr h0, [sp, #190]                  // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl powf\nldp q2, q3, [sp, #16]               // 32-byte Folded Reload\nfcvt h0, s0\nldr q1, [sp, #80]                   // 16-byte Folded Reload\nldp d9, d8, [sp, #160]              // 16-byte Folded Reload\nldp d11, d10, [sp, #144]            // 16-byte Folded Reload\nldr x30, [sp, #176]                 // 8-byte Folded Reload\nmov v1.h[1], v3.h[0]\nldp d13, d12, [sp, #128]            // 16-byte Folded Reload\nldp d15, d14, [sp, #112]            // 16-byte Folded Reload\nmov v1.h[2], v2.h[0]\nldr q2, [sp]                        // 16-byte Folded Reload\nmov v1.h[3], v2.h[0]\nldp q3, q2, [sp, #48]               // 32-byte Folded Reload\nmov v1.h[4], v3.h[0]\nmov v1.h[5], v2.h[0]\nldr q2, [sp, #96]                   // 16-byte Folded Reload\nmov v1.h[6], v2.h[0]\nmov v1.h[7], v0.h[0]\nmov v0.16b, v1.16b\nadd sp, sp, #192\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, <8 x half> %b) {\n  %r = call <8 x half> @llvm.pow(<8 x half> %a, <8 x half> %b)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 50 for instruction:   %r = call <8 x half> @llvm.pow.v8f16(<8 x half> %a, <8 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "pow",
  "ty": "<8 x half>",
  "variant": "binopconst",
  "codesize": 36,
  "thru": 36,
  "lat": 36,
  "sizelat": 36,
  "size": 72,
  "gisize": 82,
  "extrasize": 0,
  "asm": "sub sp, sp, #48\nstr x30, [sp, #32]                  // 8-byte Folded Spill\nmov h1, v0.h[1]\nstr q0, [sp]                        // 16-byte Folded Spill\nfcvt s0, h1\nfmov s1, #6.00000000\nbl powf\nfcvt h0, s0\nfmov s1, #7.00000000\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v0.h[1], v1.h[0]\nfmov s1, #7.00000000\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[2]\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[2], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[3]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #6.00000000\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[3], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[4]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[4], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[5]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #6.00000000\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[5], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[6]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[6], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[7]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #6.00000000\nfcvt s0, h0\nbl powf\nfcvt h1, s0\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nldr x30, [sp, #32]                  // 8-byte Folded Reload\nmov v0.h[7], v1.h[0]\nadd sp, sp, #48\nret",
  "giasm": "sub sp, sp, #192\nstp d15, d14, [sp, #112]            // 16-byte Folded Spill\nstp d13, d12, [sp, #128]            // 16-byte Folded Spill\nstp d11, d10, [sp, #144]            // 16-byte Folded Spill\nstp d9, d8, [sp, #160]              // 16-byte Folded Spill\nstp x30, x19, [sp, #176]            // 16-byte Folded Spill\nmov w8, #18176                      // =0x4700\nmov h1, v0.h[7]\nmov h11, v0.h[1]\nfmov s10, w8\nmov h12, v0.h[2]\nmov w19, #17920                     // =0x4600\nmov h13, v0.h[3]\nmov h14, v0.h[4]\nmov h15, v0.h[5]\nmov h9, v0.h[6]\nfcvt s0, h0\nstr h1, [sp, #96]                   // 2-byte Folded Spill\nfcvt s1, h10\nbl powf\nfcvt h0, s0\nfmov s8, w19\nfcvt s1, h8\nstr q0, [sp, #80]                   // 16-byte Folded Spill\nfcvt s0, h11\nbl powf\nfcvt s2, h12\nfcvt h0, s0\nfcvt s1, h10\nstr q0, [sp, #64]                   // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nfcvt s2, h13\nfcvt h0, s0\nfcvt s1, h8\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nfcvt s2, h14\nfcvt h0, s0\nfcvt s1, h10\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nfcvt s2, h15\nfcvt h0, s0\nfcvt s1, h8\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nfcvt s2, h9\nfcvt h0, s0\nfcvt s1, h10\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nldr h1, [sp, #96]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nfcvt s1, h8\nstr q0, [sp, #96]                   // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nldp q2, q1, [sp, #64]               // 32-byte Folded Reload\nfcvt h0, s0\nldp x30, x19, [sp, #176]            // 16-byte Folded Reload\nldp d9, d8, [sp, #160]              // 16-byte Folded Reload\nmov v1.h[1], v2.h[0]\nldp q2, q3, [sp, #32]               // 32-byte Folded Reload\nldp d11, d10, [sp, #144]            // 16-byte Folded Reload\nldp d13, d12, [sp, #128]            // 16-byte Folded Reload\nldp d15, d14, [sp, #112]            // 16-byte Folded Reload\nmov v1.h[2], v3.h[0]\nmov v1.h[3], v2.h[0]\nldp q2, q3, [sp]                    // 32-byte Folded Reload\nmov v1.h[4], v3.h[0]\nmov v1.h[5], v2.h[0]\nldr q2, [sp, #96]                   // 16-byte Folded Reload\nmov v1.h[6], v2.h[0]\nmov v1.h[7], v0.h[0]\nmov v0.16b, v1.16b\nadd sp, sp, #192\nret",
  "ll": "define <8 x half> @test(<8 x half> %a) {\n  %r = call <8 x half> @llvm.pow(<8 x half> %a, <8 x half> <half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0>)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 36 for instruction:   %r = call <8 x half> @llvm.pow.v8f16(<8 x half> %a, <8 x half> <half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "pow",
  "ty": "<8 x half>",
  "variant": "binopsplat",
  "codesize": 51,
  "thru": 51,
  "lat": 51,
  "sizelat": 51,
  "size": 75,
  "gisize": 98,
  "extrasize": 0,
  "asm": "sub sp, sp, #48\nstr d8, [sp, #32]                   // 8-byte Folded Spill\nstr x30, [sp, #40]                  // 8-byte Folded Spill\nmov h2, v0.h[1]\nfcvt s8, h1\nstr q0, [sp]                        // 16-byte Folded Spill\nfcvt s0, h2\nfmov s1, s8\nbl powf\nfcvt h0, s0\nfmov s1, s8\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v0.h[1], v1.h[0]\nfmov s1, s8\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[2]\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[2], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[3]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, s8\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[3], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[4]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, s8\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[4], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[5]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, s8\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[5], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[6]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, s8\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[6], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[7]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, s8\nfcvt s0, h0\nbl powf\nfcvt h1, s0\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nldr x30, [sp, #40]                  // 8-byte Folded Reload\nldr d8, [sp, #32]                   // 8-byte Folded Reload\nmov v0.h[7], v1.h[0]\nadd sp, sp, #48\nret",
  "giasm": "sub sp, sp, #192\nstp d15, d14, [sp, #112]            // 16-byte Folded Spill\nstp d13, d12, [sp, #128]            // 16-byte Folded Spill\nstp d11, d10, [sp, #144]            // 16-byte Folded Spill\nstp d9, d8, [sp, #160]              // 16-byte Folded Spill\nstr x30, [sp, #176]                 // 8-byte Folded Spill\nmov h2, v0.h[5]\nmov h11, v0.h[1]\nmov h12, v0.h[2]\ndup v1.8h, v1.h[0]\nmov h13, v0.h[3]\nmov h14, v0.h[4]\nstr h2, [sp, #48]                   // 2-byte Folded Spill\nmov h2, v0.h[6]\nmov h8, v1.h[1]\nmov h9, v1.h[2]\nmov h10, v1.h[3]\nmov h15, v1.h[4]\nstr h2, [sp, #64]                   // 2-byte Folded Spill\nmov h2, v0.h[7]\nfcvt s0, h0\nstr h2, [sp, #96]                   // 2-byte Folded Spill\nmov h2, v1.h[5]\nstr h2, [sp, #186]                  // 2-byte Folded Spill\nmov h2, v1.h[6]\nstr h2, [sp, #188]                  // 2-byte Folded Spill\nmov h2, v1.h[7]\nfcvt s1, h1\nstr h2, [sp, #190]                  // 2-byte Folded Spill\nbl powf\nfcvt s2, h11\nfcvt h0, s0\nfcvt s1, h8\nstr q0, [sp, #80]                   // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nfcvt s2, h12\nfcvt h0, s0\nfcvt s1, h9\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nfcvt s2, h13\nfcvt h0, s0\nfcvt s1, h10\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nfcvt s2, h14\nfcvt h0, s0\nfcvt s1, h15\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nldr h1, [sp, #48]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nldr h0, [sp, #186]                  // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl powf\nldr h1, [sp, #64]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #64]                   // 16-byte Folded Spill\nldr h0, [sp, #188]                  // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl powf\nldr h1, [sp, #96]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #96]                   // 16-byte Folded Spill\nldr h0, [sp, #190]                  // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl powf\nldp q2, q3, [sp, #16]               // 32-byte Folded Reload\nfcvt h0, s0\nldr q1, [sp, #80]                   // 16-byte Folded Reload\nldp d9, d8, [sp, #160]              // 16-byte Folded Reload\nldp d11, d10, [sp, #144]            // 16-byte Folded Reload\nldr x30, [sp, #176]                 // 8-byte Folded Reload\nmov v1.h[1], v3.h[0]\nldp d13, d12, [sp, #128]            // 16-byte Folded Reload\nldp d15, d14, [sp, #112]            // 16-byte Folded Reload\nmov v1.h[2], v2.h[0]\nldr q2, [sp]                        // 16-byte Folded Reload\nmov v1.h[3], v2.h[0]\nldp q3, q2, [sp, #48]               // 32-byte Folded Reload\nmov v1.h[4], v3.h[0]\nmov v1.h[5], v2.h[0]\nldr q2, [sp, #96]                   // 16-byte Folded Reload\nmov v1.h[6], v2.h[0]\nmov v1.h[7], v0.h[0]\nmov v0.16b, v1.16b\nadd sp, sp, #192\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, half %bs) {\n  %i = insertelement <8 x half> poison, half %bs, i64 0\n  %b = shufflevector <8 x half> %i, <8 x half> poison, <8 x i32> zeroinitializer\n  %r = call <8 x half> @llvm.pow(<8 x half> %a, <8 x half> %b)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <8 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <8 x half> %i, <8 x half> poison, <8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 50 for instruction:   %r = call <8 x half> @llvm.pow.v8f16(<8 x half> %a, <8 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "pow",
  "ty": "<8 x half>",
  "variant": "binopconstsplat",
  "codesize": 36,
  "thru": 36,
  "lat": 36,
  "sizelat": 36,
  "size": 72,
  "gisize": 79,
  "extrasize": 0,
  "asm": "sub sp, sp, #48\nstr x30, [sp, #32]                  // 8-byte Folded Spill\nmov h1, v0.h[1]\nstr q0, [sp]                        // 16-byte Folded Spill\nfcvt s0, h1\nfmov s1, #7.00000000\nbl powf\nfcvt h0, s0\nfmov s1, #7.00000000\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v0.h[1], v1.h[0]\nfmov s1, #7.00000000\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[2]\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[2], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[3]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[3], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[4]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[4], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[5]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[5], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[6]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[6], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[7]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl powf\nfcvt h1, s0\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nldr x30, [sp, #32]                  // 8-byte Folded Reload\nmov v0.h[7], v1.h[0]\nadd sp, sp, #48\nret",
  "giasm": "sub sp, sp, #192\nstp d15, d14, [sp, #112]            // 16-byte Folded Spill\nstp d13, d12, [sp, #128]            // 16-byte Folded Spill\nstp d11, d10, [sp, #144]            // 16-byte Folded Spill\nstp d9, d8, [sp, #160]              // 16-byte Folded Spill\nstr x30, [sp, #176]                 // 8-byte Folded Spill\nmov w8, #18176                      // =0x4700\nmov h10, v0.h[1]\nmov h11, v0.h[2]\nfmov s8, w8\nmov h12, v0.h[3]\nmov h13, v0.h[4]\nmov h14, v0.h[5]\nmov h15, v0.h[6]\nmov h9, v0.h[7]\nfcvt s0, h0\nfcvt s1, h8\nbl powf\nfcvt s2, h10\nfcvt h0, s0\nfcvt s1, h8\nstr q0, [sp, #96]                   // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nfcvt s2, h11\nfcvt h0, s0\nfcvt s1, h8\nstr q0, [sp, #80]                   // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nfcvt s2, h12\nfcvt h0, s0\nfcvt s1, h8\nstr q0, [sp, #64]                   // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nfcvt s2, h13\nfcvt h0, s0\nfcvt s1, h8\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nfcvt s2, h14\nfcvt h0, s0\nfcvt s1, h8\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nfcvt s2, h15\nfcvt h0, s0\nfcvt s1, h8\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nfcvt s2, h9\nfcvt h0, s0\nfcvt s1, h8\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nldp q2, q1, [sp, #80]               // 32-byte Folded Reload\nfcvt h0, s0\nldp d9, d8, [sp, #160]              // 16-byte Folded Reload\nldr x30, [sp, #176]                 // 8-byte Folded Reload\nldp d11, d10, [sp, #144]            // 16-byte Folded Reload\nmov v1.h[1], v2.h[0]\nldp q2, q3, [sp, #48]               // 32-byte Folded Reload\nldp d13, d12, [sp, #128]            // 16-byte Folded Reload\nldp d15, d14, [sp, #112]            // 16-byte Folded Reload\nmov v1.h[2], v3.h[0]\nmov v1.h[3], v2.h[0]\nldp q2, q3, [sp, #16]               // 32-byte Folded Reload\nmov v1.h[4], v3.h[0]\nmov v1.h[5], v2.h[0]\nldr q2, [sp]                        // 16-byte Folded Reload\nmov v1.h[6], v2.h[0]\nmov v1.h[7], v0.h[0]\nmov v0.16b, v1.16b\nadd sp, sp, #192\nret",
  "ll": "define <8 x half> @test(<8 x half> %a) {\n  %r = call <8 x half> @llvm.pow(<8 x half> %a, <8 x half> <half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0>)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 36 for instruction:   %r = call <8 x half> @llvm.pow.v8f16(<8 x half> %a, <8 x half> splat (half 0xH4700))\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "pow",
  "ty": "<16 x half>",
  "variant": "binop",
  "codesize": 100,
  "thru": 100,
  "lat": 100,
  "sizelat": 100,
  "size": 163,
  "gisize": 208,
  "extrasize": 0,
  "asm": "sub sp, sp, #96\nstr x30, [sp, #80]                  // 8-byte Folded Spill\nstp q0, q1, [sp]                    // 32-byte Folded Spill\nmov h1, v2.h[1]\nstp q3, q2, [sp, #32]               // 32-byte Folded Spill\nmov h3, v0.h[1]\nfcvt s1, h1\nfcvt s0, h3\nbl powf\nfcvt h0, s0\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nfcvt s1, h1\nstr q0, [sp, #64]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldp q1, q2, [sp, #48]               // 32-byte Folded Reload\nmov h1, v1.h[2]\nmov v0.h[1], v2.h[0]\nfcvt s1, h1\nstr q0, [sp, #64]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[2]\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #64]                   // 16-byte Folded Reload\nmov v1.h[2], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[3]\nstr q1, [sp, #64]                   // 16-byte Folded Spill\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nmov h1, v1.h[3]\nfcvt s0, h0\nfcvt s1, h1\nbl powf\nfcvt h0, s0\nldr q1, [sp, #64]                   // 16-byte Folded Reload\nmov v1.h[3], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[4]\nstr q1, [sp, #64]                   // 16-byte Folded Spill\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nmov h1, v1.h[4]\nfcvt s0, h0\nfcvt s1, h1\nbl powf\nfcvt h0, s0\nldr q1, [sp, #64]                   // 16-byte Folded Reload\nmov v1.h[4], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[5]\nstr q1, [sp, #64]                   // 16-byte Folded Spill\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nmov h1, v1.h[5]\nfcvt s0, h0\nfcvt s1, h1\nbl powf\nfcvt h0, s0\nldr q1, [sp, #64]                   // 16-byte Folded Reload\nmov v1.h[5], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[6]\nstr q1, [sp, #64]                   // 16-byte Folded Spill\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nmov h1, v1.h[6]\nfcvt s0, h0\nfcvt s1, h1\nbl powf\nfcvt h0, s0\nldr q1, [sp, #64]                   // 16-byte Folded Reload\nmov v1.h[6], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[7]\nstr q1, [sp, #64]                   // 16-byte Folded Spill\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nmov h1, v1.h[7]\nfcvt s0, h0\nfcvt s1, h1\nbl powf\nfcvt h0, s0\nldr q1, [sp, #64]                   // 16-byte Folded Reload\nmov v1.h[7], v0.h[0]\nstr q1, [sp, #64]                   // 16-byte Folded Spill\nldp q0, q1, [sp, #16]               // 32-byte Folded Reload\nmov h0, v0.h[1]\nmov h1, v1.h[1]\nfcvt s0, h0\nfcvt s1, h1\nbl powf\nfcvt h0, s0\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nldp q0, q1, [sp, #16]               // 32-byte Folded Reload\nfcvt s0, h0\nfcvt s1, h1\nbl powf\nfcvt h0, s0\nldp q1, q2, [sp, #32]               // 32-byte Folded Reload\nmov h1, v1.h[2]\nmov v0.h[1], v2.h[0]\nfcvt s1, h1\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[2]\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nmov v1.h[2], v0.h[0]\nstr q1, [sp, #48]                   // 16-byte Folded Spill\nldp q0, q1, [sp, #16]               // 32-byte Folded Reload\nmov h0, v0.h[3]\nmov h1, v1.h[3]\nfcvt s0, h0\nfcvt s1, h1\nbl powf\nfcvt h0, s0\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nmov v1.h[3], v0.h[0]\nstr q1, [sp, #48]                   // 16-byte Folded Spill\nldp q0, q1, [sp, #16]               // 32-byte Folded Reload\nmov h0, v0.h[4]\nmov h1, v1.h[4]\nfcvt s0, h0\nfcvt s1, h1\nbl powf\nfcvt h0, s0\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nmov v1.h[4], v0.h[0]\nstr q1, [sp, #48]                   // 16-byte Folded Spill\nldp q0, q1, [sp, #16]               // 32-byte Folded Reload\nmov h0, v0.h[5]\nmov h1, v1.h[5]\nfcvt s0, h0\nfcvt s1, h1\nbl powf\nfcvt h0, s0\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nmov v1.h[5], v0.h[0]\nstr q1, [sp, #48]                   // 16-byte Folded Spill\nldp q0, q1, [sp, #16]               // 32-byte Folded Reload\nmov h0, v0.h[6]\nmov h1, v1.h[6]\nfcvt s0, h0\nfcvt s1, h1\nbl powf\nfcvt h0, s0\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nmov v1.h[6], v0.h[0]\nstr q1, [sp, #48]                   // 16-byte Folded Spill\nldp q0, q1, [sp, #16]               // 32-byte Folded Reload\nmov h0, v0.h[7]\nmov h1, v1.h[7]\nfcvt s0, h0\nfcvt s1, h1\nbl powf\nfmov s1, s0\nldr x30, [sp, #80]                  // 8-byte Folded Reload\nfcvt h2, s1\nldp q1, q0, [sp, #48]               // 32-byte Folded Reload\nmov v1.h[7], v2.h[0]\nadd sp, sp, #96\nret",
  "giasm": "sub sp, sp, #448\nstp d15, d14, [sp, #368]            // 16-byte Folded Spill\nstp d13, d12, [sp, #384]            // 16-byte Folded Spill\nstp d11, d10, [sp, #400]            // 16-byte Folded Spill\nstp d9, d8, [sp, #416]              // 16-byte Folded Spill\nstp x29, x30, [sp, #432]            // 16-byte Folded Spill\nmov v4.16b, v1.16b\nstr q1, [sp, #112]                  // 16-byte Folded Spill\nmov h1, v0.h[4]\nmov h12, v0.h[1]\nmov h13, v0.h[2]\nstr q3, [sp, #16]                   // 16-byte Folded Spill\nmov h14, v0.h[3]\nmov h15, v2.h[1]\nmov h8, v2.h[2]\nmov h9, v2.h[3]\nmov h10, v2.h[4]\nmov h11, v2.h[5]\nstr h1, [sp, #272]                  // 2-byte Folded Spill\nmov h1, v0.h[5]\nstr h1, [sp, #240]                  // 2-byte Folded Spill\nmov h1, v0.h[6]\nstr h1, [sp, #176]                  // 2-byte Folded Spill\nmov h1, v0.h[7]\nfcvt s0, h0\nstr h1, [sp, #144]                  // 2-byte Folded Spill\nmov h1, v4.h[1]\nstr h1, [sp, #48]                   // 2-byte Folded Spill\nmov h1, v4.h[2]\nstr h1, [sp, #80]                   // 2-byte Folded Spill\nmov h1, v4.h[3]\nstr h1, [sp, #128]                  // 2-byte Folded Spill\nmov h1, v4.h[4]\nstr h1, [sp, #192]                  // 2-byte Folded Spill\nmov h1, v4.h[5]\nstr h1, [sp, #256]                  // 2-byte Folded Spill\nmov h1, v4.h[6]\nstr h1, [sp, #336]                  // 2-byte Folded Spill\nmov h1, v4.h[7]\nstr h1, [sp, #352]                  // 2-byte Folded Spill\nmov h1, v2.h[6]\nstr h1, [sp, #12]                   // 2-byte Folded Spill\nmov h1, v2.h[7]\nstr h1, [sp, #14]                   // 2-byte Folded Spill\nmov h1, v3.h[1]\nstr h1, [sp, #44]                   // 2-byte Folded Spill\nmov h1, v3.h[2]\nstr h1, [sp, #46]                   // 2-byte Folded Spill\nmov h1, v3.h[3]\nstr h1, [sp, #78]                   // 2-byte Folded Spill\nmov h1, v3.h[4]\nstr h1, [sp, #110]                  // 2-byte Folded Spill\nmov h1, v3.h[5]\nstr h1, [sp, #174]                  // 2-byte Folded Spill\nmov h1, v3.h[6]\nstr h1, [sp, #238]                  // 2-byte Folded Spill\nmov h1, v3.h[7]\nstr h1, [sp, #302]                  // 2-byte Folded Spill\nfcvt s1, h2\nbl powf\nfcvt s2, h12\nfcvt h0, s0\nfcvt s1, h15\nstr q0, [sp, #304]                  // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nfcvt s2, h13\nfcvt h0, s0\nfcvt s1, h8\nstr q0, [sp, #208]                  // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nfcvt s2, h14\nfcvt h0, s0\nfcvt s1, h9\nstr q0, [sp, #320]                  // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nldr h1, [sp, #272]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nfcvt s1, h10\nstr q0, [sp, #272]                  // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nldr h1, [sp, #240]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nfcvt s1, h11\nstr q0, [sp, #240]                  // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nldr h1, [sp, #176]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #176]                  // 16-byte Folded Spill\nldr h0, [sp, #12]                   // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl powf\nldr h1, [sp, #144]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #144]                  // 16-byte Folded Spill\nldr h0, [sp, #14]                   // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl powf\nldr q1, [sp, #112]                  // 16-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #112]                  // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl powf\nldr h1, [sp, #48]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nldr h0, [sp, #44]                   // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl powf\nldr h1, [sp, #80]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #80]                   // 16-byte Folded Spill\nldr h0, [sp, #46]                   // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl powf\nldr h1, [sp, #128]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #128]                  // 16-byte Folded Spill\nldr h0, [sp, #78]                   // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl powf\nldr h1, [sp, #192]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #192]                  // 16-byte Folded Spill\nldr h0, [sp, #110]                  // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl powf\nldr h1, [sp, #256]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #256]                  // 16-byte Folded Spill\nldr h0, [sp, #174]                  // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl powf\nldr h1, [sp, #336]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #336]                  // 16-byte Folded Spill\nldr h0, [sp, #238]                  // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl powf\nldr h1, [sp, #352]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #352]                  // 16-byte Folded Spill\nldr h0, [sp, #302]                  // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl powf\nldr q3, [sp, #304]                  // 16-byte Folded Reload\nldr q2, [sp, #208]                  // 16-byte Folded Reload\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nldp x29, x30, [sp, #432]            // 16-byte Folded Reload\nmov v3.h[1], v2.h[0]\nldr q2, [sp, #80]                   // 16-byte Folded Reload\nldp d9, d8, [sp, #416]              // 16-byte Folded Reload\nmov v1.h[1], v2.h[0]\nldr q2, [sp, #320]                  // 16-byte Folded Reload\nldp d11, d10, [sp, #400]            // 16-byte Folded Reload\nmov v3.h[2], v2.h[0]\nldr q2, [sp, #128]                  // 16-byte Folded Reload\nldp d13, d12, [sp, #384]            // 16-byte Folded Reload\nmov v1.h[2], v2.h[0]\nldr q2, [sp, #272]                  // 16-byte Folded Reload\nldp d15, d14, [sp, #368]            // 16-byte Folded Reload\nmov v3.h[3], v2.h[0]\nldr q2, [sp, #192]                  // 16-byte Folded Reload\nmov v1.h[3], v2.h[0]\nldp q4, q2, [sp, #240]              // 32-byte Folded Reload\nmov v3.h[4], v4.h[0]\nmov v1.h[4], v2.h[0]\nldr q2, [sp, #176]                  // 16-byte Folded Reload\nmov v3.h[5], v2.h[0]\nldr q2, [sp, #336]                  // 16-byte Folded Reload\nmov v1.h[5], v2.h[0]\nfcvt h2, s0\nldr q0, [sp, #144]                  // 16-byte Folded Reload\nmov v3.h[6], v0.h[0]\nldr q0, [sp, #352]                  // 16-byte Folded Reload\nmov v1.h[6], v0.h[0]\nldr q0, [sp, #112]                  // 16-byte Folded Reload\nmov v3.h[7], v0.h[0]\nmov v1.h[7], v2.h[0]\nmov v0.16b, v3.16b\nadd sp, sp, #448\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, <16 x half> %b) {\n  %r = call <16 x half> @llvm.pow(<16 x half> %a, <16 x half> %b)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 100 for instruction:   %r = call <16 x half> @llvm.pow.v16f16(<16 x half> %a, <16 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "pow",
  "ty": "<16 x half>",
  "variant": "binopconst",
  "codesize": 72,
  "thru": 72,
  "lat": 72,
  "sizelat": 72,
  "size": 142,
  "gisize": 172,
  "extrasize": 0,
  "asm": "sub sp, sp, #64\nstr x30, [sp, #48]                  // 8-byte Folded Spill\nstp q1, q0, [sp]                    // 32-byte Folded Spill\nmov h1, v0.h[1]\nfcvt s0, h1\nfmov s1, #6.00000000\nbl powf\nfcvt h0, s0\nfmov s1, #7.00000000\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v0.h[1], v1.h[0]\nfmov s1, #7.00000000\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[2]\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[2], v0.h[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[3]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, #6.00000000\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[3], v0.h[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[4]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[4], v0.h[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[5]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, #6.00000000\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[5], v0.h[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[6]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[6], v0.h[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[7]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, #6.00000000\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[7], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[1]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, #6.00000000\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nfmov s1, #7.00000000\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v0.h[1], v1.h[0]\nfmov s1, #7.00000000\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[2]\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[2], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[3]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #6.00000000\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[3], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[4]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[4], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[5]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #6.00000000\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[5], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[6]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[6], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[7]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #6.00000000\nfcvt s0, h0\nbl powf\nfmov s1, s0\nldr x30, [sp, #48]                  // 8-byte Folded Reload\nfcvt h2, s1\nldp q1, q0, [sp, #16]               // 32-byte Folded Reload\nmov v1.h[7], v2.h[0]\nadd sp, sp, #64\nret",
  "giasm": "sub sp, sp, #336\nstp d15, d14, [sp, #240]            // 16-byte Folded Spill\nstp d13, d12, [sp, #256]            // 16-byte Folded Spill\nstp d11, d10, [sp, #272]            // 16-byte Folded Spill\nstp d9, d8, [sp, #288]              // 16-byte Folded Spill\nstr x29, [sp, #304]                 // 8-byte Folded Spill\nstp x30, x19, [sp, #320]            // 16-byte Folded Spill\nmov v2.16b, v1.16b\nstr q1, [sp, #48]                   // 16-byte Folded Spill\nmov h1, v0.h[7]\nmov w8, #18176                      // =0x4700\nmov h14, v0.h[1]\nmov h15, v0.h[2]\nfmov s10, w8\nmov h8, v0.h[3]\nmov w19, #17920                     // =0x4600\nmov h9, v0.h[4]\nmov h13, v0.h[5]\nmov h12, v0.h[6]\nstr h1, [sp, #80]                   // 2-byte Folded Spill\nmov h1, v2.h[1]\nfcvt s0, h0\nstr h1, [sp]                        // 2-byte Folded Spill\nmov h1, v2.h[2]\nstr h1, [sp, #16]                   // 2-byte Folded Spill\nmov h1, v2.h[3]\nstr h1, [sp, #32]                   // 2-byte Folded Spill\nmov h1, v2.h[4]\nstr h1, [sp, #64]                   // 2-byte Folded Spill\nmov h1, v2.h[5]\nstr h1, [sp, #112]                  // 2-byte Folded Spill\nmov h1, v2.h[6]\nstr h1, [sp, #160]                  // 2-byte Folded Spill\nmov h1, v2.h[7]\nstr h1, [sp, #208]                  // 2-byte Folded Spill\nfcvt s1, h10\nbl powf\nfcvt h0, s0\nfmov s11, w19\nfcvt s1, h11\nstr q0, [sp, #192]                  // 16-byte Folded Spill\nfcvt s0, h14\nbl powf\nfcvt s2, h15\nfcvt h0, s0\nfcvt s1, h10\nstr q0, [sp, #128]                  // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nfcvt s2, h8\nfcvt h0, s0\nfcvt s1, h11\nstr q0, [sp, #224]                  // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nfcvt s2, h9\nfcvt h0, s0\nfcvt s1, h10\nstr q0, [sp, #176]                  // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nfcvt s2, h13\nfcvt h0, s0\nfcvt s1, h11\nstr q0, [sp, #144]                  // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nfcvt s2, h12\nfcvt h0, s0\nfcvt s1, h10\nstr q0, [sp, #96]                   // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nldr h1, [sp, #80]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nfcvt s1, h11\nstr q0, [sp, #80]                   // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nfcvt s1, h10\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nldr h1, [sp]                        // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nfcvt s1, h11\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nldr h1, [sp, #16]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nfcvt s1, h10\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nldr h1, [sp, #32]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nfcvt s1, h11\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nldr h1, [sp, #64]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nfcvt s1, h10\nstr q0, [sp, #64]                   // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nldr h1, [sp, #112]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nfcvt s1, h11\nstr q0, [sp, #112]                  // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nldr h1, [sp, #160]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nfcvt s1, h10\nstr q0, [sp, #160]                  // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nldr h1, [sp, #208]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nfcvt s1, h11\nstr q0, [sp, #208]                  // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nldr q3, [sp, #192]                  // 16-byte Folded Reload\nldr q2, [sp, #128]                  // 16-byte Folded Reload\nldr x29, [sp, #304]                 // 8-byte Folded Reload\nldp x30, x19, [sp, #320]            // 16-byte Folded Reload\nmov v3.h[1], v2.h[0]\nldp q1, q2, [sp]                    // 32-byte Folded Reload\nldp d9, d8, [sp, #288]              // 16-byte Folded Reload\nldp d11, d10, [sp, #272]            // 16-byte Folded Reload\nmov v1.h[1], v2.h[0]\nldr q2, [sp, #224]                  // 16-byte Folded Reload\nldp d13, d12, [sp, #256]            // 16-byte Folded Reload\nmov v3.h[2], v2.h[0]\nldr q2, [sp, #32]                   // 16-byte Folded Reload\nldp d15, d14, [sp, #240]            // 16-byte Folded Reload\nmov v1.h[2], v2.h[0]\nldr q2, [sp, #176]                  // 16-byte Folded Reload\nmov v3.h[3], v2.h[0]\nldr q2, [sp, #64]                   // 16-byte Folded Reload\nmov v1.h[3], v2.h[0]\nldr q2, [sp, #144]                  // 16-byte Folded Reload\nmov v3.h[4], v2.h[0]\nldp q2, q4, [sp, #96]               // 32-byte Folded Reload\nmov v1.h[4], v4.h[0]\nmov v3.h[5], v2.h[0]\nldr q2, [sp, #160]                  // 16-byte Folded Reload\nmov v1.h[5], v2.h[0]\nfcvt h2, s0\nldr q0, [sp, #80]                   // 16-byte Folded Reload\nmov v3.h[6], v0.h[0]\nldr q0, [sp, #208]                  // 16-byte Folded Reload\nmov v1.h[6], v0.h[0]\nldr q0, [sp, #48]                   // 16-byte Folded Reload\nmov v3.h[7], v0.h[0]\nmov v1.h[7], v2.h[0]\nmov v0.16b, v3.16b\nadd sp, sp, #336\nret",
  "ll": "define <16 x half> @test(<16 x half> %a) {\n  %r = call <16 x half> @llvm.pow(<16 x half> %a, <16 x half> <half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0, half 7.0, half 6.0>)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 72 for instruction:   %r = call <16 x half> @llvm.pow.v16f16(<16 x half> %a, <16 x half> <half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600, half 0xH4700, half 0xH4600>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "pow",
  "ty": "<16 x half>",
  "variant": "binopsplat",
  "codesize": 102,
  "thru": 102,
  "lat": 102,
  "sizelat": 102,
  "size": 145,
  "gisize": 209,
  "extrasize": 0,
  "asm": "sub sp, sp, #64\nstr d8, [sp, #48]                   // 8-byte Folded Spill\nstr x30, [sp, #56]                  // 8-byte Folded Spill\nstp q1, q0, [sp]                    // 32-byte Folded Spill\nmov h1, v0.h[1]\nfcvt s8, h2\nfcvt s0, h1\nfmov s1, s8\nbl powf\nfcvt h0, s0\nfmov s1, s8\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v0.h[1], v1.h[0]\nfmov s1, s8\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[2]\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[2], v0.h[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[3]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, s8\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[3], v0.h[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[4]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, s8\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[4], v0.h[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[5]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, s8\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[5], v0.h[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[6]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, s8\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[6], v0.h[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[7]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, s8\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[7], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[1]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, s8\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nfmov s1, s8\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v0.h[1], v1.h[0]\nfmov s1, s8\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[2]\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[2], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[3]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, s8\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[3], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[4]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, s8\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[4], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[5]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, s8\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[5], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[6]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, s8\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[6], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[7]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, s8\nfcvt s0, h0\nbl powf\nfmov s1, s0\nldr x30, [sp, #56]                  // 8-byte Folded Reload\nldr d8, [sp, #48]                   // 8-byte Folded Reload\nfcvt h2, s1\nldp q1, q0, [sp, #16]               // 32-byte Folded Reload\nmov v1.h[7], v2.h[0]\nadd sp, sp, #64\nret",
  "giasm": "sub sp, sp, #448\nstp d15, d14, [sp, #368]            // 16-byte Folded Spill\nstp d13, d12, [sp, #384]            // 16-byte Folded Spill\nstp d11, d10, [sp, #400]            // 16-byte Folded Spill\nstp d9, d8, [sp, #416]              // 16-byte Folded Spill\nstp x29, x30, [sp, #432]            // 16-byte Folded Spill\ndup v3.8h, v2.h[0]\ndup v4.8h, v2.h[0]\nstr q1, [sp, #112]                  // 16-byte Folded Spill\nmov h2, v0.h[4]\nmov h12, v0.h[1]\nmov h13, v0.h[2]\nmov h14, v0.h[3]\nmov h15, v3.h[1]\nmov h8, v3.h[2]\nstr q4, [sp, #16]                   // 16-byte Folded Spill\nmov h9, v3.h[3]\nmov h10, v3.h[4]\nmov h11, v3.h[5]\nstr h2, [sp, #272]                  // 2-byte Folded Spill\nmov h2, v0.h[5]\nstr h2, [sp, #240]                  // 2-byte Folded Spill\nmov h2, v0.h[6]\nstr h2, [sp, #176]                  // 2-byte Folded Spill\nmov h2, v0.h[7]\nfcvt s0, h0\nstr h2, [sp, #144]                  // 2-byte Folded Spill\nmov h2, v1.h[1]\nstr h2, [sp, #48]                   // 2-byte Folded Spill\nmov h2, v1.h[2]\nstr h2, [sp, #80]                   // 2-byte Folded Spill\nmov h2, v1.h[3]\nstr h2, [sp, #128]                  // 2-byte Folded Spill\nmov h2, v1.h[4]\nstr h2, [sp, #192]                  // 2-byte Folded Spill\nmov h2, v1.h[5]\nstr h2, [sp, #256]                  // 2-byte Folded Spill\nmov h2, v1.h[6]\nstr h2, [sp, #336]                  // 2-byte Folded Spill\nmov h2, v1.h[7]\nmov h1, v3.h[6]\nstr h1, [sp, #12]                   // 2-byte Folded Spill\nmov h1, v3.h[7]\nstr h2, [sp, #352]                  // 2-byte Folded Spill\nmov h2, v4.h[4]\nstr h1, [sp, #14]                   // 2-byte Folded Spill\nmov h1, v4.h[1]\nstr h2, [sp, #110]                  // 2-byte Folded Spill\nmov h2, v4.h[5]\nstr h1, [sp, #44]                   // 2-byte Folded Spill\nmov h1, v4.h[2]\nstr h2, [sp, #174]                  // 2-byte Folded Spill\nmov h2, v4.h[6]\nstr h1, [sp, #46]                   // 2-byte Folded Spill\nmov h1, v4.h[3]\nstr h2, [sp, #238]                  // 2-byte Folded Spill\nmov h2, v4.h[7]\nstr h1, [sp, #78]                   // 2-byte Folded Spill\nfcvt s1, h3\nstr h2, [sp, #302]                  // 2-byte Folded Spill\nbl powf\nfcvt s2, h12\nfcvt h0, s0\nfcvt s1, h15\nstr q0, [sp, #304]                  // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nfcvt s2, h13\nfcvt h0, s0\nfcvt s1, h8\nstr q0, [sp, #208]                  // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nfcvt s2, h14\nfcvt h0, s0\nfcvt s1, h9\nstr q0, [sp, #320]                  // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nldr h1, [sp, #272]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nfcvt s1, h10\nstr q0, [sp, #272]                  // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nldr h1, [sp, #240]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nfcvt s1, h11\nstr q0, [sp, #240]                  // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nldr h1, [sp, #176]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #176]                  // 16-byte Folded Spill\nldr h0, [sp, #12]                   // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl powf\nldr h1, [sp, #144]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #144]                  // 16-byte Folded Spill\nldr h0, [sp, #14]                   // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl powf\nldr q1, [sp, #112]                  // 16-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #112]                  // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl powf\nldr h1, [sp, #48]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nldr h0, [sp, #44]                   // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl powf\nldr h1, [sp, #80]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #80]                   // 16-byte Folded Spill\nldr h0, [sp, #46]                   // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl powf\nldr h1, [sp, #128]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #128]                  // 16-byte Folded Spill\nldr h0, [sp, #78]                   // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl powf\nldr h1, [sp, #192]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #192]                  // 16-byte Folded Spill\nldr h0, [sp, #110]                  // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl powf\nldr h1, [sp, #256]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #256]                  // 16-byte Folded Spill\nldr h0, [sp, #174]                  // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl powf\nldr h1, [sp, #336]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #336]                  // 16-byte Folded Spill\nldr h0, [sp, #238]                  // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl powf\nldr h1, [sp, #352]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #352]                  // 16-byte Folded Spill\nldr h0, [sp, #302]                  // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl powf\nldr q3, [sp, #304]                  // 16-byte Folded Reload\nldr q2, [sp, #208]                  // 16-byte Folded Reload\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nldp x29, x30, [sp, #432]            // 16-byte Folded Reload\nmov v3.h[1], v2.h[0]\nldr q2, [sp, #80]                   // 16-byte Folded Reload\nldp d9, d8, [sp, #416]              // 16-byte Folded Reload\nmov v1.h[1], v2.h[0]\nldr q2, [sp, #320]                  // 16-byte Folded Reload\nldp d11, d10, [sp, #400]            // 16-byte Folded Reload\nmov v3.h[2], v2.h[0]\nldr q2, [sp, #128]                  // 16-byte Folded Reload\nldp d13, d12, [sp, #384]            // 16-byte Folded Reload\nmov v1.h[2], v2.h[0]\nldr q2, [sp, #272]                  // 16-byte Folded Reload\nldp d15, d14, [sp, #368]            // 16-byte Folded Reload\nmov v3.h[3], v2.h[0]\nldr q2, [sp, #192]                  // 16-byte Folded Reload\nmov v1.h[3], v2.h[0]\nldp q4, q2, [sp, #240]              // 32-byte Folded Reload\nmov v3.h[4], v4.h[0]\nmov v1.h[4], v2.h[0]\nldr q2, [sp, #176]                  // 16-byte Folded Reload\nmov v3.h[5], v2.h[0]\nldr q2, [sp, #336]                  // 16-byte Folded Reload\nmov v1.h[5], v2.h[0]\nfcvt h2, s0\nldr q0, [sp, #144]                  // 16-byte Folded Reload\nmov v3.h[6], v0.h[0]\nldr q0, [sp, #352]                  // 16-byte Folded Reload\nmov v1.h[6], v0.h[0]\nldr q0, [sp, #112]                  // 16-byte Folded Reload\nmov v3.h[7], v0.h[0]\nmov v1.h[7], v2.h[0]\nmov v0.16b, v3.16b\nadd sp, sp, #448\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, half %bs) {\n  %i = insertelement <16 x half> poison, half %bs, i64 0\n  %b = shufflevector <16 x half> %i, <16 x half> poison, <16 x i32> zeroinitializer\n  %r = call <16 x half> @llvm.pow(<16 x half> %a, <16 x half> %b)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <16 x half> poison, half %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <16 x half> %i, <16 x half> poison, <16 x i32> zeroinitializer\nCost Model: Found an estimated cost of 100 for instruction:   %r = call <16 x half> @llvm.pow.v16f16(<16 x half> %a, <16 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "pow",
  "ty": "<16 x half>",
  "variant": "binopconstsplat",
  "codesize": 72,
  "thru": 72,
  "lat": 72,
  "sizelat": 72,
  "size": 142,
  "gisize": 167,
  "extrasize": 0,
  "asm": "sub sp, sp, #64\nstr x30, [sp, #48]                  // 8-byte Folded Spill\nstp q1, q0, [sp]                    // 32-byte Folded Spill\nmov h1, v0.h[1]\nfcvt s0, h1\nfmov s1, #7.00000000\nbl powf\nfcvt h0, s0\nfmov s1, #7.00000000\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v0.h[1], v1.h[0]\nfmov s1, #7.00000000\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[2]\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[2], v0.h[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[3]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[3], v0.h[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[4]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[4], v0.h[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[5]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[5], v0.h[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[6]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[6], v0.h[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[7]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[7], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[1]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nfmov s1, #7.00000000\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v0.h[1], v1.h[0]\nfmov s1, #7.00000000\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[2]\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[2], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[3]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[3], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[4]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[4], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[5]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[5], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[6]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[6], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[7]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfcvt s0, h0\nbl powf\nfmov s1, s0\nldr x30, [sp, #48]                  // 8-byte Folded Reload\nfcvt h2, s1\nldp q1, q0, [sp, #16]               // 32-byte Folded Reload\nmov v1.h[7], v2.h[0]\nadd sp, sp, #64\nret",
  "giasm": "sub sp, sp, #320\nstp d15, d14, [sp, #240]            // 16-byte Folded Spill\nstp d13, d12, [sp, #256]            // 16-byte Folded Spill\nstp d11, d10, [sp, #272]            // 16-byte Folded Spill\nstp d9, d8, [sp, #288]              // 16-byte Folded Spill\nstp x29, x30, [sp, #304]            // 16-byte Folded Spill\nmov v2.16b, v1.16b\nstr q1, [sp, #64]                   // 16-byte Folded Spill\nmov h1, v1.h[1]\nmov w8, #18176                      // =0x4700\nmov h11, v0.h[1]\nmov h12, v0.h[2]\nfmov s8, w8\nmov h13, v0.h[3]\nmov h14, v0.h[4]\nmov h15, v0.h[5]\nmov h10, v0.h[6]\nmov h9, v0.h[7]\nstr h1, [sp]                        // 2-byte Folded Spill\nmov h1, v2.h[2]\nfcvt s0, h0\nstr h1, [sp, #16]                   // 2-byte Folded Spill\nmov h1, v2.h[3]\nstr h1, [sp, #32]                   // 2-byte Folded Spill\nmov h1, v2.h[4]\nstr h1, [sp, #48]                   // 2-byte Folded Spill\nmov h1, v2.h[5]\nstr h1, [sp, #96]                   // 2-byte Folded Spill\nmov h1, v2.h[6]\nstr h1, [sp, #160]                  // 2-byte Folded Spill\nmov h1, v2.h[7]\nstr h1, [sp, #192]                  // 2-byte Folded Spill\nfcvt s1, h8\nbl powf\nfcvt s2, h11\nfcvt h0, s0\nfcvt s1, h8\nstr q0, [sp, #208]                  // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nfcvt s2, h12\nfcvt h0, s0\nfcvt s1, h8\nstr q0, [sp, #128]                  // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nfcvt s2, h13\nfcvt h0, s0\nfcvt s1, h8\nstr q0, [sp, #224]                  // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nfcvt s2, h14\nfcvt h0, s0\nfcvt s1, h8\nstr q0, [sp, #176]                  // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nfcvt s2, h15\nfcvt h0, s0\nfcvt s1, h8\nstr q0, [sp, #144]                  // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nfcvt s2, h10\nfcvt h0, s0\nfcvt s1, h8\nstr q0, [sp, #112]                  // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nfcvt s2, h9\nfcvt h0, s0\nfcvt s1, h8\nstr q0, [sp, #80]                   // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nldr q1, [sp, #64]                   // 16-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nfcvt s1, h8\nstr q0, [sp, #64]                   // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nldr h1, [sp]                        // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nfcvt s1, h8\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nldr h1, [sp, #16]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nfcvt s1, h8\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nldr h1, [sp, #32]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nfcvt s1, h8\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nldr h1, [sp, #48]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nfcvt s1, h8\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nldr h1, [sp, #96]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nfcvt s1, h8\nstr q0, [sp, #96]                   // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nldr h1, [sp, #160]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nfcvt s1, h8\nstr q0, [sp, #160]                  // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nldr h1, [sp, #192]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nfcvt s1, h8\nstr q0, [sp, #192]                  // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nldr q3, [sp, #208]                  // 16-byte Folded Reload\nldr q2, [sp, #128]                  // 16-byte Folded Reload\nldp x29, x30, [sp, #304]            // 16-byte Folded Reload\nmov v3.h[1], v2.h[0]\nldp q1, q2, [sp]                    // 32-byte Folded Reload\nldp d9, d8, [sp, #288]              // 16-byte Folded Reload\nldp d11, d10, [sp, #272]            // 16-byte Folded Reload\nmov v1.h[1], v2.h[0]\nldr q2, [sp, #224]                  // 16-byte Folded Reload\nldp d13, d12, [sp, #256]            // 16-byte Folded Reload\nmov v3.h[2], v2.h[0]\nldr q2, [sp, #32]                   // 16-byte Folded Reload\nldp d15, d14, [sp, #240]            // 16-byte Folded Reload\nmov v1.h[2], v2.h[0]\nldr q2, [sp, #176]                  // 16-byte Folded Reload\nmov v3.h[3], v2.h[0]\nldr q2, [sp, #48]                   // 16-byte Folded Reload\nmov v1.h[3], v2.h[0]\nldr q2, [sp, #144]                  // 16-byte Folded Reload\nmov v3.h[4], v2.h[0]\nldp q4, q2, [sp, #96]               // 32-byte Folded Reload\nmov v1.h[4], v4.h[0]\nmov v3.h[5], v2.h[0]\nldr q2, [sp, #160]                  // 16-byte Folded Reload\nmov v1.h[5], v2.h[0]\nfcvt h2, s0\nldr q0, [sp, #80]                   // 16-byte Folded Reload\nmov v3.h[6], v0.h[0]\nldr q0, [sp, #192]                  // 16-byte Folded Reload\nmov v1.h[6], v0.h[0]\nldr q0, [sp, #64]                   // 16-byte Folded Reload\nmov v3.h[7], v0.h[0]\nmov v1.h[7], v2.h[0]\nmov v0.16b, v3.16b\nadd sp, sp, #320\nret",
  "ll": "define <16 x half> @test(<16 x half> %a) {\n  %r = call <16 x half> @llvm.pow(<16 x half> %a, <16 x half> <half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0, half 7.0>)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 72 for instruction:   %r = call <16 x half> @llvm.pow.v16f16(<16 x half> %a, <16 x half> splat (half 0xH4700))\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "pow",
  "ty": "<2 x float>",
  "variant": "binop",
  "codesize": 8,
  "thru": 26,
  "lat": 26,
  "sizelat": 26,
  "size": 13,
  "gisize": 16,
  "extrasize": 0,
  "asm": "sub sp, sp, #64\nstr x30, [sp, #48]                  // 8-byte Folded Spill\nstp q0, q1, [sp]                    // 32-byte Folded Spill\nmov s0, v0.s[1]\nmov s1, v1.s[1]\nbl powf\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldp q0, q1, [sp]                    // 32-byte Folded Reload\nbl powf\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nldr x30, [sp, #48]                  // 8-byte Folded Reload\nmov v0.s[1], v1.s[0]\nadd sp, sp, #64\nret",
  "giasm": "sub sp, sp, #48\nstp d9, d8, [sp, #16]               // 16-byte Folded Spill\nstr x30, [sp, #32]                  // 8-byte Folded Spill\nmov s8, v0.s[1]\nmov s9, v1.s[1]\nbl powf\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s1, s9\nfmov s0, s8\nbl powf\nldr q1, [sp]                        // 16-byte Folded Reload\nldp d9, d8, [sp, #16]               // 16-byte Folded Reload\nldr x30, [sp, #32]                  // 8-byte Folded Reload\nmov v1.s[1], v0.s[0]\nfmov d0, d1\nadd sp, sp, #48\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, <2 x float> %b) {\n  %r = call <2 x float> @llvm.pow(<2 x float> %a, <2 x float> %b)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 8 for instruction:   %r = call <2 x float> @llvm.pow.v2f32(<2 x float> %a, <2 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "pow",
  "ty": "<2 x float>",
  "variant": "binopconst",
  "codesize": 6,
  "thru": 24,
  "lat": 24,
  "sizelat": 24,
  "size": 14,
  "gisize": 16,
  "extrasize": 0,
  "asm": "sub sp, sp, #48\nstr x30, [sp, #32]                  // 8-byte Folded Spill\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s1, #6.00000000\nmov s0, v0.s[1]\nbl powf\nfmov s1, #7.00000000\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nbl powf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nldr x30, [sp, #32]                  // 8-byte Folded Reload\nmov v0.s[1], v1.s[0]\nadd sp, sp, #48\nret",
  "giasm": "sub sp, sp, #32\nstr d8, [sp, #16]                   // 8-byte Folded Spill\nstr x30, [sp, #24]                  // 8-byte Folded Spill\nfmov s1, #7.00000000\nmov s8, v0.s[1]\nbl powf\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s1, #6.00000000\nfmov s0, s8\nbl powf\nldr q1, [sp]                        // 16-byte Folded Reload\nldr x30, [sp, #24]                  // 8-byte Folded Reload\nldr d8, [sp, #16]                   // 8-byte Folded Reload\nmov v1.s[1], v0.s[0]\nfmov d0, d1\nadd sp, sp, #32\nret",
  "ll": "define <2 x float> @test(<2 x float> %a) {\n  %r = call <2 x float> @llvm.pow(<2 x float> %a, <2 x float> <float 7.0, float 6.0>)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 6 for instruction:   %r = call <2 x float> @llvm.pow.v2f32(<2 x float> %a, <2 x float> <float 7.000000e+00, float 6.000000e+00>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "pow",
  "ty": "<2 x float>",
  "variant": "binopsplat",
  "codesize": 9,
  "thru": 27,
  "lat": 27,
  "sizelat": 27,
  "size": 16,
  "gisize": 17,
  "extrasize": 0,
  "asm": "sub sp, sp, #48\nstr d8, [sp, #32]                   // 8-byte Folded Spill\nstr x30, [sp, #40]                  // 8-byte Folded Spill\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s8, s1\nmov s0, v0.s[1]\nbl powf\nfmov s1, s8\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nbl powf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nldr x30, [sp, #40]                  // 8-byte Folded Reload\nldr d8, [sp, #32]                   // 8-byte Folded Reload\nmov v0.s[1], v1.s[0]\nadd sp, sp, #48\nret",
  "giasm": "sub sp, sp, #48\nstp d9, d8, [sp, #16]               // 16-byte Folded Spill\nstr x30, [sp, #32]                  // 8-byte Folded Spill\nmov s8, v0.s[1]\ndup v1.2s, v1.s[0]\nmov s9, v1.s[1]\nbl powf\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s1, s9\nfmov s0, s8\nbl powf\nldr q1, [sp]                        // 16-byte Folded Reload\nldp d9, d8, [sp, #16]               // 16-byte Folded Reload\nldr x30, [sp, #32]                  // 8-byte Folded Reload\nmov v1.s[1], v0.s[0]\nfmov d0, d1\nadd sp, sp, #48\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, float %bs) {\n  %i = insertelement <2 x float> poison, float %bs, i64 0\n  %b = shufflevector <2 x float> %i, <2 x float> poison, <2 x i32> zeroinitializer\n  %r = call <2 x float> @llvm.pow(<2 x float> %a, <2 x float> %b)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <2 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <2 x float> %i, <2 x float> poison, <2 x i32> zeroinitializer\nCost Model: Found an estimated cost of 8 for instruction:   %r = call <2 x float> @llvm.pow.v2f32(<2 x float> %a, <2 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "pow",
  "ty": "<2 x float>",
  "variant": "binopconstsplat",
  "codesize": 6,
  "thru": 24,
  "lat": 24,
  "sizelat": 24,
  "size": 14,
  "gisize": 16,
  "extrasize": 0,
  "asm": "sub sp, sp, #48\nstr x30, [sp, #32]                  // 8-byte Folded Spill\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s1, #7.00000000\nmov s0, v0.s[1]\nbl powf\nfmov s1, #7.00000000\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nbl powf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nldr x30, [sp, #32]                  // 8-byte Folded Reload\nmov v0.s[1], v1.s[0]\nadd sp, sp, #48\nret",
  "giasm": "sub sp, sp, #32\nstr d8, [sp, #16]                   // 8-byte Folded Spill\nstr x30, [sp, #24]                  // 8-byte Folded Spill\nfmov s1, #7.00000000\nmov s8, v0.s[1]\nbl powf\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s1, #7.00000000\nfmov s0, s8\nbl powf\nldr q1, [sp]                        // 16-byte Folded Reload\nldr x30, [sp, #24]                  // 8-byte Folded Reload\nldr d8, [sp, #16]                   // 8-byte Folded Reload\nmov v1.s[1], v0.s[0]\nfmov d0, d1\nadd sp, sp, #32\nret",
  "ll": "define <2 x float> @test(<2 x float> %a) {\n  %r = call <2 x float> @llvm.pow(<2 x float> %a, <2 x float> <float 7.0, float 7.0>)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 6 for instruction:   %r = call <2 x float> @llvm.pow.v2f32(<2 x float> %a, <2 x float> splat (float 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "pow",
  "ty": "<4 x float>",
  "variant": "binop",
  "codesize": 22,
  "thru": 58,
  "lat": 58,
  "sizelat": 58,
  "size": 28,
  "gisize": 35,
  "extrasize": 0,
  "asm": "sub sp, sp, #64\nstr x30, [sp, #48]                  // 8-byte Folded Spill\nstp q0, q1, [sp, #16]               // 32-byte Folded Spill\nmov s0, v0.s[1]\nmov s1, v1.s[1]\nbl powf\nstr q0, [sp]                        // 16-byte Folded Spill\nldp q0, q1, [sp, #16]               // 32-byte Folded Reload\nbl powf\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v0.s[1], v1.s[0]\nstr q0, [sp]                        // 16-byte Folded Spill\nldp q0, q1, [sp, #16]               // 32-byte Folded Reload\nmov s0, v0.s[2]\nmov s1, v1.s[2]\nbl powf\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v1.s[2], v0.s[0]\nstr q1, [sp]                        // 16-byte Folded Spill\nldp q0, q1, [sp, #16]               // 32-byte Folded Reload\nmov s0, v0.s[3]\nmov s1, v1.s[3]\nbl powf\nldr q1, [sp]                        // 16-byte Folded Reload\nldr x30, [sp, #48]                  // 8-byte Folded Reload\nmov v1.s[3], v0.s[0]\nmov v0.16b, v1.16b\nadd sp, sp, #64\nret",
  "giasm": "sub sp, sp, #112\nstp d13, d12, [sp, #48]             // 16-byte Folded Spill\nstp d11, d10, [sp, #64]             // 16-byte Folded Spill\nstp d9, d8, [sp, #80]               // 16-byte Folded Spill\nstr x30, [sp, #96]                  // 8-byte Folded Spill\nmov s8, v0.s[1]\nmov s9, v0.s[2]\nmov s10, v0.s[3]\nmov s11, v1.s[1]\nmov s12, v1.s[2]\nmov s13, v1.s[3]\nbl powf\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, s11\nfmov s0, s8\nbl powf\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, s12\nfmov s0, s9\nbl powf\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s1, s13\nfmov s0, s10\nbl powf\nldp q2, q1, [sp, #16]               // 32-byte Folded Reload\nldr x30, [sp, #96]                  // 8-byte Folded Reload\nldp d9, d8, [sp, #80]               // 16-byte Folded Reload\nldp d11, d10, [sp, #64]             // 16-byte Folded Reload\nmov v1.s[1], v2.s[0]\nldr q2, [sp]                        // 16-byte Folded Reload\nldp d13, d12, [sp, #48]             // 16-byte Folded Reload\nmov v1.s[2], v2.s[0]\nmov v1.s[3], v0.s[0]\nmov v0.16b, v1.16b\nadd sp, sp, #112\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, <4 x float> %b) {\n  %r = call <4 x float> @llvm.pow(<4 x float> %a, <4 x float> %b)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 22 for instruction:   %r = call <4 x float> @llvm.pow.v4f32(<4 x float> %a, <4 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "pow",
  "ty": "<4 x float>",
  "variant": "binopconst",
  "codesize": 16,
  "thru": 52,
  "lat": 52,
  "sizelat": 52,
  "size": 29,
  "gisize": 31,
  "extrasize": 0,
  "asm": "sub sp, sp, #48\nstr x30, [sp, #32]                  // 8-byte Folded Spill\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nmov s0, v0.s[1]\nfmov s1, #6.00000000\nbl powf\nfmov s1, #7.00000000\nstr q0, [sp]                        // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nbl powf\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v0.s[1], v1.s[0]\nfmov s1, #7.00000000\nstr q0, [sp]                        // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov s0, v0.s[2]\nbl powf\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v1.s[2], v0.s[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov s0, v0.s[3]\nstr q1, [sp]                        // 16-byte Folded Spill\nfmov s1, #6.00000000\nbl powf\nldr q1, [sp]                        // 16-byte Folded Reload\nldr x30, [sp, #32]                  // 8-byte Folded Reload\nmov v1.s[3], v0.s[0]\nmov v0.16b, v1.16b\nadd sp, sp, #48\nret",
  "giasm": "sub sp, sp, #80\nstr d10, [sp, #48]                  // 8-byte Folded Spill\nstp d9, d8, [sp, #56]               // 16-byte Folded Spill\nstr x30, [sp, #72]                  // 8-byte Folded Spill\nfmov s1, #7.00000000\nmov s8, v0.s[1]\nmov s9, v0.s[2]\nmov s10, v0.s[3]\nbl powf\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, #6.00000000\nfmov s0, s8\nbl powf\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfmov s0, s9\nbl powf\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s1, #6.00000000\nfmov s0, s10\nbl powf\nldp q2, q1, [sp, #16]               // 32-byte Folded Reload\nldr x30, [sp, #72]                  // 8-byte Folded Reload\nldp d9, d8, [sp, #56]               // 16-byte Folded Reload\nldr d10, [sp, #48]                  // 8-byte Folded Reload\nmov v1.s[1], v2.s[0]\nldr q2, [sp]                        // 16-byte Folded Reload\nmov v1.s[2], v2.s[0]\nmov v1.s[3], v0.s[0]\nmov v0.16b, v1.16b\nadd sp, sp, #80\nret",
  "ll": "define <4 x float> @test(<4 x float> %a) {\n  %r = call <4 x float> @llvm.pow(<4 x float> %a, <4 x float> <float 7.0, float 6.0, float 7.0, float 6.0>)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 16 for instruction:   %r = call <4 x float> @llvm.pow.v4f32(<4 x float> %a, <4 x float> <float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "pow",
  "ty": "<4 x float>",
  "variant": "binopsplat",
  "codesize": 23,
  "thru": 59,
  "lat": 59,
  "sizelat": 59,
  "size": 31,
  "gisize": 36,
  "extrasize": 0,
  "asm": "sub sp, sp, #48\nstr d8, [sp, #32]                   // 8-byte Folded Spill\nstr x30, [sp, #40]                  // 8-byte Folded Spill\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nmov s0, v0.s[1]\nfmov s8, s1\nbl powf\nfmov s1, s8\nstr q0, [sp]                        // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nbl powf\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v0.s[1], v1.s[0]\nfmov s1, s8\nstr q0, [sp]                        // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov s0, v0.s[2]\nbl powf\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v1.s[2], v0.s[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov s0, v0.s[3]\nstr q1, [sp]                        // 16-byte Folded Spill\nfmov s1, s8\nbl powf\nldr q1, [sp]                        // 16-byte Folded Reload\nldr x30, [sp, #40]                  // 8-byte Folded Reload\nldr d8, [sp, #32]                   // 8-byte Folded Reload\nmov v1.s[3], v0.s[0]\nmov v0.16b, v1.16b\nadd sp, sp, #48\nret",
  "giasm": "sub sp, sp, #112\nstp d13, d12, [sp, #48]             // 16-byte Folded Spill\nstp d11, d10, [sp, #64]             // 16-byte Folded Spill\nstp d9, d8, [sp, #80]               // 16-byte Folded Spill\nstr x30, [sp, #96]                  // 8-byte Folded Spill\nmov s8, v0.s[1]\nmov s9, v0.s[2]\nmov s10, v0.s[3]\ndup v1.4s, v1.s[0]\nmov s11, v1.s[1]\nmov s12, v1.s[2]\nmov s13, v1.s[3]\nbl powf\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, s11\nfmov s0, s8\nbl powf\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, s12\nfmov s0, s9\nbl powf\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s1, s13\nfmov s0, s10\nbl powf\nldp q2, q1, [sp, #16]               // 32-byte Folded Reload\nldr x30, [sp, #96]                  // 8-byte Folded Reload\nldp d9, d8, [sp, #80]               // 16-byte Folded Reload\nldp d11, d10, [sp, #64]             // 16-byte Folded Reload\nmov v1.s[1], v2.s[0]\nldr q2, [sp]                        // 16-byte Folded Reload\nldp d13, d12, [sp, #48]             // 16-byte Folded Reload\nmov v1.s[2], v2.s[0]\nmov v1.s[3], v0.s[0]\nmov v0.16b, v1.16b\nadd sp, sp, #112\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, float %bs) {\n  %i = insertelement <4 x float> poison, float %bs, i64 0\n  %b = shufflevector <4 x float> %i, <4 x float> poison, <4 x i32> zeroinitializer\n  %r = call <4 x float> @llvm.pow(<4 x float> %a, <4 x float> %b)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <4 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <4 x float> %i, <4 x float> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 22 for instruction:   %r = call <4 x float> @llvm.pow.v4f32(<4 x float> %a, <4 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "pow",
  "ty": "<4 x float>",
  "variant": "binopconstsplat",
  "codesize": 16,
  "thru": 52,
  "lat": 52,
  "sizelat": 52,
  "size": 29,
  "gisize": 31,
  "extrasize": 0,
  "asm": "sub sp, sp, #48\nstr x30, [sp, #32]                  // 8-byte Folded Spill\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nmov s0, v0.s[1]\nfmov s1, #7.00000000\nbl powf\nfmov s1, #7.00000000\nstr q0, [sp]                        // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nbl powf\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v0.s[1], v1.s[0]\nfmov s1, #7.00000000\nstr q0, [sp]                        // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov s0, v0.s[2]\nbl powf\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v1.s[2], v0.s[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov s0, v0.s[3]\nstr q1, [sp]                        // 16-byte Folded Spill\nfmov s1, #7.00000000\nbl powf\nldr q1, [sp]                        // 16-byte Folded Reload\nldr x30, [sp, #32]                  // 8-byte Folded Reload\nmov v1.s[3], v0.s[0]\nmov v0.16b, v1.16b\nadd sp, sp, #48\nret",
  "giasm": "sub sp, sp, #80\nstr d10, [sp, #48]                  // 8-byte Folded Spill\nstp d9, d8, [sp, #56]               // 16-byte Folded Spill\nstr x30, [sp, #72]                  // 8-byte Folded Spill\nfmov s1, #7.00000000\nmov s8, v0.s[1]\nmov s9, v0.s[2]\nmov s10, v0.s[3]\nbl powf\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfmov s0, s8\nbl powf\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfmov s0, s9\nbl powf\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s1, #7.00000000\nfmov s0, s10\nbl powf\nldp q2, q1, [sp, #16]               // 32-byte Folded Reload\nldr x30, [sp, #72]                  // 8-byte Folded Reload\nldp d9, d8, [sp, #56]               // 16-byte Folded Reload\nldr d10, [sp, #48]                  // 8-byte Folded Reload\nmov v1.s[1], v2.s[0]\nldr q2, [sp]                        // 16-byte Folded Reload\nmov v1.s[2], v2.s[0]\nmov v1.s[3], v0.s[0]\nmov v0.16b, v1.16b\nadd sp, sp, #80\nret",
  "ll": "define <4 x float> @test(<4 x float> %a) {\n  %r = call <4 x float> @llvm.pow(<4 x float> %a, <4 x float> <float 7.0, float 7.0, float 7.0, float 7.0>)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 16 for instruction:   %r = call <4 x float> @llvm.pow.v4f32(<4 x float> %a, <4 x float> splat (float 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "pow",
  "ty": "<8 x float>",
  "variant": "binop",
  "codesize": 44,
  "thru": 116,
  "lat": 116,
  "sizelat": 116,
  "size": 54,
  "gisize": 72,
  "extrasize": 0,
  "asm": "sub sp, sp, #96\nstr x30, [sp, #80]                  // 8-byte Folded Spill\nstp q0, q2, [sp]                    // 32-byte Folded Spill\nmov s0, v0.s[1]\nstp q1, q3, [sp, #32]               // 32-byte Folded Spill\nmov s1, v2.s[1]\nbl powf\nstr q0, [sp, #64]                   // 16-byte Folded Spill\nldp q0, q1, [sp]                    // 32-byte Folded Reload\nbl powf\nldr q1, [sp, #64]                   // 16-byte Folded Reload\nmov v0.s[1], v1.s[0]\nstr q0, [sp, #64]                   // 16-byte Folded Spill\nldp q0, q1, [sp]                    // 32-byte Folded Reload\nmov s0, v0.s[2]\nmov s1, v1.s[2]\nbl powf\nldr q1, [sp, #64]                   // 16-byte Folded Reload\nmov v1.s[2], v0.s[0]\nstr q1, [sp, #64]                   // 16-byte Folded Spill\nldp q0, q1, [sp]                    // 32-byte Folded Reload\nmov s0, v0.s[3]\nmov s1, v1.s[3]\nbl powf\nldr q1, [sp, #64]                   // 16-byte Folded Reload\nmov v1.s[3], v0.s[0]\nstr q1, [sp, #64]                   // 16-byte Folded Spill\nldp q0, q1, [sp, #32]               // 32-byte Folded Reload\nmov s0, v0.s[1]\nmov s1, v1.s[1]\nbl powf\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldp q0, q1, [sp, #32]               // 32-byte Folded Reload\nbl powf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v0.s[1], v1.s[0]\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldp q0, q1, [sp, #32]               // 32-byte Folded Reload\nmov s0, v0.s[2]\nmov s1, v1.s[2]\nbl powf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.s[2], v0.s[0]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nldp q0, q1, [sp, #32]               // 32-byte Folded Reload\nmov s0, v0.s[3]\nmov s1, v1.s[3]\nbl powf\nfmov s2, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nldr q0, [sp, #64]                   // 16-byte Folded Reload\nldr x30, [sp, #80]                  // 8-byte Folded Reload\nmov v1.s[3], v2.s[0]\nadd sp, sp, #96\nret",
  "giasm": "sub sp, sp, #208\nstp d15, d14, [sp, #128]            // 16-byte Folded Spill\nstp d13, d12, [sp, #144]            // 16-byte Folded Spill\nstp d11, d10, [sp, #160]            // 16-byte Folded Spill\nstp d9, d8, [sp, #176]              // 16-byte Folded Spill\nstr x30, [sp, #192]                 // 8-byte Folded Spill\nmov v4.16b, v1.16b\nmov v1.16b, v2.16b\nmov s8, v0.s[1]\nmov s9, v0.s[2]\nmov s10, v0.s[3]\nmov s12, v3.s[1]\nmov s11, v3.s[2]\nmov s2, v4.s[1]\nstp q3, q4, [sp]                    // 32-byte Folded Spill\nmov s5, v4.s[3]\nmov s14, v1.s[1]\nmov s15, v1.s[2]\nmov s13, v1.s[3]\nstr s2, [sp, #48]                   // 4-byte Folded Spill\nmov s2, v4.s[2]\nstr s2, [sp, #112]                  // 4-byte Folded Spill\nmov s2, v3.s[3]\nstp s2, s5, [sp, #200]              // 8-byte Folded Spill\nbl powf\nstr q0, [sp, #96]                   // 16-byte Folded Spill\nfmov s1, s14\nfmov s0, s8\nbl powf\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, s15\nfmov s0, s9\nbl powf\nstr q0, [sp, #80]                   // 16-byte Folded Spill\nfmov s1, s13\nfmov s0, s10\nbl powf\nstr q0, [sp, #64]                   // 16-byte Folded Spill\nldp q1, q0, [sp]                    // 32-byte Folded Reload\nbl powf\nfmov s1, s12\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr s0, [sp, #48]                   // 4-byte Folded Reload\nbl powf\nfmov s1, s11\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nldr s0, [sp, #112]                  // 4-byte Folded Reload\nbl powf\nstr q0, [sp, #112]                  // 16-byte Folded Spill\nldp s1, s0, [sp, #200]              // 8-byte Folded Reload\nbl powf\nldp q3, q2, [sp, #16]               // 32-byte Folded Reload\nldr q1, [sp, #96]                   // 16-byte Folded Reload\nldp d9, d8, [sp, #176]              // 16-byte Folded Reload\nldr x30, [sp, #192]                 // 8-byte Folded Reload\nldp d11, d10, [sp, #160]            // 16-byte Folded Reload\nmov v1.s[1], v2.s[0]\nldr q2, [sp, #48]                   // 16-byte Folded Reload\nldp d13, d12, [sp, #144]            // 16-byte Folded Reload\nmov v3.s[1], v2.s[0]\nldr q2, [sp, #80]                   // 16-byte Folded Reload\nldp d15, d14, [sp, #128]            // 16-byte Folded Reload\nmov v1.s[2], v2.s[0]\nldr q2, [sp, #112]                  // 16-byte Folded Reload\nmov v3.s[2], v2.s[0]\nldr q2, [sp, #64]                   // 16-byte Folded Reload\nmov v1.s[3], v2.s[0]\nmov v3.s[3], v0.s[0]\nmov v2.16b, v1.16b\nmov v1.16b, v3.16b\nmov v0.16b, v2.16b\nadd sp, sp, #208\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, <8 x float> %b) {\n  %r = call <8 x float> @llvm.pow(<8 x float> %a, <8 x float> %b)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 44 for instruction:   %r = call <8 x float> @llvm.pow.v8f32(<8 x float> %a, <8 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "pow",
  "ty": "<8 x float>",
  "variant": "binopconst",
  "codesize": 32,
  "thru": 104,
  "lat": 104,
  "sizelat": 104,
  "size": 55,
  "gisize": 62,
  "extrasize": 0,
  "asm": "sub sp, sp, #64\nstr x30, [sp, #48]                  // 8-byte Folded Spill\nstp q0, q1, [sp]                    // 32-byte Folded Spill\nmov s0, v0.s[1]\nfmov s1, #6.00000000\nbl powf\nfmov s1, #7.00000000\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nbl powf\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v0.s[1], v1.s[0]\nfmov s1, #7.00000000\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nmov s0, v0.s[2]\nbl powf\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.s[2], v0.s[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov s0, v0.s[3]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, #6.00000000\nbl powf\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.s[3], v0.s[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov s0, v0.s[1]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, #6.00000000\nbl powf\nfmov s1, #7.00000000\nstr q0, [sp]                        // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nbl powf\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v0.s[1], v1.s[0]\nfmov s1, #7.00000000\nstr q0, [sp]                        // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov s0, v0.s[2]\nbl powf\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v1.s[2], v0.s[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov s0, v0.s[3]\nstr q1, [sp]                        // 16-byte Folded Spill\nfmov s1, #6.00000000\nbl powf\nfmov s2, s0\nldr q1, [sp]                        // 16-byte Folded Reload\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nldr x30, [sp, #48]                  // 8-byte Folded Reload\nmov v1.s[3], v2.s[0]\nadd sp, sp, #64\nret",
  "giasm": "sub sp, sp, #176\nstp d13, d12, [sp, #112]            // 16-byte Folded Spill\nstp d11, d10, [sp, #128]            // 16-byte Folded Spill\nstp d9, d8, [sp, #144]              // 16-byte Folded Spill\nstr x30, [sp, #160]                 // 8-byte Folded Spill\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nmov s11, v1.s[1]\nmov s12, v1.s[2]\nmov s13, v1.s[3]\nfmov s1, #7.00000000\nmov s8, v0.s[1]\nmov s9, v0.s[2]\nmov s10, v0.s[3]\nbl powf\nstr q0, [sp, #96]                   // 16-byte Folded Spill\nfmov s1, #6.00000000\nfmov s0, s8\nbl powf\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfmov s0, s9\nbl powf\nstr q0, [sp, #80]                   // 16-byte Folded Spill\nfmov s1, #6.00000000\nfmov s0, s10\nbl powf\nfmov s1, #7.00000000\nstr q0, [sp, #64]                   // 16-byte Folded Spill\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nbl powf\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, #6.00000000\nfmov s0, s11\nbl powf\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfmov s0, s12\nbl powf\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s1, #6.00000000\nfmov s0, s13\nbl powf\nldp q3, q2, [sp, #32]               // 32-byte Folded Reload\nldr q1, [sp, #96]                   // 16-byte Folded Reload\nldp d9, d8, [sp, #144]              // 16-byte Folded Reload\nldr x30, [sp, #160]                 // 8-byte Folded Reload\nldp d11, d10, [sp, #128]            // 16-byte Folded Reload\nmov v1.s[1], v2.s[0]\nldr q2, [sp, #16]                   // 16-byte Folded Reload\nldp d13, d12, [sp, #112]            // 16-byte Folded Reload\nmov v3.s[1], v2.s[0]\nldr q2, [sp, #80]                   // 16-byte Folded Reload\nmov v1.s[2], v2.s[0]\nldr q2, [sp]                        // 16-byte Folded Reload\nmov v3.s[2], v2.s[0]\nldr q2, [sp, #64]                   // 16-byte Folded Reload\nmov v1.s[3], v2.s[0]\nmov v3.s[3], v0.s[0]\nmov v2.16b, v1.16b\nmov v1.16b, v3.16b\nmov v0.16b, v2.16b\nadd sp, sp, #176\nret",
  "ll": "define <8 x float> @test(<8 x float> %a) {\n  %r = call <8 x float> @llvm.pow(<8 x float> %a, <8 x float> <float 7.0, float 6.0, float 7.0, float 6.0, float 7.0, float 6.0, float 7.0, float 6.0>)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 32 for instruction:   %r = call <8 x float> @llvm.pow.v8f32(<8 x float> %a, <8 x float> <float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00, float 7.000000e+00, float 6.000000e+00>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "pow",
  "ty": "<8 x float>",
  "variant": "binopsplat",
  "codesize": 46,
  "thru": 118,
  "lat": 118,
  "sizelat": 118,
  "size": 58,
  "gisize": 73,
  "extrasize": 0,
  "asm": "sub sp, sp, #64\nstr d8, [sp, #48]                   // 8-byte Folded Spill\nstr x30, [sp, #56]                  // 8-byte Folded Spill\nstp q0, q1, [sp]                    // 32-byte Folded Spill\nmov s0, v0.s[1]\nfmov s1, s2\nfmov s8, s2\nbl powf\nfmov s1, s8\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nbl powf\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v0.s[1], v1.s[0]\nfmov s1, s8\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nmov s0, v0.s[2]\nbl powf\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.s[2], v0.s[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov s0, v0.s[3]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, s8\nbl powf\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.s[3], v0.s[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov s0, v0.s[1]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, s8\nbl powf\nfmov s1, s8\nstr q0, [sp]                        // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nbl powf\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v0.s[1], v1.s[0]\nfmov s1, s8\nstr q0, [sp]                        // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov s0, v0.s[2]\nbl powf\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v1.s[2], v0.s[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov s0, v0.s[3]\nstr q1, [sp]                        // 16-byte Folded Spill\nfmov s1, s8\nbl powf\nfmov s2, s0\nldr q1, [sp]                        // 16-byte Folded Reload\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nldr x30, [sp, #56]                  // 8-byte Folded Reload\nldr d8, [sp, #48]                   // 8-byte Folded Reload\nmov v1.s[3], v2.s[0]\nadd sp, sp, #64\nret",
  "giasm": "sub sp, sp, #208\nstp d15, d14, [sp, #128]            // 16-byte Folded Spill\nstp d13, d12, [sp, #144]            // 16-byte Folded Spill\nstp d11, d10, [sp, #160]            // 16-byte Folded Spill\nstp d9, d8, [sp, #176]              // 16-byte Folded Spill\nstr x30, [sp, #192]                 // 8-byte Folded Spill\nmov v3.16b, v1.16b\ndup v1.4s, v2.s[0]\ndup v4.4s, v2.s[0]\nmov s8, v0.s[1]\nmov s9, v0.s[2]\nmov s10, v0.s[3]\nmov s2, v3.s[1]\nmov s5, v3.s[3]\nstp q4, q3, [sp]                    // 32-byte Folded Spill\nmov s14, v1.s[1]\nmov s15, v1.s[2]\nmov s13, v1.s[3]\nmov s12, v4.s[1]\nmov s11, v4.s[2]\nstr s2, [sp, #48]                   // 4-byte Folded Spill\nmov s2, v3.s[2]\nstr s2, [sp, #112]                  // 4-byte Folded Spill\nmov s2, v4.s[3]\nstp s2, s5, [sp, #200]              // 8-byte Folded Spill\nbl powf\nstr q0, [sp, #96]                   // 16-byte Folded Spill\nfmov s1, s14\nfmov s0, s8\nbl powf\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, s15\nfmov s0, s9\nbl powf\nstr q0, [sp, #80]                   // 16-byte Folded Spill\nfmov s1, s13\nfmov s0, s10\nbl powf\nstr q0, [sp, #64]                   // 16-byte Folded Spill\nldp q1, q0, [sp]                    // 32-byte Folded Reload\nbl powf\nfmov s1, s12\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr s0, [sp, #48]                   // 4-byte Folded Reload\nbl powf\nfmov s1, s11\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nldr s0, [sp, #112]                  // 4-byte Folded Reload\nbl powf\nstr q0, [sp, #112]                  // 16-byte Folded Spill\nldp s1, s0, [sp, #200]              // 8-byte Folded Reload\nbl powf\nldp q3, q2, [sp, #16]               // 32-byte Folded Reload\nldr q1, [sp, #96]                   // 16-byte Folded Reload\nldp d9, d8, [sp, #176]              // 16-byte Folded Reload\nldr x30, [sp, #192]                 // 8-byte Folded Reload\nldp d11, d10, [sp, #160]            // 16-byte Folded Reload\nmov v1.s[1], v2.s[0]\nldr q2, [sp, #48]                   // 16-byte Folded Reload\nldp d13, d12, [sp, #144]            // 16-byte Folded Reload\nmov v3.s[1], v2.s[0]\nldr q2, [sp, #80]                   // 16-byte Folded Reload\nldp d15, d14, [sp, #128]            // 16-byte Folded Reload\nmov v1.s[2], v2.s[0]\nldr q2, [sp, #112]                  // 16-byte Folded Reload\nmov v3.s[2], v2.s[0]\nldr q2, [sp, #64]                   // 16-byte Folded Reload\nmov v1.s[3], v2.s[0]\nmov v3.s[3], v0.s[0]\nmov v2.16b, v1.16b\nmov v1.16b, v3.16b\nmov v0.16b, v2.16b\nadd sp, sp, #208\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, float %bs) {\n  %i = insertelement <8 x float> poison, float %bs, i64 0\n  %b = shufflevector <8 x float> %i, <8 x float> poison, <8 x i32> zeroinitializer\n  %r = call <8 x float> @llvm.pow(<8 x float> %a, <8 x float> %b)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <8 x float> poison, float %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <8 x float> %i, <8 x float> poison, <8 x i32> zeroinitializer\nCost Model: Found an estimated cost of 44 for instruction:   %r = call <8 x float> @llvm.pow.v8f32(<8 x float> %a, <8 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "pow",
  "ty": "<8 x float>",
  "variant": "binopconstsplat",
  "codesize": 32,
  "thru": 104,
  "lat": 104,
  "sizelat": 104,
  "size": 55,
  "gisize": 62,
  "extrasize": 0,
  "asm": "sub sp, sp, #64\nstr x30, [sp, #48]                  // 8-byte Folded Spill\nstp q0, q1, [sp]                    // 32-byte Folded Spill\nmov s0, v0.s[1]\nfmov s1, #7.00000000\nbl powf\nfmov s1, #7.00000000\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nbl powf\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v0.s[1], v1.s[0]\nfmov s1, #7.00000000\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nmov s0, v0.s[2]\nbl powf\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.s[2], v0.s[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov s0, v0.s[3]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nbl powf\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.s[3], v0.s[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov s0, v0.s[1]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nbl powf\nfmov s1, #7.00000000\nstr q0, [sp]                        // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nbl powf\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v0.s[1], v1.s[0]\nfmov s1, #7.00000000\nstr q0, [sp]                        // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov s0, v0.s[2]\nbl powf\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v1.s[2], v0.s[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov s0, v0.s[3]\nstr q1, [sp]                        // 16-byte Folded Spill\nfmov s1, #7.00000000\nbl powf\nfmov s2, s0\nldr q1, [sp]                        // 16-byte Folded Reload\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nldr x30, [sp, #48]                  // 8-byte Folded Reload\nmov v1.s[3], v2.s[0]\nadd sp, sp, #64\nret",
  "giasm": "sub sp, sp, #176\nstp d13, d12, [sp, #112]            // 16-byte Folded Spill\nstp d11, d10, [sp, #128]            // 16-byte Folded Spill\nstp d9, d8, [sp, #144]              // 16-byte Folded Spill\nstr x30, [sp, #160]                 // 8-byte Folded Spill\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nmov s11, v1.s[1]\nmov s12, v1.s[2]\nmov s13, v1.s[3]\nfmov s1, #7.00000000\nmov s8, v0.s[1]\nmov s9, v0.s[2]\nmov s10, v0.s[3]\nbl powf\nstr q0, [sp, #96]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfmov s0, s8\nbl powf\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfmov s0, s9\nbl powf\nstr q0, [sp, #80]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfmov s0, s10\nbl powf\nfmov s1, #7.00000000\nstr q0, [sp, #64]                   // 16-byte Folded Spill\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nbl powf\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfmov s0, s11\nbl powf\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, #7.00000000\nfmov s0, s12\nbl powf\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s1, #7.00000000\nfmov s0, s13\nbl powf\nldp q3, q2, [sp, #32]               // 32-byte Folded Reload\nldr q1, [sp, #96]                   // 16-byte Folded Reload\nldp d9, d8, [sp, #144]              // 16-byte Folded Reload\nldr x30, [sp, #160]                 // 8-byte Folded Reload\nldp d11, d10, [sp, #128]            // 16-byte Folded Reload\nmov v1.s[1], v2.s[0]\nldr q2, [sp, #16]                   // 16-byte Folded Reload\nldp d13, d12, [sp, #112]            // 16-byte Folded Reload\nmov v3.s[1], v2.s[0]\nldr q2, [sp, #80]                   // 16-byte Folded Reload\nmov v1.s[2], v2.s[0]\nldr q2, [sp]                        // 16-byte Folded Reload\nmov v3.s[2], v2.s[0]\nldr q2, [sp, #64]                   // 16-byte Folded Reload\nmov v1.s[3], v2.s[0]\nmov v3.s[3], v0.s[0]\nmov v2.16b, v1.16b\nmov v1.16b, v3.16b\nmov v0.16b, v2.16b\nadd sp, sp, #176\nret",
  "ll": "define <8 x float> @test(<8 x float> %a) {\n  %r = call <8 x float> @llvm.pow(<8 x float> %a, <8 x float> <float 7.0, float 7.0, float 7.0, float 7.0, float 7.0, float 7.0, float 7.0, float 7.0>)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 32 for instruction:   %r = call <8 x float> @llvm.pow.v8f32(<8 x float> %a, <8 x float> splat (float 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "pow",
  "ty": "<2 x double>",
  "variant": "binop",
  "codesize": 8,
  "thru": 26,
  "lat": 26,
  "sizelat": 26,
  "size": 13,
  "gisize": 16,
  "extrasize": 0,
  "asm": "sub sp, sp, #64\nstr x30, [sp, #48]                  // 8-byte Folded Spill\nstp q0, q1, [sp]                    // 32-byte Folded Spill\nmov d0, v0.d[1]\nmov d1, v1.d[1]\nbl pow\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldp q0, q1, [sp]                    // 32-byte Folded Reload\nbl pow\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nldr x30, [sp, #48]                  // 8-byte Folded Reload\nmov v0.d[1], v1.d[0]\nadd sp, sp, #64\nret",
  "giasm": "sub sp, sp, #48\nstp d9, d8, [sp, #16]               // 16-byte Folded Spill\nstr x30, [sp, #32]                  // 8-byte Folded Spill\nmov d8, v0.d[1]\nmov d9, v1.d[1]\nbl pow\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov d1, d9\nfmov d0, d8\nbl pow\nldr q1, [sp]                        // 16-byte Folded Reload\nldp d9, d8, [sp, #16]               // 16-byte Folded Reload\nldr x30, [sp, #32]                  // 8-byte Folded Reload\nmov v1.d[1], v0.d[0]\nmov v0.16b, v1.16b\nadd sp, sp, #48\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, <2 x double> %b) {\n  %r = call <2 x double> @llvm.pow(<2 x double> %a, <2 x double> %b)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 8 for instruction:   %r = call <2 x double> @llvm.pow.v2f64(<2 x double> %a, <2 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "pow",
  "ty": "<2 x double>",
  "variant": "binopconst",
  "codesize": 6,
  "thru": 24,
  "lat": 24,
  "sizelat": 24,
  "size": 14,
  "gisize": 16,
  "extrasize": 0,
  "asm": "sub sp, sp, #48\nstr x30, [sp, #32]                  // 8-byte Folded Spill\nstr q0, [sp]                        // 16-byte Folded Spill\nmov d0, v0.d[1]\nfmov d1, #6.00000000\nbl pow\nfmov d1, #7.00000000\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nbl pow\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nldr x30, [sp, #32]                  // 8-byte Folded Reload\nmov v0.d[1], v1.d[0]\nadd sp, sp, #48\nret",
  "giasm": "sub sp, sp, #32\nstr d8, [sp, #16]                   // 8-byte Folded Spill\nstr x30, [sp, #24]                  // 8-byte Folded Spill\nfmov d1, #7.00000000\nmov d8, v0.d[1]\nbl pow\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov d1, #6.00000000\nfmov d0, d8\nbl pow\nldr q1, [sp]                        // 16-byte Folded Reload\nldr x30, [sp, #24]                  // 8-byte Folded Reload\nldr d8, [sp, #16]                   // 8-byte Folded Reload\nmov v1.d[1], v0.d[0]\nmov v0.16b, v1.16b\nadd sp, sp, #32\nret",
  "ll": "define <2 x double> @test(<2 x double> %a) {\n  %r = call <2 x double> @llvm.pow(<2 x double> %a, <2 x double> <double 7.0, double 6.0>)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 6 for instruction:   %r = call <2 x double> @llvm.pow.v2f64(<2 x double> %a, <2 x double> <double 7.000000e+00, double 6.000000e+00>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "pow",
  "ty": "<2 x double>",
  "variant": "binopsplat",
  "codesize": 9,
  "thru": 27,
  "lat": 27,
  "sizelat": 27,
  "size": 16,
  "gisize": 17,
  "extrasize": 0,
  "asm": "sub sp, sp, #48\nstr d8, [sp, #32]                   // 8-byte Folded Spill\nstr x30, [sp, #40]                  // 8-byte Folded Spill\nstr q0, [sp]                        // 16-byte Folded Spill\nmov d0, v0.d[1]\nfmov d8, d1\nbl pow\nfmov d1, d8\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nbl pow\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nldr x30, [sp, #40]                  // 8-byte Folded Reload\nldr d8, [sp, #32]                   // 8-byte Folded Reload\nmov v0.d[1], v1.d[0]\nadd sp, sp, #48\nret",
  "giasm": "sub sp, sp, #48\nstp d9, d8, [sp, #16]               // 16-byte Folded Spill\nstr x30, [sp, #32]                  // 8-byte Folded Spill\nmov d8, v0.d[1]\ndup v1.2d, v1.d[0]\nmov d9, v1.d[1]\nbl pow\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov d1, d9\nfmov d0, d8\nbl pow\nldr q1, [sp]                        // 16-byte Folded Reload\nldp d9, d8, [sp, #16]               // 16-byte Folded Reload\nldr x30, [sp, #32]                  // 8-byte Folded Reload\nmov v1.d[1], v0.d[0]\nmov v0.16b, v1.16b\nadd sp, sp, #48\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, double %bs) {\n  %i = insertelement <2 x double> poison, double %bs, i64 0\n  %b = shufflevector <2 x double> %i, <2 x double> poison, <2 x i32> zeroinitializer\n  %r = call <2 x double> @llvm.pow(<2 x double> %a, <2 x double> %b)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <2 x double> poison, double %bs, i64 0\nCost Model: Found an estimated cost of 1 for instruction:   %b = shufflevector <2 x double> %i, <2 x double> poison, <2 x i32> zeroinitializer\nCost Model: Found an estimated cost of 8 for instruction:   %r = call <2 x double> @llvm.pow.v2f64(<2 x double> %a, <2 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "pow",
  "ty": "<2 x double>",
  "variant": "binopconstsplat",
  "codesize": 6,
  "thru": 24,
  "lat": 24,
  "sizelat": 24,
  "size": 14,
  "gisize": 16,
  "extrasize": 0,
  "asm": "sub sp, sp, #48\nstr x30, [sp, #32]                  // 8-byte Folded Spill\nstr q0, [sp]                        // 16-byte Folded Spill\nmov d0, v0.d[1]\nfmov d1, #7.00000000\nbl pow\nfmov d1, #7.00000000\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nbl pow\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nldr x30, [sp, #32]                  // 8-byte Folded Reload\nmov v0.d[1], v1.d[0]\nadd sp, sp, #48\nret",
  "giasm": "sub sp, sp, #32\nstr d8, [sp, #16]                   // 8-byte Folded Spill\nstr x30, [sp, #24]                  // 8-byte Folded Spill\nfmov d1, #7.00000000\nmov d8, v0.d[1]\nbl pow\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov d1, #7.00000000\nfmov d0, d8\nbl pow\nldr q1, [sp]                        // 16-byte Folded Reload\nldr x30, [sp, #24]                  // 8-byte Folded Reload\nldr d8, [sp, #16]                   // 8-byte Folded Reload\nmov v1.d[1], v0.d[0]\nmov v0.16b, v1.16b\nadd sp, sp, #32\nret",
  "ll": "define <2 x double> @test(<2 x double> %a) {\n  %r = call <2 x double> @llvm.pow(<2 x double> %a, <2 x double> <double 7.0, double 7.0>)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 6 for instruction:   %r = call <2 x double> @llvm.pow.v2f64(<2 x double> %a, <2 x double> splat (double 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "pow",
  "ty": "<4 x double>",
  "variant": "binop",
  "codesize": 16,
  "thru": 52,
  "lat": 52,
  "sizelat": 52,
  "size": 25,
  "gisize": 34,
  "extrasize": 0,
  "asm": "sub sp, sp, #96\nstr x30, [sp, #80]                  // 8-byte Folded Spill\nstp q0, q2, [sp]                    // 32-byte Folded Spill\nmov d0, v0.d[1]\nstp q1, q3, [sp, #48]               // 32-byte Folded Spill\nmov d1, v2.d[1]\nbl pow\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldp q0, q1, [sp]                    // 32-byte Folded Reload\nbl pow\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v0.d[1], v1.d[0]\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldp q0, q1, [sp, #48]               // 32-byte Folded Reload\nmov d0, v0.d[1]\nmov d1, v1.d[1]\nbl pow\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldp q0, q1, [sp, #48]               // 32-byte Folded Reload\nbl pow\nfmov d1, d0\nldp q2, q0, [sp, #16]               // 32-byte Folded Reload\nldr x30, [sp, #80]                  // 8-byte Folded Reload\nmov v1.d[1], v2.d[0]\nadd sp, sp, #96\nret",
  "giasm": "sub sp, sp, #112\nstp d11, d10, [sp, #64]             // 16-byte Folded Spill\nstp d9, d8, [sp, #80]               // 16-byte Folded Spill\nstr x30, [sp, #96]                  // 8-byte Folded Spill\nmov v4.16b, v1.16b\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nmov v1.16b, v2.16b\nstr q3, [sp]                        // 16-byte Folded Spill\nmov d8, v0.d[1]\nmov d10, v2.d[1]\nmov d11, v3.d[1]\nmov d9, v4.d[1]\nbl pow\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nfmov d1, d10\nfmov d0, d8\nbl pow\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q1, [sp]                        // 16-byte Folded Reload\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nbl pow\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov d1, d11\nfmov d0, d9\nbl pow\nldp q3, q1, [sp, #16]               // 32-byte Folded Reload\nldr q2, [sp, #48]                   // 16-byte Folded Reload\nldp d9, d8, [sp, #80]               // 16-byte Folded Reload\nldr x30, [sp, #96]                  // 8-byte Folded Reload\nldp d11, d10, [sp, #64]             // 16-byte Folded Reload\nmov v2.d[1], v3.d[0]\nmov v1.d[1], v0.d[0]\nmov v0.16b, v2.16b\nadd sp, sp, #112\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, <4 x double> %b) {\n  %r = call <4 x double> @llvm.pow(<4 x double> %a, <4 x double> %b)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 16 for instruction:   %r = call <4 x double> @llvm.pow.v4f64(<4 x double> %a, <4 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "pow",
  "ty": "<4 x double>",
  "variant": "binopconst",
  "codesize": 12,
  "thru": 48,
  "lat": 48,
  "sizelat": 48,
  "size": 27,
  "gisize": 28,
  "extrasize": 0,
  "asm": "sub sp, sp, #64\nstr x30, [sp, #48]                  // 8-byte Folded Spill\nstr q0, [sp]                        // 16-byte Folded Spill\nmov d0, v0.d[1]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov d1, #6.00000000\nbl pow\nfmov d1, #7.00000000\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nbl pow\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v0.d[1], v1.d[0]\nfmov d1, #6.00000000\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nmov d0, v0.d[1]\nbl pow\nfmov d1, #7.00000000\nstr q0, [sp]                        // 16-byte Folded Spill\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nbl pow\nfmov d1, d0\nldp q2, q0, [sp]                    // 32-byte Folded Reload\nldr x30, [sp, #48]                  // 8-byte Folded Reload\nmov v1.d[1], v2.d[0]\nadd sp, sp, #64\nret",
  "giasm": "sub sp, sp, #80\nstp d9, d8, [sp, #48]               // 16-byte Folded Spill\nstr x30, [sp, #64]                  // 8-byte Folded Spill\nstr q1, [sp]                        // 16-byte Folded Spill\nmov d9, v1.d[1]\nfmov d1, #7.00000000\nmov d8, v0.d[1]\nbl pow\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov d1, #6.00000000\nfmov d0, d8\nbl pow\nfmov d1, #7.00000000\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nbl pow\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov d1, #6.00000000\nfmov d0, d9\nbl pow\nldp q2, q3, [sp, #16]               // 32-byte Folded Reload\nldr q1, [sp]                        // 16-byte Folded Reload\nldp d9, d8, [sp, #48]               // 16-byte Folded Reload\nldr x30, [sp, #64]                  // 8-byte Folded Reload\nmov v1.d[1], v0.d[0]\nmov v3.d[1], v2.d[0]\nmov v0.16b, v3.16b\nadd sp, sp, #80\nret",
  "ll": "define <4 x double> @test(<4 x double> %a) {\n  %r = call <4 x double> @llvm.pow(<4 x double> %a, <4 x double> <double 7.0, double 6.0, double 7.0, double 6.0>)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 12 for instruction:   %r = call <4 x double> @llvm.pow.v4f64(<4 x double> %a, <4 x double> <double 7.000000e+00, double 6.000000e+00, double 7.000000e+00, double 6.000000e+00>)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "pow",
  "ty": "<4 x double>",
  "variant": "binopsplat",
  "codesize": 18,
  "thru": 54,
  "lat": 54,
  "sizelat": 54,
  "size": 30,
  "gisize": 35,
  "extrasize": 0,
  "asm": "sub sp, sp, #64\nstr d8, [sp, #48]                   // 8-byte Folded Spill\nstr x30, [sp, #56]                  // 8-byte Folded Spill\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov d1, d2\nfmov d8, d2\nstr q0, [sp]                        // 16-byte Folded Spill\nmov d0, v0.d[1]\nbl pow\nfmov d1, d8\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nbl pow\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v0.d[1], v1.d[0]\nfmov d1, d8\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nmov d0, v0.d[1]\nbl pow\nfmov d1, d8\nstr q0, [sp]                        // 16-byte Folded Spill\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nbl pow\nfmov d1, d0\nldp q2, q0, [sp]                    // 32-byte Folded Reload\nldr x30, [sp, #56]                  // 8-byte Folded Reload\nldr d8, [sp, #48]                   // 8-byte Folded Reload\nmov v1.d[1], v2.d[0]\nadd sp, sp, #64\nret",
  "giasm": "sub sp, sp, #112\nstp d11, d10, [sp, #64]             // 16-byte Folded Spill\nstp d9, d8, [sp, #80]               // 16-byte Folded Spill\nstr x30, [sp, #96]                  // 8-byte Folded Spill\nmov v3.16b, v1.16b\nstr q1, [sp, #32]                   // 16-byte Folded Spill\ndup v1.2d, v2.d[0]\ndup v2.2d, v2.d[0]\nmov d8, v0.d[1]\nmov d9, v3.d[1]\nmov d10, v1.d[1]\nstr q2, [sp]                        // 16-byte Folded Spill\nmov d11, v2.d[1]\nbl pow\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nfmov d1, d10\nfmov d0, d8\nbl pow\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q1, [sp]                        // 16-byte Folded Reload\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nbl pow\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov d1, d11\nfmov d0, d9\nbl pow\nldp q3, q1, [sp, #16]               // 32-byte Folded Reload\nldr q2, [sp, #48]                   // 16-byte Folded Reload\nldp d9, d8, [sp, #80]               // 16-byte Folded Reload\nldr x30, [sp, #96]                  // 8-byte Folded Reload\nldp d11, d10, [sp, #64]             // 16-byte Folded Reload\nmov v2.d[1], v3.d[0]\nmov v1.d[1], v0.d[0]\nmov v0.16b, v2.16b\nadd sp, sp, #112\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, double %bs) {\n  %i = insertelement <4 x double> poison, double %bs, i64 0\n  %b = shufflevector <4 x double> %i, <4 x double> poison, <4 x i32> zeroinitializer\n  %r = call <4 x double> @llvm.pow(<4 x double> %a, <4 x double> %b)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 0 for instruction:   %i = insertelement <4 x double> poison, double %bs, i64 0\nCost Model: Found an estimated cost of 2 for instruction:   %b = shufflevector <4 x double> %i, <4 x double> poison, <4 x i32> zeroinitializer\nCost Model: Found an estimated cost of 16 for instruction:   %r = call <4 x double> @llvm.pow.v4f64(<4 x double> %a, <4 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "pow",
  "ty": "<4 x double>",
  "variant": "binopconstsplat",
  "codesize": 12,
  "thru": 48,
  "lat": 48,
  "sizelat": 48,
  "size": 27,
  "gisize": 28,
  "extrasize": 0,
  "asm": "sub sp, sp, #64\nstr x30, [sp, #48]                  // 8-byte Folded Spill\nstr q0, [sp]                        // 16-byte Folded Spill\nmov d0, v0.d[1]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfmov d1, #7.00000000\nbl pow\nfmov d1, #7.00000000\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nbl pow\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v0.d[1], v1.d[0]\nfmov d1, #7.00000000\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nmov d0, v0.d[1]\nbl pow\nfmov d1, #7.00000000\nstr q0, [sp]                        // 16-byte Folded Spill\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nbl pow\nfmov d1, d0\nldp q2, q0, [sp]                    // 32-byte Folded Reload\nldr x30, [sp, #48]                  // 8-byte Folded Reload\nmov v1.d[1], v2.d[0]\nadd sp, sp, #64\nret",
  "giasm": "sub sp, sp, #80\nstp d9, d8, [sp, #48]               // 16-byte Folded Spill\nstr x30, [sp, #64]                  // 8-byte Folded Spill\nstr q1, [sp]                        // 16-byte Folded Spill\nmov d9, v1.d[1]\nfmov d1, #7.00000000\nmov d8, v0.d[1]\nbl pow\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov d1, #7.00000000\nfmov d0, d8\nbl pow\nfmov d1, #7.00000000\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nbl pow\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov d1, #7.00000000\nfmov d0, d9\nbl pow\nldp q2, q3, [sp, #16]               // 32-byte Folded Reload\nldr q1, [sp]                        // 16-byte Folded Reload\nldp d9, d8, [sp, #48]               // 16-byte Folded Reload\nldr x30, [sp, #64]                  // 8-byte Folded Reload\nmov v1.d[1], v0.d[0]\nmov v3.d[1], v2.d[0]\nmov v0.16b, v3.16b\nadd sp, sp, #80\nret",
  "ll": "define <4 x double> @test(<4 x double> %a) {\n  %r = call <4 x double> @llvm.pow(<4 x double> %a, <4 x double> <double 7.0, double 7.0, double 7.0, double 7.0>)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 12 for instruction:   %r = call <4 x double> @llvm.pow.v4f64(<4 x double> %a, <4 x double> splat (double 7.000000e+00))\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "fneg",
  "ty": "half",
  "variant": "unop",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fmov w8, s0\neor w8, w8, #0x8000\nfmov s0, w8\nret",
  "giasm": "fmov w8, s0\neor w8, w8, #0xffff8000\nfmov s0, w8\nret",
  "ll": "define half @test(half %a) {\n  %r = fneg half %a\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fneg half %a\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "fneg",
  "ty": "float",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fneg s0, s0\nret",
  "giasm": "fneg s0, s0\nret",
  "ll": "define float @test(float %a) {\n  %r = fneg float %a\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fneg float %a\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "fneg",
  "ty": "double",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fneg d0, d0\nret",
  "giasm": "fneg d0, d0\nret",
  "ll": "define double @test(double %a) {\n  %r = fneg double %a\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fneg double %a\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "fneg",
  "ty": "<4 x half>",
  "variant": "unop",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "movi v1.4h, #128, lsl #8\neor v0.8b, v0.8b, v1.8b\nret",
  "giasm": "movi v1.4h, #128, lsl #8\neor v0.8b, v0.8b, v1.8b\nret",
  "ll": "define <4 x half> @test(<4 x half> %a) {\n  %r = fneg <4 x half> %a\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fneg <4 x half> %a\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "fneg",
  "ty": "<8 x half>",
  "variant": "unop",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "movi v1.8h, #128, lsl #8\neor v0.16b, v0.16b, v1.16b\nret",
  "giasm": "movi v1.8h, #128, lsl #8\neor v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <8 x half> @test(<8 x half> %a) {\n  %r = fneg <8 x half> %a\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fneg <8 x half> %a\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "fneg",
  "ty": "<16 x half>",
  "variant": "unop",
  "codesize": 1,
  "thru": 4,
  "lat": 3,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "movi v2.8h, #128, lsl #8\neor v0.16b, v0.16b, v2.16b\neor v1.16b, v1.16b, v2.16b\nret",
  "giasm": "movi v2.8h, #128, lsl #8\neor v0.16b, v0.16b, v2.16b\neor v1.16b, v1.16b, v2.16b\nret",
  "ll": "define <16 x half> @test(<16 x half> %a) {\n  %r = fneg <16 x half> %a\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fneg <16 x half> %a\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "fneg",
  "ty": "<2 x float>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fneg v0.2s, v0.2s\nret",
  "giasm": "fneg v0.2s, v0.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a) {\n  %r = fneg <2 x float> %a\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fneg <2 x float> %a\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "fneg",
  "ty": "<4 x float>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fneg v0.4s, v0.4s\nret",
  "giasm": "fneg v0.4s, v0.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a) {\n  %r = fneg <4 x float> %a\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fneg <4 x float> %a\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "fneg",
  "ty": "<8 x float>",
  "variant": "unop",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fneg v0.4s, v0.4s\nfneg v1.4s, v1.4s\nret",
  "giasm": "fneg v0.4s, v0.4s\nfneg v1.4s, v1.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a) {\n  %r = fneg <8 x float> %a\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fneg <8 x float> %a\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "fneg",
  "ty": "<2 x double>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fneg v0.2d, v0.2d\nret",
  "giasm": "fneg v0.2d, v0.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a) {\n  %r = fneg <2 x double> %a\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fneg <2 x double> %a\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "fneg",
  "ty": "<4 x double>",
  "variant": "unop",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fneg v0.2d, v0.2d\nfneg v1.2d, v1.2d\nret",
  "giasm": "fneg v0.2d, v0.2d\nfneg v1.2d, v1.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a) {\n  %r = fneg <4 x double> %a\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fneg <4 x double> %a\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "fabs",
  "ty": "half",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fmov w8, s0\nand w8, w8, #0x7fff\nfmov s0, w8\nret",
  "giasm": "fmov w8, s0\nand w8, w8, #0x7fff\nfmov s0, w8\nret",
  "ll": "define half @test(half %a) {\n  %r = call half @llvm.fabs(half %a)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call half @llvm.fabs.f16(half %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "fabs",
  "ty": "float",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fabs s0, s0\nret",
  "giasm": "fabs s0, s0\nret",
  "ll": "define float @test(float %a) {\n  %r = call float @llvm.fabs(float %a)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call float @llvm.fabs.f32(float %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "fabs",
  "ty": "double",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fabs d0, d0\nret",
  "giasm": "fabs d0, d0\nret",
  "ll": "define double @test(double %a) {\n  %r = call double @llvm.fabs(double %a)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call double @llvm.fabs.f64(double %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "fabs",
  "ty": "<4 x half>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 2,
  "extrasize": 0,
  "asm": "bic v0.4h, #128, lsl #8\nret",
  "giasm": "mvni v1.4h, #128, lsl #8\nand v0.8b, v0.8b, v1.8b\nret",
  "ll": "define <4 x half> @test(<4 x half> %a) {\n  %r = call <4 x half> @llvm.fabs(<4 x half> %a)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x half> @llvm.fabs.v4f16(<4 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "fabs",
  "ty": "<8 x half>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 2,
  "extrasize": 0,
  "asm": "bic v0.8h, #128, lsl #8\nret",
  "giasm": "mvni v1.8h, #128, lsl #8\nand v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <8 x half> @test(<8 x half> %a) {\n  %r = call <8 x half> @llvm.fabs(<8 x half> %a)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <8 x half> @llvm.fabs.v8f16(<8 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "fabs",
  "ty": "<16 x half>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "bic v0.8h, #128, lsl #8\nbic v1.8h, #128, lsl #8\nret",
  "giasm": "mvni v2.8h, #128, lsl #8\nand v0.16b, v0.16b, v2.16b\nand v1.16b, v1.16b, v2.16b\nret",
  "ll": "define <16 x half> @test(<16 x half> %a) {\n  %r = call <16 x half> @llvm.fabs(<16 x half> %a)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <16 x half> @llvm.fabs.v16f16(<16 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "fabs",
  "ty": "<2 x float>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fabs v0.2s, v0.2s\nret",
  "giasm": "fabs v0.2s, v0.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a) {\n  %r = call <2 x float> @llvm.fabs(<2 x float> %a)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x float> @llvm.fabs.v2f32(<2 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "fabs",
  "ty": "<4 x float>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fabs v0.4s, v0.4s\nret",
  "giasm": "fabs v0.4s, v0.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a) {\n  %r = call <4 x float> @llvm.fabs(<4 x float> %a)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x float> @llvm.fabs.v4f32(<4 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "fabs",
  "ty": "<8 x float>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fabs v0.4s, v0.4s\nfabs v1.4s, v1.4s\nret",
  "giasm": "fabs v0.4s, v0.4s\nfabs v1.4s, v1.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a) {\n  %r = call <8 x float> @llvm.fabs(<8 x float> %a)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x float> @llvm.fabs.v8f32(<8 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "fabs",
  "ty": "<2 x double>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fabs v0.2d, v0.2d\nret",
  "giasm": "fabs v0.2d, v0.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a) {\n  %r = call <2 x double> @llvm.fabs(<2 x double> %a)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x double> @llvm.fabs.v2f64(<2 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "fabs",
  "ty": "<4 x double>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fabs v0.2d, v0.2d\nfabs v1.2d, v1.2d\nret",
  "giasm": "fabs v0.2d, v0.2d\nfabs v1.2d, v1.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a) {\n  %r = call <4 x double> @llvm.fabs(<4 x double> %a)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x double> @llvm.fabs.v4f64(<4 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "sqrt",
  "ty": "half",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcvt s0, h0\nfsqrt s0, s0\nfcvt h0, s0\nret",
  "giasm": "fcvt s0, h0\nfsqrt s0, s0\nfcvt h0, s0\nret",
  "ll": "define half @test(half %a) {\n  %r = call half @llvm.sqrt(half %a)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call half @llvm.sqrt.f16(half %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "sqrt",
  "ty": "float",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fsqrt s0, s0\nret",
  "giasm": "fsqrt s0, s0\nret",
  "ll": "define float @test(float %a) {\n  %r = call float @llvm.sqrt(float %a)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call float @llvm.sqrt.f32(float %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "sqrt",
  "ty": "double",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fsqrt d0, d0\nret",
  "giasm": "fsqrt d0, d0\nret",
  "ll": "define double @test(double %a) {\n  %r = call double @llvm.sqrt(double %a)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call double @llvm.sqrt.f64(double %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "sqrt",
  "ty": "<4 x half>",
  "variant": "unop",
  "codesize": 16,
  "thru": 16,
  "lat": 16,
  "sizelat": 16,
  "size": 18,
  "gisize": 3,
  "extrasize": 0,
  "asm": "mov h1, v0.h[1]\nfcvt s2, h0\nmov h3, v0.h[2]\nmov h0, v0.h[3]\nfcvt s1, h1\nfsqrt s2, s2\nfcvt s3, h3\nfcvt s0, h0\nfsqrt s1, s1\nfcvt h1, s1\nfsqrt s3, s3\nfsqrt s4, s0\nfcvt h0, s2\nmov v0.h[1], v1.h[0]\nfcvt h1, s3\nmov v0.h[2], v1.h[0]\nfcvt h1, s4\nmov v0.h[3], v1.h[0]\nret",
  "giasm": "fcvtl v0.4s, v0.4h\nfsqrt v0.4s, v0.4s\nfcvtn v0.4h, v0.4s\nret",
  "ll": "define <4 x half> @test(<4 x half> %a) {\n  %r = call <4 x half> @llvm.sqrt(<4 x half> %a)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 16 for instruction:   %r = call <4 x half> @llvm.sqrt.v4f16(<4 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "sqrt",
  "ty": "<8 x half>",
  "variant": "unop",
  "codesize": 36,
  "thru": 36,
  "lat": 36,
  "sizelat": 36,
  "size": 38,
  "gisize": 6,
  "extrasize": 0,
  "asm": "mov h1, v0.h[1]\nfcvt s2, h0\nmov h3, v0.h[2]\nmov h4, v0.h[3]\nmov h5, v0.h[4]\nmov h6, v0.h[5]\nmov h7, v0.h[6]\nmov h0, v0.h[7]\nfcvt s1, h1\nfsqrt s2, s2\nfcvt s3, h3\nfcvt s4, h4\nfcvt s5, h5\nfcvt s6, h6\nfcvt s7, h7\nfcvt s16, h0\nfcvt h0, s2\nfsqrt s1, s1\nfcvt h1, s1\nmov v0.h[1], v1.h[0]\nfsqrt s3, s3\nfcvt h1, s3\nmov v0.h[2], v1.h[0]\nfsqrt s4, s4\nfcvt h1, s4\nmov v0.h[3], v1.h[0]\nfsqrt s5, s5\nfcvt h1, s5\nmov v0.h[4], v1.h[0]\nfsqrt s6, s6\nfcvt h1, s6\nmov v0.h[5], v1.h[0]\nfsqrt s7, s7\nfcvt h1, s7\nmov v0.h[6], v1.h[0]\nfsqrt s2, s16\nfcvt h1, s2\nmov v0.h[7], v1.h[0]\nret",
  "giasm": "fcvtl v1.4s, v0.4h\nfcvtl2 v0.4s, v0.8h\nfsqrt v1.4s, v1.4s\nfsqrt v2.4s, v0.4s\nfcvtn v0.4h, v1.4s\nfcvtn2 v0.8h, v2.4s\nret",
  "ll": "define <8 x half> @test(<8 x half> %a) {\n  %r = call <8 x half> @llvm.sqrt(<8 x half> %a)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 36 for instruction:   %r = call <8 x half> @llvm.sqrt.v8f16(<8 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "sqrt",
  "ty": "<16 x half>",
  "variant": "unop",
  "codesize": 72,
  "thru": 72,
  "lat": 72,
  "sizelat": 72,
  "size": 76,
  "gisize": 12,
  "extrasize": 0,
  "asm": "mov h2, v0.h[1]\nfcvt s3, h0\nmov h4, v0.h[2]\nmov h5, v0.h[3]\nmov h6, v0.h[4]\nmov h7, v0.h[5]\nmov h16, v0.h[6]\nmov h0, v0.h[7]\nfcvt s2, h2\nfsqrt s3, s3\nfcvt s4, h4\nfcvt s5, h5\nfcvt s6, h6\nfcvt s7, h7\nfcvt s0, h0\nfcvt s16, h16\nfsqrt s17, s0\nmov h0, v1.h[1]\nfcvt s0, h0\nfsqrt s18, s0\nfcvt s0, h1\nfsqrt s19, s0\nmov h0, v1.h[2]\nfcvt s0, h0\nfsqrt s20, s0\nmov h0, v1.h[3]\nfcvt s0, h0\nfsqrt s21, s0\nmov h0, v1.h[4]\nfcvt s0, h0\nfsqrt s2, s2\nfcvt h2, s2\nfsqrt s22, s0\nmov h0, v1.h[5]\nfcvt s0, h0\nfsqrt s4, s4\nfsqrt s5, s5\nfsqrt s23, s0\nmov h0, v1.h[6]\nfcvt s0, h0\nfsqrt s6, s6\nfsqrt s7, s7\nfsqrt s24, s0\nmov h0, v1.h[7]\nfcvt h1, s19\nfcvt s25, h0\nfcvt h0, s3\nfcvt h3, s18\nmov v0.h[1], v2.h[0]\nfcvt h2, s4\nmov v1.h[1], v3.h[0]\nfcvt h3, s20\nmov v0.h[2], v2.h[0]\nfcvt h2, s5\nmov v1.h[2], v3.h[0]\nfcvt h3, s21\nmov v0.h[3], v2.h[0]\nfcvt h2, s6\nmov v1.h[3], v3.h[0]\nfcvt h3, s22\nmov v0.h[4], v2.h[0]\nfcvt h2, s7\nmov v1.h[4], v3.h[0]\nfcvt h3, s23\nmov v0.h[5], v2.h[0]\nmov v1.h[5], v3.h[0]\nfcvt h3, s24\nfsqrt s16, s16\nmov v1.h[6], v3.h[0]\nfcvt h2, s16\nmov v0.h[6], v2.h[0]\nfcvt h2, s17\nfsqrt s18, s25\nmov v0.h[7], v2.h[0]\nfcvt h3, s18\nmov v1.h[7], v3.h[0]\nret",
  "giasm": "fcvtl v2.4s, v0.4h\nfcvtl2 v0.4s, v0.8h\nfsqrt v3.4s, v0.4s\nfcvtl v0.4s, v1.4h\nfsqrt v2.4s, v2.4s\nfsqrt v4.4s, v0.4s\nfcvtl2 v0.4s, v1.8h\nfsqrt v5.4s, v0.4s\nfcvtn v0.4h, v2.4s\nfcvtn v1.4h, v4.4s\nfcvtn2 v0.8h, v3.4s\nfcvtn2 v1.8h, v5.4s\nret",
  "ll": "define <16 x half> @test(<16 x half> %a) {\n  %r = call <16 x half> @llvm.sqrt(<16 x half> %a)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 72 for instruction:   %r = call <16 x half> @llvm.sqrt.v16f16(<16 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "sqrt",
  "ty": "<2 x float>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fsqrt v0.2s, v0.2s\nret",
  "giasm": "fsqrt v0.2s, v0.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a) {\n  %r = call <2 x float> @llvm.sqrt(<2 x float> %a)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x float> @llvm.sqrt.v2f32(<2 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "sqrt",
  "ty": "<4 x float>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fsqrt v0.4s, v0.4s\nret",
  "giasm": "fsqrt v0.4s, v0.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a) {\n  %r = call <4 x float> @llvm.sqrt(<4 x float> %a)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "sqrt",
  "ty": "<8 x float>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fsqrt v0.4s, v0.4s\nfsqrt v1.4s, v1.4s\nret",
  "giasm": "fsqrt v0.4s, v0.4s\nfsqrt v1.4s, v1.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a) {\n  %r = call <8 x float> @llvm.sqrt(<8 x float> %a)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x float> @llvm.sqrt.v8f32(<8 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "sqrt",
  "ty": "<2 x double>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fsqrt v0.2d, v0.2d\nret",
  "giasm": "fsqrt v0.2d, v0.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a) {\n  %r = call <2 x double> @llvm.sqrt(<2 x double> %a)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x double> @llvm.sqrt.v2f64(<2 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "sqrt",
  "ty": "<4 x double>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fsqrt v0.2d, v0.2d\nfsqrt v1.2d, v1.2d\nret",
  "giasm": "fsqrt v0.2d, v0.2d\nfsqrt v1.2d, v1.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a) {\n  %r = call <4 x double> @llvm.sqrt(<4 x double> %a)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x double> @llvm.sqrt.v4f64(<4 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "ceil",
  "ty": "half",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcvt s0, h0\nfrintp s0, s0\nfcvt h0, s0\nret",
  "giasm": "fcvt s0, h0\nfrintp s0, s0\nfcvt h0, s0\nret",
  "ll": "define half @test(half %a) {\n  %r = call half @llvm.ceil(half %a)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call half @llvm.ceil.f16(half %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "ceil",
  "ty": "float",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintp s0, s0\nret",
  "giasm": "frintp s0, s0\nret",
  "ll": "define float @test(float %a) {\n  %r = call float @llvm.ceil(float %a)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call float @llvm.ceil.f32(float %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "ceil",
  "ty": "double",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintp d0, d0\nret",
  "giasm": "frintp d0, d0\nret",
  "ll": "define double @test(double %a) {\n  %r = call double @llvm.ceil(double %a)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call double @llvm.ceil.f64(double %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "ceil",
  "ty": "<4 x half>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcvtl v0.4s, v0.4h\nfrintp v0.4s, v0.4s\nfcvtn v0.4h, v0.4s\nret",
  "giasm": "fcvtl v0.4s, v0.4h\nfrintp v0.4s, v0.4s\nfcvtn v0.4h, v0.4s\nret",
  "ll": "define <4 x half> @test(<4 x half> %a) {\n  %r = call <4 x half> @llvm.ceil(<4 x half> %a)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x half> @llvm.ceil.v4f16(<4 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "ceil",
  "ty": "<8 x half>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 6,
  "gisize": 6,
  "extrasize": 0,
  "asm": "fcvtl v1.4s, v0.4h\nfcvtl2 v2.4s, v0.8h\nfrintp v1.4s, v1.4s\nfcvtn v0.4h, v1.4s\nfrintp v1.4s, v2.4s\nfcvtn2 v0.8h, v1.4s\nret",
  "giasm": "fcvtl v1.4s, v0.4h\nfcvtl2 v0.4s, v0.8h\nfrintp v1.4s, v1.4s\nfrintp v2.4s, v0.4s\nfcvtn v0.4h, v1.4s\nfcvtn2 v0.8h, v2.4s\nret",
  "ll": "define <8 x half> @test(<8 x half> %a) {\n  %r = call <8 x half> @llvm.ceil(<8 x half> %a)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <8 x half> @llvm.ceil.v8f16(<8 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "ceil",
  "ty": "<16 x half>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 12,
  "gisize": 12,
  "extrasize": 0,
  "asm": "fcvtl v2.4s, v0.4h\nfcvtl v3.4s, v1.4h\nfcvtl2 v4.4s, v0.8h\nfcvtl2 v5.4s, v1.8h\nfrintp v2.4s, v2.4s\nfrintp v1.4s, v3.4s\nfrintp v3.4s, v5.4s\nfcvtn v0.4h, v2.4s\nfrintp v2.4s, v4.4s\nfcvtn v1.4h, v1.4s\nfcvtn2 v0.8h, v2.4s\nfcvtn2 v1.8h, v3.4s\nret",
  "giasm": "fcvtl v2.4s, v0.4h\nfcvtl v3.4s, v1.4h\nfcvtl2 v0.4s, v0.8h\nfcvtl2 v1.4s, v1.8h\nfrintp v2.4s, v2.4s\nfrintp v3.4s, v3.4s\nfrintp v4.4s, v0.4s\nfrintp v5.4s, v1.4s\nfcvtn v0.4h, v2.4s\nfcvtn v1.4h, v3.4s\nfcvtn2 v0.8h, v4.4s\nfcvtn2 v1.8h, v5.4s\nret",
  "ll": "define <16 x half> @test(<16 x half> %a) {\n  %r = call <16 x half> @llvm.ceil(<16 x half> %a)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <16 x half> @llvm.ceil.v16f16(<16 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "ceil",
  "ty": "<2 x float>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintp v0.2s, v0.2s\nret",
  "giasm": "frintp v0.2s, v0.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a) {\n  %r = call <2 x float> @llvm.ceil(<2 x float> %a)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x float> @llvm.ceil.v2f32(<2 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "ceil",
  "ty": "<4 x float>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintp v0.4s, v0.4s\nret",
  "giasm": "frintp v0.4s, v0.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a) {\n  %r = call <4 x float> @llvm.ceil(<4 x float> %a)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x float> @llvm.ceil.v4f32(<4 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "ceil",
  "ty": "<8 x float>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "frintp v0.4s, v0.4s\nfrintp v1.4s, v1.4s\nret",
  "giasm": "frintp v0.4s, v0.4s\nfrintp v1.4s, v1.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a) {\n  %r = call <8 x float> @llvm.ceil(<8 x float> %a)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x float> @llvm.ceil.v8f32(<8 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "ceil",
  "ty": "<2 x double>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintp v0.2d, v0.2d\nret",
  "giasm": "frintp v0.2d, v0.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a) {\n  %r = call <2 x double> @llvm.ceil(<2 x double> %a)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x double> @llvm.ceil.v2f64(<2 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "ceil",
  "ty": "<4 x double>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "frintp v0.2d, v0.2d\nfrintp v1.2d, v1.2d\nret",
  "giasm": "frintp v0.2d, v0.2d\nfrintp v1.2d, v1.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a) {\n  %r = call <4 x double> @llvm.ceil(<4 x double> %a)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x double> @llvm.ceil.v4f64(<4 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "floor",
  "ty": "half",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcvt s0, h0\nfrintm s0, s0\nfcvt h0, s0\nret",
  "giasm": "fcvt s0, h0\nfrintm s0, s0\nfcvt h0, s0\nret",
  "ll": "define half @test(half %a) {\n  %r = call half @llvm.floor(half %a)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call half @llvm.floor.f16(half %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "floor",
  "ty": "float",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintm s0, s0\nret",
  "giasm": "frintm s0, s0\nret",
  "ll": "define float @test(float %a) {\n  %r = call float @llvm.floor(float %a)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call float @llvm.floor.f32(float %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "floor",
  "ty": "double",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintm d0, d0\nret",
  "giasm": "frintm d0, d0\nret",
  "ll": "define double @test(double %a) {\n  %r = call double @llvm.floor(double %a)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call double @llvm.floor.f64(double %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "floor",
  "ty": "<4 x half>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcvtl v0.4s, v0.4h\nfrintm v0.4s, v0.4s\nfcvtn v0.4h, v0.4s\nret",
  "giasm": "fcvtl v0.4s, v0.4h\nfrintm v0.4s, v0.4s\nfcvtn v0.4h, v0.4s\nret",
  "ll": "define <4 x half> @test(<4 x half> %a) {\n  %r = call <4 x half> @llvm.floor(<4 x half> %a)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x half> @llvm.floor.v4f16(<4 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "floor",
  "ty": "<8 x half>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 6,
  "gisize": 6,
  "extrasize": 0,
  "asm": "fcvtl v1.4s, v0.4h\nfcvtl2 v2.4s, v0.8h\nfrintm v1.4s, v1.4s\nfcvtn v0.4h, v1.4s\nfrintm v1.4s, v2.4s\nfcvtn2 v0.8h, v1.4s\nret",
  "giasm": "fcvtl v1.4s, v0.4h\nfcvtl2 v0.4s, v0.8h\nfrintm v1.4s, v1.4s\nfrintm v2.4s, v0.4s\nfcvtn v0.4h, v1.4s\nfcvtn2 v0.8h, v2.4s\nret",
  "ll": "define <8 x half> @test(<8 x half> %a) {\n  %r = call <8 x half> @llvm.floor(<8 x half> %a)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <8 x half> @llvm.floor.v8f16(<8 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "floor",
  "ty": "<16 x half>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 12,
  "gisize": 12,
  "extrasize": 0,
  "asm": "fcvtl v2.4s, v0.4h\nfcvtl v3.4s, v1.4h\nfcvtl2 v4.4s, v0.8h\nfcvtl2 v5.4s, v1.8h\nfrintm v2.4s, v2.4s\nfrintm v1.4s, v3.4s\nfrintm v3.4s, v5.4s\nfcvtn v0.4h, v2.4s\nfrintm v2.4s, v4.4s\nfcvtn v1.4h, v1.4s\nfcvtn2 v0.8h, v2.4s\nfcvtn2 v1.8h, v3.4s\nret",
  "giasm": "fcvtl v2.4s, v0.4h\nfcvtl v3.4s, v1.4h\nfcvtl2 v0.4s, v0.8h\nfcvtl2 v1.4s, v1.8h\nfrintm v2.4s, v2.4s\nfrintm v3.4s, v3.4s\nfrintm v4.4s, v0.4s\nfrintm v5.4s, v1.4s\nfcvtn v0.4h, v2.4s\nfcvtn v1.4h, v3.4s\nfcvtn2 v0.8h, v4.4s\nfcvtn2 v1.8h, v5.4s\nret",
  "ll": "define <16 x half> @test(<16 x half> %a) {\n  %r = call <16 x half> @llvm.floor(<16 x half> %a)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <16 x half> @llvm.floor.v16f16(<16 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "floor",
  "ty": "<2 x float>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintm v0.2s, v0.2s\nret",
  "giasm": "frintm v0.2s, v0.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a) {\n  %r = call <2 x float> @llvm.floor(<2 x float> %a)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x float> @llvm.floor.v2f32(<2 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "floor",
  "ty": "<4 x float>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintm v0.4s, v0.4s\nret",
  "giasm": "frintm v0.4s, v0.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a) {\n  %r = call <4 x float> @llvm.floor(<4 x float> %a)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x float> @llvm.floor.v4f32(<4 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "floor",
  "ty": "<8 x float>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "frintm v0.4s, v0.4s\nfrintm v1.4s, v1.4s\nret",
  "giasm": "frintm v0.4s, v0.4s\nfrintm v1.4s, v1.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a) {\n  %r = call <8 x float> @llvm.floor(<8 x float> %a)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x float> @llvm.floor.v8f32(<8 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "floor",
  "ty": "<2 x double>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintm v0.2d, v0.2d\nret",
  "giasm": "frintm v0.2d, v0.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a) {\n  %r = call <2 x double> @llvm.floor(<2 x double> %a)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x double> @llvm.floor.v2f64(<2 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "floor",
  "ty": "<4 x double>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "frintm v0.2d, v0.2d\nfrintm v1.2d, v1.2d\nret",
  "giasm": "frintm v0.2d, v0.2d\nfrintm v1.2d, v1.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a) {\n  %r = call <4 x double> @llvm.floor(<4 x double> %a)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x double> @llvm.floor.v4f64(<4 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "trunc",
  "ty": "half",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcvt s0, h0\nfrintz s0, s0\nfcvt h0, s0\nret",
  "giasm": "fcvt s0, h0\nfrintz s0, s0\nfcvt h0, s0\nret",
  "ll": "define half @test(half %a) {\n  %r = call half @llvm.trunc(half %a)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call half @llvm.trunc.f16(half %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "trunc",
  "ty": "float",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintz s0, s0\nret",
  "giasm": "frintz s0, s0\nret",
  "ll": "define float @test(float %a) {\n  %r = call float @llvm.trunc(float %a)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call float @llvm.trunc.f32(float %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "trunc",
  "ty": "double",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintz d0, d0\nret",
  "giasm": "frintz d0, d0\nret",
  "ll": "define double @test(double %a) {\n  %r = call double @llvm.trunc(double %a)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call double @llvm.trunc.f64(double %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "trunc",
  "ty": "<4 x half>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcvtl v0.4s, v0.4h\nfrintz v0.4s, v0.4s\nfcvtn v0.4h, v0.4s\nret",
  "giasm": "fcvtl v0.4s, v0.4h\nfrintz v0.4s, v0.4s\nfcvtn v0.4h, v0.4s\nret",
  "ll": "define <4 x half> @test(<4 x half> %a) {\n  %r = call <4 x half> @llvm.trunc(<4 x half> %a)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x half> @llvm.trunc.v4f16(<4 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "trunc",
  "ty": "<8 x half>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 6,
  "gisize": 6,
  "extrasize": 0,
  "asm": "fcvtl v1.4s, v0.4h\nfcvtl2 v2.4s, v0.8h\nfrintz v1.4s, v1.4s\nfcvtn v0.4h, v1.4s\nfrintz v1.4s, v2.4s\nfcvtn2 v0.8h, v1.4s\nret",
  "giasm": "fcvtl v1.4s, v0.4h\nfcvtl2 v0.4s, v0.8h\nfrintz v1.4s, v1.4s\nfrintz v2.4s, v0.4s\nfcvtn v0.4h, v1.4s\nfcvtn2 v0.8h, v2.4s\nret",
  "ll": "define <8 x half> @test(<8 x half> %a) {\n  %r = call <8 x half> @llvm.trunc(<8 x half> %a)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <8 x half> @llvm.trunc.v8f16(<8 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "trunc",
  "ty": "<16 x half>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 12,
  "gisize": 12,
  "extrasize": 0,
  "asm": "fcvtl v2.4s, v0.4h\nfcvtl v3.4s, v1.4h\nfcvtl2 v4.4s, v0.8h\nfcvtl2 v5.4s, v1.8h\nfrintz v2.4s, v2.4s\nfrintz v1.4s, v3.4s\nfrintz v3.4s, v5.4s\nfcvtn v0.4h, v2.4s\nfrintz v2.4s, v4.4s\nfcvtn v1.4h, v1.4s\nfcvtn2 v0.8h, v2.4s\nfcvtn2 v1.8h, v3.4s\nret",
  "giasm": "fcvtl v2.4s, v0.4h\nfcvtl v3.4s, v1.4h\nfcvtl2 v0.4s, v0.8h\nfcvtl2 v1.4s, v1.8h\nfrintz v2.4s, v2.4s\nfrintz v3.4s, v3.4s\nfrintz v4.4s, v0.4s\nfrintz v5.4s, v1.4s\nfcvtn v0.4h, v2.4s\nfcvtn v1.4h, v3.4s\nfcvtn2 v0.8h, v4.4s\nfcvtn2 v1.8h, v5.4s\nret",
  "ll": "define <16 x half> @test(<16 x half> %a) {\n  %r = call <16 x half> @llvm.trunc(<16 x half> %a)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <16 x half> @llvm.trunc.v16f16(<16 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "trunc",
  "ty": "<2 x float>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintz v0.2s, v0.2s\nret",
  "giasm": "frintz v0.2s, v0.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a) {\n  %r = call <2 x float> @llvm.trunc(<2 x float> %a)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x float> @llvm.trunc.v2f32(<2 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "trunc",
  "ty": "<4 x float>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintz v0.4s, v0.4s\nret",
  "giasm": "frintz v0.4s, v0.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a) {\n  %r = call <4 x float> @llvm.trunc(<4 x float> %a)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x float> @llvm.trunc.v4f32(<4 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "trunc",
  "ty": "<8 x float>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "frintz v0.4s, v0.4s\nfrintz v1.4s, v1.4s\nret",
  "giasm": "frintz v0.4s, v0.4s\nfrintz v1.4s, v1.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a) {\n  %r = call <8 x float> @llvm.trunc(<8 x float> %a)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x float> @llvm.trunc.v8f32(<8 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "trunc",
  "ty": "<2 x double>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintz v0.2d, v0.2d\nret",
  "giasm": "frintz v0.2d, v0.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a) {\n  %r = call <2 x double> @llvm.trunc(<2 x double> %a)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x double> @llvm.trunc.v2f64(<2 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "trunc",
  "ty": "<4 x double>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "frintz v0.2d, v0.2d\nfrintz v1.2d, v1.2d\nret",
  "giasm": "frintz v0.2d, v0.2d\nfrintz v1.2d, v1.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a) {\n  %r = call <4 x double> @llvm.trunc(<4 x double> %a)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x double> @llvm.trunc.v4f64(<4 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "rint",
  "ty": "half",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcvt s0, h0\nfrintx s0, s0\nfcvt h0, s0\nret",
  "giasm": "fcvt s0, h0\nfrintx s0, s0\nfcvt h0, s0\nret",
  "ll": "define half @test(half %a) {\n  %r = call half @llvm.rint(half %a)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call half @llvm.rint.f16(half %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "rint",
  "ty": "float",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintx s0, s0\nret",
  "giasm": "frintx s0, s0\nret",
  "ll": "define float @test(float %a) {\n  %r = call float @llvm.rint(float %a)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call float @llvm.rint.f32(float %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "rint",
  "ty": "double",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintx d0, d0\nret",
  "giasm": "frintx d0, d0\nret",
  "ll": "define double @test(double %a) {\n  %r = call double @llvm.rint(double %a)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call double @llvm.rint.f64(double %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "rint",
  "ty": "<4 x half>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcvtl v0.4s, v0.4h\nfrintx v0.4s, v0.4s\nfcvtn v0.4h, v0.4s\nret",
  "giasm": "fcvtl v0.4s, v0.4h\nfrintx v0.4s, v0.4s\nfcvtn v0.4h, v0.4s\nret",
  "ll": "define <4 x half> @test(<4 x half> %a) {\n  %r = call <4 x half> @llvm.rint(<4 x half> %a)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x half> @llvm.rint.v4f16(<4 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "rint",
  "ty": "<8 x half>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 6,
  "gisize": 6,
  "extrasize": 0,
  "asm": "fcvtl v1.4s, v0.4h\nfcvtl2 v2.4s, v0.8h\nfrintx v1.4s, v1.4s\nfcvtn v0.4h, v1.4s\nfrintx v1.4s, v2.4s\nfcvtn2 v0.8h, v1.4s\nret",
  "giasm": "fcvtl v1.4s, v0.4h\nfcvtl2 v0.4s, v0.8h\nfrintx v1.4s, v1.4s\nfrintx v2.4s, v0.4s\nfcvtn v0.4h, v1.4s\nfcvtn2 v0.8h, v2.4s\nret",
  "ll": "define <8 x half> @test(<8 x half> %a) {\n  %r = call <8 x half> @llvm.rint(<8 x half> %a)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <8 x half> @llvm.rint.v8f16(<8 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "rint",
  "ty": "<16 x half>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 12,
  "gisize": 12,
  "extrasize": 0,
  "asm": "fcvtl v2.4s, v0.4h\nfcvtl v3.4s, v1.4h\nfcvtl2 v4.4s, v0.8h\nfcvtl2 v5.4s, v1.8h\nfrintx v2.4s, v2.4s\nfrintx v1.4s, v3.4s\nfrintx v3.4s, v5.4s\nfcvtn v0.4h, v2.4s\nfrintx v2.4s, v4.4s\nfcvtn v1.4h, v1.4s\nfcvtn2 v0.8h, v2.4s\nfcvtn2 v1.8h, v3.4s\nret",
  "giasm": "fcvtl v2.4s, v0.4h\nfcvtl v3.4s, v1.4h\nfcvtl2 v0.4s, v0.8h\nfcvtl2 v1.4s, v1.8h\nfrintx v2.4s, v2.4s\nfrintx v3.4s, v3.4s\nfrintx v4.4s, v0.4s\nfrintx v5.4s, v1.4s\nfcvtn v0.4h, v2.4s\nfcvtn v1.4h, v3.4s\nfcvtn2 v0.8h, v4.4s\nfcvtn2 v1.8h, v5.4s\nret",
  "ll": "define <16 x half> @test(<16 x half> %a) {\n  %r = call <16 x half> @llvm.rint(<16 x half> %a)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <16 x half> @llvm.rint.v16f16(<16 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "rint",
  "ty": "<2 x float>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintx v0.2s, v0.2s\nret",
  "giasm": "frintx v0.2s, v0.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a) {\n  %r = call <2 x float> @llvm.rint(<2 x float> %a)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x float> @llvm.rint.v2f32(<2 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "rint",
  "ty": "<4 x float>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintx v0.4s, v0.4s\nret",
  "giasm": "frintx v0.4s, v0.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a) {\n  %r = call <4 x float> @llvm.rint(<4 x float> %a)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x float> @llvm.rint.v4f32(<4 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "rint",
  "ty": "<8 x float>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "frintx v0.4s, v0.4s\nfrintx v1.4s, v1.4s\nret",
  "giasm": "frintx v0.4s, v0.4s\nfrintx v1.4s, v1.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a) {\n  %r = call <8 x float> @llvm.rint(<8 x float> %a)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x float> @llvm.rint.v8f32(<8 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "rint",
  "ty": "<2 x double>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintx v0.2d, v0.2d\nret",
  "giasm": "frintx v0.2d, v0.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a) {\n  %r = call <2 x double> @llvm.rint(<2 x double> %a)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x double> @llvm.rint.v2f64(<2 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "rint",
  "ty": "<4 x double>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "frintx v0.2d, v0.2d\nfrintx v1.2d, v1.2d\nret",
  "giasm": "frintx v0.2d, v0.2d\nfrintx v1.2d, v1.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a) {\n  %r = call <4 x double> @llvm.rint(<4 x double> %a)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x double> @llvm.rint.v4f64(<4 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "nearbyint",
  "ty": "half",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcvt s0, h0\nfrinti s0, s0\nfcvt h0, s0\nret",
  "giasm": "fcvt s0, h0\nfrinti s0, s0\nfcvt h0, s0\nret",
  "ll": "define half @test(half %a) {\n  %r = call half @llvm.nearbyint(half %a)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call half @llvm.nearbyint.f16(half %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "nearbyint",
  "ty": "float",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frinti s0, s0\nret",
  "giasm": "frinti s0, s0\nret",
  "ll": "define float @test(float %a) {\n  %r = call float @llvm.nearbyint(float %a)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call float @llvm.nearbyint.f32(float %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "nearbyint",
  "ty": "double",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frinti d0, d0\nret",
  "giasm": "frinti d0, d0\nret",
  "ll": "define double @test(double %a) {\n  %r = call double @llvm.nearbyint(double %a)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call double @llvm.nearbyint.f64(double %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "nearbyint",
  "ty": "<4 x half>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcvtl v0.4s, v0.4h\nfrinti v0.4s, v0.4s\nfcvtn v0.4h, v0.4s\nret",
  "giasm": "fcvtl v0.4s, v0.4h\nfrinti v0.4s, v0.4s\nfcvtn v0.4h, v0.4s\nret",
  "ll": "define <4 x half> @test(<4 x half> %a) {\n  %r = call <4 x half> @llvm.nearbyint(<4 x half> %a)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x half> @llvm.nearbyint.v4f16(<4 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "nearbyint",
  "ty": "<8 x half>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 6,
  "gisize": 6,
  "extrasize": 0,
  "asm": "fcvtl v1.4s, v0.4h\nfcvtl2 v2.4s, v0.8h\nfrinti v1.4s, v1.4s\nfcvtn v0.4h, v1.4s\nfrinti v1.4s, v2.4s\nfcvtn2 v0.8h, v1.4s\nret",
  "giasm": "fcvtl v1.4s, v0.4h\nfcvtl2 v0.4s, v0.8h\nfrinti v1.4s, v1.4s\nfrinti v2.4s, v0.4s\nfcvtn v0.4h, v1.4s\nfcvtn2 v0.8h, v2.4s\nret",
  "ll": "define <8 x half> @test(<8 x half> %a) {\n  %r = call <8 x half> @llvm.nearbyint(<8 x half> %a)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <8 x half> @llvm.nearbyint.v8f16(<8 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "nearbyint",
  "ty": "<16 x half>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 12,
  "gisize": 12,
  "extrasize": 0,
  "asm": "fcvtl v2.4s, v0.4h\nfcvtl v3.4s, v1.4h\nfcvtl2 v4.4s, v0.8h\nfcvtl2 v5.4s, v1.8h\nfrinti v2.4s, v2.4s\nfrinti v1.4s, v3.4s\nfrinti v3.4s, v5.4s\nfcvtn v0.4h, v2.4s\nfrinti v2.4s, v4.4s\nfcvtn v1.4h, v1.4s\nfcvtn2 v0.8h, v2.4s\nfcvtn2 v1.8h, v3.4s\nret",
  "giasm": "fcvtl v2.4s, v0.4h\nfcvtl v3.4s, v1.4h\nfcvtl2 v0.4s, v0.8h\nfcvtl2 v1.4s, v1.8h\nfrinti v2.4s, v2.4s\nfrinti v3.4s, v3.4s\nfrinti v4.4s, v0.4s\nfrinti v5.4s, v1.4s\nfcvtn v0.4h, v2.4s\nfcvtn v1.4h, v3.4s\nfcvtn2 v0.8h, v4.4s\nfcvtn2 v1.8h, v5.4s\nret",
  "ll": "define <16 x half> @test(<16 x half> %a) {\n  %r = call <16 x half> @llvm.nearbyint(<16 x half> %a)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <16 x half> @llvm.nearbyint.v16f16(<16 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "nearbyint",
  "ty": "<2 x float>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frinti v0.2s, v0.2s\nret",
  "giasm": "frinti v0.2s, v0.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a) {\n  %r = call <2 x float> @llvm.nearbyint(<2 x float> %a)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x float> @llvm.nearbyint.v2f32(<2 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "nearbyint",
  "ty": "<4 x float>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frinti v0.4s, v0.4s\nret",
  "giasm": "frinti v0.4s, v0.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a) {\n  %r = call <4 x float> @llvm.nearbyint(<4 x float> %a)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x float> @llvm.nearbyint.v4f32(<4 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "nearbyint",
  "ty": "<8 x float>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "frinti v0.4s, v0.4s\nfrinti v1.4s, v1.4s\nret",
  "giasm": "frinti v0.4s, v0.4s\nfrinti v1.4s, v1.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a) {\n  %r = call <8 x float> @llvm.nearbyint(<8 x float> %a)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x float> @llvm.nearbyint.v8f32(<8 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "nearbyint",
  "ty": "<2 x double>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frinti v0.2d, v0.2d\nret",
  "giasm": "frinti v0.2d, v0.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a) {\n  %r = call <2 x double> @llvm.nearbyint(<2 x double> %a)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x double> @llvm.nearbyint.v2f64(<2 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "nearbyint",
  "ty": "<4 x double>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "frinti v0.2d, v0.2d\nfrinti v1.2d, v1.2d\nret",
  "giasm": "frinti v0.2d, v0.2d\nfrinti v1.2d, v1.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a) {\n  %r = call <4 x double> @llvm.nearbyint(<4 x double> %a)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x double> @llvm.nearbyint.v4f64(<4 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "fma",
  "ty": "half",
  "variant": "triop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 5,
  "gisize": 5,
  "extrasize": 0,
  "asm": "fcvt s2, h2\nfcvt s1, h1\nfcvt s0, h0\nfmadd s0, s0, s1, s2\nfcvt h0, s0\nret",
  "giasm": "fcvt s0, h0\nfcvt s1, h1\nfcvt s2, h2\nfmadd s0, s0, s1, s2\nfcvt h0, s0\nret",
  "ll": "define half @test(half %a, half %b, half %c) {\n  %r = call half @llvm.fma(half %a, half %b, half %c)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call half @llvm.fma.f16(half %a, half %b, half %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "fma",
  "ty": "float",
  "variant": "triop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmadd s0, s0, s1, s2\nret",
  "giasm": "fmadd s0, s0, s1, s2\nret",
  "ll": "define float @test(float %a, float %b, float %c) {\n  %r = call float @llvm.fma(float %a, float %b, float %c)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call float @llvm.fma.f32(float %a, float %b, float %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "fma",
  "ty": "double",
  "variant": "triop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmadd d0, d0, d1, d2\nret",
  "giasm": "fmadd d0, d0, d1, d2\nret",
  "ll": "define double @test(double %a, double %b, double %c) {\n  %r = call double @llvm.fma(double %a, double %b, double %c)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call double @llvm.fma.f64(double %a, double %b, double %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "fma",
  "ty": "<4 x half>",
  "variant": "triop",
  "codesize": 28,
  "thru": 28,
  "lat": 28,
  "sizelat": 28,
  "size": 32,
  "gisize": 5,
  "extrasize": 0,
  "asm": "mov h3, v2.h[1]\nmov h4, v1.h[1]\nmov h5, v0.h[1]\nfcvt s6, h2\nfcvt s7, h1\nfcvt s16, h0\nmov h17, v2.h[2]\nmov h18, v1.h[2]\nmov h19, v0.h[2]\nmov h2, v2.h[3]\nmov h1, v1.h[3]\nfcvt s3, h3\nfcvt s4, h4\nfcvt s5, h5\nfmadd s6, s16, s7, s6\nmov h16, v0.h[3]\nfcvt s7, h19\nfcvt s2, h2\nfcvt s1, h1\nfmadd s3, s5, s4, s3\nfcvt s4, h17\nfcvt s5, h18\nfcvt h0, s6\nfmadd s4, s7, s5, s4\nfcvt h3, s3\nfcvt s5, h16\nmov v0.h[1], v3.h[0]\nfcvt h3, s4\nfmadd s1, s5, s1, s2\nmov v0.h[2], v3.h[0]\nfcvt h1, s1\nmov v0.h[3], v1.h[0]\nret",
  "giasm": "fcvtl v0.4s, v0.4h\nfcvtl v1.4s, v1.4h\nfcvtl v2.4s, v2.4h\nfmla v2.4s, v1.4s, v0.4s\nfcvtn v0.4h, v2.4s\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, <4 x half> %b, <4 x half> %c) {\n  %r = call <4 x half> @llvm.fma(<4 x half> %a, <4 x half> %b, <4 x half> %c)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 28 for instruction:   %r = call <4 x half> @llvm.fma.v4f16(<4 x half> %a, <4 x half> %b, <4 x half> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "fma",
  "ty": "<8 x half>",
  "variant": "triop",
  "codesize": 64,
  "thru": 64,
  "lat": 64,
  "sizelat": 64,
  "size": 69,
  "gisize": 10,
  "extrasize": 0,
  "asm": "mov h3, v2.h[1]\nmov h4, v1.h[1]\nmov h5, v0.h[1]\nfcvt s6, h2\nfcvt s7, h1\nfcvt s16, h0\nmov h17, v2.h[2]\nmov h18, v1.h[2]\nmov h19, v0.h[2]\nfcvt s3, h3\nfcvt s4, h4\nfcvt s5, h5\nfmadd s6, s16, s7, s6\nfcvt s7, h17\nfcvt s16, h18\nfcvt s17, h19\nmov h18, v1.h[3]\nmov h19, v0.h[3]\nfmadd s4, s5, s4, s3\nmov h5, v2.h[3]\nfcvt h3, s6\nfmadd s6, s17, s16, s7\nmov h17, v2.h[4]\nfcvt s7, h18\nfcvt s16, h19\nmov h18, v1.h[4]\nfcvt h4, s4\nfcvt s5, h5\nmov h19, v0.h[4]\nfcvt h6, s6\nfcvt s17, h17\nfcvt s18, h18\nmov v3.h[1], v4.h[0]\nmov h4, v2.h[5]\nfmadd s5, s16, s7, s5\nmov h7, v1.h[5]\nmov h16, v0.h[5]\nfcvt s19, h19\nmov v3.h[2], v6.h[0]\nmov h6, v2.h[6]\nfcvt s4, h4\nfcvt s7, h7\nfcvt s16, h16\nfcvt h5, s5\nfmadd s17, s19, s18, s17\nmov h18, v1.h[6]\nmov h19, v0.h[6]\nmov h2, v2.h[7]\nmov h1, v1.h[7]\nmov h0, v0.h[7]\nfmadd s4, s16, s7, s4\nmov v3.h[3], v5.h[0]\nfcvt s5, h6\nfcvt s6, h18\nfcvt s7, h19\nfcvt h16, s17\nfcvt s2, h2\nfcvt s1, h1\nfcvt s0, h0\nfcvt h4, s4\nfmadd s5, s7, s6, s5\nmov v3.h[4], v16.h[0]\nfmadd s0, s0, s1, s2\nmov v3.h[5], v4.h[0]\nfcvt h4, s5\nfcvt h0, s0\nmov v3.h[6], v4.h[0]\nmov v3.h[7], v0.h[0]\nmov v0.16b, v3.16b\nret",
  "giasm": "fcvtl v3.4s, v0.4h\nfcvtl v4.4s, v1.4h\nfcvtl v5.4s, v2.4h\nfcvtl2 v0.4s, v0.8h\nfcvtl2 v1.4s, v1.8h\nfcvtl2 v2.4s, v2.8h\nfmla v5.4s, v4.4s, v3.4s\nfmla v2.4s, v1.4s, v0.4s\nfcvtn v0.4h, v5.4s\nfcvtn2 v0.8h, v2.4s\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, <8 x half> %b, <8 x half> %c) {\n  %r = call <8 x half> @llvm.fma(<8 x half> %a, <8 x half> %b, <8 x half> %c)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 64 for instruction:   %r = call <8 x half> @llvm.fma.v8f16(<8 x half> %a, <8 x half> %b, <8 x half> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "fma",
  "ty": "<16 x half>",
  "variant": "triop",
  "codesize": 128,
  "thru": 128,
  "lat": 128,
  "sizelat": 128,
  "size": 138,
  "gisize": 20,
  "extrasize": 0,
  "asm": "mov h6, v4.h[1]\nmov h7, v2.h[1]\nmov h16, v0.h[1]\nfcvt s17, h4\nfcvt s18, h2\nfcvt s19, h0\nmov h20, v4.h[2]\nmov h21, v2.h[2]\nmov h22, v0.h[2]\nmov h23, v4.h[3]\nmov h24, v2.h[3]\nmov h25, v0.h[3]\nfcvt s6, h6\nfcvt s7, h7\nfcvt s16, h16\nfmadd s17, s19, s18, s17\nmov h26, v1.h[1]\nfcvt s27, h5\nfcvt s18, h20\nfcvt s19, h21\nfcvt s20, h22\nfcvt s21, h23\nfcvt s22, h24\nfcvt s23, h25\nfmadd s7, s16, s7, s6\nmov h24, v5.h[1]\nmov h25, v3.h[1]\nfcvt h6, s17\nfcvt s28, h3\nfcvt s29, h1\nfmadd s19, s20, s19, s18\nfcvt s26, h26\nmov h16, v4.h[4]\nfmadd s21, s23, s22, s21\nmov h22, v3.h[2]\nmov h23, v1.h[2]\nfcvt h20, s7\nfcvt s24, h24\nfcvt s25, h25\nmov h17, v2.h[4]\nmov h18, v0.h[4]\nmov h7, v4.h[5]\nfcvt h19, s19\nmov h30, v2.h[5]\nfcvt s16, h16\nfcvt h21, s21\nmov h31, v1.h[4]\nfmadd s24, s26, s25, s24\nfmadd s25, s29, s28, s27\nmov v6.h[1], v20.h[0]\nmov h20, v5.h[2]\nmov h26, v5.h[3]\nmov h27, v3.h[3]\nmov h28, v1.h[3]\nfcvt s17, h17\nfcvt s18, h18\nfcvt s29, h7\nfcvt s30, h30\nmov v6.h[2], v19.h[0]\nfcvt h24, s24\nfcvt h7, s25\nfcvt s19, h20\nfcvt s20, h22\nfcvt s22, h23\nfmadd s16, s18, s17, s16\nmov h23, v0.h[5]\nfcvt s25, h26\nfcvt s26, h27\nfcvt s27, h28\nmov h18, v4.h[6]\nmov v6.h[3], v21.h[0]\nmov v7.h[1], v24.h[0]\nmov h24, v5.h[5]\nfmadd s19, s22, s20, s19\nmov h20, v5.h[4]\nmov h22, v3.h[4]\nfcvt s23, h23\nmov h28, v0.h[6]\nfcvt h16, s16\nfcvt s18, h18\nmov h4, v4.h[7]\nmov h0, v0.h[7]\nfcvt s20, h20\nfcvt s21, h22\nfcvt s22, h31\nfmadd s17, s23, s30, s29\nfmadd s23, s27, s26, s25\nfcvt h19, s19\nmov h25, v3.h[5]\nmov h26, v1.h[5]\nmov h27, v2.h[6]\nmov h29, v1.h[6]\nmov h2, v2.h[7]\nmov h1, v1.h[7]\nfmadd s20, s22, s21, s20\nmov h21, v5.h[6]\nmov h22, v3.h[6]\nmov v7.h[2], v19.h[0]\nfcvt h19, s23\nfcvt s23, h24\nfcvt s24, h25\nfcvt s25, h26\nfcvt s26, h27\nfcvt s27, h28\nfcvt s28, h29\nmov h5, v5.h[7]\nfcvt s21, h21\nfcvt s22, h22\nmov h3, v3.h[7]\nmov v7.h[3], v19.h[0]\nfcvt h19, s20\nmov v6.h[4], v16.h[0]\nfmadd s20, s25, s24, s23\nfcvt h16, s17\nfcvt s4, h4\nfmadd s18, s27, s26, s18\nfcvt s2, h2\nfcvt s0, h0\nfmadd s21, s28, s22, s21\nfcvt s5, h5\nfcvt s3, h3\nmov v7.h[4], v19.h[0]\nfcvt s1, h1\nfcvt h17, s20\nmov v6.h[5], v16.h[0]\nfmadd s0, s0, s2, s4\nfcvt h2, s18\nfcvt h4, s21\nfmadd s1, s1, s3, s5\nmov v7.h[5], v17.h[0]\nmov v6.h[6], v2.h[0]\nfcvt h0, s0\nfcvt h1, s1\nmov v7.h[6], v4.h[0]\nmov v6.h[7], v0.h[0]\nmov v7.h[7], v1.h[0]\nmov v0.16b, v6.16b\nmov v1.16b, v7.16b\nret",
  "giasm": "fcvtl v6.4s, v0.4h\nfcvtl v7.4s, v1.4h\nfcvtl v16.4s, v2.4h\nfcvtl v17.4s, v3.4h\nfcvtl v18.4s, v4.4h\nfcvtl v19.4s, v5.4h\nfcvtl2 v0.4s, v0.8h\nfcvtl2 v1.4s, v1.8h\nfcvtl2 v2.4s, v2.8h\nfcvtl2 v3.4s, v3.8h\nfcvtl2 v4.4s, v4.8h\nfcvtl2 v5.4s, v5.8h\nfmla v18.4s, v16.4s, v6.4s\nfmla v19.4s, v17.4s, v7.4s\nfmla v4.4s, v2.4s, v0.4s\nfmla v5.4s, v3.4s, v1.4s\nfcvtn v0.4h, v18.4s\nfcvtn v1.4h, v19.4s\nfcvtn2 v0.8h, v4.4s\nfcvtn2 v1.8h, v5.4s\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, <16 x half> %b, <16 x half> %c) {\n  %r = call <16 x half> @llvm.fma(<16 x half> %a, <16 x half> %b, <16 x half> %c)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 128 for instruction:   %r = call <16 x half> @llvm.fma.v16f16(<16 x half> %a, <16 x half> %b, <16 x half> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "fma",
  "ty": "<2 x float>",
  "variant": "triop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmla v2.2s, v1.2s, v0.2s\nfmov d0, d2\nret",
  "giasm": "fmla v2.2s, v1.2s, v0.2s\nfmov d0, d2\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, <2 x float> %b, <2 x float> %c) {\n  %r = call <2 x float> @llvm.fma(<2 x float> %a, <2 x float> %b, <2 x float> %c)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x float> @llvm.fma.v2f32(<2 x float> %a, <2 x float> %b, <2 x float> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "fma",
  "ty": "<4 x float>",
  "variant": "triop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmla v2.4s, v1.4s, v0.4s\nmov v0.16b, v2.16b\nret",
  "giasm": "fmla v2.4s, v1.4s, v0.4s\nmov v0.16b, v2.16b\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, <4 x float> %b, <4 x float> %c) {\n  %r = call <4 x float> @llvm.fma(<4 x float> %a, <4 x float> %b, <4 x float> %c)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x float> @llvm.fma.v4f32(<4 x float> %a, <4 x float> %b, <4 x float> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "fma",
  "ty": "<8 x float>",
  "variant": "triop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fmla v4.4s, v2.4s, v0.4s\nfmla v5.4s, v3.4s, v1.4s\nmov v0.16b, v4.16b\nmov v1.16b, v5.16b\nret",
  "giasm": "fmla v4.4s, v2.4s, v0.4s\nfmla v5.4s, v3.4s, v1.4s\nmov v0.16b, v4.16b\nmov v1.16b, v5.16b\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, <8 x float> %b, <8 x float> %c) {\n  %r = call <8 x float> @llvm.fma(<8 x float> %a, <8 x float> %b, <8 x float> %c)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x float> @llvm.fma.v8f32(<8 x float> %a, <8 x float> %b, <8 x float> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "fma",
  "ty": "<2 x double>",
  "variant": "triop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmla v2.2d, v1.2d, v0.2d\nmov v0.16b, v2.16b\nret",
  "giasm": "fmla v2.2d, v1.2d, v0.2d\nmov v0.16b, v2.16b\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, <2 x double> %b, <2 x double> %c) {\n  %r = call <2 x double> @llvm.fma(<2 x double> %a, <2 x double> %b, <2 x double> %c)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x double> @llvm.fma.v2f64(<2 x double> %a, <2 x double> %b, <2 x double> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "fma",
  "ty": "<4 x double>",
  "variant": "triop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fmla v4.2d, v2.2d, v0.2d\nfmla v5.2d, v3.2d, v1.2d\nmov v0.16b, v4.16b\nmov v1.16b, v5.16b\nret",
  "giasm": "fmla v4.2d, v2.2d, v0.2d\nfmla v5.2d, v3.2d, v1.2d\nmov v0.16b, v4.16b\nmov v1.16b, v5.16b\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, <4 x double> %b, <4 x double> %c) {\n  %r = call <4 x double> @llvm.fma(<4 x double> %a, <4 x double> %b, <4 x double> %c)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x double> @llvm.fma.v4f64(<4 x double> %a, <4 x double> %b, <4 x double> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "fmuladd",
  "ty": "half",
  "variant": "triop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 8,
  "gisize": 8,
  "extrasize": 0,
  "asm": "fcvt s1, h1\nfcvt s0, h0\nfmul s0, s0, s1\nfcvt s1, h2\nfcvt h0, s0\nfcvt s0, h0\nfadd s0, s0, s1\nfcvt h0, s0\nret",
  "giasm": "fcvt s0, h0\nfcvt s1, h1\nfmul s0, s0, s1\nfcvt s1, h2\nfcvt h0, s0\nfcvt s0, h0\nfadd s0, s0, s1\nfcvt h0, s0\nret",
  "ll": "define half @test(half %a, half %b, half %c) {\n  %r = call half @llvm.fmuladd(half %a, half %b, half %c)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call half @llvm.fmuladd.f16(half %a, half %b, half %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "fmuladd",
  "ty": "float",
  "variant": "triop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmadd s0, s0, s1, s2\nret",
  "giasm": "fmadd s0, s0, s1, s2\nret",
  "ll": "define float @test(float %a, float %b, float %c) {\n  %r = call float @llvm.fmuladd(float %a, float %b, float %c)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call float @llvm.fmuladd.f32(float %a, float %b, float %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "fmuladd",
  "ty": "double",
  "variant": "triop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmadd d0, d0, d1, d2\nret",
  "giasm": "fmadd d0, d0, d1, d2\nret",
  "ll": "define double @test(double %a, double %b, double %c) {\n  %r = call double @llvm.fmuladd(double %a, double %b, double %c)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call double @llvm.fmuladd.f64(double %a, double %b, double %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "fmuladd",
  "ty": "<4 x half>",
  "variant": "triop",
  "codesize": 2,
  "thru": 4,
  "lat": 6,
  "sizelat": 2,
  "size": 8,
  "gisize": 8,
  "extrasize": 0,
  "asm": "fcvtl v1.4s, v1.4h\nfcvtl v0.4s, v0.4h\nfmul v0.4s, v0.4s, v1.4s\nfcvtl v1.4s, v2.4h\nfcvtn v0.4h, v0.4s\nfcvtl v0.4s, v0.4h\nfadd v0.4s, v0.4s, v1.4s\nfcvtn v0.4h, v0.4s\nret",
  "giasm": "fcvtl v0.4s, v0.4h\nfcvtl v1.4s, v1.4h\nfmul v0.4s, v0.4s, v1.4s\nfcvtl v1.4s, v2.4h\nfcvtn v0.4h, v0.4s\nfcvtl v0.4s, v0.4h\nfadd v0.4s, v0.4s, v1.4s\nfcvtn v0.4h, v0.4s\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, <4 x half> %b, <4 x half> %c) {\n  %r = call <4 x half> @llvm.fmuladd(<4 x half> %a, <4 x half> %b, <4 x half> %c)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <4 x half> @llvm.fmuladd.v4f16(<4 x half> %a, <4 x half> %b, <4 x half> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "fmuladd",
  "ty": "<8 x half>",
  "variant": "triop",
  "codesize": 2,
  "thru": 4,
  "lat": 6,
  "sizelat": 2,
  "size": 16,
  "gisize": 16,
  "extrasize": 0,
  "asm": "fcvtl v3.4s, v1.4h\nfcvtl v4.4s, v0.4h\nfcvtl2 v1.4s, v1.8h\nfcvtl2 v0.4s, v0.8h\nfmul v3.4s, v4.4s, v3.4s\nfmul v0.4s, v0.4s, v1.4s\nfcvtn v1.4h, v3.4s\nfcvtl v3.4s, v2.4h\nfcvtl2 v2.4s, v2.8h\nfcvtn2 v1.8h, v0.4s\nfcvtl v0.4s, v1.4h\nfcvtl2 v1.4s, v1.8h\nfadd v0.4s, v0.4s, v3.4s\nfadd v1.4s, v1.4s, v2.4s\nfcvtn v0.4h, v0.4s\nfcvtn2 v0.8h, v1.4s\nret",
  "giasm": "fcvtl v3.4s, v0.4h\nfcvtl v4.4s, v1.4h\nfcvtl2 v0.4s, v0.8h\nfcvtl2 v1.4s, v1.8h\nfmul v3.4s, v3.4s, v4.4s\nfmul v0.4s, v0.4s, v1.4s\nfcvtn v1.4h, v3.4s\nfcvtl v3.4s, v2.4h\nfcvtl2 v2.4s, v2.8h\nfcvtn v0.4h, v0.4s\nfcvtl v1.4s, v1.4h\nfcvtl v0.4s, v0.4h\nfadd v1.4s, v1.4s, v3.4s\nfadd v2.4s, v0.4s, v2.4s\nfcvtn v0.4h, v1.4s\nfcvtn2 v0.8h, v2.4s\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, <8 x half> %b, <8 x half> %c) {\n  %r = call <8 x half> @llvm.fmuladd(<8 x half> %a, <8 x half> %b, <8 x half> %c)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <8 x half> @llvm.fmuladd.v8f16(<8 x half> %a, <8 x half> %b, <8 x half> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "fmuladd",
  "ty": "<16 x half>",
  "variant": "triop",
  "codesize": 2,
  "thru": 8,
  "lat": 6,
  "sizelat": 2,
  "size": 32,
  "gisize": 32,
  "extrasize": 0,
  "asm": "fcvtl v6.4s, v2.4h\nfcvtl v7.4s, v0.4h\nfcvtl v16.4s, v3.4h\nfcvtl v17.4s, v1.4h\nfcvtl2 v2.4s, v2.8h\nfcvtl2 v0.4s, v0.8h\nfcvtl2 v3.4s, v3.8h\nfcvtl2 v1.4s, v1.8h\nfmul v6.4s, v7.4s, v6.4s\nfmul v7.4s, v17.4s, v16.4s\nfmul v0.4s, v0.4s, v2.4s\nfmul v1.4s, v1.4s, v3.4s\nfcvtn v2.4h, v6.4s\nfcvtl v6.4s, v5.4h\nfcvtn v3.4h, v7.4s\nfcvtn2 v2.8h, v0.4s\nfcvtl v0.4s, v4.4h\nfcvtl2 v4.4s, v4.8h\nfcvtn2 v3.8h, v1.4s\nfcvtl v1.4s, v2.4h\nfcvtl2 v2.4s, v2.8h\nfcvtl v7.4s, v3.4h\nfadd v0.4s, v1.4s, v0.4s\nfcvtl2 v1.4s, v3.8h\nfcvtl2 v3.4s, v5.8h\nfadd v5.4s, v7.4s, v6.4s\nfadd v2.4s, v2.4s, v4.4s\nfcvtn v0.4h, v0.4s\nfadd v3.4s, v1.4s, v3.4s\nfcvtn v1.4h, v5.4s\nfcvtn2 v0.8h, v2.4s\nfcvtn2 v1.8h, v3.4s\nret",
  "giasm": "fcvtl v6.4s, v0.4h\nfcvtl v7.4s, v2.4h\nfcvtl v16.4s, v1.4h\nfcvtl v17.4s, v3.4h\nfcvtl2 v0.4s, v0.8h\nfcvtl2 v1.4s, v1.8h\nfcvtl2 v2.4s, v2.8h\nfcvtl2 v3.4s, v3.8h\nfmul v6.4s, v6.4s, v7.4s\nfmul v7.4s, v16.4s, v17.4s\nfmul v0.4s, v0.4s, v2.4s\nfmul v1.4s, v1.4s, v3.4s\nfcvtn v2.4h, v6.4s\nfcvtl v6.4s, v4.4h\nfcvtl2 v4.4s, v4.8h\nfcvtn v3.4h, v7.4s\nfcvtl v7.4s, v5.4h\nfcvtl2 v5.4s, v5.8h\nfcvtn v0.4h, v0.4s\nfcvtn v1.4h, v1.4s\nfcvtl v2.4s, v2.4h\nfcvtl v3.4s, v3.4h\nfcvtl v0.4s, v0.4h\nfcvtl v1.4s, v1.4h\nfadd v2.4s, v2.4s, v6.4s\nfadd v3.4s, v3.4s, v7.4s\nfadd v4.4s, v0.4s, v4.4s\nfadd v5.4s, v1.4s, v5.4s\nfcvtn v0.4h, v2.4s\nfcvtn v1.4h, v3.4s\nfcvtn2 v0.8h, v4.4s\nfcvtn2 v1.8h, v5.4s\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, <16 x half> %b, <16 x half> %c) {\n  %r = call <16 x half> @llvm.fmuladd(<16 x half> %a, <16 x half> %b, <16 x half> %c)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <16 x half> @llvm.fmuladd.v16f16(<16 x half> %a, <16 x half> %b, <16 x half> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "fmuladd",
  "ty": "<2 x float>",
  "variant": "triop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmla v2.2s, v1.2s, v0.2s\nfmov d0, d2\nret",
  "giasm": "fmla v2.2s, v1.2s, v0.2s\nfmov d0, d2\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, <2 x float> %b, <2 x float> %c) {\n  %r = call <2 x float> @llvm.fmuladd(<2 x float> %a, <2 x float> %b, <2 x float> %c)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %a, <2 x float> %b, <2 x float> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "fmuladd",
  "ty": "<4 x float>",
  "variant": "triop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmla v2.4s, v1.4s, v0.4s\nmov v0.16b, v2.16b\nret",
  "giasm": "fmla v2.4s, v1.4s, v0.4s\nmov v0.16b, v2.16b\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, <4 x float> %b, <4 x float> %c) {\n  %r = call <4 x float> @llvm.fmuladd(<4 x float> %a, <4 x float> %b, <4 x float> %c)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %a, <4 x float> %b, <4 x float> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "fmuladd",
  "ty": "<8 x float>",
  "variant": "triop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fmla v4.4s, v2.4s, v0.4s\nfmla v5.4s, v3.4s, v1.4s\nmov v0.16b, v4.16b\nmov v1.16b, v5.16b\nret",
  "giasm": "fmla v4.4s, v2.4s, v0.4s\nfmla v5.4s, v3.4s, v1.4s\nmov v0.16b, v4.16b\nmov v1.16b, v5.16b\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, <8 x float> %b, <8 x float> %c) {\n  %r = call <8 x float> @llvm.fmuladd(<8 x float> %a, <8 x float> %b, <8 x float> %c)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %a, <8 x float> %b, <8 x float> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "fmuladd",
  "ty": "<2 x double>",
  "variant": "triop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmla v2.2d, v1.2d, v0.2d\nmov v0.16b, v2.16b\nret",
  "giasm": "fmla v2.2d, v1.2d, v0.2d\nmov v0.16b, v2.16b\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, <2 x double> %b, <2 x double> %c) {\n  %r = call <2 x double> @llvm.fmuladd(<2 x double> %a, <2 x double> %b, <2 x double> %c)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %a, <2 x double> %b, <2 x double> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "fmuladd",
  "ty": "<4 x double>",
  "variant": "triop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fmla v4.2d, v2.2d, v0.2d\nfmla v5.2d, v3.2d, v1.2d\nmov v0.16b, v4.16b\nmov v1.16b, v5.16b\nret",
  "giasm": "fmla v4.2d, v2.2d, v0.2d\nfmla v5.2d, v3.2d, v1.2d\nmov v0.16b, v4.16b\nmov v1.16b, v5.16b\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, <4 x double> %b, <4 x double> %c) {\n  %r = call <4 x double> @llvm.fmuladd(<4 x double> %a, <4 x double> %b, <4 x double> %c)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x double> @llvm.fmuladd.v4f64(<4 x double> %a, <4 x double> %b, <4 x double> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 }
]