[
 {
  "instr": "fadd",
  "ty": "half",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fadd h0, h0, h1\nret",
  "giasm": "fadd h0, h0, h1\nret",
  "ll": "define half @test(half %a, half %b) {\n  %r = fadd half %a, %b\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd half %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "fadd",
  "ty": "float",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fadd s0, s0, s1\nret",
  "giasm": "fadd s0, s0, s1\nret",
  "ll": "define float @test(float %a, float %b) {\n  %r = fadd float %a, %b\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd float %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "fadd",
  "ty": "double",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fadd d0, d0, d1\nret",
  "giasm": "fadd d0, d0, d1\nret",
  "ll": "define double @test(double %a, double %b) {\n  %r = fadd double %a, %b\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd double %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "fadd",
  "ty": "<4 x half>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fadd v0.4h, v0.4h, v1.4h\nret",
  "giasm": "fadd v0.4h, v0.4h, v1.4h\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, <4 x half> %b) {\n  %r = fadd <4 x half> %a, %b\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <4 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "fadd",
  "ty": "<8 x half>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fadd v0.8h, v0.8h, v1.8h\nret",
  "giasm": "fadd v0.8h, v0.8h, v1.8h\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, <8 x half> %b) {\n  %r = fadd <8 x half> %a, %b\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <8 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "fadd",
  "ty": "<16 x half>",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fadd v1.8h, v1.8h, v3.8h\nfadd v0.8h, v0.8h, v2.8h\nret",
  "giasm": "fadd v0.8h, v0.8h, v2.8h\nfadd v1.8h, v1.8h, v3.8h\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, <16 x half> %b) {\n  %r = fadd <16 x half> %a, %b\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <16 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "fadd",
  "ty": "<2 x float>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fadd v0.2s, v0.2s, v1.2s\nret",
  "giasm": "fadd v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, <2 x float> %b) {\n  %r = fadd <2 x float> %a, %b\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <2 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "fadd",
  "ty": "<4 x float>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fadd v0.4s, v0.4s, v1.4s\nret",
  "giasm": "fadd v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, <4 x float> %b) {\n  %r = fadd <4 x float> %a, %b\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <4 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "fadd",
  "ty": "<8 x float>",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fadd v1.4s, v1.4s, v3.4s\nfadd v0.4s, v0.4s, v2.4s\nret",
  "giasm": "fadd v0.4s, v0.4s, v2.4s\nfadd v1.4s, v1.4s, v3.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, <8 x float> %b) {\n  %r = fadd <8 x float> %a, %b\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <8 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "fadd",
  "ty": "<2 x double>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fadd v0.2d, v0.2d, v1.2d\nret",
  "giasm": "fadd v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, <2 x double> %b) {\n  %r = fadd <2 x double> %a, %b\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <2 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "fadd",
  "ty": "<4 x double>",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fadd v1.2d, v1.2d, v3.2d\nfadd v0.2d, v0.2d, v2.2d\nret",
  "giasm": "fadd v0.2d, v0.2d, v2.2d\nfadd v1.2d, v1.2d, v3.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, <4 x double> %b) {\n  %r = fadd <4 x double> %a, %b\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fadd <4 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "fsub",
  "ty": "half",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fsub h0, h0, h1\nret",
  "giasm": "fsub h0, h0, h1\nret",
  "ll": "define half @test(half %a, half %b) {\n  %r = fsub half %a, %b\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub half %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "fsub",
  "ty": "float",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fsub s0, s0, s1\nret",
  "giasm": "fsub s0, s0, s1\nret",
  "ll": "define float @test(float %a, float %b) {\n  %r = fsub float %a, %b\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub float %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "fsub",
  "ty": "double",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fsub d0, d0, d1\nret",
  "giasm": "fsub d0, d0, d1\nret",
  "ll": "define double @test(double %a, double %b) {\n  %r = fsub double %a, %b\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub double %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "fsub",
  "ty": "<4 x half>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fsub v0.4h, v0.4h, v1.4h\nret",
  "giasm": "fsub v0.4h, v0.4h, v1.4h\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, <4 x half> %b) {\n  %r = fsub <4 x half> %a, %b\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <4 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "fsub",
  "ty": "<8 x half>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fsub v0.8h, v0.8h, v1.8h\nret",
  "giasm": "fsub v0.8h, v0.8h, v1.8h\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, <8 x half> %b) {\n  %r = fsub <8 x half> %a, %b\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <8 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "fsub",
  "ty": "<16 x half>",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fsub v1.8h, v1.8h, v3.8h\nfsub v0.8h, v0.8h, v2.8h\nret",
  "giasm": "fsub v0.8h, v0.8h, v2.8h\nfsub v1.8h, v1.8h, v3.8h\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, <16 x half> %b) {\n  %r = fsub <16 x half> %a, %b\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <16 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "fsub",
  "ty": "<2 x float>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fsub v0.2s, v0.2s, v1.2s\nret",
  "giasm": "fsub v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, <2 x float> %b) {\n  %r = fsub <2 x float> %a, %b\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <2 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "fsub",
  "ty": "<4 x float>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fsub v0.4s, v0.4s, v1.4s\nret",
  "giasm": "fsub v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, <4 x float> %b) {\n  %r = fsub <4 x float> %a, %b\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <4 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "fsub",
  "ty": "<8 x float>",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fsub v1.4s, v1.4s, v3.4s\nfsub v0.4s, v0.4s, v2.4s\nret",
  "giasm": "fsub v0.4s, v0.4s, v2.4s\nfsub v1.4s, v1.4s, v3.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, <8 x float> %b) {\n  %r = fsub <8 x float> %a, %b\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <8 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "fsub",
  "ty": "<2 x double>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fsub v0.2d, v0.2d, v1.2d\nret",
  "giasm": "fsub v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, <2 x double> %b) {\n  %r = fsub <2 x double> %a, %b\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <2 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "fsub",
  "ty": "<4 x double>",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fsub v1.2d, v1.2d, v3.2d\nfsub v0.2d, v0.2d, v2.2d\nret",
  "giasm": "fsub v0.2d, v0.2d, v2.2d\nfsub v1.2d, v1.2d, v3.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, <4 x double> %b) {\n  %r = fsub <4 x double> %a, %b\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fsub <4 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "fmul",
  "ty": "half",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmul h0, h0, h1\nret",
  "giasm": "fmul h0, h0, h1\nret",
  "ll": "define half @test(half %a, half %b) {\n  %r = fmul half %a, %b\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul half %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "fmul",
  "ty": "float",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmul s0, s0, s1\nret",
  "giasm": "fmul s0, s0, s1\nret",
  "ll": "define float @test(float %a, float %b) {\n  %r = fmul float %a, %b\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul float %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "fmul",
  "ty": "double",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmul d0, d0, d1\nret",
  "giasm": "fmul d0, d0, d1\nret",
  "ll": "define double @test(double %a, double %b) {\n  %r = fmul double %a, %b\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul double %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "fmul",
  "ty": "<4 x half>",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmul v0.4h, v0.4h, v1.4h\nret",
  "giasm": "fmul v0.4h, v0.4h, v1.4h\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, <4 x half> %b) {\n  %r = fmul <4 x half> %a, %b\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <4 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "fmul",
  "ty": "<8 x half>",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmul v0.8h, v0.8h, v1.8h\nret",
  "giasm": "fmul v0.8h, v0.8h, v1.8h\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, <8 x half> %b) {\n  %r = fmul <8 x half> %a, %b\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <8 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "fmul",
  "ty": "<16 x half>",
  "variant": "binop",
  "codesize": 1,
  "thru": 4,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmul v1.8h, v1.8h, v3.8h\nfmul v0.8h, v0.8h, v2.8h\nret",
  "giasm": "fmul v0.8h, v0.8h, v2.8h\nfmul v1.8h, v1.8h, v3.8h\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, <16 x half> %b) {\n  %r = fmul <16 x half> %a, %b\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <16 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "fmul",
  "ty": "<2 x float>",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmul v0.2s, v0.2s, v1.2s\nret",
  "giasm": "fmul v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, <2 x float> %b) {\n  %r = fmul <2 x float> %a, %b\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <2 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "fmul",
  "ty": "<4 x float>",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmul v0.4s, v0.4s, v1.4s\nret",
  "giasm": "fmul v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, <4 x float> %b) {\n  %r = fmul <4 x float> %a, %b\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <4 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "fmul",
  "ty": "<8 x float>",
  "variant": "binop",
  "codesize": 1,
  "thru": 4,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmul v1.4s, v1.4s, v3.4s\nfmul v0.4s, v0.4s, v2.4s\nret",
  "giasm": "fmul v0.4s, v0.4s, v2.4s\nfmul v1.4s, v1.4s, v3.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, <8 x float> %b) {\n  %r = fmul <8 x float> %a, %b\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <8 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "fmul",
  "ty": "<2 x double>",
  "variant": "binop",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmul v0.2d, v0.2d, v1.2d\nret",
  "giasm": "fmul v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, <2 x double> %b) {\n  %r = fmul <2 x double> %a, %b\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <2 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "fmul",
  "ty": "<4 x double>",
  "variant": "binop",
  "codesize": 1,
  "thru": 4,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmul v1.2d, v1.2d, v3.2d\nfmul v0.2d, v0.2d, v2.2d\nret",
  "giasm": "fmul v0.2d, v0.2d, v2.2d\nfmul v1.2d, v1.2d, v3.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, <4 x double> %b) {\n  %r = fmul <4 x double> %a, %b\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fmul <4 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "fdiv",
  "ty": "half",
  "variant": "binop",
  "codesize": 4,
  "thru": 2,
  "lat": 4,
  "sizelat": 4,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fdiv h0, h0, h1\nret",
  "giasm": "fdiv h0, h0, h1\nret",
  "ll": "define half @test(half %a, half %b) {\n  %r = fdiv half %a, %b\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv half %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "fdiv",
  "ty": "float",
  "variant": "binop",
  "codesize": 4,
  "thru": 2,
  "lat": 4,
  "sizelat": 4,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fdiv s0, s0, s1\nret",
  "giasm": "fdiv s0, s0, s1\nret",
  "ll": "define float @test(float %a, float %b) {\n  %r = fdiv float %a, %b\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv float %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "fdiv",
  "ty": "double",
  "variant": "binop",
  "codesize": 4,
  "thru": 2,
  "lat": 4,
  "sizelat": 4,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fdiv d0, d0, d1\nret",
  "giasm": "fdiv d0, d0, d1\nret",
  "ll": "define double @test(double %a, double %b) {\n  %r = fdiv double %a, %b\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv double %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "fdiv",
  "ty": "<4 x half>",
  "variant": "binop",
  "codesize": 4,
  "thru": 2,
  "lat": 4,
  "sizelat": 4,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fdiv v0.4h, v0.4h, v1.4h\nret",
  "giasm": "fdiv v0.4h, v0.4h, v1.4h\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, <4 x half> %b) {\n  %r = fdiv <4 x half> %a, %b\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <4 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<8 x half>",
  "variant": "binop",
  "codesize": 4,
  "thru": 2,
  "lat": 4,
  "sizelat": 4,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fdiv v0.8h, v0.8h, v1.8h\nret",
  "giasm": "fdiv v0.8h, v0.8h, v1.8h\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, <8 x half> %b) {\n  %r = fdiv <8 x half> %a, %b\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <8 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<16 x half>",
  "variant": "binop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fdiv v1.8h, v1.8h, v3.8h\nfdiv v0.8h, v0.8h, v2.8h\nret",
  "giasm": "fdiv v0.8h, v0.8h, v2.8h\nfdiv v1.8h, v1.8h, v3.8h\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, <16 x half> %b) {\n  %r = fdiv <16 x half> %a, %b\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <16 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<2 x float>",
  "variant": "binop",
  "codesize": 4,
  "thru": 2,
  "lat": 4,
  "sizelat": 4,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fdiv v0.2s, v0.2s, v1.2s\nret",
  "giasm": "fdiv v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, <2 x float> %b) {\n  %r = fdiv <2 x float> %a, %b\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <2 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<4 x float>",
  "variant": "binop",
  "codesize": 4,
  "thru": 2,
  "lat": 4,
  "sizelat": 4,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fdiv v0.4s, v0.4s, v1.4s\nret",
  "giasm": "fdiv v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, <4 x float> %b) {\n  %r = fdiv <4 x float> %a, %b\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <4 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<8 x float>",
  "variant": "binop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fdiv v1.4s, v1.4s, v3.4s\nfdiv v0.4s, v0.4s, v2.4s\nret",
  "giasm": "fdiv v0.4s, v0.4s, v2.4s\nfdiv v1.4s, v1.4s, v3.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, <8 x float> %b) {\n  %r = fdiv <8 x float> %a, %b\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <8 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<2 x double>",
  "variant": "binop",
  "codesize": 4,
  "thru": 2,
  "lat": 4,
  "sizelat": 4,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fdiv v0.2d, v0.2d, v1.2d\nret",
  "giasm": "fdiv v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, <2 x double> %b) {\n  %r = fdiv <2 x double> %a, %b\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <2 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "fdiv",
  "ty": "<4 x double>",
  "variant": "binop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fdiv v1.2d, v1.2d, v3.2d\nfdiv v0.2d, v0.2d, v2.2d\nret",
  "giasm": "fdiv v0.2d, v0.2d, v2.2d\nfdiv v1.2d, v1.2d, v3.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, <4 x double> %b) {\n  %r = fdiv <4 x double> %a, %b\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = fdiv <4 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "frem",
  "ty": "half",
  "variant": "binop",
  "codesize": 4,
  "thru": 10,
  "lat": 4,
  "sizelat": 4,
  "size": 6,
  "gisize": 6,
  "extrasize": 0,
  "asm": "str x30, [sp, #-16]!                // 8-byte Folded Spill\nfcvt s0, h0\nfcvt s1, h1\nbl fmodf\nfcvt h0, s0\nldr x30, [sp], #16                  // 8-byte Folded Reload\nret",
  "giasm": "str x30, [sp, #-16]!                // 8-byte Folded Spill\nfcvt s0, h0\nfcvt s1, h1\nbl fmodf\nfcvt h0, s0\nldr x30, [sp], #16                  // 8-byte Folded Reload\nret",
  "ll": "define half @test(half %a, half %b) {\n  %r = frem half %a, %b\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem half %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "frem",
  "ty": "float",
  "variant": "binop",
  "codesize": 4,
  "thru": 10,
  "lat": 4,
  "sizelat": 4,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "b fmodf",
  "giasm": "b fmodf",
  "ll": "define float @test(float %a, float %b) {\n  %r = frem float %a, %b\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem float %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "frem",
  "ty": "double",
  "variant": "binop",
  "codesize": 4,
  "thru": 10,
  "lat": 4,
  "sizelat": 4,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "b fmod",
  "giasm": "b fmod",
  "ll": "define double @test(double %a, double %b) {\n  %r = frem double %a, %b\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem double %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "frem",
  "ty": "<4 x half>",
  "variant": "binop",
  "codesize": 4,
  "thru": 52,
  "lat": 4,
  "sizelat": 4,
  "size": 42,
  "gisize": 43,
  "extrasize": 0,
  "asm": "sub sp, sp, #64\nstr x30, [sp, #48]                  // 8-byte Folded Spill\nmov h3, v0.h[1]\nmov h2, v1.h[1]\nstp q0, q1, [sp, #16]               // 32-byte Folded Spill\nfcvt s0, h3\nfcvt s1, h2\nbl fmodf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp]                        // 16-byte Folded Spill\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl fmodf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nfcvt h3, s0\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nmov h1, v1.h[2]\nmov h2, v0.h[2]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov v3.h[1], v0.h[0]\nfcvt s0, h1\nfcvt s1, h2\nstr q3, [sp]                        // 16-byte Folded Spill\nbl fmodf\nldp q1, q2, [sp, #16]               // 32-byte Folded Reload\nfcvt h0, s0\nldr q3, [sp]                        // 16-byte Folded Reload\nmov h1, v1.h[3]\nmov h2, v2.h[3]\nmov v3.h[2], v0.h[0]\nfcvt s0, h1\nfcvt s1, h2\nstr q3, [sp]                        // 16-byte Folded Spill\nbl fmodf\nfcvt h1, s0\nldr q0, [sp]                        // 16-byte Folded Reload\nldr x30, [sp, #48]                  // 8-byte Folded Reload\nmov v0.h[3], v1.h[0]\nadd sp, sp, #64\nret",
  "giasm": "sub sp, sp, #112\nstp d13, d12, [sp, #48]             // 16-byte Folded Spill\nstp d11, d10, [sp, #64]             // 16-byte Folded Spill\nstp d9, d8, [sp, #80]               // 16-byte Folded Spill\nstr x30, [sp, #96]                  // 8-byte Folded Spill\nmov h8, v0.h[1]\nmov h9, v0.h[2]\nmov h10, v0.h[3]\nmov h11, v1.h[1]\nmov h12, v1.h[2]\nmov h13, v1.h[3]\nfcvt s0, h0\nfcvt s1, h1\nbl fmodf\nfcvt s2, h8\nfcvt h0, s0\nfcvt s1, h11\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nfcvt s2, h9\nfcvt h0, s0\nfcvt s1, h12\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nfcvt s2, h10\nfcvt h0, s0\nfcvt s1, h13\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nldp q3, q2, [sp]                    // 32-byte Folded Reload\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nldp d9, d8, [sp, #80]               // 16-byte Folded Reload\nldp d11, d10, [sp, #64]             // 16-byte Folded Reload\nldr x30, [sp, #96]                  // 8-byte Folded Reload\nmov v1.h[1], v3.h[0]\nldp d13, d12, [sp, #48]             // 16-byte Folded Reload\nmov v1.h[2], v2.h[0]\nmov v1.h[3], v0.h[0]\nmov v0.16b, v1.16b\nadd sp, sp, #112\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, <4 x half> %b) {\n  %r = frem <4 x half> %a, %b\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <4 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "frem",
  "ty": "<8 x half>",
  "variant": "binop",
  "codesize": 4,
  "thru": 108,
  "lat": 4,
  "sizelat": 4,
  "size": 79,
  "gisize": 96,
  "extrasize": 0,
  "asm": "sub sp, sp, #64\nstr x30, [sp, #48]                  // 8-byte Folded Spill\nmov h3, v0.h[1]\nmov h2, v1.h[1]\nstp q0, q1, [sp]                    // 32-byte Folded Spill\nfcvt s0, h3\nfcvt s1, h2\nbl fmodf\nfcvt h0, s0\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldp q0, q1, [sp]                    // 32-byte Folded Reload\nfcvt s0, h0\nfcvt s1, h1\nbl fmodf\nfcvt h0, s0\nldp q1, q2, [sp, #16]               // 32-byte Folded Reload\nmov h1, v1.h[2]\nmov v0.h[1], v2.h[0]\nfcvt s1, h1\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[2]\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[2], v0.h[0]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nldp q0, q1, [sp]                    // 32-byte Folded Reload\nmov h0, v0.h[3]\nmov h1, v1.h[3]\nfcvt s0, h0\nfcvt s1, h1\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[3], v0.h[0]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nldp q0, q1, [sp]                    // 32-byte Folded Reload\nmov h0, v0.h[4]\nmov h1, v1.h[4]\nfcvt s0, h0\nfcvt s1, h1\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[4], v0.h[0]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nldp q0, q1, [sp]                    // 32-byte Folded Reload\nmov h0, v0.h[5]\nmov h1, v1.h[5]\nfcvt s0, h0\nfcvt s1, h1\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[5], v0.h[0]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nldp q0, q1, [sp]                    // 32-byte Folded Reload\nmov h0, v0.h[6]\nmov h1, v1.h[6]\nfcvt s0, h0\nfcvt s1, h1\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[6], v0.h[0]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nldp q0, q1, [sp]                    // 32-byte Folded Reload\nmov h0, v0.h[7]\nmov h1, v1.h[7]\nfcvt s0, h0\nfcvt s1, h1\nbl fmodf\nfcvt h1, s0\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nldr x30, [sp, #48]                  // 8-byte Folded Reload\nmov v0.h[7], v1.h[0]\nadd sp, sp, #64\nret",
  "giasm": "sub sp, sp, #192\nstp d15, d14, [sp, #112]            // 16-byte Folded Spill\nstp d13, d12, [sp, #128]            // 16-byte Folded Spill\nstp d11, d10, [sp, #144]            // 16-byte Folded Spill\nstp d9, d8, [sp, #160]              // 16-byte Folded Spill\nstr x30, [sp, #176]                 // 8-byte Folded Spill\nmov h2, v0.h[5]\nmov h11, v0.h[1]\nmov h12, v0.h[2]\nmov h13, v0.h[3]\nmov h14, v0.h[4]\nmov h8, v1.h[1]\nmov h9, v1.h[2]\nmov h10, v1.h[3]\nmov h15, v1.h[4]\nstr h2, [sp, #48]                   // 2-byte Folded Spill\nmov h2, v0.h[6]\nstr h2, [sp, #64]                   // 2-byte Folded Spill\nmov h2, v0.h[7]\nfcvt s0, h0\nstr h2, [sp, #96]                   // 2-byte Folded Spill\nmov h2, v1.h[5]\nstr h2, [sp, #186]                  // 2-byte Folded Spill\nmov h2, v1.h[6]\nstr h2, [sp, #188]                  // 2-byte Folded Spill\nmov h2, v1.h[7]\nfcvt s1, h1\nstr h2, [sp, #190]                  // 2-byte Folded Spill\nbl fmodf\nfcvt s2, h11\nfcvt h0, s0\nfcvt s1, h8\nstr q0, [sp, #80]                   // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nfcvt s2, h12\nfcvt h0, s0\nfcvt s1, h9\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nfcvt s2, h13\nfcvt h0, s0\nfcvt s1, h10\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nfcvt s2, h14\nfcvt h0, s0\nfcvt s1, h15\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #48]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nldr h0, [sp, #186]                  // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #64]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #64]                   // 16-byte Folded Spill\nldr h0, [sp, #188]                  // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #96]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #96]                   // 16-byte Folded Spill\nldr h0, [sp, #190]                  // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl fmodf\nldp q2, q3, [sp, #16]               // 32-byte Folded Reload\nfcvt h0, s0\nldr q1, [sp, #80]                   // 16-byte Folded Reload\nldp d9, d8, [sp, #160]              // 16-byte Folded Reload\nldp d11, d10, [sp, #144]            // 16-byte Folded Reload\nldr x30, [sp, #176]                 // 8-byte Folded Reload\nmov v1.h[1], v3.h[0]\nldp d13, d12, [sp, #128]            // 16-byte Folded Reload\nldp d15, d14, [sp, #112]            // 16-byte Folded Reload\nmov v1.h[2], v2.h[0]\nldr q2, [sp]                        // 16-byte Folded Reload\nmov v1.h[3], v2.h[0]\nldp q3, q2, [sp, #48]               // 32-byte Folded Reload\nmov v1.h[4], v3.h[0]\nmov v1.h[5], v2.h[0]\nldr q2, [sp, #96]                   // 16-byte Folded Reload\nmov v1.h[6], v2.h[0]\nmov v1.h[7], v0.h[0]\nmov v0.16b, v1.16b\nadd sp, sp, #192\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, <8 x half> %b) {\n  %r = frem <8 x half> %a, %b\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <8 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "frem",
  "ty": "<16 x half>",
  "variant": "binop",
  "codesize": 4,
  "thru": 216,
  "lat": 4,
  "sizelat": 4,
  "size": 163,
  "gisize": 206,
  "extrasize": 0,
  "asm": "sub sp, sp, #96\nstr x30, [sp, #80]                  // 8-byte Folded Spill\nstp q0, q1, [sp]                    // 32-byte Folded Spill\nmov h1, v2.h[1]\nstp q3, q2, [sp, #32]               // 32-byte Folded Spill\nmov h3, v0.h[1]\nfcvt s1, h1\nfcvt s0, h3\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nfcvt s1, h1\nstr q0, [sp, #64]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldp q1, q2, [sp, #48]               // 32-byte Folded Reload\nmov h1, v1.h[2]\nmov v0.h[1], v2.h[0]\nfcvt s1, h1\nstr q0, [sp, #64]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[2]\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #64]                   // 16-byte Folded Reload\nmov v1.h[2], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[3]\nstr q1, [sp, #64]                   // 16-byte Folded Spill\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nmov h1, v1.h[3]\nfcvt s0, h0\nfcvt s1, h1\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #64]                   // 16-byte Folded Reload\nmov v1.h[3], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[4]\nstr q1, [sp, #64]                   // 16-byte Folded Spill\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nmov h1, v1.h[4]\nfcvt s0, h0\nfcvt s1, h1\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #64]                   // 16-byte Folded Reload\nmov v1.h[4], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[5]\nstr q1, [sp, #64]                   // 16-byte Folded Spill\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nmov h1, v1.h[5]\nfcvt s0, h0\nfcvt s1, h1\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #64]                   // 16-byte Folded Reload\nmov v1.h[5], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[6]\nstr q1, [sp, #64]                   // 16-byte Folded Spill\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nmov h1, v1.h[6]\nfcvt s0, h0\nfcvt s1, h1\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #64]                   // 16-byte Folded Reload\nmov v1.h[6], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[7]\nstr q1, [sp, #64]                   // 16-byte Folded Spill\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nmov h1, v1.h[7]\nfcvt s0, h0\nfcvt s1, h1\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #64]                   // 16-byte Folded Reload\nmov v1.h[7], v0.h[0]\nstr q1, [sp, #64]                   // 16-byte Folded Spill\nldp q0, q1, [sp, #16]               // 32-byte Folded Reload\nmov h0, v0.h[1]\nmov h1, v1.h[1]\nfcvt s0, h0\nfcvt s1, h1\nbl fmodf\nfcvt h0, s0\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nldp q0, q1, [sp, #16]               // 32-byte Folded Reload\nfcvt s0, h0\nfcvt s1, h1\nbl fmodf\nfcvt h0, s0\nldp q1, q2, [sp, #32]               // 32-byte Folded Reload\nmov h1, v1.h[2]\nmov v0.h[1], v2.h[0]\nfcvt s1, h1\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[2]\nfcvt s0, h0\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nmov v1.h[2], v0.h[0]\nstr q1, [sp, #48]                   // 16-byte Folded Spill\nldp q0, q1, [sp, #16]               // 32-byte Folded Reload\nmov h0, v0.h[3]\nmov h1, v1.h[3]\nfcvt s0, h0\nfcvt s1, h1\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nmov v1.h[3], v0.h[0]\nstr q1, [sp, #48]                   // 16-byte Folded Spill\nldp q0, q1, [sp, #16]               // 32-byte Folded Reload\nmov h0, v0.h[4]\nmov h1, v1.h[4]\nfcvt s0, h0\nfcvt s1, h1\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nmov v1.h[4], v0.h[0]\nstr q1, [sp, #48]                   // 16-byte Folded Spill\nldp q0, q1, [sp, #16]               // 32-byte Folded Reload\nmov h0, v0.h[5]\nmov h1, v1.h[5]\nfcvt s0, h0\nfcvt s1, h1\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nmov v1.h[5], v0.h[0]\nstr q1, [sp, #48]                   // 16-byte Folded Spill\nldp q0, q1, [sp, #16]               // 32-byte Folded Reload\nmov h0, v0.h[6]\nmov h1, v1.h[6]\nfcvt s0, h0\nfcvt s1, h1\nbl fmodf\nfcvt h0, s0\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nmov v1.h[6], v0.h[0]\nstr q1, [sp, #48]                   // 16-byte Folded Spill\nldp q0, q1, [sp, #16]               // 32-byte Folded Reload\nmov h0, v0.h[7]\nmov h1, v1.h[7]\nfcvt s0, h0\nfcvt s1, h1\nbl fmodf\nfmov s1, s0\nldr x30, [sp, #80]                  // 8-byte Folded Reload\nfcvt h2, s1\nldp q1, q0, [sp, #48]               // 32-byte Folded Reload\nmov v1.h[7], v2.h[0]\nadd sp, sp, #96\nret",
  "giasm": "sub sp, sp, #448\nstp d15, d14, [sp, #368]            // 16-byte Folded Spill\nstp d13, d12, [sp, #384]            // 16-byte Folded Spill\nstp d11, d10, [sp, #400]            // 16-byte Folded Spill\nstp d9, d8, [sp, #416]              // 16-byte Folded Spill\nstp x29, x30, [sp, #432]            // 16-byte Folded Spill\nmov v4.16b, v1.16b\nstr q1, [sp, #112]                  // 16-byte Folded Spill\nmov h1, v0.h[4]\nmov h12, v0.h[1]\nmov h13, v0.h[2]\nstr q3, [sp, #16]                   // 16-byte Folded Spill\nmov h14, v0.h[3]\nmov h15, v2.h[1]\nmov h8, v2.h[2]\nmov h9, v2.h[3]\nmov h10, v2.h[4]\nmov h11, v2.h[5]\nstr h1, [sp, #272]                  // 2-byte Folded Spill\nmov h1, v0.h[5]\nstr h1, [sp, #240]                  // 2-byte Folded Spill\nmov h1, v0.h[6]\nstr h1, [sp, #176]                  // 2-byte Folded Spill\nmov h1, v0.h[7]\nfcvt s0, h0\nstr h1, [sp, #144]                  // 2-byte Folded Spill\nmov h1, v4.h[1]\nstr h1, [sp, #48]                   // 2-byte Folded Spill\nmov h1, v4.h[2]\nstr h1, [sp, #80]                   // 2-byte Folded Spill\nmov h1, v4.h[3]\nstr h1, [sp, #128]                  // 2-byte Folded Spill\nmov h1, v4.h[4]\nstr h1, [sp, #192]                  // 2-byte Folded Spill\nmov h1, v4.h[5]\nstr h1, [sp, #256]                  // 2-byte Folded Spill\nmov h1, v4.h[6]\nstr h1, [sp, #336]                  // 2-byte Folded Spill\nmov h1, v4.h[7]\nstr h1, [sp, #352]                  // 2-byte Folded Spill\nmov h1, v2.h[6]\nstr h1, [sp, #12]                   // 2-byte Folded Spill\nmov h1, v2.h[7]\nstr h1, [sp, #14]                   // 2-byte Folded Spill\nmov h1, v3.h[1]\nstr h1, [sp, #44]                   // 2-byte Folded Spill\nmov h1, v3.h[2]\nstr h1, [sp, #46]                   // 2-byte Folded Spill\nmov h1, v3.h[3]\nstr h1, [sp, #78]                   // 2-byte Folded Spill\nmov h1, v3.h[4]\nstr h1, [sp, #110]                  // 2-byte Folded Spill\nmov h1, v3.h[5]\nstr h1, [sp, #174]                  // 2-byte Folded Spill\nmov h1, v3.h[6]\nstr h1, [sp, #238]                  // 2-byte Folded Spill\nmov h1, v3.h[7]\nstr h1, [sp, #302]                  // 2-byte Folded Spill\nfcvt s1, h2\nbl fmodf\nfcvt s2, h12\nfcvt h0, s0\nfcvt s1, h15\nstr q0, [sp, #304]                  // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nfcvt s2, h13\nfcvt h0, s0\nfcvt s1, h8\nstr q0, [sp, #208]                  // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nfcvt s2, h14\nfcvt h0, s0\nfcvt s1, h9\nstr q0, [sp, #320]                  // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #272]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nfcvt s1, h10\nstr q0, [sp, #272]                  // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #240]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nfcvt s1, h11\nstr q0, [sp, #240]                  // 16-byte Folded Spill\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #176]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #176]                  // 16-byte Folded Spill\nldr h0, [sp, #12]                   // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #144]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #144]                  // 16-byte Folded Spill\nldr h0, [sp, #14]                   // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl fmodf\nldr q1, [sp, #112]                  // 16-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #112]                  // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #48]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nldr h0, [sp, #44]                   // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #80]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #80]                   // 16-byte Folded Spill\nldr h0, [sp, #46]                   // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #128]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #128]                  // 16-byte Folded Spill\nldr h0, [sp, #78]                   // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #192]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #192]                  // 16-byte Folded Spill\nldr h0, [sp, #110]                  // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #256]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #256]                  // 16-byte Folded Spill\nldr h0, [sp, #174]                  // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #336]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #336]                  // 16-byte Folded Spill\nldr h0, [sp, #238]                  // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl fmodf\nldr h1, [sp, #352]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #352]                  // 16-byte Folded Spill\nldr h0, [sp, #302]                  // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl fmodf\nldr q3, [sp, #304]                  // 16-byte Folded Reload\nldr q2, [sp, #208]                  // 16-byte Folded Reload\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nldp x29, x30, [sp, #432]            // 16-byte Folded Reload\nmov v3.h[1], v2.h[0]\nldr q2, [sp, #80]                   // 16-byte Folded Reload\nldp d9, d8, [sp, #416]              // 16-byte Folded Reload\nmov v1.h[1], v2.h[0]\nldr q2, [sp, #320]                  // 16-byte Folded Reload\nldp d11, d10, [sp, #400]            // 16-byte Folded Reload\nmov v3.h[2], v2.h[0]\nldr q2, [sp, #128]                  // 16-byte Folded Reload\nldp d13, d12, [sp, #384]            // 16-byte Folded Reload\nmov v1.h[2], v2.h[0]\nldr q2, [sp, #272]                  // 16-byte Folded Reload\nldp d15, d14, [sp, #368]            // 16-byte Folded Reload\nmov v3.h[3], v2.h[0]\nldr q2, [sp, #192]                  // 16-byte Folded Reload\nmov v1.h[3], v2.h[0]\nldp q4, q2, [sp, #240]              // 32-byte Folded Reload\nmov v3.h[4], v4.h[0]\nmov v1.h[4], v2.h[0]\nldr q2, [sp, #176]                  // 16-byte Folded Reload\nmov v3.h[5], v2.h[0]\nldr q2, [sp, #336]                  // 16-byte Folded Reload\nmov v1.h[5], v2.h[0]\nfcvt h2, s0\nldr q0, [sp, #144]                  // 16-byte Folded Reload\nmov v3.h[6], v0.h[0]\nldr q0, [sp, #352]                  // 16-byte Folded Reload\nmov v1.h[6], v0.h[0]\nldr q0, [sp, #112]                  // 16-byte Folded Reload\nmov v3.h[7], v0.h[0]\nmov v1.h[7], v2.h[0]\nmov v0.16b, v3.16b\nadd sp, sp, #448\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, <16 x half> %b) {\n  %r = frem <16 x half> %a, %b\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <16 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "frem",
  "ty": "<2 x float>",
  "variant": "binop",
  "codesize": 4,
  "thru": 24,
  "lat": 4,
  "sizelat": 4,
  "size": 13,
  "gisize": 15,
  "extrasize": 0,
  "asm": "sub sp, sp, #64\nstr x30, [sp, #48]                  // 8-byte Folded Spill\nstp q0, q1, [sp]                    // 32-byte Folded Spill\nmov s0, v0.s[1]\nmov s1, v1.s[1]\nbl fmodf\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldp q0, q1, [sp]                    // 32-byte Folded Reload\nbl fmodf\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nldr x30, [sp, #48]                  // 8-byte Folded Reload\nmov v0.s[1], v1.s[0]\nadd sp, sp, #64\nret",
  "giasm": "sub sp, sp, #48\nstp d9, d8, [sp, #16]               // 16-byte Folded Spill\nstr x30, [sp, #32]                  // 8-byte Folded Spill\nmov s8, v0.s[1]\nmov s9, v1.s[1]\nbl fmodf\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s1, s9\nfmov s0, s8\nbl fmodf\nldr q1, [sp]                        // 16-byte Folded Reload\nldp d9, d8, [sp, #16]               // 16-byte Folded Reload\nldr x30, [sp, #32]                  // 8-byte Folded Reload\nmov v1.s[1], v0.s[0]\nfmov d0, d1\nadd sp, sp, #48\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, <2 x float> %b) {\n  %r = frem <2 x float> %a, %b\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <2 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "frem",
  "ty": "<4 x float>",
  "variant": "binop",
  "codesize": 4,
  "thru": 52,
  "lat": 4,
  "sizelat": 4,
  "size": 27,
  "gisize": 34,
  "extrasize": 0,
  "asm": "sub sp, sp, #64\nstr x30, [sp, #48]                  // 8-byte Folded Spill\nstp q0, q1, [sp, #16]               // 32-byte Folded Spill\nmov s0, v0.s[1]\nmov s1, v1.s[1]\nbl fmodf\nstr q0, [sp]                        // 16-byte Folded Spill\nldp q0, q1, [sp, #16]               // 32-byte Folded Reload\nbl fmodf\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v0.s[1], v1.s[0]\nstr q0, [sp]                        // 16-byte Folded Spill\nldp q0, q1, [sp, #16]               // 32-byte Folded Reload\nmov s0, v0.s[2]\nmov s1, v1.s[2]\nbl fmodf\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v1.s[2], v0.s[0]\nstr q1, [sp]                        // 16-byte Folded Spill\nldp q0, q1, [sp, #16]               // 32-byte Folded Reload\nmov s0, v0.s[3]\nmov s1, v1.s[3]\nbl fmodf\nldr q1, [sp]                        // 16-byte Folded Reload\nldr x30, [sp, #48]                  // 8-byte Folded Reload\nmov v1.s[3], v0.s[0]\nmov v0.16b, v1.16b\nadd sp, sp, #64\nret",
  "giasm": "sub sp, sp, #112\nstp d13, d12, [sp, #48]             // 16-byte Folded Spill\nstp d11, d10, [sp, #64]             // 16-byte Folded Spill\nstp d9, d8, [sp, #80]               // 16-byte Folded Spill\nstr x30, [sp, #96]                  // 8-byte Folded Spill\nmov s8, v0.s[1]\nmov s9, v0.s[2]\nmov s10, v0.s[3]\nmov s11, v1.s[1]\nmov s12, v1.s[2]\nmov s13, v1.s[3]\nbl fmodf\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, s11\nfmov s0, s8\nbl fmodf\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, s12\nfmov s0, s9\nbl fmodf\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s1, s13\nfmov s0, s10\nbl fmodf\nldp q2, q1, [sp, #16]               // 32-byte Folded Reload\nldr x30, [sp, #96]                  // 8-byte Folded Reload\nldp d9, d8, [sp, #80]               // 16-byte Folded Reload\nldp d11, d10, [sp, #64]             // 16-byte Folded Reload\nmov v1.s[1], v2.s[0]\nldr q2, [sp]                        // 16-byte Folded Reload\nldp d13, d12, [sp, #48]             // 16-byte Folded Reload\nmov v1.s[2], v2.s[0]\nmov v1.s[3], v0.s[0]\nmov v0.16b, v1.16b\nadd sp, sp, #112\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, <4 x float> %b) {\n  %r = frem <4 x float> %a, %b\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <4 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "frem",
  "ty": "<8 x float>",
  "variant": "binop",
  "codesize": 4,
  "thru": 104,
  "lat": 4,
  "sizelat": 4,
  "size": 54,
  "gisize": 67,
  "extrasize": 0,
  "asm": "sub sp, sp, #96\nstr x30, [sp, #80]                  // 8-byte Folded Spill\nstp q0, q2, [sp]                    // 32-byte Folded Spill\nmov s0, v0.s[1]\nstp q1, q3, [sp, #32]               // 32-byte Folded Spill\nmov s1, v2.s[1]\nbl fmodf\nstr q0, [sp, #64]                   // 16-byte Folded Spill\nldp q0, q1, [sp]                    // 32-byte Folded Reload\nbl fmodf\nldr q1, [sp, #64]                   // 16-byte Folded Reload\nmov v0.s[1], v1.s[0]\nstr q0, [sp, #64]                   // 16-byte Folded Spill\nldp q0, q1, [sp]                    // 32-byte Folded Reload\nmov s0, v0.s[2]\nmov s1, v1.s[2]\nbl fmodf\nldr q1, [sp, #64]                   // 16-byte Folded Reload\nmov v1.s[2], v0.s[0]\nstr q1, [sp, #64]                   // 16-byte Folded Spill\nldp q0, q1, [sp]                    // 32-byte Folded Reload\nmov s0, v0.s[3]\nmov s1, v1.s[3]\nbl fmodf\nldr q1, [sp, #64]                   // 16-byte Folded Reload\nmov v1.s[3], v0.s[0]\nstr q1, [sp, #64]                   // 16-byte Folded Spill\nldp q0, q1, [sp, #32]               // 32-byte Folded Reload\nmov s0, v0.s[1]\nmov s1, v1.s[1]\nbl fmodf\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldp q0, q1, [sp, #32]               // 32-byte Folded Reload\nbl fmodf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v0.s[1], v1.s[0]\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldp q0, q1, [sp, #32]               // 32-byte Folded Reload\nmov s0, v0.s[2]\nmov s1, v1.s[2]\nbl fmodf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.s[2], v0.s[0]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nldp q0, q1, [sp, #32]               // 32-byte Folded Reload\nmov s0, v0.s[3]\nmov s1, v1.s[3]\nbl fmodf\nfmov s2, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nldr q0, [sp, #64]                   // 16-byte Folded Reload\nldr x30, [sp, #80]                  // 8-byte Folded Reload\nmov v1.s[3], v2.s[0]\nadd sp, sp, #96\nret",
  "giasm": "sub sp, sp, #208\nstp d15, d14, [sp, #128]            // 16-byte Folded Spill\nstp d13, d12, [sp, #144]            // 16-byte Folded Spill\nstp d11, d10, [sp, #160]            // 16-byte Folded Spill\nstp d9, d8, [sp, #176]              // 16-byte Folded Spill\nstr x30, [sp, #192]                 // 8-byte Folded Spill\nmov v4.16b, v1.16b\nmov v1.16b, v2.16b\nmov s8, v0.s[1]\nmov s9, v0.s[2]\nmov s10, v0.s[3]\nmov s12, v3.s[1]\nmov s11, v3.s[2]\nmov s2, v4.s[1]\nstp q3, q4, [sp]                    // 32-byte Folded Spill\nmov s5, v4.s[3]\nmov s14, v1.s[1]\nmov s15, v1.s[2]\nmov s13, v1.s[3]\nstr s2, [sp, #48]                   // 4-byte Folded Spill\nmov s2, v4.s[2]\nstr s2, [sp, #112]                  // 4-byte Folded Spill\nmov s2, v3.s[3]\nstp s2, s5, [sp, #200]              // 8-byte Folded Spill\nbl fmodf\nstr q0, [sp, #96]                   // 16-byte Folded Spill\nfmov s1, s14\nfmov s0, s8\nbl fmodf\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, s15\nfmov s0, s9\nbl fmodf\nstr q0, [sp, #80]                   // 16-byte Folded Spill\nfmov s1, s13\nfmov s0, s10\nbl fmodf\nstr q0, [sp, #64]                   // 16-byte Folded Spill\nldp q1, q0, [sp]                    // 32-byte Folded Reload\nbl fmodf\nfmov s1, s12\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr s0, [sp, #48]                   // 4-byte Folded Reload\nbl fmodf\nfmov s1, s11\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nldr s0, [sp, #112]                  // 4-byte Folded Reload\nbl fmodf\nstr q0, [sp, #112]                  // 16-byte Folded Spill\nldp s1, s0, [sp, #200]              // 8-byte Folded Reload\nbl fmodf\nldp q3, q2, [sp, #16]               // 32-byte Folded Reload\nldr q1, [sp, #96]                   // 16-byte Folded Reload\nldp d9, d8, [sp, #176]              // 16-byte Folded Reload\nldr x30, [sp, #192]                 // 8-byte Folded Reload\nldp d11, d10, [sp, #160]            // 16-byte Folded Reload\nmov v1.s[1], v2.s[0]\nldr q2, [sp, #48]                   // 16-byte Folded Reload\nldp d13, d12, [sp, #144]            // 16-byte Folded Reload\nmov v3.s[1], v2.s[0]\nldr q2, [sp, #80]                   // 16-byte Folded Reload\nldp d15, d14, [sp, #128]            // 16-byte Folded Reload\nmov v1.s[2], v2.s[0]\nldr q2, [sp, #112]                  // 16-byte Folded Reload\nmov v3.s[2], v2.s[0]\nldr q2, [sp, #64]                   // 16-byte Folded Reload\nmov v1.s[3], v2.s[0]\nmov v3.s[3], v0.s[0]\nmov v2.16b, v1.16b\nmov v1.16b, v3.16b\nmov v0.16b, v2.16b\nadd sp, sp, #208\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, <8 x float> %b) {\n  %r = frem <8 x float> %a, %b\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <8 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "frem",
  "ty": "<2 x double>",
  "variant": "binop",
  "codesize": 4,
  "thru": 24,
  "lat": 4,
  "sizelat": 4,
  "size": 13,
  "gisize": 13,
  "extrasize": 0,
  "asm": "sub sp, sp, #64\nstr x30, [sp, #48]                  // 8-byte Folded Spill\nstp q0, q1, [sp]                    // 32-byte Folded Spill\nmov d0, v0.d[1]\nmov d1, v1.d[1]\nbl fmod\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldp q0, q1, [sp]                    // 32-byte Folded Reload\nbl fmod\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nldr x30, [sp, #48]                  // 8-byte Folded Reload\nmov v0.d[1], v1.d[0]\nadd sp, sp, #64\nret",
  "giasm": "sub sp, sp, #48\nstp d9, d8, [sp, #16]               // 16-byte Folded Spill\nstr x30, [sp, #32]                  // 8-byte Folded Spill\nmov d8, v0.d[1]\nmov d9, v1.d[1]\nbl fmod\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov d1, d9\nfmov d0, d8\nbl fmod\nldr q1, [sp]                        // 16-byte Folded Reload\nldp d9, d8, [sp, #16]               // 16-byte Folded Reload\nldr x30, [sp, #32]                  // 8-byte Folded Reload\nmov v1.d[1], v0.d[0]\nmov v0.16b, v1.16b\nadd sp, sp, #48\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, <2 x double> %b) {\n  %r = frem <2 x double> %a, %b\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <2 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "frem",
  "ty": "<4 x double>",
  "variant": "binop",
  "codesize": 4,
  "thru": 48,
  "lat": 4,
  "sizelat": 4,
  "size": 24,
  "gisize": 27,
  "extrasize": 0,
  "asm": "sub sp, sp, #96\nstr x30, [sp, #80]                  // 8-byte Folded Spill\nstp q0, q2, [sp]                    // 32-byte Folded Spill\nmov d0, v0.d[1]\nstp q1, q3, [sp, #48]               // 32-byte Folded Spill\nmov d1, v2.d[1]\nbl fmod\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldp q0, q1, [sp]                    // 32-byte Folded Reload\nbl fmod\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v0.d[1], v1.d[0]\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldp q0, q1, [sp, #48]               // 32-byte Folded Reload\nmov d0, v0.d[1]\nmov d1, v1.d[1]\nbl fmod\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldp q0, q1, [sp, #48]               // 32-byte Folded Reload\nbl fmod\nfmov d1, d0\nldp q2, q0, [sp, #16]               // 32-byte Folded Reload\nldr x30, [sp, #80]                  // 8-byte Folded Reload\nmov v1.d[1], v2.d[0]\nadd sp, sp, #96\nret",
  "giasm": "sub sp, sp, #112\nstp d11, d10, [sp, #64]             // 16-byte Folded Spill\nstp d9, d8, [sp, #80]               // 16-byte Folded Spill\nstr x30, [sp, #96]                  // 8-byte Folded Spill\nmov v4.16b, v1.16b\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nmov v1.16b, v2.16b\nstr q3, [sp]                        // 16-byte Folded Spill\nmov d8, v0.d[1]\nmov d10, v2.d[1]\nmov d11, v3.d[1]\nmov d9, v4.d[1]\nbl fmod\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nfmov d1, d10\nfmov d0, d8\nbl fmod\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q1, [sp]                        // 16-byte Folded Reload\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nbl fmod\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov d1, d11\nfmov d0, d9\nbl fmod\nldp q3, q1, [sp, #16]               // 32-byte Folded Reload\nldr q2, [sp, #48]                   // 16-byte Folded Reload\nldp d9, d8, [sp, #80]               // 16-byte Folded Reload\nldr x30, [sp, #96]                  // 8-byte Folded Reload\nldp d11, d10, [sp, #64]             // 16-byte Folded Reload\nmov v2.d[1], v3.d[0]\nmov v1.d[1], v0.d[0]\nmov v0.16b, v2.16b\nadd sp, sp, #112\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, <4 x double> %b) {\n  %r = frem <4 x double> %a, %b\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = frem <4 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "minnum",
  "ty": "half",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fminnm h0, h0, h1\nret",
  "giasm": "fminnm h0, h0, h1\nret",
  "ll": "define half @test(half %a, half %b) {\n  %r = call half @llvm.minnum(half %a, half %b)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call half @llvm.minnum.f16(half %a, half %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "minnum",
  "ty": "float",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fminnm s0, s0, s1\nret",
  "giasm": "fminnm s0, s0, s1\nret",
  "ll": "define float @test(float %a, float %b) {\n  %r = call float @llvm.minnum(float %a, float %b)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call float @llvm.minnum.f32(float %a, float %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "minnum",
  "ty": "double",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fminnm d0, d0, d1\nret",
  "giasm": "fminnm d0, d0, d1\nret",
  "ll": "define double @test(double %a, double %b) {\n  %r = call double @llvm.minnum(double %a, double %b)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call double @llvm.minnum.f64(double %a, double %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "minnum",
  "ty": "<4 x half>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fminnm v0.4h, v0.4h, v1.4h\nret",
  "giasm": "fminnm v0.4h, v0.4h, v1.4h\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, <4 x half> %b) {\n  %r = call <4 x half> @llvm.minnum(<4 x half> %a, <4 x half> %b)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x half> @llvm.minnum.v4f16(<4 x half> %a, <4 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "minnum",
  "ty": "<8 x half>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fminnm v0.8h, v0.8h, v1.8h\nret",
  "giasm": "fminnm v0.8h, v0.8h, v1.8h\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, <8 x half> %b) {\n  %r = call <8 x half> @llvm.minnum(<8 x half> %a, <8 x half> %b)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <8 x half> @llvm.minnum.v8f16(<8 x half> %a, <8 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "minnum",
  "ty": "<16 x half>",
  "variant": "binop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fminnm v1.8h, v1.8h, v3.8h\nfminnm v0.8h, v0.8h, v2.8h\nret",
  "giasm": "fminnm v0.8h, v0.8h, v2.8h\nfminnm v1.8h, v1.8h, v3.8h\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, <16 x half> %b) {\n  %r = call <16 x half> @llvm.minnum(<16 x half> %a, <16 x half> %b)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <16 x half> @llvm.minnum.v16f16(<16 x half> %a, <16 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "minnum",
  "ty": "<2 x float>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fminnm v0.2s, v0.2s, v1.2s\nret",
  "giasm": "fminnm v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, <2 x float> %b) {\n  %r = call <2 x float> @llvm.minnum(<2 x float> %a, <2 x float> %b)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x float> @llvm.minnum.v2f32(<2 x float> %a, <2 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "minnum",
  "ty": "<4 x float>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fminnm v0.4s, v0.4s, v1.4s\nret",
  "giasm": "fminnm v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, <4 x float> %b) {\n  %r = call <4 x float> @llvm.minnum(<4 x float> %a, <4 x float> %b)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x float> @llvm.minnum.v4f32(<4 x float> %a, <4 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "minnum",
  "ty": "<8 x float>",
  "variant": "binop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fminnm v1.4s, v1.4s, v3.4s\nfminnm v0.4s, v0.4s, v2.4s\nret",
  "giasm": "fminnm v0.4s, v0.4s, v2.4s\nfminnm v1.4s, v1.4s, v3.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, <8 x float> %b) {\n  %r = call <8 x float> @llvm.minnum(<8 x float> %a, <8 x float> %b)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x float> @llvm.minnum.v8f32(<8 x float> %a, <8 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "minnum",
  "ty": "<2 x double>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fminnm v0.2d, v0.2d, v1.2d\nret",
  "giasm": "fminnm v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, <2 x double> %b) {\n  %r = call <2 x double> @llvm.minnum(<2 x double> %a, <2 x double> %b)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x double> @llvm.minnum.v2f64(<2 x double> %a, <2 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "minnum",
  "ty": "<4 x double>",
  "variant": "binop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fminnm v1.2d, v1.2d, v3.2d\nfminnm v0.2d, v0.2d, v2.2d\nret",
  "giasm": "fminnm v0.2d, v0.2d, v2.2d\nfminnm v1.2d, v1.2d, v3.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, <4 x double> %b) {\n  %r = call <4 x double> @llvm.minnum(<4 x double> %a, <4 x double> %b)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x double> @llvm.minnum.v4f64(<4 x double> %a, <4 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "maxnum",
  "ty": "half",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmaxnm h0, h0, h1\nret",
  "giasm": "fmaxnm h0, h0, h1\nret",
  "ll": "define half @test(half %a, half %b) {\n  %r = call half @llvm.maxnum(half %a, half %b)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call half @llvm.maxnum.f16(half %a, half %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "maxnum",
  "ty": "float",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmaxnm s0, s0, s1\nret",
  "giasm": "fmaxnm s0, s0, s1\nret",
  "ll": "define float @test(float %a, float %b) {\n  %r = call float @llvm.maxnum(float %a, float %b)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call float @llvm.maxnum.f32(float %a, float %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "maxnum",
  "ty": "double",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmaxnm d0, d0, d1\nret",
  "giasm": "fmaxnm d0, d0, d1\nret",
  "ll": "define double @test(double %a, double %b) {\n  %r = call double @llvm.maxnum(double %a, double %b)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call double @llvm.maxnum.f64(double %a, double %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "maxnum",
  "ty": "<4 x half>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmaxnm v0.4h, v0.4h, v1.4h\nret",
  "giasm": "fmaxnm v0.4h, v0.4h, v1.4h\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, <4 x half> %b) {\n  %r = call <4 x half> @llvm.maxnum(<4 x half> %a, <4 x half> %b)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x half> @llvm.maxnum.v4f16(<4 x half> %a, <4 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<8 x half>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmaxnm v0.8h, v0.8h, v1.8h\nret",
  "giasm": "fmaxnm v0.8h, v0.8h, v1.8h\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, <8 x half> %b) {\n  %r = call <8 x half> @llvm.maxnum(<8 x half> %a, <8 x half> %b)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <8 x half> @llvm.maxnum.v8f16(<8 x half> %a, <8 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<16 x half>",
  "variant": "binop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmaxnm v1.8h, v1.8h, v3.8h\nfmaxnm v0.8h, v0.8h, v2.8h\nret",
  "giasm": "fmaxnm v0.8h, v0.8h, v2.8h\nfmaxnm v1.8h, v1.8h, v3.8h\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, <16 x half> %b) {\n  %r = call <16 x half> @llvm.maxnum(<16 x half> %a, <16 x half> %b)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <16 x half> @llvm.maxnum.v16f16(<16 x half> %a, <16 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<2 x float>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmaxnm v0.2s, v0.2s, v1.2s\nret",
  "giasm": "fmaxnm v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, <2 x float> %b) {\n  %r = call <2 x float> @llvm.maxnum(<2 x float> %a, <2 x float> %b)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x float> @llvm.maxnum.v2f32(<2 x float> %a, <2 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<4 x float>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmaxnm v0.4s, v0.4s, v1.4s\nret",
  "giasm": "fmaxnm v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, <4 x float> %b) {\n  %r = call <4 x float> @llvm.maxnum(<4 x float> %a, <4 x float> %b)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x float> @llvm.maxnum.v4f32(<4 x float> %a, <4 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<8 x float>",
  "variant": "binop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmaxnm v1.4s, v1.4s, v3.4s\nfmaxnm v0.4s, v0.4s, v2.4s\nret",
  "giasm": "fmaxnm v0.4s, v0.4s, v2.4s\nfmaxnm v1.4s, v1.4s, v3.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, <8 x float> %b) {\n  %r = call <8 x float> @llvm.maxnum(<8 x float> %a, <8 x float> %b)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x float> @llvm.maxnum.v8f32(<8 x float> %a, <8 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<2 x double>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmaxnm v0.2d, v0.2d, v1.2d\nret",
  "giasm": "fmaxnm v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, <2 x double> %b) {\n  %r = call <2 x double> @llvm.maxnum(<2 x double> %a, <2 x double> %b)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x double> @llvm.maxnum.v2f64(<2 x double> %a, <2 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "maxnum",
  "ty": "<4 x double>",
  "variant": "binop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmaxnm v1.2d, v1.2d, v3.2d\nfmaxnm v0.2d, v0.2d, v2.2d\nret",
  "giasm": "fmaxnm v0.2d, v0.2d, v2.2d\nfmaxnm v1.2d, v1.2d, v3.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, <4 x double> %b) {\n  %r = call <4 x double> @llvm.maxnum(<4 x double> %a, <4 x double> %b)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x double> @llvm.maxnum.v4f64(<4 x double> %a, <4 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "minimum",
  "ty": "half",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmin h0, h0, h1\nret",
  "giasm": "fmin h0, h0, h1\nret",
  "ll": "define half @test(half %a, half %b) {\n  %r = call half @llvm.minimum(half %a, half %b)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call half @llvm.minimum.f16(half %a, half %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "minimum",
  "ty": "float",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmin s0, s0, s1\nret",
  "giasm": "fmin s0, s0, s1\nret",
  "ll": "define float @test(float %a, float %b) {\n  %r = call float @llvm.minimum(float %a, float %b)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call float @llvm.minimum.f32(float %a, float %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "minimum",
  "ty": "double",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmin d0, d0, d1\nret",
  "giasm": "fmin d0, d0, d1\nret",
  "ll": "define double @test(double %a, double %b) {\n  %r = call double @llvm.minimum(double %a, double %b)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call double @llvm.minimum.f64(double %a, double %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "minimum",
  "ty": "<4 x half>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmin v0.4h, v0.4h, v1.4h\nret",
  "giasm": "fmin v0.4h, v0.4h, v1.4h\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, <4 x half> %b) {\n  %r = call <4 x half> @llvm.minimum(<4 x half> %a, <4 x half> %b)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x half> @llvm.minimum.v4f16(<4 x half> %a, <4 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "minimum",
  "ty": "<8 x half>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmin v0.8h, v0.8h, v1.8h\nret",
  "giasm": "fmin v0.8h, v0.8h, v1.8h\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, <8 x half> %b) {\n  %r = call <8 x half> @llvm.minimum(<8 x half> %a, <8 x half> %b)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <8 x half> @llvm.minimum.v8f16(<8 x half> %a, <8 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "minimum",
  "ty": "<16 x half>",
  "variant": "binop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmin v1.8h, v1.8h, v3.8h\nfmin v0.8h, v0.8h, v2.8h\nret",
  "giasm": "fmin v0.8h, v0.8h, v2.8h\nfmin v1.8h, v1.8h, v3.8h\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, <16 x half> %b) {\n  %r = call <16 x half> @llvm.minimum(<16 x half> %a, <16 x half> %b)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <16 x half> @llvm.minimum.v16f16(<16 x half> %a, <16 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "minimum",
  "ty": "<2 x float>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmin v0.2s, v0.2s, v1.2s\nret",
  "giasm": "fmin v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, <2 x float> %b) {\n  %r = call <2 x float> @llvm.minimum(<2 x float> %a, <2 x float> %b)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x float> @llvm.minimum.v2f32(<2 x float> %a, <2 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "minimum",
  "ty": "<4 x float>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmin v0.4s, v0.4s, v1.4s\nret",
  "giasm": "fmin v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, <4 x float> %b) {\n  %r = call <4 x float> @llvm.minimum(<4 x float> %a, <4 x float> %b)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x float> @llvm.minimum.v4f32(<4 x float> %a, <4 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "minimum",
  "ty": "<8 x float>",
  "variant": "binop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmin v1.4s, v1.4s, v3.4s\nfmin v0.4s, v0.4s, v2.4s\nret",
  "giasm": "fmin v0.4s, v0.4s, v2.4s\nfmin v1.4s, v1.4s, v3.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, <8 x float> %b) {\n  %r = call <8 x float> @llvm.minimum(<8 x float> %a, <8 x float> %b)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x float> @llvm.minimum.v8f32(<8 x float> %a, <8 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "minimum",
  "ty": "<2 x double>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmin v0.2d, v0.2d, v1.2d\nret",
  "giasm": "fmin v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, <2 x double> %b) {\n  %r = call <2 x double> @llvm.minimum(<2 x double> %a, <2 x double> %b)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x double> @llvm.minimum.v2f64(<2 x double> %a, <2 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "minimum",
  "ty": "<4 x double>",
  "variant": "binop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmin v1.2d, v1.2d, v3.2d\nfmin v0.2d, v0.2d, v2.2d\nret",
  "giasm": "fmin v0.2d, v0.2d, v2.2d\nfmin v1.2d, v1.2d, v3.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, <4 x double> %b) {\n  %r = call <4 x double> @llvm.minimum(<4 x double> %a, <4 x double> %b)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x double> @llvm.minimum.v4f64(<4 x double> %a, <4 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "maximum",
  "ty": "half",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmax h0, h0, h1\nret",
  "giasm": "fmax h0, h0, h1\nret",
  "ll": "define half @test(half %a, half %b) {\n  %r = call half @llvm.maximum(half %a, half %b)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call half @llvm.maximum.f16(half %a, half %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "maximum",
  "ty": "float",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmax s0, s0, s1\nret",
  "giasm": "fmax s0, s0, s1\nret",
  "ll": "define float @test(float %a, float %b) {\n  %r = call float @llvm.maximum(float %a, float %b)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call float @llvm.maximum.f32(float %a, float %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "maximum",
  "ty": "double",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmax d0, d0, d1\nret",
  "giasm": "fmax d0, d0, d1\nret",
  "ll": "define double @test(double %a, double %b) {\n  %r = call double @llvm.maximum(double %a, double %b)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call double @llvm.maximum.f64(double %a, double %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "maximum",
  "ty": "<4 x half>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmax v0.4h, v0.4h, v1.4h\nret",
  "giasm": "fmax v0.4h, v0.4h, v1.4h\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, <4 x half> %b) {\n  %r = call <4 x half> @llvm.maximum(<4 x half> %a, <4 x half> %b)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x half> @llvm.maximum.v4f16(<4 x half> %a, <4 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "maximum",
  "ty": "<8 x half>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmax v0.8h, v0.8h, v1.8h\nret",
  "giasm": "fmax v0.8h, v0.8h, v1.8h\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, <8 x half> %b) {\n  %r = call <8 x half> @llvm.maximum(<8 x half> %a, <8 x half> %b)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <8 x half> @llvm.maximum.v8f16(<8 x half> %a, <8 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "maximum",
  "ty": "<16 x half>",
  "variant": "binop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmax v1.8h, v1.8h, v3.8h\nfmax v0.8h, v0.8h, v2.8h\nret",
  "giasm": "fmax v0.8h, v0.8h, v2.8h\nfmax v1.8h, v1.8h, v3.8h\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, <16 x half> %b) {\n  %r = call <16 x half> @llvm.maximum(<16 x half> %a, <16 x half> %b)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <16 x half> @llvm.maximum.v16f16(<16 x half> %a, <16 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "maximum",
  "ty": "<2 x float>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmax v0.2s, v0.2s, v1.2s\nret",
  "giasm": "fmax v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, <2 x float> %b) {\n  %r = call <2 x float> @llvm.maximum(<2 x float> %a, <2 x float> %b)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x float> @llvm.maximum.v2f32(<2 x float> %a, <2 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "maximum",
  "ty": "<4 x float>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmax v0.4s, v0.4s, v1.4s\nret",
  "giasm": "fmax v0.4s, v0.4s, v1.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, <4 x float> %b) {\n  %r = call <4 x float> @llvm.maximum(<4 x float> %a, <4 x float> %b)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x float> @llvm.maximum.v4f32(<4 x float> %a, <4 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "maximum",
  "ty": "<8 x float>",
  "variant": "binop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmax v1.4s, v1.4s, v3.4s\nfmax v0.4s, v0.4s, v2.4s\nret",
  "giasm": "fmax v0.4s, v0.4s, v2.4s\nfmax v1.4s, v1.4s, v3.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, <8 x float> %b) {\n  %r = call <8 x float> @llvm.maximum(<8 x float> %a, <8 x float> %b)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x float> @llvm.maximum.v8f32(<8 x float> %a, <8 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "maximum",
  "ty": "<2 x double>",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmax v0.2d, v0.2d, v1.2d\nret",
  "giasm": "fmax v0.2d, v0.2d, v1.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, <2 x double> %b) {\n  %r = call <2 x double> @llvm.maximum(<2 x double> %a, <2 x double> %b)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x double> @llvm.maximum.v2f64(<2 x double> %a, <2 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "maximum",
  "ty": "<4 x double>",
  "variant": "binop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmax v1.2d, v1.2d, v3.2d\nfmax v0.2d, v0.2d, v2.2d\nret",
  "giasm": "fmax v0.2d, v0.2d, v2.2d\nfmax v1.2d, v1.2d, v3.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, <4 x double> %b) {\n  %r = call <4 x double> @llvm.maximum(<4 x double> %a, <4 x double> %b)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x double> @llvm.maximum.v4f64(<4 x double> %a, <4 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "copysign",
  "ty": "half",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "mvni v2.8h, #128, lsl #8\nbif v0.16b, v1.16b, v2.16b\nret",
  "giasm": "mvni v2.4h, #128, lsl #8\nbif v0.8b, v1.8b, v2.8b\nret",
  "ll": "define half @test(half %a, half %b) {\n  %r = call half @llvm.copysign(half %a, half %b)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call half @llvm.copysign.f16(half %a, half %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "copysign",
  "ty": "float",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "mvni v2.4s, #128, lsl #24\nbif v0.16b, v1.16b, v2.16b\nret",
  "giasm": "mvni v2.2s, #128, lsl #24\nbif v0.8b, v1.8b, v2.8b\nret",
  "ll": "define float @test(float %a, float %b) {\n  %r = call float @llvm.copysign(float %a, float %b)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call float @llvm.copysign.f32(float %a, float %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "copysign",
  "ty": "double",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "movi v2.2d, #0xffffffffffffffff\nfneg v2.2d, v2.2d\nbif v0.16b, v1.16b, v2.16b\nret",
  "giasm": "movi v2.2d, #0xffffffffffffffff\nfneg v2.2d, v2.2d\nbif v0.16b, v1.16b, v2.16b\nret",
  "ll": "define double @test(double %a, double %b) {\n  %r = call double @llvm.copysign(double %a, double %b)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call double @llvm.copysign.f64(double %a, double %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "copysign",
  "ty": "<4 x half>",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "mvni v2.4h, #128, lsl #8\nbif v0.8b, v1.8b, v2.8b\nret",
  "giasm": "mvni v2.4h, #128, lsl #8\nbif v0.8b, v1.8b, v2.8b\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, <4 x half> %b) {\n  %r = call <4 x half> @llvm.copysign(<4 x half> %a, <4 x half> %b)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <4 x half> @llvm.copysign.v4f16(<4 x half> %a, <4 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "copysign",
  "ty": "<8 x half>",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "mvni v2.8h, #128, lsl #8\nbif v0.16b, v1.16b, v2.16b\nret",
  "giasm": "mvni v2.8h, #128, lsl #8\nbif v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, <8 x half> %b) {\n  %r = call <8 x half> @llvm.copysign(<8 x half> %a, <8 x half> %b)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <8 x half> @llvm.copysign.v8f16(<8 x half> %a, <8 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "copysign",
  "ty": "<16 x half>",
  "variant": "binop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "mvni v4.8h, #128, lsl #8\nbif v0.16b, v2.16b, v4.16b\nbif v1.16b, v3.16b, v4.16b\nret",
  "giasm": "mvni v4.8h, #128, lsl #8\nbif v0.16b, v2.16b, v4.16b\nbif v1.16b, v3.16b, v4.16b\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, <16 x half> %b) {\n  %r = call <16 x half> @llvm.copysign(<16 x half> %a, <16 x half> %b)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <16 x half> @llvm.copysign.v16f16(<16 x half> %a, <16 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "copysign",
  "ty": "<2 x float>",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "mvni v2.2s, #128, lsl #24\nbif v0.8b, v1.8b, v2.8b\nret",
  "giasm": "mvni v2.2s, #128, lsl #24\nbif v0.8b, v1.8b, v2.8b\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, <2 x float> %b) {\n  %r = call <2 x float> @llvm.copysign(<2 x float> %a, <2 x float> %b)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <2 x float> @llvm.copysign.v2f32(<2 x float> %a, <2 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "copysign",
  "ty": "<4 x float>",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "mvni v2.4s, #128, lsl #24\nbif v0.16b, v1.16b, v2.16b\nret",
  "giasm": "mvni v2.4s, #128, lsl #24\nbif v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, <4 x float> %b) {\n  %r = call <4 x float> @llvm.copysign(<4 x float> %a, <4 x float> %b)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <4 x float> @llvm.copysign.v4f32(<4 x float> %a, <4 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "copysign",
  "ty": "<8 x float>",
  "variant": "binop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "mvni v4.4s, #128, lsl #24\nbif v0.16b, v2.16b, v4.16b\nbif v1.16b, v3.16b, v4.16b\nret",
  "giasm": "mvni v4.4s, #128, lsl #24\nbif v0.16b, v2.16b, v4.16b\nbif v1.16b, v3.16b, v4.16b\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, <8 x float> %b) {\n  %r = call <8 x float> @llvm.copysign(<8 x float> %a, <8 x float> %b)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x float> @llvm.copysign.v8f32(<8 x float> %a, <8 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "copysign",
  "ty": "<2 x double>",
  "variant": "binop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "movi v2.2d, #0xffffffffffffffff\nfneg v2.2d, v2.2d\nbif v0.16b, v1.16b, v2.16b\nret",
  "giasm": "movi v2.2d, #0xffffffffffffffff\nfneg v2.2d, v2.2d\nbif v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, <2 x double> %b) {\n  %r = call <2 x double> @llvm.copysign(<2 x double> %a, <2 x double> %b)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call <2 x double> @llvm.copysign.v2f64(<2 x double> %a, <2 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "copysign",
  "ty": "<4 x double>",
  "variant": "binop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "movi v4.2d, #0xffffffffffffffff\nfneg v4.2d, v4.2d\nbif v0.16b, v2.16b, v4.16b\nbif v1.16b, v3.16b, v4.16b\nret",
  "giasm": "movi v4.2d, #0xffffffffffffffff\nfneg v4.2d, v4.2d\nbif v0.16b, v2.16b, v4.16b\nbif v1.16b, v3.16b, v4.16b\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, <4 x double> %b) {\n  %r = call <4 x double> @llvm.copysign(<4 x double> %a, <4 x double> %b)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x double> @llvm.copysign.v4f64(<4 x double> %a, <4 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "pow",
  "ty": "half",
  "variant": "binop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 6,
  "gisize": 6,
  "extrasize": 0,
  "asm": "str x30, [sp, #-16]!                // 8-byte Folded Spill\nfcvt s0, h0\nfcvt s1, h1\nbl powf\nfcvt h0, s0\nldr x30, [sp], #16                  // 8-byte Folded Reload\nret",
  "giasm": "str x30, [sp, #-16]!                // 8-byte Folded Spill\nfcvt s0, h0\nfcvt s1, h1\nbl powf\nfcvt h0, s0\nldr x30, [sp], #16                  // 8-byte Folded Reload\nret",
  "ll": "define half @test(half %a, half %b) {\n  %r = call half @llvm.pow(half %a, half %b)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call half @llvm.pow.f16(half %a, half %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "pow",
  "ty": "float",
  "variant": "binop",
  "codesize": 1,
  "thru": 10,
  "lat": 10,
  "sizelat": 10,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "b powf",
  "giasm": "b powf",
  "ll": "define float @test(float %a, float %b) {\n  %r = call float @llvm.pow(float %a, float %b)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call float @llvm.pow.f32(float %a, float %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "pow",
  "ty": "double",
  "variant": "binop",
  "codesize": 1,
  "thru": 10,
  "lat": 10,
  "sizelat": 10,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "b pow",
  "giasm": "b pow",
  "ll": "define double @test(double %a, double %b) {\n  %r = call double @llvm.pow(double %a, double %b)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call double @llvm.pow.f64(double %a, double %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "pow",
  "ty": "<4 x half>",
  "variant": "binop",
  "codesize": 13,
  "thru": 22,
  "lat": 22,
  "sizelat": 22,
  "size": 42,
  "gisize": 43,
  "extrasize": 0,
  "asm": "sub sp, sp, #64\nstr x30, [sp, #48]                  // 8-byte Folded Spill\nmov h3, v0.h[1]\nmov h2, v1.h[1]\nstp q0, q1, [sp, #16]               // 32-byte Folded Spill\nfcvt s0, h3\nfcvt s1, h2\nbl powf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp]                        // 16-byte Folded Spill\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl powf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nfcvt h3, s0\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nmov h1, v1.h[2]\nmov h2, v0.h[2]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov v3.h[1], v0.h[0]\nfcvt s0, h1\nfcvt s1, h2\nstr q3, [sp]                        // 16-byte Folded Spill\nbl powf\nldp q1, q2, [sp, #16]               // 32-byte Folded Reload\nfcvt h0, s0\nldr q3, [sp]                        // 16-byte Folded Reload\nmov h1, v1.h[3]\nmov h2, v2.h[3]\nmov v3.h[2], v0.h[0]\nfcvt s0, h1\nfcvt s1, h2\nstr q3, [sp]                        // 16-byte Folded Spill\nbl powf\nfcvt h1, s0\nldr q0, [sp]                        // 16-byte Folded Reload\nldr x30, [sp, #48]                  // 8-byte Folded Reload\nmov v0.h[3], v1.h[0]\nadd sp, sp, #64\nret",
  "giasm": "sub sp, sp, #112\nstp d13, d12, [sp, #48]             // 16-byte Folded Spill\nstp d11, d10, [sp, #64]             // 16-byte Folded Spill\nstp d9, d8, [sp, #80]               // 16-byte Folded Spill\nstr x30, [sp, #96]                  // 8-byte Folded Spill\nmov h8, v0.h[1]\nmov h9, v0.h[2]\nmov h10, v0.h[3]\nmov h11, v1.h[1]\nmov h12, v1.h[2]\nmov h13, v1.h[3]\nfcvt s0, h0\nfcvt s1, h1\nbl powf\nfcvt s2, h8\nfcvt h0, s0\nfcvt s1, h11\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nfcvt s2, h9\nfcvt h0, s0\nfcvt s1, h12\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nfcvt s2, h10\nfcvt h0, s0\nfcvt s1, h13\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nldp q3, q2, [sp]                    // 32-byte Folded Reload\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nldp d9, d8, [sp, #80]               // 16-byte Folded Reload\nldp d11, d10, [sp, #64]             // 16-byte Folded Reload\nldr x30, [sp, #96]                  // 8-byte Folded Reload\nmov v1.h[1], v3.h[0]\nldp d13, d12, [sp, #48]             // 16-byte Folded Reload\nmov v1.h[2], v2.h[0]\nmov v1.h[3], v0.h[0]\nmov v0.16b, v1.16b\nadd sp, sp, #112\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, <4 x half> %b) {\n  %r = call <4 x half> @llvm.pow(<4 x half> %a, <4 x half> %b)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 13 for instruction:   %r = call <4 x half> @llvm.pow.v4f16(<4 x half> %a, <4 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "pow",
  "ty": "<8 x half>",
  "variant": "binop",
  "codesize": 29,
  "thru": 50,
  "lat": 50,
  "sizelat": 50,
  "size": 79,
  "gisize": 96,
  "extrasize": 0,
  "asm": "sub sp, sp, #64\nstr x30, [sp, #48]                  // 8-byte Folded Spill\nmov h3, v0.h[1]\nmov h2, v1.h[1]\nstp q0, q1, [sp]                    // 32-byte Folded Spill\nfcvt s0, h3\nfcvt s1, h2\nbl powf\nfcvt h0, s0\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldp q0, q1, [sp]                    // 32-byte Folded Reload\nfcvt s0, h0\nfcvt s1, h1\nbl powf\nfcvt h0, s0\nldp q1, q2, [sp, #16]               // 32-byte Folded Reload\nmov h1, v1.h[2]\nmov v0.h[1], v2.h[0]\nfcvt s1, h1\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[2]\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[2], v0.h[0]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nldp q0, q1, [sp]                    // 32-byte Folded Reload\nmov h0, v0.h[3]\nmov h1, v1.h[3]\nfcvt s0, h0\nfcvt s1, h1\nbl powf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[3], v0.h[0]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nldp q0, q1, [sp]                    // 32-byte Folded Reload\nmov h0, v0.h[4]\nmov h1, v1.h[4]\nfcvt s0, h0\nfcvt s1, h1\nbl powf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[4], v0.h[0]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nldp q0, q1, [sp]                    // 32-byte Folded Reload\nmov h0, v0.h[5]\nmov h1, v1.h[5]\nfcvt s0, h0\nfcvt s1, h1\nbl powf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[5], v0.h[0]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nldp q0, q1, [sp]                    // 32-byte Folded Reload\nmov h0, v0.h[6]\nmov h1, v1.h[6]\nfcvt s0, h0\nfcvt s1, h1\nbl powf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[6], v0.h[0]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nldp q0, q1, [sp]                    // 32-byte Folded Reload\nmov h0, v0.h[7]\nmov h1, v1.h[7]\nfcvt s0, h0\nfcvt s1, h1\nbl powf\nfcvt h1, s0\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nldr x30, [sp, #48]                  // 8-byte Folded Reload\nmov v0.h[7], v1.h[0]\nadd sp, sp, #64\nret",
  "giasm": "sub sp, sp, #192\nstp d15, d14, [sp, #112]            // 16-byte Folded Spill\nstp d13, d12, [sp, #128]            // 16-byte Folded Spill\nstp d11, d10, [sp, #144]            // 16-byte Folded Spill\nstp d9, d8, [sp, #160]              // 16-byte Folded Spill\nstr x30, [sp, #176]                 // 8-byte Folded Spill\nmov h2, v0.h[5]\nmov h11, v0.h[1]\nmov h12, v0.h[2]\nmov h13, v0.h[3]\nmov h14, v0.h[4]\nmov h8, v1.h[1]\nmov h9, v1.h[2]\nmov h10, v1.h[3]\nmov h15, v1.h[4]\nstr h2, [sp, #48]                   // 2-byte Folded Spill\nmov h2, v0.h[6]\nstr h2, [sp, #64]                   // 2-byte Folded Spill\nmov h2, v0.h[7]\nfcvt s0, h0\nstr h2, [sp, #96]                   // 2-byte Folded Spill\nmov h2, v1.h[5]\nstr h2, [sp, #186]                  // 2-byte Folded Spill\nmov h2, v1.h[6]\nstr h2, [sp, #188]                  // 2-byte Folded Spill\nmov h2, v1.h[7]\nfcvt s1, h1\nstr h2, [sp, #190]                  // 2-byte Folded Spill\nbl powf\nfcvt s2, h11\nfcvt h0, s0\nfcvt s1, h8\nstr q0, [sp, #80]                   // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nfcvt s2, h12\nfcvt h0, s0\nfcvt s1, h9\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nfcvt s2, h13\nfcvt h0, s0\nfcvt s1, h10\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nfcvt s2, h14\nfcvt h0, s0\nfcvt s1, h15\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nldr h1, [sp, #48]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nldr h0, [sp, #186]                  // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl powf\nldr h1, [sp, #64]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #64]                   // 16-byte Folded Spill\nldr h0, [sp, #188]                  // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl powf\nldr h1, [sp, #96]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #96]                   // 16-byte Folded Spill\nldr h0, [sp, #190]                  // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl powf\nldp q2, q3, [sp, #16]               // 32-byte Folded Reload\nfcvt h0, s0\nldr q1, [sp, #80]                   // 16-byte Folded Reload\nldp d9, d8, [sp, #160]              // 16-byte Folded Reload\nldp d11, d10, [sp, #144]            // 16-byte Folded Reload\nldr x30, [sp, #176]                 // 8-byte Folded Reload\nmov v1.h[1], v3.h[0]\nldp d13, d12, [sp, #128]            // 16-byte Folded Reload\nldp d15, d14, [sp, #112]            // 16-byte Folded Reload\nmov v1.h[2], v2.h[0]\nldr q2, [sp]                        // 16-byte Folded Reload\nmov v1.h[3], v2.h[0]\nldp q3, q2, [sp, #48]               // 32-byte Folded Reload\nmov v1.h[4], v3.h[0]\nmov v1.h[5], v2.h[0]\nldr q2, [sp, #96]                   // 16-byte Folded Reload\nmov v1.h[6], v2.h[0]\nmov v1.h[7], v0.h[0]\nmov v0.16b, v1.16b\nadd sp, sp, #192\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, <8 x half> %b) {\n  %r = call <8 x half> @llvm.pow(<8 x half> %a, <8 x half> %b)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 29 for instruction:   %r = call <8 x half> @llvm.pow.v8f16(<8 x half> %a, <8 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "pow",
  "ty": "<16 x half>",
  "variant": "binop",
  "codesize": 58,
  "thru": 100,
  "lat": 100,
  "sizelat": 100,
  "size": 163,
  "gisize": 206,
  "extrasize": 0,
  "asm": "sub sp, sp, #96\nstr x30, [sp, #80]                  // 8-byte Folded Spill\nstp q0, q1, [sp]                    // 32-byte Folded Spill\nmov h1, v2.h[1]\nstp q3, q2, [sp, #32]               // 32-byte Folded Spill\nmov h3, v0.h[1]\nfcvt s1, h1\nfcvt s0, h3\nbl powf\nfcvt h0, s0\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nfcvt s1, h1\nstr q0, [sp, #64]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldp q1, q2, [sp, #48]               // 32-byte Folded Reload\nmov h1, v1.h[2]\nmov v0.h[1], v2.h[0]\nfcvt s1, h1\nstr q0, [sp, #64]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[2]\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #64]                   // 16-byte Folded Reload\nmov v1.h[2], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[3]\nstr q1, [sp, #64]                   // 16-byte Folded Spill\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nmov h1, v1.h[3]\nfcvt s0, h0\nfcvt s1, h1\nbl powf\nfcvt h0, s0\nldr q1, [sp, #64]                   // 16-byte Folded Reload\nmov v1.h[3], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[4]\nstr q1, [sp, #64]                   // 16-byte Folded Spill\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nmov h1, v1.h[4]\nfcvt s0, h0\nfcvt s1, h1\nbl powf\nfcvt h0, s0\nldr q1, [sp, #64]                   // 16-byte Folded Reload\nmov v1.h[4], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[5]\nstr q1, [sp, #64]                   // 16-byte Folded Spill\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nmov h1, v1.h[5]\nfcvt s0, h0\nfcvt s1, h1\nbl powf\nfcvt h0, s0\nldr q1, [sp, #64]                   // 16-byte Folded Reload\nmov v1.h[5], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[6]\nstr q1, [sp, #64]                   // 16-byte Folded Spill\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nmov h1, v1.h[6]\nfcvt s0, h0\nfcvt s1, h1\nbl powf\nfcvt h0, s0\nldr q1, [sp, #64]                   // 16-byte Folded Reload\nmov v1.h[6], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[7]\nstr q1, [sp, #64]                   // 16-byte Folded Spill\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nmov h1, v1.h[7]\nfcvt s0, h0\nfcvt s1, h1\nbl powf\nfcvt h0, s0\nldr q1, [sp, #64]                   // 16-byte Folded Reload\nmov v1.h[7], v0.h[0]\nstr q1, [sp, #64]                   // 16-byte Folded Spill\nldp q0, q1, [sp, #16]               // 32-byte Folded Reload\nmov h0, v0.h[1]\nmov h1, v1.h[1]\nfcvt s0, h0\nfcvt s1, h1\nbl powf\nfcvt h0, s0\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nldp q0, q1, [sp, #16]               // 32-byte Folded Reload\nfcvt s0, h0\nfcvt s1, h1\nbl powf\nfcvt h0, s0\nldp q1, q2, [sp, #32]               // 32-byte Folded Reload\nmov h1, v1.h[2]\nmov v0.h[1], v2.h[0]\nfcvt s1, h1\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[2]\nfcvt s0, h0\nbl powf\nfcvt h0, s0\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nmov v1.h[2], v0.h[0]\nstr q1, [sp, #48]                   // 16-byte Folded Spill\nldp q0, q1, [sp, #16]               // 32-byte Folded Reload\nmov h0, v0.h[3]\nmov h1, v1.h[3]\nfcvt s0, h0\nfcvt s1, h1\nbl powf\nfcvt h0, s0\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nmov v1.h[3], v0.h[0]\nstr q1, [sp, #48]                   // 16-byte Folded Spill\nldp q0, q1, [sp, #16]               // 32-byte Folded Reload\nmov h0, v0.h[4]\nmov h1, v1.h[4]\nfcvt s0, h0\nfcvt s1, h1\nbl powf\nfcvt h0, s0\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nmov v1.h[4], v0.h[0]\nstr q1, [sp, #48]                   // 16-byte Folded Spill\nldp q0, q1, [sp, #16]               // 32-byte Folded Reload\nmov h0, v0.h[5]\nmov h1, v1.h[5]\nfcvt s0, h0\nfcvt s1, h1\nbl powf\nfcvt h0, s0\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nmov v1.h[5], v0.h[0]\nstr q1, [sp, #48]                   // 16-byte Folded Spill\nldp q0, q1, [sp, #16]               // 32-byte Folded Reload\nmov h0, v0.h[6]\nmov h1, v1.h[6]\nfcvt s0, h0\nfcvt s1, h1\nbl powf\nfcvt h0, s0\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nmov v1.h[6], v0.h[0]\nstr q1, [sp, #48]                   // 16-byte Folded Spill\nldp q0, q1, [sp, #16]               // 32-byte Folded Reload\nmov h0, v0.h[7]\nmov h1, v1.h[7]\nfcvt s0, h0\nfcvt s1, h1\nbl powf\nfmov s1, s0\nldr x30, [sp, #80]                  // 8-byte Folded Reload\nfcvt h2, s1\nldp q1, q0, [sp, #48]               // 32-byte Folded Reload\nmov v1.h[7], v2.h[0]\nadd sp, sp, #96\nret",
  "giasm": "sub sp, sp, #448\nstp d15, d14, [sp, #368]            // 16-byte Folded Spill\nstp d13, d12, [sp, #384]            // 16-byte Folded Spill\nstp d11, d10, [sp, #400]            // 16-byte Folded Spill\nstp d9, d8, [sp, #416]              // 16-byte Folded Spill\nstp x29, x30, [sp, #432]            // 16-byte Folded Spill\nmov v4.16b, v1.16b\nstr q1, [sp, #112]                  // 16-byte Folded Spill\nmov h1, v0.h[4]\nmov h12, v0.h[1]\nmov h13, v0.h[2]\nstr q3, [sp, #16]                   // 16-byte Folded Spill\nmov h14, v0.h[3]\nmov h15, v2.h[1]\nmov h8, v2.h[2]\nmov h9, v2.h[3]\nmov h10, v2.h[4]\nmov h11, v2.h[5]\nstr h1, [sp, #272]                  // 2-byte Folded Spill\nmov h1, v0.h[5]\nstr h1, [sp, #240]                  // 2-byte Folded Spill\nmov h1, v0.h[6]\nstr h1, [sp, #176]                  // 2-byte Folded Spill\nmov h1, v0.h[7]\nfcvt s0, h0\nstr h1, [sp, #144]                  // 2-byte Folded Spill\nmov h1, v4.h[1]\nstr h1, [sp, #48]                   // 2-byte Folded Spill\nmov h1, v4.h[2]\nstr h1, [sp, #80]                   // 2-byte Folded Spill\nmov h1, v4.h[3]\nstr h1, [sp, #128]                  // 2-byte Folded Spill\nmov h1, v4.h[4]\nstr h1, [sp, #192]                  // 2-byte Folded Spill\nmov h1, v4.h[5]\nstr h1, [sp, #256]                  // 2-byte Folded Spill\nmov h1, v4.h[6]\nstr h1, [sp, #336]                  // 2-byte Folded Spill\nmov h1, v4.h[7]\nstr h1, [sp, #352]                  // 2-byte Folded Spill\nmov h1, v2.h[6]\nstr h1, [sp, #12]                   // 2-byte Folded Spill\nmov h1, v2.h[7]\nstr h1, [sp, #14]                   // 2-byte Folded Spill\nmov h1, v3.h[1]\nstr h1, [sp, #44]                   // 2-byte Folded Spill\nmov h1, v3.h[2]\nstr h1, [sp, #46]                   // 2-byte Folded Spill\nmov h1, v3.h[3]\nstr h1, [sp, #78]                   // 2-byte Folded Spill\nmov h1, v3.h[4]\nstr h1, [sp, #110]                  // 2-byte Folded Spill\nmov h1, v3.h[5]\nstr h1, [sp, #174]                  // 2-byte Folded Spill\nmov h1, v3.h[6]\nstr h1, [sp, #238]                  // 2-byte Folded Spill\nmov h1, v3.h[7]\nstr h1, [sp, #302]                  // 2-byte Folded Spill\nfcvt s1, h2\nbl powf\nfcvt s2, h12\nfcvt h0, s0\nfcvt s1, h15\nstr q0, [sp, #304]                  // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nfcvt s2, h13\nfcvt h0, s0\nfcvt s1, h8\nstr q0, [sp, #208]                  // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nfcvt s2, h14\nfcvt h0, s0\nfcvt s1, h9\nstr q0, [sp, #320]                  // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nldr h1, [sp, #272]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nfcvt s1, h10\nstr q0, [sp, #272]                  // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nldr h1, [sp, #240]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nfcvt s1, h11\nstr q0, [sp, #240]                  // 16-byte Folded Spill\nfmov s0, s2\nbl powf\nldr h1, [sp, #176]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #176]                  // 16-byte Folded Spill\nldr h0, [sp, #12]                   // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl powf\nldr h1, [sp, #144]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #144]                  // 16-byte Folded Spill\nldr h0, [sp, #14]                   // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl powf\nldr q1, [sp, #112]                  // 16-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #112]                  // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl powf\nldr h1, [sp, #48]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nldr h0, [sp, #44]                   // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl powf\nldr h1, [sp, #80]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #80]                   // 16-byte Folded Spill\nldr h0, [sp, #46]                   // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl powf\nldr h1, [sp, #128]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #128]                  // 16-byte Folded Spill\nldr h0, [sp, #78]                   // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl powf\nldr h1, [sp, #192]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #192]                  // 16-byte Folded Spill\nldr h0, [sp, #110]                  // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl powf\nldr h1, [sp, #256]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #256]                  // 16-byte Folded Spill\nldr h0, [sp, #174]                  // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl powf\nldr h1, [sp, #336]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #336]                  // 16-byte Folded Spill\nldr h0, [sp, #238]                  // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl powf\nldr h1, [sp, #352]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s2, h1\nstr q0, [sp, #352]                  // 16-byte Folded Spill\nldr h0, [sp, #302]                  // 2-byte Folded Reload\nfcvt s1, h0\nfmov s0, s2\nbl powf\nldr q3, [sp, #304]                  // 16-byte Folded Reload\nldr q2, [sp, #208]                  // 16-byte Folded Reload\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nldp x29, x30, [sp, #432]            // 16-byte Folded Reload\nmov v3.h[1], v2.h[0]\nldr q2, [sp, #80]                   // 16-byte Folded Reload\nldp d9, d8, [sp, #416]              // 16-byte Folded Reload\nmov v1.h[1], v2.h[0]\nldr q2, [sp, #320]                  // 16-byte Folded Reload\nldp d11, d10, [sp, #400]            // 16-byte Folded Reload\nmov v3.h[2], v2.h[0]\nldr q2, [sp, #128]                  // 16-byte Folded Reload\nldp d13, d12, [sp, #384]            // 16-byte Folded Reload\nmov v1.h[2], v2.h[0]\nldr q2, [sp, #272]                  // 16-byte Folded Reload\nldp d15, d14, [sp, #368]            // 16-byte Folded Reload\nmov v3.h[3], v2.h[0]\nldr q2, [sp, #192]                  // 16-byte Folded Reload\nmov v1.h[3], v2.h[0]\nldp q4, q2, [sp, #240]              // 32-byte Folded Reload\nmov v3.h[4], v4.h[0]\nmov v1.h[4], v2.h[0]\nldr q2, [sp, #176]                  // 16-byte Folded Reload\nmov v3.h[5], v2.h[0]\nldr q2, [sp, #336]                  // 16-byte Folded Reload\nmov v1.h[5], v2.h[0]\nfcvt h2, s0\nldr q0, [sp, #144]                  // 16-byte Folded Reload\nmov v3.h[6], v0.h[0]\nldr q0, [sp, #352]                  // 16-byte Folded Reload\nmov v1.h[6], v0.h[0]\nldr q0, [sp, #112]                  // 16-byte Folded Reload\nmov v3.h[7], v0.h[0]\nmov v1.h[7], v2.h[0]\nmov v0.16b, v3.16b\nadd sp, sp, #448\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, <16 x half> %b) {\n  %r = call <16 x half> @llvm.pow(<16 x half> %a, <16 x half> %b)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 58 for instruction:   %r = call <16 x half> @llvm.pow.v16f16(<16 x half> %a, <16 x half> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "pow",
  "ty": "<2 x float>",
  "variant": "binop",
  "codesize": 5,
  "thru": 26,
  "lat": 26,
  "sizelat": 26,
  "size": 13,
  "gisize": 15,
  "extrasize": 0,
  "asm": "sub sp, sp, #64\nstr x30, [sp, #48]                  // 8-byte Folded Spill\nstp q0, q1, [sp]                    // 32-byte Folded Spill\nmov s0, v0.s[1]\nmov s1, v1.s[1]\nbl powf\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldp q0, q1, [sp]                    // 32-byte Folded Reload\nbl powf\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nldr x30, [sp, #48]                  // 8-byte Folded Reload\nmov v0.s[1], v1.s[0]\nadd sp, sp, #64\nret",
  "giasm": "sub sp, sp, #48\nstp d9, d8, [sp, #16]               // 16-byte Folded Spill\nstr x30, [sp, #32]                  // 8-byte Folded Spill\nmov s8, v0.s[1]\nmov s9, v1.s[1]\nbl powf\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s1, s9\nfmov s0, s8\nbl powf\nldr q1, [sp]                        // 16-byte Folded Reload\nldp d9, d8, [sp, #16]               // 16-byte Folded Reload\nldr x30, [sp, #32]                  // 8-byte Folded Reload\nmov v1.s[1], v0.s[0]\nfmov d0, d1\nadd sp, sp, #48\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, <2 x float> %b) {\n  %r = call <2 x float> @llvm.pow(<2 x float> %a, <2 x float> %b)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 5 for instruction:   %r = call <2 x float> @llvm.pow.v2f32(<2 x float> %a, <2 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "pow",
  "ty": "<4 x float>",
  "variant": "binop",
  "codesize": 13,
  "thru": 58,
  "lat": 58,
  "sizelat": 58,
  "size": 27,
  "gisize": 34,
  "extrasize": 0,
  "asm": "sub sp, sp, #64\nstr x30, [sp, #48]                  // 8-byte Folded Spill\nstp q0, q1, [sp, #16]               // 32-byte Folded Spill\nmov s0, v0.s[1]\nmov s1, v1.s[1]\nbl powf\nstr q0, [sp]                        // 16-byte Folded Spill\nldp q0, q1, [sp, #16]               // 32-byte Folded Reload\nbl powf\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v0.s[1], v1.s[0]\nstr q0, [sp]                        // 16-byte Folded Spill\nldp q0, q1, [sp, #16]               // 32-byte Folded Reload\nmov s0, v0.s[2]\nmov s1, v1.s[2]\nbl powf\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v1.s[2], v0.s[0]\nstr q1, [sp]                        // 16-byte Folded Spill\nldp q0, q1, [sp, #16]               // 32-byte Folded Reload\nmov s0, v0.s[3]\nmov s1, v1.s[3]\nbl powf\nldr q1, [sp]                        // 16-byte Folded Reload\nldr x30, [sp, #48]                  // 8-byte Folded Reload\nmov v1.s[3], v0.s[0]\nmov v0.16b, v1.16b\nadd sp, sp, #64\nret",
  "giasm": "sub sp, sp, #112\nstp d13, d12, [sp, #48]             // 16-byte Folded Spill\nstp d11, d10, [sp, #64]             // 16-byte Folded Spill\nstp d9, d8, [sp, #80]               // 16-byte Folded Spill\nstr x30, [sp, #96]                  // 8-byte Folded Spill\nmov s8, v0.s[1]\nmov s9, v0.s[2]\nmov s10, v0.s[3]\nmov s11, v1.s[1]\nmov s12, v1.s[2]\nmov s13, v1.s[3]\nbl powf\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, s11\nfmov s0, s8\nbl powf\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfmov s1, s12\nfmov s0, s9\nbl powf\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s1, s13\nfmov s0, s10\nbl powf\nldp q2, q1, [sp, #16]               // 32-byte Folded Reload\nldr x30, [sp, #96]                  // 8-byte Folded Reload\nldp d9, d8, [sp, #80]               // 16-byte Folded Reload\nldp d11, d10, [sp, #64]             // 16-byte Folded Reload\nmov v1.s[1], v2.s[0]\nldr q2, [sp]                        // 16-byte Folded Reload\nldp d13, d12, [sp, #48]             // 16-byte Folded Reload\nmov v1.s[2], v2.s[0]\nmov v1.s[3], v0.s[0]\nmov v0.16b, v1.16b\nadd sp, sp, #112\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, <4 x float> %b) {\n  %r = call <4 x float> @llvm.pow(<4 x float> %a, <4 x float> %b)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 13 for instruction:   %r = call <4 x float> @llvm.pow.v4f32(<4 x float> %a, <4 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "pow",
  "ty": "<8 x float>",
  "variant": "binop",
  "codesize": 26,
  "thru": 116,
  "lat": 116,
  "sizelat": 116,
  "size": 54,
  "gisize": 67,
  "extrasize": 0,
  "asm": "sub sp, sp, #96\nstr x30, [sp, #80]                  // 8-byte Folded Spill\nstp q0, q2, [sp]                    // 32-byte Folded Spill\nmov s0, v0.s[1]\nstp q1, q3, [sp, #32]               // 32-byte Folded Spill\nmov s1, v2.s[1]\nbl powf\nstr q0, [sp, #64]                   // 16-byte Folded Spill\nldp q0, q1, [sp]                    // 32-byte Folded Reload\nbl powf\nldr q1, [sp, #64]                   // 16-byte Folded Reload\nmov v0.s[1], v1.s[0]\nstr q0, [sp, #64]                   // 16-byte Folded Spill\nldp q0, q1, [sp]                    // 32-byte Folded Reload\nmov s0, v0.s[2]\nmov s1, v1.s[2]\nbl powf\nldr q1, [sp, #64]                   // 16-byte Folded Reload\nmov v1.s[2], v0.s[0]\nstr q1, [sp, #64]                   // 16-byte Folded Spill\nldp q0, q1, [sp]                    // 32-byte Folded Reload\nmov s0, v0.s[3]\nmov s1, v1.s[3]\nbl powf\nldr q1, [sp, #64]                   // 16-byte Folded Reload\nmov v1.s[3], v0.s[0]\nstr q1, [sp, #64]                   // 16-byte Folded Spill\nldp q0, q1, [sp, #32]               // 32-byte Folded Reload\nmov s0, v0.s[1]\nmov s1, v1.s[1]\nbl powf\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldp q0, q1, [sp, #32]               // 32-byte Folded Reload\nbl powf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v0.s[1], v1.s[0]\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldp q0, q1, [sp, #32]               // 32-byte Folded Reload\nmov s0, v0.s[2]\nmov s1, v1.s[2]\nbl powf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.s[2], v0.s[0]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nldp q0, q1, [sp, #32]               // 32-byte Folded Reload\nmov s0, v0.s[3]\nmov s1, v1.s[3]\nbl powf\nfmov s2, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nldr q0, [sp, #64]                   // 16-byte Folded Reload\nldr x30, [sp, #80]                  // 8-byte Folded Reload\nmov v1.s[3], v2.s[0]\nadd sp, sp, #96\nret",
  "giasm": "sub sp, sp, #208\nstp d15, d14, [sp, #128]            // 16-byte Folded Spill\nstp d13, d12, [sp, #144]            // 16-byte Folded Spill\nstp d11, d10, [sp, #160]            // 16-byte Folded Spill\nstp d9, d8, [sp, #176]              // 16-byte Folded Spill\nstr x30, [sp, #192]                 // 8-byte Folded Spill\nmov v4.16b, v1.16b\nmov v1.16b, v2.16b\nmov s8, v0.s[1]\nmov s9, v0.s[2]\nmov s10, v0.s[3]\nmov s12, v3.s[1]\nmov s11, v3.s[2]\nmov s2, v4.s[1]\nstp q3, q4, [sp]                    // 32-byte Folded Spill\nmov s5, v4.s[3]\nmov s14, v1.s[1]\nmov s15, v1.s[2]\nmov s13, v1.s[3]\nstr s2, [sp, #48]                   // 4-byte Folded Spill\nmov s2, v4.s[2]\nstr s2, [sp, #112]                  // 4-byte Folded Spill\nmov s2, v3.s[3]\nstp s2, s5, [sp, #200]              // 8-byte Folded Spill\nbl powf\nstr q0, [sp, #96]                   // 16-byte Folded Spill\nfmov s1, s14\nfmov s0, s8\nbl powf\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s1, s15\nfmov s0, s9\nbl powf\nstr q0, [sp, #80]                   // 16-byte Folded Spill\nfmov s1, s13\nfmov s0, s10\nbl powf\nstr q0, [sp, #64]                   // 16-byte Folded Spill\nldp q1, q0, [sp]                    // 32-byte Folded Reload\nbl powf\nfmov s1, s12\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr s0, [sp, #48]                   // 4-byte Folded Reload\nbl powf\nfmov s1, s11\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nldr s0, [sp, #112]                  // 4-byte Folded Reload\nbl powf\nstr q0, [sp, #112]                  // 16-byte Folded Spill\nldp s1, s0, [sp, #200]              // 8-byte Folded Reload\nbl powf\nldp q3, q2, [sp, #16]               // 32-byte Folded Reload\nldr q1, [sp, #96]                   // 16-byte Folded Reload\nldp d9, d8, [sp, #176]              // 16-byte Folded Reload\nldr x30, [sp, #192]                 // 8-byte Folded Reload\nldp d11, d10, [sp, #160]            // 16-byte Folded Reload\nmov v1.s[1], v2.s[0]\nldr q2, [sp, #48]                   // 16-byte Folded Reload\nldp d13, d12, [sp, #144]            // 16-byte Folded Reload\nmov v3.s[1], v2.s[0]\nldr q2, [sp, #80]                   // 16-byte Folded Reload\nldp d15, d14, [sp, #128]            // 16-byte Folded Reload\nmov v1.s[2], v2.s[0]\nldr q2, [sp, #112]                  // 16-byte Folded Reload\nmov v3.s[2], v2.s[0]\nldr q2, [sp, #64]                   // 16-byte Folded Reload\nmov v1.s[3], v2.s[0]\nmov v3.s[3], v0.s[0]\nmov v2.16b, v1.16b\nmov v1.16b, v3.16b\nmov v0.16b, v2.16b\nadd sp, sp, #208\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, <8 x float> %b) {\n  %r = call <8 x float> @llvm.pow(<8 x float> %a, <8 x float> %b)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 26 for instruction:   %r = call <8 x float> @llvm.pow.v8f32(<8 x float> %a, <8 x float> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "pow",
  "ty": "<2 x double>",
  "variant": "binop",
  "codesize": 5,
  "thru": 26,
  "lat": 26,
  "sizelat": 26,
  "size": 13,
  "gisize": 13,
  "extrasize": 0,
  "asm": "sub sp, sp, #64\nstr x30, [sp, #48]                  // 8-byte Folded Spill\nstp q0, q1, [sp]                    // 32-byte Folded Spill\nmov d0, v0.d[1]\nmov d1, v1.d[1]\nbl pow\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldp q0, q1, [sp]                    // 32-byte Folded Reload\nbl pow\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nldr x30, [sp, #48]                  // 8-byte Folded Reload\nmov v0.d[1], v1.d[0]\nadd sp, sp, #64\nret",
  "giasm": "sub sp, sp, #48\nstp d9, d8, [sp, #16]               // 16-byte Folded Spill\nstr x30, [sp, #32]                  // 8-byte Folded Spill\nmov d8, v0.d[1]\nmov d9, v1.d[1]\nbl pow\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov d1, d9\nfmov d0, d8\nbl pow\nldr q1, [sp]                        // 16-byte Folded Reload\nldp d9, d8, [sp, #16]               // 16-byte Folded Reload\nldr x30, [sp, #32]                  // 8-byte Folded Reload\nmov v1.d[1], v0.d[0]\nmov v0.16b, v1.16b\nadd sp, sp, #48\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, <2 x double> %b) {\n  %r = call <2 x double> @llvm.pow(<2 x double> %a, <2 x double> %b)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 5 for instruction:   %r = call <2 x double> @llvm.pow.v2f64(<2 x double> %a, <2 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "pow",
  "ty": "<4 x double>",
  "variant": "binop",
  "codesize": 10,
  "thru": 52,
  "lat": 52,
  "sizelat": 52,
  "size": 24,
  "gisize": 27,
  "extrasize": 0,
  "asm": "sub sp, sp, #96\nstr x30, [sp, #80]                  // 8-byte Folded Spill\nstp q0, q2, [sp]                    // 32-byte Folded Spill\nmov d0, v0.d[1]\nstp q1, q3, [sp, #48]               // 32-byte Folded Spill\nmov d1, v2.d[1]\nbl pow\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldp q0, q1, [sp]                    // 32-byte Folded Reload\nbl pow\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v0.d[1], v1.d[0]\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldp q0, q1, [sp, #48]               // 32-byte Folded Reload\nmov d0, v0.d[1]\nmov d1, v1.d[1]\nbl pow\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldp q0, q1, [sp, #48]               // 32-byte Folded Reload\nbl pow\nfmov d1, d0\nldp q2, q0, [sp, #16]               // 32-byte Folded Reload\nldr x30, [sp, #80]                  // 8-byte Folded Reload\nmov v1.d[1], v2.d[0]\nadd sp, sp, #96\nret",
  "giasm": "sub sp, sp, #112\nstp d11, d10, [sp, #64]             // 16-byte Folded Spill\nstp d9, d8, [sp, #80]               // 16-byte Folded Spill\nstr x30, [sp, #96]                  // 8-byte Folded Spill\nmov v4.16b, v1.16b\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nmov v1.16b, v2.16b\nstr q3, [sp]                        // 16-byte Folded Spill\nmov d8, v0.d[1]\nmov d10, v2.d[1]\nmov d11, v3.d[1]\nmov d9, v4.d[1]\nbl pow\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nfmov d1, d10\nfmov d0, d8\nbl pow\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q1, [sp]                        // 16-byte Folded Reload\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nbl pow\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov d1, d11\nfmov d0, d9\nbl pow\nldp q3, q1, [sp, #16]               // 32-byte Folded Reload\nldr q2, [sp, #48]                   // 16-byte Folded Reload\nldp d9, d8, [sp, #80]               // 16-byte Folded Reload\nldr x30, [sp, #96]                  // 8-byte Folded Reload\nldp d11, d10, [sp, #64]             // 16-byte Folded Reload\nmov v2.d[1], v3.d[0]\nmov v1.d[1], v0.d[0]\nmov v0.16b, v2.16b\nadd sp, sp, #112\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, <4 x double> %b) {\n  %r = call <4 x double> @llvm.pow(<4 x double> %a, <4 x double> %b)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 10 for instruction:   %r = call <4 x double> @llvm.pow.v4f64(<4 x double> %a, <4 x double> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "ldexp",
  "ty": "half",
  "variant": "binopi",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 5,
  "gisize": -1,
  "extrasize": 0,
  "asm": "str x30, [sp, #-16]!                // 8-byte Folded Spill\nfcvt s0, h0\nbl ldexpf\nfcvt h0, s0\nldr x30, [sp], #16                  // 8-byte Folded Reload\nret",
  "giasm": "LLVM ERROR: unable to legalize instruction: %2:_(s16) = G_FLDEXP %0:_, %1:_(s32) (in function: test)",
  "ll": "define half @test(half %a, i32 %b) {\n  %r = call half @llvm.ldexp(half %a, i32 %b)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call half @llvm.ldexp.f16.i32(half %a, i32 %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "ldexp",
  "ty": "float",
  "variant": "binopi",
  "codesize": 1,
  "thru": 10,
  "lat": 10,
  "sizelat": 10,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "b ldexpf",
  "giasm": "LLVM ERROR: unable to legalize instruction: %2:_(s32) = G_FLDEXP %0:_, %1:_(s32) (in function: test)",
  "ll": "define float @test(float %a, i32 %b) {\n  %r = call float @llvm.ldexp(float %a, i32 %b)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call float @llvm.ldexp.f32.i32(float %a, i32 %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "ldexp",
  "ty": "double",
  "variant": "binopi",
  "codesize": 1,
  "thru": 10,
  "lat": 10,
  "sizelat": 10,
  "size": 1,
  "gisize": -1,
  "extrasize": 0,
  "asm": "b ldexp",
  "giasm": "LLVM ERROR: unable to legalize instruction: %2:_(s64) = G_FLDEXP %0:_, %1:_(s32) (in function: test)",
  "ll": "define double @test(double %a, i32 %b) {\n  %r = call double @llvm.ldexp(double %a, i32 %b)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call double @llvm.ldexp.f64.i32(double %a, i32 %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "ldexp",
  "ty": "<4 x half>",
  "variant": "binopi",
  "codesize": 14,
  "thru": 24,
  "lat": 24,
  "sizelat": 24,
  "size": 40,
  "gisize": -1,
  "extrasize": 0,
  "asm": "sub sp, sp, #64\nstr x30, [sp, #48]                  // 8-byte Folded Spill\nmov h2, v0.h[1]\nstp q0, q1, [sp, #16]               // 32-byte Folded Spill\nmov w0, v1.s[1]\nfcvt s0, h2\nbl ldexpf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nfcvt h0, s0\nfcvt s1, h1\nstr q0, [sp]                        // 16-byte Folded Spill\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nfmov w0, s0\nfmov s0, s1\nbl ldexpf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nfcvt h2, s0\nmov h1, v1.h[2]\nfcvt s0, h1\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v2.h[1], v1.h[0]\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov w0, v1.s[2]\nstr q2, [sp]                        // 16-byte Folded Spill\nbl ldexpf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nfcvt h2, s0\nmov h1, v1.h[3]\nfcvt s0, h1\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v1.h[2], v2.h[0]\nstr q1, [sp]                        // 16-byte Folded Spill\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov w0, v1.s[3]\nbl ldexpf\nfcvt h1, s0\nldr q0, [sp]                        // 16-byte Folded Reload\nldr x30, [sp, #48]                  // 8-byte Folded Reload\nmov v0.h[3], v1.h[0]\nadd sp, sp, #64\nret",
  "giasm": "LLVM ERROR: unable to legalize instruction: %2:_(<4 x s16>) = G_FLDEXP %0:_, %1:_(<4 x s32>) (in function: test)",
  "ll": "define <4 x half> @test(<4 x half> %a, <4 x i32> %b) {\n  %r = call <4 x half> @llvm.ldexp(<4 x half> %a, <4 x i32> %b)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 14 for instruction:   %r = call <4 x half> @llvm.ldexp.v4f16.v4i32(<4 x half> %a, <4 x i32> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "ldexp",
  "ty": "<8 x half>",
  "variant": "binopi",
  "codesize": 30,
  "thru": 52,
  "lat": 52,
  "sizelat": 52,
  "size": 78,
  "gisize": -1,
  "extrasize": 0,
  "asm": "sub sp, sp, #80\nstr x30, [sp, #64]                  // 8-byte Folded Spill\nstp q0, q2, [sp, #16]               // 32-byte Folded Spill\nmov h0, v0.h[1]\nmov w0, v1.s[1]\nstr q1, [sp]                        // 16-byte Folded Spill\nfcvt s0, h0\nbl ldexpf\nfcvt h0, s0\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nldp q1, q0, [sp]                    // 32-byte Folded Reload\nfcvt s0, h0\nfmov w0, s1\nbl ldexpf\nfcvt h0, s0\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nmov v0.h[1], v1.h[0]\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nldp q1, q0, [sp]                    // 32-byte Folded Reload\nmov h0, v0.h[2]\nmov w0, v1.s[2]\nfcvt s0, h0\nbl ldexpf\nfcvt h0, s0\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nmov v1.h[2], v0.h[0]\nstr q1, [sp, #48]                   // 16-byte Folded Spill\nldp q1, q0, [sp]                    // 32-byte Folded Reload\nmov h0, v0.h[3]\nmov w0, v1.s[3]\nfcvt s0, h0\nbl ldexpf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\next v2.16b, v1.16b, v1.16b, #8\nfcvt h1, s0\nstr q2, [sp, #16]                   // 16-byte Folded Spill\nfcvt s0, h2\nldr q2, [sp, #48]                   // 16-byte Folded Reload\nmov v2.h[3], v1.h[0]\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nfmov w0, s1\nstr q2, [sp, #48]                   // 16-byte Folded Spill\nbl ldexpf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nfcvt h2, s0\nmov h1, v1.h[1]\nfcvt s0, h1\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nmov v1.h[4], v2.h[0]\nstr q1, [sp, #48]                   // 16-byte Folded Spill\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov w0, v1.s[1]\nbl ldexpf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nfcvt h2, s0\nmov h1, v1.h[2]\nfcvt s0, h1\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nmov v1.h[5], v2.h[0]\nstr q1, [sp, #48]                   // 16-byte Folded Spill\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov w0, v1.s[2]\nbl ldexpf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nfcvt h2, s0\nmov h1, v1.h[3]\nfcvt s0, h1\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nmov v1.h[6], v2.h[0]\nstr q1, [sp, #48]                   // 16-byte Folded Spill\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov w0, v1.s[3]\nbl ldexpf\nfcvt h1, s0\nldr q0, [sp, #48]                   // 16-byte Folded Reload\nldr x30, [sp, #64]                  // 8-byte Folded Reload\nmov v0.h[7], v1.h[0]\nadd sp, sp, #80\nret",
  "giasm": "LLVM ERROR: unable to legalize instruction: %4:_(<8 x s16>) = G_FLDEXP %0:_, %1:_(<8 x s32>) (in function: test)",
  "ll": "define <8 x half> @test(<8 x half> %a, <8 x i32> %b) {\n  %r = call <8 x half> @llvm.ldexp(<8 x half> %a, <8 x i32> %b)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 30 for instruction:   %r = call <8 x half> @llvm.ldexp.v8f16.v8i32(<8 x half> %a, <8 x i32> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "ldexp",
  "ty": "<16 x half>",
  "variant": "binopi",
  "codesize": 60,
  "thru": 104,
  "lat": 104,
  "sizelat": 104,
  "size": 158,
  "gisize": -1,
  "extrasize": 0,
  "asm": "sub sp, sp, #128\nstr x30, [sp, #112]                 // 8-byte Folded Spill\nstp q2, q0, [sp]                    // 32-byte Folded Spill\nmov w0, v2.s[1]\nstp q4, q5, [sp, #32]               // 32-byte Folded Spill\nstp q1, q3, [sp, #64]               // 32-byte Folded Spill\nmov h1, v0.h[1]\nfcvt s0, h1\nbl ldexpf\nfcvt h0, s0\nstr q0, [sp, #96]                   // 16-byte Folded Spill\nldp q1, q0, [sp]                    // 32-byte Folded Reload\nfcvt s0, h0\nfmov w0, s1\nbl ldexpf\nfcvt h0, s0\nldr q1, [sp, #96]                   // 16-byte Folded Reload\nmov v0.h[1], v1.h[0]\nstr q0, [sp, #96]                   // 16-byte Folded Spill\nldp q1, q0, [sp]                    // 32-byte Folded Reload\nmov h0, v0.h[2]\nmov w0, v1.s[2]\nfcvt s0, h0\nbl ldexpf\nfcvt h0, s0\nldr q1, [sp, #96]                   // 16-byte Folded Reload\nmov v1.h[2], v0.h[0]\nstr q1, [sp, #96]                   // 16-byte Folded Spill\nldp q1, q0, [sp]                    // 32-byte Folded Reload\nmov h0, v0.h[3]\nmov w0, v1.s[3]\nfcvt s0, h0\nbl ldexpf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\next v2.16b, v1.16b, v1.16b, #8\nfcvt h1, s0\nstr q2, [sp, #16]                   // 16-byte Folded Spill\nfcvt s0, h2\nldr q2, [sp, #96]                   // 16-byte Folded Reload\nmov v2.h[3], v1.h[0]\nldr q1, [sp, #80]                   // 16-byte Folded Reload\nfmov w0, s1\nstr q2, [sp, #96]                   // 16-byte Folded Spill\nbl ldexpf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nfcvt h2, s0\nmov h1, v1.h[1]\nfcvt s0, h1\nldr q1, [sp, #96]                   // 16-byte Folded Reload\nmov v1.h[4], v2.h[0]\nstr q1, [sp, #96]                   // 16-byte Folded Spill\nldr q1, [sp, #80]                   // 16-byte Folded Reload\nmov w0, v1.s[1]\nbl ldexpf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nfcvt h2, s0\nmov h1, v1.h[2]\nfcvt s0, h1\nldr q1, [sp, #96]                   // 16-byte Folded Reload\nmov v1.h[5], v2.h[0]\nstr q1, [sp, #96]                   // 16-byte Folded Spill\nldr q1, [sp, #80]                   // 16-byte Folded Reload\nmov w0, v1.s[2]\nbl ldexpf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nfcvt h2, s0\nmov h1, v1.h[3]\nfcvt s0, h1\nldr q1, [sp, #96]                   // 16-byte Folded Reload\nmov v1.h[6], v2.h[0]\nstr q1, [sp, #96]                   // 16-byte Folded Spill\nldr q1, [sp, #80]                   // 16-byte Folded Reload\nmov w0, v1.s[3]\nbl ldexpf\nfcvt h0, s0\nldr q1, [sp, #96]                   // 16-byte Folded Reload\nmov v1.h[7], v0.h[0]\nldr q0, [sp, #64]                   // 16-byte Folded Reload\nmov h0, v0.h[1]\nstr q1, [sp, #96]                   // 16-byte Folded Spill\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov w0, v1.s[1]\nfcvt s0, h0\nbl ldexpf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nfmov w0, s1\nstr q0, [sp, #80]                   // 16-byte Folded Spill\nldr q0, [sp, #64]                   // 16-byte Folded Reload\nfcvt s0, h0\nbl ldexpf\nfcvt h0, s0\nldr q1, [sp, #80]                   // 16-byte Folded Reload\nmov v0.h[1], v1.h[0]\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov w0, v1.s[2]\nstr q0, [sp, #80]                   // 16-byte Folded Spill\nldr q0, [sp, #64]                   // 16-byte Folded Reload\nmov h0, v0.h[2]\nfcvt s0, h0\nbl ldexpf\nfcvt h0, s0\nldr q1, [sp, #80]                   // 16-byte Folded Reload\nmov v1.h[2], v0.h[0]\nldr q0, [sp, #64]                   // 16-byte Folded Reload\nmov h0, v0.h[3]\nstr q1, [sp, #80]                   // 16-byte Folded Spill\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov w0, v1.s[3]\nfcvt s0, h0\nbl ldexpf\nldr q1, [sp, #64]                   // 16-byte Folded Reload\next v2.16b, v1.16b, v1.16b, #8\nfcvt h1, s0\nstr q2, [sp, #64]                   // 16-byte Folded Spill\nfcvt s0, h2\nldr q2, [sp, #80]                   // 16-byte Folded Reload\nmov v2.h[3], v1.h[0]\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nfmov w0, s1\nstr q2, [sp, #80]                   // 16-byte Folded Spill\nbl ldexpf\nldr q1, [sp, #64]                   // 16-byte Folded Reload\nfcvt h2, s0\nmov h1, v1.h[1]\nfcvt s0, h1\nldr q1, [sp, #80]                   // 16-byte Folded Reload\nmov v1.h[4], v2.h[0]\nstr q1, [sp, #80]                   // 16-byte Folded Spill\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nmov w0, v1.s[1]\nbl ldexpf\nldr q1, [sp, #64]                   // 16-byte Folded Reload\nfcvt h2, s0\nmov h1, v1.h[2]\nfcvt s0, h1\nldr q1, [sp, #80]                   // 16-byte Folded Reload\nmov v1.h[5], v2.h[0]\nstr q1, [sp, #80]                   // 16-byte Folded Spill\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nmov w0, v1.s[2]\nbl ldexpf\nldr q1, [sp, #64]                   // 16-byte Folded Reload\nfcvt h2, s0\nmov h1, v1.h[3]\nfcvt s0, h1\nldr q1, [sp, #80]                   // 16-byte Folded Reload\nmov v1.h[6], v2.h[0]\nstr q1, [sp, #80]                   // 16-byte Folded Spill\nldr q1, [sp, #48]                   // 16-byte Folded Reload\nmov w0, v1.s[3]\nbl ldexpf\nfmov s1, s0\nldr x30, [sp, #112]                 // 8-byte Folded Reload\nfcvt h2, s1\nldp q1, q0, [sp, #80]               // 32-byte Folded Reload\nmov v1.h[7], v2.h[0]\nadd sp, sp, #128\nret",
  "giasm": "LLVM ERROR: unable to legalize instruction: %8:_(<16 x s16>) = G_FLDEXP %0:_, %1:_(<16 x s32>) (in function: test)",
  "ll": "define <16 x half> @test(<16 x half> %a, <16 x i32> %b) {\n  %r = call <16 x half> @llvm.ldexp(<16 x half> %a, <16 x i32> %b)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 60 for instruction:   %r = call <16 x half> @llvm.ldexp.v16f16.v16i32(<16 x half> %a, <16 x i32> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "ldexp",
  "ty": "<2 x float>",
  "variant": "binopi",
  "codesize": 6,
  "thru": 28,
  "lat": 28,
  "sizelat": 28,
  "size": 15,
  "gisize": -1,
  "extrasize": 0,
  "asm": "sub sp, sp, #64\nstr x30, [sp, #48]                  // 8-byte Folded Spill\nstp q1, q0, [sp]                    // 32-byte Folded Spill\nmov w0, v1.s[1]\nmov s0, v0.s[1]\nbl ldexpf\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nfmov w0, s0\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nbl ldexpf\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nldr x30, [sp, #48]                  // 8-byte Folded Reload\nmov v0.s[1], v1.s[0]\nadd sp, sp, #64\nret",
  "giasm": "LLVM ERROR: unable to legalize instruction: %2:_(<2 x s32>) = G_FLDEXP %0:_, %1:_(<2 x s32>) (in function: test)",
  "ll": "define <2 x float> @test(<2 x float> %a, <2 x i32> %b) {\n  %r = call <2 x float> @llvm.ldexp(<2 x float> %a, <2 x i32> %b)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 6 for instruction:   %r = call <2 x float> @llvm.ldexp.v2f32.v2i32(<2 x float> %a, <2 x i32> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "ldexp",
  "ty": "<4 x float>",
  "variant": "binopi",
  "codesize": 14,
  "thru": 60,
  "lat": 60,
  "sizelat": 60,
  "size": 29,
  "gisize": -1,
  "extrasize": 0,
  "asm": "sub sp, sp, #64\nstr x30, [sp, #48]                  // 8-byte Folded Spill\nstp q0, q1, [sp, #16]               // 32-byte Folded Spill\nmov s0, v0.s[1]\nmov w0, v1.s[1]\nbl ldexpf\nstr q0, [sp]                        // 16-byte Folded Spill\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nfmov w0, s0\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nbl ldexpf\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v0.s[1], v1.s[0]\nstr q0, [sp]                        // 16-byte Folded Spill\nldp q0, q1, [sp, #16]               // 32-byte Folded Reload\nmov s0, v0.s[2]\nmov w0, v1.s[2]\nbl ldexpf\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v1.s[2], v0.s[0]\nstr q1, [sp]                        // 16-byte Folded Spill\nldp q0, q1, [sp, #16]               // 32-byte Folded Reload\nmov s0, v0.s[3]\nmov w0, v1.s[3]\nbl ldexpf\nldr q1, [sp]                        // 16-byte Folded Reload\nldr x30, [sp, #48]                  // 8-byte Folded Reload\nmov v1.s[3], v0.s[0]\nmov v0.16b, v1.16b\nadd sp, sp, #64\nret",
  "giasm": "LLVM ERROR: unable to legalize instruction: %3:_(<4 x s32>) = G_FLDEXP %0:_, %1:_(<4 x s32>) (in function: test)",
  "ll": "define <4 x float> @test(<4 x float> %a, <4 x i32> %b) {\n  %r = call <4 x float> @llvm.ldexp(<4 x float> %a, <4 x i32> %b)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 14 for instruction:   %r = call <4 x float> @llvm.ldexp.v4f32.v4i32(<4 x float> %a, <4 x i32> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "ldexp",
  "ty": "<8 x float>",
  "variant": "binopi",
  "codesize": 28,
  "thru": 120,
  "lat": 120,
  "sizelat": 120,
  "size": 58,
  "gisize": -1,
  "extrasize": 0,
  "asm": "sub sp, sp, #96\nstr x30, [sp, #80]                  // 8-byte Folded Spill\nstp q0, q2, [sp]                    // 32-byte Folded Spill\nmov s0, v0.s[1]\nmov w0, v2.s[1]\nstp q1, q3, [sp, #32]               // 32-byte Folded Spill\nbl ldexpf\nstr q0, [sp, #64]                   // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nfmov w0, s0\nldr q0, [sp]                        // 16-byte Folded Reload\nbl ldexpf\nldr q1, [sp, #64]                   // 16-byte Folded Reload\nmov v0.s[1], v1.s[0]\nstr q0, [sp, #64]                   // 16-byte Folded Spill\nldp q0, q1, [sp]                    // 32-byte Folded Reload\nmov s0, v0.s[2]\nmov w0, v1.s[2]\nbl ldexpf\nldr q1, [sp, #64]                   // 16-byte Folded Reload\nmov v1.s[2], v0.s[0]\nstr q1, [sp, #64]                   // 16-byte Folded Spill\nldp q0, q1, [sp]                    // 32-byte Folded Reload\nmov s0, v0.s[3]\nmov w0, v1.s[3]\nbl ldexpf\nldr q1, [sp, #64]                   // 16-byte Folded Reload\nmov v1.s[3], v0.s[0]\nstr q1, [sp, #64]                   // 16-byte Folded Spill\nldp q0, q1, [sp, #32]               // 32-byte Folded Reload\nmov s0, v0.s[1]\nmov w0, v1.s[1]\nbl ldexpf\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp, #48]                   // 16-byte Folded Reload\nfmov w0, s0\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nbl ldexpf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v0.s[1], v1.s[0]\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldp q0, q1, [sp, #32]               // 32-byte Folded Reload\nmov s0, v0.s[2]\nmov w0, v1.s[2]\nbl ldexpf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.s[2], v0.s[0]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nldp q0, q1, [sp, #32]               // 32-byte Folded Reload\nmov s0, v0.s[3]\nmov w0, v1.s[3]\nbl ldexpf\nfmov s2, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nldr q0, [sp, #64]                   // 16-byte Folded Reload\nldr x30, [sp, #80]                  // 8-byte Folded Reload\nmov v1.s[3], v2.s[0]\nadd sp, sp, #96\nret",
  "giasm": "LLVM ERROR: unable to legalize instruction: %8:_(<8 x s32>) = G_FLDEXP %0:_, %1:_(<8 x s32>) (in function: test)",
  "ll": "define <8 x float> @test(<8 x float> %a, <8 x i32> %b) {\n  %r = call <8 x float> @llvm.ldexp(<8 x float> %a, <8 x i32> %b)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 28 for instruction:   %r = call <8 x float> @llvm.ldexp.v8f32.v8i32(<8 x float> %a, <8 x i32> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "ldexp",
  "ty": "<2 x double>",
  "variant": "binopi",
  "codesize": 6,
  "thru": 28,
  "lat": 28,
  "sizelat": 28,
  "size": 15,
  "gisize": -1,
  "extrasize": 0,
  "asm": "sub sp, sp, #64\nstr x30, [sp, #48]                  // 8-byte Folded Spill\nstp q0, q1, [sp]                    // 32-byte Folded Spill\nmov w0, v1.s[1]\nmov d0, v0.d[1]\nbl ldexp\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nfmov w0, s0\nldr q0, [sp]                        // 16-byte Folded Reload\nbl ldexp\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nldr x30, [sp, #48]                  // 8-byte Folded Reload\nmov v0.d[1], v1.d[0]\nadd sp, sp, #64\nret",
  "giasm": "LLVM ERROR: unable to legalize instruction: %2:_(<2 x s64>) = G_FLDEXP %0:_, %1:_(<2 x s32>) (in function: test)",
  "ll": "define <2 x double> @test(<2 x double> %a, <2 x i32> %b) {\n  %r = call <2 x double> @llvm.ldexp(<2 x double> %a, <2 x i32> %b)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 6 for instruction:   %r = call <2 x double> @llvm.ldexp.v2f64.v2i32(<2 x double> %a, <2 x i32> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "ldexp",
  "ty": "<4 x double>",
  "variant": "binopi",
  "codesize": 12,
  "thru": 56,
  "lat": 56,
  "sizelat": 56,
  "size": 30,
  "gisize": -1,
  "extrasize": 0,
  "asm": "sub sp, sp, #96\nstr x30, [sp, #80]                  // 8-byte Folded Spill\nstp q2, q0, [sp]                    // 32-byte Folded Spill\nmov d0, v0.d[1]\nmov w0, v2.s[1]\nstr q1, [sp, #64]                   // 16-byte Folded Spill\next v1.16b, v2.16b, v2.16b, #8\nstr q1, [sp, #48]                   // 16-byte Folded Spill\nbl ldexp\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nfmov w0, s0\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nbl ldexp\nfmov d1, d0\nldp q0, q2, [sp, #32]               // 32-byte Folded Reload\nmov w0, v2.s[1]\nmov v1.d[1], v0.d[0]\nldr q0, [sp, #64]                   // 16-byte Folded Reload\nmov d0, v0.d[1]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nbl ldexp\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp, #48]                   // 16-byte Folded Reload\nfmov w0, s0\nldr q0, [sp, #64]                   // 16-byte Folded Reload\nbl ldexp\nfmov d1, d0\nldp q2, q0, [sp, #16]               // 32-byte Folded Reload\nldr x30, [sp, #80]                  // 8-byte Folded Reload\nmov v1.d[1], v2.d[0]\nadd sp, sp, #96\nret",
  "giasm": "LLVM ERROR: unable to legalize instruction: %4:_(<4 x s64>) = G_FLDEXP %0:_, %1:_(<4 x s32>) (in function: test)",
  "ll": "define <4 x double> @test(<4 x double> %a, <4 x i32> %b) {\n  %r = call <4 x double> @llvm.ldexp(<4 x double> %a, <4 x i32> %b)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 12 for instruction:   %r = call <4 x double> @llvm.ldexp.v4f64.v4i32(<4 x double> %a, <4 x i32> %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "powi",
  "ty": "half",
  "variant": "binopi",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 5,
  "gisize": 5,
  "extrasize": 0,
  "asm": "str x30, [sp, #-16]!                // 8-byte Folded Spill\nfcvt s0, h0\nbl __powisf2\nfcvt h0, s0\nldr x30, [sp], #16                  // 8-byte Folded Reload\nret",
  "giasm": "str x30, [sp, #-16]!                // 8-byte Folded Spill\nfcvt s0, h0\nbl __powisf2\nfcvt h0, s0\nldr x30, [sp], #16                  // 8-byte Folded Reload\nret",
  "ll": "define half @test(half %a, i32 %b) {\n  %r = call half @llvm.powi(half %a, i32 %b)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call half @llvm.powi.f16.i32(half %a, i32 %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "powi",
  "ty": "float",
  "variant": "binopi",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "b __powisf2",
  "giasm": "b __powisf2",
  "ll": "define float @test(float %a, i32 %b) {\n  %r = call float @llvm.powi(float %a, i32 %b)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call float @llvm.powi.f32.i32(float %a, i32 %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "powi",
  "ty": "double",
  "variant": "binopi",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "b __powidf2",
  "giasm": "b __powidf2",
  "ll": "define double @test(double %a, i32 %b) {\n  %r = call double @llvm.powi(double %a, i32 %b)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call double @llvm.powi.f64.i32(double %a, i32 %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "powi",
  "ty": "<4 x half>",
  "variant": "binopi",
  "codesize": 10,
  "thru": 16,
  "lat": 16,
  "sizelat": 16,
  "size": 37,
  "gisize": 38,
  "extrasize": 0,
  "asm": "sub sp, sp, #48\nstp x30, x19, [sp, #32]             // 16-byte Folded Spill\nmov h1, v0.h[1]\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nmov w19, w0\nfcvt s0, h1\nbl __powisf2\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nfcvt h0, s0\nmov w0, w19\nfcvt s1, h1\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s0, s1\nbl __powisf2\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nfcvt h2, s0\nmov w0, w19\nmov h1, v1.h[2]\nfcvt s0, h1\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v2.h[1], v1.h[0]\nstr q2, [sp]                        // 16-byte Folded Spill\nbl __powisf2\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nfcvt h2, s0\nmov w0, w19\nmov h1, v1.h[3]\nfcvt s0, h1\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v1.h[2], v2.h[0]\nstr q1, [sp]                        // 16-byte Folded Spill\nbl __powisf2\nfcvt h1, s0\nldr q0, [sp]                        // 16-byte Folded Reload\nldp x30, x19, [sp, #32]             // 16-byte Folded Reload\nmov v0.h[3], v1.h[0]\nadd sp, sp, #48\nret",
  "giasm": "sub sp, sp, #96\nstr d10, [sp, #48]                  // 8-byte Folded Spill\nstp d9, d8, [sp, #64]               // 16-byte Folded Spill\nstp x30, x19, [sp, #80]             // 16-byte Folded Spill\nmov h8, v0.h[1]\nmov h9, v0.h[2]\nmov w19, w0\nmov h10, v0.h[3]\nfcvt s0, h0\nbl __powisf2\nfcvt s1, h8\nfcvt h0, s0\nmov w0, w19\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s0, s1\nbl __powisf2\nfcvt s1, h9\nfcvt h0, s0\nmov w0, w19\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s0, s1\nbl __powisf2\nfcvt s1, h10\nfcvt h0, s0\nmov w0, w19\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfmov s0, s1\nbl __powisf2\nldp q3, q2, [sp]                    // 32-byte Folded Reload\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nldp x30, x19, [sp, #80]             // 16-byte Folded Reload\nldp d9, d8, [sp, #64]               // 16-byte Folded Reload\nldr d10, [sp, #48]                  // 8-byte Folded Reload\nmov v1.h[1], v3.h[0]\nmov v1.h[2], v2.h[0]\nmov v1.h[3], v0.h[0]\nmov v0.16b, v1.16b\nadd sp, sp, #96\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, i32 %b) {\n  %r = call <4 x half> @llvm.powi(<4 x half> %a, i32 %b)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 10 for instruction:   %r = call <4 x half> @llvm.powi.v4f16.i32(<4 x half> %a, i32 %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "powi",
  "ty": "<8 x half>",
  "variant": "binopi",
  "codesize": 22,
  "thru": 36,
  "lat": 36,
  "sizelat": 36,
  "size": 72,
  "gisize": 76,
  "extrasize": 0,
  "asm": "sub sp, sp, #48\nstp x30, x19, [sp, #32]             // 16-byte Folded Spill\nmov h1, v0.h[1]\nstr q0, [sp]                        // 16-byte Folded Spill\nmov w19, w0\nfcvt s0, h1\nbl __powisf2\nfcvt h0, s0\nmov w0, w19\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nfcvt s0, h0\nbl __powisf2\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov w0, w19\nmov v0.h[1], v1.h[0]\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[2]\nfcvt s0, h0\nbl __powisf2\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov w0, w19\nmov v1.h[2], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[3]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfcvt s0, h0\nbl __powisf2\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov w0, w19\nmov v1.h[3], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[4]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfcvt s0, h0\nbl __powisf2\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov w0, w19\nmov v1.h[4], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[5]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfcvt s0, h0\nbl __powisf2\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov w0, w19\nmov v1.h[5], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[6]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfcvt s0, h0\nbl __powisf2\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov w0, w19\nmov v1.h[6], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[7]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfcvt s0, h0\nbl __powisf2\nfcvt h1, s0\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nldp x30, x19, [sp, #32]             // 16-byte Folded Reload\nmov v0.h[7], v1.h[0]\nadd sp, sp, #48\nret",
  "giasm": "sub sp, sp, #192\nstr d14, [sp, #112]                 // 8-byte Folded Spill\nstp d13, d12, [sp, #128]            // 16-byte Folded Spill\nstp d11, d10, [sp, #144]            // 16-byte Folded Spill\nstp d9, d8, [sp, #160]              // 16-byte Folded Spill\nstp x30, x19, [sp, #176]            // 16-byte Folded Spill\nmov h8, v0.h[1]\nmov h9, v0.h[2]\nmov w19, w0\nmov h10, v0.h[3]\nmov h11, v0.h[4]\nmov h12, v0.h[5]\nmov h13, v0.h[6]\nmov h14, v0.h[7]\nfcvt s0, h0\nbl __powisf2\nfcvt s1, h8\nfcvt h0, s0\nmov w0, w19\nstr q0, [sp, #96]                   // 16-byte Folded Spill\nfmov s0, s1\nbl __powisf2\nfcvt s1, h9\nfcvt h0, s0\nmov w0, w19\nstr q0, [sp, #80]                   // 16-byte Folded Spill\nfmov s0, s1\nbl __powisf2\nfcvt s1, h10\nfcvt h0, s0\nmov w0, w19\nstr q0, [sp, #64]                   // 16-byte Folded Spill\nfmov s0, s1\nbl __powisf2\nfcvt s1, h11\nfcvt h0, s0\nmov w0, w19\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nfmov s0, s1\nbl __powisf2\nfcvt s1, h12\nfcvt h0, s0\nmov w0, w19\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s0, s1\nbl __powisf2\nfcvt s1, h13\nfcvt h0, s0\nmov w0, w19\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfmov s0, s1\nbl __powisf2\nfcvt s1, h14\nfcvt h0, s0\nmov w0, w19\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s0, s1\nbl __powisf2\nldp q2, q1, [sp, #80]               // 32-byte Folded Reload\nfcvt h0, s0\nldp x30, x19, [sp, #176]            // 16-byte Folded Reload\nldr d14, [sp, #112]                 // 8-byte Folded Reload\nldp d9, d8, [sp, #160]              // 16-byte Folded Reload\nmov v1.h[1], v2.h[0]\nldp q2, q3, [sp, #48]               // 32-byte Folded Reload\nldp d11, d10, [sp, #144]            // 16-byte Folded Reload\nldp d13, d12, [sp, #128]            // 16-byte Folded Reload\nmov v1.h[2], v3.h[0]\nmov v1.h[3], v2.h[0]\nldp q2, q3, [sp, #16]               // 32-byte Folded Reload\nmov v1.h[4], v3.h[0]\nmov v1.h[5], v2.h[0]\nldr q2, [sp]                        // 16-byte Folded Reload\nmov v1.h[6], v2.h[0]\nmov v1.h[7], v0.h[0]\nmov v0.16b, v1.16b\nadd sp, sp, #192\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, i32 %b) {\n  %r = call <8 x half> @llvm.powi(<8 x half> %a, i32 %b)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 22 for instruction:   %r = call <8 x half> @llvm.powi.v8f16.i32(<8 x half> %a, i32 %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "powi",
  "ty": "<16 x half>",
  "variant": "binopi",
  "codesize": 44,
  "thru": 72,
  "lat": 72,
  "sizelat": 72,
  "size": 142,
  "gisize": 163,
  "extrasize": 0,
  "asm": "sub sp, sp, #64\nstp x30, x19, [sp, #48]             // 16-byte Folded Spill\nstp q1, q0, [sp]                    // 32-byte Folded Spill\nmov h1, v0.h[1]\nmov w19, w0\nfcvt s0, h1\nbl __powisf2\nfcvt h0, s0\nmov w0, w19\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nfcvt s0, h0\nbl __powisf2\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov w0, w19\nmov v0.h[1], v1.h[0]\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[2]\nfcvt s0, h0\nbl __powisf2\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov w0, w19\nmov v1.h[2], v0.h[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[3]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfcvt s0, h0\nbl __powisf2\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov w0, w19\nmov v1.h[3], v0.h[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[4]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfcvt s0, h0\nbl __powisf2\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov w0, w19\nmov v1.h[4], v0.h[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[5]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfcvt s0, h0\nbl __powisf2\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov w0, w19\nmov v1.h[5], v0.h[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[6]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfcvt s0, h0\nbl __powisf2\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov w0, w19\nmov v1.h[6], v0.h[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[7]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfcvt s0, h0\nbl __powisf2\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov w0, w19\nmov v1.h[7], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[1]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfcvt s0, h0\nbl __powisf2\nfcvt h0, s0\nmov w0, w19\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nfcvt s0, h0\nbl __powisf2\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov w0, w19\nmov v0.h[1], v1.h[0]\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[2]\nfcvt s0, h0\nbl __powisf2\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov w0, w19\nmov v1.h[2], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[3]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfcvt s0, h0\nbl __powisf2\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov w0, w19\nmov v1.h[3], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[4]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfcvt s0, h0\nbl __powisf2\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov w0, w19\nmov v1.h[4], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[5]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfcvt s0, h0\nbl __powisf2\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov w0, w19\nmov v1.h[5], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[6]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfcvt s0, h0\nbl __powisf2\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov w0, w19\nmov v1.h[6], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[7]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfcvt s0, h0\nbl __powisf2\nfmov s1, s0\nldp x30, x19, [sp, #48]             // 16-byte Folded Reload\nfcvt h2, s1\nldp q1, q0, [sp, #16]               // 32-byte Folded Reload\nmov v1.h[7], v2.h[0]\nadd sp, sp, #64\nret",
  "giasm": "sub sp, sp, #336\nstp d15, d14, [sp, #240]            // 16-byte Folded Spill\nstp d13, d12, [sp, #256]            // 16-byte Folded Spill\nstp d11, d10, [sp, #272]            // 16-byte Folded Spill\nstp d9, d8, [sp, #288]              // 16-byte Folded Spill\nstr x29, [sp, #304]                 // 8-byte Folded Spill\nstp x30, x19, [sp, #320]            // 16-byte Folded Spill\nmov v2.16b, v1.16b\nstr q1, [sp, #64]                   // 16-byte Folded Spill\nmov h14, v1.h[1]\nmov h1, v1.h[2]\nmov h8, v0.h[1]\nmov w19, w0\nmov h9, v0.h[2]\nmov h10, v0.h[3]\nmov h11, v0.h[4]\nmov h12, v0.h[5]\nmov h13, v0.h[6]\nmov h15, v0.h[7]\nfcvt s0, h0\nstr h1, [sp, #16]                   // 2-byte Folded Spill\nmov h1, v2.h[3]\nstr h1, [sp, #32]                   // 2-byte Folded Spill\nmov h1, v2.h[4]\nstr h1, [sp, #48]                   // 2-byte Folded Spill\nmov h1, v2.h[5]\nstr h1, [sp, #80]                   // 2-byte Folded Spill\nmov h1, v2.h[6]\nstr h1, [sp, #112]                  // 2-byte Folded Spill\nmov h1, v2.h[7]\nstr h1, [sp, #176]                  // 2-byte Folded Spill\nbl __powisf2\nfcvt s1, h8\nfcvt h0, s0\nmov w0, w19\nstr q0, [sp, #192]                  // 16-byte Folded Spill\nfmov s0, s1\nbl __powisf2\nfcvt s1, h9\nfcvt h0, s0\nmov w0, w19\nstr q0, [sp, #144]                  // 16-byte Folded Spill\nfmov s0, s1\nbl __powisf2\nfcvt s1, h10\nfcvt h0, s0\nmov w0, w19\nstr q0, [sp, #224]                  // 16-byte Folded Spill\nfmov s0, s1\nbl __powisf2\nfcvt s1, h11\nfcvt h0, s0\nmov w0, w19\nstr q0, [sp, #208]                  // 16-byte Folded Spill\nfmov s0, s1\nbl __powisf2\nfcvt s1, h12\nfcvt h0, s0\nmov w0, w19\nstr q0, [sp, #160]                  // 16-byte Folded Spill\nfmov s0, s1\nbl __powisf2\nfcvt s1, h13\nfcvt h0, s0\nmov w0, w19\nstr q0, [sp, #128]                  // 16-byte Folded Spill\nfmov s0, s1\nbl __powisf2\nfcvt s1, h15\nfcvt h0, s0\nmov w0, w19\nstr q0, [sp, #96]                   // 16-byte Folded Spill\nfmov s0, s1\nbl __powisf2\nldr q1, [sp, #64]                   // 16-byte Folded Reload\nfcvt h0, s0\nmov w0, w19\nfcvt s1, h1\nstr q0, [sp, #64]                   // 16-byte Folded Spill\nfmov s0, s1\nbl __powisf2\nfcvt s1, h14\nfcvt h0, s0\nmov w0, w19\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s0, s1\nbl __powisf2\nldr h1, [sp, #16]                   // 2-byte Folded Reload\nfcvt h0, s0\nmov w0, w19\nfcvt s1, h1\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfmov s0, s1\nbl __powisf2\nldr h1, [sp, #32]                   // 2-byte Folded Reload\nfcvt h0, s0\nmov w0, w19\nfcvt s1, h1\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s0, s1\nbl __powisf2\nldr h1, [sp, #48]                   // 2-byte Folded Reload\nfcvt h0, s0\nmov w0, w19\nfcvt s1, h1\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nfmov s0, s1\nbl __powisf2\nldr h1, [sp, #80]                   // 2-byte Folded Reload\nfcvt h0, s0\nmov w0, w19\nfcvt s1, h1\nstr q0, [sp, #80]                   // 16-byte Folded Spill\nfmov s0, s1\nbl __powisf2\nldr h1, [sp, #112]                  // 2-byte Folded Reload\nfcvt h0, s0\nmov w0, w19\nfcvt s1, h1\nstr q0, [sp, #112]                  // 16-byte Folded Spill\nfmov s0, s1\nbl __powisf2\nldr h1, [sp, #176]                  // 2-byte Folded Reload\nfcvt h0, s0\nmov w0, w19\nfcvt s1, h1\nstr q0, [sp, #176]                  // 16-byte Folded Spill\nfmov s0, s1\nbl __powisf2\nldr q3, [sp, #192]                  // 16-byte Folded Reload\nldr q2, [sp, #144]                  // 16-byte Folded Reload\nldr x29, [sp, #304]                 // 8-byte Folded Reload\nldp x30, x19, [sp, #320]            // 16-byte Folded Reload\nmov v3.h[1], v2.h[0]\nldp q1, q2, [sp]                    // 32-byte Folded Reload\nldp d9, d8, [sp, #288]              // 16-byte Folded Reload\nldp d11, d10, [sp, #272]            // 16-byte Folded Reload\nmov v1.h[1], v2.h[0]\nldr q2, [sp, #224]                  // 16-byte Folded Reload\nldp d13, d12, [sp, #256]            // 16-byte Folded Reload\nmov v3.h[2], v2.h[0]\nldr q2, [sp, #32]                   // 16-byte Folded Reload\nldp d15, d14, [sp, #240]            // 16-byte Folded Reload\nmov v1.h[2], v2.h[0]\nldr q2, [sp, #208]                  // 16-byte Folded Reload\nmov v3.h[3], v2.h[0]\nldr q2, [sp, #48]                   // 16-byte Folded Reload\nmov v1.h[3], v2.h[0]\nldr q2, [sp, #160]                  // 16-byte Folded Reload\nmov v3.h[4], v2.h[0]\nldr q2, [sp, #80]                   // 16-byte Folded Reload\nmov v1.h[4], v2.h[0]\nldp q2, q4, [sp, #112]              // 32-byte Folded Reload\nmov v3.h[5], v4.h[0]\nmov v1.h[5], v2.h[0]\nfcvt h2, s0\nldr q0, [sp, #96]                   // 16-byte Folded Reload\nmov v3.h[6], v0.h[0]\nldr q0, [sp, #176]                  // 16-byte Folded Reload\nmov v1.h[6], v0.h[0]\nldr q0, [sp, #64]                   // 16-byte Folded Reload\nmov v3.h[7], v0.h[0]\nmov v1.h[7], v2.h[0]\nmov v0.16b, v3.16b\nadd sp, sp, #336\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, i32 %b) {\n  %r = call <16 x half> @llvm.powi(<16 x half> %a, i32 %b)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 44 for instruction:   %r = call <16 x half> @llvm.powi.v16f16.i32(<16 x half> %a, i32 %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "powi",
  "ty": "<2 x float>",
  "variant": "binopi",
  "codesize": 4,
  "thru": 6,
  "lat": 6,
  "sizelat": 6,
  "size": 14,
  "gisize": 15,
  "extrasize": 0,
  "asm": "sub sp, sp, #48\nstp x30, x19, [sp, #32]             // 16-byte Folded Spill\nstr q0, [sp]                        // 16-byte Folded Spill\nmov w19, w0\nmov s0, v0.s[1]\nbl __powisf2\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nmov w0, w19\nldr q0, [sp]                        // 16-byte Folded Reload\nbl __powisf2\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nldp x30, x19, [sp, #32]             // 16-byte Folded Reload\nmov v0.s[1], v1.s[0]\nadd sp, sp, #48\nret",
  "giasm": "sub sp, sp, #48\nstr d8, [sp, #16]                   // 8-byte Folded Spill\nstp x30, x19, [sp, #32]             // 16-byte Folded Spill\nmov s8, v0.s[1]\nmov w19, w0\nbl __powisf2\nstr q0, [sp]                        // 16-byte Folded Spill\nmov w0, w19\nfmov s0, s8\nbl __powisf2\nldr q1, [sp]                        // 16-byte Folded Reload\nldp x30, x19, [sp, #32]             // 16-byte Folded Reload\nldr d8, [sp, #16]                   // 8-byte Folded Reload\nmov v1.s[1], v0.s[0]\nfmov d0, d1\nadd sp, sp, #48\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, i32 %b) {\n  %r = call <2 x float> @llvm.powi(<2 x float> %a, i32 %b)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <2 x float> @llvm.powi.v2f32.i32(<2 x float> %a, i32 %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "powi",
  "ty": "<4 x float>",
  "variant": "binopi",
  "codesize": 10,
  "thru": 16,
  "lat": 16,
  "sizelat": 16,
  "size": 28,
  "gisize": 30,
  "extrasize": 0,
  "asm": "sub sp, sp, #48\nstp x30, x19, [sp, #32]             // 16-byte Folded Spill\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nmov s0, v0.s[1]\nmov w19, w0\nbl __powisf2\nstr q0, [sp]                        // 16-byte Folded Spill\nmov w0, w19\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nbl __powisf2\nldr q1, [sp]                        // 16-byte Folded Reload\nmov w0, w19\nmov v0.s[1], v1.s[0]\nstr q0, [sp]                        // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov s0, v0.s[2]\nbl __powisf2\nldr q1, [sp]                        // 16-byte Folded Reload\nmov w0, w19\nmov v1.s[2], v0.s[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov s0, v0.s[3]\nstr q1, [sp]                        // 16-byte Folded Spill\nbl __powisf2\nldr q1, [sp]                        // 16-byte Folded Reload\nldp x30, x19, [sp, #32]             // 16-byte Folded Reload\nmov v1.s[3], v0.s[0]\nmov v0.16b, v1.16b\nadd sp, sp, #48\nret",
  "giasm": "sub sp, sp, #96\nstr d10, [sp, #48]                  // 8-byte Folded Spill\nstp d9, d8, [sp, #64]               // 16-byte Folded Spill\nstp x30, x19, [sp, #80]             // 16-byte Folded Spill\nmov s8, v0.s[1]\nmov s9, v0.s[2]\nmov w19, w0\nmov s10, v0.s[3]\nbl __powisf2\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nmov w0, w19\nfmov s0, s8\nbl __powisf2\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nmov w0, w19\nfmov s0, s9\nbl __powisf2\nstr q0, [sp]                        // 16-byte Folded Spill\nmov w0, w19\nfmov s0, s10\nbl __powisf2\nldp q2, q1, [sp, #16]               // 32-byte Folded Reload\nldr d10, [sp, #48]                  // 8-byte Folded Reload\nldp x30, x19, [sp, #80]             // 16-byte Folded Reload\nldp d9, d8, [sp, #64]               // 16-byte Folded Reload\nmov v1.s[1], v2.s[0]\nldr q2, [sp]                        // 16-byte Folded Reload\nmov v1.s[2], v2.s[0]\nmov v1.s[3], v0.s[0]\nmov v0.16b, v1.16b\nadd sp, sp, #96\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, i32 %b) {\n  %r = call <4 x float> @llvm.powi(<4 x float> %a, i32 %b)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 10 for instruction:   %r = call <4 x float> @llvm.powi.v4f32.i32(<4 x float> %a, i32 %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "powi",
  "ty": "<8 x float>",
  "variant": "binopi",
  "codesize": 20,
  "thru": 32,
  "lat": 32,
  "sizelat": 32,
  "size": 55,
  "gisize": 59,
  "extrasize": 0,
  "asm": "sub sp, sp, #64\nstp x30, x19, [sp, #48]             // 16-byte Folded Spill\nstp q0, q1, [sp]                    // 32-byte Folded Spill\nmov s0, v0.s[1]\nmov w19, w0\nbl __powisf2\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nmov w0, w19\nldr q0, [sp]                        // 16-byte Folded Reload\nbl __powisf2\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov w0, w19\nmov v0.s[1], v1.s[0]\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nmov s0, v0.s[2]\nbl __powisf2\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov w0, w19\nmov v1.s[2], v0.s[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov s0, v0.s[3]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nbl __powisf2\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov w0, w19\nmov v1.s[3], v0.s[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov s0, v0.s[1]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nbl __powisf2\nstr q0, [sp]                        // 16-byte Folded Spill\nmov w0, w19\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nbl __powisf2\nldr q1, [sp]                        // 16-byte Folded Reload\nmov w0, w19\nmov v0.s[1], v1.s[0]\nstr q0, [sp]                        // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov s0, v0.s[2]\nbl __powisf2\nldr q1, [sp]                        // 16-byte Folded Reload\nmov w0, w19\nmov v1.s[2], v0.s[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov s0, v0.s[3]\nstr q1, [sp]                        // 16-byte Folded Spill\nbl __powisf2\nfmov s2, s0\nldr q1, [sp]                        // 16-byte Folded Reload\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nldp x30, x19, [sp, #48]             // 16-byte Folded Reload\nmov v1.s[3], v2.s[0]\nadd sp, sp, #64\nret",
  "giasm": "sub sp, sp, #176\nstp d13, d12, [sp, #112]            // 16-byte Folded Spill\nstp d11, d10, [sp, #128]            // 16-byte Folded Spill\nstp d9, d8, [sp, #144]              // 16-byte Folded Spill\nstp x30, x19, [sp, #160]            // 16-byte Folded Spill\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nmov s8, v0.s[1]\nmov s9, v0.s[2]\nmov s10, v0.s[3]\nmov s11, v1.s[1]\nmov w19, w0\nmov s12, v1.s[2]\nmov s13, v1.s[3]\nbl __powisf2\nstr q0, [sp, #96]                   // 16-byte Folded Spill\nmov w0, w19\nfmov s0, s8\nbl __powisf2\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nmov w0, w19\nfmov s0, s9\nbl __powisf2\nstr q0, [sp, #80]                   // 16-byte Folded Spill\nmov w0, w19\nfmov s0, s10\nbl __powisf2\nstr q0, [sp, #64]                   // 16-byte Folded Spill\nmov w0, w19\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nbl __powisf2\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nmov w0, w19\nfmov s0, s11\nbl __powisf2\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nmov w0, w19\nfmov s0, s12\nbl __powisf2\nstr q0, [sp]                        // 16-byte Folded Spill\nmov w0, w19\nfmov s0, s13\nbl __powisf2\nldp q3, q2, [sp, #32]               // 32-byte Folded Reload\nldr q1, [sp, #96]                   // 16-byte Folded Reload\nldp x30, x19, [sp, #160]            // 16-byte Folded Reload\nldp d9, d8, [sp, #144]              // 16-byte Folded Reload\nmov v1.s[1], v2.s[0]\nldr q2, [sp, #16]                   // 16-byte Folded Reload\nldp d11, d10, [sp, #128]            // 16-byte Folded Reload\nmov v3.s[1], v2.s[0]\nldr q2, [sp, #80]                   // 16-byte Folded Reload\nldp d13, d12, [sp, #112]            // 16-byte Folded Reload\nmov v1.s[2], v2.s[0]\nldr q2, [sp]                        // 16-byte Folded Reload\nmov v3.s[2], v2.s[0]\nldr q2, [sp, #64]                   // 16-byte Folded Reload\nmov v1.s[3], v2.s[0]\nmov v3.s[3], v0.s[0]\nmov v2.16b, v1.16b\nmov v1.16b, v3.16b\nmov v0.16b, v2.16b\nadd sp, sp, #176\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, i32 %b) {\n  %r = call <8 x float> @llvm.powi(<8 x float> %a, i32 %b)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 20 for instruction:   %r = call <8 x float> @llvm.powi.v8f32.i32(<8 x float> %a, i32 %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "powi",
  "ty": "<2 x double>",
  "variant": "binopi",
  "codesize": 4,
  "thru": 6,
  "lat": 6,
  "sizelat": 6,
  "size": 14,
  "gisize": 14,
  "extrasize": 0,
  "asm": "sub sp, sp, #48\nstp x30, x19, [sp, #32]             // 16-byte Folded Spill\nstr q0, [sp]                        // 16-byte Folded Spill\nmov d0, v0.d[1]\nmov w19, w0\nbl __powidf2\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nmov w0, w19\nldr q0, [sp]                        // 16-byte Folded Reload\nbl __powidf2\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nldp x30, x19, [sp, #32]             // 16-byte Folded Reload\nmov v0.d[1], v1.d[0]\nadd sp, sp, #48\nret",
  "giasm": "sub sp, sp, #48\nstr d8, [sp, #16]                   // 8-byte Folded Spill\nstp x30, x19, [sp, #32]             // 16-byte Folded Spill\nmov d8, v0.d[1]\nmov w19, w0\nbl __powidf2\nstr q0, [sp]                        // 16-byte Folded Spill\nmov w0, w19\nfmov d0, d8\nbl __powidf2\nldr q1, [sp]                        // 16-byte Folded Reload\nldp x30, x19, [sp, #32]             // 16-byte Folded Reload\nldr d8, [sp, #16]                   // 8-byte Folded Reload\nmov v1.d[1], v0.d[0]\nmov v0.16b, v1.16b\nadd sp, sp, #48\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, i32 %b) {\n  %r = call <2 x double> @llvm.powi(<2 x double> %a, i32 %b)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <2 x double> @llvm.powi.v2f64.i32(<2 x double> %a, i32 %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "powi",
  "ty": "<4 x double>",
  "variant": "binopi",
  "codesize": 8,
  "thru": 12,
  "lat": 12,
  "sizelat": 12,
  "size": 26,
  "gisize": 25,
  "extrasize": 0,
  "asm": "sub sp, sp, #64\nstp x30, x19, [sp, #48]             // 16-byte Folded Spill\nstr q0, [sp]                        // 16-byte Folded Spill\nmov d0, v0.d[1]\nmov w19, w0\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nbl __powidf2\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nmov w0, w19\nldr q0, [sp]                        // 16-byte Folded Reload\nbl __powidf2\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov w0, w19\nmov v0.d[1], v1.d[0]\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nmov d0, v0.d[1]\nbl __powidf2\nstr q0, [sp]                        // 16-byte Folded Spill\nmov w0, w19\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nbl __powidf2\nfmov d1, d0\nldp q2, q0, [sp]                    // 32-byte Folded Reload\nldp x30, x19, [sp, #48]             // 16-byte Folded Reload\nmov v1.d[1], v2.d[0]\nadd sp, sp, #64\nret",
  "giasm": "sub sp, sp, #80\nstp d9, d8, [sp, #48]               // 16-byte Folded Spill\nstp x30, x19, [sp, #64]             // 16-byte Folded Spill\nstr q1, [sp]                        // 16-byte Folded Spill\nmov d8, v0.d[1]\nmov d9, v1.d[1]\nmov w19, w0\nbl __powidf2\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nmov w0, w19\nfmov d0, d8\nbl __powidf2\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nmov w0, w19\nldr q0, [sp]                        // 16-byte Folded Reload\nbl __powidf2\nstr q0, [sp]                        // 16-byte Folded Spill\nmov w0, w19\nfmov d0, d9\nbl __powidf2\nldp q1, q2, [sp, #16]               // 32-byte Folded Reload\nldp x30, x19, [sp, #64]             // 16-byte Folded Reload\nldp d9, d8, [sp, #48]               // 16-byte Folded Reload\nmov v2.d[1], v1.d[0]\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v1.d[1], v0.d[0]\nmov v0.16b, v2.16b\nadd sp, sp, #80\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, i32 %b) {\n  %r = call <4 x double> @llvm.powi(<4 x double> %a, i32 %b)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 8 for instruction:   %r = call <4 x double> @llvm.powi.v4f64.i32(<4 x double> %a, i32 %b)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "fneg",
  "ty": "half",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fneg h0, h0\nret",
  "giasm": "fneg h0, h0\nret",
  "ll": "define half @test(half %a) {\n  %r = fneg half %a\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fneg half %a\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "fneg",
  "ty": "float",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fneg s0, s0\nret",
  "giasm": "fneg s0, s0\nret",
  "ll": "define float @test(float %a) {\n  %r = fneg float %a\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fneg float %a\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "fneg",
  "ty": "double",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fneg d0, d0\nret",
  "giasm": "fneg d0, d0\nret",
  "ll": "define double @test(double %a) {\n  %r = fneg double %a\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fneg double %a\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "fneg",
  "ty": "<4 x half>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fneg v0.4h, v0.4h\nret",
  "giasm": "fneg v0.4h, v0.4h\nret",
  "ll": "define <4 x half> @test(<4 x half> %a) {\n  %r = fneg <4 x half> %a\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fneg <4 x half> %a\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "fneg",
  "ty": "<8 x half>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fneg v0.8h, v0.8h\nret",
  "giasm": "fneg v0.8h, v0.8h\nret",
  "ll": "define <8 x half> @test(<8 x half> %a) {\n  %r = fneg <8 x half> %a\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fneg <8 x half> %a\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "fneg",
  "ty": "<16 x half>",
  "variant": "unop",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fneg v0.8h, v0.8h\nfneg v1.8h, v1.8h\nret",
  "giasm": "fneg v0.8h, v0.8h\nfneg v1.8h, v1.8h\nret",
  "ll": "define <16 x half> @test(<16 x half> %a) {\n  %r = fneg <16 x half> %a\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fneg <16 x half> %a\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "fneg",
  "ty": "<2 x float>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fneg v0.2s, v0.2s\nret",
  "giasm": "fneg v0.2s, v0.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a) {\n  %r = fneg <2 x float> %a\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fneg <2 x float> %a\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "fneg",
  "ty": "<4 x float>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fneg v0.4s, v0.4s\nret",
  "giasm": "fneg v0.4s, v0.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a) {\n  %r = fneg <4 x float> %a\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fneg <4 x float> %a\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "fneg",
  "ty": "<8 x float>",
  "variant": "unop",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fneg v0.4s, v0.4s\nfneg v1.4s, v1.4s\nret",
  "giasm": "fneg v0.4s, v0.4s\nfneg v1.4s, v1.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a) {\n  %r = fneg <8 x float> %a\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fneg <8 x float> %a\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "fneg",
  "ty": "<2 x double>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 3,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fneg v0.2d, v0.2d\nret",
  "giasm": "fneg v0.2d, v0.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a) {\n  %r = fneg <2 x double> %a\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fneg <2 x double> %a\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "fneg",
  "ty": "<4 x double>",
  "variant": "unop",
  "codesize": 1,
  "thru": 2,
  "lat": 3,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fneg v0.2d, v0.2d\nfneg v1.2d, v1.2d\nret",
  "giasm": "fneg v0.2d, v0.2d\nfneg v1.2d, v1.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a) {\n  %r = fneg <4 x double> %a\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fneg <4 x double> %a\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "fabs",
  "ty": "half",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fabs h0, h0\nret",
  "giasm": "fabs h0, h0\nret",
  "ll": "define half @test(half %a) {\n  %r = call half @llvm.fabs(half %a)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call half @llvm.fabs.f16(half %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "fabs",
  "ty": "float",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fabs s0, s0\nret",
  "giasm": "fabs s0, s0\nret",
  "ll": "define float @test(float %a) {\n  %r = call float @llvm.fabs(float %a)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call float @llvm.fabs.f32(float %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "fabs",
  "ty": "double",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fabs d0, d0\nret",
  "giasm": "fabs d0, d0\nret",
  "ll": "define double @test(double %a) {\n  %r = call double @llvm.fabs(double %a)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call double @llvm.fabs.f64(double %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "fabs",
  "ty": "<4 x half>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fabs v0.4h, v0.4h\nret",
  "giasm": "fabs v0.4h, v0.4h\nret",
  "ll": "define <4 x half> @test(<4 x half> %a) {\n  %r = call <4 x half> @llvm.fabs(<4 x half> %a)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x half> @llvm.fabs.v4f16(<4 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "fabs",
  "ty": "<8 x half>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fabs v0.8h, v0.8h\nret",
  "giasm": "fabs v0.8h, v0.8h\nret",
  "ll": "define <8 x half> @test(<8 x half> %a) {\n  %r = call <8 x half> @llvm.fabs(<8 x half> %a)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <8 x half> @llvm.fabs.v8f16(<8 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "fabs",
  "ty": "<16 x half>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fabs v0.8h, v0.8h\nfabs v1.8h, v1.8h\nret",
  "giasm": "fabs v0.8h, v0.8h\nfabs v1.8h, v1.8h\nret",
  "ll": "define <16 x half> @test(<16 x half> %a) {\n  %r = call <16 x half> @llvm.fabs(<16 x half> %a)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <16 x half> @llvm.fabs.v16f16(<16 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "fabs",
  "ty": "<2 x float>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fabs v0.2s, v0.2s\nret",
  "giasm": "fabs v0.2s, v0.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a) {\n  %r = call <2 x float> @llvm.fabs(<2 x float> %a)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x float> @llvm.fabs.v2f32(<2 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "fabs",
  "ty": "<4 x float>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fabs v0.4s, v0.4s\nret",
  "giasm": "fabs v0.4s, v0.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a) {\n  %r = call <4 x float> @llvm.fabs(<4 x float> %a)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x float> @llvm.fabs.v4f32(<4 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "fabs",
  "ty": "<8 x float>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fabs v0.4s, v0.4s\nfabs v1.4s, v1.4s\nret",
  "giasm": "fabs v0.4s, v0.4s\nfabs v1.4s, v1.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a) {\n  %r = call <8 x float> @llvm.fabs(<8 x float> %a)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x float> @llvm.fabs.v8f32(<8 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "fabs",
  "ty": "<2 x double>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fabs v0.2d, v0.2d\nret",
  "giasm": "fabs v0.2d, v0.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a) {\n  %r = call <2 x double> @llvm.fabs(<2 x double> %a)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x double> @llvm.fabs.v2f64(<2 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "fabs",
  "ty": "<4 x double>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fabs v0.2d, v0.2d\nfabs v1.2d, v1.2d\nret",
  "giasm": "fabs v0.2d, v0.2d\nfabs v1.2d, v1.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a) {\n  %r = call <4 x double> @llvm.fabs(<4 x double> %a)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x double> @llvm.fabs.v4f64(<4 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "sqrt",
  "ty": "half",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fsqrt h0, h0\nret",
  "giasm": "fsqrt h0, h0\nret",
  "ll": "define half @test(half %a) {\n  %r = call half @llvm.sqrt(half %a)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call half @llvm.sqrt.f16(half %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "sqrt",
  "ty": "float",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fsqrt s0, s0\nret",
  "giasm": "fsqrt s0, s0\nret",
  "ll": "define float @test(float %a) {\n  %r = call float @llvm.sqrt(float %a)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call float @llvm.sqrt.f32(float %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "sqrt",
  "ty": "double",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fsqrt d0, d0\nret",
  "giasm": "fsqrt d0, d0\nret",
  "ll": "define double @test(double %a) {\n  %r = call double @llvm.sqrt(double %a)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call double @llvm.sqrt.f64(double %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "sqrt",
  "ty": "<4 x half>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fsqrt v0.4h, v0.4h\nret",
  "giasm": "fsqrt v0.4h, v0.4h\nret",
  "ll": "define <4 x half> @test(<4 x half> %a) {\n  %r = call <4 x half> @llvm.sqrt(<4 x half> %a)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x half> @llvm.sqrt.v4f16(<4 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "sqrt",
  "ty": "<8 x half>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fsqrt v0.8h, v0.8h\nret",
  "giasm": "fsqrt v0.8h, v0.8h\nret",
  "ll": "define <8 x half> @test(<8 x half> %a) {\n  %r = call <8 x half> @llvm.sqrt(<8 x half> %a)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <8 x half> @llvm.sqrt.v8f16(<8 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "sqrt",
  "ty": "<16 x half>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fsqrt v0.8h, v0.8h\nfsqrt v1.8h, v1.8h\nret",
  "giasm": "fsqrt v0.8h, v0.8h\nfsqrt v1.8h, v1.8h\nret",
  "ll": "define <16 x half> @test(<16 x half> %a) {\n  %r = call <16 x half> @llvm.sqrt(<16 x half> %a)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <16 x half> @llvm.sqrt.v16f16(<16 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "sqrt",
  "ty": "<2 x float>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fsqrt v0.2s, v0.2s\nret",
  "giasm": "fsqrt v0.2s, v0.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a) {\n  %r = call <2 x float> @llvm.sqrt(<2 x float> %a)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x float> @llvm.sqrt.v2f32(<2 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "sqrt",
  "ty": "<4 x float>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fsqrt v0.4s, v0.4s\nret",
  "giasm": "fsqrt v0.4s, v0.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a) {\n  %r = call <4 x float> @llvm.sqrt(<4 x float> %a)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "sqrt",
  "ty": "<8 x float>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fsqrt v0.4s, v0.4s\nfsqrt v1.4s, v1.4s\nret",
  "giasm": "fsqrt v0.4s, v0.4s\nfsqrt v1.4s, v1.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a) {\n  %r = call <8 x float> @llvm.sqrt(<8 x float> %a)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x float> @llvm.sqrt.v8f32(<8 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "sqrt",
  "ty": "<2 x double>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fsqrt v0.2d, v0.2d\nret",
  "giasm": "fsqrt v0.2d, v0.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a) {\n  %r = call <2 x double> @llvm.sqrt(<2 x double> %a)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x double> @llvm.sqrt.v2f64(<2 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "sqrt",
  "ty": "<4 x double>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fsqrt v0.2d, v0.2d\nfsqrt v1.2d, v1.2d\nret",
  "giasm": "fsqrt v0.2d, v0.2d\nfsqrt v1.2d, v1.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a) {\n  %r = call <4 x double> @llvm.sqrt(<4 x double> %a)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x double> @llvm.sqrt.v4f64(<4 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "ceil",
  "ty": "half",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintp h0, h0\nret",
  "giasm": "frintp h0, h0\nret",
  "ll": "define half @test(half %a) {\n  %r = call half @llvm.ceil(half %a)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call half @llvm.ceil.f16(half %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "ceil",
  "ty": "float",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintp s0, s0\nret",
  "giasm": "frintp s0, s0\nret",
  "ll": "define float @test(float %a) {\n  %r = call float @llvm.ceil(float %a)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call float @llvm.ceil.f32(float %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "ceil",
  "ty": "double",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintp d0, d0\nret",
  "giasm": "frintp d0, d0\nret",
  "ll": "define double @test(double %a) {\n  %r = call double @llvm.ceil(double %a)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call double @llvm.ceil.f64(double %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "ceil",
  "ty": "<4 x half>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintp v0.4h, v0.4h\nret",
  "giasm": "frintp v0.4h, v0.4h\nret",
  "ll": "define <4 x half> @test(<4 x half> %a) {\n  %r = call <4 x half> @llvm.ceil(<4 x half> %a)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x half> @llvm.ceil.v4f16(<4 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "ceil",
  "ty": "<8 x half>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintp v0.8h, v0.8h\nret",
  "giasm": "frintp v0.8h, v0.8h\nret",
  "ll": "define <8 x half> @test(<8 x half> %a) {\n  %r = call <8 x half> @llvm.ceil(<8 x half> %a)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <8 x half> @llvm.ceil.v8f16(<8 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "ceil",
  "ty": "<16 x half>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "frintp v0.8h, v0.8h\nfrintp v1.8h, v1.8h\nret",
  "giasm": "frintp v0.8h, v0.8h\nfrintp v1.8h, v1.8h\nret",
  "ll": "define <16 x half> @test(<16 x half> %a) {\n  %r = call <16 x half> @llvm.ceil(<16 x half> %a)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <16 x half> @llvm.ceil.v16f16(<16 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "ceil",
  "ty": "<2 x float>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintp v0.2s, v0.2s\nret",
  "giasm": "frintp v0.2s, v0.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a) {\n  %r = call <2 x float> @llvm.ceil(<2 x float> %a)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x float> @llvm.ceil.v2f32(<2 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "ceil",
  "ty": "<4 x float>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintp v0.4s, v0.4s\nret",
  "giasm": "frintp v0.4s, v0.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a) {\n  %r = call <4 x float> @llvm.ceil(<4 x float> %a)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x float> @llvm.ceil.v4f32(<4 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "ceil",
  "ty": "<8 x float>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "frintp v0.4s, v0.4s\nfrintp v1.4s, v1.4s\nret",
  "giasm": "frintp v0.4s, v0.4s\nfrintp v1.4s, v1.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a) {\n  %r = call <8 x float> @llvm.ceil(<8 x float> %a)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x float> @llvm.ceil.v8f32(<8 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "ceil",
  "ty": "<2 x double>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintp v0.2d, v0.2d\nret",
  "giasm": "frintp v0.2d, v0.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a) {\n  %r = call <2 x double> @llvm.ceil(<2 x double> %a)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x double> @llvm.ceil.v2f64(<2 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "ceil",
  "ty": "<4 x double>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "frintp v0.2d, v0.2d\nfrintp v1.2d, v1.2d\nret",
  "giasm": "frintp v0.2d, v0.2d\nfrintp v1.2d, v1.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a) {\n  %r = call <4 x double> @llvm.ceil(<4 x double> %a)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x double> @llvm.ceil.v4f64(<4 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "floor",
  "ty": "half",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintm h0, h0\nret",
  "giasm": "frintm h0, h0\nret",
  "ll": "define half @test(half %a) {\n  %r = call half @llvm.floor(half %a)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call half @llvm.floor.f16(half %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "floor",
  "ty": "float",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintm s0, s0\nret",
  "giasm": "frintm s0, s0\nret",
  "ll": "define float @test(float %a) {\n  %r = call float @llvm.floor(float %a)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call float @llvm.floor.f32(float %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "floor",
  "ty": "double",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintm d0, d0\nret",
  "giasm": "frintm d0, d0\nret",
  "ll": "define double @test(double %a) {\n  %r = call double @llvm.floor(double %a)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call double @llvm.floor.f64(double %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "floor",
  "ty": "<4 x half>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintm v0.4h, v0.4h\nret",
  "giasm": "frintm v0.4h, v0.4h\nret",
  "ll": "define <4 x half> @test(<4 x half> %a) {\n  %r = call <4 x half> @llvm.floor(<4 x half> %a)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x half> @llvm.floor.v4f16(<4 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "floor",
  "ty": "<8 x half>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintm v0.8h, v0.8h\nret",
  "giasm": "frintm v0.8h, v0.8h\nret",
  "ll": "define <8 x half> @test(<8 x half> %a) {\n  %r = call <8 x half> @llvm.floor(<8 x half> %a)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <8 x half> @llvm.floor.v8f16(<8 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "floor",
  "ty": "<16 x half>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "frintm v0.8h, v0.8h\nfrintm v1.8h, v1.8h\nret",
  "giasm": "frintm v0.8h, v0.8h\nfrintm v1.8h, v1.8h\nret",
  "ll": "define <16 x half> @test(<16 x half> %a) {\n  %r = call <16 x half> @llvm.floor(<16 x half> %a)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <16 x half> @llvm.floor.v16f16(<16 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "floor",
  "ty": "<2 x float>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintm v0.2s, v0.2s\nret",
  "giasm": "frintm v0.2s, v0.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a) {\n  %r = call <2 x float> @llvm.floor(<2 x float> %a)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x float> @llvm.floor.v2f32(<2 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "floor",
  "ty": "<4 x float>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintm v0.4s, v0.4s\nret",
  "giasm": "frintm v0.4s, v0.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a) {\n  %r = call <4 x float> @llvm.floor(<4 x float> %a)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x float> @llvm.floor.v4f32(<4 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "floor",
  "ty": "<8 x float>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "frintm v0.4s, v0.4s\nfrintm v1.4s, v1.4s\nret",
  "giasm": "frintm v0.4s, v0.4s\nfrintm v1.4s, v1.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a) {\n  %r = call <8 x float> @llvm.floor(<8 x float> %a)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x float> @llvm.floor.v8f32(<8 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "floor",
  "ty": "<2 x double>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintm v0.2d, v0.2d\nret",
  "giasm": "frintm v0.2d, v0.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a) {\n  %r = call <2 x double> @llvm.floor(<2 x double> %a)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x double> @llvm.floor.v2f64(<2 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "floor",
  "ty": "<4 x double>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "frintm v0.2d, v0.2d\nfrintm v1.2d, v1.2d\nret",
  "giasm": "frintm v0.2d, v0.2d\nfrintm v1.2d, v1.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a) {\n  %r = call <4 x double> @llvm.floor(<4 x double> %a)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x double> @llvm.floor.v4f64(<4 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "trunc",
  "ty": "half",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintz h0, h0\nret",
  "giasm": "frintz h0, h0\nret",
  "ll": "define half @test(half %a) {\n  %r = call half @llvm.trunc(half %a)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call half @llvm.trunc.f16(half %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "trunc",
  "ty": "float",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintz s0, s0\nret",
  "giasm": "frintz s0, s0\nret",
  "ll": "define float @test(float %a) {\n  %r = call float @llvm.trunc(float %a)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call float @llvm.trunc.f32(float %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "trunc",
  "ty": "double",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintz d0, d0\nret",
  "giasm": "frintz d0, d0\nret",
  "ll": "define double @test(double %a) {\n  %r = call double @llvm.trunc(double %a)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call double @llvm.trunc.f64(double %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "trunc",
  "ty": "<4 x half>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintz v0.4h, v0.4h\nret",
  "giasm": "frintz v0.4h, v0.4h\nret",
  "ll": "define <4 x half> @test(<4 x half> %a) {\n  %r = call <4 x half> @llvm.trunc(<4 x half> %a)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x half> @llvm.trunc.v4f16(<4 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "trunc",
  "ty": "<8 x half>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintz v0.8h, v0.8h\nret",
  "giasm": "frintz v0.8h, v0.8h\nret",
  "ll": "define <8 x half> @test(<8 x half> %a) {\n  %r = call <8 x half> @llvm.trunc(<8 x half> %a)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <8 x half> @llvm.trunc.v8f16(<8 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "trunc",
  "ty": "<16 x half>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "frintz v0.8h, v0.8h\nfrintz v1.8h, v1.8h\nret",
  "giasm": "frintz v0.8h, v0.8h\nfrintz v1.8h, v1.8h\nret",
  "ll": "define <16 x half> @test(<16 x half> %a) {\n  %r = call <16 x half> @llvm.trunc(<16 x half> %a)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <16 x half> @llvm.trunc.v16f16(<16 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "trunc",
  "ty": "<2 x float>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintz v0.2s, v0.2s\nret",
  "giasm": "frintz v0.2s, v0.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a) {\n  %r = call <2 x float> @llvm.trunc(<2 x float> %a)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x float> @llvm.trunc.v2f32(<2 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "trunc",
  "ty": "<4 x float>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintz v0.4s, v0.4s\nret",
  "giasm": "frintz v0.4s, v0.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a) {\n  %r = call <4 x float> @llvm.trunc(<4 x float> %a)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x float> @llvm.trunc.v4f32(<4 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "trunc",
  "ty": "<8 x float>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "frintz v0.4s, v0.4s\nfrintz v1.4s, v1.4s\nret",
  "giasm": "frintz v0.4s, v0.4s\nfrintz v1.4s, v1.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a) {\n  %r = call <8 x float> @llvm.trunc(<8 x float> %a)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x float> @llvm.trunc.v8f32(<8 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "trunc",
  "ty": "<2 x double>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintz v0.2d, v0.2d\nret",
  "giasm": "frintz v0.2d, v0.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a) {\n  %r = call <2 x double> @llvm.trunc(<2 x double> %a)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x double> @llvm.trunc.v2f64(<2 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "trunc",
  "ty": "<4 x double>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "frintz v0.2d, v0.2d\nfrintz v1.2d, v1.2d\nret",
  "giasm": "frintz v0.2d, v0.2d\nfrintz v1.2d, v1.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a) {\n  %r = call <4 x double> @llvm.trunc(<4 x double> %a)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x double> @llvm.trunc.v4f64(<4 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "rint",
  "ty": "half",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintx h0, h0\nret",
  "giasm": "frintx h0, h0\nret",
  "ll": "define half @test(half %a) {\n  %r = call half @llvm.rint(half %a)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call half @llvm.rint.f16(half %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "rint",
  "ty": "float",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintx s0, s0\nret",
  "giasm": "frintx s0, s0\nret",
  "ll": "define float @test(float %a) {\n  %r = call float @llvm.rint(float %a)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call float @llvm.rint.f32(float %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "rint",
  "ty": "double",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintx d0, d0\nret",
  "giasm": "frintx d0, d0\nret",
  "ll": "define double @test(double %a) {\n  %r = call double @llvm.rint(double %a)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call double @llvm.rint.f64(double %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "rint",
  "ty": "<4 x half>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintx v0.4h, v0.4h\nret",
  "giasm": "frintx v0.4h, v0.4h\nret",
  "ll": "define <4 x half> @test(<4 x half> %a) {\n  %r = call <4 x half> @llvm.rint(<4 x half> %a)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x half> @llvm.rint.v4f16(<4 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "rint",
  "ty": "<8 x half>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintx v0.8h, v0.8h\nret",
  "giasm": "frintx v0.8h, v0.8h\nret",
  "ll": "define <8 x half> @test(<8 x half> %a) {\n  %r = call <8 x half> @llvm.rint(<8 x half> %a)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <8 x half> @llvm.rint.v8f16(<8 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "rint",
  "ty": "<16 x half>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "frintx v0.8h, v0.8h\nfrintx v1.8h, v1.8h\nret",
  "giasm": "frintx v0.8h, v0.8h\nfrintx v1.8h, v1.8h\nret",
  "ll": "define <16 x half> @test(<16 x half> %a) {\n  %r = call <16 x half> @llvm.rint(<16 x half> %a)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <16 x half> @llvm.rint.v16f16(<16 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "rint",
  "ty": "<2 x float>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintx v0.2s, v0.2s\nret",
  "giasm": "frintx v0.2s, v0.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a) {\n  %r = call <2 x float> @llvm.rint(<2 x float> %a)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x float> @llvm.rint.v2f32(<2 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "rint",
  "ty": "<4 x float>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintx v0.4s, v0.4s\nret",
  "giasm": "frintx v0.4s, v0.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a) {\n  %r = call <4 x float> @llvm.rint(<4 x float> %a)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x float> @llvm.rint.v4f32(<4 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "rint",
  "ty": "<8 x float>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "frintx v0.4s, v0.4s\nfrintx v1.4s, v1.4s\nret",
  "giasm": "frintx v0.4s, v0.4s\nfrintx v1.4s, v1.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a) {\n  %r = call <8 x float> @llvm.rint(<8 x float> %a)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x float> @llvm.rint.v8f32(<8 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "rint",
  "ty": "<2 x double>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintx v0.2d, v0.2d\nret",
  "giasm": "frintx v0.2d, v0.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a) {\n  %r = call <2 x double> @llvm.rint(<2 x double> %a)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x double> @llvm.rint.v2f64(<2 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "rint",
  "ty": "<4 x double>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "frintx v0.2d, v0.2d\nfrintx v1.2d, v1.2d\nret",
  "giasm": "frintx v0.2d, v0.2d\nfrintx v1.2d, v1.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a) {\n  %r = call <4 x double> @llvm.rint(<4 x double> %a)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x double> @llvm.rint.v4f64(<4 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "nearbyint",
  "ty": "half",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frinti h0, h0\nret",
  "giasm": "frinti h0, h0\nret",
  "ll": "define half @test(half %a) {\n  %r = call half @llvm.nearbyint(half %a)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call half @llvm.nearbyint.f16(half %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "nearbyint",
  "ty": "float",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frinti s0, s0\nret",
  "giasm": "frinti s0, s0\nret",
  "ll": "define float @test(float %a) {\n  %r = call float @llvm.nearbyint(float %a)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call float @llvm.nearbyint.f32(float %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "nearbyint",
  "ty": "double",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frinti d0, d0\nret",
  "giasm": "frinti d0, d0\nret",
  "ll": "define double @test(double %a) {\n  %r = call double @llvm.nearbyint(double %a)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call double @llvm.nearbyint.f64(double %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "nearbyint",
  "ty": "<4 x half>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frinti v0.4h, v0.4h\nret",
  "giasm": "frinti v0.4h, v0.4h\nret",
  "ll": "define <4 x half> @test(<4 x half> %a) {\n  %r = call <4 x half> @llvm.nearbyint(<4 x half> %a)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x half> @llvm.nearbyint.v4f16(<4 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "nearbyint",
  "ty": "<8 x half>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frinti v0.8h, v0.8h\nret",
  "giasm": "frinti v0.8h, v0.8h\nret",
  "ll": "define <8 x half> @test(<8 x half> %a) {\n  %r = call <8 x half> @llvm.nearbyint(<8 x half> %a)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <8 x half> @llvm.nearbyint.v8f16(<8 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "nearbyint",
  "ty": "<16 x half>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "frinti v0.8h, v0.8h\nfrinti v1.8h, v1.8h\nret",
  "giasm": "frinti v0.8h, v0.8h\nfrinti v1.8h, v1.8h\nret",
  "ll": "define <16 x half> @test(<16 x half> %a) {\n  %r = call <16 x half> @llvm.nearbyint(<16 x half> %a)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <16 x half> @llvm.nearbyint.v16f16(<16 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "nearbyint",
  "ty": "<2 x float>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frinti v0.2s, v0.2s\nret",
  "giasm": "frinti v0.2s, v0.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a) {\n  %r = call <2 x float> @llvm.nearbyint(<2 x float> %a)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x float> @llvm.nearbyint.v2f32(<2 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "nearbyint",
  "ty": "<4 x float>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frinti v0.4s, v0.4s\nret",
  "giasm": "frinti v0.4s, v0.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a) {\n  %r = call <4 x float> @llvm.nearbyint(<4 x float> %a)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x float> @llvm.nearbyint.v4f32(<4 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "nearbyint",
  "ty": "<8 x float>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "frinti v0.4s, v0.4s\nfrinti v1.4s, v1.4s\nret",
  "giasm": "frinti v0.4s, v0.4s\nfrinti v1.4s, v1.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a) {\n  %r = call <8 x float> @llvm.nearbyint(<8 x float> %a)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x float> @llvm.nearbyint.v8f32(<8 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "nearbyint",
  "ty": "<2 x double>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frinti v0.2d, v0.2d\nret",
  "giasm": "frinti v0.2d, v0.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a) {\n  %r = call <2 x double> @llvm.nearbyint(<2 x double> %a)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x double> @llvm.nearbyint.v2f64(<2 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "nearbyint",
  "ty": "<4 x double>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "frinti v0.2d, v0.2d\nfrinti v1.2d, v1.2d\nret",
  "giasm": "frinti v0.2d, v0.2d\nfrinti v1.2d, v1.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a) {\n  %r = call <4 x double> @llvm.nearbyint(<4 x double> %a)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x double> @llvm.nearbyint.v4f64(<4 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "round",
  "ty": "half",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frinta h0, h0\nret",
  "giasm": "frinta h0, h0\nret",
  "ll": "define half @test(half %a) {\n  %r = call half @llvm.round(half %a)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call half @llvm.round.f16(half %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "round",
  "ty": "float",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frinta s0, s0\nret",
  "giasm": "frinta s0, s0\nret",
  "ll": "define float @test(float %a) {\n  %r = call float @llvm.round(float %a)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call float @llvm.round.f32(float %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "round",
  "ty": "double",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frinta d0, d0\nret",
  "giasm": "frinta d0, d0\nret",
  "ll": "define double @test(double %a) {\n  %r = call double @llvm.round(double %a)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call double @llvm.round.f64(double %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "round",
  "ty": "<4 x half>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frinta v0.4h, v0.4h\nret",
  "giasm": "frinta v0.4h, v0.4h\nret",
  "ll": "define <4 x half> @test(<4 x half> %a) {\n  %r = call <4 x half> @llvm.round(<4 x half> %a)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x half> @llvm.round.v4f16(<4 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "round",
  "ty": "<8 x half>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frinta v0.8h, v0.8h\nret",
  "giasm": "frinta v0.8h, v0.8h\nret",
  "ll": "define <8 x half> @test(<8 x half> %a) {\n  %r = call <8 x half> @llvm.round(<8 x half> %a)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <8 x half> @llvm.round.v8f16(<8 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "round",
  "ty": "<16 x half>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "frinta v0.8h, v0.8h\nfrinta v1.8h, v1.8h\nret",
  "giasm": "frinta v0.8h, v0.8h\nfrinta v1.8h, v1.8h\nret",
  "ll": "define <16 x half> @test(<16 x half> %a) {\n  %r = call <16 x half> @llvm.round(<16 x half> %a)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <16 x half> @llvm.round.v16f16(<16 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "round",
  "ty": "<2 x float>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frinta v0.2s, v0.2s\nret",
  "giasm": "frinta v0.2s, v0.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a) {\n  %r = call <2 x float> @llvm.round(<2 x float> %a)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x float> @llvm.round.v2f32(<2 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "round",
  "ty": "<4 x float>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frinta v0.4s, v0.4s\nret",
  "giasm": "frinta v0.4s, v0.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a) {\n  %r = call <4 x float> @llvm.round(<4 x float> %a)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x float> @llvm.round.v4f32(<4 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "round",
  "ty": "<8 x float>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "frinta v0.4s, v0.4s\nfrinta v1.4s, v1.4s\nret",
  "giasm": "frinta v0.4s, v0.4s\nfrinta v1.4s, v1.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a) {\n  %r = call <8 x float> @llvm.round(<8 x float> %a)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x float> @llvm.round.v8f32(<8 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "round",
  "ty": "<2 x double>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frinta v0.2d, v0.2d\nret",
  "giasm": "frinta v0.2d, v0.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a) {\n  %r = call <2 x double> @llvm.round(<2 x double> %a)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x double> @llvm.round.v2f64(<2 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "round",
  "ty": "<4 x double>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "frinta v0.2d, v0.2d\nfrinta v1.2d, v1.2d\nret",
  "giasm": "frinta v0.2d, v0.2d\nfrinta v1.2d, v1.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a) {\n  %r = call <4 x double> @llvm.round(<4 x double> %a)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x double> @llvm.round.v4f64(<4 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "roundeven",
  "ty": "half",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintn h0, h0\nret",
  "giasm": "frintn h0, h0\nret",
  "ll": "define half @test(half %a) {\n  %r = call half @llvm.roundeven(half %a)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call half @llvm.roundeven.f16(half %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "roundeven",
  "ty": "float",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintn s0, s0\nret",
  "giasm": "frintn s0, s0\nret",
  "ll": "define float @test(float %a) {\n  %r = call float @llvm.roundeven(float %a)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call float @llvm.roundeven.f32(float %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "roundeven",
  "ty": "double",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintn d0, d0\nret",
  "giasm": "frintn d0, d0\nret",
  "ll": "define double @test(double %a) {\n  %r = call double @llvm.roundeven(double %a)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call double @llvm.roundeven.f64(double %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "roundeven",
  "ty": "<4 x half>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintn v0.4h, v0.4h\nret",
  "giasm": "frintn v0.4h, v0.4h\nret",
  "ll": "define <4 x half> @test(<4 x half> %a) {\n  %r = call <4 x half> @llvm.roundeven(<4 x half> %a)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x half> @llvm.roundeven.v4f16(<4 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "roundeven",
  "ty": "<8 x half>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintn v0.8h, v0.8h\nret",
  "giasm": "frintn v0.8h, v0.8h\nret",
  "ll": "define <8 x half> @test(<8 x half> %a) {\n  %r = call <8 x half> @llvm.roundeven(<8 x half> %a)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <8 x half> @llvm.roundeven.v8f16(<8 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "roundeven",
  "ty": "<16 x half>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "frintn v0.8h, v0.8h\nfrintn v1.8h, v1.8h\nret",
  "giasm": "frintn v0.8h, v0.8h\nfrintn v1.8h, v1.8h\nret",
  "ll": "define <16 x half> @test(<16 x half> %a) {\n  %r = call <16 x half> @llvm.roundeven(<16 x half> %a)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <16 x half> @llvm.roundeven.v16f16(<16 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "roundeven",
  "ty": "<2 x float>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintn v0.2s, v0.2s\nret",
  "giasm": "frintn v0.2s, v0.2s\nret",
  "ll": "define <2 x float> @test(<2 x float> %a) {\n  %r = call <2 x float> @llvm.roundeven(<2 x float> %a)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x float> @llvm.roundeven.v2f32(<2 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "roundeven",
  "ty": "<4 x float>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintn v0.4s, v0.4s\nret",
  "giasm": "frintn v0.4s, v0.4s\nret",
  "ll": "define <4 x float> @test(<4 x float> %a) {\n  %r = call <4 x float> @llvm.roundeven(<4 x float> %a)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x float> @llvm.roundeven.v4f32(<4 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "roundeven",
  "ty": "<8 x float>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "frintn v0.4s, v0.4s\nfrintn v1.4s, v1.4s\nret",
  "giasm": "frintn v0.4s, v0.4s\nfrintn v1.4s, v1.4s\nret",
  "ll": "define <8 x float> @test(<8 x float> %a) {\n  %r = call <8 x float> @llvm.roundeven(<8 x float> %a)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x float> @llvm.roundeven.v8f32(<8 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "roundeven",
  "ty": "<2 x double>",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "frintn v0.2d, v0.2d\nret",
  "giasm": "frintn v0.2d, v0.2d\nret",
  "ll": "define <2 x double> @test(<2 x double> %a) {\n  %r = call <2 x double> @llvm.roundeven(<2 x double> %a)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x double> @llvm.roundeven.v2f64(<2 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "roundeven",
  "ty": "<4 x double>",
  "variant": "unop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "frintn v0.2d, v0.2d\nfrintn v1.2d, v1.2d\nret",
  "giasm": "frintn v0.2d, v0.2d\nfrintn v1.2d, v1.2d\nret",
  "ll": "define <4 x double> @test(<4 x double> %a) {\n  %r = call <4 x double> @llvm.roundeven(<4 x double> %a)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x double> @llvm.roundeven.v4f64(<4 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "exp",
  "ty": "half",
  "variant": "unop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 5,
  "gisize": 5,
  "extrasize": 0,
  "asm": "str x30, [sp, #-16]!                // 8-byte Folded Spill\nfcvt s0, h0\nbl expf\nfcvt h0, s0\nldr x30, [sp], #16                  // 8-byte Folded Reload\nret",
  "giasm": "str x30, [sp, #-16]!                // 8-byte Folded Spill\nfcvt s0, h0\nbl expf\nfcvt h0, s0\nldr x30, [sp], #16                  // 8-byte Folded Reload\nret",
  "ll": "define half @test(half %a) {\n  %r = call half @llvm.exp(half %a)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call half @llvm.exp.f16(half %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "exp",
  "ty": "float",
  "variant": "unop",
  "codesize": 1,
  "thru": 10,
  "lat": 10,
  "sizelat": 10,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "b expf",
  "giasm": "b expf",
  "ll": "define float @test(float %a) {\n  %r = call float @llvm.exp(float %a)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call float @llvm.exp.f32(float %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "exp",
  "ty": "double",
  "variant": "unop",
  "codesize": 1,
  "thru": 10,
  "lat": 10,
  "sizelat": 10,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "b exp",
  "giasm": "b exp",
  "ll": "define double @test(double %a) {\n  %r = call double @llvm.exp(double %a)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call double @llvm.exp.f64(double %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "exp",
  "ty": "<4 x half>",
  "variant": "unop",
  "codesize": 10,
  "thru": 16,
  "lat": 16,
  "sizelat": 16,
  "size": 33,
  "gisize": 34,
  "extrasize": 0,
  "asm": "sub sp, sp, #48\nstr x30, [sp, #32]                  // 8-byte Folded Spill\nmov h1, v0.h[1]\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfcvt s0, h1\nbl expf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nfcvt h0, s0\nfcvt s1, h1\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s0, s1\nbl expf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nfcvt h2, s0\nmov h1, v1.h[2]\nfcvt s0, h1\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v2.h[1], v1.h[0]\nstr q2, [sp]                        // 16-byte Folded Spill\nbl expf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nfcvt h2, s0\nmov h1, v1.h[3]\nfcvt s0, h1\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v1.h[2], v2.h[0]\nstr q1, [sp]                        // 16-byte Folded Spill\nbl expf\nfcvt h1, s0\nldr q0, [sp]                        // 16-byte Folded Reload\nldr x30, [sp, #32]                  // 8-byte Folded Reload\nmov v0.h[3], v1.h[0]\nadd sp, sp, #48\nret",
  "giasm": "sub sp, sp, #80\nstr d10, [sp, #48]                  // 8-byte Folded Spill\nstp d9, d8, [sp, #56]               // 16-byte Folded Spill\nstr x30, [sp, #72]                  // 8-byte Folded Spill\nmov h8, v0.h[1]\nmov h9, v0.h[2]\nmov h10, v0.h[3]\nfcvt s0, h0\nbl expf\nfcvt s1, h8\nfcvt h0, s0\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s0, s1\nbl expf\nfcvt s1, h9\nfcvt h0, s0\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s0, s1\nbl expf\nfcvt s1, h10\nfcvt h0, s0\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfmov s0, s1\nbl expf\nldp q3, q2, [sp]                    // 32-byte Folded Reload\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nldp d9, d8, [sp, #56]               // 16-byte Folded Reload\nldr x30, [sp, #72]                  // 8-byte Folded Reload\nldr d10, [sp, #48]                  // 8-byte Folded Reload\nmov v1.h[1], v3.h[0]\nmov v1.h[2], v2.h[0]\nmov v1.h[3], v0.h[0]\nmov v0.16b, v1.16b\nadd sp, sp, #80\nret",
  "ll": "define <4 x half> @test(<4 x half> %a) {\n  %r = call <4 x half> @llvm.exp(<4 x half> %a)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 10 for instruction:   %r = call <4 x half> @llvm.exp.v4f16(<4 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "exp",
  "ty": "<8 x half>",
  "variant": "unop",
  "codesize": 22,
  "thru": 36,
  "lat": 36,
  "sizelat": 36,
  "size": 64,
  "gisize": 68,
  "extrasize": 0,
  "asm": "sub sp, sp, #48\nstr x30, [sp, #32]                  // 8-byte Folded Spill\nmov h1, v0.h[1]\nstr q0, [sp]                        // 16-byte Folded Spill\nfcvt s0, h1\nbl expf\nfcvt h0, s0\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nfcvt s0, h0\nbl expf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v0.h[1], v1.h[0]\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[2]\nfcvt s0, h0\nbl expf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[2], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[3]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfcvt s0, h0\nbl expf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[3], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[4]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfcvt s0, h0\nbl expf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[4], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[5]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfcvt s0, h0\nbl expf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[5], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[6]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfcvt s0, h0\nbl expf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[6], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[7]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfcvt s0, h0\nbl expf\nfcvt h1, s0\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nldr x30, [sp, #32]                  // 8-byte Folded Reload\nmov v0.h[7], v1.h[0]\nadd sp, sp, #48\nret",
  "giasm": "sub sp, sp, #176\nstr d14, [sp, #112]                 // 8-byte Folded Spill\nstp d13, d12, [sp, #120]            // 16-byte Folded Spill\nstp d11, d10, [sp, #136]            // 16-byte Folded Spill\nstp d9, d8, [sp, #152]              // 16-byte Folded Spill\nstr x30, [sp, #168]                 // 8-byte Folded Spill\nmov h8, v0.h[1]\nmov h9, v0.h[2]\nmov h10, v0.h[3]\nmov h11, v0.h[4]\nmov h12, v0.h[5]\nmov h13, v0.h[6]\nmov h14, v0.h[7]\nfcvt s0, h0\nbl expf\nfcvt s1, h8\nfcvt h0, s0\nstr q0, [sp, #96]                   // 16-byte Folded Spill\nfmov s0, s1\nbl expf\nfcvt s1, h9\nfcvt h0, s0\nstr q0, [sp, #64]                   // 16-byte Folded Spill\nfmov s0, s1\nbl expf\nfcvt s1, h10\nfcvt h0, s0\nstr q0, [sp, #80]                   // 16-byte Folded Spill\nfmov s0, s1\nbl expf\nfcvt s1, h11\nfcvt h0, s0\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nfmov s0, s1\nbl expf\nfcvt s1, h12\nfcvt h0, s0\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s0, s1\nbl expf\nfcvt s1, h13\nfcvt h0, s0\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfmov s0, s1\nbl expf\nfcvt s1, h14\nfcvt h0, s0\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s0, s1\nbl expf\nldp q3, q2, [sp, #64]               // 32-byte Folded Reload\nfcvt h0, s0\nldr q1, [sp, #96]                   // 16-byte Folded Reload\nldp d9, d8, [sp, #152]              // 16-byte Folded Reload\nldp d11, d10, [sp, #136]            // 16-byte Folded Reload\nldr x30, [sp, #168]                 // 8-byte Folded Reload\nmov v1.h[1], v3.h[0]\nldr d14, [sp, #112]                 // 8-byte Folded Reload\nldp d13, d12, [sp, #120]            // 16-byte Folded Reload\nmov v1.h[2], v2.h[0]\nldp q2, q3, [sp, #32]               // 32-byte Folded Reload\nmov v1.h[3], v3.h[0]\nmov v1.h[4], v2.h[0]\nldp q2, q3, [sp]                    // 32-byte Folded Reload\nmov v1.h[5], v3.h[0]\nmov v1.h[6], v2.h[0]\nmov v1.h[7], v0.h[0]\nmov v0.16b, v1.16b\nadd sp, sp, #176\nret",
  "ll": "define <8 x half> @test(<8 x half> %a) {\n  %r = call <8 x half> @llvm.exp(<8 x half> %a)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 22 for instruction:   %r = call <8 x half> @llvm.exp.v8f16(<8 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "exp",
  "ty": "<16 x half>",
  "variant": "unop",
  "codesize": 44,
  "thru": 72,
  "lat": 72,
  "sizelat": 72,
  "size": 126,
  "gisize": 146,
  "extrasize": 0,
  "asm": "sub sp, sp, #64\nstr x30, [sp, #48]                  // 8-byte Folded Spill\nstp q1, q0, [sp]                    // 32-byte Folded Spill\nmov h1, v0.h[1]\nfcvt s0, h1\nbl expf\nfcvt h0, s0\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nfcvt s0, h0\nbl expf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v0.h[1], v1.h[0]\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[2]\nfcvt s0, h0\nbl expf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[2], v0.h[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[3]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfcvt s0, h0\nbl expf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[3], v0.h[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[4]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfcvt s0, h0\nbl expf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[4], v0.h[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[5]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfcvt s0, h0\nbl expf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[5], v0.h[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[6]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfcvt s0, h0\nbl expf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[6], v0.h[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov h0, v0.h[7]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfcvt s0, h0\nbl expf\nfcvt h0, s0\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.h[7], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[1]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nfcvt s0, h0\nbl expf\nfcvt h0, s0\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nfcvt s0, h0\nbl expf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v0.h[1], v1.h[0]\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[2]\nfcvt s0, h0\nbl expf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[2], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[3]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfcvt s0, h0\nbl expf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[3], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[4]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfcvt s0, h0\nbl expf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[4], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[5]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfcvt s0, h0\nbl expf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[5], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[6]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfcvt s0, h0\nbl expf\nfcvt h0, s0\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v1.h[6], v0.h[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov h0, v0.h[7]\nstr q1, [sp, #16]                   // 16-byte Folded Spill\nfcvt s0, h0\nbl expf\nfmov s1, s0\nldr x30, [sp, #48]                  // 8-byte Folded Reload\nfcvt h2, s1\nldp q1, q0, [sp, #16]               // 32-byte Folded Reload\nmov v1.h[7], v2.h[0]\nadd sp, sp, #64\nret",
  "giasm": "sub sp, sp, #320\nstp d15, d14, [sp, #240]            // 16-byte Folded Spill\nstp d13, d12, [sp, #256]            // 16-byte Folded Spill\nstp d11, d10, [sp, #272]            // 16-byte Folded Spill\nstp d9, d8, [sp, #288]              // 16-byte Folded Spill\nstp x29, x30, [sp, #304]            // 16-byte Folded Spill\nmov v2.16b, v1.16b\nstr q1, [sp, #80]                   // 16-byte Folded Spill\nmov h14, v1.h[1]\nmov h1, v1.h[2]\nmov h15, v0.h[1]\nmov h8, v0.h[2]\nmov h9, v0.h[3]\nmov h10, v0.h[4]\nmov h11, v0.h[5]\nmov h12, v0.h[6]\nmov h13, v0.h[7]\nfcvt s0, h0\nstr h1, [sp, #16]                   // 2-byte Folded Spill\nmov h1, v2.h[3]\nstr h1, [sp, #32]                   // 2-byte Folded Spill\nmov h1, v2.h[4]\nstr h1, [sp, #48]                   // 2-byte Folded Spill\nmov h1, v2.h[5]\nstr h1, [sp, #64]                   // 2-byte Folded Spill\nmov h1, v2.h[6]\nstr h1, [sp, #96]                   // 2-byte Folded Spill\nmov h1, v2.h[7]\nstr h1, [sp, #160]                  // 2-byte Folded Spill\nbl expf\nfcvt s1, h15\nfcvt h0, s0\nstr q0, [sp, #192]                  // 16-byte Folded Spill\nfmov s0, s1\nbl expf\nfcvt s1, h8\nfcvt h0, s0\nstr q0, [sp, #112]                  // 16-byte Folded Spill\nfmov s0, s1\nbl expf\nfcvt s1, h9\nfcvt h0, s0\nstr q0, [sp, #224]                  // 16-byte Folded Spill\nfmov s0, s1\nbl expf\nfcvt s1, h10\nfcvt h0, s0\nstr q0, [sp, #208]                  // 16-byte Folded Spill\nfmov s0, s1\nbl expf\nfcvt s1, h11\nfcvt h0, s0\nstr q0, [sp, #176]                  // 16-byte Folded Spill\nfmov s0, s1\nbl expf\nfcvt s1, h12\nfcvt h0, s0\nstr q0, [sp, #144]                  // 16-byte Folded Spill\nfmov s0, s1\nbl expf\nfcvt s1, h13\nfcvt h0, s0\nstr q0, [sp, #128]                  // 16-byte Folded Spill\nfmov s0, s1\nbl expf\nldr q1, [sp, #80]                   // 16-byte Folded Reload\nfcvt h0, s0\nfcvt s1, h1\nstr q0, [sp, #80]                   // 16-byte Folded Spill\nfmov s0, s1\nbl expf\nfcvt s1, h14\nfcvt h0, s0\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s0, s1\nbl expf\nldr h1, [sp, #16]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s1, h1\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfmov s0, s1\nbl expf\nldr h1, [sp, #32]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s1, h1\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s0, s1\nbl expf\nldr h1, [sp, #48]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s1, h1\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nfmov s0, s1\nbl expf\nldr h1, [sp, #64]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s1, h1\nstr q0, [sp, #64]                   // 16-byte Folded Spill\nfmov s0, s1\nbl expf\nldr h1, [sp, #96]                   // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s1, h1\nstr q0, [sp, #96]                   // 16-byte Folded Spill\nfmov s0, s1\nbl expf\nldr h1, [sp, #160]                  // 2-byte Folded Reload\nfcvt h0, s0\nfcvt s1, h1\nstr q0, [sp, #160]                  // 16-byte Folded Spill\nfmov s0, s1\nbl expf\nldr q3, [sp, #192]                  // 16-byte Folded Reload\nldr q2, [sp, #112]                  // 16-byte Folded Reload\nldp x29, x30, [sp, #304]            // 16-byte Folded Reload\nmov v3.h[1], v2.h[0]\nldp q1, q2, [sp]                    // 32-byte Folded Reload\nldp d9, d8, [sp, #288]              // 16-byte Folded Reload\nldp d11, d10, [sp, #272]            // 16-byte Folded Reload\nmov v1.h[1], v2.h[0]\nldr q2, [sp, #224]                  // 16-byte Folded Reload\nldp d13, d12, [sp, #256]            // 16-byte Folded Reload\nmov v3.h[2], v2.h[0]\nldr q2, [sp, #32]                   // 16-byte Folded Reload\nldp d15, d14, [sp, #240]            // 16-byte Folded Reload\nmov v1.h[2], v2.h[0]\nldr q2, [sp, #208]                  // 16-byte Folded Reload\nmov v3.h[3], v2.h[0]\nldr q2, [sp, #48]                   // 16-byte Folded Reload\nmov v1.h[3], v2.h[0]\nldr q2, [sp, #176]                  // 16-byte Folded Reload\nmov v3.h[4], v2.h[0]\nldr q2, [sp, #64]                   // 16-byte Folded Reload\nmov v1.h[4], v2.h[0]\nldr q2, [sp, #144]                  // 16-byte Folded Reload\nmov v3.h[5], v2.h[0]\nldr q2, [sp, #96]                   // 16-byte Folded Reload\nmov v1.h[5], v2.h[0]\nfcvt h2, s0\nldr q0, [sp, #128]                  // 16-byte Folded Reload\nmov v3.h[6], v0.h[0]\nldr q0, [sp, #160]                  // 16-byte Folded Reload\nmov v1.h[6], v0.h[0]\nldr q0, [sp, #80]                   // 16-byte Folded Reload\nmov v3.h[7], v0.h[0]\nmov v1.h[7], v2.h[0]\nmov v0.16b, v3.16b\nadd sp, sp, #320\nret",
  "ll": "define <16 x half> @test(<16 x half> %a) {\n  %r = call <16 x half> @llvm.exp(<16 x half> %a)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 44 for instruction:   %r = call <16 x half> @llvm.exp.v16f16(<16 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "exp",
  "ty": "<2 x float>",
  "variant": "unop",
  "codesize": 4,
  "thru": 24,
  "lat": 24,
  "sizelat": 24,
  "size": 12,
  "gisize": 13,
  "extrasize": 0,
  "asm": "sub sp, sp, #48\nstr x30, [sp, #32]                  // 8-byte Folded Spill\nstr q0, [sp]                        // 16-byte Folded Spill\nmov s0, v0.s[1]\nbl expf\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nbl expf\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nldr x30, [sp, #32]                  // 8-byte Folded Reload\nmov v0.s[1], v1.s[0]\nadd sp, sp, #48\nret",
  "giasm": "sub sp, sp, #32\nstr d8, [sp, #16]                   // 8-byte Folded Spill\nstr x30, [sp, #24]                  // 8-byte Folded Spill\nmov s8, v0.s[1]\nbl expf\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s0, s8\nbl expf\nldr q1, [sp]                        // 16-byte Folded Reload\nldr x30, [sp, #24]                  // 8-byte Folded Reload\nldr d8, [sp, #16]                   // 8-byte Folded Reload\nmov v1.s[1], v0.s[0]\nfmov d0, d1\nadd sp, sp, #32\nret",
  "ll": "define <2 x float> @test(<2 x float> %a) {\n  %r = call <2 x float> @llvm.exp(<2 x float> %a)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <2 x float> @llvm.exp.v2f32(<2 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "exp",
  "ty": "<4 x float>",
  "variant": "unop",
  "codesize": 10,
  "thru": 52,
  "lat": 52,
  "sizelat": 52,
  "size": 24,
  "gisize": 26,
  "extrasize": 0,
  "asm": "sub sp, sp, #48\nstr x30, [sp, #32]                  // 8-byte Folded Spill\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nmov s0, v0.s[1]\nbl expf\nstr q0, [sp]                        // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nbl expf\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v0.s[1], v1.s[0]\nstr q0, [sp]                        // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov s0, v0.s[2]\nbl expf\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v1.s[2], v0.s[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov s0, v0.s[3]\nstr q1, [sp]                        // 16-byte Folded Spill\nbl expf\nldr q1, [sp]                        // 16-byte Folded Reload\nldr x30, [sp, #32]                  // 8-byte Folded Reload\nmov v1.s[3], v0.s[0]\nmov v0.16b, v1.16b\nadd sp, sp, #48\nret",
  "giasm": "sub sp, sp, #80\nstr d10, [sp, #48]                  // 8-byte Folded Spill\nstp d9, d8, [sp, #56]               // 16-byte Folded Spill\nstr x30, [sp, #72]                  // 8-byte Folded Spill\nmov s8, v0.s[1]\nmov s9, v0.s[2]\nmov s10, v0.s[3]\nbl expf\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s0, s8\nbl expf\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfmov s0, s9\nbl expf\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s0, s10\nbl expf\nldp q2, q1, [sp, #16]               // 32-byte Folded Reload\nldr x30, [sp, #72]                  // 8-byte Folded Reload\nldp d9, d8, [sp, #56]               // 16-byte Folded Reload\nldr d10, [sp, #48]                  // 8-byte Folded Reload\nmov v1.s[1], v2.s[0]\nldr q2, [sp]                        // 16-byte Folded Reload\nmov v1.s[2], v2.s[0]\nmov v1.s[3], v0.s[0]\nmov v0.16b, v1.16b\nadd sp, sp, #80\nret",
  "ll": "define <4 x float> @test(<4 x float> %a) {\n  %r = call <4 x float> @llvm.exp(<4 x float> %a)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 10 for instruction:   %r = call <4 x float> @llvm.exp.v4f32(<4 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "exp",
  "ty": "<8 x float>",
  "variant": "unop",
  "codesize": 20,
  "thru": 104,
  "lat": 104,
  "sizelat": 104,
  "size": 47,
  "gisize": 50,
  "extrasize": 0,
  "asm": "sub sp, sp, #64\nstr x30, [sp, #48]                  // 8-byte Folded Spill\nstp q0, q1, [sp]                    // 32-byte Folded Spill\nmov s0, v0.s[1]\nbl expf\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nbl expf\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v0.s[1], v1.s[0]\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nmov s0, v0.s[2]\nbl expf\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.s[2], v0.s[0]\nldr q0, [sp]                        // 16-byte Folded Reload\nmov s0, v0.s[3]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nbl expf\nldr q1, [sp, #32]                   // 16-byte Folded Reload\nmov v1.s[3], v0.s[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov s0, v0.s[1]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nbl expf\nstr q0, [sp]                        // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nbl expf\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v0.s[1], v1.s[0]\nstr q0, [sp]                        // 16-byte Folded Spill\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov s0, v0.s[2]\nbl expf\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v1.s[2], v0.s[0]\nldr q0, [sp, #16]                   // 16-byte Folded Reload\nmov s0, v0.s[3]\nstr q1, [sp]                        // 16-byte Folded Spill\nbl expf\nfmov s2, s0\nldr q1, [sp]                        // 16-byte Folded Reload\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nldr x30, [sp, #48]                  // 8-byte Folded Reload\nmov v1.s[3], v2.s[0]\nadd sp, sp, #64\nret",
  "giasm": "sub sp, sp, #176\nstp d13, d12, [sp, #112]            // 16-byte Folded Spill\nstp d11, d10, [sp, #128]            // 16-byte Folded Spill\nstp d9, d8, [sp, #144]              // 16-byte Folded Spill\nstr x30, [sp, #160]                 // 8-byte Folded Spill\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nmov s8, v0.s[1]\nmov s9, v0.s[2]\nmov s10, v0.s[3]\nmov s11, v1.s[1]\nmov s12, v1.s[2]\nmov s13, v1.s[3]\nbl expf\nstr q0, [sp, #64]                   // 16-byte Folded Spill\nfmov s0, s8\nbl expf\nstr q0, [sp, #48]                   // 16-byte Folded Spill\nfmov s0, s9\nbl expf\nstr q0, [sp, #96]                   // 16-byte Folded Spill\nfmov s0, s10\nbl expf\nstr q0, [sp, #80]                   // 16-byte Folded Spill\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nbl expf\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov s0, s11\nbl expf\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nfmov s0, s12\nbl expf\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov s0, s13\nbl expf\nldp q2, q1, [sp, #48]               // 32-byte Folded Reload\nldr x30, [sp, #160]                 // 8-byte Folded Reload\nldp d9, d8, [sp, #144]              // 16-byte Folded Reload\nldp d11, d10, [sp, #128]            // 16-byte Folded Reload\nmov v1.s[1], v2.s[0]\nldp q2, q3, [sp, #16]               // 32-byte Folded Reload\nldp d13, d12, [sp, #112]            // 16-byte Folded Reload\nmov v3.s[1], v2.s[0]\nldr q2, [sp, #96]                   // 16-byte Folded Reload\nmov v1.s[2], v2.s[0]\nldr q2, [sp]                        // 16-byte Folded Reload\nmov v3.s[2], v2.s[0]\nldr q2, [sp, #80]                   // 16-byte Folded Reload\nmov v1.s[3], v2.s[0]\nmov v3.s[3], v0.s[0]\nmov v2.16b, v1.16b\nmov v1.16b, v3.16b\nmov v0.16b, v2.16b\nadd sp, sp, #176\nret",
  "ll": "define <8 x float> @test(<8 x float> %a) {\n  %r = call <8 x float> @llvm.exp(<8 x float> %a)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 20 for instruction:   %r = call <8 x float> @llvm.exp.v8f32(<8 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "exp",
  "ty": "<2 x double>",
  "variant": "unop",
  "codesize": 4,
  "thru": 24,
  "lat": 24,
  "sizelat": 24,
  "size": 12,
  "gisize": 12,
  "extrasize": 0,
  "asm": "sub sp, sp, #48\nstr x30, [sp, #32]                  // 8-byte Folded Spill\nstr q0, [sp]                        // 16-byte Folded Spill\nmov d0, v0.d[1]\nbl exp\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nbl exp\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nldr x30, [sp, #32]                  // 8-byte Folded Reload\nmov v0.d[1], v1.d[0]\nadd sp, sp, #48\nret",
  "giasm": "sub sp, sp, #32\nstr d8, [sp, #16]                   // 8-byte Folded Spill\nstr x30, [sp, #24]                  // 8-byte Folded Spill\nmov d8, v0.d[1]\nbl exp\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov d0, d8\nbl exp\nldr q1, [sp]                        // 16-byte Folded Reload\nldr x30, [sp, #24]                  // 8-byte Folded Reload\nldr d8, [sp, #16]                   // 8-byte Folded Reload\nmov v1.d[1], v0.d[0]\nmov v0.16b, v1.16b\nadd sp, sp, #32\nret",
  "ll": "define <2 x double> @test(<2 x double> %a) {\n  %r = call <2 x double> @llvm.exp(<2 x double> %a)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <2 x double> @llvm.exp.v2f64(<2 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "exp",
  "ty": "<4 x double>",
  "variant": "unop",
  "codesize": 8,
  "thru": 48,
  "lat": 48,
  "sizelat": 48,
  "size": 22,
  "gisize": 21,
  "extrasize": 0,
  "asm": "sub sp, sp, #64\nstr x30, [sp, #48]                  // 8-byte Folded Spill\nstr q0, [sp]                        // 16-byte Folded Spill\nmov d0, v0.d[1]\nstr q1, [sp, #32]                   // 16-byte Folded Spill\nbl exp\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nbl exp\nldr q1, [sp, #16]                   // 16-byte Folded Reload\nmov v0.d[1], v1.d[0]\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nmov d0, v0.d[1]\nbl exp\nstr q0, [sp]                        // 16-byte Folded Spill\nldr q0, [sp, #32]                   // 16-byte Folded Reload\nbl exp\nfmov d1, d0\nldp q2, q0, [sp]                    // 32-byte Folded Reload\nldr x30, [sp, #48]                  // 8-byte Folded Reload\nmov v1.d[1], v2.d[0]\nadd sp, sp, #64\nret",
  "giasm": "sub sp, sp, #80\nstp d9, d8, [sp, #48]               // 16-byte Folded Spill\nstr x30, [sp, #64]                  // 8-byte Folded Spill\nstr q1, [sp]                        // 16-byte Folded Spill\nmov d8, v0.d[1]\nmov d9, v1.d[1]\nbl exp\nstr q0, [sp, #32]                   // 16-byte Folded Spill\nfmov d0, d8\nbl exp\nstr q0, [sp, #16]                   // 16-byte Folded Spill\nldr q0, [sp]                        // 16-byte Folded Reload\nbl exp\nstr q0, [sp]                        // 16-byte Folded Spill\nfmov d0, d9\nbl exp\nldp q1, q2, [sp, #16]               // 32-byte Folded Reload\nldr x30, [sp, #64]                  // 8-byte Folded Reload\nldp d9, d8, [sp, #48]               // 16-byte Folded Reload\nmov v2.d[1], v1.d[0]\nldr q1, [sp]                        // 16-byte Folded Reload\nmov v1.d[1], v0.d[0]\nmov v0.16b, v2.16b\nadd sp, sp, #80\nret",
  "ll": "define <4 x double> @test(<4 x double> %a) {\n  %r = call <4 x double> @llvm.exp(<4 x double> %a)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 8 for instruction:   %r = call <4 x double> @llvm.exp.v4f64(<4 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "fma",
  "ty": "half",
  "variant": "triop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmadd h0, h0, h1, h2\nret",
  "giasm": "fmadd h0, h0, h1, h2\nret",
  "ll": "define half @test(half %a, half %b, half %c) {\n  %r = call half @llvm.fma(half %a, half %b, half %c)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call half @llvm.fma.f16(half %a, half %b, half %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "fma",
  "ty": "float",
  "variant": "triop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmadd s0, s0, s1, s2\nret",
  "giasm": "fmadd s0, s0, s1, s2\nret",
  "ll": "define float @test(float %a, float %b, float %c) {\n  %r = call float @llvm.fma(float %a, float %b, float %c)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call float @llvm.fma.f32(float %a, float %b, float %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "fma",
  "ty": "double",
  "variant": "triop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmadd d0, d0, d1, d2\nret",
  "giasm": "fmadd d0, d0, d1, d2\nret",
  "ll": "define double @test(double %a, double %b, double %c) {\n  %r = call double @llvm.fma(double %a, double %b, double %c)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call double @llvm.fma.f64(double %a, double %b, double %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "fma",
  "ty": "<4 x half>",
  "variant": "triop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmla v2.4h, v1.4h, v0.4h\nfmov d0, d2\nret",
  "giasm": "fmla v2.4h, v1.4h, v0.4h\nfmov d0, d2\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, <4 x half> %b, <4 x half> %c) {\n  %r = call <4 x half> @llvm.fma(<4 x half> %a, <4 x half> %b, <4 x half> %c)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x half> @llvm.fma.v4f16(<4 x half> %a, <4 x half> %b, <4 x half> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "fma",
  "ty": "<8 x half>",
  "variant": "triop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmla v2.8h, v1.8h, v0.8h\nmov v0.16b, v2.16b\nret",
  "giasm": "fmla v2.8h, v1.8h, v0.8h\nmov v0.16b, v2.16b\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, <8 x half> %b, <8 x half> %c) {\n  %r = call <8 x half> @llvm.fma(<8 x half> %a, <8 x half> %b, <8 x half> %c)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <8 x half> @llvm.fma.v8f16(<8 x half> %a, <8 x half> %b, <8 x half> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "fma",
  "ty": "<16 x half>",
  "variant": "triop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmla v4.8h, v2.8h, v0.8h\nfmla v5.8h, v3.8h, v1.8h\nmov v0.16b, v4.16b\nmov v1.16b, v5.16b\nret",
  "giasm": "fmla v4.8h, v2.8h, v0.8h\nfmla v5.8h, v3.8h, v1.8h\nmov v0.16b, v4.16b\nmov v1.16b, v5.16b\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, <16 x half> %b, <16 x half> %c) {\n  %r = call <16 x half> @llvm.fma(<16 x half> %a, <16 x half> %b, <16 x half> %c)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <16 x half> @llvm.fma.v16f16(<16 x half> %a, <16 x half> %b, <16 x half> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "fma",
  "ty": "<2 x float>",
  "variant": "triop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmla v2.2s, v1.2s, v0.2s\nfmov d0, d2\nret",
  "giasm": "fmla v2.2s, v1.2s, v0.2s\nfmov d0, d2\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, <2 x float> %b, <2 x float> %c) {\n  %r = call <2 x float> @llvm.fma(<2 x float> %a, <2 x float> %b, <2 x float> %c)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x float> @llvm.fma.v2f32(<2 x float> %a, <2 x float> %b, <2 x float> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "fma",
  "ty": "<4 x float>",
  "variant": "triop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmla v2.4s, v1.4s, v0.4s\nmov v0.16b, v2.16b\nret",
  "giasm": "fmla v2.4s, v1.4s, v0.4s\nmov v0.16b, v2.16b\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, <4 x float> %b, <4 x float> %c) {\n  %r = call <4 x float> @llvm.fma(<4 x float> %a, <4 x float> %b, <4 x float> %c)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x float> @llvm.fma.v4f32(<4 x float> %a, <4 x float> %b, <4 x float> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "fma",
  "ty": "<8 x float>",
  "variant": "triop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmla v4.4s, v2.4s, v0.4s\nfmla v5.4s, v3.4s, v1.4s\nmov v0.16b, v4.16b\nmov v1.16b, v5.16b\nret",
  "giasm": "fmla v4.4s, v2.4s, v0.4s\nfmla v5.4s, v3.4s, v1.4s\nmov v0.16b, v4.16b\nmov v1.16b, v5.16b\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, <8 x float> %b, <8 x float> %c) {\n  %r = call <8 x float> @llvm.fma(<8 x float> %a, <8 x float> %b, <8 x float> %c)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x float> @llvm.fma.v8f32(<8 x float> %a, <8 x float> %b, <8 x float> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "fma",
  "ty": "<2 x double>",
  "variant": "triop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmla v2.2d, v1.2d, v0.2d\nmov v0.16b, v2.16b\nret",
  "giasm": "fmla v2.2d, v1.2d, v0.2d\nmov v0.16b, v2.16b\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, <2 x double> %b, <2 x double> %c) {\n  %r = call <2 x double> @llvm.fma(<2 x double> %a, <2 x double> %b, <2 x double> %c)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x double> @llvm.fma.v2f64(<2 x double> %a, <2 x double> %b, <2 x double> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "fma",
  "ty": "<4 x double>",
  "variant": "triop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmla v4.2d, v2.2d, v0.2d\nfmla v5.2d, v3.2d, v1.2d\nmov v0.16b, v4.16b\nmov v1.16b, v5.16b\nret",
  "giasm": "fmla v4.2d, v2.2d, v0.2d\nfmla v5.2d, v3.2d, v1.2d\nmov v0.16b, v4.16b\nmov v1.16b, v5.16b\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, <4 x double> %b, <4 x double> %c) {\n  %r = call <4 x double> @llvm.fma(<4 x double> %a, <4 x double> %b, <4 x double> %c)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x double> @llvm.fma.v4f64(<4 x double> %a, <4 x double> %b, <4 x double> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "fmuladd",
  "ty": "half",
  "variant": "triop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmadd h0, h0, h1, h2\nret",
  "giasm": "fmadd h0, h0, h1, h2\nret",
  "ll": "define half @test(half %a, half %b, half %c) {\n  %r = call half @llvm.fmuladd(half %a, half %b, half %c)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call half @llvm.fmuladd.f16(half %a, half %b, half %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "fmuladd",
  "ty": "float",
  "variant": "triop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmadd s0, s0, s1, s2\nret",
  "giasm": "fmadd s0, s0, s1, s2\nret",
  "ll": "define float @test(float %a, float %b, float %c) {\n  %r = call float @llvm.fmuladd(float %a, float %b, float %c)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call float @llvm.fmuladd.f32(float %a, float %b, float %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "fmuladd",
  "ty": "double",
  "variant": "triop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmadd d0, d0, d1, d2\nret",
  "giasm": "fmadd d0, d0, d1, d2\nret",
  "ll": "define double @test(double %a, double %b, double %c) {\n  %r = call double @llvm.fmuladd(double %a, double %b, double %c)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call double @llvm.fmuladd.f64(double %a, double %b, double %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "fmuladd",
  "ty": "<4 x half>",
  "variant": "triop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmla v2.4h, v1.4h, v0.4h\nfmov d0, d2\nret",
  "giasm": "fmla v2.4h, v1.4h, v0.4h\nfmov d0, d2\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, <4 x half> %b, <4 x half> %c) {\n  %r = call <4 x half> @llvm.fmuladd(<4 x half> %a, <4 x half> %b, <4 x half> %c)\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x half> @llvm.fmuladd.v4f16(<4 x half> %a, <4 x half> %b, <4 x half> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "fmuladd",
  "ty": "<8 x half>",
  "variant": "triop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmla v2.8h, v1.8h, v0.8h\nmov v0.16b, v2.16b\nret",
  "giasm": "fmla v2.8h, v1.8h, v0.8h\nmov v0.16b, v2.16b\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, <8 x half> %b, <8 x half> %c) {\n  %r = call <8 x half> @llvm.fmuladd(<8 x half> %a, <8 x half> %b, <8 x half> %c)\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <8 x half> @llvm.fmuladd.v8f16(<8 x half> %a, <8 x half> %b, <8 x half> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "fmuladd",
  "ty": "<16 x half>",
  "variant": "triop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmla v4.8h, v2.8h, v0.8h\nfmla v5.8h, v3.8h, v1.8h\nmov v0.16b, v4.16b\nmov v1.16b, v5.16b\nret",
  "giasm": "fmla v4.8h, v2.8h, v0.8h\nfmla v5.8h, v3.8h, v1.8h\nmov v0.16b, v4.16b\nmov v1.16b, v5.16b\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, <16 x half> %b, <16 x half> %c) {\n  %r = call <16 x half> @llvm.fmuladd(<16 x half> %a, <16 x half> %b, <16 x half> %c)\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <16 x half> @llvm.fmuladd.v16f16(<16 x half> %a, <16 x half> %b, <16 x half> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "fmuladd",
  "ty": "<2 x float>",
  "variant": "triop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmla v2.2s, v1.2s, v0.2s\nfmov d0, d2\nret",
  "giasm": "fmla v2.2s, v1.2s, v0.2s\nfmov d0, d2\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, <2 x float> %b, <2 x float> %c) {\n  %r = call <2 x float> @llvm.fmuladd(<2 x float> %a, <2 x float> %b, <2 x float> %c)\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %a, <2 x float> %b, <2 x float> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "fmuladd",
  "ty": "<4 x float>",
  "variant": "triop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmla v2.4s, v1.4s, v0.4s\nmov v0.16b, v2.16b\nret",
  "giasm": "fmla v2.4s, v1.4s, v0.4s\nmov v0.16b, v2.16b\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, <4 x float> %b, <4 x float> %c) {\n  %r = call <4 x float> @llvm.fmuladd(<4 x float> %a, <4 x float> %b, <4 x float> %c)\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %a, <4 x float> %b, <4 x float> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "fmuladd",
  "ty": "<8 x float>",
  "variant": "triop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmla v4.4s, v2.4s, v0.4s\nfmla v5.4s, v3.4s, v1.4s\nmov v0.16b, v4.16b\nmov v1.16b, v5.16b\nret",
  "giasm": "fmla v4.4s, v2.4s, v0.4s\nfmla v5.4s, v3.4s, v1.4s\nmov v0.16b, v4.16b\nmov v1.16b, v5.16b\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, <8 x float> %b, <8 x float> %c) {\n  %r = call <8 x float> @llvm.fmuladd(<8 x float> %a, <8 x float> %b, <8 x float> %c)\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %a, <8 x float> %b, <8 x float> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "fmuladd",
  "ty": "<2 x double>",
  "variant": "triop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmla v2.2d, v1.2d, v0.2d\nmov v0.16b, v2.16b\nret",
  "giasm": "fmla v2.2d, v1.2d, v0.2d\nmov v0.16b, v2.16b\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, <2 x double> %b, <2 x double> %c) {\n  %r = call <2 x double> @llvm.fmuladd(<2 x double> %a, <2 x double> %b, <2 x double> %c)\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %a, <2 x double> %b, <2 x double> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "fmuladd",
  "ty": "<4 x double>",
  "variant": "triop",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmla v4.2d, v2.2d, v0.2d\nfmla v5.2d, v3.2d, v1.2d\nmov v0.16b, v4.16b\nmov v1.16b, v5.16b\nret",
  "giasm": "fmla v4.2d, v2.2d, v0.2d\nfmla v5.2d, v3.2d, v1.2d\nmov v0.16b, v4.16b\nmov v1.16b, v5.16b\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, <4 x double> %b, <4 x double> %c) {\n  %r = call <4 x double> @llvm.fmuladd(<4 x double> %a, <4 x double> %b, <4 x double> %c)\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call <4 x double> @llvm.fmuladd.v4f64(<4 x double> %a, <4 x double> %b, <4 x double> %c)\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "select",
  "ty": "half",
  "variant": "triop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 6,
  "extrasize": 0,
  "asm": "tst w0, #0x1\nfcsel h0, h0, h1, ne\nret",
  "giasm": "fmov w9, s0\nfmov w10, s1\nand w8, w0, #0x1\ntst w8, #0x1\ncsel w8, w9, w10, ne\nfmov s0, w8\nret",
  "ll": "define half @test(half %a, half %b, i1 %c) {\n  %r = select  i1 %c, half %a, half %b\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, half %a, half %b\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "select",
  "ty": "float",
  "variant": "triop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "tst w0, #0x1\nfcsel s0, s0, s1, ne\nret",
  "giasm": "and w8, w0, #0x1\ntst w8, #0x1\nfcsel s0, s0, s1, ne\nret",
  "ll": "define float @test(float %a, float %b, i1 %c) {\n  %r = select  i1 %c, float %a, float %b\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, float %a, float %b\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "select",
  "ty": "double",
  "variant": "triop",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "tst w0, #0x1\nfcsel d0, d0, d1, ne\nret",
  "giasm": "and w8, w0, #0x1\ntst w8, #0x1\nfcsel d0, d0, d1, ne\nret",
  "ll": "define double @test(double %a, double %b, i1 %c) {\n  %r = select  i1 %c, double %a, double %b\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, double %a, double %b\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "select",
  "ty": "<4 x half>",
  "variant": "triop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "shl v2.4h, v2.4h, #15\ncmlt v2.4h, v2.4h, #0\nbif v0.8b, v1.8b, v2.8b\nret",
  "giasm": "shl v2.4h, v2.4h, #15\nsshr v2.4h, v2.4h, #15\nbif v0.8b, v1.8b, v2.8b\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, <4 x half> %b, <4 x i1> %c) {\n  %r = select  <4 x i1> %c, <4 x half> %a, <4 x half> %b\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <4 x i1> %c, <4 x half> %a, <4 x half> %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "select",
  "ty": "<8 x half>",
  "variant": "triop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "ushll v2.8h, v2.8b, #0\nshl v2.8h, v2.8h, #15\ncmlt v2.8h, v2.8h, #0\nbif v0.16b, v1.16b, v2.16b\nret",
  "giasm": "ushll v2.8h, v2.8b, #0\nshl v2.8h, v2.8h, #15\nsshr v2.8h, v2.8h, #15\nbif v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, <8 x half> %b, <8 x i1> %c) {\n  %r = select  <8 x i1> %c, <8 x half> %a, <8 x half> %b\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <8 x i1> %c, <8 x half> %a, <8 x half> %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "select",
  "ty": "<16 x half>",
  "variant": "triop",
  "codesize": 1,
  "thru": 44,
  "lat": 1,
  "sizelat": 1,
  "size": 8,
  "gisize": 8,
  "extrasize": 0,
  "asm": "ushll2 v5.8h, v4.16b, #0\nushll v4.8h, v4.8b, #0\nshl v5.8h, v5.8h, #15\nshl v4.8h, v4.8h, #15\ncmlt v5.8h, v5.8h, #0\ncmlt v4.8h, v4.8h, #0\nbif v1.16b, v3.16b, v5.16b\nbif v0.16b, v2.16b, v4.16b\nret",
  "giasm": "ushll v5.8h, v4.8b, #0\nushll2 v4.8h, v4.16b, #0\nshl v5.8h, v5.8h, #15\nshl v4.8h, v4.8h, #15\nsshr v5.8h, v5.8h, #15\nsshr v4.8h, v4.8h, #15\nbif v0.16b, v2.16b, v5.16b\nbif v1.16b, v3.16b, v4.16b\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, <16 x half> %b, <16 x i1> %c) {\n  %r = select  <16 x i1> %c, <16 x half> %a, <16 x half> %b\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <16 x i1> %c, <16 x half> %a, <16 x half> %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "select",
  "ty": "<2 x float>",
  "variant": "triop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "shl v2.2s, v2.2s, #31\ncmlt v2.2s, v2.2s, #0\nbif v0.8b, v1.8b, v2.8b\nret",
  "giasm": "shl v2.2s, v2.2s, #31\nsshr v2.2s, v2.2s, #31\nbif v0.8b, v1.8b, v2.8b\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, <2 x float> %b, <2 x i1> %c) {\n  %r = select  <2 x i1> %c, <2 x float> %a, <2 x float> %b\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <2 x i1> %c, <2 x float> %a, <2 x float> %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "select",
  "ty": "<4 x float>",
  "variant": "triop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "ushll v2.4s, v2.4h, #0\nshl v2.4s, v2.4s, #31\ncmlt v2.4s, v2.4s, #0\nbif v0.16b, v1.16b, v2.16b\nret",
  "giasm": "ushll v2.4s, v2.4h, #0\nshl v2.4s, v2.4s, #31\nsshr v2.4s, v2.4s, #31\nbif v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, <4 x float> %b, <4 x i1> %c) {\n  %r = select  <4 x i1> %c, <4 x float> %a, <4 x float> %b\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <4 x i1> %c, <4 x float> %a, <4 x float> %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "select",
  "ty": "<8 x float>",
  "variant": "triop",
  "codesize": 1,
  "thru": 20,
  "lat": 1,
  "sizelat": 1,
  "size": 10,
  "gisize": 9,
  "extrasize": 0,
  "asm": "zip1 v5.8b, v4.8b, v0.8b\nzip2 v4.8b, v4.8b, v0.8b\nushll v5.4s, v5.4h, #0\nushll v4.4s, v4.4h, #0\nshl v5.4s, v5.4s, #31\nshl v4.4s, v4.4s, #31\ncmlt v5.4s, v5.4s, #0\ncmlt v4.4s, v4.4s, #0\nbif v0.16b, v2.16b, v5.16b\nbif v1.16b, v3.16b, v4.16b\nret",
  "giasm": "ushll v4.8h, v4.8b, #0\nushll v5.4s, v4.4h, #0\nushll2 v4.4s, v4.8h, #0\nshl v5.4s, v5.4s, #31\nshl v4.4s, v4.4s, #31\nsshr v5.4s, v5.4s, #31\nsshr v4.4s, v4.4s, #31\nbif v0.16b, v2.16b, v5.16b\nbif v1.16b, v3.16b, v4.16b\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, <8 x float> %b, <8 x i1> %c) {\n  %r = select  <8 x i1> %c, <8 x float> %a, <8 x float> %b\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x float> %a, <8 x float> %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "select",
  "ty": "<2 x double>",
  "variant": "triop",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "ushll v2.2d, v2.2s, #0\nshl v2.2d, v2.2d, #63\ncmlt v2.2d, v2.2d, #0\nbif v0.16b, v1.16b, v2.16b\nret",
  "giasm": "ushll v2.2d, v2.2s, #0\nshl v2.2d, v2.2d, #63\nsshr v2.2d, v2.2d, #63\nbif v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, <2 x double> %b, <2 x i1> %c) {\n  %r = select  <2 x i1> %c, <2 x double> %a, <2 x double> %b\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <2 x i1> %c, <2 x double> %a, <2 x double> %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "select",
  "ty": "<4 x double>",
  "variant": "triop",
  "codesize": 1,
  "thru": 8,
  "lat": 1,
  "sizelat": 1,
  "size": 9,
  "gisize": 9,
  "extrasize": 0,
  "asm": "ushll v4.4s, v4.4h, #0\nushll2 v5.2d, v4.4s, #0\nushll v4.2d, v4.2s, #0\nshl v5.2d, v5.2d, #63\nshl v4.2d, v4.2d, #63\ncmlt v5.2d, v5.2d, #0\ncmlt v4.2d, v4.2d, #0\nbif v1.16b, v3.16b, v5.16b\nbif v0.16b, v2.16b, v4.16b\nret",
  "giasm": "ushll v4.4s, v4.4h, #0\nushll v5.2d, v4.2s, #0\nushll2 v4.2d, v4.4s, #0\nshl v5.2d, v5.2d, #63\nshl v4.2d, v4.2d, #63\nsshr v5.2d, v5.2d, #63\nsshr v4.2d, v4.2d, #63\nbif v0.16b, v2.16b, v5.16b\nbif v1.16b, v3.16b, v4.16b\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, <4 x double> %b, <4 x i1> %c) {\n  %r = select  <4 x i1> %c, <4 x double> %a, <4 x double> %b\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x double> %a, <4 x double> %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "fcmpoeq",
  "ty": "half",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp h0, h1\ncset w0, eq\nret",
  "giasm": "fcmp h0, h1\ncset w0, eq\nret",
  "ll": "define i1 @test(half %a, half %b) {\n  %r = fcmp oeq half %a, %b\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp oeq half %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "fcmpoeq",
  "ty": "half",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp h0, #0.0\ncset w0, eq\nret",
  "giasm": "fcmp h0, #0.0\ncset w0, eq\nret",
  "ll": "define i1 @test(half %a) {\n  %r = fcmp oeq half %a, 0.0\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp oeq half %a, 0xH0000\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "selectfcmpoeq",
  "ty": "half",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 5,
  "extrasize": 0,
  "asm": "fcmp h0, h1\nfcsel h0, h2, h3, eq\nret",
  "giasm": "fcmp h0, h1\nfmov w8, s2\nfmov w9, s3\ncsel w8, w8, w9, eq\nfmov s0, w8\nret",
  "ll": "define half @test(half %a, half %b, half %d, half %e) {\n  %c = fcmp oeq half %a, %b\n  %r = select i1 %c, half %d, half %e\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp oeq half %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, half %d, half %e\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "selectfcmpoeq",
  "ty": "half",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 5,
  "extrasize": 0,
  "asm": "fcmp h0, #0.0\nfcsel h0, h1, h2, eq\nret",
  "giasm": "fcmp h0, #0.0\nfmov w8, s1\nfmov w9, s2\ncsel w8, w8, w9, eq\nfmov s0, w8\nret",
  "ll": "define half @test(half %a, half %d, half %e) {\n  %c = fcmp oeq half %a, 0.0\n  %r = select i1 %c, half %d, half %e\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp oeq half %a, 0xH0000\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, half %d, half %e\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "fcmpoeq",
  "ty": "float",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp s0, s1\ncset w0, eq\nret",
  "giasm": "fcmp s0, s1\ncset w0, eq\nret",
  "ll": "define i1 @test(float %a, float %b) {\n  %r = fcmp oeq float %a, %b\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp oeq float %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "fcmpoeq",
  "ty": "float",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp s0, #0.0\ncset w0, eq\nret",
  "giasm": "fcmp s0, #0.0\ncset w0, eq\nret",
  "ll": "define i1 @test(float %a) {\n  %r = fcmp oeq float %a, 0.0\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp oeq float %a, 0.000000e+00\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "selectfcmpoeq",
  "ty": "float",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp s0, s1\nfcsel s0, s2, s3, eq\nret",
  "giasm": "fcmp s0, s1\nfcsel s0, s2, s3, eq\nret",
  "ll": "define float @test(float %a, float %b, float %d, float %e) {\n  %c = fcmp oeq float %a, %b\n  %r = select i1 %c, float %d, float %e\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp oeq float %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, float %d, float %e\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "selectfcmpoeq",
  "ty": "float",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp s0, #0.0\nfcsel s0, s1, s2, eq\nret",
  "giasm": "fcmp s0, #0.0\nfcsel s0, s1, s2, eq\nret",
  "ll": "define float @test(float %a, float %d, float %e) {\n  %c = fcmp oeq float %a, 0.0\n  %r = select i1 %c, float %d, float %e\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp oeq float %a, 0.000000e+00\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, float %d, float %e\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "fcmpoeq",
  "ty": "double",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp d0, d1\ncset w0, eq\nret",
  "giasm": "fcmp d0, d1\ncset w0, eq\nret",
  "ll": "define i1 @test(double %a, double %b) {\n  %r = fcmp oeq double %a, %b\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp oeq double %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "fcmpoeq",
  "ty": "double",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp d0, #0.0\ncset w0, eq\nret",
  "giasm": "fcmp d0, #0.0\ncset w0, eq\nret",
  "ll": "define i1 @test(double %a) {\n  %r = fcmp oeq double %a, 0.0\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp oeq double %a, 0.000000e+00\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "selectfcmpoeq",
  "ty": "double",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp d0, d1\nfcsel d0, d2, d3, eq\nret",
  "giasm": "fcmp d0, d1\nfcsel d0, d2, d3, eq\nret",
  "ll": "define double @test(double %a, double %b, double %d, double %e) {\n  %c = fcmp oeq double %a, %b\n  %r = select i1 %c, double %d, double %e\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp oeq double %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, double %d, double %e\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "selectfcmpoeq",
  "ty": "double",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp d0, #0.0\nfcsel d0, d1, d2, eq\nret",
  "giasm": "fcmp d0, #0.0\nfcsel d0, d1, d2, eq\nret",
  "ll": "define double @test(double %a, double %d, double %e) {\n  %c = fcmp oeq double %a, 0.0\n  %r = select i1 %c, double %d, double %e\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp oeq double %a, 0.000000e+00\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, double %d, double %e\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "fcmpoeq",
  "ty": "<4 x half>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fcmeq v0.4h, v0.4h, v1.4h\nret",
  "giasm": "fcmeq v0.4h, v0.4h, v1.4h\nret",
  "ll": "define <4 x i1> @test(<4 x half> %a, <4 x half> %b) {\n  %r = fcmp oeq <4 x half> %a, %b\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp oeq <4 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "fcmpoeq",
  "ty": "<4 x half>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fcmeq v0.4h, v0.4h, #0.0\nret",
  "giasm": "fcmeq v0.4h, v0.4h, #0.0\nret",
  "ll": "define <4 x i1> @test(<4 x half> %a) {\n  %r = fcmp oeq <4 x half> %a, zeroinitializer\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp oeq <4 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "selectfcmpoeq",
  "ty": "<4 x half>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmeq v0.4h, v0.4h, v1.4h\nbsl v0.8b, v2.8b, v3.8b\nret",
  "giasm": "fcmeq v0.4h, v0.4h, v1.4h\nbsl v0.8b, v2.8b, v3.8b\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, <4 x half> %b, <4 x half> %d, <4 x half> %e) {\n  %c = fcmp oeq <4 x half> %a, %b\n  %r = select <4 x i1> %c, <4 x half> %d, <4 x half> %e\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp oeq <4 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x half> %d, <4 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "selectfcmpoeq",
  "ty": "<4 x half>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmeq v0.4h, v0.4h, #0.0\nbsl v0.8b, v1.8b, v2.8b\nret",
  "giasm": "fcmeq v0.4h, v0.4h, #0.0\nbsl v0.8b, v1.8b, v2.8b\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, <4 x half> %d, <4 x half> %e) {\n  %c = fcmp oeq <4 x half> %a, zeroinitializer\n  %r = select <4 x i1> %c, <4 x half> %d, <4 x half> %e\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp oeq <4 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x half> %d, <4 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "fcmpoeq",
  "ty": "<8 x half>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmeq v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "giasm": "fcmeq v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x half> %a, <8 x half> %b) {\n  %r = fcmp oeq <8 x half> %a, %b\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp oeq <8 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "fcmpoeq",
  "ty": "<8 x half>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmeq v0.8h, v0.8h, #0.0\nxtn v0.8b, v0.8h\nret",
  "giasm": "fcmeq v0.8h, v0.8h, #0.0\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x half> %a) {\n  %r = fcmp oeq <8 x half> %a, zeroinitializer\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp oeq <8 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "selectfcmpoeq",
  "ty": "<8 x half>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmeq v0.8h, v0.8h, v1.8h\nbsl v0.16b, v2.16b, v3.16b\nret",
  "giasm": "fcmeq v0.8h, v0.8h, v1.8h\nbsl v0.16b, v2.16b, v3.16b\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, <8 x half> %b, <8 x half> %d, <8 x half> %e) {\n  %c = fcmp oeq <8 x half> %a, %b\n  %r = select <8 x i1> %c, <8 x half> %d, <8 x half> %e\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp oeq <8 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x half> %d, <8 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "selectfcmpoeq",
  "ty": "<8 x half>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmeq v0.8h, v0.8h, #0.0\nbsl v0.16b, v1.16b, v2.16b\nret",
  "giasm": "fcmeq v0.8h, v0.8h, #0.0\nbsl v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, <8 x half> %d, <8 x half> %e) {\n  %c = fcmp oeq <8 x half> %a, zeroinitializer\n  %r = select <8 x i1> %c, <8 x half> %d, <8 x half> %e\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp oeq <8 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x half> %d, <8 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "fcmpoeq",
  "ty": "<16 x half>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmeq v1.8h, v1.8h, v3.8h\nfcmeq v0.8h, v0.8h, v2.8h\nuzp1 v0.16b, v0.16b, v1.16b\nret",
  "giasm": "fcmeq v0.8h, v0.8h, v2.8h\nfcmeq v1.8h, v1.8h, v3.8h\nuzp1 v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <16 x i1> @test(<16 x half> %a, <16 x half> %b) {\n  %r = fcmp oeq <16 x half> %a, %b\n  ret <16 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp oeq <16 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i1> %r"
 },
 {
  "instr": "fcmpoeq",
  "ty": "<16 x half>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmeq v1.8h, v1.8h, #0.0\nfcmeq v0.8h, v0.8h, #0.0\nuzp1 v0.16b, v0.16b, v1.16b\nret",
  "giasm": "fcmeq v0.8h, v0.8h, #0.0\nfcmeq v1.8h, v1.8h, #0.0\nuzp1 v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <16 x i1> @test(<16 x half> %a) {\n  %r = fcmp oeq <16 x half> %a, zeroinitializer\n  ret <16 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp oeq <16 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i1> %r"
 },
 {
  "instr": "selectfcmpoeq",
  "ty": "<16 x half>",
  "variant": "cmp",
  "codesize": 3,
  "thru": 4,
  "lat": 3,
  "sizelat": 3,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmeq v1.8h, v1.8h, v3.8h\nfcmeq v0.8h, v0.8h, v2.8h\nbsl v1.16b, v5.16b, v7.16b\nbsl v0.16b, v4.16b, v6.16b\nret",
  "giasm": "fcmeq v0.8h, v0.8h, v2.8h\nfcmeq v1.8h, v1.8h, v3.8h\nbsl v0.16b, v4.16b, v6.16b\nbsl v1.16b, v5.16b, v7.16b\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, <16 x half> %b, <16 x half> %d, <16 x half> %e) {\n  %c = fcmp oeq <16 x half> %a, %b\n  %r = select <16 x i1> %c, <16 x half> %d, <16 x half> %e\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp oeq <16 x half> %a, %b\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <16 x i1> %c, <16 x half> %d, <16 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "selectfcmpoeq",
  "ty": "<16 x half>",
  "variant": "cmp0",
  "codesize": 3,
  "thru": 4,
  "lat": 3,
  "sizelat": 3,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmeq v1.8h, v1.8h, #0.0\nfcmeq v0.8h, v0.8h, #0.0\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "giasm": "fcmeq v0.8h, v0.8h, #0.0\nfcmeq v1.8h, v1.8h, #0.0\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, <16 x half> %d, <16 x half> %e) {\n  %c = fcmp oeq <16 x half> %a, zeroinitializer\n  %r = select <16 x i1> %c, <16 x half> %d, <16 x half> %e\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp oeq <16 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <16 x i1> %c, <16 x half> %d, <16 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "fcmpoeq",
  "ty": "<2 x float>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fcmeq v0.2s, v0.2s, v1.2s\nret",
  "giasm": "fcmeq v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x i1> @test(<2 x float> %a, <2 x float> %b) {\n  %r = fcmp oeq <2 x float> %a, %b\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp oeq <2 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "fcmpoeq",
  "ty": "<2 x float>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fcmeq v0.2s, v0.2s, #0.0\nret",
  "giasm": "fcmeq v0.2s, v0.2s, #0.0\nret",
  "ll": "define <2 x i1> @test(<2 x float> %a) {\n  %r = fcmp oeq <2 x float> %a, zeroinitializer\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp oeq <2 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "selectfcmpoeq",
  "ty": "<2 x float>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmeq v0.2s, v0.2s, v1.2s\nbsl v0.8b, v2.8b, v3.8b\nret",
  "giasm": "fcmeq v0.2s, v0.2s, v1.2s\nbsl v0.8b, v2.8b, v3.8b\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, <2 x float> %b, <2 x float> %d, <2 x float> %e) {\n  %c = fcmp oeq <2 x float> %a, %b\n  %r = select <2 x i1> %c, <2 x float> %d, <2 x float> %e\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp oeq <2 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <2 x i1> %c, <2 x float> %d, <2 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "selectfcmpoeq",
  "ty": "<2 x float>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmeq v0.2s, v0.2s, #0.0\nbsl v0.8b, v1.8b, v2.8b\nret",
  "giasm": "fcmeq v0.2s, v0.2s, #0.0\nbsl v0.8b, v1.8b, v2.8b\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, <2 x float> %d, <2 x float> %e) {\n  %c = fcmp oeq <2 x float> %a, zeroinitializer\n  %r = select <2 x i1> %c, <2 x float> %d, <2 x float> %e\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp oeq <2 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <2 x i1> %c, <2 x float> %d, <2 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "fcmpoeq",
  "ty": "<4 x float>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmeq v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "giasm": "fcmeq v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x float> %a, <4 x float> %b) {\n  %r = fcmp oeq <4 x float> %a, %b\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp oeq <4 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "fcmpoeq",
  "ty": "<4 x float>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmeq v0.4s, v0.4s, #0.0\nxtn v0.4h, v0.4s\nret",
  "giasm": "fcmeq v0.4s, v0.4s, #0.0\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x float> %a) {\n  %r = fcmp oeq <4 x float> %a, zeroinitializer\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp oeq <4 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "selectfcmpoeq",
  "ty": "<4 x float>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmeq v0.4s, v0.4s, v1.4s\nbsl v0.16b, v2.16b, v3.16b\nret",
  "giasm": "fcmeq v0.4s, v0.4s, v1.4s\nbsl v0.16b, v2.16b, v3.16b\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, <4 x float> %b, <4 x float> %d, <4 x float> %e) {\n  %c = fcmp oeq <4 x float> %a, %b\n  %r = select <4 x i1> %c, <4 x float> %d, <4 x float> %e\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp oeq <4 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x float> %d, <4 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "selectfcmpoeq",
  "ty": "<4 x float>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmeq v0.4s, v0.4s, #0.0\nbsl v0.16b, v1.16b, v2.16b\nret",
  "giasm": "fcmeq v0.4s, v0.4s, #0.0\nbsl v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, <4 x float> %d, <4 x float> %e) {\n  %c = fcmp oeq <4 x float> %a, zeroinitializer\n  %r = select <4 x i1> %c, <4 x float> %d, <4 x float> %e\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp oeq <4 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x float> %d, <4 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "fcmpoeq",
  "ty": "<8 x float>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmeq v1.4s, v1.4s, v3.4s\nfcmeq v0.4s, v0.4s, v2.4s\nuzp1 v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "giasm": "fcmeq v0.4s, v0.4s, v2.4s\nfcmeq v1.4s, v1.4s, v3.4s\nuzp1 v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x float> %a, <8 x float> %b) {\n  %r = fcmp oeq <8 x float> %a, %b\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp oeq <8 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "fcmpoeq",
  "ty": "<8 x float>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmeq v1.4s, v1.4s, #0.0\nfcmeq v0.4s, v0.4s, #0.0\nuzp1 v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "giasm": "fcmeq v0.4s, v0.4s, #0.0\nfcmeq v1.4s, v1.4s, #0.0\nuzp1 v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x float> %a) {\n  %r = fcmp oeq <8 x float> %a, zeroinitializer\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp oeq <8 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "selectfcmpoeq",
  "ty": "<8 x float>",
  "variant": "cmp",
  "codesize": 3,
  "thru": 4,
  "lat": 3,
  "sizelat": 3,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmeq v1.4s, v1.4s, v3.4s\nfcmeq v0.4s, v0.4s, v2.4s\nbsl v1.16b, v5.16b, v7.16b\nbsl v0.16b, v4.16b, v6.16b\nret",
  "giasm": "fcmeq v0.4s, v0.4s, v2.4s\nfcmeq v1.4s, v1.4s, v3.4s\nbsl v0.16b, v4.16b, v6.16b\nbsl v1.16b, v5.16b, v7.16b\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, <8 x float> %b, <8 x float> %d, <8 x float> %e) {\n  %c = fcmp oeq <8 x float> %a, %b\n  %r = select <8 x i1> %c, <8 x float> %d, <8 x float> %e\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp oeq <8 x float> %a, %b\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <8 x i1> %c, <8 x float> %d, <8 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "selectfcmpoeq",
  "ty": "<8 x float>",
  "variant": "cmp0",
  "codesize": 3,
  "thru": 4,
  "lat": 3,
  "sizelat": 3,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmeq v1.4s, v1.4s, #0.0\nfcmeq v0.4s, v0.4s, #0.0\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "giasm": "fcmeq v0.4s, v0.4s, #0.0\nfcmeq v1.4s, v1.4s, #0.0\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, <8 x float> %d, <8 x float> %e) {\n  %c = fcmp oeq <8 x float> %a, zeroinitializer\n  %r = select <8 x i1> %c, <8 x float> %d, <8 x float> %e\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp oeq <8 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <8 x i1> %c, <8 x float> %d, <8 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "fcmpoeq",
  "ty": "<2 x double>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmeq v0.2d, v0.2d, v1.2d\nxtn v0.2s, v0.2d\nret",
  "giasm": "fcmeq v0.2d, v0.2d, v1.2d\nxtn v0.2s, v0.2d\nret",
  "ll": "define <2 x i1> @test(<2 x double> %a, <2 x double> %b) {\n  %r = fcmp oeq <2 x double> %a, %b\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp oeq <2 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "fcmpoeq",
  "ty": "<2 x double>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmeq v0.2d, v0.2d, #0.0\nxtn v0.2s, v0.2d\nret",
  "giasm": "fcmeq v0.2d, v0.2d, #0.0\nxtn v0.2s, v0.2d\nret",
  "ll": "define <2 x i1> @test(<2 x double> %a) {\n  %r = fcmp oeq <2 x double> %a, zeroinitializer\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp oeq <2 x double> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "selectfcmpoeq",
  "ty": "<2 x double>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmeq v0.2d, v0.2d, v1.2d\nbsl v0.16b, v2.16b, v3.16b\nret",
  "giasm": "fcmeq v0.2d, v0.2d, v1.2d\nbsl v0.16b, v2.16b, v3.16b\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, <2 x double> %b, <2 x double> %d, <2 x double> %e) {\n  %c = fcmp oeq <2 x double> %a, %b\n  %r = select <2 x i1> %c, <2 x double> %d, <2 x double> %e\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp oeq <2 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <2 x i1> %c, <2 x double> %d, <2 x double> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "selectfcmpoeq",
  "ty": "<2 x double>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmeq v0.2d, v0.2d, #0.0\nbsl v0.16b, v1.16b, v2.16b\nret",
  "giasm": "fcmeq v0.2d, v0.2d, #0.0\nbsl v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, <2 x double> %d, <2 x double> %e) {\n  %c = fcmp oeq <2 x double> %a, zeroinitializer\n  %r = select <2 x i1> %c, <2 x double> %d, <2 x double> %e\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp oeq <2 x double> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <2 x i1> %c, <2 x double> %d, <2 x double> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "fcmpoeq",
  "ty": "<4 x double>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmeq v1.2d, v1.2d, v3.2d\nfcmeq v0.2d, v0.2d, v2.2d\nuzp1 v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "giasm": "fcmeq v0.2d, v0.2d, v2.2d\nfcmeq v1.2d, v1.2d, v3.2d\nuzp1 v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x double> %a, <4 x double> %b) {\n  %r = fcmp oeq <4 x double> %a, %b\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp oeq <4 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "fcmpoeq",
  "ty": "<4 x double>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmeq v1.2d, v1.2d, #0.0\nfcmeq v0.2d, v0.2d, #0.0\nuzp1 v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "giasm": "fcmeq v0.2d, v0.2d, #0.0\nfcmeq v1.2d, v1.2d, #0.0\nuzp1 v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x double> %a) {\n  %r = fcmp oeq <4 x double> %a, zeroinitializer\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp oeq <4 x double> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "selectfcmpoeq",
  "ty": "<4 x double>",
  "variant": "cmp",
  "codesize": 3,
  "thru": 4,
  "lat": 3,
  "sizelat": 3,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmeq v1.2d, v1.2d, v3.2d\nfcmeq v0.2d, v0.2d, v2.2d\nbsl v1.16b, v5.16b, v7.16b\nbsl v0.16b, v4.16b, v6.16b\nret",
  "giasm": "fcmeq v0.2d, v0.2d, v2.2d\nfcmeq v1.2d, v1.2d, v3.2d\nbsl v0.16b, v4.16b, v6.16b\nbsl v1.16b, v5.16b, v7.16b\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, <4 x double> %b, <4 x double> %d, <4 x double> %e) {\n  %c = fcmp oeq <4 x double> %a, %b\n  %r = select <4 x i1> %c, <4 x double> %d, <4 x double> %e\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp oeq <4 x double> %a, %b\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <4 x i1> %c, <4 x double> %d, <4 x double> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "selectfcmpoeq",
  "ty": "<4 x double>",
  "variant": "cmp0",
  "codesize": 3,
  "thru": 4,
  "lat": 3,
  "sizelat": 3,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmeq v1.2d, v1.2d, #0.0\nfcmeq v0.2d, v0.2d, #0.0\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "giasm": "fcmeq v0.2d, v0.2d, #0.0\nfcmeq v1.2d, v1.2d, #0.0\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, <4 x double> %d, <4 x double> %e) {\n  %c = fcmp oeq <4 x double> %a, zeroinitializer\n  %r = select <4 x i1> %c, <4 x double> %d, <4 x double> %e\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp oeq <4 x double> %a, zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <4 x i1> %c, <4 x double> %d, <4 x double> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "fcmpogt",
  "ty": "half",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp h0, h1\ncset w0, gt\nret",
  "giasm": "fcmp h0, h1\ncset w0, gt\nret",
  "ll": "define i1 @test(half %a, half %b) {\n  %r = fcmp ogt half %a, %b\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ogt half %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "fcmpogt",
  "ty": "half",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp h0, #0.0\ncset w0, gt\nret",
  "giasm": "fcmp h0, #0.0\ncset w0, gt\nret",
  "ll": "define i1 @test(half %a) {\n  %r = fcmp ogt half %a, 0.0\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ogt half %a, 0xH0000\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "selectfcmpogt",
  "ty": "half",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 5,
  "extrasize": 0,
  "asm": "fcmp h0, h1\nfcsel h0, h2, h3, gt\nret",
  "giasm": "fcmp h0, h1\nfmov w8, s2\nfmov w9, s3\ncsel w8, w8, w9, gt\nfmov s0, w8\nret",
  "ll": "define half @test(half %a, half %b, half %d, half %e) {\n  %c = fcmp ogt half %a, %b\n  %r = select i1 %c, half %d, half %e\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ogt half %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, half %d, half %e\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "selectfcmpogt",
  "ty": "half",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 5,
  "extrasize": 0,
  "asm": "fcmp h0, #0.0\nfcsel h0, h1, h2, gt\nret",
  "giasm": "fcmp h0, #0.0\nfmov w8, s1\nfmov w9, s2\ncsel w8, w8, w9, gt\nfmov s0, w8\nret",
  "ll": "define half @test(half %a, half %d, half %e) {\n  %c = fcmp ogt half %a, 0.0\n  %r = select i1 %c, half %d, half %e\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ogt half %a, 0xH0000\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, half %d, half %e\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "fcmpogt",
  "ty": "float",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp s0, s1\ncset w0, gt\nret",
  "giasm": "fcmp s0, s1\ncset w0, gt\nret",
  "ll": "define i1 @test(float %a, float %b) {\n  %r = fcmp ogt float %a, %b\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ogt float %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "fcmpogt",
  "ty": "float",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp s0, #0.0\ncset w0, gt\nret",
  "giasm": "fcmp s0, #0.0\ncset w0, gt\nret",
  "ll": "define i1 @test(float %a) {\n  %r = fcmp ogt float %a, 0.0\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ogt float %a, 0.000000e+00\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "selectfcmpogt",
  "ty": "float",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp s0, s1\nfcsel s0, s2, s3, gt\nret",
  "giasm": "fcmp s0, s1\nfcsel s0, s2, s3, gt\nret",
  "ll": "define float @test(float %a, float %b, float %d, float %e) {\n  %c = fcmp ogt float %a, %b\n  %r = select i1 %c, float %d, float %e\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ogt float %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, float %d, float %e\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "selectfcmpogt",
  "ty": "float",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp s0, #0.0\nfcsel s0, s1, s2, gt\nret",
  "giasm": "fcmp s0, #0.0\nfcsel s0, s1, s2, gt\nret",
  "ll": "define float @test(float %a, float %d, float %e) {\n  %c = fcmp ogt float %a, 0.0\n  %r = select i1 %c, float %d, float %e\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ogt float %a, 0.000000e+00\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, float %d, float %e\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "fcmpogt",
  "ty": "double",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp d0, d1\ncset w0, gt\nret",
  "giasm": "fcmp d0, d1\ncset w0, gt\nret",
  "ll": "define i1 @test(double %a, double %b) {\n  %r = fcmp ogt double %a, %b\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ogt double %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "fcmpogt",
  "ty": "double",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp d0, #0.0\ncset w0, gt\nret",
  "giasm": "fcmp d0, #0.0\ncset w0, gt\nret",
  "ll": "define i1 @test(double %a) {\n  %r = fcmp ogt double %a, 0.0\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ogt double %a, 0.000000e+00\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "selectfcmpogt",
  "ty": "double",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp d0, d1\nfcsel d0, d2, d3, gt\nret",
  "giasm": "fcmp d0, d1\nfcsel d0, d2, d3, gt\nret",
  "ll": "define double @test(double %a, double %b, double %d, double %e) {\n  %c = fcmp ogt double %a, %b\n  %r = select i1 %c, double %d, double %e\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ogt double %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, double %d, double %e\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "selectfcmpogt",
  "ty": "double",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp d0, #0.0\nfcsel d0, d1, d2, gt\nret",
  "giasm": "fcmp d0, #0.0\nfcsel d0, d1, d2, gt\nret",
  "ll": "define double @test(double %a, double %d, double %e) {\n  %c = fcmp ogt double %a, 0.0\n  %r = select i1 %c, double %d, double %e\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ogt double %a, 0.000000e+00\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, double %d, double %e\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "fcmpogt",
  "ty": "<4 x half>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fcmgt v0.4h, v0.4h, v1.4h\nret",
  "giasm": "fcmgt v0.4h, v0.4h, v1.4h\nret",
  "ll": "define <4 x i1> @test(<4 x half> %a, <4 x half> %b) {\n  %r = fcmp ogt <4 x half> %a, %b\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ogt <4 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "fcmpogt",
  "ty": "<4 x half>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fcmgt v0.4h, v0.4h, #0.0\nret",
  "giasm": "fcmgt v0.4h, v0.4h, #0.0\nret",
  "ll": "define <4 x i1> @test(<4 x half> %a) {\n  %r = fcmp ogt <4 x half> %a, zeroinitializer\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ogt <4 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "selectfcmpogt",
  "ty": "<4 x half>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmgt v0.4h, v0.4h, v1.4h\nbsl v0.8b, v2.8b, v3.8b\nret",
  "giasm": "fcmgt v0.4h, v0.4h, v1.4h\nbsl v0.8b, v2.8b, v3.8b\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, <4 x half> %b, <4 x half> %d, <4 x half> %e) {\n  %c = fcmp ogt <4 x half> %a, %b\n  %r = select <4 x i1> %c, <4 x half> %d, <4 x half> %e\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ogt <4 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x half> %d, <4 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "selectfcmpogt",
  "ty": "<4 x half>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmgt v0.4h, v0.4h, #0.0\nbsl v0.8b, v1.8b, v2.8b\nret",
  "giasm": "fcmgt v0.4h, v0.4h, #0.0\nbsl v0.8b, v1.8b, v2.8b\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, <4 x half> %d, <4 x half> %e) {\n  %c = fcmp ogt <4 x half> %a, zeroinitializer\n  %r = select <4 x i1> %c, <4 x half> %d, <4 x half> %e\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ogt <4 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x half> %d, <4 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "fcmpogt",
  "ty": "<8 x half>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmgt v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "giasm": "fcmgt v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x half> %a, <8 x half> %b) {\n  %r = fcmp ogt <8 x half> %a, %b\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ogt <8 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "fcmpogt",
  "ty": "<8 x half>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmgt v0.8h, v0.8h, #0.0\nxtn v0.8b, v0.8h\nret",
  "giasm": "fcmgt v0.8h, v0.8h, #0.0\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x half> %a) {\n  %r = fcmp ogt <8 x half> %a, zeroinitializer\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ogt <8 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "selectfcmpogt",
  "ty": "<8 x half>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmgt v0.8h, v0.8h, v1.8h\nbsl v0.16b, v2.16b, v3.16b\nret",
  "giasm": "fcmgt v0.8h, v0.8h, v1.8h\nbsl v0.16b, v2.16b, v3.16b\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, <8 x half> %b, <8 x half> %d, <8 x half> %e) {\n  %c = fcmp ogt <8 x half> %a, %b\n  %r = select <8 x i1> %c, <8 x half> %d, <8 x half> %e\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ogt <8 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x half> %d, <8 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "selectfcmpogt",
  "ty": "<8 x half>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmgt v0.8h, v0.8h, #0.0\nbsl v0.16b, v1.16b, v2.16b\nret",
  "giasm": "fcmgt v0.8h, v0.8h, #0.0\nbsl v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, <8 x half> %d, <8 x half> %e) {\n  %c = fcmp ogt <8 x half> %a, zeroinitializer\n  %r = select <8 x i1> %c, <8 x half> %d, <8 x half> %e\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ogt <8 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x half> %d, <8 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "fcmpogt",
  "ty": "<16 x half>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmgt v1.8h, v1.8h, v3.8h\nfcmgt v0.8h, v0.8h, v2.8h\nuzp1 v0.16b, v0.16b, v1.16b\nret",
  "giasm": "fcmgt v0.8h, v0.8h, v2.8h\nfcmgt v1.8h, v1.8h, v3.8h\nuzp1 v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <16 x i1> @test(<16 x half> %a, <16 x half> %b) {\n  %r = fcmp ogt <16 x half> %a, %b\n  ret <16 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ogt <16 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i1> %r"
 },
 {
  "instr": "fcmpogt",
  "ty": "<16 x half>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmgt v1.8h, v1.8h, #0.0\nfcmgt v0.8h, v0.8h, #0.0\nuzp1 v0.16b, v0.16b, v1.16b\nret",
  "giasm": "fcmgt v0.8h, v0.8h, #0.0\nfcmgt v1.8h, v1.8h, #0.0\nuzp1 v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <16 x i1> @test(<16 x half> %a) {\n  %r = fcmp ogt <16 x half> %a, zeroinitializer\n  ret <16 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ogt <16 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i1> %r"
 },
 {
  "instr": "selectfcmpogt",
  "ty": "<16 x half>",
  "variant": "cmp",
  "codesize": 3,
  "thru": 4,
  "lat": 3,
  "sizelat": 3,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmgt v1.8h, v1.8h, v3.8h\nfcmgt v0.8h, v0.8h, v2.8h\nbsl v1.16b, v5.16b, v7.16b\nbsl v0.16b, v4.16b, v6.16b\nret",
  "giasm": "fcmgt v0.8h, v0.8h, v2.8h\nfcmgt v1.8h, v1.8h, v3.8h\nbsl v0.16b, v4.16b, v6.16b\nbsl v1.16b, v5.16b, v7.16b\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, <16 x half> %b, <16 x half> %d, <16 x half> %e) {\n  %c = fcmp ogt <16 x half> %a, %b\n  %r = select <16 x i1> %c, <16 x half> %d, <16 x half> %e\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ogt <16 x half> %a, %b\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <16 x i1> %c, <16 x half> %d, <16 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "selectfcmpogt",
  "ty": "<16 x half>",
  "variant": "cmp0",
  "codesize": 3,
  "thru": 4,
  "lat": 3,
  "sizelat": 3,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmgt v1.8h, v1.8h, #0.0\nfcmgt v0.8h, v0.8h, #0.0\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "giasm": "fcmgt v0.8h, v0.8h, #0.0\nfcmgt v1.8h, v1.8h, #0.0\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, <16 x half> %d, <16 x half> %e) {\n  %c = fcmp ogt <16 x half> %a, zeroinitializer\n  %r = select <16 x i1> %c, <16 x half> %d, <16 x half> %e\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ogt <16 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <16 x i1> %c, <16 x half> %d, <16 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "fcmpogt",
  "ty": "<2 x float>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fcmgt v0.2s, v0.2s, v1.2s\nret",
  "giasm": "fcmgt v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x i1> @test(<2 x float> %a, <2 x float> %b) {\n  %r = fcmp ogt <2 x float> %a, %b\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ogt <2 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "fcmpogt",
  "ty": "<2 x float>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fcmgt v0.2s, v0.2s, #0.0\nret",
  "giasm": "fcmgt v0.2s, v0.2s, #0.0\nret",
  "ll": "define <2 x i1> @test(<2 x float> %a) {\n  %r = fcmp ogt <2 x float> %a, zeroinitializer\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ogt <2 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "selectfcmpogt",
  "ty": "<2 x float>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmgt v0.2s, v0.2s, v1.2s\nbsl v0.8b, v2.8b, v3.8b\nret",
  "giasm": "fcmgt v0.2s, v0.2s, v1.2s\nbsl v0.8b, v2.8b, v3.8b\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, <2 x float> %b, <2 x float> %d, <2 x float> %e) {\n  %c = fcmp ogt <2 x float> %a, %b\n  %r = select <2 x i1> %c, <2 x float> %d, <2 x float> %e\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ogt <2 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <2 x i1> %c, <2 x float> %d, <2 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "selectfcmpogt",
  "ty": "<2 x float>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmgt v0.2s, v0.2s, #0.0\nbsl v0.8b, v1.8b, v2.8b\nret",
  "giasm": "fcmgt v0.2s, v0.2s, #0.0\nbsl v0.8b, v1.8b, v2.8b\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, <2 x float> %d, <2 x float> %e) {\n  %c = fcmp ogt <2 x float> %a, zeroinitializer\n  %r = select <2 x i1> %c, <2 x float> %d, <2 x float> %e\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ogt <2 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <2 x i1> %c, <2 x float> %d, <2 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "fcmpogt",
  "ty": "<4 x float>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmgt v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "giasm": "fcmgt v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x float> %a, <4 x float> %b) {\n  %r = fcmp ogt <4 x float> %a, %b\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ogt <4 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "fcmpogt",
  "ty": "<4 x float>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmgt v0.4s, v0.4s, #0.0\nxtn v0.4h, v0.4s\nret",
  "giasm": "fcmgt v0.4s, v0.4s, #0.0\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x float> %a) {\n  %r = fcmp ogt <4 x float> %a, zeroinitializer\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ogt <4 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "selectfcmpogt",
  "ty": "<4 x float>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmgt v0.4s, v0.4s, v1.4s\nbsl v0.16b, v2.16b, v3.16b\nret",
  "giasm": "fcmgt v0.4s, v0.4s, v1.4s\nbsl v0.16b, v2.16b, v3.16b\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, <4 x float> %b, <4 x float> %d, <4 x float> %e) {\n  %c = fcmp ogt <4 x float> %a, %b\n  %r = select <4 x i1> %c, <4 x float> %d, <4 x float> %e\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ogt <4 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x float> %d, <4 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "selectfcmpogt",
  "ty": "<4 x float>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmgt v0.4s, v0.4s, #0.0\nbsl v0.16b, v1.16b, v2.16b\nret",
  "giasm": "fcmgt v0.4s, v0.4s, #0.0\nbsl v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, <4 x float> %d, <4 x float> %e) {\n  %c = fcmp ogt <4 x float> %a, zeroinitializer\n  %r = select <4 x i1> %c, <4 x float> %d, <4 x float> %e\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ogt <4 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x float> %d, <4 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "fcmpogt",
  "ty": "<8 x float>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmgt v1.4s, v1.4s, v3.4s\nfcmgt v0.4s, v0.4s, v2.4s\nuzp1 v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "giasm": "fcmgt v0.4s, v0.4s, v2.4s\nfcmgt v1.4s, v1.4s, v3.4s\nuzp1 v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x float> %a, <8 x float> %b) {\n  %r = fcmp ogt <8 x float> %a, %b\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ogt <8 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "fcmpogt",
  "ty": "<8 x float>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmgt v1.4s, v1.4s, #0.0\nfcmgt v0.4s, v0.4s, #0.0\nuzp1 v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "giasm": "fcmgt v0.4s, v0.4s, #0.0\nfcmgt v1.4s, v1.4s, #0.0\nuzp1 v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x float> %a) {\n  %r = fcmp ogt <8 x float> %a, zeroinitializer\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ogt <8 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "selectfcmpogt",
  "ty": "<8 x float>",
  "variant": "cmp",
  "codesize": 3,
  "thru": 4,
  "lat": 3,
  "sizelat": 3,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmgt v1.4s, v1.4s, v3.4s\nfcmgt v0.4s, v0.4s, v2.4s\nbsl v1.16b, v5.16b, v7.16b\nbsl v0.16b, v4.16b, v6.16b\nret",
  "giasm": "fcmgt v0.4s, v0.4s, v2.4s\nfcmgt v1.4s, v1.4s, v3.4s\nbsl v0.16b, v4.16b, v6.16b\nbsl v1.16b, v5.16b, v7.16b\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, <8 x float> %b, <8 x float> %d, <8 x float> %e) {\n  %c = fcmp ogt <8 x float> %a, %b\n  %r = select <8 x i1> %c, <8 x float> %d, <8 x float> %e\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ogt <8 x float> %a, %b\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <8 x i1> %c, <8 x float> %d, <8 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "selectfcmpogt",
  "ty": "<8 x float>",
  "variant": "cmp0",
  "codesize": 3,
  "thru": 4,
  "lat": 3,
  "sizelat": 3,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmgt v1.4s, v1.4s, #0.0\nfcmgt v0.4s, v0.4s, #0.0\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "giasm": "fcmgt v0.4s, v0.4s, #0.0\nfcmgt v1.4s, v1.4s, #0.0\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, <8 x float> %d, <8 x float> %e) {\n  %c = fcmp ogt <8 x float> %a, zeroinitializer\n  %r = select <8 x i1> %c, <8 x float> %d, <8 x float> %e\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ogt <8 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <8 x i1> %c, <8 x float> %d, <8 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "fcmpogt",
  "ty": "<2 x double>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmgt v0.2d, v0.2d, v1.2d\nxtn v0.2s, v0.2d\nret",
  "giasm": "fcmgt v0.2d, v0.2d, v1.2d\nxtn v0.2s, v0.2d\nret",
  "ll": "define <2 x i1> @test(<2 x double> %a, <2 x double> %b) {\n  %r = fcmp ogt <2 x double> %a, %b\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ogt <2 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "fcmpogt",
  "ty": "<2 x double>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmgt v0.2d, v0.2d, #0.0\nxtn v0.2s, v0.2d\nret",
  "giasm": "fcmgt v0.2d, v0.2d, #0.0\nxtn v0.2s, v0.2d\nret",
  "ll": "define <2 x i1> @test(<2 x double> %a) {\n  %r = fcmp ogt <2 x double> %a, zeroinitializer\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ogt <2 x double> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "selectfcmpogt",
  "ty": "<2 x double>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmgt v0.2d, v0.2d, v1.2d\nbsl v0.16b, v2.16b, v3.16b\nret",
  "giasm": "fcmgt v0.2d, v0.2d, v1.2d\nbsl v0.16b, v2.16b, v3.16b\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, <2 x double> %b, <2 x double> %d, <2 x double> %e) {\n  %c = fcmp ogt <2 x double> %a, %b\n  %r = select <2 x i1> %c, <2 x double> %d, <2 x double> %e\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ogt <2 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <2 x i1> %c, <2 x double> %d, <2 x double> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "selectfcmpogt",
  "ty": "<2 x double>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmgt v0.2d, v0.2d, #0.0\nbsl v0.16b, v1.16b, v2.16b\nret",
  "giasm": "fcmgt v0.2d, v0.2d, #0.0\nbsl v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, <2 x double> %d, <2 x double> %e) {\n  %c = fcmp ogt <2 x double> %a, zeroinitializer\n  %r = select <2 x i1> %c, <2 x double> %d, <2 x double> %e\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ogt <2 x double> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <2 x i1> %c, <2 x double> %d, <2 x double> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "fcmpogt",
  "ty": "<4 x double>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmgt v1.2d, v1.2d, v3.2d\nfcmgt v0.2d, v0.2d, v2.2d\nuzp1 v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "giasm": "fcmgt v0.2d, v0.2d, v2.2d\nfcmgt v1.2d, v1.2d, v3.2d\nuzp1 v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x double> %a, <4 x double> %b) {\n  %r = fcmp ogt <4 x double> %a, %b\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ogt <4 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "fcmpogt",
  "ty": "<4 x double>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmgt v1.2d, v1.2d, #0.0\nfcmgt v0.2d, v0.2d, #0.0\nuzp1 v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "giasm": "fcmgt v0.2d, v0.2d, #0.0\nfcmgt v1.2d, v1.2d, #0.0\nuzp1 v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x double> %a) {\n  %r = fcmp ogt <4 x double> %a, zeroinitializer\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ogt <4 x double> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "selectfcmpogt",
  "ty": "<4 x double>",
  "variant": "cmp",
  "codesize": 3,
  "thru": 4,
  "lat": 3,
  "sizelat": 3,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmgt v1.2d, v1.2d, v3.2d\nfcmgt v0.2d, v0.2d, v2.2d\nbsl v1.16b, v5.16b, v7.16b\nbsl v0.16b, v4.16b, v6.16b\nret",
  "giasm": "fcmgt v0.2d, v0.2d, v2.2d\nfcmgt v1.2d, v1.2d, v3.2d\nbsl v0.16b, v4.16b, v6.16b\nbsl v1.16b, v5.16b, v7.16b\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, <4 x double> %b, <4 x double> %d, <4 x double> %e) {\n  %c = fcmp ogt <4 x double> %a, %b\n  %r = select <4 x i1> %c, <4 x double> %d, <4 x double> %e\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ogt <4 x double> %a, %b\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <4 x i1> %c, <4 x double> %d, <4 x double> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "selectfcmpogt",
  "ty": "<4 x double>",
  "variant": "cmp0",
  "codesize": 3,
  "thru": 4,
  "lat": 3,
  "sizelat": 3,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmgt v1.2d, v1.2d, #0.0\nfcmgt v0.2d, v0.2d, #0.0\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "giasm": "fcmgt v0.2d, v0.2d, #0.0\nfcmgt v1.2d, v1.2d, #0.0\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, <4 x double> %d, <4 x double> %e) {\n  %c = fcmp ogt <4 x double> %a, zeroinitializer\n  %r = select <4 x i1> %c, <4 x double> %d, <4 x double> %e\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ogt <4 x double> %a, zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <4 x i1> %c, <4 x double> %d, <4 x double> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "fcmpoge",
  "ty": "half",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp h0, h1\ncset w0, ge\nret",
  "giasm": "fcmp h0, h1\ncset w0, ge\nret",
  "ll": "define i1 @test(half %a, half %b) {\n  %r = fcmp oge half %a, %b\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp oge half %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "fcmpoge",
  "ty": "half",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp h0, #0.0\ncset w0, ge\nret",
  "giasm": "fcmp h0, #0.0\ncset w0, ge\nret",
  "ll": "define i1 @test(half %a) {\n  %r = fcmp oge half %a, 0.0\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp oge half %a, 0xH0000\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "selectfcmpoge",
  "ty": "half",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 5,
  "extrasize": 0,
  "asm": "fcmp h0, h1\nfcsel h0, h2, h3, ge\nret",
  "giasm": "fcmp h0, h1\nfmov w8, s2\nfmov w9, s3\ncsel w8, w8, w9, ge\nfmov s0, w8\nret",
  "ll": "define half @test(half %a, half %b, half %d, half %e) {\n  %c = fcmp oge half %a, %b\n  %r = select i1 %c, half %d, half %e\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp oge half %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, half %d, half %e\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "selectfcmpoge",
  "ty": "half",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 5,
  "extrasize": 0,
  "asm": "fcmp h0, #0.0\nfcsel h0, h1, h2, ge\nret",
  "giasm": "fcmp h0, #0.0\nfmov w8, s1\nfmov w9, s2\ncsel w8, w8, w9, ge\nfmov s0, w8\nret",
  "ll": "define half @test(half %a, half %d, half %e) {\n  %c = fcmp oge half %a, 0.0\n  %r = select i1 %c, half %d, half %e\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp oge half %a, 0xH0000\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, half %d, half %e\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "fcmpoge",
  "ty": "float",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp s0, s1\ncset w0, ge\nret",
  "giasm": "fcmp s0, s1\ncset w0, ge\nret",
  "ll": "define i1 @test(float %a, float %b) {\n  %r = fcmp oge float %a, %b\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp oge float %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "fcmpoge",
  "ty": "float",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp s0, #0.0\ncset w0, ge\nret",
  "giasm": "fcmp s0, #0.0\ncset w0, ge\nret",
  "ll": "define i1 @test(float %a) {\n  %r = fcmp oge float %a, 0.0\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp oge float %a, 0.000000e+00\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "selectfcmpoge",
  "ty": "float",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp s0, s1\nfcsel s0, s2, s3, ge\nret",
  "giasm": "fcmp s0, s1\nfcsel s0, s2, s3, ge\nret",
  "ll": "define float @test(float %a, float %b, float %d, float %e) {\n  %c = fcmp oge float %a, %b\n  %r = select i1 %c, float %d, float %e\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp oge float %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, float %d, float %e\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "selectfcmpoge",
  "ty": "float",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp s0, #0.0\nfcsel s0, s1, s2, ge\nret",
  "giasm": "fcmp s0, #0.0\nfcsel s0, s1, s2, ge\nret",
  "ll": "define float @test(float %a, float %d, float %e) {\n  %c = fcmp oge float %a, 0.0\n  %r = select i1 %c, float %d, float %e\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp oge float %a, 0.000000e+00\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, float %d, float %e\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "fcmpoge",
  "ty": "double",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp d0, d1\ncset w0, ge\nret",
  "giasm": "fcmp d0, d1\ncset w0, ge\nret",
  "ll": "define i1 @test(double %a, double %b) {\n  %r = fcmp oge double %a, %b\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp oge double %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "fcmpoge",
  "ty": "double",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp d0, #0.0\ncset w0, ge\nret",
  "giasm": "fcmp d0, #0.0\ncset w0, ge\nret",
  "ll": "define i1 @test(double %a) {\n  %r = fcmp oge double %a, 0.0\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp oge double %a, 0.000000e+00\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "selectfcmpoge",
  "ty": "double",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp d0, d1\nfcsel d0, d2, d3, ge\nret",
  "giasm": "fcmp d0, d1\nfcsel d0, d2, d3, ge\nret",
  "ll": "define double @test(double %a, double %b, double %d, double %e) {\n  %c = fcmp oge double %a, %b\n  %r = select i1 %c, double %d, double %e\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp oge double %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, double %d, double %e\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "selectfcmpoge",
  "ty": "double",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp d0, #0.0\nfcsel d0, d1, d2, ge\nret",
  "giasm": "fcmp d0, #0.0\nfcsel d0, d1, d2, ge\nret",
  "ll": "define double @test(double %a, double %d, double %e) {\n  %c = fcmp oge double %a, 0.0\n  %r = select i1 %c, double %d, double %e\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp oge double %a, 0.000000e+00\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, double %d, double %e\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "fcmpoge",
  "ty": "<4 x half>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fcmge v0.4h, v0.4h, v1.4h\nret",
  "giasm": "fcmge v0.4h, v0.4h, v1.4h\nret",
  "ll": "define <4 x i1> @test(<4 x half> %a, <4 x half> %b) {\n  %r = fcmp oge <4 x half> %a, %b\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp oge <4 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "fcmpoge",
  "ty": "<4 x half>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fcmge v0.4h, v0.4h, #0.0\nret",
  "giasm": "fcmge v0.4h, v0.4h, #0.0\nret",
  "ll": "define <4 x i1> @test(<4 x half> %a) {\n  %r = fcmp oge <4 x half> %a, zeroinitializer\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp oge <4 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "selectfcmpoge",
  "ty": "<4 x half>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmge v0.4h, v0.4h, v1.4h\nbsl v0.8b, v2.8b, v3.8b\nret",
  "giasm": "fcmge v0.4h, v0.4h, v1.4h\nbsl v0.8b, v2.8b, v3.8b\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, <4 x half> %b, <4 x half> %d, <4 x half> %e) {\n  %c = fcmp oge <4 x half> %a, %b\n  %r = select <4 x i1> %c, <4 x half> %d, <4 x half> %e\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp oge <4 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x half> %d, <4 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "selectfcmpoge",
  "ty": "<4 x half>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmge v0.4h, v0.4h, #0.0\nbsl v0.8b, v1.8b, v2.8b\nret",
  "giasm": "fcmge v0.4h, v0.4h, #0.0\nbsl v0.8b, v1.8b, v2.8b\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, <4 x half> %d, <4 x half> %e) {\n  %c = fcmp oge <4 x half> %a, zeroinitializer\n  %r = select <4 x i1> %c, <4 x half> %d, <4 x half> %e\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp oge <4 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x half> %d, <4 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "fcmpoge",
  "ty": "<8 x half>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmge v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "giasm": "fcmge v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x half> %a, <8 x half> %b) {\n  %r = fcmp oge <8 x half> %a, %b\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp oge <8 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "fcmpoge",
  "ty": "<8 x half>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmge v0.8h, v0.8h, #0.0\nxtn v0.8b, v0.8h\nret",
  "giasm": "fcmge v0.8h, v0.8h, #0.0\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x half> %a) {\n  %r = fcmp oge <8 x half> %a, zeroinitializer\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp oge <8 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "selectfcmpoge",
  "ty": "<8 x half>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmge v0.8h, v0.8h, v1.8h\nbsl v0.16b, v2.16b, v3.16b\nret",
  "giasm": "fcmge v0.8h, v0.8h, v1.8h\nbsl v0.16b, v2.16b, v3.16b\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, <8 x half> %b, <8 x half> %d, <8 x half> %e) {\n  %c = fcmp oge <8 x half> %a, %b\n  %r = select <8 x i1> %c, <8 x half> %d, <8 x half> %e\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp oge <8 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x half> %d, <8 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "selectfcmpoge",
  "ty": "<8 x half>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmge v0.8h, v0.8h, #0.0\nbsl v0.16b, v1.16b, v2.16b\nret",
  "giasm": "fcmge v0.8h, v0.8h, #0.0\nbsl v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, <8 x half> %d, <8 x half> %e) {\n  %c = fcmp oge <8 x half> %a, zeroinitializer\n  %r = select <8 x i1> %c, <8 x half> %d, <8 x half> %e\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp oge <8 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x half> %d, <8 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "fcmpoge",
  "ty": "<16 x half>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmge v1.8h, v1.8h, v3.8h\nfcmge v0.8h, v0.8h, v2.8h\nuzp1 v0.16b, v0.16b, v1.16b\nret",
  "giasm": "fcmge v0.8h, v0.8h, v2.8h\nfcmge v1.8h, v1.8h, v3.8h\nuzp1 v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <16 x i1> @test(<16 x half> %a, <16 x half> %b) {\n  %r = fcmp oge <16 x half> %a, %b\n  ret <16 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp oge <16 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i1> %r"
 },
 {
  "instr": "fcmpoge",
  "ty": "<16 x half>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmge v1.8h, v1.8h, #0.0\nfcmge v0.8h, v0.8h, #0.0\nuzp1 v0.16b, v0.16b, v1.16b\nret",
  "giasm": "fcmge v0.8h, v0.8h, #0.0\nfcmge v1.8h, v1.8h, #0.0\nuzp1 v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <16 x i1> @test(<16 x half> %a) {\n  %r = fcmp oge <16 x half> %a, zeroinitializer\n  ret <16 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp oge <16 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i1> %r"
 },
 {
  "instr": "selectfcmpoge",
  "ty": "<16 x half>",
  "variant": "cmp",
  "codesize": 3,
  "thru": 4,
  "lat": 3,
  "sizelat": 3,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmge v1.8h, v1.8h, v3.8h\nfcmge v0.8h, v0.8h, v2.8h\nbsl v1.16b, v5.16b, v7.16b\nbsl v0.16b, v4.16b, v6.16b\nret",
  "giasm": "fcmge v0.8h, v0.8h, v2.8h\nfcmge v1.8h, v1.8h, v3.8h\nbsl v0.16b, v4.16b, v6.16b\nbsl v1.16b, v5.16b, v7.16b\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, <16 x half> %b, <16 x half> %d, <16 x half> %e) {\n  %c = fcmp oge <16 x half> %a, %b\n  %r = select <16 x i1> %c, <16 x half> %d, <16 x half> %e\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp oge <16 x half> %a, %b\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <16 x i1> %c, <16 x half> %d, <16 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "selectfcmpoge",
  "ty": "<16 x half>",
  "variant": "cmp0",
  "codesize": 3,
  "thru": 4,
  "lat": 3,
  "sizelat": 3,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmge v1.8h, v1.8h, #0.0\nfcmge v0.8h, v0.8h, #0.0\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "giasm": "fcmge v0.8h, v0.8h, #0.0\nfcmge v1.8h, v1.8h, #0.0\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, <16 x half> %d, <16 x half> %e) {\n  %c = fcmp oge <16 x half> %a, zeroinitializer\n  %r = select <16 x i1> %c, <16 x half> %d, <16 x half> %e\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp oge <16 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <16 x i1> %c, <16 x half> %d, <16 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "fcmpoge",
  "ty": "<2 x float>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fcmge v0.2s, v0.2s, v1.2s\nret",
  "giasm": "fcmge v0.2s, v0.2s, v1.2s\nret",
  "ll": "define <2 x i1> @test(<2 x float> %a, <2 x float> %b) {\n  %r = fcmp oge <2 x float> %a, %b\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp oge <2 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "fcmpoge",
  "ty": "<2 x float>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fcmge v0.2s, v0.2s, #0.0\nret",
  "giasm": "fcmge v0.2s, v0.2s, #0.0\nret",
  "ll": "define <2 x i1> @test(<2 x float> %a) {\n  %r = fcmp oge <2 x float> %a, zeroinitializer\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp oge <2 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "selectfcmpoge",
  "ty": "<2 x float>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmge v0.2s, v0.2s, v1.2s\nbsl v0.8b, v2.8b, v3.8b\nret",
  "giasm": "fcmge v0.2s, v0.2s, v1.2s\nbsl v0.8b, v2.8b, v3.8b\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, <2 x float> %b, <2 x float> %d, <2 x float> %e) {\n  %c = fcmp oge <2 x float> %a, %b\n  %r = select <2 x i1> %c, <2 x float> %d, <2 x float> %e\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp oge <2 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <2 x i1> %c, <2 x float> %d, <2 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "selectfcmpoge",
  "ty": "<2 x float>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmge v0.2s, v0.2s, #0.0\nbsl v0.8b, v1.8b, v2.8b\nret",
  "giasm": "fcmge v0.2s, v0.2s, #0.0\nbsl v0.8b, v1.8b, v2.8b\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, <2 x float> %d, <2 x float> %e) {\n  %c = fcmp oge <2 x float> %a, zeroinitializer\n  %r = select <2 x i1> %c, <2 x float> %d, <2 x float> %e\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp oge <2 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <2 x i1> %c, <2 x float> %d, <2 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "fcmpoge",
  "ty": "<4 x float>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmge v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "giasm": "fcmge v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x float> %a, <4 x float> %b) {\n  %r = fcmp oge <4 x float> %a, %b\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp oge <4 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "fcmpoge",
  "ty": "<4 x float>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmge v0.4s, v0.4s, #0.0\nxtn v0.4h, v0.4s\nret",
  "giasm": "fcmge v0.4s, v0.4s, #0.0\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x float> %a) {\n  %r = fcmp oge <4 x float> %a, zeroinitializer\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp oge <4 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "selectfcmpoge",
  "ty": "<4 x float>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmge v0.4s, v0.4s, v1.4s\nbsl v0.16b, v2.16b, v3.16b\nret",
  "giasm": "fcmge v0.4s, v0.4s, v1.4s\nbsl v0.16b, v2.16b, v3.16b\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, <4 x float> %b, <4 x float> %d, <4 x float> %e) {\n  %c = fcmp oge <4 x float> %a, %b\n  %r = select <4 x i1> %c, <4 x float> %d, <4 x float> %e\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp oge <4 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x float> %d, <4 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "selectfcmpoge",
  "ty": "<4 x float>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmge v0.4s, v0.4s, #0.0\nbsl v0.16b, v1.16b, v2.16b\nret",
  "giasm": "fcmge v0.4s, v0.4s, #0.0\nbsl v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, <4 x float> %d, <4 x float> %e) {\n  %c = fcmp oge <4 x float> %a, zeroinitializer\n  %r = select <4 x i1> %c, <4 x float> %d, <4 x float> %e\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp oge <4 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x float> %d, <4 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "fcmpoge",
  "ty": "<8 x float>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmge v1.4s, v1.4s, v3.4s\nfcmge v0.4s, v0.4s, v2.4s\nuzp1 v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "giasm": "fcmge v0.4s, v0.4s, v2.4s\nfcmge v1.4s, v1.4s, v3.4s\nuzp1 v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x float> %a, <8 x float> %b) {\n  %r = fcmp oge <8 x float> %a, %b\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp oge <8 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "fcmpoge",
  "ty": "<8 x float>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmge v1.4s, v1.4s, #0.0\nfcmge v0.4s, v0.4s, #0.0\nuzp1 v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "giasm": "fcmge v0.4s, v0.4s, #0.0\nfcmge v1.4s, v1.4s, #0.0\nuzp1 v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x float> %a) {\n  %r = fcmp oge <8 x float> %a, zeroinitializer\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp oge <8 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "selectfcmpoge",
  "ty": "<8 x float>",
  "variant": "cmp",
  "codesize": 3,
  "thru": 4,
  "lat": 3,
  "sizelat": 3,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmge v1.4s, v1.4s, v3.4s\nfcmge v0.4s, v0.4s, v2.4s\nbsl v1.16b, v5.16b, v7.16b\nbsl v0.16b, v4.16b, v6.16b\nret",
  "giasm": "fcmge v0.4s, v0.4s, v2.4s\nfcmge v1.4s, v1.4s, v3.4s\nbsl v0.16b, v4.16b, v6.16b\nbsl v1.16b, v5.16b, v7.16b\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, <8 x float> %b, <8 x float> %d, <8 x float> %e) {\n  %c = fcmp oge <8 x float> %a, %b\n  %r = select <8 x i1> %c, <8 x float> %d, <8 x float> %e\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp oge <8 x float> %a, %b\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <8 x i1> %c, <8 x float> %d, <8 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "selectfcmpoge",
  "ty": "<8 x float>",
  "variant": "cmp0",
  "codesize": 3,
  "thru": 4,
  "lat": 3,
  "sizelat": 3,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmge v1.4s, v1.4s, #0.0\nfcmge v0.4s, v0.4s, #0.0\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "giasm": "fcmge v0.4s, v0.4s, #0.0\nfcmge v1.4s, v1.4s, #0.0\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, <8 x float> %d, <8 x float> %e) {\n  %c = fcmp oge <8 x float> %a, zeroinitializer\n  %r = select <8 x i1> %c, <8 x float> %d, <8 x float> %e\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp oge <8 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <8 x i1> %c, <8 x float> %d, <8 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "fcmpoge",
  "ty": "<2 x double>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmge v0.2d, v0.2d, v1.2d\nxtn v0.2s, v0.2d\nret",
  "giasm": "fcmge v0.2d, v0.2d, v1.2d\nxtn v0.2s, v0.2d\nret",
  "ll": "define <2 x i1> @test(<2 x double> %a, <2 x double> %b) {\n  %r = fcmp oge <2 x double> %a, %b\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp oge <2 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "fcmpoge",
  "ty": "<2 x double>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmge v0.2d, v0.2d, #0.0\nxtn v0.2s, v0.2d\nret",
  "giasm": "fcmge v0.2d, v0.2d, #0.0\nxtn v0.2s, v0.2d\nret",
  "ll": "define <2 x i1> @test(<2 x double> %a) {\n  %r = fcmp oge <2 x double> %a, zeroinitializer\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp oge <2 x double> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "selectfcmpoge",
  "ty": "<2 x double>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmge v0.2d, v0.2d, v1.2d\nbsl v0.16b, v2.16b, v3.16b\nret",
  "giasm": "fcmge v0.2d, v0.2d, v1.2d\nbsl v0.16b, v2.16b, v3.16b\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, <2 x double> %b, <2 x double> %d, <2 x double> %e) {\n  %c = fcmp oge <2 x double> %a, %b\n  %r = select <2 x i1> %c, <2 x double> %d, <2 x double> %e\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp oge <2 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <2 x i1> %c, <2 x double> %d, <2 x double> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "selectfcmpoge",
  "ty": "<2 x double>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmge v0.2d, v0.2d, #0.0\nbsl v0.16b, v1.16b, v2.16b\nret",
  "giasm": "fcmge v0.2d, v0.2d, #0.0\nbsl v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, <2 x double> %d, <2 x double> %e) {\n  %c = fcmp oge <2 x double> %a, zeroinitializer\n  %r = select <2 x i1> %c, <2 x double> %d, <2 x double> %e\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp oge <2 x double> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <2 x i1> %c, <2 x double> %d, <2 x double> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "fcmpoge",
  "ty": "<4 x double>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmge v1.2d, v1.2d, v3.2d\nfcmge v0.2d, v0.2d, v2.2d\nuzp1 v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "giasm": "fcmge v0.2d, v0.2d, v2.2d\nfcmge v1.2d, v1.2d, v3.2d\nuzp1 v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x double> %a, <4 x double> %b) {\n  %r = fcmp oge <4 x double> %a, %b\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp oge <4 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "fcmpoge",
  "ty": "<4 x double>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmge v1.2d, v1.2d, #0.0\nfcmge v0.2d, v0.2d, #0.0\nuzp1 v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "giasm": "fcmge v0.2d, v0.2d, #0.0\nfcmge v1.2d, v1.2d, #0.0\nuzp1 v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x double> %a) {\n  %r = fcmp oge <4 x double> %a, zeroinitializer\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp oge <4 x double> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "selectfcmpoge",
  "ty": "<4 x double>",
  "variant": "cmp",
  "codesize": 3,
  "thru": 4,
  "lat": 3,
  "sizelat": 3,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmge v1.2d, v1.2d, v3.2d\nfcmge v0.2d, v0.2d, v2.2d\nbsl v1.16b, v5.16b, v7.16b\nbsl v0.16b, v4.16b, v6.16b\nret",
  "giasm": "fcmge v0.2d, v0.2d, v2.2d\nfcmge v1.2d, v1.2d, v3.2d\nbsl v0.16b, v4.16b, v6.16b\nbsl v1.16b, v5.16b, v7.16b\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, <4 x double> %b, <4 x double> %d, <4 x double> %e) {\n  %c = fcmp oge <4 x double> %a, %b\n  %r = select <4 x i1> %c, <4 x double> %d, <4 x double> %e\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp oge <4 x double> %a, %b\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <4 x i1> %c, <4 x double> %d, <4 x double> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "selectfcmpoge",
  "ty": "<4 x double>",
  "variant": "cmp0",
  "codesize": 3,
  "thru": 4,
  "lat": 3,
  "sizelat": 3,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmge v1.2d, v1.2d, #0.0\nfcmge v0.2d, v0.2d, #0.0\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "giasm": "fcmge v0.2d, v0.2d, #0.0\nfcmge v1.2d, v1.2d, #0.0\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, <4 x double> %d, <4 x double> %e) {\n  %c = fcmp oge <4 x double> %a, zeroinitializer\n  %r = select <4 x i1> %c, <4 x double> %d, <4 x double> %e\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp oge <4 x double> %a, zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <4 x i1> %c, <4 x double> %d, <4 x double> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "fcmpolt",
  "ty": "half",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp h0, h1\ncset w0, mi\nret",
  "giasm": "fcmp h0, h1\ncset w0, mi\nret",
  "ll": "define i1 @test(half %a, half %b) {\n  %r = fcmp olt half %a, %b\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp olt half %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "fcmpolt",
  "ty": "half",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp h0, #0.0\ncset w0, mi\nret",
  "giasm": "fcmp h0, #0.0\ncset w0, mi\nret",
  "ll": "define i1 @test(half %a) {\n  %r = fcmp olt half %a, 0.0\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp olt half %a, 0xH0000\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "selectfcmpolt",
  "ty": "half",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 5,
  "extrasize": 0,
  "asm": "fcmp h0, h1\nfcsel h0, h2, h3, mi\nret",
  "giasm": "fcmp h0, h1\nfmov w8, s2\nfmov w9, s3\ncsel w8, w8, w9, mi\nfmov s0, w8\nret",
  "ll": "define half @test(half %a, half %b, half %d, half %e) {\n  %c = fcmp olt half %a, %b\n  %r = select i1 %c, half %d, half %e\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp olt half %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, half %d, half %e\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "selectfcmpolt",
  "ty": "half",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 5,
  "extrasize": 0,
  "asm": "fcmp h0, #0.0\nfcsel h0, h1, h2, mi\nret",
  "giasm": "fcmp h0, #0.0\nfmov w8, s1\nfmov w9, s2\ncsel w8, w8, w9, mi\nfmov s0, w8\nret",
  "ll": "define half @test(half %a, half %d, half %e) {\n  %c = fcmp olt half %a, 0.0\n  %r = select i1 %c, half %d, half %e\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp olt half %a, 0xH0000\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, half %d, half %e\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "fcmpolt",
  "ty": "float",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp s0, s1\ncset w0, mi\nret",
  "giasm": "fcmp s0, s1\ncset w0, mi\nret",
  "ll": "define i1 @test(float %a, float %b) {\n  %r = fcmp olt float %a, %b\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp olt float %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "fcmpolt",
  "ty": "float",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp s0, #0.0\ncset w0, mi\nret",
  "giasm": "fcmp s0, #0.0\ncset w0, mi\nret",
  "ll": "define i1 @test(float %a) {\n  %r = fcmp olt float %a, 0.0\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp olt float %a, 0.000000e+00\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "selectfcmpolt",
  "ty": "float",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp s0, s1\nfcsel s0, s2, s3, mi\nret",
  "giasm": "fcmp s0, s1\nfcsel s0, s2, s3, mi\nret",
  "ll": "define float @test(float %a, float %b, float %d, float %e) {\n  %c = fcmp olt float %a, %b\n  %r = select i1 %c, float %d, float %e\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp olt float %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, float %d, float %e\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "selectfcmpolt",
  "ty": "float",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp s0, #0.0\nfcsel s0, s1, s2, mi\nret",
  "giasm": "fcmp s0, #0.0\nfcsel s0, s1, s2, mi\nret",
  "ll": "define float @test(float %a, float %d, float %e) {\n  %c = fcmp olt float %a, 0.0\n  %r = select i1 %c, float %d, float %e\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp olt float %a, 0.000000e+00\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, float %d, float %e\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "fcmpolt",
  "ty": "double",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp d0, d1\ncset w0, mi\nret",
  "giasm": "fcmp d0, d1\ncset w0, mi\nret",
  "ll": "define i1 @test(double %a, double %b) {\n  %r = fcmp olt double %a, %b\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp olt double %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "fcmpolt",
  "ty": "double",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp d0, #0.0\ncset w0, mi\nret",
  "giasm": "fcmp d0, #0.0\ncset w0, mi\nret",
  "ll": "define i1 @test(double %a) {\n  %r = fcmp olt double %a, 0.0\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp olt double %a, 0.000000e+00\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "selectfcmpolt",
  "ty": "double",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp d0, d1\nfcsel d0, d2, d3, mi\nret",
  "giasm": "fcmp d0, d1\nfcsel d0, d2, d3, mi\nret",
  "ll": "define double @test(double %a, double %b, double %d, double %e) {\n  %c = fcmp olt double %a, %b\n  %r = select i1 %c, double %d, double %e\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp olt double %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, double %d, double %e\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "selectfcmpolt",
  "ty": "double",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp d0, #0.0\nfcsel d0, d1, d2, mi\nret",
  "giasm": "fcmp d0, #0.0\nfcsel d0, d1, d2, mi\nret",
  "ll": "define double @test(double %a, double %d, double %e) {\n  %c = fcmp olt double %a, 0.0\n  %r = select i1 %c, double %d, double %e\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp olt double %a, 0.000000e+00\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, double %d, double %e\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "fcmpolt",
  "ty": "<4 x half>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fcmgt v0.4h, v1.4h, v0.4h\nret",
  "giasm": "fcmgt v0.4h, v1.4h, v0.4h\nret",
  "ll": "define <4 x i1> @test(<4 x half> %a, <4 x half> %b) {\n  %r = fcmp olt <4 x half> %a, %b\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp olt <4 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "fcmpolt",
  "ty": "<4 x half>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fcmlt v0.4h, v0.4h, #0.0\nret",
  "giasm": "fcmlt v0.4h, v0.4h, #0.0\nret",
  "ll": "define <4 x i1> @test(<4 x half> %a) {\n  %r = fcmp olt <4 x half> %a, zeroinitializer\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp olt <4 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "selectfcmpolt",
  "ty": "<4 x half>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmgt v0.4h, v1.4h, v0.4h\nbsl v0.8b, v2.8b, v3.8b\nret",
  "giasm": "fcmgt v0.4h, v1.4h, v0.4h\nbsl v0.8b, v2.8b, v3.8b\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, <4 x half> %b, <4 x half> %d, <4 x half> %e) {\n  %c = fcmp olt <4 x half> %a, %b\n  %r = select <4 x i1> %c, <4 x half> %d, <4 x half> %e\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp olt <4 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x half> %d, <4 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "selectfcmpolt",
  "ty": "<4 x half>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmlt v0.4h, v0.4h, #0.0\nbsl v0.8b, v1.8b, v2.8b\nret",
  "giasm": "fcmlt v0.4h, v0.4h, #0.0\nbsl v0.8b, v1.8b, v2.8b\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, <4 x half> %d, <4 x half> %e) {\n  %c = fcmp olt <4 x half> %a, zeroinitializer\n  %r = select <4 x i1> %c, <4 x half> %d, <4 x half> %e\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp olt <4 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x half> %d, <4 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "fcmpolt",
  "ty": "<8 x half>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmgt v0.8h, v1.8h, v0.8h\nxtn v0.8b, v0.8h\nret",
  "giasm": "fcmgt v0.8h, v1.8h, v0.8h\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x half> %a, <8 x half> %b) {\n  %r = fcmp olt <8 x half> %a, %b\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp olt <8 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "fcmpolt",
  "ty": "<8 x half>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmlt v0.8h, v0.8h, #0.0\nxtn v0.8b, v0.8h\nret",
  "giasm": "fcmlt v0.8h, v0.8h, #0.0\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x half> %a) {\n  %r = fcmp olt <8 x half> %a, zeroinitializer\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp olt <8 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "selectfcmpolt",
  "ty": "<8 x half>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmgt v0.8h, v1.8h, v0.8h\nbsl v0.16b, v2.16b, v3.16b\nret",
  "giasm": "fcmgt v0.8h, v1.8h, v0.8h\nbsl v0.16b, v2.16b, v3.16b\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, <8 x half> %b, <8 x half> %d, <8 x half> %e) {\n  %c = fcmp olt <8 x half> %a, %b\n  %r = select <8 x i1> %c, <8 x half> %d, <8 x half> %e\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp olt <8 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x half> %d, <8 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "selectfcmpolt",
  "ty": "<8 x half>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmlt v0.8h, v0.8h, #0.0\nbsl v0.16b, v1.16b, v2.16b\nret",
  "giasm": "fcmlt v0.8h, v0.8h, #0.0\nbsl v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, <8 x half> %d, <8 x half> %e) {\n  %c = fcmp olt <8 x half> %a, zeroinitializer\n  %r = select <8 x i1> %c, <8 x half> %d, <8 x half> %e\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp olt <8 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x half> %d, <8 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "fcmpolt",
  "ty": "<16 x half>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmgt v1.8h, v3.8h, v1.8h\nfcmgt v0.8h, v2.8h, v0.8h\nuzp1 v0.16b, v0.16b, v1.16b\nret",
  "giasm": "fcmgt v0.8h, v2.8h, v0.8h\nfcmgt v1.8h, v3.8h, v1.8h\nuzp1 v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <16 x i1> @test(<16 x half> %a, <16 x half> %b) {\n  %r = fcmp olt <16 x half> %a, %b\n  ret <16 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp olt <16 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i1> %r"
 },
 {
  "instr": "fcmpolt",
  "ty": "<16 x half>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmlt v1.8h, v1.8h, #0.0\nfcmlt v0.8h, v0.8h, #0.0\nuzp1 v0.16b, v0.16b, v1.16b\nret",
  "giasm": "fcmlt v0.8h, v0.8h, #0.0\nfcmlt v1.8h, v1.8h, #0.0\nuzp1 v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <16 x i1> @test(<16 x half> %a) {\n  %r = fcmp olt <16 x half> %a, zeroinitializer\n  ret <16 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp olt <16 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i1> %r"
 },
 {
  "instr": "selectfcmpolt",
  "ty": "<16 x half>",
  "variant": "cmp",
  "codesize": 3,
  "thru": 4,
  "lat": 3,
  "sizelat": 3,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmgt v1.8h, v3.8h, v1.8h\nfcmgt v0.8h, v2.8h, v0.8h\nbsl v1.16b, v5.16b, v7.16b\nbsl v0.16b, v4.16b, v6.16b\nret",
  "giasm": "fcmgt v0.8h, v2.8h, v0.8h\nfcmgt v1.8h, v3.8h, v1.8h\nbsl v0.16b, v4.16b, v6.16b\nbsl v1.16b, v5.16b, v7.16b\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, <16 x half> %b, <16 x half> %d, <16 x half> %e) {\n  %c = fcmp olt <16 x half> %a, %b\n  %r = select <16 x i1> %c, <16 x half> %d, <16 x half> %e\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp olt <16 x half> %a, %b\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <16 x i1> %c, <16 x half> %d, <16 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "selectfcmpolt",
  "ty": "<16 x half>",
  "variant": "cmp0",
  "codesize": 3,
  "thru": 4,
  "lat": 3,
  "sizelat": 3,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmlt v1.8h, v1.8h, #0.0\nfcmlt v0.8h, v0.8h, #0.0\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "giasm": "fcmlt v0.8h, v0.8h, #0.0\nfcmlt v1.8h, v1.8h, #0.0\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, <16 x half> %d, <16 x half> %e) {\n  %c = fcmp olt <16 x half> %a, zeroinitializer\n  %r = select <16 x i1> %c, <16 x half> %d, <16 x half> %e\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp olt <16 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <16 x i1> %c, <16 x half> %d, <16 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "fcmpolt",
  "ty": "<2 x float>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fcmgt v0.2s, v1.2s, v0.2s\nret",
  "giasm": "fcmgt v0.2s, v1.2s, v0.2s\nret",
  "ll": "define <2 x i1> @test(<2 x float> %a, <2 x float> %b) {\n  %r = fcmp olt <2 x float> %a, %b\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp olt <2 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "fcmpolt",
  "ty": "<2 x float>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fcmlt v0.2s, v0.2s, #0.0\nret",
  "giasm": "fcmlt v0.2s, v0.2s, #0.0\nret",
  "ll": "define <2 x i1> @test(<2 x float> %a) {\n  %r = fcmp olt <2 x float> %a, zeroinitializer\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp olt <2 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "selectfcmpolt",
  "ty": "<2 x float>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmgt v0.2s, v1.2s, v0.2s\nbsl v0.8b, v2.8b, v3.8b\nret",
  "giasm": "fcmgt v0.2s, v1.2s, v0.2s\nbsl v0.8b, v2.8b, v3.8b\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, <2 x float> %b, <2 x float> %d, <2 x float> %e) {\n  %c = fcmp olt <2 x float> %a, %b\n  %r = select <2 x i1> %c, <2 x float> %d, <2 x float> %e\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp olt <2 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <2 x i1> %c, <2 x float> %d, <2 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "selectfcmpolt",
  "ty": "<2 x float>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmlt v0.2s, v0.2s, #0.0\nbsl v0.8b, v1.8b, v2.8b\nret",
  "giasm": "fcmlt v0.2s, v0.2s, #0.0\nbsl v0.8b, v1.8b, v2.8b\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, <2 x float> %d, <2 x float> %e) {\n  %c = fcmp olt <2 x float> %a, zeroinitializer\n  %r = select <2 x i1> %c, <2 x float> %d, <2 x float> %e\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp olt <2 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <2 x i1> %c, <2 x float> %d, <2 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "fcmpolt",
  "ty": "<4 x float>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmgt v0.4s, v1.4s, v0.4s\nxtn v0.4h, v0.4s\nret",
  "giasm": "fcmgt v0.4s, v1.4s, v0.4s\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x float> %a, <4 x float> %b) {\n  %r = fcmp olt <4 x float> %a, %b\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp olt <4 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "fcmpolt",
  "ty": "<4 x float>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmlt v0.4s, v0.4s, #0.0\nxtn v0.4h, v0.4s\nret",
  "giasm": "fcmlt v0.4s, v0.4s, #0.0\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x float> %a) {\n  %r = fcmp olt <4 x float> %a, zeroinitializer\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp olt <4 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "selectfcmpolt",
  "ty": "<4 x float>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmgt v0.4s, v1.4s, v0.4s\nbsl v0.16b, v2.16b, v3.16b\nret",
  "giasm": "fcmgt v0.4s, v1.4s, v0.4s\nbsl v0.16b, v2.16b, v3.16b\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, <4 x float> %b, <4 x float> %d, <4 x float> %e) {\n  %c = fcmp olt <4 x float> %a, %b\n  %r = select <4 x i1> %c, <4 x float> %d, <4 x float> %e\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp olt <4 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x float> %d, <4 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "selectfcmpolt",
  "ty": "<4 x float>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmlt v0.4s, v0.4s, #0.0\nbsl v0.16b, v1.16b, v2.16b\nret",
  "giasm": "fcmlt v0.4s, v0.4s, #0.0\nbsl v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, <4 x float> %d, <4 x float> %e) {\n  %c = fcmp olt <4 x float> %a, zeroinitializer\n  %r = select <4 x i1> %c, <4 x float> %d, <4 x float> %e\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp olt <4 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x float> %d, <4 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "fcmpolt",
  "ty": "<8 x float>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmgt v1.4s, v3.4s, v1.4s\nfcmgt v0.4s, v2.4s, v0.4s\nuzp1 v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "giasm": "fcmgt v0.4s, v2.4s, v0.4s\nfcmgt v1.4s, v3.4s, v1.4s\nuzp1 v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x float> %a, <8 x float> %b) {\n  %r = fcmp olt <8 x float> %a, %b\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp olt <8 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "fcmpolt",
  "ty": "<8 x float>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmlt v1.4s, v1.4s, #0.0\nfcmlt v0.4s, v0.4s, #0.0\nuzp1 v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "giasm": "fcmlt v0.4s, v0.4s, #0.0\nfcmlt v1.4s, v1.4s, #0.0\nuzp1 v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x float> %a) {\n  %r = fcmp olt <8 x float> %a, zeroinitializer\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp olt <8 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "selectfcmpolt",
  "ty": "<8 x float>",
  "variant": "cmp",
  "codesize": 3,
  "thru": 4,
  "lat": 3,
  "sizelat": 3,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmgt v1.4s, v3.4s, v1.4s\nfcmgt v0.4s, v2.4s, v0.4s\nbsl v1.16b, v5.16b, v7.16b\nbsl v0.16b, v4.16b, v6.16b\nret",
  "giasm": "fcmgt v0.4s, v2.4s, v0.4s\nfcmgt v1.4s, v3.4s, v1.4s\nbsl v0.16b, v4.16b, v6.16b\nbsl v1.16b, v5.16b, v7.16b\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, <8 x float> %b, <8 x float> %d, <8 x float> %e) {\n  %c = fcmp olt <8 x float> %a, %b\n  %r = select <8 x i1> %c, <8 x float> %d, <8 x float> %e\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp olt <8 x float> %a, %b\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <8 x i1> %c, <8 x float> %d, <8 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "selectfcmpolt",
  "ty": "<8 x float>",
  "variant": "cmp0",
  "codesize": 3,
  "thru": 4,
  "lat": 3,
  "sizelat": 3,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmlt v1.4s, v1.4s, #0.0\nfcmlt v0.4s, v0.4s, #0.0\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "giasm": "fcmlt v0.4s, v0.4s, #0.0\nfcmlt v1.4s, v1.4s, #0.0\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, <8 x float> %d, <8 x float> %e) {\n  %c = fcmp olt <8 x float> %a, zeroinitializer\n  %r = select <8 x i1> %c, <8 x float> %d, <8 x float> %e\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp olt <8 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <8 x i1> %c, <8 x float> %d, <8 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "fcmpolt",
  "ty": "<2 x double>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmgt v0.2d, v1.2d, v0.2d\nxtn v0.2s, v0.2d\nret",
  "giasm": "fcmgt v0.2d, v1.2d, v0.2d\nxtn v0.2s, v0.2d\nret",
  "ll": "define <2 x i1> @test(<2 x double> %a, <2 x double> %b) {\n  %r = fcmp olt <2 x double> %a, %b\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp olt <2 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "fcmpolt",
  "ty": "<2 x double>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmlt v0.2d, v0.2d, #0.0\nxtn v0.2s, v0.2d\nret",
  "giasm": "fcmlt v0.2d, v0.2d, #0.0\nxtn v0.2s, v0.2d\nret",
  "ll": "define <2 x i1> @test(<2 x double> %a) {\n  %r = fcmp olt <2 x double> %a, zeroinitializer\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp olt <2 x double> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "selectfcmpolt",
  "ty": "<2 x double>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmgt v0.2d, v1.2d, v0.2d\nbsl v0.16b, v2.16b, v3.16b\nret",
  "giasm": "fcmgt v0.2d, v1.2d, v0.2d\nbsl v0.16b, v2.16b, v3.16b\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, <2 x double> %b, <2 x double> %d, <2 x double> %e) {\n  %c = fcmp olt <2 x double> %a, %b\n  %r = select <2 x i1> %c, <2 x double> %d, <2 x double> %e\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp olt <2 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <2 x i1> %c, <2 x double> %d, <2 x double> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "selectfcmpolt",
  "ty": "<2 x double>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmlt v0.2d, v0.2d, #0.0\nbsl v0.16b, v1.16b, v2.16b\nret",
  "giasm": "fcmlt v0.2d, v0.2d, #0.0\nbsl v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, <2 x double> %d, <2 x double> %e) {\n  %c = fcmp olt <2 x double> %a, zeroinitializer\n  %r = select <2 x i1> %c, <2 x double> %d, <2 x double> %e\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp olt <2 x double> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <2 x i1> %c, <2 x double> %d, <2 x double> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "fcmpolt",
  "ty": "<4 x double>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmgt v1.2d, v3.2d, v1.2d\nfcmgt v0.2d, v2.2d, v0.2d\nuzp1 v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "giasm": "fcmgt v0.2d, v2.2d, v0.2d\nfcmgt v1.2d, v3.2d, v1.2d\nuzp1 v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x double> %a, <4 x double> %b) {\n  %r = fcmp olt <4 x double> %a, %b\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp olt <4 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "fcmpolt",
  "ty": "<4 x double>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmlt v1.2d, v1.2d, #0.0\nfcmlt v0.2d, v0.2d, #0.0\nuzp1 v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "giasm": "fcmlt v0.2d, v0.2d, #0.0\nfcmlt v1.2d, v1.2d, #0.0\nuzp1 v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x double> %a) {\n  %r = fcmp olt <4 x double> %a, zeroinitializer\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp olt <4 x double> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "selectfcmpolt",
  "ty": "<4 x double>",
  "variant": "cmp",
  "codesize": 3,
  "thru": 4,
  "lat": 3,
  "sizelat": 3,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmgt v1.2d, v3.2d, v1.2d\nfcmgt v0.2d, v2.2d, v0.2d\nbsl v1.16b, v5.16b, v7.16b\nbsl v0.16b, v4.16b, v6.16b\nret",
  "giasm": "fcmgt v0.2d, v2.2d, v0.2d\nfcmgt v1.2d, v3.2d, v1.2d\nbsl v0.16b, v4.16b, v6.16b\nbsl v1.16b, v5.16b, v7.16b\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, <4 x double> %b, <4 x double> %d, <4 x double> %e) {\n  %c = fcmp olt <4 x double> %a, %b\n  %r = select <4 x i1> %c, <4 x double> %d, <4 x double> %e\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp olt <4 x double> %a, %b\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <4 x i1> %c, <4 x double> %d, <4 x double> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "selectfcmpolt",
  "ty": "<4 x double>",
  "variant": "cmp0",
  "codesize": 3,
  "thru": 4,
  "lat": 3,
  "sizelat": 3,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmlt v1.2d, v1.2d, #0.0\nfcmlt v0.2d, v0.2d, #0.0\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "giasm": "fcmlt v0.2d, v0.2d, #0.0\nfcmlt v1.2d, v1.2d, #0.0\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, <4 x double> %d, <4 x double> %e) {\n  %c = fcmp olt <4 x double> %a, zeroinitializer\n  %r = select <4 x i1> %c, <4 x double> %d, <4 x double> %e\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp olt <4 x double> %a, zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <4 x i1> %c, <4 x double> %d, <4 x double> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "fcmpole",
  "ty": "half",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp h0, h1\ncset w0, ls\nret",
  "giasm": "fcmp h0, h1\ncset w0, ls\nret",
  "ll": "define i1 @test(half %a, half %b) {\n  %r = fcmp ole half %a, %b\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ole half %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "fcmpole",
  "ty": "half",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp h0, #0.0\ncset w0, ls\nret",
  "giasm": "fcmp h0, #0.0\ncset w0, ls\nret",
  "ll": "define i1 @test(half %a) {\n  %r = fcmp ole half %a, 0.0\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ole half %a, 0xH0000\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "selectfcmpole",
  "ty": "half",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 5,
  "extrasize": 0,
  "asm": "fcmp h0, h1\nfcsel h0, h2, h3, ls\nret",
  "giasm": "fcmp h0, h1\nfmov w8, s2\nfmov w9, s3\ncsel w8, w8, w9, ls\nfmov s0, w8\nret",
  "ll": "define half @test(half %a, half %b, half %d, half %e) {\n  %c = fcmp ole half %a, %b\n  %r = select i1 %c, half %d, half %e\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ole half %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, half %d, half %e\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "selectfcmpole",
  "ty": "half",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 5,
  "extrasize": 0,
  "asm": "fcmp h0, #0.0\nfcsel h0, h1, h2, ls\nret",
  "giasm": "fcmp h0, #0.0\nfmov w8, s1\nfmov w9, s2\ncsel w8, w8, w9, ls\nfmov s0, w8\nret",
  "ll": "define half @test(half %a, half %d, half %e) {\n  %c = fcmp ole half %a, 0.0\n  %r = select i1 %c, half %d, half %e\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ole half %a, 0xH0000\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, half %d, half %e\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "fcmpole",
  "ty": "float",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp s0, s1\ncset w0, ls\nret",
  "giasm": "fcmp s0, s1\ncset w0, ls\nret",
  "ll": "define i1 @test(float %a, float %b) {\n  %r = fcmp ole float %a, %b\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ole float %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "fcmpole",
  "ty": "float",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp s0, #0.0\ncset w0, ls\nret",
  "giasm": "fcmp s0, #0.0\ncset w0, ls\nret",
  "ll": "define i1 @test(float %a) {\n  %r = fcmp ole float %a, 0.0\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ole float %a, 0.000000e+00\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "selectfcmpole",
  "ty": "float",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp s0, s1\nfcsel s0, s2, s3, ls\nret",
  "giasm": "fcmp s0, s1\nfcsel s0, s2, s3, ls\nret",
  "ll": "define float @test(float %a, float %b, float %d, float %e) {\n  %c = fcmp ole float %a, %b\n  %r = select i1 %c, float %d, float %e\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ole float %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, float %d, float %e\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "selectfcmpole",
  "ty": "float",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp s0, #0.0\nfcsel s0, s1, s2, ls\nret",
  "giasm": "fcmp s0, #0.0\nfcsel s0, s1, s2, ls\nret",
  "ll": "define float @test(float %a, float %d, float %e) {\n  %c = fcmp ole float %a, 0.0\n  %r = select i1 %c, float %d, float %e\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ole float %a, 0.000000e+00\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, float %d, float %e\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "fcmpole",
  "ty": "double",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp d0, d1\ncset w0, ls\nret",
  "giasm": "fcmp d0, d1\ncset w0, ls\nret",
  "ll": "define i1 @test(double %a, double %b) {\n  %r = fcmp ole double %a, %b\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ole double %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "fcmpole",
  "ty": "double",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp d0, #0.0\ncset w0, ls\nret",
  "giasm": "fcmp d0, #0.0\ncset w0, ls\nret",
  "ll": "define i1 @test(double %a) {\n  %r = fcmp ole double %a, 0.0\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ole double %a, 0.000000e+00\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "selectfcmpole",
  "ty": "double",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp d0, d1\nfcsel d0, d2, d3, ls\nret",
  "giasm": "fcmp d0, d1\nfcsel d0, d2, d3, ls\nret",
  "ll": "define double @test(double %a, double %b, double %d, double %e) {\n  %c = fcmp ole double %a, %b\n  %r = select i1 %c, double %d, double %e\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ole double %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, double %d, double %e\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "selectfcmpole",
  "ty": "double",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp d0, #0.0\nfcsel d0, d1, d2, ls\nret",
  "giasm": "fcmp d0, #0.0\nfcsel d0, d1, d2, ls\nret",
  "ll": "define double @test(double %a, double %d, double %e) {\n  %c = fcmp ole double %a, 0.0\n  %r = select i1 %c, double %d, double %e\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ole double %a, 0.000000e+00\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, double %d, double %e\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "fcmpole",
  "ty": "<4 x half>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fcmge v0.4h, v1.4h, v0.4h\nret",
  "giasm": "fcmge v0.4h, v1.4h, v0.4h\nret",
  "ll": "define <4 x i1> @test(<4 x half> %a, <4 x half> %b) {\n  %r = fcmp ole <4 x half> %a, %b\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ole <4 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "fcmpole",
  "ty": "<4 x half>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fcmle v0.4h, v0.4h, #0.0\nret",
  "giasm": "fcmle v0.4h, v0.4h, #0.0\nret",
  "ll": "define <4 x i1> @test(<4 x half> %a) {\n  %r = fcmp ole <4 x half> %a, zeroinitializer\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ole <4 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "selectfcmpole",
  "ty": "<4 x half>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmge v0.4h, v1.4h, v0.4h\nbsl v0.8b, v2.8b, v3.8b\nret",
  "giasm": "fcmge v0.4h, v1.4h, v0.4h\nbsl v0.8b, v2.8b, v3.8b\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, <4 x half> %b, <4 x half> %d, <4 x half> %e) {\n  %c = fcmp ole <4 x half> %a, %b\n  %r = select <4 x i1> %c, <4 x half> %d, <4 x half> %e\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ole <4 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x half> %d, <4 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "selectfcmpole",
  "ty": "<4 x half>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmle v0.4h, v0.4h, #0.0\nbsl v0.8b, v1.8b, v2.8b\nret",
  "giasm": "fcmle v0.4h, v0.4h, #0.0\nbsl v0.8b, v1.8b, v2.8b\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, <4 x half> %d, <4 x half> %e) {\n  %c = fcmp ole <4 x half> %a, zeroinitializer\n  %r = select <4 x i1> %c, <4 x half> %d, <4 x half> %e\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ole <4 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x half> %d, <4 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "fcmpole",
  "ty": "<8 x half>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmge v0.8h, v1.8h, v0.8h\nxtn v0.8b, v0.8h\nret",
  "giasm": "fcmge v0.8h, v1.8h, v0.8h\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x half> %a, <8 x half> %b) {\n  %r = fcmp ole <8 x half> %a, %b\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ole <8 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "fcmpole",
  "ty": "<8 x half>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmle v0.8h, v0.8h, #0.0\nxtn v0.8b, v0.8h\nret",
  "giasm": "fcmle v0.8h, v0.8h, #0.0\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x half> %a) {\n  %r = fcmp ole <8 x half> %a, zeroinitializer\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ole <8 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "selectfcmpole",
  "ty": "<8 x half>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmge v0.8h, v1.8h, v0.8h\nbsl v0.16b, v2.16b, v3.16b\nret",
  "giasm": "fcmge v0.8h, v1.8h, v0.8h\nbsl v0.16b, v2.16b, v3.16b\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, <8 x half> %b, <8 x half> %d, <8 x half> %e) {\n  %c = fcmp ole <8 x half> %a, %b\n  %r = select <8 x i1> %c, <8 x half> %d, <8 x half> %e\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ole <8 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x half> %d, <8 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "selectfcmpole",
  "ty": "<8 x half>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmle v0.8h, v0.8h, #0.0\nbsl v0.16b, v1.16b, v2.16b\nret",
  "giasm": "fcmle v0.8h, v0.8h, #0.0\nbsl v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, <8 x half> %d, <8 x half> %e) {\n  %c = fcmp ole <8 x half> %a, zeroinitializer\n  %r = select <8 x i1> %c, <8 x half> %d, <8 x half> %e\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ole <8 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x half> %d, <8 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "fcmpole",
  "ty": "<16 x half>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmge v1.8h, v3.8h, v1.8h\nfcmge v0.8h, v2.8h, v0.8h\nuzp1 v0.16b, v0.16b, v1.16b\nret",
  "giasm": "fcmge v0.8h, v2.8h, v0.8h\nfcmge v1.8h, v3.8h, v1.8h\nuzp1 v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <16 x i1> @test(<16 x half> %a, <16 x half> %b) {\n  %r = fcmp ole <16 x half> %a, %b\n  ret <16 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ole <16 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i1> %r"
 },
 {
  "instr": "fcmpole",
  "ty": "<16 x half>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmle v1.8h, v1.8h, #0.0\nfcmle v0.8h, v0.8h, #0.0\nuzp1 v0.16b, v0.16b, v1.16b\nret",
  "giasm": "fcmle v0.8h, v0.8h, #0.0\nfcmle v1.8h, v1.8h, #0.0\nuzp1 v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <16 x i1> @test(<16 x half> %a) {\n  %r = fcmp ole <16 x half> %a, zeroinitializer\n  ret <16 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ole <16 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i1> %r"
 },
 {
  "instr": "selectfcmpole",
  "ty": "<16 x half>",
  "variant": "cmp",
  "codesize": 3,
  "thru": 4,
  "lat": 3,
  "sizelat": 3,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmge v1.8h, v3.8h, v1.8h\nfcmge v0.8h, v2.8h, v0.8h\nbsl v1.16b, v5.16b, v7.16b\nbsl v0.16b, v4.16b, v6.16b\nret",
  "giasm": "fcmge v0.8h, v2.8h, v0.8h\nfcmge v1.8h, v3.8h, v1.8h\nbsl v0.16b, v4.16b, v6.16b\nbsl v1.16b, v5.16b, v7.16b\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, <16 x half> %b, <16 x half> %d, <16 x half> %e) {\n  %c = fcmp ole <16 x half> %a, %b\n  %r = select <16 x i1> %c, <16 x half> %d, <16 x half> %e\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ole <16 x half> %a, %b\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <16 x i1> %c, <16 x half> %d, <16 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "selectfcmpole",
  "ty": "<16 x half>",
  "variant": "cmp0",
  "codesize": 3,
  "thru": 4,
  "lat": 3,
  "sizelat": 3,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmle v1.8h, v1.8h, #0.0\nfcmle v0.8h, v0.8h, #0.0\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "giasm": "fcmle v0.8h, v0.8h, #0.0\nfcmle v1.8h, v1.8h, #0.0\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, <16 x half> %d, <16 x half> %e) {\n  %c = fcmp ole <16 x half> %a, zeroinitializer\n  %r = select <16 x i1> %c, <16 x half> %d, <16 x half> %e\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ole <16 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <16 x i1> %c, <16 x half> %d, <16 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "fcmpole",
  "ty": "<2 x float>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fcmge v0.2s, v1.2s, v0.2s\nret",
  "giasm": "fcmge v0.2s, v1.2s, v0.2s\nret",
  "ll": "define <2 x i1> @test(<2 x float> %a, <2 x float> %b) {\n  %r = fcmp ole <2 x float> %a, %b\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ole <2 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "fcmpole",
  "ty": "<2 x float>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fcmle v0.2s, v0.2s, #0.0\nret",
  "giasm": "fcmle v0.2s, v0.2s, #0.0\nret",
  "ll": "define <2 x i1> @test(<2 x float> %a) {\n  %r = fcmp ole <2 x float> %a, zeroinitializer\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ole <2 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "selectfcmpole",
  "ty": "<2 x float>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmge v0.2s, v1.2s, v0.2s\nbsl v0.8b, v2.8b, v3.8b\nret",
  "giasm": "fcmge v0.2s, v1.2s, v0.2s\nbsl v0.8b, v2.8b, v3.8b\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, <2 x float> %b, <2 x float> %d, <2 x float> %e) {\n  %c = fcmp ole <2 x float> %a, %b\n  %r = select <2 x i1> %c, <2 x float> %d, <2 x float> %e\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ole <2 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <2 x i1> %c, <2 x float> %d, <2 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "selectfcmpole",
  "ty": "<2 x float>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmle v0.2s, v0.2s, #0.0\nbsl v0.8b, v1.8b, v2.8b\nret",
  "giasm": "fcmle v0.2s, v0.2s, #0.0\nbsl v0.8b, v1.8b, v2.8b\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, <2 x float> %d, <2 x float> %e) {\n  %c = fcmp ole <2 x float> %a, zeroinitializer\n  %r = select <2 x i1> %c, <2 x float> %d, <2 x float> %e\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ole <2 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <2 x i1> %c, <2 x float> %d, <2 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "fcmpole",
  "ty": "<4 x float>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmge v0.4s, v1.4s, v0.4s\nxtn v0.4h, v0.4s\nret",
  "giasm": "fcmge v0.4s, v1.4s, v0.4s\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x float> %a, <4 x float> %b) {\n  %r = fcmp ole <4 x float> %a, %b\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ole <4 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "fcmpole",
  "ty": "<4 x float>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmle v0.4s, v0.4s, #0.0\nxtn v0.4h, v0.4s\nret",
  "giasm": "fcmle v0.4s, v0.4s, #0.0\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x float> %a) {\n  %r = fcmp ole <4 x float> %a, zeroinitializer\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ole <4 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "selectfcmpole",
  "ty": "<4 x float>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmge v0.4s, v1.4s, v0.4s\nbsl v0.16b, v2.16b, v3.16b\nret",
  "giasm": "fcmge v0.4s, v1.4s, v0.4s\nbsl v0.16b, v2.16b, v3.16b\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, <4 x float> %b, <4 x float> %d, <4 x float> %e) {\n  %c = fcmp ole <4 x float> %a, %b\n  %r = select <4 x i1> %c, <4 x float> %d, <4 x float> %e\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ole <4 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x float> %d, <4 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "selectfcmpole",
  "ty": "<4 x float>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmle v0.4s, v0.4s, #0.0\nbsl v0.16b, v1.16b, v2.16b\nret",
  "giasm": "fcmle v0.4s, v0.4s, #0.0\nbsl v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, <4 x float> %d, <4 x float> %e) {\n  %c = fcmp ole <4 x float> %a, zeroinitializer\n  %r = select <4 x i1> %c, <4 x float> %d, <4 x float> %e\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ole <4 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x float> %d, <4 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "fcmpole",
  "ty": "<8 x float>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmge v1.4s, v3.4s, v1.4s\nfcmge v0.4s, v2.4s, v0.4s\nuzp1 v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "giasm": "fcmge v0.4s, v2.4s, v0.4s\nfcmge v1.4s, v3.4s, v1.4s\nuzp1 v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x float> %a, <8 x float> %b) {\n  %r = fcmp ole <8 x float> %a, %b\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ole <8 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "fcmpole",
  "ty": "<8 x float>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmle v1.4s, v1.4s, #0.0\nfcmle v0.4s, v0.4s, #0.0\nuzp1 v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "giasm": "fcmle v0.4s, v0.4s, #0.0\nfcmle v1.4s, v1.4s, #0.0\nuzp1 v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x float> %a) {\n  %r = fcmp ole <8 x float> %a, zeroinitializer\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ole <8 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "selectfcmpole",
  "ty": "<8 x float>",
  "variant": "cmp",
  "codesize": 3,
  "thru": 4,
  "lat": 3,
  "sizelat": 3,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmge v1.4s, v3.4s, v1.4s\nfcmge v0.4s, v2.4s, v0.4s\nbsl v1.16b, v5.16b, v7.16b\nbsl v0.16b, v4.16b, v6.16b\nret",
  "giasm": "fcmge v0.4s, v2.4s, v0.4s\nfcmge v1.4s, v3.4s, v1.4s\nbsl v0.16b, v4.16b, v6.16b\nbsl v1.16b, v5.16b, v7.16b\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, <8 x float> %b, <8 x float> %d, <8 x float> %e) {\n  %c = fcmp ole <8 x float> %a, %b\n  %r = select <8 x i1> %c, <8 x float> %d, <8 x float> %e\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ole <8 x float> %a, %b\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <8 x i1> %c, <8 x float> %d, <8 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "selectfcmpole",
  "ty": "<8 x float>",
  "variant": "cmp0",
  "codesize": 3,
  "thru": 4,
  "lat": 3,
  "sizelat": 3,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmle v1.4s, v1.4s, #0.0\nfcmle v0.4s, v0.4s, #0.0\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "giasm": "fcmle v0.4s, v0.4s, #0.0\nfcmle v1.4s, v1.4s, #0.0\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, <8 x float> %d, <8 x float> %e) {\n  %c = fcmp ole <8 x float> %a, zeroinitializer\n  %r = select <8 x i1> %c, <8 x float> %d, <8 x float> %e\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ole <8 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <8 x i1> %c, <8 x float> %d, <8 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "fcmpole",
  "ty": "<2 x double>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmge v0.2d, v1.2d, v0.2d\nxtn v0.2s, v0.2d\nret",
  "giasm": "fcmge v0.2d, v1.2d, v0.2d\nxtn v0.2s, v0.2d\nret",
  "ll": "define <2 x i1> @test(<2 x double> %a, <2 x double> %b) {\n  %r = fcmp ole <2 x double> %a, %b\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ole <2 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "fcmpole",
  "ty": "<2 x double>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmle v0.2d, v0.2d, #0.0\nxtn v0.2s, v0.2d\nret",
  "giasm": "fcmle v0.2d, v0.2d, #0.0\nxtn v0.2s, v0.2d\nret",
  "ll": "define <2 x i1> @test(<2 x double> %a) {\n  %r = fcmp ole <2 x double> %a, zeroinitializer\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ole <2 x double> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "selectfcmpole",
  "ty": "<2 x double>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmge v0.2d, v1.2d, v0.2d\nbsl v0.16b, v2.16b, v3.16b\nret",
  "giasm": "fcmge v0.2d, v1.2d, v0.2d\nbsl v0.16b, v2.16b, v3.16b\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, <2 x double> %b, <2 x double> %d, <2 x double> %e) {\n  %c = fcmp ole <2 x double> %a, %b\n  %r = select <2 x i1> %c, <2 x double> %d, <2 x double> %e\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ole <2 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <2 x i1> %c, <2 x double> %d, <2 x double> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "selectfcmpole",
  "ty": "<2 x double>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmle v0.2d, v0.2d, #0.0\nbsl v0.16b, v1.16b, v2.16b\nret",
  "giasm": "fcmle v0.2d, v0.2d, #0.0\nbsl v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, <2 x double> %d, <2 x double> %e) {\n  %c = fcmp ole <2 x double> %a, zeroinitializer\n  %r = select <2 x i1> %c, <2 x double> %d, <2 x double> %e\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ole <2 x double> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <2 x i1> %c, <2 x double> %d, <2 x double> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "fcmpole",
  "ty": "<4 x double>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmge v1.2d, v3.2d, v1.2d\nfcmge v0.2d, v2.2d, v0.2d\nuzp1 v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "giasm": "fcmge v0.2d, v2.2d, v0.2d\nfcmge v1.2d, v3.2d, v1.2d\nuzp1 v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x double> %a, <4 x double> %b) {\n  %r = fcmp ole <4 x double> %a, %b\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ole <4 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "fcmpole",
  "ty": "<4 x double>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmle v1.2d, v1.2d, #0.0\nfcmle v0.2d, v0.2d, #0.0\nuzp1 v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "giasm": "fcmle v0.2d, v0.2d, #0.0\nfcmle v1.2d, v1.2d, #0.0\nuzp1 v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x double> %a) {\n  %r = fcmp ole <4 x double> %a, zeroinitializer\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ole <4 x double> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "selectfcmpole",
  "ty": "<4 x double>",
  "variant": "cmp",
  "codesize": 3,
  "thru": 4,
  "lat": 3,
  "sizelat": 3,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmge v1.2d, v3.2d, v1.2d\nfcmge v0.2d, v2.2d, v0.2d\nbsl v1.16b, v5.16b, v7.16b\nbsl v0.16b, v4.16b, v6.16b\nret",
  "giasm": "fcmge v0.2d, v2.2d, v0.2d\nfcmge v1.2d, v3.2d, v1.2d\nbsl v0.16b, v4.16b, v6.16b\nbsl v1.16b, v5.16b, v7.16b\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, <4 x double> %b, <4 x double> %d, <4 x double> %e) {\n  %c = fcmp ole <4 x double> %a, %b\n  %r = select <4 x i1> %c, <4 x double> %d, <4 x double> %e\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ole <4 x double> %a, %b\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <4 x i1> %c, <4 x double> %d, <4 x double> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "selectfcmpole",
  "ty": "<4 x double>",
  "variant": "cmp0",
  "codesize": 3,
  "thru": 4,
  "lat": 3,
  "sizelat": 3,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmle v1.2d, v1.2d, #0.0\nfcmle v0.2d, v0.2d, #0.0\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "giasm": "fcmle v0.2d, v0.2d, #0.0\nfcmle v1.2d, v1.2d, #0.0\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, <4 x double> %d, <4 x double> %e) {\n  %c = fcmp ole <4 x double> %a, zeroinitializer\n  %r = select <4 x i1> %c, <4 x double> %d, <4 x double> %e\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ole <4 x double> %a, zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <4 x i1> %c, <4 x double> %d, <4 x double> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "fcmpone",
  "ty": "half",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmp h0, h1\ncset w8, mi\ncsinc w0, w8, wzr, le\nret",
  "giasm": "fcmp h0, h1\ncset w8, mi\ncset w9, gt\norr w0, w8, w9\nret",
  "ll": "define i1 @test(half %a, half %b) {\n  %r = fcmp one half %a, %b\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp one half %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "fcmpone",
  "ty": "half",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmp h0, #0.0\ncset w8, mi\ncsinc w0, w8, wzr, le\nret",
  "giasm": "fcmp h0, #0.0\ncset w8, mi\ncset w9, gt\norr w0, w8, w9\nret",
  "ll": "define i1 @test(half %a) {\n  %r = fcmp one half %a, 0.0\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp one half %a, 0xH0000\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "selectfcmpone",
  "ty": "half",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 3,
  "gisize": 9,
  "extrasize": 0,
  "asm": "fcmp h0, h1\nfcsel h0, h2, h3, mi\nfcsel h0, h2, h0, gt\nret",
  "giasm": "fcmp h0, h1\nfmov w10, s3\ncset w8, mi\ncset w9, gt\norr w8, w8, w9\nfmov w9, s2\ntst w8, #0x1\ncsel w8, w9, w10, ne\nfmov s0, w8\nret",
  "ll": "define half @test(half %a, half %b, half %d, half %e) {\n  %c = fcmp one half %a, %b\n  %r = select i1 %c, half %d, half %e\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp one half %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, half %d, half %e\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "selectfcmpone",
  "ty": "half",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 3,
  "gisize": 9,
  "extrasize": 0,
  "asm": "fcmp h0, #0.0\nfcsel h0, h1, h2, mi\nfcsel h0, h1, h0, gt\nret",
  "giasm": "fcmp h0, #0.0\nfmov w10, s2\ncset w8, mi\ncset w9, gt\norr w8, w8, w9\nfmov w9, s1\ntst w8, #0x1\ncsel w8, w9, w10, ne\nfmov s0, w8\nret",
  "ll": "define half @test(half %a, half %d, half %e) {\n  %c = fcmp one half %a, 0.0\n  %r = select i1 %c, half %d, half %e\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp one half %a, 0xH0000\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, half %d, half %e\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "fcmpone",
  "ty": "float",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmp s0, s1\ncset w8, mi\ncsinc w0, w8, wzr, le\nret",
  "giasm": "fcmp s0, s1\ncset w8, mi\ncset w9, gt\norr w0, w8, w9\nret",
  "ll": "define i1 @test(float %a, float %b) {\n  %r = fcmp one float %a, %b\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp one float %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "fcmpone",
  "ty": "float",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmp s0, #0.0\ncset w8, mi\ncsinc w0, w8, wzr, le\nret",
  "giasm": "fcmp s0, #0.0\ncset w8, mi\ncset w9, gt\norr w0, w8, w9\nret",
  "ll": "define i1 @test(float %a) {\n  %r = fcmp one float %a, 0.0\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp one float %a, 0.000000e+00\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "selectfcmpone",
  "ty": "float",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 3,
  "gisize": 6,
  "extrasize": 0,
  "asm": "fcmp s0, s1\nfcsel s0, s2, s3, mi\nfcsel s0, s2, s0, gt\nret",
  "giasm": "fcmp s0, s1\ncset w8, mi\ncset w9, gt\norr w8, w8, w9\ntst w8, #0x1\nfcsel s0, s2, s3, ne\nret",
  "ll": "define float @test(float %a, float %b, float %d, float %e) {\n  %c = fcmp one float %a, %b\n  %r = select i1 %c, float %d, float %e\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp one float %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, float %d, float %e\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "selectfcmpone",
  "ty": "float",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 3,
  "gisize": 6,
  "extrasize": 0,
  "asm": "fcmp s0, #0.0\nfcsel s0, s1, s2, mi\nfcsel s0, s1, s0, gt\nret",
  "giasm": "fcmp s0, #0.0\ncset w8, mi\ncset w9, gt\norr w8, w8, w9\ntst w8, #0x1\nfcsel s0, s1, s2, ne\nret",
  "ll": "define float @test(float %a, float %d, float %e) {\n  %c = fcmp one float %a, 0.0\n  %r = select i1 %c, float %d, float %e\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp one float %a, 0.000000e+00\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, float %d, float %e\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "fcmpone",
  "ty": "double",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmp d0, d1\ncset w8, mi\ncsinc w0, w8, wzr, le\nret",
  "giasm": "fcmp d0, d1\ncset w8, mi\ncset w9, gt\norr w0, w8, w9\nret",
  "ll": "define i1 @test(double %a, double %b) {\n  %r = fcmp one double %a, %b\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp one double %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "fcmpone",
  "ty": "double",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmp d0, #0.0\ncset w8, mi\ncsinc w0, w8, wzr, le\nret",
  "giasm": "fcmp d0, #0.0\ncset w8, mi\ncset w9, gt\norr w0, w8, w9\nret",
  "ll": "define i1 @test(double %a) {\n  %r = fcmp one double %a, 0.0\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp one double %a, 0.000000e+00\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "selectfcmpone",
  "ty": "double",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 3,
  "gisize": 6,
  "extrasize": 0,
  "asm": "fcmp d0, d1\nfcsel d0, d2, d3, mi\nfcsel d0, d2, d0, gt\nret",
  "giasm": "fcmp d0, d1\ncset w8, mi\ncset w9, gt\norr w8, w8, w9\ntst w8, #0x1\nfcsel d0, d2, d3, ne\nret",
  "ll": "define double @test(double %a, double %b, double %d, double %e) {\n  %c = fcmp one double %a, %b\n  %r = select i1 %c, double %d, double %e\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp one double %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, double %d, double %e\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "selectfcmpone",
  "ty": "double",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 3,
  "gisize": 6,
  "extrasize": 0,
  "asm": "fcmp d0, #0.0\nfcsel d0, d1, d2, mi\nfcsel d0, d1, d0, gt\nret",
  "giasm": "fcmp d0, #0.0\ncset w8, mi\ncset w9, gt\norr w8, w8, w9\ntst w8, #0x1\nfcsel d0, d1, d2, ne\nret",
  "ll": "define double @test(double %a, double %d, double %e) {\n  %c = fcmp one double %a, 0.0\n  %r = select i1 %c, double %d, double %e\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp one double %a, 0.000000e+00\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, double %d, double %e\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "fcmpone",
  "ty": "<4 x half>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmgt v2.4h, v0.4h, v1.4h\nfcmgt v0.4h, v1.4h, v0.4h\norr v0.8b, v0.8b, v2.8b\nret",
  "giasm": "fcmgt v2.4h, v0.4h, v1.4h\nfcmgt v0.4h, v1.4h, v0.4h\norr v0.8b, v0.8b, v2.8b\nret",
  "ll": "define <4 x i1> @test(<4 x half> %a, <4 x half> %b) {\n  %r = fcmp one <4 x half> %a, %b\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp one <4 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "fcmpone",
  "ty": "<4 x half>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmgt v1.4h, v0.4h, #0.0\nfcmlt v0.4h, v0.4h, #0.0\norr v0.8b, v0.8b, v1.8b\nret",
  "giasm": "fcmgt v1.4h, v0.4h, #0.0\nfcmlt v0.4h, v0.4h, #0.0\norr v0.8b, v0.8b, v1.8b\nret",
  "ll": "define <4 x i1> @test(<4 x half> %a) {\n  %r = fcmp one <4 x half> %a, zeroinitializer\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp one <4 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "selectfcmpone",
  "ty": "<4 x half>",
  "variant": "cmp",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmgt v4.4h, v0.4h, v1.4h\nfcmgt v0.4h, v1.4h, v0.4h\norr v0.8b, v0.8b, v4.8b\nbsl v0.8b, v2.8b, v3.8b\nret",
  "giasm": "fcmgt v4.4h, v0.4h, v1.4h\nfcmgt v0.4h, v1.4h, v0.4h\norr v0.8b, v0.8b, v4.8b\nbsl v0.8b, v2.8b, v3.8b\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, <4 x half> %b, <4 x half> %d, <4 x half> %e) {\n  %c = fcmp one <4 x half> %a, %b\n  %r = select <4 x i1> %c, <4 x half> %d, <4 x half> %e\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp one <4 x half> %a, %b\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <4 x i1> %c, <4 x half> %d, <4 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "selectfcmpone",
  "ty": "<4 x half>",
  "variant": "cmp0",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmgt v3.4h, v0.4h, #0.0\nfcmlt v0.4h, v0.4h, #0.0\norr v0.8b, v0.8b, v3.8b\nbsl v0.8b, v1.8b, v2.8b\nret",
  "giasm": "fcmgt v3.4h, v0.4h, #0.0\nfcmlt v0.4h, v0.4h, #0.0\norr v0.8b, v0.8b, v3.8b\nbsl v0.8b, v1.8b, v2.8b\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, <4 x half> %d, <4 x half> %e) {\n  %c = fcmp one <4 x half> %a, zeroinitializer\n  %r = select <4 x i1> %c, <4 x half> %d, <4 x half> %e\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp one <4 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <4 x i1> %c, <4 x half> %d, <4 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "fcmpone",
  "ty": "<8 x half>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmgt v2.8h, v0.8h, v1.8h\nfcmgt v0.8h, v1.8h, v0.8h\norr v0.16b, v0.16b, v2.16b\nxtn v0.8b, v0.8h\nret",
  "giasm": "fcmgt v2.8h, v0.8h, v1.8h\nfcmgt v0.8h, v1.8h, v0.8h\norr v0.16b, v0.16b, v2.16b\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x half> %a, <8 x half> %b) {\n  %r = fcmp one <8 x half> %a, %b\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp one <8 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "fcmpone",
  "ty": "<8 x half>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmgt v1.8h, v0.8h, #0.0\nfcmlt v0.8h, v0.8h, #0.0\norr v0.16b, v0.16b, v1.16b\nxtn v0.8b, v0.8h\nret",
  "giasm": "fcmgt v1.8h, v0.8h, #0.0\nfcmlt v0.8h, v0.8h, #0.0\norr v0.16b, v0.16b, v1.16b\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x half> %a) {\n  %r = fcmp one <8 x half> %a, zeroinitializer\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp one <8 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "selectfcmpone",
  "ty": "<8 x half>",
  "variant": "cmp",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmgt v4.8h, v0.8h, v1.8h\nfcmgt v0.8h, v1.8h, v0.8h\norr v0.16b, v0.16b, v4.16b\nbsl v0.16b, v2.16b, v3.16b\nret",
  "giasm": "fcmgt v4.8h, v0.8h, v1.8h\nfcmgt v0.8h, v1.8h, v0.8h\norr v0.16b, v0.16b, v4.16b\nbsl v0.16b, v2.16b, v3.16b\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, <8 x half> %b, <8 x half> %d, <8 x half> %e) {\n  %c = fcmp one <8 x half> %a, %b\n  %r = select <8 x i1> %c, <8 x half> %d, <8 x half> %e\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp one <8 x half> %a, %b\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <8 x i1> %c, <8 x half> %d, <8 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "selectfcmpone",
  "ty": "<8 x half>",
  "variant": "cmp0",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmgt v3.8h, v0.8h, #0.0\nfcmlt v0.8h, v0.8h, #0.0\norr v0.16b, v0.16b, v3.16b\nbsl v0.16b, v1.16b, v2.16b\nret",
  "giasm": "fcmgt v3.8h, v0.8h, #0.0\nfcmlt v0.8h, v0.8h, #0.0\norr v0.16b, v0.16b, v3.16b\nbsl v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, <8 x half> %d, <8 x half> %e) {\n  %c = fcmp one <8 x half> %a, zeroinitializer\n  %r = select <8 x i1> %c, <8 x half> %d, <8 x half> %e\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp one <8 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <8 x i1> %c, <8 x half> %d, <8 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "fcmpone",
  "ty": "<16 x half>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 7,
  "gisize": 7,
  "extrasize": 0,
  "asm": "fcmgt v4.8h, v1.8h, v3.8h\nfcmgt v1.8h, v3.8h, v1.8h\nfcmgt v3.8h, v0.8h, v2.8h\nfcmgt v0.8h, v2.8h, v0.8h\norr v1.16b, v1.16b, v4.16b\norr v0.16b, v0.16b, v3.16b\nuzp1 v0.16b, v0.16b, v1.16b\nret",
  "giasm": "fcmgt v4.8h, v0.8h, v2.8h\nfcmgt v0.8h, v2.8h, v0.8h\nfcmgt v2.8h, v1.8h, v3.8h\nfcmgt v1.8h, v3.8h, v1.8h\norr v0.16b, v0.16b, v4.16b\norr v1.16b, v1.16b, v2.16b\nuzp1 v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <16 x i1> @test(<16 x half> %a, <16 x half> %b) {\n  %r = fcmp one <16 x half> %a, %b\n  ret <16 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp one <16 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i1> %r"
 },
 {
  "instr": "fcmpone",
  "ty": "<16 x half>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 7,
  "gisize": 7,
  "extrasize": 0,
  "asm": "fcmgt v2.8h, v1.8h, #0.0\nfcmlt v1.8h, v1.8h, #0.0\nfcmgt v3.8h, v0.8h, #0.0\nfcmlt v0.8h, v0.8h, #0.0\norr v1.16b, v1.16b, v2.16b\norr v0.16b, v0.16b, v3.16b\nuzp1 v0.16b, v0.16b, v1.16b\nret",
  "giasm": "fcmgt v2.8h, v0.8h, #0.0\nfcmlt v0.8h, v0.8h, #0.0\nfcmgt v3.8h, v1.8h, #0.0\nfcmlt v1.8h, v1.8h, #0.0\norr v0.16b, v0.16b, v2.16b\norr v1.16b, v1.16b, v3.16b\nuzp1 v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <16 x i1> @test(<16 x half> %a) {\n  %r = fcmp one <16 x half> %a, zeroinitializer\n  ret <16 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp one <16 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i1> %r"
 },
 {
  "instr": "selectfcmpone",
  "ty": "<16 x half>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 46,
  "lat": 2,
  "sizelat": 2,
  "size": 8,
  "gisize": 8,
  "extrasize": 0,
  "asm": "fcmgt v16.8h, v1.8h, v3.8h\nfcmgt v1.8h, v3.8h, v1.8h\nfcmgt v3.8h, v0.8h, v2.8h\nfcmgt v0.8h, v2.8h, v0.8h\norr v1.16b, v1.16b, v16.16b\norr v0.16b, v0.16b, v3.16b\nbsl v1.16b, v5.16b, v7.16b\nbsl v0.16b, v4.16b, v6.16b\nret",
  "giasm": "fcmgt v16.8h, v0.8h, v2.8h\nfcmgt v0.8h, v2.8h, v0.8h\nfcmgt v2.8h, v1.8h, v3.8h\nfcmgt v1.8h, v3.8h, v1.8h\norr v0.16b, v0.16b, v16.16b\norr v1.16b, v1.16b, v2.16b\nbsl v0.16b, v4.16b, v6.16b\nbsl v1.16b, v5.16b, v7.16b\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, <16 x half> %b, <16 x half> %d, <16 x half> %e) {\n  %c = fcmp one <16 x half> %a, %b\n  %r = select <16 x i1> %c, <16 x half> %d, <16 x half> %e\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp one <16 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <16 x i1> %c, <16 x half> %d, <16 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "selectfcmpone",
  "ty": "<16 x half>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 46,
  "lat": 2,
  "sizelat": 2,
  "size": 8,
  "gisize": 8,
  "extrasize": 0,
  "asm": "fcmgt v6.8h, v1.8h, #0.0\nfcmlt v1.8h, v1.8h, #0.0\nfcmgt v7.8h, v0.8h, #0.0\nfcmlt v0.8h, v0.8h, #0.0\norr v1.16b, v1.16b, v6.16b\norr v0.16b, v0.16b, v7.16b\nbsl v1.16b, v3.16b, v5.16b\nbsl v0.16b, v2.16b, v4.16b\nret",
  "giasm": "fcmgt v6.8h, v0.8h, #0.0\nfcmlt v0.8h, v0.8h, #0.0\nfcmgt v7.8h, v1.8h, #0.0\nfcmlt v1.8h, v1.8h, #0.0\norr v0.16b, v0.16b, v6.16b\norr v1.16b, v1.16b, v7.16b\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, <16 x half> %d, <16 x half> %e) {\n  %c = fcmp one <16 x half> %a, zeroinitializer\n  %r = select <16 x i1> %c, <16 x half> %d, <16 x half> %e\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp one <16 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <16 x i1> %c, <16 x half> %d, <16 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "fcmpone",
  "ty": "<2 x float>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmgt v2.2s, v0.2s, v1.2s\nfcmgt v0.2s, v1.2s, v0.2s\norr v0.8b, v0.8b, v2.8b\nret",
  "giasm": "fcmgt v2.2s, v0.2s, v1.2s\nfcmgt v0.2s, v1.2s, v0.2s\norr v0.8b, v0.8b, v2.8b\nret",
  "ll": "define <2 x i1> @test(<2 x float> %a, <2 x float> %b) {\n  %r = fcmp one <2 x float> %a, %b\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp one <2 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "fcmpone",
  "ty": "<2 x float>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmgt v1.2s, v0.2s, #0.0\nfcmlt v0.2s, v0.2s, #0.0\norr v0.8b, v0.8b, v1.8b\nret",
  "giasm": "fcmgt v1.2s, v0.2s, #0.0\nfcmlt v0.2s, v0.2s, #0.0\norr v0.8b, v0.8b, v1.8b\nret",
  "ll": "define <2 x i1> @test(<2 x float> %a) {\n  %r = fcmp one <2 x float> %a, zeroinitializer\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp one <2 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "selectfcmpone",
  "ty": "<2 x float>",
  "variant": "cmp",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmgt v4.2s, v0.2s, v1.2s\nfcmgt v0.2s, v1.2s, v0.2s\norr v0.8b, v0.8b, v4.8b\nbsl v0.8b, v2.8b, v3.8b\nret",
  "giasm": "fcmgt v4.2s, v0.2s, v1.2s\nfcmgt v0.2s, v1.2s, v0.2s\norr v0.8b, v0.8b, v4.8b\nbsl v0.8b, v2.8b, v3.8b\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, <2 x float> %b, <2 x float> %d, <2 x float> %e) {\n  %c = fcmp one <2 x float> %a, %b\n  %r = select <2 x i1> %c, <2 x float> %d, <2 x float> %e\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp one <2 x float> %a, %b\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <2 x i1> %c, <2 x float> %d, <2 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "selectfcmpone",
  "ty": "<2 x float>",
  "variant": "cmp0",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmgt v3.2s, v0.2s, #0.0\nfcmlt v0.2s, v0.2s, #0.0\norr v0.8b, v0.8b, v3.8b\nbsl v0.8b, v1.8b, v2.8b\nret",
  "giasm": "fcmgt v3.2s, v0.2s, #0.0\nfcmlt v0.2s, v0.2s, #0.0\norr v0.8b, v0.8b, v3.8b\nbsl v0.8b, v1.8b, v2.8b\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, <2 x float> %d, <2 x float> %e) {\n  %c = fcmp one <2 x float> %a, zeroinitializer\n  %r = select <2 x i1> %c, <2 x float> %d, <2 x float> %e\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp one <2 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <2 x i1> %c, <2 x float> %d, <2 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "fcmpone",
  "ty": "<4 x float>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmgt v2.4s, v0.4s, v1.4s\nfcmgt v0.4s, v1.4s, v0.4s\norr v0.16b, v0.16b, v2.16b\nxtn v0.4h, v0.4s\nret",
  "giasm": "fcmgt v2.4s, v0.4s, v1.4s\nfcmgt v0.4s, v1.4s, v0.4s\norr v0.16b, v0.16b, v2.16b\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x float> %a, <4 x float> %b) {\n  %r = fcmp one <4 x float> %a, %b\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp one <4 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "fcmpone",
  "ty": "<4 x float>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmgt v1.4s, v0.4s, #0.0\nfcmlt v0.4s, v0.4s, #0.0\norr v0.16b, v0.16b, v1.16b\nxtn v0.4h, v0.4s\nret",
  "giasm": "fcmgt v1.4s, v0.4s, #0.0\nfcmlt v0.4s, v0.4s, #0.0\norr v0.16b, v0.16b, v1.16b\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x float> %a) {\n  %r = fcmp one <4 x float> %a, zeroinitializer\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp one <4 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "selectfcmpone",
  "ty": "<4 x float>",
  "variant": "cmp",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmgt v4.4s, v0.4s, v1.4s\nfcmgt v0.4s, v1.4s, v0.4s\norr v0.16b, v0.16b, v4.16b\nbsl v0.16b, v2.16b, v3.16b\nret",
  "giasm": "fcmgt v4.4s, v0.4s, v1.4s\nfcmgt v0.4s, v1.4s, v0.4s\norr v0.16b, v0.16b, v4.16b\nbsl v0.16b, v2.16b, v3.16b\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, <4 x float> %b, <4 x float> %d, <4 x float> %e) {\n  %c = fcmp one <4 x float> %a, %b\n  %r = select <4 x i1> %c, <4 x float> %d, <4 x float> %e\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp one <4 x float> %a, %b\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <4 x i1> %c, <4 x float> %d, <4 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "selectfcmpone",
  "ty": "<4 x float>",
  "variant": "cmp0",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmgt v3.4s, v0.4s, #0.0\nfcmlt v0.4s, v0.4s, #0.0\norr v0.16b, v0.16b, v3.16b\nbsl v0.16b, v1.16b, v2.16b\nret",
  "giasm": "fcmgt v3.4s, v0.4s, #0.0\nfcmlt v0.4s, v0.4s, #0.0\norr v0.16b, v0.16b, v3.16b\nbsl v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, <4 x float> %d, <4 x float> %e) {\n  %c = fcmp one <4 x float> %a, zeroinitializer\n  %r = select <4 x i1> %c, <4 x float> %d, <4 x float> %e\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp one <4 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <4 x i1> %c, <4 x float> %d, <4 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "fcmpone",
  "ty": "<8 x float>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 8,
  "gisize": 8,
  "extrasize": 0,
  "asm": "fcmgt v4.4s, v1.4s, v3.4s\nfcmgt v1.4s, v3.4s, v1.4s\nfcmgt v3.4s, v0.4s, v2.4s\nfcmgt v0.4s, v2.4s, v0.4s\norr v1.16b, v1.16b, v4.16b\norr v0.16b, v0.16b, v3.16b\nuzp1 v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "giasm": "fcmgt v4.4s, v0.4s, v2.4s\nfcmgt v0.4s, v2.4s, v0.4s\nfcmgt v2.4s, v1.4s, v3.4s\nfcmgt v1.4s, v3.4s, v1.4s\norr v0.16b, v0.16b, v4.16b\norr v1.16b, v1.16b, v2.16b\nuzp1 v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x float> %a, <8 x float> %b) {\n  %r = fcmp one <8 x float> %a, %b\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp one <8 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "fcmpone",
  "ty": "<8 x float>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 8,
  "gisize": 8,
  "extrasize": 0,
  "asm": "fcmgt v2.4s, v1.4s, #0.0\nfcmlt v1.4s, v1.4s, #0.0\nfcmgt v3.4s, v0.4s, #0.0\nfcmlt v0.4s, v0.4s, #0.0\norr v1.16b, v1.16b, v2.16b\norr v0.16b, v0.16b, v3.16b\nuzp1 v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "giasm": "fcmgt v2.4s, v0.4s, #0.0\nfcmlt v0.4s, v0.4s, #0.0\nfcmgt v3.4s, v1.4s, #0.0\nfcmlt v1.4s, v1.4s, #0.0\norr v0.16b, v0.16b, v2.16b\norr v1.16b, v1.16b, v3.16b\nuzp1 v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x float> %a) {\n  %r = fcmp one <8 x float> %a, zeroinitializer\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp one <8 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "selectfcmpone",
  "ty": "<8 x float>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 22,
  "lat": 2,
  "sizelat": 2,
  "size": 8,
  "gisize": 8,
  "extrasize": 0,
  "asm": "fcmgt v16.4s, v1.4s, v3.4s\nfcmgt v1.4s, v3.4s, v1.4s\nfcmgt v3.4s, v0.4s, v2.4s\nfcmgt v0.4s, v2.4s, v0.4s\norr v1.16b, v1.16b, v16.16b\norr v0.16b, v0.16b, v3.16b\nbsl v1.16b, v5.16b, v7.16b\nbsl v0.16b, v4.16b, v6.16b\nret",
  "giasm": "fcmgt v16.4s, v0.4s, v2.4s\nfcmgt v0.4s, v2.4s, v0.4s\nfcmgt v2.4s, v1.4s, v3.4s\nfcmgt v1.4s, v3.4s, v1.4s\norr v0.16b, v0.16b, v16.16b\norr v1.16b, v1.16b, v2.16b\nbsl v0.16b, v4.16b, v6.16b\nbsl v1.16b, v5.16b, v7.16b\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, <8 x float> %b, <8 x float> %d, <8 x float> %e) {\n  %c = fcmp one <8 x float> %a, %b\n  %r = select <8 x i1> %c, <8 x float> %d, <8 x float> %e\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp one <8 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x float> %d, <8 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "selectfcmpone",
  "ty": "<8 x float>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 22,
  "lat": 2,
  "sizelat": 2,
  "size": 8,
  "gisize": 8,
  "extrasize": 0,
  "asm": "fcmgt v6.4s, v1.4s, #0.0\nfcmlt v1.4s, v1.4s, #0.0\nfcmgt v7.4s, v0.4s, #0.0\nfcmlt v0.4s, v0.4s, #0.0\norr v1.16b, v1.16b, v6.16b\norr v0.16b, v0.16b, v7.16b\nbsl v1.16b, v3.16b, v5.16b\nbsl v0.16b, v2.16b, v4.16b\nret",
  "giasm": "fcmgt v6.4s, v0.4s, #0.0\nfcmlt v0.4s, v0.4s, #0.0\nfcmgt v7.4s, v1.4s, #0.0\nfcmlt v1.4s, v1.4s, #0.0\norr v0.16b, v0.16b, v6.16b\norr v1.16b, v1.16b, v7.16b\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, <8 x float> %d, <8 x float> %e) {\n  %c = fcmp one <8 x float> %a, zeroinitializer\n  %r = select <8 x i1> %c, <8 x float> %d, <8 x float> %e\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp one <8 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x float> %d, <8 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "fcmpone",
  "ty": "<2 x double>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmgt v2.2d, v0.2d, v1.2d\nfcmgt v0.2d, v1.2d, v0.2d\norr v0.16b, v0.16b, v2.16b\nxtn v0.2s, v0.2d\nret",
  "giasm": "fcmgt v2.2d, v0.2d, v1.2d\nfcmgt v0.2d, v1.2d, v0.2d\norr v0.16b, v0.16b, v2.16b\nxtn v0.2s, v0.2d\nret",
  "ll": "define <2 x i1> @test(<2 x double> %a, <2 x double> %b) {\n  %r = fcmp one <2 x double> %a, %b\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp one <2 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "fcmpone",
  "ty": "<2 x double>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmgt v1.2d, v0.2d, #0.0\nfcmlt v0.2d, v0.2d, #0.0\norr v0.16b, v0.16b, v1.16b\nxtn v0.2s, v0.2d\nret",
  "giasm": "fcmgt v1.2d, v0.2d, #0.0\nfcmlt v0.2d, v0.2d, #0.0\norr v0.16b, v0.16b, v1.16b\nxtn v0.2s, v0.2d\nret",
  "ll": "define <2 x i1> @test(<2 x double> %a) {\n  %r = fcmp one <2 x double> %a, zeroinitializer\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp one <2 x double> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "selectfcmpone",
  "ty": "<2 x double>",
  "variant": "cmp",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmgt v4.2d, v0.2d, v1.2d\nfcmgt v0.2d, v1.2d, v0.2d\norr v0.16b, v0.16b, v4.16b\nbsl v0.16b, v2.16b, v3.16b\nret",
  "giasm": "fcmgt v4.2d, v0.2d, v1.2d\nfcmgt v0.2d, v1.2d, v0.2d\norr v0.16b, v0.16b, v4.16b\nbsl v0.16b, v2.16b, v3.16b\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, <2 x double> %b, <2 x double> %d, <2 x double> %e) {\n  %c = fcmp one <2 x double> %a, %b\n  %r = select <2 x i1> %c, <2 x double> %d, <2 x double> %e\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp one <2 x double> %a, %b\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <2 x i1> %c, <2 x double> %d, <2 x double> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "selectfcmpone",
  "ty": "<2 x double>",
  "variant": "cmp0",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmgt v3.2d, v0.2d, #0.0\nfcmlt v0.2d, v0.2d, #0.0\norr v0.16b, v0.16b, v3.16b\nbsl v0.16b, v1.16b, v2.16b\nret",
  "giasm": "fcmgt v3.2d, v0.2d, #0.0\nfcmlt v0.2d, v0.2d, #0.0\norr v0.16b, v0.16b, v3.16b\nbsl v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, <2 x double> %d, <2 x double> %e) {\n  %c = fcmp one <2 x double> %a, zeroinitializer\n  %r = select <2 x i1> %c, <2 x double> %d, <2 x double> %e\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp one <2 x double> %a, zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <2 x i1> %c, <2 x double> %d, <2 x double> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "fcmpone",
  "ty": "<4 x double>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 8,
  "gisize": 8,
  "extrasize": 0,
  "asm": "fcmgt v4.2d, v1.2d, v3.2d\nfcmgt v1.2d, v3.2d, v1.2d\nfcmgt v3.2d, v0.2d, v2.2d\nfcmgt v0.2d, v2.2d, v0.2d\norr v1.16b, v1.16b, v4.16b\norr v0.16b, v0.16b, v3.16b\nuzp1 v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "giasm": "fcmgt v4.2d, v0.2d, v2.2d\nfcmgt v0.2d, v2.2d, v0.2d\nfcmgt v2.2d, v1.2d, v3.2d\nfcmgt v1.2d, v3.2d, v1.2d\norr v0.16b, v0.16b, v4.16b\norr v1.16b, v1.16b, v2.16b\nuzp1 v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x double> %a, <4 x double> %b) {\n  %r = fcmp one <4 x double> %a, %b\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp one <4 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "fcmpone",
  "ty": "<4 x double>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 8,
  "gisize": 8,
  "extrasize": 0,
  "asm": "fcmgt v2.2d, v1.2d, #0.0\nfcmlt v1.2d, v1.2d, #0.0\nfcmgt v3.2d, v0.2d, #0.0\nfcmlt v0.2d, v0.2d, #0.0\norr v1.16b, v1.16b, v2.16b\norr v0.16b, v0.16b, v3.16b\nuzp1 v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "giasm": "fcmgt v2.2d, v0.2d, #0.0\nfcmlt v0.2d, v0.2d, #0.0\nfcmgt v3.2d, v1.2d, #0.0\nfcmlt v1.2d, v1.2d, #0.0\norr v0.16b, v0.16b, v2.16b\norr v1.16b, v1.16b, v3.16b\nuzp1 v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x double> %a) {\n  %r = fcmp one <4 x double> %a, zeroinitializer\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp one <4 x double> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "selectfcmpone",
  "ty": "<4 x double>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 10,
  "lat": 2,
  "sizelat": 2,
  "size": 8,
  "gisize": 8,
  "extrasize": 0,
  "asm": "fcmgt v16.2d, v1.2d, v3.2d\nfcmgt v1.2d, v3.2d, v1.2d\nfcmgt v3.2d, v0.2d, v2.2d\nfcmgt v0.2d, v2.2d, v0.2d\norr v1.16b, v1.16b, v16.16b\norr v0.16b, v0.16b, v3.16b\nbsl v1.16b, v5.16b, v7.16b\nbsl v0.16b, v4.16b, v6.16b\nret",
  "giasm": "fcmgt v16.2d, v0.2d, v2.2d\nfcmgt v0.2d, v2.2d, v0.2d\nfcmgt v2.2d, v1.2d, v3.2d\nfcmgt v1.2d, v3.2d, v1.2d\norr v0.16b, v0.16b, v16.16b\norr v1.16b, v1.16b, v2.16b\nbsl v0.16b, v4.16b, v6.16b\nbsl v1.16b, v5.16b, v7.16b\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, <4 x double> %b, <4 x double> %d, <4 x double> %e) {\n  %c = fcmp one <4 x double> %a, %b\n  %r = select <4 x i1> %c, <4 x double> %d, <4 x double> %e\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp one <4 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x double> %d, <4 x double> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "selectfcmpone",
  "ty": "<4 x double>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 10,
  "lat": 2,
  "sizelat": 2,
  "size": 8,
  "gisize": 8,
  "extrasize": 0,
  "asm": "fcmgt v6.2d, v1.2d, #0.0\nfcmlt v1.2d, v1.2d, #0.0\nfcmgt v7.2d, v0.2d, #0.0\nfcmlt v0.2d, v0.2d, #0.0\norr v1.16b, v1.16b, v6.16b\norr v0.16b, v0.16b, v7.16b\nbsl v1.16b, v3.16b, v5.16b\nbsl v0.16b, v2.16b, v4.16b\nret",
  "giasm": "fcmgt v6.2d, v0.2d, #0.0\nfcmlt v0.2d, v0.2d, #0.0\nfcmgt v7.2d, v1.2d, #0.0\nfcmlt v1.2d, v1.2d, #0.0\norr v0.16b, v0.16b, v6.16b\norr v1.16b, v1.16b, v7.16b\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, <4 x double> %d, <4 x double> %e) {\n  %c = fcmp one <4 x double> %a, zeroinitializer\n  %r = select <4 x i1> %c, <4 x double> %d, <4 x double> %e\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp one <4 x double> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x double> %d, <4 x double> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "fcmpord",
  "ty": "half",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp h0, h1\ncset w0, vc\nret",
  "giasm": "fcmp h0, h1\ncset w0, vc\nret",
  "ll": "define i1 @test(half %a, half %b) {\n  %r = fcmp ord half %a, %b\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ord half %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "fcmpord",
  "ty": "half",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp h0, h0\ncset w0, vc\nret",
  "giasm": "fcmp h0, #0.0\ncset w0, vc\nret",
  "ll": "define i1 @test(half %a) {\n  %r = fcmp ord half %a, 0.0\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ord half %a, 0xH0000\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "selectfcmpord",
  "ty": "half",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 5,
  "extrasize": 0,
  "asm": "fcmp h0, h1\nfcsel h0, h2, h3, vc\nret",
  "giasm": "fcmp h0, h1\nfmov w8, s2\nfmov w9, s3\ncsel w8, w8, w9, vc\nfmov s0, w8\nret",
  "ll": "define half @test(half %a, half %b, half %d, half %e) {\n  %c = fcmp ord half %a, %b\n  %r = select i1 %c, half %d, half %e\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ord half %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, half %d, half %e\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "selectfcmpord",
  "ty": "half",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 5,
  "extrasize": 0,
  "asm": "fcmp h0, h0\nfcsel h0, h1, h2, vc\nret",
  "giasm": "fcmp h0, #0.0\nfmov w8, s1\nfmov w9, s2\ncsel w8, w8, w9, vc\nfmov s0, w8\nret",
  "ll": "define half @test(half %a, half %d, half %e) {\n  %c = fcmp ord half %a, 0.0\n  %r = select i1 %c, half %d, half %e\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ord half %a, 0xH0000\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, half %d, half %e\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "fcmpord",
  "ty": "float",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp s0, s1\ncset w0, vc\nret",
  "giasm": "fcmp s0, s1\ncset w0, vc\nret",
  "ll": "define i1 @test(float %a, float %b) {\n  %r = fcmp ord float %a, %b\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ord float %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "fcmpord",
  "ty": "float",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp s0, s0\ncset w0, vc\nret",
  "giasm": "fcmp s0, #0.0\ncset w0, vc\nret",
  "ll": "define i1 @test(float %a) {\n  %r = fcmp ord float %a, 0.0\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ord float %a, 0.000000e+00\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "selectfcmpord",
  "ty": "float",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp s0, s1\nfcsel s0, s2, s3, vc\nret",
  "giasm": "fcmp s0, s1\nfcsel s0, s2, s3, vc\nret",
  "ll": "define float @test(float %a, float %b, float %d, float %e) {\n  %c = fcmp ord float %a, %b\n  %r = select i1 %c, float %d, float %e\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ord float %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, float %d, float %e\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "selectfcmpord",
  "ty": "float",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp s0, s0\nfcsel s0, s1, s2, vc\nret",
  "giasm": "fcmp s0, #0.0\nfcsel s0, s1, s2, vc\nret",
  "ll": "define float @test(float %a, float %d, float %e) {\n  %c = fcmp ord float %a, 0.0\n  %r = select i1 %c, float %d, float %e\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ord float %a, 0.000000e+00\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, float %d, float %e\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "fcmpord",
  "ty": "double",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp d0, d1\ncset w0, vc\nret",
  "giasm": "fcmp d0, d1\ncset w0, vc\nret",
  "ll": "define i1 @test(double %a, double %b) {\n  %r = fcmp ord double %a, %b\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ord double %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "fcmpord",
  "ty": "double",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp d0, d0\ncset w0, vc\nret",
  "giasm": "fcmp d0, #0.0\ncset w0, vc\nret",
  "ll": "define i1 @test(double %a) {\n  %r = fcmp ord double %a, 0.0\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ord double %a, 0.000000e+00\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "selectfcmpord",
  "ty": "double",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp d0, d1\nfcsel d0, d2, d3, vc\nret",
  "giasm": "fcmp d0, d1\nfcsel d0, d2, d3, vc\nret",
  "ll": "define double @test(double %a, double %b, double %d, double %e) {\n  %c = fcmp ord double %a, %b\n  %r = select i1 %c, double %d, double %e\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ord double %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, double %d, double %e\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "selectfcmpord",
  "ty": "double",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp d0, d0\nfcsel d0, d1, d2, vc\nret",
  "giasm": "fcmp d0, #0.0\nfcsel d0, d1, d2, vc\nret",
  "ll": "define double @test(double %a, double %d, double %e) {\n  %c = fcmp ord double %a, 0.0\n  %r = select i1 %c, double %d, double %e\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ord double %a, 0.000000e+00\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, double %d, double %e\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "fcmpord",
  "ty": "<4 x half>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmge v2.4h, v0.4h, v1.4h\nfcmgt v0.4h, v1.4h, v0.4h\norr v0.8b, v0.8b, v2.8b\nret",
  "giasm": "fcmge v2.4h, v0.4h, v1.4h\nfcmgt v0.4h, v1.4h, v0.4h\norr v0.8b, v0.8b, v2.8b\nret",
  "ll": "define <4 x i1> @test(<4 x half> %a, <4 x half> %b) {\n  %r = fcmp ord <4 x half> %a, %b\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ord <4 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "fcmpord",
  "ty": "<4 x half>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fcmeq v0.4h, v0.4h, v0.4h\nret",
  "giasm": "fcmeq v0.4h, v0.4h, v0.4h\nret",
  "ll": "define <4 x i1> @test(<4 x half> %a) {\n  %r = fcmp ord <4 x half> %a, zeroinitializer\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ord <4 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "selectfcmpord",
  "ty": "<4 x half>",
  "variant": "cmp",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmge v4.4h, v0.4h, v1.4h\nfcmgt v0.4h, v1.4h, v0.4h\norr v0.8b, v0.8b, v4.8b\nbsl v0.8b, v2.8b, v3.8b\nret",
  "giasm": "fcmge v4.4h, v0.4h, v1.4h\nfcmgt v0.4h, v1.4h, v0.4h\norr v0.8b, v0.8b, v4.8b\nbsl v0.8b, v2.8b, v3.8b\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, <4 x half> %b, <4 x half> %d, <4 x half> %e) {\n  %c = fcmp ord <4 x half> %a, %b\n  %r = select <4 x i1> %c, <4 x half> %d, <4 x half> %e\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ord <4 x half> %a, %b\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <4 x i1> %c, <4 x half> %d, <4 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "selectfcmpord",
  "ty": "<4 x half>",
  "variant": "cmp0",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmeq v0.4h, v0.4h, v0.4h\nbsl v0.8b, v1.8b, v2.8b\nret",
  "giasm": "fcmeq v0.4h, v0.4h, v0.4h\nbsl v0.8b, v1.8b, v2.8b\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, <4 x half> %d, <4 x half> %e) {\n  %c = fcmp ord <4 x half> %a, zeroinitializer\n  %r = select <4 x i1> %c, <4 x half> %d, <4 x half> %e\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ord <4 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <4 x i1> %c, <4 x half> %d, <4 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "fcmpord",
  "ty": "<8 x half>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmge v2.8h, v0.8h, v1.8h\nfcmgt v0.8h, v1.8h, v0.8h\norr v0.16b, v0.16b, v2.16b\nxtn v0.8b, v0.8h\nret",
  "giasm": "fcmge v2.8h, v0.8h, v1.8h\nfcmgt v0.8h, v1.8h, v0.8h\norr v0.16b, v0.16b, v2.16b\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x half> %a, <8 x half> %b) {\n  %r = fcmp ord <8 x half> %a, %b\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ord <8 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "fcmpord",
  "ty": "<8 x half>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmeq v0.8h, v0.8h, v0.8h\nxtn v0.8b, v0.8h\nret",
  "giasm": "fcmeq v0.8h, v0.8h, v0.8h\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x half> %a) {\n  %r = fcmp ord <8 x half> %a, zeroinitializer\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ord <8 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "selectfcmpord",
  "ty": "<8 x half>",
  "variant": "cmp",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmge v4.8h, v0.8h, v1.8h\nfcmgt v0.8h, v1.8h, v0.8h\norr v0.16b, v0.16b, v4.16b\nbsl v0.16b, v2.16b, v3.16b\nret",
  "giasm": "fcmge v4.8h, v0.8h, v1.8h\nfcmgt v0.8h, v1.8h, v0.8h\norr v0.16b, v0.16b, v4.16b\nbsl v0.16b, v2.16b, v3.16b\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, <8 x half> %b, <8 x half> %d, <8 x half> %e) {\n  %c = fcmp ord <8 x half> %a, %b\n  %r = select <8 x i1> %c, <8 x half> %d, <8 x half> %e\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ord <8 x half> %a, %b\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <8 x i1> %c, <8 x half> %d, <8 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "selectfcmpord",
  "ty": "<8 x half>",
  "variant": "cmp0",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmeq v0.8h, v0.8h, v0.8h\nbsl v0.16b, v1.16b, v2.16b\nret",
  "giasm": "fcmeq v0.8h, v0.8h, v0.8h\nbsl v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, <8 x half> %d, <8 x half> %e) {\n  %c = fcmp ord <8 x half> %a, zeroinitializer\n  %r = select <8 x i1> %c, <8 x half> %d, <8 x half> %e\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ord <8 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <8 x i1> %c, <8 x half> %d, <8 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "fcmpord",
  "ty": "<16 x half>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 7,
  "gisize": 7,
  "extrasize": 0,
  "asm": "fcmge v4.8h, v1.8h, v3.8h\nfcmgt v1.8h, v3.8h, v1.8h\nfcmge v3.8h, v0.8h, v2.8h\nfcmgt v0.8h, v2.8h, v0.8h\norr v1.16b, v1.16b, v4.16b\norr v0.16b, v0.16b, v3.16b\nuzp1 v0.16b, v0.16b, v1.16b\nret",
  "giasm": "fcmge v4.8h, v0.8h, v2.8h\nfcmgt v0.8h, v2.8h, v0.8h\nfcmge v2.8h, v1.8h, v3.8h\nfcmgt v1.8h, v3.8h, v1.8h\norr v0.16b, v0.16b, v4.16b\norr v1.16b, v1.16b, v2.16b\nuzp1 v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <16 x i1> @test(<16 x half> %a, <16 x half> %b) {\n  %r = fcmp ord <16 x half> %a, %b\n  ret <16 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ord <16 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i1> %r"
 },
 {
  "instr": "fcmpord",
  "ty": "<16 x half>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmeq v1.8h, v1.8h, v1.8h\nfcmeq v0.8h, v0.8h, v0.8h\nuzp1 v0.16b, v0.16b, v1.16b\nret",
  "giasm": "fcmeq v0.8h, v0.8h, v0.8h\nfcmeq v1.8h, v1.8h, v1.8h\nuzp1 v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <16 x i1> @test(<16 x half> %a) {\n  %r = fcmp ord <16 x half> %a, zeroinitializer\n  ret <16 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ord <16 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i1> %r"
 },
 {
  "instr": "selectfcmpord",
  "ty": "<16 x half>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 46,
  "lat": 2,
  "sizelat": 2,
  "size": 8,
  "gisize": 8,
  "extrasize": 0,
  "asm": "fcmge v16.8h, v1.8h, v3.8h\nfcmgt v1.8h, v3.8h, v1.8h\nfcmge v3.8h, v0.8h, v2.8h\nfcmgt v0.8h, v2.8h, v0.8h\norr v1.16b, v1.16b, v16.16b\norr v0.16b, v0.16b, v3.16b\nbsl v1.16b, v5.16b, v7.16b\nbsl v0.16b, v4.16b, v6.16b\nret",
  "giasm": "fcmge v16.8h, v0.8h, v2.8h\nfcmgt v0.8h, v2.8h, v0.8h\nfcmge v2.8h, v1.8h, v3.8h\nfcmgt v1.8h, v3.8h, v1.8h\norr v0.16b, v0.16b, v16.16b\norr v1.16b, v1.16b, v2.16b\nbsl v0.16b, v4.16b, v6.16b\nbsl v1.16b, v5.16b, v7.16b\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, <16 x half> %b, <16 x half> %d, <16 x half> %e) {\n  %c = fcmp ord <16 x half> %a, %b\n  %r = select <16 x i1> %c, <16 x half> %d, <16 x half> %e\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ord <16 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <16 x i1> %c, <16 x half> %d, <16 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "selectfcmpord",
  "ty": "<16 x half>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 46,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmeq v1.8h, v1.8h, v1.8h\nfcmeq v0.8h, v0.8h, v0.8h\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "giasm": "fcmeq v0.8h, v0.8h, v0.8h\nfcmeq v1.8h, v1.8h, v1.8h\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, <16 x half> %d, <16 x half> %e) {\n  %c = fcmp ord <16 x half> %a, zeroinitializer\n  %r = select <16 x i1> %c, <16 x half> %d, <16 x half> %e\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ord <16 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <16 x i1> %c, <16 x half> %d, <16 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "fcmpord",
  "ty": "<2 x float>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmge v2.2s, v0.2s, v1.2s\nfcmgt v0.2s, v1.2s, v0.2s\norr v0.8b, v0.8b, v2.8b\nret",
  "giasm": "fcmge v2.2s, v0.2s, v1.2s\nfcmgt v0.2s, v1.2s, v0.2s\norr v0.8b, v0.8b, v2.8b\nret",
  "ll": "define <2 x i1> @test(<2 x float> %a, <2 x float> %b) {\n  %r = fcmp ord <2 x float> %a, %b\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ord <2 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "fcmpord",
  "ty": "<2 x float>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fcmeq v0.2s, v0.2s, v0.2s\nret",
  "giasm": "fcmeq v0.2s, v0.2s, v0.2s\nret",
  "ll": "define <2 x i1> @test(<2 x float> %a) {\n  %r = fcmp ord <2 x float> %a, zeroinitializer\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ord <2 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "selectfcmpord",
  "ty": "<2 x float>",
  "variant": "cmp",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmge v4.2s, v0.2s, v1.2s\nfcmgt v0.2s, v1.2s, v0.2s\norr v0.8b, v0.8b, v4.8b\nbsl v0.8b, v2.8b, v3.8b\nret",
  "giasm": "fcmge v4.2s, v0.2s, v1.2s\nfcmgt v0.2s, v1.2s, v0.2s\norr v0.8b, v0.8b, v4.8b\nbsl v0.8b, v2.8b, v3.8b\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, <2 x float> %b, <2 x float> %d, <2 x float> %e) {\n  %c = fcmp ord <2 x float> %a, %b\n  %r = select <2 x i1> %c, <2 x float> %d, <2 x float> %e\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ord <2 x float> %a, %b\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <2 x i1> %c, <2 x float> %d, <2 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "selectfcmpord",
  "ty": "<2 x float>",
  "variant": "cmp0",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmeq v0.2s, v0.2s, v0.2s\nbsl v0.8b, v1.8b, v2.8b\nret",
  "giasm": "fcmeq v0.2s, v0.2s, v0.2s\nbsl v0.8b, v1.8b, v2.8b\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, <2 x float> %d, <2 x float> %e) {\n  %c = fcmp ord <2 x float> %a, zeroinitializer\n  %r = select <2 x i1> %c, <2 x float> %d, <2 x float> %e\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ord <2 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <2 x i1> %c, <2 x float> %d, <2 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "fcmpord",
  "ty": "<4 x float>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmge v2.4s, v0.4s, v1.4s\nfcmgt v0.4s, v1.4s, v0.4s\norr v0.16b, v0.16b, v2.16b\nxtn v0.4h, v0.4s\nret",
  "giasm": "fcmge v2.4s, v0.4s, v1.4s\nfcmgt v0.4s, v1.4s, v0.4s\norr v0.16b, v0.16b, v2.16b\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x float> %a, <4 x float> %b) {\n  %r = fcmp ord <4 x float> %a, %b\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ord <4 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "fcmpord",
  "ty": "<4 x float>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmeq v0.4s, v0.4s, v0.4s\nxtn v0.4h, v0.4s\nret",
  "giasm": "fcmeq v0.4s, v0.4s, v0.4s\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x float> %a) {\n  %r = fcmp ord <4 x float> %a, zeroinitializer\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ord <4 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "selectfcmpord",
  "ty": "<4 x float>",
  "variant": "cmp",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmge v4.4s, v0.4s, v1.4s\nfcmgt v0.4s, v1.4s, v0.4s\norr v0.16b, v0.16b, v4.16b\nbsl v0.16b, v2.16b, v3.16b\nret",
  "giasm": "fcmge v4.4s, v0.4s, v1.4s\nfcmgt v0.4s, v1.4s, v0.4s\norr v0.16b, v0.16b, v4.16b\nbsl v0.16b, v2.16b, v3.16b\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, <4 x float> %b, <4 x float> %d, <4 x float> %e) {\n  %c = fcmp ord <4 x float> %a, %b\n  %r = select <4 x i1> %c, <4 x float> %d, <4 x float> %e\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ord <4 x float> %a, %b\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <4 x i1> %c, <4 x float> %d, <4 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "selectfcmpord",
  "ty": "<4 x float>",
  "variant": "cmp0",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmeq v0.4s, v0.4s, v0.4s\nbsl v0.16b, v1.16b, v2.16b\nret",
  "giasm": "fcmeq v0.4s, v0.4s, v0.4s\nbsl v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, <4 x float> %d, <4 x float> %e) {\n  %c = fcmp ord <4 x float> %a, zeroinitializer\n  %r = select <4 x i1> %c, <4 x float> %d, <4 x float> %e\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ord <4 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <4 x i1> %c, <4 x float> %d, <4 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "fcmpord",
  "ty": "<8 x float>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 8,
  "gisize": 8,
  "extrasize": 0,
  "asm": "fcmge v4.4s, v1.4s, v3.4s\nfcmgt v1.4s, v3.4s, v1.4s\nfcmge v3.4s, v0.4s, v2.4s\nfcmgt v0.4s, v2.4s, v0.4s\norr v1.16b, v1.16b, v4.16b\norr v0.16b, v0.16b, v3.16b\nuzp1 v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "giasm": "fcmge v4.4s, v0.4s, v2.4s\nfcmgt v0.4s, v2.4s, v0.4s\nfcmge v2.4s, v1.4s, v3.4s\nfcmgt v1.4s, v3.4s, v1.4s\norr v0.16b, v0.16b, v4.16b\norr v1.16b, v1.16b, v2.16b\nuzp1 v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x float> %a, <8 x float> %b) {\n  %r = fcmp ord <8 x float> %a, %b\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ord <8 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "fcmpord",
  "ty": "<8 x float>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmeq v1.4s, v1.4s, v1.4s\nfcmeq v0.4s, v0.4s, v0.4s\nuzp1 v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "giasm": "fcmeq v0.4s, v0.4s, v0.4s\nfcmeq v1.4s, v1.4s, v1.4s\nuzp1 v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x float> %a) {\n  %r = fcmp ord <8 x float> %a, zeroinitializer\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ord <8 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "selectfcmpord",
  "ty": "<8 x float>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 22,
  "lat": 2,
  "sizelat": 2,
  "size": 8,
  "gisize": 8,
  "extrasize": 0,
  "asm": "fcmge v16.4s, v1.4s, v3.4s\nfcmgt v1.4s, v3.4s, v1.4s\nfcmge v3.4s, v0.4s, v2.4s\nfcmgt v0.4s, v2.4s, v0.4s\norr v1.16b, v1.16b, v16.16b\norr v0.16b, v0.16b, v3.16b\nbsl v1.16b, v5.16b, v7.16b\nbsl v0.16b, v4.16b, v6.16b\nret",
  "giasm": "fcmge v16.4s, v0.4s, v2.4s\nfcmgt v0.4s, v2.4s, v0.4s\nfcmge v2.4s, v1.4s, v3.4s\nfcmgt v1.4s, v3.4s, v1.4s\norr v0.16b, v0.16b, v16.16b\norr v1.16b, v1.16b, v2.16b\nbsl v0.16b, v4.16b, v6.16b\nbsl v1.16b, v5.16b, v7.16b\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, <8 x float> %b, <8 x float> %d, <8 x float> %e) {\n  %c = fcmp ord <8 x float> %a, %b\n  %r = select <8 x i1> %c, <8 x float> %d, <8 x float> %e\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ord <8 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x float> %d, <8 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "selectfcmpord",
  "ty": "<8 x float>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 22,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmeq v1.4s, v1.4s, v1.4s\nfcmeq v0.4s, v0.4s, v0.4s\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "giasm": "fcmeq v0.4s, v0.4s, v0.4s\nfcmeq v1.4s, v1.4s, v1.4s\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, <8 x float> %d, <8 x float> %e) {\n  %c = fcmp ord <8 x float> %a, zeroinitializer\n  %r = select <8 x i1> %c, <8 x float> %d, <8 x float> %e\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ord <8 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x float> %d, <8 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "fcmpord",
  "ty": "<2 x double>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmge v2.2d, v0.2d, v1.2d\nfcmgt v0.2d, v1.2d, v0.2d\norr v0.16b, v0.16b, v2.16b\nxtn v0.2s, v0.2d\nret",
  "giasm": "fcmge v2.2d, v0.2d, v1.2d\nfcmgt v0.2d, v1.2d, v0.2d\norr v0.16b, v0.16b, v2.16b\nxtn v0.2s, v0.2d\nret",
  "ll": "define <2 x i1> @test(<2 x double> %a, <2 x double> %b) {\n  %r = fcmp ord <2 x double> %a, %b\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ord <2 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "fcmpord",
  "ty": "<2 x double>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmeq v0.2d, v0.2d, v0.2d\nxtn v0.2s, v0.2d\nret",
  "giasm": "fcmeq v0.2d, v0.2d, v0.2d\nxtn v0.2s, v0.2d\nret",
  "ll": "define <2 x i1> @test(<2 x double> %a) {\n  %r = fcmp ord <2 x double> %a, zeroinitializer\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ord <2 x double> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "selectfcmpord",
  "ty": "<2 x double>",
  "variant": "cmp",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmge v4.2d, v0.2d, v1.2d\nfcmgt v0.2d, v1.2d, v0.2d\norr v0.16b, v0.16b, v4.16b\nbsl v0.16b, v2.16b, v3.16b\nret",
  "giasm": "fcmge v4.2d, v0.2d, v1.2d\nfcmgt v0.2d, v1.2d, v0.2d\norr v0.16b, v0.16b, v4.16b\nbsl v0.16b, v2.16b, v3.16b\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, <2 x double> %b, <2 x double> %d, <2 x double> %e) {\n  %c = fcmp ord <2 x double> %a, %b\n  %r = select <2 x i1> %c, <2 x double> %d, <2 x double> %e\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ord <2 x double> %a, %b\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <2 x i1> %c, <2 x double> %d, <2 x double> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "selectfcmpord",
  "ty": "<2 x double>",
  "variant": "cmp0",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmeq v0.2d, v0.2d, v0.2d\nbsl v0.16b, v1.16b, v2.16b\nret",
  "giasm": "fcmeq v0.2d, v0.2d, v0.2d\nbsl v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, <2 x double> %d, <2 x double> %e) {\n  %c = fcmp ord <2 x double> %a, zeroinitializer\n  %r = select <2 x i1> %c, <2 x double> %d, <2 x double> %e\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ord <2 x double> %a, zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <2 x i1> %c, <2 x double> %d, <2 x double> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "fcmpord",
  "ty": "<4 x double>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 8,
  "gisize": 8,
  "extrasize": 0,
  "asm": "fcmge v4.2d, v1.2d, v3.2d\nfcmgt v1.2d, v3.2d, v1.2d\nfcmge v3.2d, v0.2d, v2.2d\nfcmgt v0.2d, v2.2d, v0.2d\norr v1.16b, v1.16b, v4.16b\norr v0.16b, v0.16b, v3.16b\nuzp1 v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "giasm": "fcmge v4.2d, v0.2d, v2.2d\nfcmgt v0.2d, v2.2d, v0.2d\nfcmge v2.2d, v1.2d, v3.2d\nfcmgt v1.2d, v3.2d, v1.2d\norr v0.16b, v0.16b, v4.16b\norr v1.16b, v1.16b, v2.16b\nuzp1 v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x double> %a, <4 x double> %b) {\n  %r = fcmp ord <4 x double> %a, %b\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ord <4 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "fcmpord",
  "ty": "<4 x double>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmeq v1.2d, v1.2d, v1.2d\nfcmeq v0.2d, v0.2d, v0.2d\nuzp1 v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "giasm": "fcmeq v0.2d, v0.2d, v0.2d\nfcmeq v1.2d, v1.2d, v1.2d\nuzp1 v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x double> %a) {\n  %r = fcmp ord <4 x double> %a, zeroinitializer\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ord <4 x double> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "selectfcmpord",
  "ty": "<4 x double>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 10,
  "lat": 2,
  "sizelat": 2,
  "size": 8,
  "gisize": 8,
  "extrasize": 0,
  "asm": "fcmge v16.2d, v1.2d, v3.2d\nfcmgt v1.2d, v3.2d, v1.2d\nfcmge v3.2d, v0.2d, v2.2d\nfcmgt v0.2d, v2.2d, v0.2d\norr v1.16b, v1.16b, v16.16b\norr v0.16b, v0.16b, v3.16b\nbsl v1.16b, v5.16b, v7.16b\nbsl v0.16b, v4.16b, v6.16b\nret",
  "giasm": "fcmge v16.2d, v0.2d, v2.2d\nfcmgt v0.2d, v2.2d, v0.2d\nfcmge v2.2d, v1.2d, v3.2d\nfcmgt v1.2d, v3.2d, v1.2d\norr v0.16b, v0.16b, v16.16b\norr v1.16b, v1.16b, v2.16b\nbsl v0.16b, v4.16b, v6.16b\nbsl v1.16b, v5.16b, v7.16b\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, <4 x double> %b, <4 x double> %d, <4 x double> %e) {\n  %c = fcmp ord <4 x double> %a, %b\n  %r = select <4 x i1> %c, <4 x double> %d, <4 x double> %e\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ord <4 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x double> %d, <4 x double> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "selectfcmpord",
  "ty": "<4 x double>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 10,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmeq v1.2d, v1.2d, v1.2d\nfcmeq v0.2d, v0.2d, v0.2d\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "giasm": "fcmeq v0.2d, v0.2d, v0.2d\nfcmeq v1.2d, v1.2d, v1.2d\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, <4 x double> %d, <4 x double> %e) {\n  %c = fcmp ord <4 x double> %a, zeroinitializer\n  %r = select <4 x i1> %c, <4 x double> %d, <4 x double> %e\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ord <4 x double> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x double> %d, <4 x double> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "fcmpueq",
  "ty": "half",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmp h0, h1\ncset w8, eq\ncsinc w0, w8, wzr, vc\nret",
  "giasm": "fcmp h0, h1\ncset w8, eq\ncset w9, vs\norr w0, w8, w9\nret",
  "ll": "define i1 @test(half %a, half %b) {\n  %r = fcmp ueq half %a, %b\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ueq half %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "fcmpueq",
  "ty": "half",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmp h0, #0.0\ncset w8, eq\ncsinc w0, w8, wzr, vc\nret",
  "giasm": "fcmp h0, #0.0\ncset w8, eq\ncset w9, vs\norr w0, w8, w9\nret",
  "ll": "define i1 @test(half %a) {\n  %r = fcmp ueq half %a, 0.0\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ueq half %a, 0xH0000\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "selectfcmpueq",
  "ty": "half",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 3,
  "gisize": 9,
  "extrasize": 0,
  "asm": "fcmp h0, h1\nfcsel h0, h2, h3, eq\nfcsel h0, h2, h0, vs\nret",
  "giasm": "fcmp h0, h1\nfmov w10, s3\ncset w8, eq\ncset w9, vs\norr w8, w8, w9\nfmov w9, s2\ntst w8, #0x1\ncsel w8, w9, w10, ne\nfmov s0, w8\nret",
  "ll": "define half @test(half %a, half %b, half %d, half %e) {\n  %c = fcmp ueq half %a, %b\n  %r = select i1 %c, half %d, half %e\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ueq half %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, half %d, half %e\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "selectfcmpueq",
  "ty": "half",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 3,
  "gisize": 9,
  "extrasize": 0,
  "asm": "fcmp h0, #0.0\nfcsel h0, h1, h2, eq\nfcsel h0, h1, h0, vs\nret",
  "giasm": "fcmp h0, #0.0\nfmov w10, s2\ncset w8, eq\ncset w9, vs\norr w8, w8, w9\nfmov w9, s1\ntst w8, #0x1\ncsel w8, w9, w10, ne\nfmov s0, w8\nret",
  "ll": "define half @test(half %a, half %d, half %e) {\n  %c = fcmp ueq half %a, 0.0\n  %r = select i1 %c, half %d, half %e\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ueq half %a, 0xH0000\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, half %d, half %e\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "fcmpueq",
  "ty": "float",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmp s0, s1\ncset w8, eq\ncsinc w0, w8, wzr, vc\nret",
  "giasm": "fcmp s0, s1\ncset w8, eq\ncset w9, vs\norr w0, w8, w9\nret",
  "ll": "define i1 @test(float %a, float %b) {\n  %r = fcmp ueq float %a, %b\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ueq float %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "fcmpueq",
  "ty": "float",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmp s0, #0.0\ncset w8, eq\ncsinc w0, w8, wzr, vc\nret",
  "giasm": "fcmp s0, #0.0\ncset w8, eq\ncset w9, vs\norr w0, w8, w9\nret",
  "ll": "define i1 @test(float %a) {\n  %r = fcmp ueq float %a, 0.0\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ueq float %a, 0.000000e+00\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "selectfcmpueq",
  "ty": "float",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 3,
  "gisize": 6,
  "extrasize": 0,
  "asm": "fcmp s0, s1\nfcsel s0, s2, s3, eq\nfcsel s0, s2, s0, vs\nret",
  "giasm": "fcmp s0, s1\ncset w8, eq\ncset w9, vs\norr w8, w8, w9\ntst w8, #0x1\nfcsel s0, s2, s3, ne\nret",
  "ll": "define float @test(float %a, float %b, float %d, float %e) {\n  %c = fcmp ueq float %a, %b\n  %r = select i1 %c, float %d, float %e\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ueq float %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, float %d, float %e\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "selectfcmpueq",
  "ty": "float",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 3,
  "gisize": 6,
  "extrasize": 0,
  "asm": "fcmp s0, #0.0\nfcsel s0, s1, s2, eq\nfcsel s0, s1, s0, vs\nret",
  "giasm": "fcmp s0, #0.0\ncset w8, eq\ncset w9, vs\norr w8, w8, w9\ntst w8, #0x1\nfcsel s0, s1, s2, ne\nret",
  "ll": "define float @test(float %a, float %d, float %e) {\n  %c = fcmp ueq float %a, 0.0\n  %r = select i1 %c, float %d, float %e\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ueq float %a, 0.000000e+00\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, float %d, float %e\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "fcmpueq",
  "ty": "double",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmp d0, d1\ncset w8, eq\ncsinc w0, w8, wzr, vc\nret",
  "giasm": "fcmp d0, d1\ncset w8, eq\ncset w9, vs\norr w0, w8, w9\nret",
  "ll": "define i1 @test(double %a, double %b) {\n  %r = fcmp ueq double %a, %b\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ueq double %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "fcmpueq",
  "ty": "double",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmp d0, #0.0\ncset w8, eq\ncsinc w0, w8, wzr, vc\nret",
  "giasm": "fcmp d0, #0.0\ncset w8, eq\ncset w9, vs\norr w0, w8, w9\nret",
  "ll": "define i1 @test(double %a) {\n  %r = fcmp ueq double %a, 0.0\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ueq double %a, 0.000000e+00\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "selectfcmpueq",
  "ty": "double",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 3,
  "gisize": 6,
  "extrasize": 0,
  "asm": "fcmp d0, d1\nfcsel d0, d2, d3, eq\nfcsel d0, d2, d0, vs\nret",
  "giasm": "fcmp d0, d1\ncset w8, eq\ncset w9, vs\norr w8, w8, w9\ntst w8, #0x1\nfcsel d0, d2, d3, ne\nret",
  "ll": "define double @test(double %a, double %b, double %d, double %e) {\n  %c = fcmp ueq double %a, %b\n  %r = select i1 %c, double %d, double %e\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ueq double %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, double %d, double %e\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "selectfcmpueq",
  "ty": "double",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 3,
  "gisize": 6,
  "extrasize": 0,
  "asm": "fcmp d0, #0.0\nfcsel d0, d1, d2, eq\nfcsel d0, d1, d0, vs\nret",
  "giasm": "fcmp d0, #0.0\ncset w8, eq\ncset w9, vs\norr w8, w8, w9\ntst w8, #0x1\nfcsel d0, d1, d2, ne\nret",
  "ll": "define double @test(double %a, double %d, double %e) {\n  %c = fcmp ueq double %a, 0.0\n  %r = select i1 %c, double %d, double %e\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ueq double %a, 0.000000e+00\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, double %d, double %e\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "fcmpueq",
  "ty": "<4 x half>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmgt v2.4h, v0.4h, v1.4h\nfcmgt v0.4h, v1.4h, v0.4h\norr v0.8b, v0.8b, v2.8b\nmvn v0.8b, v0.8b\nret",
  "giasm": "fcmgt v2.4h, v0.4h, v1.4h\nfcmgt v0.4h, v1.4h, v0.4h\norr v0.8b, v0.8b, v2.8b\nmvn v0.8b, v0.8b\nret",
  "ll": "define <4 x i1> @test(<4 x half> %a, <4 x half> %b) {\n  %r = fcmp ueq <4 x half> %a, %b\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ueq <4 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "fcmpueq",
  "ty": "<4 x half>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmgt v1.4h, v0.4h, #0.0\nfcmlt v0.4h, v0.4h, #0.0\norr v0.8b, v0.8b, v1.8b\nmvn v0.8b, v0.8b\nret",
  "giasm": "fcmgt v1.4h, v0.4h, #0.0\nfcmlt v0.4h, v0.4h, #0.0\norr v0.8b, v0.8b, v1.8b\nmvn v0.8b, v0.8b\nret",
  "ll": "define <4 x i1> @test(<4 x half> %a) {\n  %r = fcmp ueq <4 x half> %a, zeroinitializer\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ueq <4 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "selectfcmpueq",
  "ty": "<4 x half>",
  "variant": "cmp",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 4,
  "gisize": 5,
  "extrasize": 0,
  "asm": "fcmgt v4.4h, v0.4h, v1.4h\nfcmgt v0.4h, v1.4h, v0.4h\norr v0.8b, v0.8b, v4.8b\nbsl v0.8b, v3.8b, v2.8b\nret",
  "giasm": "fcmgt v4.4h, v0.4h, v1.4h\nfcmgt v0.4h, v1.4h, v0.4h\norr v0.8b, v0.8b, v4.8b\nmvn v0.8b, v0.8b\nbsl v0.8b, v2.8b, v3.8b\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, <4 x half> %b, <4 x half> %d, <4 x half> %e) {\n  %c = fcmp ueq <4 x half> %a, %b\n  %r = select <4 x i1> %c, <4 x half> %d, <4 x half> %e\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ueq <4 x half> %a, %b\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <4 x i1> %c, <4 x half> %d, <4 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "selectfcmpueq",
  "ty": "<4 x half>",
  "variant": "cmp0",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 4,
  "gisize": 5,
  "extrasize": 0,
  "asm": "fcmgt v3.4h, v0.4h, #0.0\nfcmlt v0.4h, v0.4h, #0.0\norr v0.8b, v0.8b, v3.8b\nbsl v0.8b, v2.8b, v1.8b\nret",
  "giasm": "fcmgt v3.4h, v0.4h, #0.0\nfcmlt v0.4h, v0.4h, #0.0\norr v0.8b, v0.8b, v3.8b\nmvn v0.8b, v0.8b\nbsl v0.8b, v1.8b, v2.8b\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, <4 x half> %d, <4 x half> %e) {\n  %c = fcmp ueq <4 x half> %a, zeroinitializer\n  %r = select <4 x i1> %c, <4 x half> %d, <4 x half> %e\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ueq <4 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <4 x i1> %c, <4 x half> %d, <4 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "fcmpueq",
  "ty": "<8 x half>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 5,
  "gisize": 5,
  "extrasize": 0,
  "asm": "fcmgt v2.8h, v0.8h, v1.8h\nfcmgt v0.8h, v1.8h, v0.8h\norr v0.16b, v0.16b, v2.16b\nmvn v0.16b, v0.16b\nxtn v0.8b, v0.8h\nret",
  "giasm": "fcmgt v2.8h, v0.8h, v1.8h\nfcmgt v0.8h, v1.8h, v0.8h\norr v0.16b, v0.16b, v2.16b\nmvn v0.16b, v0.16b\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x half> %a, <8 x half> %b) {\n  %r = fcmp ueq <8 x half> %a, %b\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ueq <8 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "fcmpueq",
  "ty": "<8 x half>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 5,
  "gisize": 5,
  "extrasize": 0,
  "asm": "fcmgt v1.8h, v0.8h, #0.0\nfcmlt v0.8h, v0.8h, #0.0\norr v0.16b, v0.16b, v1.16b\nmvn v0.16b, v0.16b\nxtn v0.8b, v0.8h\nret",
  "giasm": "fcmgt v1.8h, v0.8h, #0.0\nfcmlt v0.8h, v0.8h, #0.0\norr v0.16b, v0.16b, v1.16b\nmvn v0.16b, v0.16b\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x half> %a) {\n  %r = fcmp ueq <8 x half> %a, zeroinitializer\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ueq <8 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "selectfcmpueq",
  "ty": "<8 x half>",
  "variant": "cmp",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 4,
  "gisize": 5,
  "extrasize": 0,
  "asm": "fcmgt v4.8h, v0.8h, v1.8h\nfcmgt v0.8h, v1.8h, v0.8h\norr v0.16b, v0.16b, v4.16b\nbsl v0.16b, v3.16b, v2.16b\nret",
  "giasm": "fcmgt v4.8h, v0.8h, v1.8h\nfcmgt v0.8h, v1.8h, v0.8h\norr v0.16b, v0.16b, v4.16b\nmvn v0.16b, v0.16b\nbsl v0.16b, v2.16b, v3.16b\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, <8 x half> %b, <8 x half> %d, <8 x half> %e) {\n  %c = fcmp ueq <8 x half> %a, %b\n  %r = select <8 x i1> %c, <8 x half> %d, <8 x half> %e\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ueq <8 x half> %a, %b\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <8 x i1> %c, <8 x half> %d, <8 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "selectfcmpueq",
  "ty": "<8 x half>",
  "variant": "cmp0",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 4,
  "gisize": 5,
  "extrasize": 0,
  "asm": "fcmgt v3.8h, v0.8h, #0.0\nfcmlt v0.8h, v0.8h, #0.0\norr v0.16b, v0.16b, v3.16b\nbsl v0.16b, v2.16b, v1.16b\nret",
  "giasm": "fcmgt v3.8h, v0.8h, #0.0\nfcmlt v0.8h, v0.8h, #0.0\norr v0.16b, v0.16b, v3.16b\nmvn v0.16b, v0.16b\nbsl v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, <8 x half> %d, <8 x half> %e) {\n  %c = fcmp ueq <8 x half> %a, zeroinitializer\n  %r = select <8 x i1> %c, <8 x half> %d, <8 x half> %e\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ueq <8 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <8 x i1> %c, <8 x half> %d, <8 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "fcmpueq",
  "ty": "<16 x half>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 8,
  "gisize": 9,
  "extrasize": 0,
  "asm": "fcmgt v4.8h, v1.8h, v3.8h\nfcmgt v1.8h, v3.8h, v1.8h\nfcmgt v3.8h, v0.8h, v2.8h\nfcmgt v0.8h, v2.8h, v0.8h\norr v1.16b, v1.16b, v4.16b\norr v0.16b, v0.16b, v3.16b\nuzp1 v0.16b, v0.16b, v1.16b\nmvn v0.16b, v0.16b\nret",
  "giasm": "fcmgt v4.8h, v0.8h, v2.8h\nfcmgt v0.8h, v2.8h, v0.8h\nfcmgt v2.8h, v1.8h, v3.8h\nfcmgt v1.8h, v3.8h, v1.8h\norr v0.16b, v0.16b, v4.16b\norr v1.16b, v1.16b, v2.16b\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nuzp1 v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <16 x i1> @test(<16 x half> %a, <16 x half> %b) {\n  %r = fcmp ueq <16 x half> %a, %b\n  ret <16 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ueq <16 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i1> %r"
 },
 {
  "instr": "fcmpueq",
  "ty": "<16 x half>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 8,
  "gisize": 9,
  "extrasize": 0,
  "asm": "fcmgt v2.8h, v1.8h, #0.0\nfcmlt v1.8h, v1.8h, #0.0\nfcmgt v3.8h, v0.8h, #0.0\nfcmlt v0.8h, v0.8h, #0.0\norr v1.16b, v1.16b, v2.16b\norr v0.16b, v0.16b, v3.16b\nuzp1 v0.16b, v0.16b, v1.16b\nmvn v0.16b, v0.16b\nret",
  "giasm": "fcmgt v2.8h, v0.8h, #0.0\nfcmlt v0.8h, v0.8h, #0.0\nfcmgt v3.8h, v1.8h, #0.0\nfcmlt v1.8h, v1.8h, #0.0\norr v0.16b, v0.16b, v2.16b\norr v1.16b, v1.16b, v3.16b\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nuzp1 v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <16 x i1> @test(<16 x half> %a) {\n  %r = fcmp ueq <16 x half> %a, zeroinitializer\n  ret <16 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ueq <16 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i1> %r"
 },
 {
  "instr": "selectfcmpueq",
  "ty": "<16 x half>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 46,
  "lat": 2,
  "sizelat": 2,
  "size": 8,
  "gisize": 10,
  "extrasize": 0,
  "asm": "fcmgt v16.8h, v1.8h, v3.8h\nfcmgt v1.8h, v3.8h, v1.8h\nfcmgt v3.8h, v0.8h, v2.8h\nfcmgt v0.8h, v2.8h, v0.8h\norr v1.16b, v1.16b, v16.16b\norr v0.16b, v0.16b, v3.16b\nbsl v1.16b, v7.16b, v5.16b\nbsl v0.16b, v6.16b, v4.16b\nret",
  "giasm": "fcmgt v16.8h, v0.8h, v2.8h\nfcmgt v0.8h, v2.8h, v0.8h\nfcmgt v2.8h, v1.8h, v3.8h\nfcmgt v1.8h, v3.8h, v1.8h\norr v0.16b, v0.16b, v16.16b\norr v1.16b, v1.16b, v2.16b\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nbsl v0.16b, v4.16b, v6.16b\nbsl v1.16b, v5.16b, v7.16b\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, <16 x half> %b, <16 x half> %d, <16 x half> %e) {\n  %c = fcmp ueq <16 x half> %a, %b\n  %r = select <16 x i1> %c, <16 x half> %d, <16 x half> %e\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ueq <16 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <16 x i1> %c, <16 x half> %d, <16 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "selectfcmpueq",
  "ty": "<16 x half>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 46,
  "lat": 2,
  "sizelat": 2,
  "size": 8,
  "gisize": 10,
  "extrasize": 0,
  "asm": "fcmgt v6.8h, v1.8h, #0.0\nfcmlt v1.8h, v1.8h, #0.0\nfcmgt v7.8h, v0.8h, #0.0\nfcmlt v0.8h, v0.8h, #0.0\norr v1.16b, v1.16b, v6.16b\norr v0.16b, v0.16b, v7.16b\nbsl v1.16b, v5.16b, v3.16b\nbsl v0.16b, v4.16b, v2.16b\nret",
  "giasm": "fcmgt v6.8h, v0.8h, #0.0\nfcmlt v0.8h, v0.8h, #0.0\nfcmgt v7.8h, v1.8h, #0.0\nfcmlt v1.8h, v1.8h, #0.0\norr v0.16b, v0.16b, v6.16b\norr v1.16b, v1.16b, v7.16b\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, <16 x half> %d, <16 x half> %e) {\n  %c = fcmp ueq <16 x half> %a, zeroinitializer\n  %r = select <16 x i1> %c, <16 x half> %d, <16 x half> %e\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ueq <16 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <16 x i1> %c, <16 x half> %d, <16 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "fcmpueq",
  "ty": "<2 x float>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmgt v2.2s, v0.2s, v1.2s\nfcmgt v0.2s, v1.2s, v0.2s\norr v0.8b, v0.8b, v2.8b\nmvn v0.8b, v0.8b\nret",
  "giasm": "fcmgt v2.2s, v0.2s, v1.2s\nfcmgt v0.2s, v1.2s, v0.2s\norr v0.8b, v0.8b, v2.8b\nmvn v0.8b, v0.8b\nret",
  "ll": "define <2 x i1> @test(<2 x float> %a, <2 x float> %b) {\n  %r = fcmp ueq <2 x float> %a, %b\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ueq <2 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "fcmpueq",
  "ty": "<2 x float>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmgt v1.2s, v0.2s, #0.0\nfcmlt v0.2s, v0.2s, #0.0\norr v0.8b, v0.8b, v1.8b\nmvn v0.8b, v0.8b\nret",
  "giasm": "fcmgt v1.2s, v0.2s, #0.0\nfcmlt v0.2s, v0.2s, #0.0\norr v0.8b, v0.8b, v1.8b\nmvn v0.8b, v0.8b\nret",
  "ll": "define <2 x i1> @test(<2 x float> %a) {\n  %r = fcmp ueq <2 x float> %a, zeroinitializer\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ueq <2 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "selectfcmpueq",
  "ty": "<2 x float>",
  "variant": "cmp",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 4,
  "gisize": 5,
  "extrasize": 0,
  "asm": "fcmgt v4.2s, v0.2s, v1.2s\nfcmgt v0.2s, v1.2s, v0.2s\norr v0.8b, v0.8b, v4.8b\nbsl v0.8b, v3.8b, v2.8b\nret",
  "giasm": "fcmgt v4.2s, v0.2s, v1.2s\nfcmgt v0.2s, v1.2s, v0.2s\norr v0.8b, v0.8b, v4.8b\nmvn v0.8b, v0.8b\nbsl v0.8b, v2.8b, v3.8b\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, <2 x float> %b, <2 x float> %d, <2 x float> %e) {\n  %c = fcmp ueq <2 x float> %a, %b\n  %r = select <2 x i1> %c, <2 x float> %d, <2 x float> %e\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ueq <2 x float> %a, %b\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <2 x i1> %c, <2 x float> %d, <2 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "selectfcmpueq",
  "ty": "<2 x float>",
  "variant": "cmp0",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 4,
  "gisize": 5,
  "extrasize": 0,
  "asm": "fcmgt v3.2s, v0.2s, #0.0\nfcmlt v0.2s, v0.2s, #0.0\norr v0.8b, v0.8b, v3.8b\nbsl v0.8b, v2.8b, v1.8b\nret",
  "giasm": "fcmgt v3.2s, v0.2s, #0.0\nfcmlt v0.2s, v0.2s, #0.0\norr v0.8b, v0.8b, v3.8b\nmvn v0.8b, v0.8b\nbsl v0.8b, v1.8b, v2.8b\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, <2 x float> %d, <2 x float> %e) {\n  %c = fcmp ueq <2 x float> %a, zeroinitializer\n  %r = select <2 x i1> %c, <2 x float> %d, <2 x float> %e\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ueq <2 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <2 x i1> %c, <2 x float> %d, <2 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "fcmpueq",
  "ty": "<4 x float>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 5,
  "gisize": 5,
  "extrasize": 0,
  "asm": "fcmgt v2.4s, v0.4s, v1.4s\nfcmgt v0.4s, v1.4s, v0.4s\norr v0.16b, v0.16b, v2.16b\nmvn v0.16b, v0.16b\nxtn v0.4h, v0.4s\nret",
  "giasm": "fcmgt v2.4s, v0.4s, v1.4s\nfcmgt v0.4s, v1.4s, v0.4s\norr v0.16b, v0.16b, v2.16b\nmvn v0.16b, v0.16b\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x float> %a, <4 x float> %b) {\n  %r = fcmp ueq <4 x float> %a, %b\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ueq <4 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "fcmpueq",
  "ty": "<4 x float>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 5,
  "gisize": 5,
  "extrasize": 0,
  "asm": "fcmgt v1.4s, v0.4s, #0.0\nfcmlt v0.4s, v0.4s, #0.0\norr v0.16b, v0.16b, v1.16b\nmvn v0.16b, v0.16b\nxtn v0.4h, v0.4s\nret",
  "giasm": "fcmgt v1.4s, v0.4s, #0.0\nfcmlt v0.4s, v0.4s, #0.0\norr v0.16b, v0.16b, v1.16b\nmvn v0.16b, v0.16b\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x float> %a) {\n  %r = fcmp ueq <4 x float> %a, zeroinitializer\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ueq <4 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "selectfcmpueq",
  "ty": "<4 x float>",
  "variant": "cmp",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 4,
  "gisize": 5,
  "extrasize": 0,
  "asm": "fcmgt v4.4s, v0.4s, v1.4s\nfcmgt v0.4s, v1.4s, v0.4s\norr v0.16b, v0.16b, v4.16b\nbsl v0.16b, v3.16b, v2.16b\nret",
  "giasm": "fcmgt v4.4s, v0.4s, v1.4s\nfcmgt v0.4s, v1.4s, v0.4s\norr v0.16b, v0.16b, v4.16b\nmvn v0.16b, v0.16b\nbsl v0.16b, v2.16b, v3.16b\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, <4 x float> %b, <4 x float> %d, <4 x float> %e) {\n  %c = fcmp ueq <4 x float> %a, %b\n  %r = select <4 x i1> %c, <4 x float> %d, <4 x float> %e\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ueq <4 x float> %a, %b\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <4 x i1> %c, <4 x float> %d, <4 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "selectfcmpueq",
  "ty": "<4 x float>",
  "variant": "cmp0",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 4,
  "gisize": 5,
  "extrasize": 0,
  "asm": "fcmgt v3.4s, v0.4s, #0.0\nfcmlt v0.4s, v0.4s, #0.0\norr v0.16b, v0.16b, v3.16b\nbsl v0.16b, v2.16b, v1.16b\nret",
  "giasm": "fcmgt v3.4s, v0.4s, #0.0\nfcmlt v0.4s, v0.4s, #0.0\norr v0.16b, v0.16b, v3.16b\nmvn v0.16b, v0.16b\nbsl v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, <4 x float> %d, <4 x float> %e) {\n  %c = fcmp ueq <4 x float> %a, zeroinitializer\n  %r = select <4 x i1> %c, <4 x float> %d, <4 x float> %e\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ueq <4 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <4 x i1> %c, <4 x float> %d, <4 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "fcmpueq",
  "ty": "<8 x float>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 9,
  "gisize": 10,
  "extrasize": 0,
  "asm": "fcmgt v4.4s, v1.4s, v3.4s\nfcmgt v1.4s, v3.4s, v1.4s\nfcmgt v3.4s, v0.4s, v2.4s\nfcmgt v0.4s, v2.4s, v0.4s\norr v1.16b, v1.16b, v4.16b\norr v0.16b, v0.16b, v3.16b\nuzp1 v0.8h, v0.8h, v1.8h\nmvn v0.16b, v0.16b\nxtn v0.8b, v0.8h\nret",
  "giasm": "fcmgt v4.4s, v0.4s, v2.4s\nfcmgt v0.4s, v2.4s, v0.4s\nfcmgt v2.4s, v1.4s, v3.4s\nfcmgt v1.4s, v3.4s, v1.4s\norr v0.16b, v0.16b, v4.16b\norr v1.16b, v1.16b, v2.16b\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nuzp1 v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x float> %a, <8 x float> %b) {\n  %r = fcmp ueq <8 x float> %a, %b\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ueq <8 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "fcmpueq",
  "ty": "<8 x float>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 9,
  "gisize": 10,
  "extrasize": 0,
  "asm": "fcmgt v2.4s, v1.4s, #0.0\nfcmlt v1.4s, v1.4s, #0.0\nfcmgt v3.4s, v0.4s, #0.0\nfcmlt v0.4s, v0.4s, #0.0\norr v1.16b, v1.16b, v2.16b\norr v0.16b, v0.16b, v3.16b\nuzp1 v0.8h, v0.8h, v1.8h\nmvn v0.16b, v0.16b\nxtn v0.8b, v0.8h\nret",
  "giasm": "fcmgt v2.4s, v0.4s, #0.0\nfcmlt v0.4s, v0.4s, #0.0\nfcmgt v3.4s, v1.4s, #0.0\nfcmlt v1.4s, v1.4s, #0.0\norr v0.16b, v0.16b, v2.16b\norr v1.16b, v1.16b, v3.16b\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nuzp1 v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x float> %a) {\n  %r = fcmp ueq <8 x float> %a, zeroinitializer\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ueq <8 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "selectfcmpueq",
  "ty": "<8 x float>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 22,
  "lat": 2,
  "sizelat": 2,
  "size": 8,
  "gisize": 10,
  "extrasize": 0,
  "asm": "fcmgt v16.4s, v1.4s, v3.4s\nfcmgt v1.4s, v3.4s, v1.4s\nfcmgt v3.4s, v0.4s, v2.4s\nfcmgt v0.4s, v2.4s, v0.4s\norr v1.16b, v1.16b, v16.16b\norr v0.16b, v0.16b, v3.16b\nbsl v1.16b, v7.16b, v5.16b\nbsl v0.16b, v6.16b, v4.16b\nret",
  "giasm": "fcmgt v16.4s, v0.4s, v2.4s\nfcmgt v0.4s, v2.4s, v0.4s\nfcmgt v2.4s, v1.4s, v3.4s\nfcmgt v1.4s, v3.4s, v1.4s\norr v0.16b, v0.16b, v16.16b\norr v1.16b, v1.16b, v2.16b\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nbsl v0.16b, v4.16b, v6.16b\nbsl v1.16b, v5.16b, v7.16b\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, <8 x float> %b, <8 x float> %d, <8 x float> %e) {\n  %c = fcmp ueq <8 x float> %a, %b\n  %r = select <8 x i1> %c, <8 x float> %d, <8 x float> %e\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ueq <8 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x float> %d, <8 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "selectfcmpueq",
  "ty": "<8 x float>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 22,
  "lat": 2,
  "sizelat": 2,
  "size": 8,
  "gisize": 10,
  "extrasize": 0,
  "asm": "fcmgt v6.4s, v1.4s, #0.0\nfcmlt v1.4s, v1.4s, #0.0\nfcmgt v7.4s, v0.4s, #0.0\nfcmlt v0.4s, v0.4s, #0.0\norr v1.16b, v1.16b, v6.16b\norr v0.16b, v0.16b, v7.16b\nbsl v1.16b, v5.16b, v3.16b\nbsl v0.16b, v4.16b, v2.16b\nret",
  "giasm": "fcmgt v6.4s, v0.4s, #0.0\nfcmlt v0.4s, v0.4s, #0.0\nfcmgt v7.4s, v1.4s, #0.0\nfcmlt v1.4s, v1.4s, #0.0\norr v0.16b, v0.16b, v6.16b\norr v1.16b, v1.16b, v7.16b\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, <8 x float> %d, <8 x float> %e) {\n  %c = fcmp ueq <8 x float> %a, zeroinitializer\n  %r = select <8 x i1> %c, <8 x float> %d, <8 x float> %e\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ueq <8 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x float> %d, <8 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "fcmpueq",
  "ty": "<2 x double>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 5,
  "gisize": 5,
  "extrasize": 0,
  "asm": "fcmgt v2.2d, v0.2d, v1.2d\nfcmgt v0.2d, v1.2d, v0.2d\norr v0.16b, v0.16b, v2.16b\nmvn v0.16b, v0.16b\nxtn v0.2s, v0.2d\nret",
  "giasm": "fcmgt v2.2d, v0.2d, v1.2d\nfcmgt v0.2d, v1.2d, v0.2d\norr v0.16b, v0.16b, v2.16b\nmvn v0.16b, v0.16b\nxtn v0.2s, v0.2d\nret",
  "ll": "define <2 x i1> @test(<2 x double> %a, <2 x double> %b) {\n  %r = fcmp ueq <2 x double> %a, %b\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ueq <2 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "fcmpueq",
  "ty": "<2 x double>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 5,
  "gisize": 5,
  "extrasize": 0,
  "asm": "fcmgt v1.2d, v0.2d, #0.0\nfcmlt v0.2d, v0.2d, #0.0\norr v0.16b, v0.16b, v1.16b\nmvn v0.16b, v0.16b\nxtn v0.2s, v0.2d\nret",
  "giasm": "fcmgt v1.2d, v0.2d, #0.0\nfcmlt v0.2d, v0.2d, #0.0\norr v0.16b, v0.16b, v1.16b\nmvn v0.16b, v0.16b\nxtn v0.2s, v0.2d\nret",
  "ll": "define <2 x i1> @test(<2 x double> %a) {\n  %r = fcmp ueq <2 x double> %a, zeroinitializer\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ueq <2 x double> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "selectfcmpueq",
  "ty": "<2 x double>",
  "variant": "cmp",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 4,
  "gisize": 5,
  "extrasize": 0,
  "asm": "fcmgt v4.2d, v0.2d, v1.2d\nfcmgt v0.2d, v1.2d, v0.2d\norr v0.16b, v0.16b, v4.16b\nbsl v0.16b, v3.16b, v2.16b\nret",
  "giasm": "fcmgt v4.2d, v0.2d, v1.2d\nfcmgt v0.2d, v1.2d, v0.2d\norr v0.16b, v0.16b, v4.16b\nmvn v0.16b, v0.16b\nbsl v0.16b, v2.16b, v3.16b\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, <2 x double> %b, <2 x double> %d, <2 x double> %e) {\n  %c = fcmp ueq <2 x double> %a, %b\n  %r = select <2 x i1> %c, <2 x double> %d, <2 x double> %e\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ueq <2 x double> %a, %b\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <2 x i1> %c, <2 x double> %d, <2 x double> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "selectfcmpueq",
  "ty": "<2 x double>",
  "variant": "cmp0",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 4,
  "gisize": 5,
  "extrasize": 0,
  "asm": "fcmgt v3.2d, v0.2d, #0.0\nfcmlt v0.2d, v0.2d, #0.0\norr v0.16b, v0.16b, v3.16b\nbsl v0.16b, v2.16b, v1.16b\nret",
  "giasm": "fcmgt v3.2d, v0.2d, #0.0\nfcmlt v0.2d, v0.2d, #0.0\norr v0.16b, v0.16b, v3.16b\nmvn v0.16b, v0.16b\nbsl v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, <2 x double> %d, <2 x double> %e) {\n  %c = fcmp ueq <2 x double> %a, zeroinitializer\n  %r = select <2 x i1> %c, <2 x double> %d, <2 x double> %e\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ueq <2 x double> %a, zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <2 x i1> %c, <2 x double> %d, <2 x double> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "fcmpueq",
  "ty": "<4 x double>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 9,
  "gisize": 10,
  "extrasize": 0,
  "asm": "fcmgt v4.2d, v1.2d, v3.2d\nfcmgt v1.2d, v3.2d, v1.2d\nfcmgt v3.2d, v0.2d, v2.2d\nfcmgt v0.2d, v2.2d, v0.2d\norr v1.16b, v1.16b, v4.16b\norr v0.16b, v0.16b, v3.16b\nuzp1 v0.4s, v0.4s, v1.4s\nmvn v0.16b, v0.16b\nxtn v0.4h, v0.4s\nret",
  "giasm": "fcmgt v4.2d, v0.2d, v2.2d\nfcmgt v0.2d, v2.2d, v0.2d\nfcmgt v2.2d, v1.2d, v3.2d\nfcmgt v1.2d, v3.2d, v1.2d\norr v0.16b, v0.16b, v4.16b\norr v1.16b, v1.16b, v2.16b\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nuzp1 v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x double> %a, <4 x double> %b) {\n  %r = fcmp ueq <4 x double> %a, %b\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ueq <4 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "fcmpueq",
  "ty": "<4 x double>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 9,
  "gisize": 10,
  "extrasize": 0,
  "asm": "fcmgt v2.2d, v1.2d, #0.0\nfcmlt v1.2d, v1.2d, #0.0\nfcmgt v3.2d, v0.2d, #0.0\nfcmlt v0.2d, v0.2d, #0.0\norr v1.16b, v1.16b, v2.16b\norr v0.16b, v0.16b, v3.16b\nuzp1 v0.4s, v0.4s, v1.4s\nmvn v0.16b, v0.16b\nxtn v0.4h, v0.4s\nret",
  "giasm": "fcmgt v2.2d, v0.2d, #0.0\nfcmlt v0.2d, v0.2d, #0.0\nfcmgt v3.2d, v1.2d, #0.0\nfcmlt v1.2d, v1.2d, #0.0\norr v0.16b, v0.16b, v2.16b\norr v1.16b, v1.16b, v3.16b\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nuzp1 v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x double> %a) {\n  %r = fcmp ueq <4 x double> %a, zeroinitializer\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ueq <4 x double> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "selectfcmpueq",
  "ty": "<4 x double>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 10,
  "lat": 2,
  "sizelat": 2,
  "size": 8,
  "gisize": 10,
  "extrasize": 0,
  "asm": "fcmgt v16.2d, v1.2d, v3.2d\nfcmgt v1.2d, v3.2d, v1.2d\nfcmgt v3.2d, v0.2d, v2.2d\nfcmgt v0.2d, v2.2d, v0.2d\norr v1.16b, v1.16b, v16.16b\norr v0.16b, v0.16b, v3.16b\nbsl v1.16b, v7.16b, v5.16b\nbsl v0.16b, v6.16b, v4.16b\nret",
  "giasm": "fcmgt v16.2d, v0.2d, v2.2d\nfcmgt v0.2d, v2.2d, v0.2d\nfcmgt v2.2d, v1.2d, v3.2d\nfcmgt v1.2d, v3.2d, v1.2d\norr v0.16b, v0.16b, v16.16b\norr v1.16b, v1.16b, v2.16b\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nbsl v0.16b, v4.16b, v6.16b\nbsl v1.16b, v5.16b, v7.16b\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, <4 x double> %b, <4 x double> %d, <4 x double> %e) {\n  %c = fcmp ueq <4 x double> %a, %b\n  %r = select <4 x i1> %c, <4 x double> %d, <4 x double> %e\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ueq <4 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x double> %d, <4 x double> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "selectfcmpueq",
  "ty": "<4 x double>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 10,
  "lat": 2,
  "sizelat": 2,
  "size": 8,
  "gisize": 10,
  "extrasize": 0,
  "asm": "fcmgt v6.2d, v1.2d, #0.0\nfcmlt v1.2d, v1.2d, #0.0\nfcmgt v7.2d, v0.2d, #0.0\nfcmlt v0.2d, v0.2d, #0.0\norr v1.16b, v1.16b, v6.16b\norr v0.16b, v0.16b, v7.16b\nbsl v1.16b, v5.16b, v3.16b\nbsl v0.16b, v4.16b, v2.16b\nret",
  "giasm": "fcmgt v6.2d, v0.2d, #0.0\nfcmlt v0.2d, v0.2d, #0.0\nfcmgt v7.2d, v1.2d, #0.0\nfcmlt v1.2d, v1.2d, #0.0\norr v0.16b, v0.16b, v6.16b\norr v1.16b, v1.16b, v7.16b\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, <4 x double> %d, <4 x double> %e) {\n  %c = fcmp ueq <4 x double> %a, zeroinitializer\n  %r = select <4 x i1> %c, <4 x double> %d, <4 x double> %e\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ueq <4 x double> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x double> %d, <4 x double> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "fcmpugt",
  "ty": "half",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp h0, h1\ncset w0, hi\nret",
  "giasm": "fcmp h0, h1\ncset w0, hi\nret",
  "ll": "define i1 @test(half %a, half %b) {\n  %r = fcmp ugt half %a, %b\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ugt half %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "fcmpugt",
  "ty": "half",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp h0, #0.0\ncset w0, hi\nret",
  "giasm": "fcmp h0, #0.0\ncset w0, hi\nret",
  "ll": "define i1 @test(half %a) {\n  %r = fcmp ugt half %a, 0.0\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ugt half %a, 0xH0000\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "selectfcmpugt",
  "ty": "half",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 5,
  "extrasize": 0,
  "asm": "fcmp h0, h1\nfcsel h0, h2, h3, hi\nret",
  "giasm": "fcmp h0, h1\nfmov w8, s2\nfmov w9, s3\ncsel w8, w8, w9, hi\nfmov s0, w8\nret",
  "ll": "define half @test(half %a, half %b, half %d, half %e) {\n  %c = fcmp ugt half %a, %b\n  %r = select i1 %c, half %d, half %e\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ugt half %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, half %d, half %e\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "selectfcmpugt",
  "ty": "half",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 5,
  "extrasize": 0,
  "asm": "fcmp h0, #0.0\nfcsel h0, h1, h2, hi\nret",
  "giasm": "fcmp h0, #0.0\nfmov w8, s1\nfmov w9, s2\ncsel w8, w8, w9, hi\nfmov s0, w8\nret",
  "ll": "define half @test(half %a, half %d, half %e) {\n  %c = fcmp ugt half %a, 0.0\n  %r = select i1 %c, half %d, half %e\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ugt half %a, 0xH0000\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, half %d, half %e\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "fcmpugt",
  "ty": "float",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp s0, s1\ncset w0, hi\nret",
  "giasm": "fcmp s0, s1\ncset w0, hi\nret",
  "ll": "define i1 @test(float %a, float %b) {\n  %r = fcmp ugt float %a, %b\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ugt float %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "fcmpugt",
  "ty": "float",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp s0, #0.0\ncset w0, hi\nret",
  "giasm": "fcmp s0, #0.0\ncset w0, hi\nret",
  "ll": "define i1 @test(float %a) {\n  %r = fcmp ugt float %a, 0.0\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ugt float %a, 0.000000e+00\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "selectfcmpugt",
  "ty": "float",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp s0, s1\nfcsel s0, s2, s3, hi\nret",
  "giasm": "fcmp s0, s1\nfcsel s0, s2, s3, hi\nret",
  "ll": "define float @test(float %a, float %b, float %d, float %e) {\n  %c = fcmp ugt float %a, %b\n  %r = select i1 %c, float %d, float %e\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ugt float %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, float %d, float %e\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "selectfcmpugt",
  "ty": "float",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp s0, #0.0\nfcsel s0, s1, s2, hi\nret",
  "giasm": "fcmp s0, #0.0\nfcsel s0, s1, s2, hi\nret",
  "ll": "define float @test(float %a, float %d, float %e) {\n  %c = fcmp ugt float %a, 0.0\n  %r = select i1 %c, float %d, float %e\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ugt float %a, 0.000000e+00\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, float %d, float %e\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "fcmpugt",
  "ty": "double",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp d0, d1\ncset w0, hi\nret",
  "giasm": "fcmp d0, d1\ncset w0, hi\nret",
  "ll": "define i1 @test(double %a, double %b) {\n  %r = fcmp ugt double %a, %b\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ugt double %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "fcmpugt",
  "ty": "double",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp d0, #0.0\ncset w0, hi\nret",
  "giasm": "fcmp d0, #0.0\ncset w0, hi\nret",
  "ll": "define i1 @test(double %a) {\n  %r = fcmp ugt double %a, 0.0\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ugt double %a, 0.000000e+00\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "selectfcmpugt",
  "ty": "double",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp d0, d1\nfcsel d0, d2, d3, hi\nret",
  "giasm": "fcmp d0, d1\nfcsel d0, d2, d3, hi\nret",
  "ll": "define double @test(double %a, double %b, double %d, double %e) {\n  %c = fcmp ugt double %a, %b\n  %r = select i1 %c, double %d, double %e\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ugt double %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, double %d, double %e\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "selectfcmpugt",
  "ty": "double",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp d0, #0.0\nfcsel d0, d1, d2, hi\nret",
  "giasm": "fcmp d0, #0.0\nfcsel d0, d1, d2, hi\nret",
  "ll": "define double @test(double %a, double %d, double %e) {\n  %c = fcmp ugt double %a, 0.0\n  %r = select i1 %c, double %d, double %e\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ugt double %a, 0.000000e+00\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, double %d, double %e\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "fcmpugt",
  "ty": "<4 x half>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmge v0.4h, v1.4h, v0.4h\nmvn v0.8b, v0.8b\nret",
  "giasm": "fcmge v0.4h, v1.4h, v0.4h\nmvn v0.8b, v0.8b\nret",
  "ll": "define <4 x i1> @test(<4 x half> %a, <4 x half> %b) {\n  %r = fcmp ugt <4 x half> %a, %b\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ugt <4 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "fcmpugt",
  "ty": "<4 x half>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmle v0.4h, v0.4h, #0.0\nmvn v0.8b, v0.8b\nret",
  "giasm": "fcmle v0.4h, v0.4h, #0.0\nmvn v0.8b, v0.8b\nret",
  "ll": "define <4 x i1> @test(<4 x half> %a) {\n  %r = fcmp ugt <4 x half> %a, zeroinitializer\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ugt <4 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "selectfcmpugt",
  "ty": "<4 x half>",
  "variant": "cmp",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmge v0.4h, v1.4h, v0.4h\nbsl v0.8b, v3.8b, v2.8b\nret",
  "giasm": "fcmge v0.4h, v1.4h, v0.4h\nmvn v0.8b, v0.8b\nbsl v0.8b, v2.8b, v3.8b\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, <4 x half> %b, <4 x half> %d, <4 x half> %e) {\n  %c = fcmp ugt <4 x half> %a, %b\n  %r = select <4 x i1> %c, <4 x half> %d, <4 x half> %e\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ugt <4 x half> %a, %b\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <4 x i1> %c, <4 x half> %d, <4 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "selectfcmpugt",
  "ty": "<4 x half>",
  "variant": "cmp0",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmle v0.4h, v0.4h, #0.0\nbsl v0.8b, v2.8b, v1.8b\nret",
  "giasm": "fcmle v0.4h, v0.4h, #0.0\nmvn v0.8b, v0.8b\nbsl v0.8b, v1.8b, v2.8b\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, <4 x half> %d, <4 x half> %e) {\n  %c = fcmp ugt <4 x half> %a, zeroinitializer\n  %r = select <4 x i1> %c, <4 x half> %d, <4 x half> %e\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ugt <4 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <4 x i1> %c, <4 x half> %d, <4 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "fcmpugt",
  "ty": "<8 x half>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmge v0.8h, v1.8h, v0.8h\nmvn v0.16b, v0.16b\nxtn v0.8b, v0.8h\nret",
  "giasm": "fcmge v0.8h, v1.8h, v0.8h\nmvn v0.16b, v0.16b\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x half> %a, <8 x half> %b) {\n  %r = fcmp ugt <8 x half> %a, %b\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ugt <8 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "fcmpugt",
  "ty": "<8 x half>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmle v0.8h, v0.8h, #0.0\nmvn v0.16b, v0.16b\nxtn v0.8b, v0.8h\nret",
  "giasm": "fcmle v0.8h, v0.8h, #0.0\nmvn v0.16b, v0.16b\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x half> %a) {\n  %r = fcmp ugt <8 x half> %a, zeroinitializer\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ugt <8 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "selectfcmpugt",
  "ty": "<8 x half>",
  "variant": "cmp",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmge v0.8h, v1.8h, v0.8h\nbsl v0.16b, v3.16b, v2.16b\nret",
  "giasm": "fcmge v0.8h, v1.8h, v0.8h\nmvn v0.16b, v0.16b\nbsl v0.16b, v2.16b, v3.16b\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, <8 x half> %b, <8 x half> %d, <8 x half> %e) {\n  %c = fcmp ugt <8 x half> %a, %b\n  %r = select <8 x i1> %c, <8 x half> %d, <8 x half> %e\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ugt <8 x half> %a, %b\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <8 x i1> %c, <8 x half> %d, <8 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "selectfcmpugt",
  "ty": "<8 x half>",
  "variant": "cmp0",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmle v0.8h, v0.8h, #0.0\nbsl v0.16b, v2.16b, v1.16b\nret",
  "giasm": "fcmle v0.8h, v0.8h, #0.0\nmvn v0.16b, v0.16b\nbsl v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, <8 x half> %d, <8 x half> %e) {\n  %c = fcmp ugt <8 x half> %a, zeroinitializer\n  %r = select <8 x i1> %c, <8 x half> %d, <8 x half> %e\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ugt <8 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <8 x i1> %c, <8 x half> %d, <8 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "fcmpugt",
  "ty": "<16 x half>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 5,
  "extrasize": 0,
  "asm": "fcmge v1.8h, v3.8h, v1.8h\nfcmge v0.8h, v2.8h, v0.8h\nuzp1 v0.16b, v0.16b, v1.16b\nmvn v0.16b, v0.16b\nret",
  "giasm": "fcmge v0.8h, v2.8h, v0.8h\nfcmge v1.8h, v3.8h, v1.8h\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nuzp1 v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <16 x i1> @test(<16 x half> %a, <16 x half> %b) {\n  %r = fcmp ugt <16 x half> %a, %b\n  ret <16 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ugt <16 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i1> %r"
 },
 {
  "instr": "fcmpugt",
  "ty": "<16 x half>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 5,
  "extrasize": 0,
  "asm": "fcmle v1.8h, v1.8h, #0.0\nfcmle v0.8h, v0.8h, #0.0\nuzp1 v0.16b, v0.16b, v1.16b\nmvn v0.16b, v0.16b\nret",
  "giasm": "fcmle v0.8h, v0.8h, #0.0\nfcmle v1.8h, v1.8h, #0.0\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nuzp1 v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <16 x i1> @test(<16 x half> %a) {\n  %r = fcmp ugt <16 x half> %a, zeroinitializer\n  ret <16 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ugt <16 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i1> %r"
 },
 {
  "instr": "selectfcmpugt",
  "ty": "<16 x half>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 46,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 6,
  "extrasize": 0,
  "asm": "fcmge v1.8h, v3.8h, v1.8h\nfcmge v0.8h, v2.8h, v0.8h\nbsl v1.16b, v7.16b, v5.16b\nbsl v0.16b, v6.16b, v4.16b\nret",
  "giasm": "fcmge v0.8h, v2.8h, v0.8h\nfcmge v1.8h, v3.8h, v1.8h\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nbsl v0.16b, v4.16b, v6.16b\nbsl v1.16b, v5.16b, v7.16b\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, <16 x half> %b, <16 x half> %d, <16 x half> %e) {\n  %c = fcmp ugt <16 x half> %a, %b\n  %r = select <16 x i1> %c, <16 x half> %d, <16 x half> %e\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ugt <16 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <16 x i1> %c, <16 x half> %d, <16 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "selectfcmpugt",
  "ty": "<16 x half>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 46,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 6,
  "extrasize": 0,
  "asm": "fcmle v1.8h, v1.8h, #0.0\nfcmle v0.8h, v0.8h, #0.0\nbsl v0.16b, v4.16b, v2.16b\nbsl v1.16b, v5.16b, v3.16b\nret",
  "giasm": "fcmle v0.8h, v0.8h, #0.0\nfcmle v1.8h, v1.8h, #0.0\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, <16 x half> %d, <16 x half> %e) {\n  %c = fcmp ugt <16 x half> %a, zeroinitializer\n  %r = select <16 x i1> %c, <16 x half> %d, <16 x half> %e\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ugt <16 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <16 x i1> %c, <16 x half> %d, <16 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "fcmpugt",
  "ty": "<2 x float>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmge v0.2s, v1.2s, v0.2s\nmvn v0.8b, v0.8b\nret",
  "giasm": "fcmge v0.2s, v1.2s, v0.2s\nmvn v0.8b, v0.8b\nret",
  "ll": "define <2 x i1> @test(<2 x float> %a, <2 x float> %b) {\n  %r = fcmp ugt <2 x float> %a, %b\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ugt <2 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "fcmpugt",
  "ty": "<2 x float>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmle v0.2s, v0.2s, #0.0\nmvn v0.8b, v0.8b\nret",
  "giasm": "fcmle v0.2s, v0.2s, #0.0\nmvn v0.8b, v0.8b\nret",
  "ll": "define <2 x i1> @test(<2 x float> %a) {\n  %r = fcmp ugt <2 x float> %a, zeroinitializer\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ugt <2 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "selectfcmpugt",
  "ty": "<2 x float>",
  "variant": "cmp",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmge v0.2s, v1.2s, v0.2s\nbsl v0.8b, v3.8b, v2.8b\nret",
  "giasm": "fcmge v0.2s, v1.2s, v0.2s\nmvn v0.8b, v0.8b\nbsl v0.8b, v2.8b, v3.8b\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, <2 x float> %b, <2 x float> %d, <2 x float> %e) {\n  %c = fcmp ugt <2 x float> %a, %b\n  %r = select <2 x i1> %c, <2 x float> %d, <2 x float> %e\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ugt <2 x float> %a, %b\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <2 x i1> %c, <2 x float> %d, <2 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "selectfcmpugt",
  "ty": "<2 x float>",
  "variant": "cmp0",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmle v0.2s, v0.2s, #0.0\nbsl v0.8b, v2.8b, v1.8b\nret",
  "giasm": "fcmle v0.2s, v0.2s, #0.0\nmvn v0.8b, v0.8b\nbsl v0.8b, v1.8b, v2.8b\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, <2 x float> %d, <2 x float> %e) {\n  %c = fcmp ugt <2 x float> %a, zeroinitializer\n  %r = select <2 x i1> %c, <2 x float> %d, <2 x float> %e\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ugt <2 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <2 x i1> %c, <2 x float> %d, <2 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "fcmpugt",
  "ty": "<4 x float>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmge v0.4s, v1.4s, v0.4s\nmvn v0.16b, v0.16b\nxtn v0.4h, v0.4s\nret",
  "giasm": "fcmge v0.4s, v1.4s, v0.4s\nmvn v0.16b, v0.16b\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x float> %a, <4 x float> %b) {\n  %r = fcmp ugt <4 x float> %a, %b\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ugt <4 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "fcmpugt",
  "ty": "<4 x float>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmle v0.4s, v0.4s, #0.0\nmvn v0.16b, v0.16b\nxtn v0.4h, v0.4s\nret",
  "giasm": "fcmle v0.4s, v0.4s, #0.0\nmvn v0.16b, v0.16b\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x float> %a) {\n  %r = fcmp ugt <4 x float> %a, zeroinitializer\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ugt <4 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "selectfcmpugt",
  "ty": "<4 x float>",
  "variant": "cmp",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmge v0.4s, v1.4s, v0.4s\nbsl v0.16b, v3.16b, v2.16b\nret",
  "giasm": "fcmge v0.4s, v1.4s, v0.4s\nmvn v0.16b, v0.16b\nbsl v0.16b, v2.16b, v3.16b\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, <4 x float> %b, <4 x float> %d, <4 x float> %e) {\n  %c = fcmp ugt <4 x float> %a, %b\n  %r = select <4 x i1> %c, <4 x float> %d, <4 x float> %e\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ugt <4 x float> %a, %b\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <4 x i1> %c, <4 x float> %d, <4 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "selectfcmpugt",
  "ty": "<4 x float>",
  "variant": "cmp0",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmle v0.4s, v0.4s, #0.0\nbsl v0.16b, v2.16b, v1.16b\nret",
  "giasm": "fcmle v0.4s, v0.4s, #0.0\nmvn v0.16b, v0.16b\nbsl v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, <4 x float> %d, <4 x float> %e) {\n  %c = fcmp ugt <4 x float> %a, zeroinitializer\n  %r = select <4 x i1> %c, <4 x float> %d, <4 x float> %e\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ugt <4 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <4 x i1> %c, <4 x float> %d, <4 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "fcmpugt",
  "ty": "<8 x float>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 5,
  "gisize": 6,
  "extrasize": 0,
  "asm": "fcmge v1.4s, v3.4s, v1.4s\nfcmge v0.4s, v2.4s, v0.4s\nuzp1 v0.8h, v0.8h, v1.8h\nmvn v0.16b, v0.16b\nxtn v0.8b, v0.8h\nret",
  "giasm": "fcmge v0.4s, v2.4s, v0.4s\nfcmge v1.4s, v3.4s, v1.4s\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nuzp1 v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x float> %a, <8 x float> %b) {\n  %r = fcmp ugt <8 x float> %a, %b\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ugt <8 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "fcmpugt",
  "ty": "<8 x float>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 5,
  "gisize": 6,
  "extrasize": 0,
  "asm": "fcmle v1.4s, v1.4s, #0.0\nfcmle v0.4s, v0.4s, #0.0\nuzp1 v0.8h, v0.8h, v1.8h\nmvn v0.16b, v0.16b\nxtn v0.8b, v0.8h\nret",
  "giasm": "fcmle v0.4s, v0.4s, #0.0\nfcmle v1.4s, v1.4s, #0.0\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nuzp1 v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x float> %a) {\n  %r = fcmp ugt <8 x float> %a, zeroinitializer\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ugt <8 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "selectfcmpugt",
  "ty": "<8 x float>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 22,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 6,
  "extrasize": 0,
  "asm": "fcmge v1.4s, v3.4s, v1.4s\nfcmge v0.4s, v2.4s, v0.4s\nbsl v1.16b, v7.16b, v5.16b\nbsl v0.16b, v6.16b, v4.16b\nret",
  "giasm": "fcmge v0.4s, v2.4s, v0.4s\nfcmge v1.4s, v3.4s, v1.4s\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nbsl v0.16b, v4.16b, v6.16b\nbsl v1.16b, v5.16b, v7.16b\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, <8 x float> %b, <8 x float> %d, <8 x float> %e) {\n  %c = fcmp ugt <8 x float> %a, %b\n  %r = select <8 x i1> %c, <8 x float> %d, <8 x float> %e\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ugt <8 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x float> %d, <8 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "selectfcmpugt",
  "ty": "<8 x float>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 22,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 6,
  "extrasize": 0,
  "asm": "fcmle v1.4s, v1.4s, #0.0\nfcmle v0.4s, v0.4s, #0.0\nbsl v0.16b, v4.16b, v2.16b\nbsl v1.16b, v5.16b, v3.16b\nret",
  "giasm": "fcmle v0.4s, v0.4s, #0.0\nfcmle v1.4s, v1.4s, #0.0\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, <8 x float> %d, <8 x float> %e) {\n  %c = fcmp ugt <8 x float> %a, zeroinitializer\n  %r = select <8 x i1> %c, <8 x float> %d, <8 x float> %e\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ugt <8 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x float> %d, <8 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "fcmpugt",
  "ty": "<2 x double>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmge v0.2d, v1.2d, v0.2d\nmvn v0.16b, v0.16b\nxtn v0.2s, v0.2d\nret",
  "giasm": "fcmge v0.2d, v1.2d, v0.2d\nmvn v0.16b, v0.16b\nxtn v0.2s, v0.2d\nret",
  "ll": "define <2 x i1> @test(<2 x double> %a, <2 x double> %b) {\n  %r = fcmp ugt <2 x double> %a, %b\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ugt <2 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "fcmpugt",
  "ty": "<2 x double>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmle v0.2d, v0.2d, #0.0\nmvn v0.16b, v0.16b\nxtn v0.2s, v0.2d\nret",
  "giasm": "fcmle v0.2d, v0.2d, #0.0\nmvn v0.16b, v0.16b\nxtn v0.2s, v0.2d\nret",
  "ll": "define <2 x i1> @test(<2 x double> %a) {\n  %r = fcmp ugt <2 x double> %a, zeroinitializer\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ugt <2 x double> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "selectfcmpugt",
  "ty": "<2 x double>",
  "variant": "cmp",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmge v0.2d, v1.2d, v0.2d\nbsl v0.16b, v3.16b, v2.16b\nret",
  "giasm": "fcmge v0.2d, v1.2d, v0.2d\nmvn v0.16b, v0.16b\nbsl v0.16b, v2.16b, v3.16b\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, <2 x double> %b, <2 x double> %d, <2 x double> %e) {\n  %c = fcmp ugt <2 x double> %a, %b\n  %r = select <2 x i1> %c, <2 x double> %d, <2 x double> %e\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ugt <2 x double> %a, %b\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <2 x i1> %c, <2 x double> %d, <2 x double> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "selectfcmpugt",
  "ty": "<2 x double>",
  "variant": "cmp0",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmle v0.2d, v0.2d, #0.0\nbsl v0.16b, v2.16b, v1.16b\nret",
  "giasm": "fcmle v0.2d, v0.2d, #0.0\nmvn v0.16b, v0.16b\nbsl v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, <2 x double> %d, <2 x double> %e) {\n  %c = fcmp ugt <2 x double> %a, zeroinitializer\n  %r = select <2 x i1> %c, <2 x double> %d, <2 x double> %e\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ugt <2 x double> %a, zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <2 x i1> %c, <2 x double> %d, <2 x double> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "fcmpugt",
  "ty": "<4 x double>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 5,
  "gisize": 6,
  "extrasize": 0,
  "asm": "fcmge v1.2d, v3.2d, v1.2d\nfcmge v0.2d, v2.2d, v0.2d\nuzp1 v0.4s, v0.4s, v1.4s\nmvn v0.16b, v0.16b\nxtn v0.4h, v0.4s\nret",
  "giasm": "fcmge v0.2d, v2.2d, v0.2d\nfcmge v1.2d, v3.2d, v1.2d\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nuzp1 v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x double> %a, <4 x double> %b) {\n  %r = fcmp ugt <4 x double> %a, %b\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ugt <4 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "fcmpugt",
  "ty": "<4 x double>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 5,
  "gisize": 6,
  "extrasize": 0,
  "asm": "fcmle v1.2d, v1.2d, #0.0\nfcmle v0.2d, v0.2d, #0.0\nuzp1 v0.4s, v0.4s, v1.4s\nmvn v0.16b, v0.16b\nxtn v0.4h, v0.4s\nret",
  "giasm": "fcmle v0.2d, v0.2d, #0.0\nfcmle v1.2d, v1.2d, #0.0\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nuzp1 v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x double> %a) {\n  %r = fcmp ugt <4 x double> %a, zeroinitializer\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ugt <4 x double> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "selectfcmpugt",
  "ty": "<4 x double>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 10,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 6,
  "extrasize": 0,
  "asm": "fcmge v1.2d, v3.2d, v1.2d\nfcmge v0.2d, v2.2d, v0.2d\nbsl v1.16b, v7.16b, v5.16b\nbsl v0.16b, v6.16b, v4.16b\nret",
  "giasm": "fcmge v0.2d, v2.2d, v0.2d\nfcmge v1.2d, v3.2d, v1.2d\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nbsl v0.16b, v4.16b, v6.16b\nbsl v1.16b, v5.16b, v7.16b\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, <4 x double> %b, <4 x double> %d, <4 x double> %e) {\n  %c = fcmp ugt <4 x double> %a, %b\n  %r = select <4 x i1> %c, <4 x double> %d, <4 x double> %e\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ugt <4 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x double> %d, <4 x double> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "selectfcmpugt",
  "ty": "<4 x double>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 10,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 6,
  "extrasize": 0,
  "asm": "fcmle v1.2d, v1.2d, #0.0\nfcmle v0.2d, v0.2d, #0.0\nbsl v0.16b, v4.16b, v2.16b\nbsl v1.16b, v5.16b, v3.16b\nret",
  "giasm": "fcmle v0.2d, v0.2d, #0.0\nfcmle v1.2d, v1.2d, #0.0\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, <4 x double> %d, <4 x double> %e) {\n  %c = fcmp ugt <4 x double> %a, zeroinitializer\n  %r = select <4 x i1> %c, <4 x double> %d, <4 x double> %e\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ugt <4 x double> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x double> %d, <4 x double> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "fcmpuge",
  "ty": "half",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp h0, h1\ncset w0, pl\nret",
  "giasm": "fcmp h0, h1\ncset w0, pl\nret",
  "ll": "define i1 @test(half %a, half %b) {\n  %r = fcmp uge half %a, %b\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp uge half %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "fcmpuge",
  "ty": "half",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp h0, #0.0\ncset w0, pl\nret",
  "giasm": "fcmp h0, #0.0\ncset w0, pl\nret",
  "ll": "define i1 @test(half %a) {\n  %r = fcmp uge half %a, 0.0\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp uge half %a, 0xH0000\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "selectfcmpuge",
  "ty": "half",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 5,
  "extrasize": 0,
  "asm": "fcmp h0, h1\nfcsel h0, h2, h3, pl\nret",
  "giasm": "fcmp h0, h1\nfmov w8, s2\nfmov w9, s3\ncsel w8, w8, w9, pl\nfmov s0, w8\nret",
  "ll": "define half @test(half %a, half %b, half %d, half %e) {\n  %c = fcmp uge half %a, %b\n  %r = select i1 %c, half %d, half %e\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp uge half %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, half %d, half %e\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "selectfcmpuge",
  "ty": "half",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 5,
  "extrasize": 0,
  "asm": "fcmp h0, #0.0\nfcsel h0, h1, h2, pl\nret",
  "giasm": "fcmp h0, #0.0\nfmov w8, s1\nfmov w9, s2\ncsel w8, w8, w9, pl\nfmov s0, w8\nret",
  "ll": "define half @test(half %a, half %d, half %e) {\n  %c = fcmp uge half %a, 0.0\n  %r = select i1 %c, half %d, half %e\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp uge half %a, 0xH0000\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, half %d, half %e\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "fcmpuge",
  "ty": "float",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp s0, s1\ncset w0, pl\nret",
  "giasm": "fcmp s0, s1\ncset w0, pl\nret",
  "ll": "define i1 @test(float %a, float %b) {\n  %r = fcmp uge float %a, %b\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp uge float %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "fcmpuge",
  "ty": "float",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp s0, #0.0\ncset w0, pl\nret",
  "giasm": "fcmp s0, #0.0\ncset w0, pl\nret",
  "ll": "define i1 @test(float %a) {\n  %r = fcmp uge float %a, 0.0\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp uge float %a, 0.000000e+00\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "selectfcmpuge",
  "ty": "float",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp s0, s1\nfcsel s0, s2, s3, pl\nret",
  "giasm": "fcmp s0, s1\nfcsel s0, s2, s3, pl\nret",
  "ll": "define float @test(float %a, float %b, float %d, float %e) {\n  %c = fcmp uge float %a, %b\n  %r = select i1 %c, float %d, float %e\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp uge float %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, float %d, float %e\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "selectfcmpuge",
  "ty": "float",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp s0, #0.0\nfcsel s0, s1, s2, pl\nret",
  "giasm": "fcmp s0, #0.0\nfcsel s0, s1, s2, pl\nret",
  "ll": "define float @test(float %a, float %d, float %e) {\n  %c = fcmp uge float %a, 0.0\n  %r = select i1 %c, float %d, float %e\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp uge float %a, 0.000000e+00\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, float %d, float %e\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "fcmpuge",
  "ty": "double",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp d0, d1\ncset w0, pl\nret",
  "giasm": "fcmp d0, d1\ncset w0, pl\nret",
  "ll": "define i1 @test(double %a, double %b) {\n  %r = fcmp uge double %a, %b\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp uge double %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "fcmpuge",
  "ty": "double",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp d0, #0.0\ncset w0, pl\nret",
  "giasm": "fcmp d0, #0.0\ncset w0, pl\nret",
  "ll": "define i1 @test(double %a) {\n  %r = fcmp uge double %a, 0.0\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp uge double %a, 0.000000e+00\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "selectfcmpuge",
  "ty": "double",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp d0, d1\nfcsel d0, d2, d3, pl\nret",
  "giasm": "fcmp d0, d1\nfcsel d0, d2, d3, pl\nret",
  "ll": "define double @test(double %a, double %b, double %d, double %e) {\n  %c = fcmp uge double %a, %b\n  %r = select i1 %c, double %d, double %e\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp uge double %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, double %d, double %e\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "selectfcmpuge",
  "ty": "double",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp d0, #0.0\nfcsel d0, d1, d2, pl\nret",
  "giasm": "fcmp d0, #0.0\nfcsel d0, d1, d2, pl\nret",
  "ll": "define double @test(double %a, double %d, double %e) {\n  %c = fcmp uge double %a, 0.0\n  %r = select i1 %c, double %d, double %e\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp uge double %a, 0.000000e+00\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, double %d, double %e\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "fcmpuge",
  "ty": "<4 x half>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmgt v0.4h, v1.4h, v0.4h\nmvn v0.8b, v0.8b\nret",
  "giasm": "fcmgt v0.4h, v1.4h, v0.4h\nmvn v0.8b, v0.8b\nret",
  "ll": "define <4 x i1> @test(<4 x half> %a, <4 x half> %b) {\n  %r = fcmp uge <4 x half> %a, %b\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp uge <4 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "fcmpuge",
  "ty": "<4 x half>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmlt v0.4h, v0.4h, #0.0\nmvn v0.8b, v0.8b\nret",
  "giasm": "fcmlt v0.4h, v0.4h, #0.0\nmvn v0.8b, v0.8b\nret",
  "ll": "define <4 x i1> @test(<4 x half> %a) {\n  %r = fcmp uge <4 x half> %a, zeroinitializer\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp uge <4 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "selectfcmpuge",
  "ty": "<4 x half>",
  "variant": "cmp",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmgt v0.4h, v1.4h, v0.4h\nbsl v0.8b, v3.8b, v2.8b\nret",
  "giasm": "fcmgt v0.4h, v1.4h, v0.4h\nmvn v0.8b, v0.8b\nbsl v0.8b, v2.8b, v3.8b\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, <4 x half> %b, <4 x half> %d, <4 x half> %e) {\n  %c = fcmp uge <4 x half> %a, %b\n  %r = select <4 x i1> %c, <4 x half> %d, <4 x half> %e\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp uge <4 x half> %a, %b\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <4 x i1> %c, <4 x half> %d, <4 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "selectfcmpuge",
  "ty": "<4 x half>",
  "variant": "cmp0",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmlt v0.4h, v0.4h, #0.0\nbsl v0.8b, v2.8b, v1.8b\nret",
  "giasm": "fcmlt v0.4h, v0.4h, #0.0\nmvn v0.8b, v0.8b\nbsl v0.8b, v1.8b, v2.8b\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, <4 x half> %d, <4 x half> %e) {\n  %c = fcmp uge <4 x half> %a, zeroinitializer\n  %r = select <4 x i1> %c, <4 x half> %d, <4 x half> %e\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp uge <4 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <4 x i1> %c, <4 x half> %d, <4 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "fcmpuge",
  "ty": "<8 x half>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmgt v0.8h, v1.8h, v0.8h\nmvn v0.16b, v0.16b\nxtn v0.8b, v0.8h\nret",
  "giasm": "fcmgt v0.8h, v1.8h, v0.8h\nmvn v0.16b, v0.16b\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x half> %a, <8 x half> %b) {\n  %r = fcmp uge <8 x half> %a, %b\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp uge <8 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "fcmpuge",
  "ty": "<8 x half>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmlt v0.8h, v0.8h, #0.0\nmvn v0.16b, v0.16b\nxtn v0.8b, v0.8h\nret",
  "giasm": "fcmlt v0.8h, v0.8h, #0.0\nmvn v0.16b, v0.16b\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x half> %a) {\n  %r = fcmp uge <8 x half> %a, zeroinitializer\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp uge <8 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "selectfcmpuge",
  "ty": "<8 x half>",
  "variant": "cmp",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmgt v0.8h, v1.8h, v0.8h\nbsl v0.16b, v3.16b, v2.16b\nret",
  "giasm": "fcmgt v0.8h, v1.8h, v0.8h\nmvn v0.16b, v0.16b\nbsl v0.16b, v2.16b, v3.16b\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, <8 x half> %b, <8 x half> %d, <8 x half> %e) {\n  %c = fcmp uge <8 x half> %a, %b\n  %r = select <8 x i1> %c, <8 x half> %d, <8 x half> %e\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp uge <8 x half> %a, %b\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <8 x i1> %c, <8 x half> %d, <8 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "selectfcmpuge",
  "ty": "<8 x half>",
  "variant": "cmp0",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmlt v0.8h, v0.8h, #0.0\nbsl v0.16b, v2.16b, v1.16b\nret",
  "giasm": "fcmlt v0.8h, v0.8h, #0.0\nmvn v0.16b, v0.16b\nbsl v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, <8 x half> %d, <8 x half> %e) {\n  %c = fcmp uge <8 x half> %a, zeroinitializer\n  %r = select <8 x i1> %c, <8 x half> %d, <8 x half> %e\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp uge <8 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <8 x i1> %c, <8 x half> %d, <8 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "fcmpuge",
  "ty": "<16 x half>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 5,
  "extrasize": 0,
  "asm": "fcmgt v1.8h, v3.8h, v1.8h\nfcmgt v0.8h, v2.8h, v0.8h\nuzp1 v0.16b, v0.16b, v1.16b\nmvn v0.16b, v0.16b\nret",
  "giasm": "fcmgt v0.8h, v2.8h, v0.8h\nfcmgt v1.8h, v3.8h, v1.8h\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nuzp1 v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <16 x i1> @test(<16 x half> %a, <16 x half> %b) {\n  %r = fcmp uge <16 x half> %a, %b\n  ret <16 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp uge <16 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i1> %r"
 },
 {
  "instr": "fcmpuge",
  "ty": "<16 x half>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 5,
  "extrasize": 0,
  "asm": "fcmlt v1.8h, v1.8h, #0.0\nfcmlt v0.8h, v0.8h, #0.0\nuzp1 v0.16b, v0.16b, v1.16b\nmvn v0.16b, v0.16b\nret",
  "giasm": "fcmlt v0.8h, v0.8h, #0.0\nfcmlt v1.8h, v1.8h, #0.0\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nuzp1 v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <16 x i1> @test(<16 x half> %a) {\n  %r = fcmp uge <16 x half> %a, zeroinitializer\n  ret <16 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp uge <16 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i1> %r"
 },
 {
  "instr": "selectfcmpuge",
  "ty": "<16 x half>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 46,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 6,
  "extrasize": 0,
  "asm": "fcmgt v1.8h, v3.8h, v1.8h\nfcmgt v0.8h, v2.8h, v0.8h\nbsl v1.16b, v7.16b, v5.16b\nbsl v0.16b, v6.16b, v4.16b\nret",
  "giasm": "fcmgt v0.8h, v2.8h, v0.8h\nfcmgt v1.8h, v3.8h, v1.8h\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nbsl v0.16b, v4.16b, v6.16b\nbsl v1.16b, v5.16b, v7.16b\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, <16 x half> %b, <16 x half> %d, <16 x half> %e) {\n  %c = fcmp uge <16 x half> %a, %b\n  %r = select <16 x i1> %c, <16 x half> %d, <16 x half> %e\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp uge <16 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <16 x i1> %c, <16 x half> %d, <16 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "selectfcmpuge",
  "ty": "<16 x half>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 46,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 6,
  "extrasize": 0,
  "asm": "fcmlt v1.8h, v1.8h, #0.0\nfcmlt v0.8h, v0.8h, #0.0\nbsl v0.16b, v4.16b, v2.16b\nbsl v1.16b, v5.16b, v3.16b\nret",
  "giasm": "fcmlt v0.8h, v0.8h, #0.0\nfcmlt v1.8h, v1.8h, #0.0\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, <16 x half> %d, <16 x half> %e) {\n  %c = fcmp uge <16 x half> %a, zeroinitializer\n  %r = select <16 x i1> %c, <16 x half> %d, <16 x half> %e\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp uge <16 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <16 x i1> %c, <16 x half> %d, <16 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "fcmpuge",
  "ty": "<2 x float>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmgt v0.2s, v1.2s, v0.2s\nmvn v0.8b, v0.8b\nret",
  "giasm": "fcmgt v0.2s, v1.2s, v0.2s\nmvn v0.8b, v0.8b\nret",
  "ll": "define <2 x i1> @test(<2 x float> %a, <2 x float> %b) {\n  %r = fcmp uge <2 x float> %a, %b\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp uge <2 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "fcmpuge",
  "ty": "<2 x float>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmlt v0.2s, v0.2s, #0.0\nmvn v0.8b, v0.8b\nret",
  "giasm": "fcmlt v0.2s, v0.2s, #0.0\nmvn v0.8b, v0.8b\nret",
  "ll": "define <2 x i1> @test(<2 x float> %a) {\n  %r = fcmp uge <2 x float> %a, zeroinitializer\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp uge <2 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "selectfcmpuge",
  "ty": "<2 x float>",
  "variant": "cmp",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmgt v0.2s, v1.2s, v0.2s\nbsl v0.8b, v3.8b, v2.8b\nret",
  "giasm": "fcmgt v0.2s, v1.2s, v0.2s\nmvn v0.8b, v0.8b\nbsl v0.8b, v2.8b, v3.8b\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, <2 x float> %b, <2 x float> %d, <2 x float> %e) {\n  %c = fcmp uge <2 x float> %a, %b\n  %r = select <2 x i1> %c, <2 x float> %d, <2 x float> %e\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp uge <2 x float> %a, %b\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <2 x i1> %c, <2 x float> %d, <2 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "selectfcmpuge",
  "ty": "<2 x float>",
  "variant": "cmp0",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmlt v0.2s, v0.2s, #0.0\nbsl v0.8b, v2.8b, v1.8b\nret",
  "giasm": "fcmlt v0.2s, v0.2s, #0.0\nmvn v0.8b, v0.8b\nbsl v0.8b, v1.8b, v2.8b\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, <2 x float> %d, <2 x float> %e) {\n  %c = fcmp uge <2 x float> %a, zeroinitializer\n  %r = select <2 x i1> %c, <2 x float> %d, <2 x float> %e\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp uge <2 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <2 x i1> %c, <2 x float> %d, <2 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "fcmpuge",
  "ty": "<4 x float>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmgt v0.4s, v1.4s, v0.4s\nmvn v0.16b, v0.16b\nxtn v0.4h, v0.4s\nret",
  "giasm": "fcmgt v0.4s, v1.4s, v0.4s\nmvn v0.16b, v0.16b\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x float> %a, <4 x float> %b) {\n  %r = fcmp uge <4 x float> %a, %b\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp uge <4 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "fcmpuge",
  "ty": "<4 x float>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmlt v0.4s, v0.4s, #0.0\nmvn v0.16b, v0.16b\nxtn v0.4h, v0.4s\nret",
  "giasm": "fcmlt v0.4s, v0.4s, #0.0\nmvn v0.16b, v0.16b\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x float> %a) {\n  %r = fcmp uge <4 x float> %a, zeroinitializer\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp uge <4 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "selectfcmpuge",
  "ty": "<4 x float>",
  "variant": "cmp",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmgt v0.4s, v1.4s, v0.4s\nbsl v0.16b, v3.16b, v2.16b\nret",
  "giasm": "fcmgt v0.4s, v1.4s, v0.4s\nmvn v0.16b, v0.16b\nbsl v0.16b, v2.16b, v3.16b\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, <4 x float> %b, <4 x float> %d, <4 x float> %e) {\n  %c = fcmp uge <4 x float> %a, %b\n  %r = select <4 x i1> %c, <4 x float> %d, <4 x float> %e\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp uge <4 x float> %a, %b\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <4 x i1> %c, <4 x float> %d, <4 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "selectfcmpuge",
  "ty": "<4 x float>",
  "variant": "cmp0",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmlt v0.4s, v0.4s, #0.0\nbsl v0.16b, v2.16b, v1.16b\nret",
  "giasm": "fcmlt v0.4s, v0.4s, #0.0\nmvn v0.16b, v0.16b\nbsl v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, <4 x float> %d, <4 x float> %e) {\n  %c = fcmp uge <4 x float> %a, zeroinitializer\n  %r = select <4 x i1> %c, <4 x float> %d, <4 x float> %e\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp uge <4 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <4 x i1> %c, <4 x float> %d, <4 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "fcmpuge",
  "ty": "<8 x float>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 5,
  "gisize": 6,
  "extrasize": 0,
  "asm": "fcmgt v1.4s, v3.4s, v1.4s\nfcmgt v0.4s, v2.4s, v0.4s\nuzp1 v0.8h, v0.8h, v1.8h\nmvn v0.16b, v0.16b\nxtn v0.8b, v0.8h\nret",
  "giasm": "fcmgt v0.4s, v2.4s, v0.4s\nfcmgt v1.4s, v3.4s, v1.4s\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nuzp1 v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x float> %a, <8 x float> %b) {\n  %r = fcmp uge <8 x float> %a, %b\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp uge <8 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "fcmpuge",
  "ty": "<8 x float>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 5,
  "gisize": 6,
  "extrasize": 0,
  "asm": "fcmlt v1.4s, v1.4s, #0.0\nfcmlt v0.4s, v0.4s, #0.0\nuzp1 v0.8h, v0.8h, v1.8h\nmvn v0.16b, v0.16b\nxtn v0.8b, v0.8h\nret",
  "giasm": "fcmlt v0.4s, v0.4s, #0.0\nfcmlt v1.4s, v1.4s, #0.0\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nuzp1 v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x float> %a) {\n  %r = fcmp uge <8 x float> %a, zeroinitializer\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp uge <8 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "selectfcmpuge",
  "ty": "<8 x float>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 22,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 6,
  "extrasize": 0,
  "asm": "fcmgt v1.4s, v3.4s, v1.4s\nfcmgt v0.4s, v2.4s, v0.4s\nbsl v1.16b, v7.16b, v5.16b\nbsl v0.16b, v6.16b, v4.16b\nret",
  "giasm": "fcmgt v0.4s, v2.4s, v0.4s\nfcmgt v1.4s, v3.4s, v1.4s\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nbsl v0.16b, v4.16b, v6.16b\nbsl v1.16b, v5.16b, v7.16b\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, <8 x float> %b, <8 x float> %d, <8 x float> %e) {\n  %c = fcmp uge <8 x float> %a, %b\n  %r = select <8 x i1> %c, <8 x float> %d, <8 x float> %e\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp uge <8 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x float> %d, <8 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "selectfcmpuge",
  "ty": "<8 x float>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 22,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 6,
  "extrasize": 0,
  "asm": "fcmlt v1.4s, v1.4s, #0.0\nfcmlt v0.4s, v0.4s, #0.0\nbsl v0.16b, v4.16b, v2.16b\nbsl v1.16b, v5.16b, v3.16b\nret",
  "giasm": "fcmlt v0.4s, v0.4s, #0.0\nfcmlt v1.4s, v1.4s, #0.0\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, <8 x float> %d, <8 x float> %e) {\n  %c = fcmp uge <8 x float> %a, zeroinitializer\n  %r = select <8 x i1> %c, <8 x float> %d, <8 x float> %e\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp uge <8 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x float> %d, <8 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "fcmpuge",
  "ty": "<2 x double>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmgt v0.2d, v1.2d, v0.2d\nmvn v0.16b, v0.16b\nxtn v0.2s, v0.2d\nret",
  "giasm": "fcmgt v0.2d, v1.2d, v0.2d\nmvn v0.16b, v0.16b\nxtn v0.2s, v0.2d\nret",
  "ll": "define <2 x i1> @test(<2 x double> %a, <2 x double> %b) {\n  %r = fcmp uge <2 x double> %a, %b\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp uge <2 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "fcmpuge",
  "ty": "<2 x double>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmlt v0.2d, v0.2d, #0.0\nmvn v0.16b, v0.16b\nxtn v0.2s, v0.2d\nret",
  "giasm": "fcmlt v0.2d, v0.2d, #0.0\nmvn v0.16b, v0.16b\nxtn v0.2s, v0.2d\nret",
  "ll": "define <2 x i1> @test(<2 x double> %a) {\n  %r = fcmp uge <2 x double> %a, zeroinitializer\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp uge <2 x double> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "selectfcmpuge",
  "ty": "<2 x double>",
  "variant": "cmp",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmgt v0.2d, v1.2d, v0.2d\nbsl v0.16b, v3.16b, v2.16b\nret",
  "giasm": "fcmgt v0.2d, v1.2d, v0.2d\nmvn v0.16b, v0.16b\nbsl v0.16b, v2.16b, v3.16b\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, <2 x double> %b, <2 x double> %d, <2 x double> %e) {\n  %c = fcmp uge <2 x double> %a, %b\n  %r = select <2 x i1> %c, <2 x double> %d, <2 x double> %e\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp uge <2 x double> %a, %b\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <2 x i1> %c, <2 x double> %d, <2 x double> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "selectfcmpuge",
  "ty": "<2 x double>",
  "variant": "cmp0",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmlt v0.2d, v0.2d, #0.0\nbsl v0.16b, v2.16b, v1.16b\nret",
  "giasm": "fcmlt v0.2d, v0.2d, #0.0\nmvn v0.16b, v0.16b\nbsl v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, <2 x double> %d, <2 x double> %e) {\n  %c = fcmp uge <2 x double> %a, zeroinitializer\n  %r = select <2 x i1> %c, <2 x double> %d, <2 x double> %e\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp uge <2 x double> %a, zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <2 x i1> %c, <2 x double> %d, <2 x double> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "fcmpuge",
  "ty": "<4 x double>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 5,
  "gisize": 6,
  "extrasize": 0,
  "asm": "fcmgt v1.2d, v3.2d, v1.2d\nfcmgt v0.2d, v2.2d, v0.2d\nuzp1 v0.4s, v0.4s, v1.4s\nmvn v0.16b, v0.16b\nxtn v0.4h, v0.4s\nret",
  "giasm": "fcmgt v0.2d, v2.2d, v0.2d\nfcmgt v1.2d, v3.2d, v1.2d\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nuzp1 v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x double> %a, <4 x double> %b) {\n  %r = fcmp uge <4 x double> %a, %b\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp uge <4 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "fcmpuge",
  "ty": "<4 x double>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 5,
  "gisize": 6,
  "extrasize": 0,
  "asm": "fcmlt v1.2d, v1.2d, #0.0\nfcmlt v0.2d, v0.2d, #0.0\nuzp1 v0.4s, v0.4s, v1.4s\nmvn v0.16b, v0.16b\nxtn v0.4h, v0.4s\nret",
  "giasm": "fcmlt v0.2d, v0.2d, #0.0\nfcmlt v1.2d, v1.2d, #0.0\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nuzp1 v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x double> %a) {\n  %r = fcmp uge <4 x double> %a, zeroinitializer\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp uge <4 x double> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "selectfcmpuge",
  "ty": "<4 x double>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 10,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 6,
  "extrasize": 0,
  "asm": "fcmgt v1.2d, v3.2d, v1.2d\nfcmgt v0.2d, v2.2d, v0.2d\nbsl v1.16b, v7.16b, v5.16b\nbsl v0.16b, v6.16b, v4.16b\nret",
  "giasm": "fcmgt v0.2d, v2.2d, v0.2d\nfcmgt v1.2d, v3.2d, v1.2d\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nbsl v0.16b, v4.16b, v6.16b\nbsl v1.16b, v5.16b, v7.16b\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, <4 x double> %b, <4 x double> %d, <4 x double> %e) {\n  %c = fcmp uge <4 x double> %a, %b\n  %r = select <4 x i1> %c, <4 x double> %d, <4 x double> %e\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp uge <4 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x double> %d, <4 x double> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "selectfcmpuge",
  "ty": "<4 x double>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 10,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 6,
  "extrasize": 0,
  "asm": "fcmlt v1.2d, v1.2d, #0.0\nfcmlt v0.2d, v0.2d, #0.0\nbsl v0.16b, v4.16b, v2.16b\nbsl v1.16b, v5.16b, v3.16b\nret",
  "giasm": "fcmlt v0.2d, v0.2d, #0.0\nfcmlt v1.2d, v1.2d, #0.0\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, <4 x double> %d, <4 x double> %e) {\n  %c = fcmp uge <4 x double> %a, zeroinitializer\n  %r = select <4 x i1> %c, <4 x double> %d, <4 x double> %e\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp uge <4 x double> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x double> %d, <4 x double> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "fcmpult",
  "ty": "half",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp h0, h1\ncset w0, lt\nret",
  "giasm": "fcmp h0, h1\ncset w0, lt\nret",
  "ll": "define i1 @test(half %a, half %b) {\n  %r = fcmp ult half %a, %b\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ult half %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "fcmpult",
  "ty": "half",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp h0, #0.0\ncset w0, lt\nret",
  "giasm": "fcmp h0, #0.0\ncset w0, lt\nret",
  "ll": "define i1 @test(half %a) {\n  %r = fcmp ult half %a, 0.0\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ult half %a, 0xH0000\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "selectfcmpult",
  "ty": "half",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 5,
  "extrasize": 0,
  "asm": "fcmp h0, h1\nfcsel h0, h2, h3, lt\nret",
  "giasm": "fcmp h0, h1\nfmov w8, s2\nfmov w9, s3\ncsel w8, w8, w9, lt\nfmov s0, w8\nret",
  "ll": "define half @test(half %a, half %b, half %d, half %e) {\n  %c = fcmp ult half %a, %b\n  %r = select i1 %c, half %d, half %e\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ult half %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, half %d, half %e\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "selectfcmpult",
  "ty": "half",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 5,
  "extrasize": 0,
  "asm": "fcmp h0, #0.0\nfcsel h0, h1, h2, lt\nret",
  "giasm": "fcmp h0, #0.0\nfmov w8, s1\nfmov w9, s2\ncsel w8, w8, w9, lt\nfmov s0, w8\nret",
  "ll": "define half @test(half %a, half %d, half %e) {\n  %c = fcmp ult half %a, 0.0\n  %r = select i1 %c, half %d, half %e\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ult half %a, 0xH0000\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, half %d, half %e\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "fcmpult",
  "ty": "float",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp s0, s1\ncset w0, lt\nret",
  "giasm": "fcmp s0, s1\ncset w0, lt\nret",
  "ll": "define i1 @test(float %a, float %b) {\n  %r = fcmp ult float %a, %b\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ult float %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "fcmpult",
  "ty": "float",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp s0, #0.0\ncset w0, lt\nret",
  "giasm": "fcmp s0, #0.0\ncset w0, lt\nret",
  "ll": "define i1 @test(float %a) {\n  %r = fcmp ult float %a, 0.0\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ult float %a, 0.000000e+00\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "selectfcmpult",
  "ty": "float",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp s0, s1\nfcsel s0, s2, s3, lt\nret",
  "giasm": "fcmp s0, s1\nfcsel s0, s2, s3, lt\nret",
  "ll": "define float @test(float %a, float %b, float %d, float %e) {\n  %c = fcmp ult float %a, %b\n  %r = select i1 %c, float %d, float %e\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ult float %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, float %d, float %e\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "selectfcmpult",
  "ty": "float",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp s0, #0.0\nfcsel s0, s1, s2, lt\nret",
  "giasm": "fcmp s0, #0.0\nfcsel s0, s1, s2, lt\nret",
  "ll": "define float @test(float %a, float %d, float %e) {\n  %c = fcmp ult float %a, 0.0\n  %r = select i1 %c, float %d, float %e\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ult float %a, 0.000000e+00\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, float %d, float %e\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "fcmpult",
  "ty": "double",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp d0, d1\ncset w0, lt\nret",
  "giasm": "fcmp d0, d1\ncset w0, lt\nret",
  "ll": "define i1 @test(double %a, double %b) {\n  %r = fcmp ult double %a, %b\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ult double %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "fcmpult",
  "ty": "double",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp d0, #0.0\ncset w0, lt\nret",
  "giasm": "fcmp d0, #0.0\ncset w0, lt\nret",
  "ll": "define i1 @test(double %a) {\n  %r = fcmp ult double %a, 0.0\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ult double %a, 0.000000e+00\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "selectfcmpult",
  "ty": "double",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp d0, d1\nfcsel d0, d2, d3, lt\nret",
  "giasm": "fcmp d0, d1\nfcsel d0, d2, d3, lt\nret",
  "ll": "define double @test(double %a, double %b, double %d, double %e) {\n  %c = fcmp ult double %a, %b\n  %r = select i1 %c, double %d, double %e\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ult double %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, double %d, double %e\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "selectfcmpult",
  "ty": "double",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp d0, #0.0\nfcsel d0, d1, d2, lt\nret",
  "giasm": "fcmp d0, #0.0\nfcsel d0, d1, d2, lt\nret",
  "ll": "define double @test(double %a, double %d, double %e) {\n  %c = fcmp ult double %a, 0.0\n  %r = select i1 %c, double %d, double %e\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ult double %a, 0.000000e+00\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, double %d, double %e\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "fcmpult",
  "ty": "<4 x half>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmge v0.4h, v0.4h, v1.4h\nmvn v0.8b, v0.8b\nret",
  "giasm": "fcmge v0.4h, v0.4h, v1.4h\nmvn v0.8b, v0.8b\nret",
  "ll": "define <4 x i1> @test(<4 x half> %a, <4 x half> %b) {\n  %r = fcmp ult <4 x half> %a, %b\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ult <4 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "fcmpult",
  "ty": "<4 x half>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmge v0.4h, v0.4h, #0.0\nmvn v0.8b, v0.8b\nret",
  "giasm": "fcmge v0.4h, v0.4h, #0.0\nmvn v0.8b, v0.8b\nret",
  "ll": "define <4 x i1> @test(<4 x half> %a) {\n  %r = fcmp ult <4 x half> %a, zeroinitializer\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ult <4 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "selectfcmpult",
  "ty": "<4 x half>",
  "variant": "cmp",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmge v0.4h, v0.4h, v1.4h\nbsl v0.8b, v3.8b, v2.8b\nret",
  "giasm": "fcmge v0.4h, v0.4h, v1.4h\nmvn v0.8b, v0.8b\nbsl v0.8b, v2.8b, v3.8b\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, <4 x half> %b, <4 x half> %d, <4 x half> %e) {\n  %c = fcmp ult <4 x half> %a, %b\n  %r = select <4 x i1> %c, <4 x half> %d, <4 x half> %e\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ult <4 x half> %a, %b\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <4 x i1> %c, <4 x half> %d, <4 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "selectfcmpult",
  "ty": "<4 x half>",
  "variant": "cmp0",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmge v0.4h, v0.4h, #0.0\nbsl v0.8b, v2.8b, v1.8b\nret",
  "giasm": "fcmge v0.4h, v0.4h, #0.0\nmvn v0.8b, v0.8b\nbsl v0.8b, v1.8b, v2.8b\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, <4 x half> %d, <4 x half> %e) {\n  %c = fcmp ult <4 x half> %a, zeroinitializer\n  %r = select <4 x i1> %c, <4 x half> %d, <4 x half> %e\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ult <4 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <4 x i1> %c, <4 x half> %d, <4 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "fcmpult",
  "ty": "<8 x half>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmge v0.8h, v0.8h, v1.8h\nmvn v0.16b, v0.16b\nxtn v0.8b, v0.8h\nret",
  "giasm": "fcmge v0.8h, v0.8h, v1.8h\nmvn v0.16b, v0.16b\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x half> %a, <8 x half> %b) {\n  %r = fcmp ult <8 x half> %a, %b\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ult <8 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "fcmpult",
  "ty": "<8 x half>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmge v0.8h, v0.8h, #0.0\nmvn v0.16b, v0.16b\nxtn v0.8b, v0.8h\nret",
  "giasm": "fcmge v0.8h, v0.8h, #0.0\nmvn v0.16b, v0.16b\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x half> %a) {\n  %r = fcmp ult <8 x half> %a, zeroinitializer\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ult <8 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "selectfcmpult",
  "ty": "<8 x half>",
  "variant": "cmp",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmge v0.8h, v0.8h, v1.8h\nbsl v0.16b, v3.16b, v2.16b\nret",
  "giasm": "fcmge v0.8h, v0.8h, v1.8h\nmvn v0.16b, v0.16b\nbsl v0.16b, v2.16b, v3.16b\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, <8 x half> %b, <8 x half> %d, <8 x half> %e) {\n  %c = fcmp ult <8 x half> %a, %b\n  %r = select <8 x i1> %c, <8 x half> %d, <8 x half> %e\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ult <8 x half> %a, %b\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <8 x i1> %c, <8 x half> %d, <8 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "selectfcmpult",
  "ty": "<8 x half>",
  "variant": "cmp0",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmge v0.8h, v0.8h, #0.0\nbsl v0.16b, v2.16b, v1.16b\nret",
  "giasm": "fcmge v0.8h, v0.8h, #0.0\nmvn v0.16b, v0.16b\nbsl v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, <8 x half> %d, <8 x half> %e) {\n  %c = fcmp ult <8 x half> %a, zeroinitializer\n  %r = select <8 x i1> %c, <8 x half> %d, <8 x half> %e\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ult <8 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <8 x i1> %c, <8 x half> %d, <8 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "fcmpult",
  "ty": "<16 x half>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 5,
  "extrasize": 0,
  "asm": "fcmge v1.8h, v1.8h, v3.8h\nfcmge v0.8h, v0.8h, v2.8h\nuzp1 v0.16b, v0.16b, v1.16b\nmvn v0.16b, v0.16b\nret",
  "giasm": "fcmge v0.8h, v0.8h, v2.8h\nfcmge v1.8h, v1.8h, v3.8h\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nuzp1 v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <16 x i1> @test(<16 x half> %a, <16 x half> %b) {\n  %r = fcmp ult <16 x half> %a, %b\n  ret <16 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ult <16 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i1> %r"
 },
 {
  "instr": "fcmpult",
  "ty": "<16 x half>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 5,
  "extrasize": 0,
  "asm": "fcmge v1.8h, v1.8h, #0.0\nfcmge v0.8h, v0.8h, #0.0\nuzp1 v0.16b, v0.16b, v1.16b\nmvn v0.16b, v0.16b\nret",
  "giasm": "fcmge v0.8h, v0.8h, #0.0\nfcmge v1.8h, v1.8h, #0.0\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nuzp1 v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <16 x i1> @test(<16 x half> %a) {\n  %r = fcmp ult <16 x half> %a, zeroinitializer\n  ret <16 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ult <16 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i1> %r"
 },
 {
  "instr": "selectfcmpult",
  "ty": "<16 x half>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 46,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 6,
  "extrasize": 0,
  "asm": "fcmge v1.8h, v1.8h, v3.8h\nfcmge v0.8h, v0.8h, v2.8h\nbsl v1.16b, v7.16b, v5.16b\nbsl v0.16b, v6.16b, v4.16b\nret",
  "giasm": "fcmge v0.8h, v0.8h, v2.8h\nfcmge v1.8h, v1.8h, v3.8h\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nbsl v0.16b, v4.16b, v6.16b\nbsl v1.16b, v5.16b, v7.16b\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, <16 x half> %b, <16 x half> %d, <16 x half> %e) {\n  %c = fcmp ult <16 x half> %a, %b\n  %r = select <16 x i1> %c, <16 x half> %d, <16 x half> %e\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ult <16 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <16 x i1> %c, <16 x half> %d, <16 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "selectfcmpult",
  "ty": "<16 x half>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 46,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 6,
  "extrasize": 0,
  "asm": "fcmge v1.8h, v1.8h, #0.0\nfcmge v0.8h, v0.8h, #0.0\nbsl v0.16b, v4.16b, v2.16b\nbsl v1.16b, v5.16b, v3.16b\nret",
  "giasm": "fcmge v0.8h, v0.8h, #0.0\nfcmge v1.8h, v1.8h, #0.0\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, <16 x half> %d, <16 x half> %e) {\n  %c = fcmp ult <16 x half> %a, zeroinitializer\n  %r = select <16 x i1> %c, <16 x half> %d, <16 x half> %e\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ult <16 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <16 x i1> %c, <16 x half> %d, <16 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "fcmpult",
  "ty": "<2 x float>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmge v0.2s, v0.2s, v1.2s\nmvn v0.8b, v0.8b\nret",
  "giasm": "fcmge v0.2s, v0.2s, v1.2s\nmvn v0.8b, v0.8b\nret",
  "ll": "define <2 x i1> @test(<2 x float> %a, <2 x float> %b) {\n  %r = fcmp ult <2 x float> %a, %b\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ult <2 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "fcmpult",
  "ty": "<2 x float>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmge v0.2s, v0.2s, #0.0\nmvn v0.8b, v0.8b\nret",
  "giasm": "fcmge v0.2s, v0.2s, #0.0\nmvn v0.8b, v0.8b\nret",
  "ll": "define <2 x i1> @test(<2 x float> %a) {\n  %r = fcmp ult <2 x float> %a, zeroinitializer\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ult <2 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "selectfcmpult",
  "ty": "<2 x float>",
  "variant": "cmp",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmge v0.2s, v0.2s, v1.2s\nbsl v0.8b, v3.8b, v2.8b\nret",
  "giasm": "fcmge v0.2s, v0.2s, v1.2s\nmvn v0.8b, v0.8b\nbsl v0.8b, v2.8b, v3.8b\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, <2 x float> %b, <2 x float> %d, <2 x float> %e) {\n  %c = fcmp ult <2 x float> %a, %b\n  %r = select <2 x i1> %c, <2 x float> %d, <2 x float> %e\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ult <2 x float> %a, %b\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <2 x i1> %c, <2 x float> %d, <2 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "selectfcmpult",
  "ty": "<2 x float>",
  "variant": "cmp0",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmge v0.2s, v0.2s, #0.0\nbsl v0.8b, v2.8b, v1.8b\nret",
  "giasm": "fcmge v0.2s, v0.2s, #0.0\nmvn v0.8b, v0.8b\nbsl v0.8b, v1.8b, v2.8b\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, <2 x float> %d, <2 x float> %e) {\n  %c = fcmp ult <2 x float> %a, zeroinitializer\n  %r = select <2 x i1> %c, <2 x float> %d, <2 x float> %e\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ult <2 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <2 x i1> %c, <2 x float> %d, <2 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "fcmpult",
  "ty": "<4 x float>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmge v0.4s, v0.4s, v1.4s\nmvn v0.16b, v0.16b\nxtn v0.4h, v0.4s\nret",
  "giasm": "fcmge v0.4s, v0.4s, v1.4s\nmvn v0.16b, v0.16b\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x float> %a, <4 x float> %b) {\n  %r = fcmp ult <4 x float> %a, %b\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ult <4 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "fcmpult",
  "ty": "<4 x float>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmge v0.4s, v0.4s, #0.0\nmvn v0.16b, v0.16b\nxtn v0.4h, v0.4s\nret",
  "giasm": "fcmge v0.4s, v0.4s, #0.0\nmvn v0.16b, v0.16b\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x float> %a) {\n  %r = fcmp ult <4 x float> %a, zeroinitializer\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ult <4 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "selectfcmpult",
  "ty": "<4 x float>",
  "variant": "cmp",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmge v0.4s, v0.4s, v1.4s\nbsl v0.16b, v3.16b, v2.16b\nret",
  "giasm": "fcmge v0.4s, v0.4s, v1.4s\nmvn v0.16b, v0.16b\nbsl v0.16b, v2.16b, v3.16b\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, <4 x float> %b, <4 x float> %d, <4 x float> %e) {\n  %c = fcmp ult <4 x float> %a, %b\n  %r = select <4 x i1> %c, <4 x float> %d, <4 x float> %e\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ult <4 x float> %a, %b\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <4 x i1> %c, <4 x float> %d, <4 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "selectfcmpult",
  "ty": "<4 x float>",
  "variant": "cmp0",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmge v0.4s, v0.4s, #0.0\nbsl v0.16b, v2.16b, v1.16b\nret",
  "giasm": "fcmge v0.4s, v0.4s, #0.0\nmvn v0.16b, v0.16b\nbsl v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, <4 x float> %d, <4 x float> %e) {\n  %c = fcmp ult <4 x float> %a, zeroinitializer\n  %r = select <4 x i1> %c, <4 x float> %d, <4 x float> %e\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ult <4 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <4 x i1> %c, <4 x float> %d, <4 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "fcmpult",
  "ty": "<8 x float>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 5,
  "gisize": 6,
  "extrasize": 0,
  "asm": "fcmge v1.4s, v1.4s, v3.4s\nfcmge v0.4s, v0.4s, v2.4s\nuzp1 v0.8h, v0.8h, v1.8h\nmvn v0.16b, v0.16b\nxtn v0.8b, v0.8h\nret",
  "giasm": "fcmge v0.4s, v0.4s, v2.4s\nfcmge v1.4s, v1.4s, v3.4s\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nuzp1 v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x float> %a, <8 x float> %b) {\n  %r = fcmp ult <8 x float> %a, %b\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ult <8 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "fcmpult",
  "ty": "<8 x float>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 5,
  "gisize": 6,
  "extrasize": 0,
  "asm": "fcmge v1.4s, v1.4s, #0.0\nfcmge v0.4s, v0.4s, #0.0\nuzp1 v0.8h, v0.8h, v1.8h\nmvn v0.16b, v0.16b\nxtn v0.8b, v0.8h\nret",
  "giasm": "fcmge v0.4s, v0.4s, #0.0\nfcmge v1.4s, v1.4s, #0.0\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nuzp1 v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x float> %a) {\n  %r = fcmp ult <8 x float> %a, zeroinitializer\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ult <8 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "selectfcmpult",
  "ty": "<8 x float>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 22,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 6,
  "extrasize": 0,
  "asm": "fcmge v1.4s, v1.4s, v3.4s\nfcmge v0.4s, v0.4s, v2.4s\nbsl v1.16b, v7.16b, v5.16b\nbsl v0.16b, v6.16b, v4.16b\nret",
  "giasm": "fcmge v0.4s, v0.4s, v2.4s\nfcmge v1.4s, v1.4s, v3.4s\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nbsl v0.16b, v4.16b, v6.16b\nbsl v1.16b, v5.16b, v7.16b\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, <8 x float> %b, <8 x float> %d, <8 x float> %e) {\n  %c = fcmp ult <8 x float> %a, %b\n  %r = select <8 x i1> %c, <8 x float> %d, <8 x float> %e\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ult <8 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x float> %d, <8 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "selectfcmpult",
  "ty": "<8 x float>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 22,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 6,
  "extrasize": 0,
  "asm": "fcmge v1.4s, v1.4s, #0.0\nfcmge v0.4s, v0.4s, #0.0\nbsl v0.16b, v4.16b, v2.16b\nbsl v1.16b, v5.16b, v3.16b\nret",
  "giasm": "fcmge v0.4s, v0.4s, #0.0\nfcmge v1.4s, v1.4s, #0.0\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, <8 x float> %d, <8 x float> %e) {\n  %c = fcmp ult <8 x float> %a, zeroinitializer\n  %r = select <8 x i1> %c, <8 x float> %d, <8 x float> %e\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ult <8 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x float> %d, <8 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "fcmpult",
  "ty": "<2 x double>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmge v0.2d, v0.2d, v1.2d\nmvn v0.16b, v0.16b\nxtn v0.2s, v0.2d\nret",
  "giasm": "fcmge v0.2d, v0.2d, v1.2d\nmvn v0.16b, v0.16b\nxtn v0.2s, v0.2d\nret",
  "ll": "define <2 x i1> @test(<2 x double> %a, <2 x double> %b) {\n  %r = fcmp ult <2 x double> %a, %b\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ult <2 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "fcmpult",
  "ty": "<2 x double>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmge v0.2d, v0.2d, #0.0\nmvn v0.16b, v0.16b\nxtn v0.2s, v0.2d\nret",
  "giasm": "fcmge v0.2d, v0.2d, #0.0\nmvn v0.16b, v0.16b\nxtn v0.2s, v0.2d\nret",
  "ll": "define <2 x i1> @test(<2 x double> %a) {\n  %r = fcmp ult <2 x double> %a, zeroinitializer\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ult <2 x double> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "selectfcmpult",
  "ty": "<2 x double>",
  "variant": "cmp",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmge v0.2d, v0.2d, v1.2d\nbsl v0.16b, v3.16b, v2.16b\nret",
  "giasm": "fcmge v0.2d, v0.2d, v1.2d\nmvn v0.16b, v0.16b\nbsl v0.16b, v2.16b, v3.16b\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, <2 x double> %b, <2 x double> %d, <2 x double> %e) {\n  %c = fcmp ult <2 x double> %a, %b\n  %r = select <2 x i1> %c, <2 x double> %d, <2 x double> %e\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ult <2 x double> %a, %b\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <2 x i1> %c, <2 x double> %d, <2 x double> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "selectfcmpult",
  "ty": "<2 x double>",
  "variant": "cmp0",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmge v0.2d, v0.2d, #0.0\nbsl v0.16b, v2.16b, v1.16b\nret",
  "giasm": "fcmge v0.2d, v0.2d, #0.0\nmvn v0.16b, v0.16b\nbsl v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, <2 x double> %d, <2 x double> %e) {\n  %c = fcmp ult <2 x double> %a, zeroinitializer\n  %r = select <2 x i1> %c, <2 x double> %d, <2 x double> %e\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ult <2 x double> %a, zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <2 x i1> %c, <2 x double> %d, <2 x double> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "fcmpult",
  "ty": "<4 x double>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 5,
  "gisize": 6,
  "extrasize": 0,
  "asm": "fcmge v1.2d, v1.2d, v3.2d\nfcmge v0.2d, v0.2d, v2.2d\nuzp1 v0.4s, v0.4s, v1.4s\nmvn v0.16b, v0.16b\nxtn v0.4h, v0.4s\nret",
  "giasm": "fcmge v0.2d, v0.2d, v2.2d\nfcmge v1.2d, v1.2d, v3.2d\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nuzp1 v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x double> %a, <4 x double> %b) {\n  %r = fcmp ult <4 x double> %a, %b\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ult <4 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "fcmpult",
  "ty": "<4 x double>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 5,
  "gisize": 6,
  "extrasize": 0,
  "asm": "fcmge v1.2d, v1.2d, #0.0\nfcmge v0.2d, v0.2d, #0.0\nuzp1 v0.4s, v0.4s, v1.4s\nmvn v0.16b, v0.16b\nxtn v0.4h, v0.4s\nret",
  "giasm": "fcmge v0.2d, v0.2d, #0.0\nfcmge v1.2d, v1.2d, #0.0\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nuzp1 v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x double> %a) {\n  %r = fcmp ult <4 x double> %a, zeroinitializer\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ult <4 x double> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "selectfcmpult",
  "ty": "<4 x double>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 10,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 6,
  "extrasize": 0,
  "asm": "fcmge v1.2d, v1.2d, v3.2d\nfcmge v0.2d, v0.2d, v2.2d\nbsl v1.16b, v7.16b, v5.16b\nbsl v0.16b, v6.16b, v4.16b\nret",
  "giasm": "fcmge v0.2d, v0.2d, v2.2d\nfcmge v1.2d, v1.2d, v3.2d\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nbsl v0.16b, v4.16b, v6.16b\nbsl v1.16b, v5.16b, v7.16b\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, <4 x double> %b, <4 x double> %d, <4 x double> %e) {\n  %c = fcmp ult <4 x double> %a, %b\n  %r = select <4 x i1> %c, <4 x double> %d, <4 x double> %e\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ult <4 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x double> %d, <4 x double> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "selectfcmpult",
  "ty": "<4 x double>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 10,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 6,
  "extrasize": 0,
  "asm": "fcmge v1.2d, v1.2d, #0.0\nfcmge v0.2d, v0.2d, #0.0\nbsl v0.16b, v4.16b, v2.16b\nbsl v1.16b, v5.16b, v3.16b\nret",
  "giasm": "fcmge v0.2d, v0.2d, #0.0\nfcmge v1.2d, v1.2d, #0.0\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, <4 x double> %d, <4 x double> %e) {\n  %c = fcmp ult <4 x double> %a, zeroinitializer\n  %r = select <4 x i1> %c, <4 x double> %d, <4 x double> %e\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ult <4 x double> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x double> %d, <4 x double> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "fcmpule",
  "ty": "half",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp h0, h1\ncset w0, le\nret",
  "giasm": "fcmp h0, h1\ncset w0, le\nret",
  "ll": "define i1 @test(half %a, half %b) {\n  %r = fcmp ule half %a, %b\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ule half %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "fcmpule",
  "ty": "half",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp h0, #0.0\ncset w0, le\nret",
  "giasm": "fcmp h0, #0.0\ncset w0, le\nret",
  "ll": "define i1 @test(half %a) {\n  %r = fcmp ule half %a, 0.0\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ule half %a, 0xH0000\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "selectfcmpule",
  "ty": "half",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 5,
  "extrasize": 0,
  "asm": "fcmp h0, h1\nfcsel h0, h2, h3, le\nret",
  "giasm": "fcmp h0, h1\nfmov w8, s2\nfmov w9, s3\ncsel w8, w8, w9, le\nfmov s0, w8\nret",
  "ll": "define half @test(half %a, half %b, half %d, half %e) {\n  %c = fcmp ule half %a, %b\n  %r = select i1 %c, half %d, half %e\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ule half %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, half %d, half %e\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "selectfcmpule",
  "ty": "half",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 5,
  "extrasize": 0,
  "asm": "fcmp h0, #0.0\nfcsel h0, h1, h2, le\nret",
  "giasm": "fcmp h0, #0.0\nfmov w8, s1\nfmov w9, s2\ncsel w8, w8, w9, le\nfmov s0, w8\nret",
  "ll": "define half @test(half %a, half %d, half %e) {\n  %c = fcmp ule half %a, 0.0\n  %r = select i1 %c, half %d, half %e\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ule half %a, 0xH0000\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, half %d, half %e\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "fcmpule",
  "ty": "float",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp s0, s1\ncset w0, le\nret",
  "giasm": "fcmp s0, s1\ncset w0, le\nret",
  "ll": "define i1 @test(float %a, float %b) {\n  %r = fcmp ule float %a, %b\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ule float %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "fcmpule",
  "ty": "float",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp s0, #0.0\ncset w0, le\nret",
  "giasm": "fcmp s0, #0.0\ncset w0, le\nret",
  "ll": "define i1 @test(float %a) {\n  %r = fcmp ule float %a, 0.0\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ule float %a, 0.000000e+00\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "selectfcmpule",
  "ty": "float",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp s0, s1\nfcsel s0, s2, s3, le\nret",
  "giasm": "fcmp s0, s1\nfcsel s0, s2, s3, le\nret",
  "ll": "define float @test(float %a, float %b, float %d, float %e) {\n  %c = fcmp ule float %a, %b\n  %r = select i1 %c, float %d, float %e\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ule float %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, float %d, float %e\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "selectfcmpule",
  "ty": "float",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp s0, #0.0\nfcsel s0, s1, s2, le\nret",
  "giasm": "fcmp s0, #0.0\nfcsel s0, s1, s2, le\nret",
  "ll": "define float @test(float %a, float %d, float %e) {\n  %c = fcmp ule float %a, 0.0\n  %r = select i1 %c, float %d, float %e\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ule float %a, 0.000000e+00\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, float %d, float %e\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "fcmpule",
  "ty": "double",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp d0, d1\ncset w0, le\nret",
  "giasm": "fcmp d0, d1\ncset w0, le\nret",
  "ll": "define i1 @test(double %a, double %b) {\n  %r = fcmp ule double %a, %b\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ule double %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "fcmpule",
  "ty": "double",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp d0, #0.0\ncset w0, le\nret",
  "giasm": "fcmp d0, #0.0\ncset w0, le\nret",
  "ll": "define i1 @test(double %a) {\n  %r = fcmp ule double %a, 0.0\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ule double %a, 0.000000e+00\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "selectfcmpule",
  "ty": "double",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp d0, d1\nfcsel d0, d2, d3, le\nret",
  "giasm": "fcmp d0, d1\nfcsel d0, d2, d3, le\nret",
  "ll": "define double @test(double %a, double %b, double %d, double %e) {\n  %c = fcmp ule double %a, %b\n  %r = select i1 %c, double %d, double %e\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ule double %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, double %d, double %e\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "selectfcmpule",
  "ty": "double",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp d0, #0.0\nfcsel d0, d1, d2, le\nret",
  "giasm": "fcmp d0, #0.0\nfcsel d0, d1, d2, le\nret",
  "ll": "define double @test(double %a, double %d, double %e) {\n  %c = fcmp ule double %a, 0.0\n  %r = select i1 %c, double %d, double %e\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ule double %a, 0.000000e+00\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, double %d, double %e\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "fcmpule",
  "ty": "<4 x half>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmgt v0.4h, v0.4h, v1.4h\nmvn v0.8b, v0.8b\nret",
  "giasm": "fcmgt v0.4h, v0.4h, v1.4h\nmvn v0.8b, v0.8b\nret",
  "ll": "define <4 x i1> @test(<4 x half> %a, <4 x half> %b) {\n  %r = fcmp ule <4 x half> %a, %b\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ule <4 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "fcmpule",
  "ty": "<4 x half>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmgt v0.4h, v0.4h, #0.0\nmvn v0.8b, v0.8b\nret",
  "giasm": "fcmgt v0.4h, v0.4h, #0.0\nmvn v0.8b, v0.8b\nret",
  "ll": "define <4 x i1> @test(<4 x half> %a) {\n  %r = fcmp ule <4 x half> %a, zeroinitializer\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ule <4 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "selectfcmpule",
  "ty": "<4 x half>",
  "variant": "cmp",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmgt v0.4h, v0.4h, v1.4h\nbsl v0.8b, v3.8b, v2.8b\nret",
  "giasm": "fcmgt v0.4h, v0.4h, v1.4h\nmvn v0.8b, v0.8b\nbsl v0.8b, v2.8b, v3.8b\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, <4 x half> %b, <4 x half> %d, <4 x half> %e) {\n  %c = fcmp ule <4 x half> %a, %b\n  %r = select <4 x i1> %c, <4 x half> %d, <4 x half> %e\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ule <4 x half> %a, %b\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <4 x i1> %c, <4 x half> %d, <4 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "selectfcmpule",
  "ty": "<4 x half>",
  "variant": "cmp0",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmgt v0.4h, v0.4h, #0.0\nbsl v0.8b, v2.8b, v1.8b\nret",
  "giasm": "fcmgt v0.4h, v0.4h, #0.0\nmvn v0.8b, v0.8b\nbsl v0.8b, v1.8b, v2.8b\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, <4 x half> %d, <4 x half> %e) {\n  %c = fcmp ule <4 x half> %a, zeroinitializer\n  %r = select <4 x i1> %c, <4 x half> %d, <4 x half> %e\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ule <4 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <4 x i1> %c, <4 x half> %d, <4 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "fcmpule",
  "ty": "<8 x half>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmgt v0.8h, v0.8h, v1.8h\nmvn v0.16b, v0.16b\nxtn v0.8b, v0.8h\nret",
  "giasm": "fcmgt v0.8h, v0.8h, v1.8h\nmvn v0.16b, v0.16b\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x half> %a, <8 x half> %b) {\n  %r = fcmp ule <8 x half> %a, %b\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ule <8 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "fcmpule",
  "ty": "<8 x half>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmgt v0.8h, v0.8h, #0.0\nmvn v0.16b, v0.16b\nxtn v0.8b, v0.8h\nret",
  "giasm": "fcmgt v0.8h, v0.8h, #0.0\nmvn v0.16b, v0.16b\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x half> %a) {\n  %r = fcmp ule <8 x half> %a, zeroinitializer\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ule <8 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "selectfcmpule",
  "ty": "<8 x half>",
  "variant": "cmp",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmgt v0.8h, v0.8h, v1.8h\nbsl v0.16b, v3.16b, v2.16b\nret",
  "giasm": "fcmgt v0.8h, v0.8h, v1.8h\nmvn v0.16b, v0.16b\nbsl v0.16b, v2.16b, v3.16b\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, <8 x half> %b, <8 x half> %d, <8 x half> %e) {\n  %c = fcmp ule <8 x half> %a, %b\n  %r = select <8 x i1> %c, <8 x half> %d, <8 x half> %e\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ule <8 x half> %a, %b\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <8 x i1> %c, <8 x half> %d, <8 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "selectfcmpule",
  "ty": "<8 x half>",
  "variant": "cmp0",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmgt v0.8h, v0.8h, #0.0\nbsl v0.16b, v2.16b, v1.16b\nret",
  "giasm": "fcmgt v0.8h, v0.8h, #0.0\nmvn v0.16b, v0.16b\nbsl v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, <8 x half> %d, <8 x half> %e) {\n  %c = fcmp ule <8 x half> %a, zeroinitializer\n  %r = select <8 x i1> %c, <8 x half> %d, <8 x half> %e\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ule <8 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <8 x i1> %c, <8 x half> %d, <8 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "fcmpule",
  "ty": "<16 x half>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 5,
  "extrasize": 0,
  "asm": "fcmgt v1.8h, v1.8h, v3.8h\nfcmgt v0.8h, v0.8h, v2.8h\nuzp1 v0.16b, v0.16b, v1.16b\nmvn v0.16b, v0.16b\nret",
  "giasm": "fcmgt v0.8h, v0.8h, v2.8h\nfcmgt v1.8h, v1.8h, v3.8h\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nuzp1 v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <16 x i1> @test(<16 x half> %a, <16 x half> %b) {\n  %r = fcmp ule <16 x half> %a, %b\n  ret <16 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ule <16 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i1> %r"
 },
 {
  "instr": "fcmpule",
  "ty": "<16 x half>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 5,
  "extrasize": 0,
  "asm": "fcmgt v1.8h, v1.8h, #0.0\nfcmgt v0.8h, v0.8h, #0.0\nuzp1 v0.16b, v0.16b, v1.16b\nmvn v0.16b, v0.16b\nret",
  "giasm": "fcmgt v0.8h, v0.8h, #0.0\nfcmgt v1.8h, v1.8h, #0.0\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nuzp1 v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <16 x i1> @test(<16 x half> %a) {\n  %r = fcmp ule <16 x half> %a, zeroinitializer\n  ret <16 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ule <16 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i1> %r"
 },
 {
  "instr": "selectfcmpule",
  "ty": "<16 x half>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 46,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 6,
  "extrasize": 0,
  "asm": "fcmgt v1.8h, v1.8h, v3.8h\nfcmgt v0.8h, v0.8h, v2.8h\nbsl v1.16b, v7.16b, v5.16b\nbsl v0.16b, v6.16b, v4.16b\nret",
  "giasm": "fcmgt v0.8h, v0.8h, v2.8h\nfcmgt v1.8h, v1.8h, v3.8h\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nbsl v0.16b, v4.16b, v6.16b\nbsl v1.16b, v5.16b, v7.16b\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, <16 x half> %b, <16 x half> %d, <16 x half> %e) {\n  %c = fcmp ule <16 x half> %a, %b\n  %r = select <16 x i1> %c, <16 x half> %d, <16 x half> %e\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ule <16 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <16 x i1> %c, <16 x half> %d, <16 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "selectfcmpule",
  "ty": "<16 x half>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 46,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 6,
  "extrasize": 0,
  "asm": "fcmgt v1.8h, v1.8h, #0.0\nfcmgt v0.8h, v0.8h, #0.0\nbsl v0.16b, v4.16b, v2.16b\nbsl v1.16b, v5.16b, v3.16b\nret",
  "giasm": "fcmgt v0.8h, v0.8h, #0.0\nfcmgt v1.8h, v1.8h, #0.0\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, <16 x half> %d, <16 x half> %e) {\n  %c = fcmp ule <16 x half> %a, zeroinitializer\n  %r = select <16 x i1> %c, <16 x half> %d, <16 x half> %e\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ule <16 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <16 x i1> %c, <16 x half> %d, <16 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "fcmpule",
  "ty": "<2 x float>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmgt v0.2s, v0.2s, v1.2s\nmvn v0.8b, v0.8b\nret",
  "giasm": "fcmgt v0.2s, v0.2s, v1.2s\nmvn v0.8b, v0.8b\nret",
  "ll": "define <2 x i1> @test(<2 x float> %a, <2 x float> %b) {\n  %r = fcmp ule <2 x float> %a, %b\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ule <2 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "fcmpule",
  "ty": "<2 x float>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmgt v0.2s, v0.2s, #0.0\nmvn v0.8b, v0.8b\nret",
  "giasm": "fcmgt v0.2s, v0.2s, #0.0\nmvn v0.8b, v0.8b\nret",
  "ll": "define <2 x i1> @test(<2 x float> %a) {\n  %r = fcmp ule <2 x float> %a, zeroinitializer\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ule <2 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "selectfcmpule",
  "ty": "<2 x float>",
  "variant": "cmp",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmgt v0.2s, v0.2s, v1.2s\nbsl v0.8b, v3.8b, v2.8b\nret",
  "giasm": "fcmgt v0.2s, v0.2s, v1.2s\nmvn v0.8b, v0.8b\nbsl v0.8b, v2.8b, v3.8b\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, <2 x float> %b, <2 x float> %d, <2 x float> %e) {\n  %c = fcmp ule <2 x float> %a, %b\n  %r = select <2 x i1> %c, <2 x float> %d, <2 x float> %e\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ule <2 x float> %a, %b\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <2 x i1> %c, <2 x float> %d, <2 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "selectfcmpule",
  "ty": "<2 x float>",
  "variant": "cmp0",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmgt v0.2s, v0.2s, #0.0\nbsl v0.8b, v2.8b, v1.8b\nret",
  "giasm": "fcmgt v0.2s, v0.2s, #0.0\nmvn v0.8b, v0.8b\nbsl v0.8b, v1.8b, v2.8b\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, <2 x float> %d, <2 x float> %e) {\n  %c = fcmp ule <2 x float> %a, zeroinitializer\n  %r = select <2 x i1> %c, <2 x float> %d, <2 x float> %e\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ule <2 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <2 x i1> %c, <2 x float> %d, <2 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "fcmpule",
  "ty": "<4 x float>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmgt v0.4s, v0.4s, v1.4s\nmvn v0.16b, v0.16b\nxtn v0.4h, v0.4s\nret",
  "giasm": "fcmgt v0.4s, v0.4s, v1.4s\nmvn v0.16b, v0.16b\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x float> %a, <4 x float> %b) {\n  %r = fcmp ule <4 x float> %a, %b\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ule <4 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "fcmpule",
  "ty": "<4 x float>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmgt v0.4s, v0.4s, #0.0\nmvn v0.16b, v0.16b\nxtn v0.4h, v0.4s\nret",
  "giasm": "fcmgt v0.4s, v0.4s, #0.0\nmvn v0.16b, v0.16b\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x float> %a) {\n  %r = fcmp ule <4 x float> %a, zeroinitializer\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ule <4 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "selectfcmpule",
  "ty": "<4 x float>",
  "variant": "cmp",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmgt v0.4s, v0.4s, v1.4s\nbsl v0.16b, v3.16b, v2.16b\nret",
  "giasm": "fcmgt v0.4s, v0.4s, v1.4s\nmvn v0.16b, v0.16b\nbsl v0.16b, v2.16b, v3.16b\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, <4 x float> %b, <4 x float> %d, <4 x float> %e) {\n  %c = fcmp ule <4 x float> %a, %b\n  %r = select <4 x i1> %c, <4 x float> %d, <4 x float> %e\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ule <4 x float> %a, %b\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <4 x i1> %c, <4 x float> %d, <4 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "selectfcmpule",
  "ty": "<4 x float>",
  "variant": "cmp0",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmgt v0.4s, v0.4s, #0.0\nbsl v0.16b, v2.16b, v1.16b\nret",
  "giasm": "fcmgt v0.4s, v0.4s, #0.0\nmvn v0.16b, v0.16b\nbsl v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, <4 x float> %d, <4 x float> %e) {\n  %c = fcmp ule <4 x float> %a, zeroinitializer\n  %r = select <4 x i1> %c, <4 x float> %d, <4 x float> %e\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ule <4 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <4 x i1> %c, <4 x float> %d, <4 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "fcmpule",
  "ty": "<8 x float>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 5,
  "gisize": 6,
  "extrasize": 0,
  "asm": "fcmgt v1.4s, v1.4s, v3.4s\nfcmgt v0.4s, v0.4s, v2.4s\nuzp1 v0.8h, v0.8h, v1.8h\nmvn v0.16b, v0.16b\nxtn v0.8b, v0.8h\nret",
  "giasm": "fcmgt v0.4s, v0.4s, v2.4s\nfcmgt v1.4s, v1.4s, v3.4s\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nuzp1 v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x float> %a, <8 x float> %b) {\n  %r = fcmp ule <8 x float> %a, %b\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ule <8 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "fcmpule",
  "ty": "<8 x float>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 5,
  "gisize": 6,
  "extrasize": 0,
  "asm": "fcmgt v1.4s, v1.4s, #0.0\nfcmgt v0.4s, v0.4s, #0.0\nuzp1 v0.8h, v0.8h, v1.8h\nmvn v0.16b, v0.16b\nxtn v0.8b, v0.8h\nret",
  "giasm": "fcmgt v0.4s, v0.4s, #0.0\nfcmgt v1.4s, v1.4s, #0.0\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nuzp1 v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x float> %a) {\n  %r = fcmp ule <8 x float> %a, zeroinitializer\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ule <8 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "selectfcmpule",
  "ty": "<8 x float>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 22,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 6,
  "extrasize": 0,
  "asm": "fcmgt v1.4s, v1.4s, v3.4s\nfcmgt v0.4s, v0.4s, v2.4s\nbsl v1.16b, v7.16b, v5.16b\nbsl v0.16b, v6.16b, v4.16b\nret",
  "giasm": "fcmgt v0.4s, v0.4s, v2.4s\nfcmgt v1.4s, v1.4s, v3.4s\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nbsl v0.16b, v4.16b, v6.16b\nbsl v1.16b, v5.16b, v7.16b\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, <8 x float> %b, <8 x float> %d, <8 x float> %e) {\n  %c = fcmp ule <8 x float> %a, %b\n  %r = select <8 x i1> %c, <8 x float> %d, <8 x float> %e\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ule <8 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x float> %d, <8 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "selectfcmpule",
  "ty": "<8 x float>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 22,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 6,
  "extrasize": 0,
  "asm": "fcmgt v1.4s, v1.4s, #0.0\nfcmgt v0.4s, v0.4s, #0.0\nbsl v0.16b, v4.16b, v2.16b\nbsl v1.16b, v5.16b, v3.16b\nret",
  "giasm": "fcmgt v0.4s, v0.4s, #0.0\nfcmgt v1.4s, v1.4s, #0.0\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, <8 x float> %d, <8 x float> %e) {\n  %c = fcmp ule <8 x float> %a, zeroinitializer\n  %r = select <8 x i1> %c, <8 x float> %d, <8 x float> %e\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ule <8 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x float> %d, <8 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "fcmpule",
  "ty": "<2 x double>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmgt v0.2d, v0.2d, v1.2d\nmvn v0.16b, v0.16b\nxtn v0.2s, v0.2d\nret",
  "giasm": "fcmgt v0.2d, v0.2d, v1.2d\nmvn v0.16b, v0.16b\nxtn v0.2s, v0.2d\nret",
  "ll": "define <2 x i1> @test(<2 x double> %a, <2 x double> %b) {\n  %r = fcmp ule <2 x double> %a, %b\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ule <2 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "fcmpule",
  "ty": "<2 x double>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmgt v0.2d, v0.2d, #0.0\nmvn v0.16b, v0.16b\nxtn v0.2s, v0.2d\nret",
  "giasm": "fcmgt v0.2d, v0.2d, #0.0\nmvn v0.16b, v0.16b\nxtn v0.2s, v0.2d\nret",
  "ll": "define <2 x i1> @test(<2 x double> %a) {\n  %r = fcmp ule <2 x double> %a, zeroinitializer\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ule <2 x double> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "selectfcmpule",
  "ty": "<2 x double>",
  "variant": "cmp",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmgt v0.2d, v0.2d, v1.2d\nbsl v0.16b, v3.16b, v2.16b\nret",
  "giasm": "fcmgt v0.2d, v0.2d, v1.2d\nmvn v0.16b, v0.16b\nbsl v0.16b, v2.16b, v3.16b\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, <2 x double> %b, <2 x double> %d, <2 x double> %e) {\n  %c = fcmp ule <2 x double> %a, %b\n  %r = select <2 x i1> %c, <2 x double> %d, <2 x double> %e\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ule <2 x double> %a, %b\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <2 x i1> %c, <2 x double> %d, <2 x double> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "selectfcmpule",
  "ty": "<2 x double>",
  "variant": "cmp0",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmgt v0.2d, v0.2d, #0.0\nbsl v0.16b, v2.16b, v1.16b\nret",
  "giasm": "fcmgt v0.2d, v0.2d, #0.0\nmvn v0.16b, v0.16b\nbsl v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, <2 x double> %d, <2 x double> %e) {\n  %c = fcmp ule <2 x double> %a, zeroinitializer\n  %r = select <2 x i1> %c, <2 x double> %d, <2 x double> %e\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ule <2 x double> %a, zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <2 x i1> %c, <2 x double> %d, <2 x double> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "fcmpule",
  "ty": "<4 x double>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 5,
  "gisize": 6,
  "extrasize": 0,
  "asm": "fcmgt v1.2d, v1.2d, v3.2d\nfcmgt v0.2d, v0.2d, v2.2d\nuzp1 v0.4s, v0.4s, v1.4s\nmvn v0.16b, v0.16b\nxtn v0.4h, v0.4s\nret",
  "giasm": "fcmgt v0.2d, v0.2d, v2.2d\nfcmgt v1.2d, v1.2d, v3.2d\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nuzp1 v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x double> %a, <4 x double> %b) {\n  %r = fcmp ule <4 x double> %a, %b\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ule <4 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "fcmpule",
  "ty": "<4 x double>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 5,
  "gisize": 6,
  "extrasize": 0,
  "asm": "fcmgt v1.2d, v1.2d, #0.0\nfcmgt v0.2d, v0.2d, #0.0\nuzp1 v0.4s, v0.4s, v1.4s\nmvn v0.16b, v0.16b\nxtn v0.4h, v0.4s\nret",
  "giasm": "fcmgt v0.2d, v0.2d, #0.0\nfcmgt v1.2d, v1.2d, #0.0\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nuzp1 v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x double> %a) {\n  %r = fcmp ule <4 x double> %a, zeroinitializer\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp ule <4 x double> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "selectfcmpule",
  "ty": "<4 x double>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 10,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 6,
  "extrasize": 0,
  "asm": "fcmgt v1.2d, v1.2d, v3.2d\nfcmgt v0.2d, v0.2d, v2.2d\nbsl v1.16b, v7.16b, v5.16b\nbsl v0.16b, v6.16b, v4.16b\nret",
  "giasm": "fcmgt v0.2d, v0.2d, v2.2d\nfcmgt v1.2d, v1.2d, v3.2d\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nbsl v0.16b, v4.16b, v6.16b\nbsl v1.16b, v5.16b, v7.16b\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, <4 x double> %b, <4 x double> %d, <4 x double> %e) {\n  %c = fcmp ule <4 x double> %a, %b\n  %r = select <4 x i1> %c, <4 x double> %d, <4 x double> %e\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ule <4 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x double> %d, <4 x double> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "selectfcmpule",
  "ty": "<4 x double>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 10,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 6,
  "extrasize": 0,
  "asm": "fcmgt v1.2d, v1.2d, #0.0\nfcmgt v0.2d, v0.2d, #0.0\nbsl v0.16b, v4.16b, v2.16b\nbsl v1.16b, v5.16b, v3.16b\nret",
  "giasm": "fcmgt v0.2d, v0.2d, #0.0\nfcmgt v1.2d, v1.2d, #0.0\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, <4 x double> %d, <4 x double> %e) {\n  %c = fcmp ule <4 x double> %a, zeroinitializer\n  %r = select <4 x i1> %c, <4 x double> %d, <4 x double> %e\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp ule <4 x double> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x double> %d, <4 x double> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "fcmpune",
  "ty": "half",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp h0, h1\ncset w0, ne\nret",
  "giasm": "fcmp h0, h1\ncset w0, ne\nret",
  "ll": "define i1 @test(half %a, half %b) {\n  %r = fcmp une half %a, %b\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp une half %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "fcmpune",
  "ty": "half",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp h0, #0.0\ncset w0, ne\nret",
  "giasm": "fcmp h0, #0.0\ncset w0, ne\nret",
  "ll": "define i1 @test(half %a) {\n  %r = fcmp une half %a, 0.0\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp une half %a, 0xH0000\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "selectfcmpune",
  "ty": "half",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 5,
  "extrasize": 0,
  "asm": "fcmp h0, h1\nfcsel h0, h2, h3, ne\nret",
  "giasm": "fcmp h0, h1\nfmov w8, s2\nfmov w9, s3\ncsel w8, w8, w9, ne\nfmov s0, w8\nret",
  "ll": "define half @test(half %a, half %b, half %d, half %e) {\n  %c = fcmp une half %a, %b\n  %r = select i1 %c, half %d, half %e\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp une half %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, half %d, half %e\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "selectfcmpune",
  "ty": "half",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 5,
  "extrasize": 0,
  "asm": "fcmp h0, #0.0\nfcsel h0, h1, h2, ne\nret",
  "giasm": "fcmp h0, #0.0\nfmov w8, s1\nfmov w9, s2\ncsel w8, w8, w9, ne\nfmov s0, w8\nret",
  "ll": "define half @test(half %a, half %d, half %e) {\n  %c = fcmp une half %a, 0.0\n  %r = select i1 %c, half %d, half %e\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp une half %a, 0xH0000\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, half %d, half %e\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "fcmpune",
  "ty": "float",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp s0, s1\ncset w0, ne\nret",
  "giasm": "fcmp s0, s1\ncset w0, ne\nret",
  "ll": "define i1 @test(float %a, float %b) {\n  %r = fcmp une float %a, %b\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp une float %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "fcmpune",
  "ty": "float",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp s0, #0.0\ncset w0, ne\nret",
  "giasm": "fcmp s0, #0.0\ncset w0, ne\nret",
  "ll": "define i1 @test(float %a) {\n  %r = fcmp une float %a, 0.0\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp une float %a, 0.000000e+00\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "selectfcmpune",
  "ty": "float",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp s0, s1\nfcsel s0, s2, s3, ne\nret",
  "giasm": "fcmp s0, s1\nfcsel s0, s2, s3, ne\nret",
  "ll": "define float @test(float %a, float %b, float %d, float %e) {\n  %c = fcmp une float %a, %b\n  %r = select i1 %c, float %d, float %e\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp une float %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, float %d, float %e\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "selectfcmpune",
  "ty": "float",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp s0, #0.0\nfcsel s0, s1, s2, ne\nret",
  "giasm": "fcmp s0, #0.0\nfcsel s0, s1, s2, ne\nret",
  "ll": "define float @test(float %a, float %d, float %e) {\n  %c = fcmp une float %a, 0.0\n  %r = select i1 %c, float %d, float %e\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp une float %a, 0.000000e+00\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, float %d, float %e\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "fcmpune",
  "ty": "double",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp d0, d1\ncset w0, ne\nret",
  "giasm": "fcmp d0, d1\ncset w0, ne\nret",
  "ll": "define i1 @test(double %a, double %b) {\n  %r = fcmp une double %a, %b\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp une double %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "fcmpune",
  "ty": "double",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp d0, #0.0\ncset w0, ne\nret",
  "giasm": "fcmp d0, #0.0\ncset w0, ne\nret",
  "ll": "define i1 @test(double %a) {\n  %r = fcmp une double %a, 0.0\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp une double %a, 0.000000e+00\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "selectfcmpune",
  "ty": "double",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp d0, d1\nfcsel d0, d2, d3, ne\nret",
  "giasm": "fcmp d0, d1\nfcsel d0, d2, d3, ne\nret",
  "ll": "define double @test(double %a, double %b, double %d, double %e) {\n  %c = fcmp une double %a, %b\n  %r = select i1 %c, double %d, double %e\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp une double %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, double %d, double %e\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "selectfcmpune",
  "ty": "double",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp d0, #0.0\nfcsel d0, d1, d2, ne\nret",
  "giasm": "fcmp d0, #0.0\nfcsel d0, d1, d2, ne\nret",
  "ll": "define double @test(double %a, double %d, double %e) {\n  %c = fcmp une double %a, 0.0\n  %r = select i1 %c, double %d, double %e\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp une double %a, 0.000000e+00\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, double %d, double %e\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "fcmpune",
  "ty": "<4 x half>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmeq v0.4h, v0.4h, v1.4h\nmvn v0.8b, v0.8b\nret",
  "giasm": "fcmeq v0.4h, v0.4h, v1.4h\nmvn v0.8b, v0.8b\nret",
  "ll": "define <4 x i1> @test(<4 x half> %a, <4 x half> %b) {\n  %r = fcmp une <4 x half> %a, %b\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp une <4 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "fcmpune",
  "ty": "<4 x half>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmeq v0.4h, v0.4h, #0.0\nmvn v0.8b, v0.8b\nret",
  "giasm": "fcmeq v0.4h, v0.4h, #0.0\nmvn v0.8b, v0.8b\nret",
  "ll": "define <4 x i1> @test(<4 x half> %a) {\n  %r = fcmp une <4 x half> %a, zeroinitializer\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp une <4 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "selectfcmpune",
  "ty": "<4 x half>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmeq v0.4h, v0.4h, v1.4h\nbsl v0.8b, v3.8b, v2.8b\nret",
  "giasm": "fcmeq v0.4h, v0.4h, v1.4h\nmvn v0.8b, v0.8b\nbsl v0.8b, v2.8b, v3.8b\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, <4 x half> %b, <4 x half> %d, <4 x half> %e) {\n  %c = fcmp une <4 x half> %a, %b\n  %r = select <4 x i1> %c, <4 x half> %d, <4 x half> %e\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp une <4 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x half> %d, <4 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "selectfcmpune",
  "ty": "<4 x half>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmeq v0.4h, v0.4h, #0.0\nbsl v0.8b, v2.8b, v1.8b\nret",
  "giasm": "fcmeq v0.4h, v0.4h, #0.0\nmvn v0.8b, v0.8b\nbsl v0.8b, v1.8b, v2.8b\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, <4 x half> %d, <4 x half> %e) {\n  %c = fcmp une <4 x half> %a, zeroinitializer\n  %r = select <4 x i1> %c, <4 x half> %d, <4 x half> %e\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp une <4 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x half> %d, <4 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "fcmpune",
  "ty": "<8 x half>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmeq v0.8h, v0.8h, v1.8h\nmvn v0.16b, v0.16b\nxtn v0.8b, v0.8h\nret",
  "giasm": "fcmeq v0.8h, v0.8h, v1.8h\nmvn v0.16b, v0.16b\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x half> %a, <8 x half> %b) {\n  %r = fcmp une <8 x half> %a, %b\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp une <8 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "fcmpune",
  "ty": "<8 x half>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmeq v0.8h, v0.8h, #0.0\nmvn v0.16b, v0.16b\nxtn v0.8b, v0.8h\nret",
  "giasm": "fcmeq v0.8h, v0.8h, #0.0\nmvn v0.16b, v0.16b\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x half> %a) {\n  %r = fcmp une <8 x half> %a, zeroinitializer\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp une <8 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "selectfcmpune",
  "ty": "<8 x half>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmeq v0.8h, v0.8h, v1.8h\nbsl v0.16b, v3.16b, v2.16b\nret",
  "giasm": "fcmeq v0.8h, v0.8h, v1.8h\nmvn v0.16b, v0.16b\nbsl v0.16b, v2.16b, v3.16b\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, <8 x half> %b, <8 x half> %d, <8 x half> %e) {\n  %c = fcmp une <8 x half> %a, %b\n  %r = select <8 x i1> %c, <8 x half> %d, <8 x half> %e\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp une <8 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x half> %d, <8 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "selectfcmpune",
  "ty": "<8 x half>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmeq v0.8h, v0.8h, #0.0\nbsl v0.16b, v2.16b, v1.16b\nret",
  "giasm": "fcmeq v0.8h, v0.8h, #0.0\nmvn v0.16b, v0.16b\nbsl v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, <8 x half> %d, <8 x half> %e) {\n  %c = fcmp une <8 x half> %a, zeroinitializer\n  %r = select <8 x i1> %c, <8 x half> %d, <8 x half> %e\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp une <8 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x half> %d, <8 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "fcmpune",
  "ty": "<16 x half>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 5,
  "extrasize": 0,
  "asm": "fcmeq v1.8h, v1.8h, v3.8h\nfcmeq v0.8h, v0.8h, v2.8h\nuzp1 v0.16b, v0.16b, v1.16b\nmvn v0.16b, v0.16b\nret",
  "giasm": "fcmeq v0.8h, v0.8h, v2.8h\nfcmeq v1.8h, v1.8h, v3.8h\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nuzp1 v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <16 x i1> @test(<16 x half> %a, <16 x half> %b) {\n  %r = fcmp une <16 x half> %a, %b\n  ret <16 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp une <16 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i1> %r"
 },
 {
  "instr": "fcmpune",
  "ty": "<16 x half>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 5,
  "extrasize": 0,
  "asm": "fcmeq v1.8h, v1.8h, #0.0\nfcmeq v0.8h, v0.8h, #0.0\nuzp1 v0.16b, v0.16b, v1.16b\nmvn v0.16b, v0.16b\nret",
  "giasm": "fcmeq v0.8h, v0.8h, #0.0\nfcmeq v1.8h, v1.8h, #0.0\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nuzp1 v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <16 x i1> @test(<16 x half> %a) {\n  %r = fcmp une <16 x half> %a, zeroinitializer\n  ret <16 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp une <16 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i1> %r"
 },
 {
  "instr": "selectfcmpune",
  "ty": "<16 x half>",
  "variant": "cmp",
  "codesize": 3,
  "thru": 4,
  "lat": 3,
  "sizelat": 3,
  "size": 4,
  "gisize": 6,
  "extrasize": 0,
  "asm": "fcmeq v1.8h, v1.8h, v3.8h\nfcmeq v0.8h, v0.8h, v2.8h\nbsl v1.16b, v7.16b, v5.16b\nbsl v0.16b, v6.16b, v4.16b\nret",
  "giasm": "fcmeq v0.8h, v0.8h, v2.8h\nfcmeq v1.8h, v1.8h, v3.8h\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nbsl v0.16b, v4.16b, v6.16b\nbsl v1.16b, v5.16b, v7.16b\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, <16 x half> %b, <16 x half> %d, <16 x half> %e) {\n  %c = fcmp une <16 x half> %a, %b\n  %r = select <16 x i1> %c, <16 x half> %d, <16 x half> %e\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp une <16 x half> %a, %b\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <16 x i1> %c, <16 x half> %d, <16 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "selectfcmpune",
  "ty": "<16 x half>",
  "variant": "cmp0",
  "codesize": 3,
  "thru": 4,
  "lat": 3,
  "sizelat": 3,
  "size": 4,
  "gisize": 6,
  "extrasize": 0,
  "asm": "fcmeq v1.8h, v1.8h, #0.0\nfcmeq v0.8h, v0.8h, #0.0\nbsl v0.16b, v4.16b, v2.16b\nbsl v1.16b, v5.16b, v3.16b\nret",
  "giasm": "fcmeq v0.8h, v0.8h, #0.0\nfcmeq v1.8h, v1.8h, #0.0\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, <16 x half> %d, <16 x half> %e) {\n  %c = fcmp une <16 x half> %a, zeroinitializer\n  %r = select <16 x i1> %c, <16 x half> %d, <16 x half> %e\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp une <16 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <16 x i1> %c, <16 x half> %d, <16 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "fcmpune",
  "ty": "<2 x float>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmeq v0.2s, v0.2s, v1.2s\nmvn v0.8b, v0.8b\nret",
  "giasm": "fcmeq v0.2s, v0.2s, v1.2s\nmvn v0.8b, v0.8b\nret",
  "ll": "define <2 x i1> @test(<2 x float> %a, <2 x float> %b) {\n  %r = fcmp une <2 x float> %a, %b\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp une <2 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "fcmpune",
  "ty": "<2 x float>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmeq v0.2s, v0.2s, #0.0\nmvn v0.8b, v0.8b\nret",
  "giasm": "fcmeq v0.2s, v0.2s, #0.0\nmvn v0.8b, v0.8b\nret",
  "ll": "define <2 x i1> @test(<2 x float> %a) {\n  %r = fcmp une <2 x float> %a, zeroinitializer\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp une <2 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "selectfcmpune",
  "ty": "<2 x float>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmeq v0.2s, v0.2s, v1.2s\nbsl v0.8b, v3.8b, v2.8b\nret",
  "giasm": "fcmeq v0.2s, v0.2s, v1.2s\nmvn v0.8b, v0.8b\nbsl v0.8b, v2.8b, v3.8b\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, <2 x float> %b, <2 x float> %d, <2 x float> %e) {\n  %c = fcmp une <2 x float> %a, %b\n  %r = select <2 x i1> %c, <2 x float> %d, <2 x float> %e\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp une <2 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <2 x i1> %c, <2 x float> %d, <2 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "selectfcmpune",
  "ty": "<2 x float>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmeq v0.2s, v0.2s, #0.0\nbsl v0.8b, v2.8b, v1.8b\nret",
  "giasm": "fcmeq v0.2s, v0.2s, #0.0\nmvn v0.8b, v0.8b\nbsl v0.8b, v1.8b, v2.8b\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, <2 x float> %d, <2 x float> %e) {\n  %c = fcmp une <2 x float> %a, zeroinitializer\n  %r = select <2 x i1> %c, <2 x float> %d, <2 x float> %e\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp une <2 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <2 x i1> %c, <2 x float> %d, <2 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "fcmpune",
  "ty": "<4 x float>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmeq v0.4s, v0.4s, v1.4s\nmvn v0.16b, v0.16b\nxtn v0.4h, v0.4s\nret",
  "giasm": "fcmeq v0.4s, v0.4s, v1.4s\nmvn v0.16b, v0.16b\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x float> %a, <4 x float> %b) {\n  %r = fcmp une <4 x float> %a, %b\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp une <4 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "fcmpune",
  "ty": "<4 x float>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmeq v0.4s, v0.4s, #0.0\nmvn v0.16b, v0.16b\nxtn v0.4h, v0.4s\nret",
  "giasm": "fcmeq v0.4s, v0.4s, #0.0\nmvn v0.16b, v0.16b\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x float> %a) {\n  %r = fcmp une <4 x float> %a, zeroinitializer\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp une <4 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "selectfcmpune",
  "ty": "<4 x float>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmeq v0.4s, v0.4s, v1.4s\nbsl v0.16b, v3.16b, v2.16b\nret",
  "giasm": "fcmeq v0.4s, v0.4s, v1.4s\nmvn v0.16b, v0.16b\nbsl v0.16b, v2.16b, v3.16b\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, <4 x float> %b, <4 x float> %d, <4 x float> %e) {\n  %c = fcmp une <4 x float> %a, %b\n  %r = select <4 x i1> %c, <4 x float> %d, <4 x float> %e\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp une <4 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x float> %d, <4 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "selectfcmpune",
  "ty": "<4 x float>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmeq v0.4s, v0.4s, #0.0\nbsl v0.16b, v2.16b, v1.16b\nret",
  "giasm": "fcmeq v0.4s, v0.4s, #0.0\nmvn v0.16b, v0.16b\nbsl v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, <4 x float> %d, <4 x float> %e) {\n  %c = fcmp une <4 x float> %a, zeroinitializer\n  %r = select <4 x i1> %c, <4 x float> %d, <4 x float> %e\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp une <4 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x float> %d, <4 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "fcmpune",
  "ty": "<8 x float>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 5,
  "gisize": 6,
  "extrasize": 0,
  "asm": "fcmeq v1.4s, v1.4s, v3.4s\nfcmeq v0.4s, v0.4s, v2.4s\nuzp1 v0.8h, v0.8h, v1.8h\nmvn v0.16b, v0.16b\nxtn v0.8b, v0.8h\nret",
  "giasm": "fcmeq v0.4s, v0.4s, v2.4s\nfcmeq v1.4s, v1.4s, v3.4s\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nuzp1 v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x float> %a, <8 x float> %b) {\n  %r = fcmp une <8 x float> %a, %b\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp une <8 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "fcmpune",
  "ty": "<8 x float>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 5,
  "gisize": 6,
  "extrasize": 0,
  "asm": "fcmeq v1.4s, v1.4s, #0.0\nfcmeq v0.4s, v0.4s, #0.0\nuzp1 v0.8h, v0.8h, v1.8h\nmvn v0.16b, v0.16b\nxtn v0.8b, v0.8h\nret",
  "giasm": "fcmeq v0.4s, v0.4s, #0.0\nfcmeq v1.4s, v1.4s, #0.0\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nuzp1 v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x float> %a) {\n  %r = fcmp une <8 x float> %a, zeroinitializer\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp une <8 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "selectfcmpune",
  "ty": "<8 x float>",
  "variant": "cmp",
  "codesize": 3,
  "thru": 4,
  "lat": 3,
  "sizelat": 3,
  "size": 4,
  "gisize": 6,
  "extrasize": 0,
  "asm": "fcmeq v1.4s, v1.4s, v3.4s\nfcmeq v0.4s, v0.4s, v2.4s\nbsl v1.16b, v7.16b, v5.16b\nbsl v0.16b, v6.16b, v4.16b\nret",
  "giasm": "fcmeq v0.4s, v0.4s, v2.4s\nfcmeq v1.4s, v1.4s, v3.4s\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nbsl v0.16b, v4.16b, v6.16b\nbsl v1.16b, v5.16b, v7.16b\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, <8 x float> %b, <8 x float> %d, <8 x float> %e) {\n  %c = fcmp une <8 x float> %a, %b\n  %r = select <8 x i1> %c, <8 x float> %d, <8 x float> %e\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp une <8 x float> %a, %b\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <8 x i1> %c, <8 x float> %d, <8 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "selectfcmpune",
  "ty": "<8 x float>",
  "variant": "cmp0",
  "codesize": 3,
  "thru": 4,
  "lat": 3,
  "sizelat": 3,
  "size": 4,
  "gisize": 6,
  "extrasize": 0,
  "asm": "fcmeq v1.4s, v1.4s, #0.0\nfcmeq v0.4s, v0.4s, #0.0\nbsl v0.16b, v4.16b, v2.16b\nbsl v1.16b, v5.16b, v3.16b\nret",
  "giasm": "fcmeq v0.4s, v0.4s, #0.0\nfcmeq v1.4s, v1.4s, #0.0\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, <8 x float> %d, <8 x float> %e) {\n  %c = fcmp une <8 x float> %a, zeroinitializer\n  %r = select <8 x i1> %c, <8 x float> %d, <8 x float> %e\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp une <8 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <8 x i1> %c, <8 x float> %d, <8 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "fcmpune",
  "ty": "<2 x double>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmeq v0.2d, v0.2d, v1.2d\nmvn v0.16b, v0.16b\nxtn v0.2s, v0.2d\nret",
  "giasm": "fcmeq v0.2d, v0.2d, v1.2d\nmvn v0.16b, v0.16b\nxtn v0.2s, v0.2d\nret",
  "ll": "define <2 x i1> @test(<2 x double> %a, <2 x double> %b) {\n  %r = fcmp une <2 x double> %a, %b\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp une <2 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "fcmpune",
  "ty": "<2 x double>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmeq v0.2d, v0.2d, #0.0\nmvn v0.16b, v0.16b\nxtn v0.2s, v0.2d\nret",
  "giasm": "fcmeq v0.2d, v0.2d, #0.0\nmvn v0.16b, v0.16b\nxtn v0.2s, v0.2d\nret",
  "ll": "define <2 x i1> @test(<2 x double> %a) {\n  %r = fcmp une <2 x double> %a, zeroinitializer\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp une <2 x double> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "selectfcmpune",
  "ty": "<2 x double>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmeq v0.2d, v0.2d, v1.2d\nbsl v0.16b, v3.16b, v2.16b\nret",
  "giasm": "fcmeq v0.2d, v0.2d, v1.2d\nmvn v0.16b, v0.16b\nbsl v0.16b, v2.16b, v3.16b\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, <2 x double> %b, <2 x double> %d, <2 x double> %e) {\n  %c = fcmp une <2 x double> %a, %b\n  %r = select <2 x i1> %c, <2 x double> %d, <2 x double> %e\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp une <2 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <2 x i1> %c, <2 x double> %d, <2 x double> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "selectfcmpune",
  "ty": "<2 x double>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmeq v0.2d, v0.2d, #0.0\nbsl v0.16b, v2.16b, v1.16b\nret",
  "giasm": "fcmeq v0.2d, v0.2d, #0.0\nmvn v0.16b, v0.16b\nbsl v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, <2 x double> %d, <2 x double> %e) {\n  %c = fcmp une <2 x double> %a, zeroinitializer\n  %r = select <2 x i1> %c, <2 x double> %d, <2 x double> %e\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp une <2 x double> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <2 x i1> %c, <2 x double> %d, <2 x double> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "fcmpune",
  "ty": "<4 x double>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 5,
  "gisize": 6,
  "extrasize": 0,
  "asm": "fcmeq v1.2d, v1.2d, v3.2d\nfcmeq v0.2d, v0.2d, v2.2d\nuzp1 v0.4s, v0.4s, v1.4s\nmvn v0.16b, v0.16b\nxtn v0.4h, v0.4s\nret",
  "giasm": "fcmeq v0.2d, v0.2d, v2.2d\nfcmeq v1.2d, v1.2d, v3.2d\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nuzp1 v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x double> %a, <4 x double> %b) {\n  %r = fcmp une <4 x double> %a, %b\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp une <4 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "fcmpune",
  "ty": "<4 x double>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 5,
  "gisize": 6,
  "extrasize": 0,
  "asm": "fcmeq v1.2d, v1.2d, #0.0\nfcmeq v0.2d, v0.2d, #0.0\nuzp1 v0.4s, v0.4s, v1.4s\nmvn v0.16b, v0.16b\nxtn v0.4h, v0.4s\nret",
  "giasm": "fcmeq v0.2d, v0.2d, #0.0\nfcmeq v1.2d, v1.2d, #0.0\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nuzp1 v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x double> %a) {\n  %r = fcmp une <4 x double> %a, zeroinitializer\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp une <4 x double> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "selectfcmpune",
  "ty": "<4 x double>",
  "variant": "cmp",
  "codesize": 3,
  "thru": 4,
  "lat": 3,
  "sizelat": 3,
  "size": 4,
  "gisize": 6,
  "extrasize": 0,
  "asm": "fcmeq v1.2d, v1.2d, v3.2d\nfcmeq v0.2d, v0.2d, v2.2d\nbsl v1.16b, v7.16b, v5.16b\nbsl v0.16b, v6.16b, v4.16b\nret",
  "giasm": "fcmeq v0.2d, v0.2d, v2.2d\nfcmeq v1.2d, v1.2d, v3.2d\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nbsl v0.16b, v4.16b, v6.16b\nbsl v1.16b, v5.16b, v7.16b\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, <4 x double> %b, <4 x double> %d, <4 x double> %e) {\n  %c = fcmp une <4 x double> %a, %b\n  %r = select <4 x i1> %c, <4 x double> %d, <4 x double> %e\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp une <4 x double> %a, %b\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <4 x i1> %c, <4 x double> %d, <4 x double> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "selectfcmpune",
  "ty": "<4 x double>",
  "variant": "cmp0",
  "codesize": 3,
  "thru": 4,
  "lat": 3,
  "sizelat": 3,
  "size": 4,
  "gisize": 6,
  "extrasize": 0,
  "asm": "fcmeq v1.2d, v1.2d, #0.0\nfcmeq v0.2d, v0.2d, #0.0\nbsl v0.16b, v4.16b, v2.16b\nbsl v1.16b, v5.16b, v3.16b\nret",
  "giasm": "fcmeq v0.2d, v0.2d, #0.0\nfcmeq v1.2d, v1.2d, #0.0\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, <4 x double> %d, <4 x double> %e) {\n  %c = fcmp une <4 x double> %a, zeroinitializer\n  %r = select <4 x i1> %c, <4 x double> %d, <4 x double> %e\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp une <4 x double> %a, zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <4 x i1> %c, <4 x double> %d, <4 x double> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "fcmpuno",
  "ty": "half",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp h0, h1\ncset w0, vs\nret",
  "giasm": "fcmp h0, h1\ncset w0, vs\nret",
  "ll": "define i1 @test(half %a, half %b) {\n  %r = fcmp uno half %a, %b\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp uno half %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "fcmpuno",
  "ty": "half",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp h0, h0\ncset w0, vs\nret",
  "giasm": "fcmp h0, #0.0\ncset w0, vs\nret",
  "ll": "define i1 @test(half %a) {\n  %r = fcmp uno half %a, 0.0\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp uno half %a, 0xH0000\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "selectfcmpuno",
  "ty": "half",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 5,
  "extrasize": 0,
  "asm": "fcmp h0, h1\nfcsel h0, h2, h3, vs\nret",
  "giasm": "fcmp h0, h1\nfmov w8, s2\nfmov w9, s3\ncsel w8, w8, w9, vs\nfmov s0, w8\nret",
  "ll": "define half @test(half %a, half %b, half %d, half %e) {\n  %c = fcmp uno half %a, %b\n  %r = select i1 %c, half %d, half %e\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp uno half %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, half %d, half %e\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "selectfcmpuno",
  "ty": "half",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 5,
  "extrasize": 0,
  "asm": "fcmp h0, h0\nfcsel h0, h1, h2, vs\nret",
  "giasm": "fcmp h0, #0.0\nfmov w8, s1\nfmov w9, s2\ncsel w8, w8, w9, vs\nfmov s0, w8\nret",
  "ll": "define half @test(half %a, half %d, half %e) {\n  %c = fcmp uno half %a, 0.0\n  %r = select i1 %c, half %d, half %e\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp uno half %a, 0xH0000\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, half %d, half %e\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "fcmpuno",
  "ty": "float",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp s0, s1\ncset w0, vs\nret",
  "giasm": "fcmp s0, s1\ncset w0, vs\nret",
  "ll": "define i1 @test(float %a, float %b) {\n  %r = fcmp uno float %a, %b\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp uno float %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "fcmpuno",
  "ty": "float",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp s0, s0\ncset w0, vs\nret",
  "giasm": "fcmp s0, #0.0\ncset w0, vs\nret",
  "ll": "define i1 @test(float %a) {\n  %r = fcmp uno float %a, 0.0\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp uno float %a, 0.000000e+00\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "selectfcmpuno",
  "ty": "float",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp s0, s1\nfcsel s0, s2, s3, vs\nret",
  "giasm": "fcmp s0, s1\nfcsel s0, s2, s3, vs\nret",
  "ll": "define float @test(float %a, float %b, float %d, float %e) {\n  %c = fcmp uno float %a, %b\n  %r = select i1 %c, float %d, float %e\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp uno float %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, float %d, float %e\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "selectfcmpuno",
  "ty": "float",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp s0, s0\nfcsel s0, s1, s2, vs\nret",
  "giasm": "fcmp s0, #0.0\nfcsel s0, s1, s2, vs\nret",
  "ll": "define float @test(float %a, float %d, float %e) {\n  %c = fcmp uno float %a, 0.0\n  %r = select i1 %c, float %d, float %e\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp uno float %a, 0.000000e+00\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, float %d, float %e\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "fcmpuno",
  "ty": "double",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp d0, d1\ncset w0, vs\nret",
  "giasm": "fcmp d0, d1\ncset w0, vs\nret",
  "ll": "define i1 @test(double %a, double %b) {\n  %r = fcmp uno double %a, %b\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp uno double %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "fcmpuno",
  "ty": "double",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp d0, d0\ncset w0, vs\nret",
  "giasm": "fcmp d0, #0.0\ncset w0, vs\nret",
  "ll": "define i1 @test(double %a) {\n  %r = fcmp uno double %a, 0.0\n  ret i1 %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp uno double %a, 0.000000e+00\nCost Model: Found an estimated cost of 1 for instruction:   ret i1 %r"
 },
 {
  "instr": "selectfcmpuno",
  "ty": "double",
  "variant": "cmp",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp d0, d1\nfcsel d0, d2, d3, vs\nret",
  "giasm": "fcmp d0, d1\nfcsel d0, d2, d3, vs\nret",
  "ll": "define double @test(double %a, double %b, double %d, double %e) {\n  %c = fcmp uno double %a, %b\n  %r = select i1 %c, double %d, double %e\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp uno double %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, double %d, double %e\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "selectfcmpuno",
  "ty": "double",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmp d0, d0\nfcsel d0, d1, d2, vs\nret",
  "giasm": "fcmp d0, #0.0\nfcsel d0, d1, d2, vs\nret",
  "ll": "define double @test(double %a, double %d, double %e) {\n  %c = fcmp uno double %a, 0.0\n  %r = select i1 %c, double %d, double %e\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp uno double %a, 0.000000e+00\nCost Model: Found an estimated cost of 1 for instruction:   %r = select i1 %c, double %d, double %e\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "fcmpuno",
  "ty": "<4 x half>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmge v2.4h, v0.4h, v1.4h\nfcmgt v0.4h, v1.4h, v0.4h\norr v0.8b, v0.8b, v2.8b\nmvn v0.8b, v0.8b\nret",
  "giasm": "fcmge v2.4h, v0.4h, v1.4h\nfcmgt v0.4h, v1.4h, v0.4h\norr v0.8b, v0.8b, v2.8b\nmvn v0.8b, v0.8b\nret",
  "ll": "define <4 x i1> @test(<4 x half> %a, <4 x half> %b) {\n  %r = fcmp uno <4 x half> %a, %b\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp uno <4 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "fcmpuno",
  "ty": "<4 x half>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmeq v0.4h, v0.4h, v0.4h\nmvn v0.8b, v0.8b\nret",
  "giasm": "fcmeq v0.4h, v0.4h, v0.4h\nmvn v0.8b, v0.8b\nret",
  "ll": "define <4 x i1> @test(<4 x half> %a) {\n  %r = fcmp uno <4 x half> %a, zeroinitializer\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp uno <4 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "selectfcmpuno",
  "ty": "<4 x half>",
  "variant": "cmp",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 4,
  "gisize": 5,
  "extrasize": 0,
  "asm": "fcmge v4.4h, v0.4h, v1.4h\nfcmgt v0.4h, v1.4h, v0.4h\norr v0.8b, v0.8b, v4.8b\nbsl v0.8b, v3.8b, v2.8b\nret",
  "giasm": "fcmge v4.4h, v0.4h, v1.4h\nfcmgt v0.4h, v1.4h, v0.4h\norr v0.8b, v0.8b, v4.8b\nmvn v0.8b, v0.8b\nbsl v0.8b, v2.8b, v3.8b\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, <4 x half> %b, <4 x half> %d, <4 x half> %e) {\n  %c = fcmp uno <4 x half> %a, %b\n  %r = select <4 x i1> %c, <4 x half> %d, <4 x half> %e\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp uno <4 x half> %a, %b\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <4 x i1> %c, <4 x half> %d, <4 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "selectfcmpuno",
  "ty": "<4 x half>",
  "variant": "cmp0",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmeq v0.4h, v0.4h, v0.4h\nbsl v0.8b, v2.8b, v1.8b\nret",
  "giasm": "fcmeq v0.4h, v0.4h, v0.4h\nmvn v0.8b, v0.8b\nbsl v0.8b, v1.8b, v2.8b\nret",
  "ll": "define <4 x half> @test(<4 x half> %a, <4 x half> %d, <4 x half> %e) {\n  %c = fcmp uno <4 x half> %a, zeroinitializer\n  %r = select <4 x i1> %c, <4 x half> %d, <4 x half> %e\n  ret <4 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp uno <4 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <4 x i1> %c, <4 x half> %d, <4 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x half> %r"
 },
 {
  "instr": "fcmpuno",
  "ty": "<8 x half>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 5,
  "gisize": 5,
  "extrasize": 0,
  "asm": "fcmge v2.8h, v0.8h, v1.8h\nfcmgt v0.8h, v1.8h, v0.8h\norr v0.16b, v0.16b, v2.16b\nmvn v0.16b, v0.16b\nxtn v0.8b, v0.8h\nret",
  "giasm": "fcmge v2.8h, v0.8h, v1.8h\nfcmgt v0.8h, v1.8h, v0.8h\norr v0.16b, v0.16b, v2.16b\nmvn v0.16b, v0.16b\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x half> %a, <8 x half> %b) {\n  %r = fcmp uno <8 x half> %a, %b\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp uno <8 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "fcmpuno",
  "ty": "<8 x half>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmeq v0.8h, v0.8h, v0.8h\nmvn v0.16b, v0.16b\nxtn v0.8b, v0.8h\nret",
  "giasm": "fcmeq v0.8h, v0.8h, v0.8h\nmvn v0.16b, v0.16b\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x half> %a) {\n  %r = fcmp uno <8 x half> %a, zeroinitializer\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp uno <8 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "selectfcmpuno",
  "ty": "<8 x half>",
  "variant": "cmp",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 4,
  "gisize": 5,
  "extrasize": 0,
  "asm": "fcmge v4.8h, v0.8h, v1.8h\nfcmgt v0.8h, v1.8h, v0.8h\norr v0.16b, v0.16b, v4.16b\nbsl v0.16b, v3.16b, v2.16b\nret",
  "giasm": "fcmge v4.8h, v0.8h, v1.8h\nfcmgt v0.8h, v1.8h, v0.8h\norr v0.16b, v0.16b, v4.16b\nmvn v0.16b, v0.16b\nbsl v0.16b, v2.16b, v3.16b\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, <8 x half> %b, <8 x half> %d, <8 x half> %e) {\n  %c = fcmp uno <8 x half> %a, %b\n  %r = select <8 x i1> %c, <8 x half> %d, <8 x half> %e\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp uno <8 x half> %a, %b\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <8 x i1> %c, <8 x half> %d, <8 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "selectfcmpuno",
  "ty": "<8 x half>",
  "variant": "cmp0",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmeq v0.8h, v0.8h, v0.8h\nbsl v0.16b, v2.16b, v1.16b\nret",
  "giasm": "fcmeq v0.8h, v0.8h, v0.8h\nmvn v0.16b, v0.16b\nbsl v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <8 x half> @test(<8 x half> %a, <8 x half> %d, <8 x half> %e) {\n  %c = fcmp uno <8 x half> %a, zeroinitializer\n  %r = select <8 x i1> %c, <8 x half> %d, <8 x half> %e\n  ret <8 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp uno <8 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <8 x i1> %c, <8 x half> %d, <8 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x half> %r"
 },
 {
  "instr": "fcmpuno",
  "ty": "<16 x half>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 8,
  "gisize": 9,
  "extrasize": 0,
  "asm": "fcmge v4.8h, v1.8h, v3.8h\nfcmgt v1.8h, v3.8h, v1.8h\nfcmge v3.8h, v0.8h, v2.8h\nfcmgt v0.8h, v2.8h, v0.8h\norr v1.16b, v1.16b, v4.16b\norr v0.16b, v0.16b, v3.16b\nuzp1 v0.16b, v0.16b, v1.16b\nmvn v0.16b, v0.16b\nret",
  "giasm": "fcmge v4.8h, v0.8h, v2.8h\nfcmgt v0.8h, v2.8h, v0.8h\nfcmge v2.8h, v1.8h, v3.8h\nfcmgt v1.8h, v3.8h, v1.8h\norr v0.16b, v0.16b, v4.16b\norr v1.16b, v1.16b, v2.16b\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nuzp1 v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <16 x i1> @test(<16 x half> %a, <16 x half> %b) {\n  %r = fcmp uno <16 x half> %a, %b\n  ret <16 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp uno <16 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i1> %r"
 },
 {
  "instr": "fcmpuno",
  "ty": "<16 x half>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 5,
  "extrasize": 0,
  "asm": "fcmeq v1.8h, v1.8h, v1.8h\nfcmeq v0.8h, v0.8h, v0.8h\nuzp1 v0.16b, v0.16b, v1.16b\nmvn v0.16b, v0.16b\nret",
  "giasm": "fcmeq v0.8h, v0.8h, v0.8h\nfcmeq v1.8h, v1.8h, v1.8h\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nuzp1 v0.16b, v0.16b, v1.16b\nret",
  "ll": "define <16 x i1> @test(<16 x half> %a) {\n  %r = fcmp uno <16 x half> %a, zeroinitializer\n  ret <16 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp uno <16 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x i1> %r"
 },
 {
  "instr": "selectfcmpuno",
  "ty": "<16 x half>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 46,
  "lat": 2,
  "sizelat": 2,
  "size": 8,
  "gisize": 10,
  "extrasize": 0,
  "asm": "fcmge v16.8h, v1.8h, v3.8h\nfcmgt v1.8h, v3.8h, v1.8h\nfcmge v3.8h, v0.8h, v2.8h\nfcmgt v0.8h, v2.8h, v0.8h\norr v1.16b, v1.16b, v16.16b\norr v0.16b, v0.16b, v3.16b\nbsl v1.16b, v7.16b, v5.16b\nbsl v0.16b, v6.16b, v4.16b\nret",
  "giasm": "fcmge v16.8h, v0.8h, v2.8h\nfcmgt v0.8h, v2.8h, v0.8h\nfcmge v2.8h, v1.8h, v3.8h\nfcmgt v1.8h, v3.8h, v1.8h\norr v0.16b, v0.16b, v16.16b\norr v1.16b, v1.16b, v2.16b\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nbsl v0.16b, v4.16b, v6.16b\nbsl v1.16b, v5.16b, v7.16b\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, <16 x half> %b, <16 x half> %d, <16 x half> %e) {\n  %c = fcmp uno <16 x half> %a, %b\n  %r = select <16 x i1> %c, <16 x half> %d, <16 x half> %e\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp uno <16 x half> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <16 x i1> %c, <16 x half> %d, <16 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "selectfcmpuno",
  "ty": "<16 x half>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 46,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 6,
  "extrasize": 0,
  "asm": "fcmeq v1.8h, v1.8h, v1.8h\nfcmeq v0.8h, v0.8h, v0.8h\nbsl v0.16b, v4.16b, v2.16b\nbsl v1.16b, v5.16b, v3.16b\nret",
  "giasm": "fcmeq v0.8h, v0.8h, v0.8h\nfcmeq v1.8h, v1.8h, v1.8h\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "ll": "define <16 x half> @test(<16 x half> %a, <16 x half> %d, <16 x half> %e) {\n  %c = fcmp uno <16 x half> %a, zeroinitializer\n  %r = select <16 x i1> %c, <16 x half> %d, <16 x half> %e\n  ret <16 x half> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp uno <16 x half> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <16 x i1> %c, <16 x half> %d, <16 x half> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <16 x half> %r"
 },
 {
  "instr": "fcmpuno",
  "ty": "<2 x float>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fcmge v2.2s, v0.2s, v1.2s\nfcmgt v0.2s, v1.2s, v0.2s\norr v0.8b, v0.8b, v2.8b\nmvn v0.8b, v0.8b\nret",
  "giasm": "fcmge v2.2s, v0.2s, v1.2s\nfcmgt v0.2s, v1.2s, v0.2s\norr v0.8b, v0.8b, v2.8b\nmvn v0.8b, v0.8b\nret",
  "ll": "define <2 x i1> @test(<2 x float> %a, <2 x float> %b) {\n  %r = fcmp uno <2 x float> %a, %b\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp uno <2 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "fcmpuno",
  "ty": "<2 x float>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fcmeq v0.2s, v0.2s, v0.2s\nmvn v0.8b, v0.8b\nret",
  "giasm": "fcmeq v0.2s, v0.2s, v0.2s\nmvn v0.8b, v0.8b\nret",
  "ll": "define <2 x i1> @test(<2 x float> %a) {\n  %r = fcmp uno <2 x float> %a, zeroinitializer\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp uno <2 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "selectfcmpuno",
  "ty": "<2 x float>",
  "variant": "cmp",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 4,
  "gisize": 5,
  "extrasize": 0,
  "asm": "fcmge v4.2s, v0.2s, v1.2s\nfcmgt v0.2s, v1.2s, v0.2s\norr v0.8b, v0.8b, v4.8b\nbsl v0.8b, v3.8b, v2.8b\nret",
  "giasm": "fcmge v4.2s, v0.2s, v1.2s\nfcmgt v0.2s, v1.2s, v0.2s\norr v0.8b, v0.8b, v4.8b\nmvn v0.8b, v0.8b\nbsl v0.8b, v2.8b, v3.8b\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, <2 x float> %b, <2 x float> %d, <2 x float> %e) {\n  %c = fcmp uno <2 x float> %a, %b\n  %r = select <2 x i1> %c, <2 x float> %d, <2 x float> %e\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp uno <2 x float> %a, %b\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <2 x i1> %c, <2 x float> %d, <2 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "selectfcmpuno",
  "ty": "<2 x float>",
  "variant": "cmp0",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmeq v0.2s, v0.2s, v0.2s\nbsl v0.8b, v2.8b, v1.8b\nret",
  "giasm": "fcmeq v0.2s, v0.2s, v0.2s\nmvn v0.8b, v0.8b\nbsl v0.8b, v1.8b, v2.8b\nret",
  "ll": "define <2 x float> @test(<2 x float> %a, <2 x float> %d, <2 x float> %e) {\n  %c = fcmp uno <2 x float> %a, zeroinitializer\n  %r = select <2 x i1> %c, <2 x float> %d, <2 x float> %e\n  ret <2 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp uno <2 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <2 x i1> %c, <2 x float> %d, <2 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x float> %r"
 },
 {
  "instr": "fcmpuno",
  "ty": "<4 x float>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 5,
  "gisize": 5,
  "extrasize": 0,
  "asm": "fcmge v2.4s, v0.4s, v1.4s\nfcmgt v0.4s, v1.4s, v0.4s\norr v0.16b, v0.16b, v2.16b\nmvn v0.16b, v0.16b\nxtn v0.4h, v0.4s\nret",
  "giasm": "fcmge v2.4s, v0.4s, v1.4s\nfcmgt v0.4s, v1.4s, v0.4s\norr v0.16b, v0.16b, v2.16b\nmvn v0.16b, v0.16b\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x float> %a, <4 x float> %b) {\n  %r = fcmp uno <4 x float> %a, %b\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp uno <4 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "fcmpuno",
  "ty": "<4 x float>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmeq v0.4s, v0.4s, v0.4s\nmvn v0.16b, v0.16b\nxtn v0.4h, v0.4s\nret",
  "giasm": "fcmeq v0.4s, v0.4s, v0.4s\nmvn v0.16b, v0.16b\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x float> %a) {\n  %r = fcmp uno <4 x float> %a, zeroinitializer\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp uno <4 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "selectfcmpuno",
  "ty": "<4 x float>",
  "variant": "cmp",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 4,
  "gisize": 5,
  "extrasize": 0,
  "asm": "fcmge v4.4s, v0.4s, v1.4s\nfcmgt v0.4s, v1.4s, v0.4s\norr v0.16b, v0.16b, v4.16b\nbsl v0.16b, v3.16b, v2.16b\nret",
  "giasm": "fcmge v4.4s, v0.4s, v1.4s\nfcmgt v0.4s, v1.4s, v0.4s\norr v0.16b, v0.16b, v4.16b\nmvn v0.16b, v0.16b\nbsl v0.16b, v2.16b, v3.16b\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, <4 x float> %b, <4 x float> %d, <4 x float> %e) {\n  %c = fcmp uno <4 x float> %a, %b\n  %r = select <4 x i1> %c, <4 x float> %d, <4 x float> %e\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp uno <4 x float> %a, %b\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <4 x i1> %c, <4 x float> %d, <4 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "selectfcmpuno",
  "ty": "<4 x float>",
  "variant": "cmp0",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmeq v0.4s, v0.4s, v0.4s\nbsl v0.16b, v2.16b, v1.16b\nret",
  "giasm": "fcmeq v0.4s, v0.4s, v0.4s\nmvn v0.16b, v0.16b\nbsl v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <4 x float> @test(<4 x float> %a, <4 x float> %d, <4 x float> %e) {\n  %c = fcmp uno <4 x float> %a, zeroinitializer\n  %r = select <4 x i1> %c, <4 x float> %d, <4 x float> %e\n  ret <4 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp uno <4 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <4 x i1> %c, <4 x float> %d, <4 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x float> %r"
 },
 {
  "instr": "fcmpuno",
  "ty": "<8 x float>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 9,
  "gisize": 10,
  "extrasize": 0,
  "asm": "fcmge v4.4s, v1.4s, v3.4s\nfcmgt v1.4s, v3.4s, v1.4s\nfcmge v3.4s, v0.4s, v2.4s\nfcmgt v0.4s, v2.4s, v0.4s\norr v1.16b, v1.16b, v4.16b\norr v0.16b, v0.16b, v3.16b\nuzp1 v0.8h, v0.8h, v1.8h\nmvn v0.16b, v0.16b\nxtn v0.8b, v0.8h\nret",
  "giasm": "fcmge v4.4s, v0.4s, v2.4s\nfcmgt v0.4s, v2.4s, v0.4s\nfcmge v2.4s, v1.4s, v3.4s\nfcmgt v1.4s, v3.4s, v1.4s\norr v0.16b, v0.16b, v4.16b\norr v1.16b, v1.16b, v2.16b\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nuzp1 v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x float> %a, <8 x float> %b) {\n  %r = fcmp uno <8 x float> %a, %b\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp uno <8 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "fcmpuno",
  "ty": "<8 x float>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 5,
  "gisize": 6,
  "extrasize": 0,
  "asm": "fcmeq v1.4s, v1.4s, v1.4s\nfcmeq v0.4s, v0.4s, v0.4s\nuzp1 v0.8h, v0.8h, v1.8h\nmvn v0.16b, v0.16b\nxtn v0.8b, v0.8h\nret",
  "giasm": "fcmeq v0.4s, v0.4s, v0.4s\nfcmeq v1.4s, v1.4s, v1.4s\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nuzp1 v0.8h, v0.8h, v1.8h\nxtn v0.8b, v0.8h\nret",
  "ll": "define <8 x i1> @test(<8 x float> %a) {\n  %r = fcmp uno <8 x float> %a, zeroinitializer\n  ret <8 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp uno <8 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x i1> %r"
 },
 {
  "instr": "selectfcmpuno",
  "ty": "<8 x float>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 22,
  "lat": 2,
  "sizelat": 2,
  "size": 8,
  "gisize": 10,
  "extrasize": 0,
  "asm": "fcmge v16.4s, v1.4s, v3.4s\nfcmgt v1.4s, v3.4s, v1.4s\nfcmge v3.4s, v0.4s, v2.4s\nfcmgt v0.4s, v2.4s, v0.4s\norr v1.16b, v1.16b, v16.16b\norr v0.16b, v0.16b, v3.16b\nbsl v1.16b, v7.16b, v5.16b\nbsl v0.16b, v6.16b, v4.16b\nret",
  "giasm": "fcmge v16.4s, v0.4s, v2.4s\nfcmgt v0.4s, v2.4s, v0.4s\nfcmge v2.4s, v1.4s, v3.4s\nfcmgt v1.4s, v3.4s, v1.4s\norr v0.16b, v0.16b, v16.16b\norr v1.16b, v1.16b, v2.16b\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nbsl v0.16b, v4.16b, v6.16b\nbsl v1.16b, v5.16b, v7.16b\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, <8 x float> %b, <8 x float> %d, <8 x float> %e) {\n  %c = fcmp uno <8 x float> %a, %b\n  %r = select <8 x i1> %c, <8 x float> %d, <8 x float> %e\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp uno <8 x float> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x float> %d, <8 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "selectfcmpuno",
  "ty": "<8 x float>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 22,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 6,
  "extrasize": 0,
  "asm": "fcmeq v1.4s, v1.4s, v1.4s\nfcmeq v0.4s, v0.4s, v0.4s\nbsl v0.16b, v4.16b, v2.16b\nbsl v1.16b, v5.16b, v3.16b\nret",
  "giasm": "fcmeq v0.4s, v0.4s, v0.4s\nfcmeq v1.4s, v1.4s, v1.4s\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "ll": "define <8 x float> @test(<8 x float> %a, <8 x float> %d, <8 x float> %e) {\n  %c = fcmp uno <8 x float> %a, zeroinitializer\n  %r = select <8 x i1> %c, <8 x float> %d, <8 x float> %e\n  ret <8 x float> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp uno <8 x float> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <8 x i1> %c, <8 x float> %d, <8 x float> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <8 x float> %r"
 },
 {
  "instr": "fcmpuno",
  "ty": "<2 x double>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 5,
  "gisize": 5,
  "extrasize": 0,
  "asm": "fcmge v2.2d, v0.2d, v1.2d\nfcmgt v0.2d, v1.2d, v0.2d\norr v0.16b, v0.16b, v2.16b\nmvn v0.16b, v0.16b\nxtn v0.2s, v0.2d\nret",
  "giasm": "fcmge v2.2d, v0.2d, v1.2d\nfcmgt v0.2d, v1.2d, v0.2d\norr v0.16b, v0.16b, v2.16b\nmvn v0.16b, v0.16b\nxtn v0.2s, v0.2d\nret",
  "ll": "define <2 x i1> @test(<2 x double> %a, <2 x double> %b) {\n  %r = fcmp uno <2 x double> %a, %b\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp uno <2 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "fcmpuno",
  "ty": "<2 x double>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmeq v0.2d, v0.2d, v0.2d\nmvn v0.16b, v0.16b\nxtn v0.2s, v0.2d\nret",
  "giasm": "fcmeq v0.2d, v0.2d, v0.2d\nmvn v0.16b, v0.16b\nxtn v0.2s, v0.2d\nret",
  "ll": "define <2 x i1> @test(<2 x double> %a) {\n  %r = fcmp uno <2 x double> %a, zeroinitializer\n  ret <2 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp uno <2 x double> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x i1> %r"
 },
 {
  "instr": "selectfcmpuno",
  "ty": "<2 x double>",
  "variant": "cmp",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 4,
  "gisize": 5,
  "extrasize": 0,
  "asm": "fcmge v4.2d, v0.2d, v1.2d\nfcmgt v0.2d, v1.2d, v0.2d\norr v0.16b, v0.16b, v4.16b\nbsl v0.16b, v3.16b, v2.16b\nret",
  "giasm": "fcmge v4.2d, v0.2d, v1.2d\nfcmgt v0.2d, v1.2d, v0.2d\norr v0.16b, v0.16b, v4.16b\nmvn v0.16b, v0.16b\nbsl v0.16b, v2.16b, v3.16b\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, <2 x double> %b, <2 x double> %d, <2 x double> %e) {\n  %c = fcmp uno <2 x double> %a, %b\n  %r = select <2 x i1> %c, <2 x double> %d, <2 x double> %e\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp uno <2 x double> %a, %b\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <2 x i1> %c, <2 x double> %d, <2 x double> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "selectfcmpuno",
  "ty": "<2 x double>",
  "variant": "cmp0",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fcmeq v0.2d, v0.2d, v0.2d\nbsl v0.16b, v2.16b, v1.16b\nret",
  "giasm": "fcmeq v0.2d, v0.2d, v0.2d\nmvn v0.16b, v0.16b\nbsl v0.16b, v1.16b, v2.16b\nret",
  "ll": "define <2 x double> @test(<2 x double> %a, <2 x double> %d, <2 x double> %e) {\n  %c = fcmp uno <2 x double> %a, zeroinitializer\n  %r = select <2 x i1> %c, <2 x double> %d, <2 x double> %e\n  ret <2 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp uno <2 x double> %a, zeroinitializer\nCost Model: Found an estimated cost of 2 for instruction:   %r = select <2 x i1> %c, <2 x double> %d, <2 x double> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <2 x double> %r"
 },
 {
  "instr": "fcmpuno",
  "ty": "<4 x double>",
  "variant": "cmp",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 9,
  "gisize": 10,
  "extrasize": 0,
  "asm": "fcmge v4.2d, v1.2d, v3.2d\nfcmgt v1.2d, v3.2d, v1.2d\nfcmge v3.2d, v0.2d, v2.2d\nfcmgt v0.2d, v2.2d, v0.2d\norr v1.16b, v1.16b, v4.16b\norr v0.16b, v0.16b, v3.16b\nuzp1 v0.4s, v0.4s, v1.4s\nmvn v0.16b, v0.16b\nxtn v0.4h, v0.4s\nret",
  "giasm": "fcmge v4.2d, v0.2d, v2.2d\nfcmgt v0.2d, v2.2d, v0.2d\nfcmge v2.2d, v1.2d, v3.2d\nfcmgt v1.2d, v3.2d, v1.2d\norr v0.16b, v0.16b, v4.16b\norr v1.16b, v1.16b, v2.16b\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nuzp1 v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x double> %a, <4 x double> %b) {\n  %r = fcmp uno <4 x double> %a, %b\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp uno <4 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "fcmpuno",
  "ty": "<4 x double>",
  "variant": "cmp0",
  "codesize": 1,
  "thru": 2,
  "lat": 1,
  "sizelat": 1,
  "size": 5,
  "gisize": 6,
  "extrasize": 0,
  "asm": "fcmeq v1.2d, v1.2d, v1.2d\nfcmeq v0.2d, v0.2d, v0.2d\nuzp1 v0.4s, v0.4s, v1.4s\nmvn v0.16b, v0.16b\nxtn v0.4h, v0.4s\nret",
  "giasm": "fcmeq v0.2d, v0.2d, v0.2d\nfcmeq v1.2d, v1.2d, v1.2d\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nuzp1 v0.4s, v0.4s, v1.4s\nxtn v0.4h, v0.4s\nret",
  "ll": "define <4 x i1> @test(<4 x double> %a) {\n  %r = fcmp uno <4 x double> %a, zeroinitializer\n  ret <4 x i1> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = fcmp uno <4 x double> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x i1> %r"
 },
 {
  "instr": "selectfcmpuno",
  "ty": "<4 x double>",
  "variant": "cmp",
  "codesize": 2,
  "thru": 10,
  "lat": 2,
  "sizelat": 2,
  "size": 8,
  "gisize": 10,
  "extrasize": 0,
  "asm": "fcmge v16.2d, v1.2d, v3.2d\nfcmgt v1.2d, v3.2d, v1.2d\nfcmge v3.2d, v0.2d, v2.2d\nfcmgt v0.2d, v2.2d, v0.2d\norr v1.16b, v1.16b, v16.16b\norr v0.16b, v0.16b, v3.16b\nbsl v1.16b, v7.16b, v5.16b\nbsl v0.16b, v6.16b, v4.16b\nret",
  "giasm": "fcmge v16.2d, v0.2d, v2.2d\nfcmgt v0.2d, v2.2d, v0.2d\nfcmge v2.2d, v1.2d, v3.2d\nfcmgt v1.2d, v3.2d, v1.2d\norr v0.16b, v0.16b, v16.16b\norr v1.16b, v1.16b, v2.16b\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nbsl v0.16b, v4.16b, v6.16b\nbsl v1.16b, v5.16b, v7.16b\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, <4 x double> %b, <4 x double> %d, <4 x double> %e) {\n  %c = fcmp uno <4 x double> %a, %b\n  %r = select <4 x i1> %c, <4 x double> %d, <4 x double> %e\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp uno <4 x double> %a, %b\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x double> %d, <4 x double> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "selectfcmpuno",
  "ty": "<4 x double>",
  "variant": "cmp0",
  "codesize": 2,
  "thru": 10,
  "lat": 2,
  "sizelat": 2,
  "size": 4,
  "gisize": 6,
  "extrasize": 0,
  "asm": "fcmeq v1.2d, v1.2d, v1.2d\nfcmeq v0.2d, v0.2d, v0.2d\nbsl v0.16b, v4.16b, v2.16b\nbsl v1.16b, v5.16b, v3.16b\nret",
  "giasm": "fcmeq v0.2d, v0.2d, v0.2d\nfcmeq v1.2d, v1.2d, v1.2d\nmvn v0.16b, v0.16b\nmvn v1.16b, v1.16b\nbsl v0.16b, v2.16b, v4.16b\nbsl v1.16b, v3.16b, v5.16b\nret",
  "ll": "define <4 x double> @test(<4 x double> %a, <4 x double> %d, <4 x double> %e) {\n  %c = fcmp uno <4 x double> %a, zeroinitializer\n  %r = select <4 x i1> %c, <4 x double> %d, <4 x double> %e\n  ret <4 x double> %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %c = fcmp uno <4 x double> %a, zeroinitializer\nCost Model: Found an estimated cost of 1 for instruction:   %r = select <4 x i1> %c, <4 x double> %d, <4 x double> %e\nCost Model: Found an estimated cost of 1 for instruction:   ret <4 x double> %r"
 },
 {
  "instr": "reduce.fadd",
  "ty": "<4 x half>",
  "variant": "reduce",
  "codesize": 11,
  "thru": 14,
  "lat": 22,
  "sizelat": 14,
  "size": 7,
  "gisize": 7,
  "extrasize": 0,
  "asm": "mov h2, v0.h[1]\nfadd h1, h1, h0\nmov h3, v0.h[2]\nmov h0, v0.h[3]\nfadd h1, h1, h2\nfadd h1, h1, h3\nfadd h0, h1, h0\nret",
  "giasm": "mov h2, v0.h[1]\nfadd h1, h1, h0\nmov h3, v0.h[2]\nmov h0, v0.h[3]\nfadd h1, h1, h2\nfadd h1, h1, h3\nfadd h0, h1, h0\nret",
  "ll": "define half @test(<4 x half> %a, half %b) {\n  %r = call half @llvm.vector.reduce.fadd(half %b, <4 x half> %a)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 11 for instruction:   %r = call half @llvm.vector.reduce.fadd.v4f16(half %b, <4 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "reduce.fadd",
  "ty": "<4 x half>",
  "variant": "reducefast",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "faddp v0.4h, v0.4h, v0.4h\nfaddp h0, v0.2h\nfadd h0, h1, h0\nret",
  "giasm": "faddp v0.4h, v0.4h, v0.4h\nfaddp h0, v0.2h\nfadd h0, h1, h0\nret",
  "ll": "define half @test(<4 x half> %a, half %b) {\n  %r = call fast half @llvm.vector.reduce.fadd(half %b, <4 x half> %a)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call fast half @llvm.vector.reduce.fadd.v4f16(half %b, <4 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "reduce.fadd",
  "ty": "<8 x half>",
  "variant": "reduce",
  "codesize": 23,
  "thru": 30,
  "lat": 46,
  "sizelat": 30,
  "size": 15,
  "gisize": 15,
  "extrasize": 0,
  "asm": "mov h2, v0.h[1]\nfadd h1, h1, h0\nmov h3, v0.h[2]\nfadd h1, h1, h2\nmov h2, v0.h[3]\nfadd h1, h1, h3\nmov h3, v0.h[4]\nfadd h1, h1, h2\nmov h2, v0.h[5]\nfadd h1, h1, h3\nmov h3, v0.h[6]\nmov h0, v0.h[7]\nfadd h1, h1, h2\nfadd h1, h1, h3\nfadd h0, h1, h0\nret",
  "giasm": "mov h2, v0.h[1]\nfadd h1, h1, h0\nmov h3, v0.h[2]\nfadd h1, h1, h2\nmov h2, v0.h[3]\nfadd h1, h1, h3\nmov h3, v0.h[4]\nfadd h1, h1, h2\nmov h2, v0.h[5]\nfadd h1, h1, h3\nmov h3, v0.h[6]\nmov h0, v0.h[7]\nfadd h1, h1, h2\nfadd h1, h1, h3\nfadd h0, h1, h0\nret",
  "ll": "define half @test(<8 x half> %a, half %b) {\n  %r = call half @llvm.vector.reduce.fadd(half %b, <8 x half> %a)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 23 for instruction:   %r = call half @llvm.vector.reduce.fadd.v8f16(half %b, <8 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "reduce.fadd",
  "ty": "<8 x half>",
  "variant": "reducefast",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "faddp v2.8h, v0.8h, v0.8h\nfaddp v0.8h, v2.8h, v0.8h\nfaddp h0, v0.2h\nfadd h0, h1, h0\nret",
  "giasm": "faddp v2.8h, v0.8h, v0.8h\nfaddp v0.8h, v2.8h, v0.8h\nfaddp h0, v0.2h\nfadd h0, h1, h0\nret",
  "ll": "define half @test(<8 x half> %a, half %b) {\n  %r = call fast half @llvm.vector.reduce.fadd(half %b, <8 x half> %a)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 3 for instruction:   %r = call fast half @llvm.vector.reduce.fadd.v8f16(half %b, <8 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "reduce.fadd",
  "ty": "<16 x half>",
  "variant": "reduce",
  "codesize": 46,
  "thru": 60,
  "lat": 92,
  "sizelat": 60,
  "size": 30,
  "gisize": 30,
  "extrasize": 0,
  "asm": "mov h3, v0.h[1]\nfadd h2, h2, h0\nmov h4, v0.h[2]\nfadd h2, h2, h3\nmov h3, v0.h[3]\nfadd h2, h2, h4\nmov h4, v0.h[4]\nfadd h2, h2, h3\nmov h3, v0.h[5]\nfadd h2, h2, h4\nmov h4, v0.h[6]\nmov h0, v0.h[7]\nfadd h2, h2, h3\nmov h3, v1.h[2]\nfadd h2, h2, h4\nfadd h0, h2, h0\nmov h2, v1.h[1]\nfadd h0, h0, h1\nfadd h0, h0, h2\nmov h2, v1.h[3]\nfadd h0, h0, h3\nmov h3, v1.h[4]\nfadd h0, h0, h2\nmov h2, v1.h[5]\nfadd h0, h0, h3\nmov h3, v1.h[6]\nmov h1, v1.h[7]\nfadd h0, h0, h2\nfadd h0, h0, h3\nfadd h0, h0, h1\nret",
  "giasm": "mov h3, v0.h[1]\nfadd h2, h2, h0\nmov h4, v0.h[2]\nfadd h2, h2, h3\nmov h3, v0.h[3]\nfadd h2, h2, h4\nmov h4, v0.h[4]\nfadd h2, h2, h3\nmov h3, v0.h[5]\nfadd h2, h2, h4\nmov h4, v0.h[6]\nmov h0, v0.h[7]\nfadd h2, h2, h3\nmov h3, v1.h[2]\nfadd h2, h2, h4\nfadd h0, h2, h0\nmov h2, v1.h[1]\nfadd h0, h0, h1\nfadd h0, h0, h2\nmov h2, v1.h[3]\nfadd h0, h0, h3\nmov h3, v1.h[4]\nfadd h0, h0, h2\nmov h2, v1.h[5]\nfadd h0, h0, h3\nmov h3, v1.h[6]\nmov h1, v1.h[7]\nfadd h0, h0, h2\nfadd h0, h0, h3\nfadd h0, h0, h1\nret",
  "ll": "define half @test(<16 x half> %a, half %b) {\n  %r = call half @llvm.vector.reduce.fadd(half %b, <16 x half> %a)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 46 for instruction:   %r = call half @llvm.vector.reduce.fadd.v16f16(half %b, <16 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "reduce.fadd",
  "ty": "<16 x half>",
  "variant": "reducefast",
  "codesize": 4,
  "thru": 4,
  "lat": 4,
  "sizelat": 4,
  "size": 5,
  "gisize": 5,
  "extrasize": 0,
  "asm": "fadd v0.8h, v0.8h, v1.8h\nfaddp v1.8h, v0.8h, v0.8h\nfaddp v0.8h, v1.8h, v0.8h\nfaddp h0, v0.2h\nfadd h0, h2, h0\nret",
  "giasm": "fadd v0.8h, v0.8h, v1.8h\nfaddp v1.8h, v0.8h, v0.8h\nfaddp v0.8h, v1.8h, v0.8h\nfaddp h0, v0.2h\nfadd h0, h2, h0\nret",
  "ll": "define half @test(<16 x half> %a, half %b) {\n  %r = call fast half @llvm.vector.reduce.fadd(half %b, <16 x half> %a)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 4 for instruction:   %r = call fast half @llvm.vector.reduce.fadd.v16f16(half %b, <16 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "reduce.fadd",
  "ty": "<2 x float>",
  "variant": "reduce",
  "codesize": 5,
  "thru": 6,
  "lat": 10,
  "sizelat": 6,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "mov s2, v0.s[1]\nfadd s0, s1, s0\nfadd s0, s0, s2\nret",
  "giasm": "mov s2, v0.s[1]\nfadd s0, s1, s0\nfadd s0, s0, s2\nret",
  "ll": "define float @test(<2 x float> %a, float %b) {\n  %r = call float @llvm.vector.reduce.fadd(float %b, <2 x float> %a)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 5 for instruction:   %r = call float @llvm.vector.reduce.fadd.v2f32(float %b, <2 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "reduce.fadd",
  "ty": "<2 x float>",
  "variant": "reducefast",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "faddp s0, v0.2s\nfadd s0, s1, s0\nret",
  "giasm": "faddp s0, v0.2s\nfadd s0, s1, s0\nret",
  "ll": "define float @test(<2 x float> %a, float %b) {\n  %r = call fast float @llvm.vector.reduce.fadd(float %b, <2 x float> %a)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call fast float @llvm.vector.reduce.fadd.v2f32(float %b, <2 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "reduce.fadd",
  "ty": "<4 x float>",
  "variant": "reduce",
  "codesize": 11,
  "thru": 14,
  "lat": 22,
  "sizelat": 14,
  "size": 7,
  "gisize": 7,
  "extrasize": 0,
  "asm": "mov s2, v0.s[1]\nfadd s1, s1, s0\nmov s3, v0.s[2]\nmov s0, v0.s[3]\nfadd s1, s1, s2\nfadd s1, s1, s3\nfadd s0, s1, s0\nret",
  "giasm": "mov s2, v0.s[1]\nfadd s1, s1, s0\nmov s3, v0.s[2]\nmov s0, v0.s[3]\nfadd s1, s1, s2\nfadd s1, s1, s3\nfadd s0, s1, s0\nret",
  "ll": "define float @test(<4 x float> %a, float %b) {\n  %r = call float @llvm.vector.reduce.fadd(float %b, <4 x float> %a)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 11 for instruction:   %r = call float @llvm.vector.reduce.fadd.v4f32(float %b, <4 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "reduce.fadd",
  "ty": "<4 x float>",
  "variant": "reducefast",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "faddp v0.4s, v0.4s, v0.4s\nfaddp s0, v0.2s\nfadd s0, s1, s0\nret",
  "giasm": "faddp v0.4s, v0.4s, v0.4s\nfaddp s0, v0.2s\nfadd s0, s1, s0\nret",
  "ll": "define float @test(<4 x float> %a, float %b) {\n  %r = call fast float @llvm.vector.reduce.fadd(float %b, <4 x float> %a)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call fast float @llvm.vector.reduce.fadd.v4f32(float %b, <4 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "reduce.fadd",
  "ty": "<8 x float>",
  "variant": "reduce",
  "codesize": 22,
  "thru": 28,
  "lat": 44,
  "sizelat": 28,
  "size": 14,
  "gisize": 14,
  "extrasize": 0,
  "asm": "mov s3, v0.s[1]\nfadd s2, s2, s0\nmov s4, v0.s[2]\nmov s0, v0.s[3]\nfadd s2, s2, s3\nmov s3, v1.s[2]\nfadd s2, s2, s4\nfadd s0, s2, s0\nmov s2, v1.s[1]\nfadd s0, s0, s1\nmov s1, v1.s[3]\nfadd s0, s0, s2\nfadd s0, s0, s3\nfadd s0, s0, s1\nret",
  "giasm": "mov s3, v0.s[1]\nfadd s2, s2, s0\nmov s4, v0.s[2]\nmov s0, v0.s[3]\nfadd s2, s2, s3\nmov s3, v1.s[2]\nfadd s2, s2, s4\nfadd s0, s2, s0\nmov s2, v1.s[1]\nfadd s0, s0, s1\nmov s1, v1.s[3]\nfadd s0, s0, s2\nfadd s0, s0, s3\nfadd s0, s0, s1\nret",
  "ll": "define float @test(<8 x float> %a, float %b) {\n  %r = call float @llvm.vector.reduce.fadd(float %b, <8 x float> %a)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 22 for instruction:   %r = call float @llvm.vector.reduce.fadd.v8f32(float %b, <8 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "reduce.fadd",
  "ty": "<8 x float>",
  "variant": "reducefast",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fadd v0.4s, v0.4s, v1.4s\nfaddp v0.4s, v0.4s, v0.4s\nfaddp s0, v0.2s\nfadd s0, s2, s0\nret",
  "giasm": "fadd v0.4s, v0.4s, v1.4s\nfaddp v0.4s, v0.4s, v0.4s\nfaddp s0, v0.2s\nfadd s0, s2, s0\nret",
  "ll": "define float @test(<8 x float> %a, float %b) {\n  %r = call fast float @llvm.vector.reduce.fadd(float %b, <8 x float> %a)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 3 for instruction:   %r = call fast float @llvm.vector.reduce.fadd.v8f32(float %b, <8 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "reduce.fadd",
  "ty": "<2 x double>",
  "variant": "reduce",
  "codesize": 5,
  "thru": 6,
  "lat": 10,
  "sizelat": 6,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "mov d2, v0.d[1]\nfadd d0, d1, d0\nfadd d0, d0, d2\nret",
  "giasm": "mov d2, v0.d[1]\nfadd d0, d1, d0\nfadd d0, d0, d2\nret",
  "ll": "define double @test(<2 x double> %a, double %b) {\n  %r = call double @llvm.vector.reduce.fadd(double %b, <2 x double> %a)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 5 for instruction:   %r = call double @llvm.vector.reduce.fadd.v2f64(double %b, <2 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "reduce.fadd",
  "ty": "<2 x double>",
  "variant": "reducefast",
  "codesize": 1,
  "thru": 1,
  "lat": 1,
  "sizelat": 1,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "faddp d0, v0.2d\nfadd d0, d1, d0\nret",
  "giasm": "faddp d0, v0.2d\nfadd d0, d1, d0\nret",
  "ll": "define double @test(<2 x double> %a, double %b) {\n  %r = call fast double @llvm.vector.reduce.fadd(double %b, <2 x double> %a)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 1 for instruction:   %r = call fast double @llvm.vector.reduce.fadd.v2f64(double %b, <2 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "reduce.fadd",
  "ty": "<4 x double>",
  "variant": "reduce",
  "codesize": 10,
  "thru": 12,
  "lat": 20,
  "sizelat": 12,
  "size": 6,
  "gisize": 6,
  "extrasize": 0,
  "asm": "mov d3, v0.d[1]\nfadd d0, d2, d0\nmov d2, v1.d[1]\nfadd d0, d0, d3\nfadd d0, d0, d1\nfadd d0, d0, d2\nret",
  "giasm": "mov d3, v0.d[1]\nfadd d0, d2, d0\nmov d2, v1.d[1]\nfadd d0, d0, d3\nfadd d0, d0, d1\nfadd d0, d0, d2\nret",
  "ll": "define double @test(<4 x double> %a, double %b) {\n  %r = call double @llvm.vector.reduce.fadd(double %b, <4 x double> %a)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 10 for instruction:   %r = call double @llvm.vector.reduce.fadd.v4f64(double %b, <4 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "reduce.fadd",
  "ty": "<4 x double>",
  "variant": "reducefast",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fadd v0.2d, v0.2d, v1.2d\nfaddp d0, v0.2d\nfadd d0, d2, d0\nret",
  "giasm": "fadd v0.2d, v0.2d, v1.2d\nfaddp d0, v0.2d\nfadd d0, d2, d0\nret",
  "ll": "define double @test(<4 x double> %a, double %b) {\n  %r = call fast double @llvm.vector.reduce.fadd(double %b, <4 x double> %a)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call fast double @llvm.vector.reduce.fadd.v4f64(double %b, <4 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "reduce.fmul",
  "ty": "<4 x half>",
  "variant": "reduce",
  "codesize": 11,
  "thru": 18,
  "lat": 22,
  "sizelat": 14,
  "size": 4,
  "gisize": 7,
  "extrasize": 0,
  "asm": "fmul h1, h1, h0\nfmul h1, h1, v0.h[1]\nfmul h1, h1, v0.h[2]\nfmul h0, h1, v0.h[3]\nret",
  "giasm": "mov h2, v0.h[1]\nfmul h1, h1, h0\nmov h3, v0.h[2]\nmov h0, v0.h[3]\nfmul h1, h1, h2\nfmul h1, h1, h3\nfmul h0, h1, h0\nret",
  "ll": "define half @test(<4 x half> %a, half %b) {\n  %r = call half @llvm.vector.reduce.fmul(half %b, <4 x half> %a)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 11 for instruction:   %r = call half @llvm.vector.reduce.fmul.v4f16(half %b, <4 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "reduce.fmul",
  "ty": "<4 x half>",
  "variant": "reducefast",
  "codesize": 8,
  "thru": 10,
  "lat": 12,
  "sizelat": 8,
  "size": 4,
  "gisize": 7,
  "extrasize": 0,
  "asm": "fmul h2, h0, v0.h[1]\nfmul h2, h2, v0.h[2]\nfmul h0, h2, v0.h[3]\nfmul h0, h1, h0\nret",
  "giasm": "mov h2, v0.h[1]\nmov h3, v0.h[2]\nmov h4, v0.h[3]\nfmul h0, h0, h2\nfmul h2, h3, h4\nfmul h0, h0, h2\nfmul h0, h1, h0\nret",
  "ll": "define half @test(<4 x half> %a, half %b) {\n  %r = call fast half @llvm.vector.reduce.fmul(half %b, <4 x half> %a)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 8 for instruction:   %r = call fast half @llvm.vector.reduce.fmul.v4f16(half %b, <4 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "reduce.fmul",
  "ty": "<8 x half>",
  "variant": "reduce",
  "codesize": 23,
  "thru": 38,
  "lat": 46,
  "sizelat": 30,
  "size": 8,
  "gisize": 8,
  "extrasize": 0,
  "asm": "fmul h1, h1, h0\nfmul h1, h1, v0.h[1]\nfmul h1, h1, v0.h[2]\nfmul h1, h1, v0.h[3]\nfmul h1, h1, v0.h[4]\nfmul h1, h1, v0.h[5]\nfmul h1, h1, v0.h[6]\nfmul h0, h1, v0.h[7]\nret",
  "giasm": "fmul h1, h1, h0\nfmul h1, h1, v0.h[1]\nfmul h1, h1, v0.h[2]\nfmul h1, h1, v0.h[3]\nfmul h1, h1, v0.h[4]\nfmul h1, h1, v0.h[5]\nfmul h1, h1, v0.h[6]\nfmul h0, h1, v0.h[7]\nret",
  "ll": "define half @test(<8 x half> %a, half %b) {\n  %r = call half @llvm.vector.reduce.fmul(half %b, <8 x half> %a)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 23 for instruction:   %r = call half @llvm.vector.reduce.fmul.v8f16(half %b, <8 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "reduce.fmul",
  "ty": "<8 x half>",
  "variant": "reducefast",
  "codesize": 27,
  "thru": 30,
  "lat": 33,
  "sizelat": 27,
  "size": 6,
  "gisize": 9,
  "extrasize": 0,
  "asm": "ext v2.16b, v0.16b, v0.16b, #8\nfmul v0.4h, v0.4h, v2.4h\nfmul h2, h0, v0.h[1]\nfmul h2, h2, v0.h[2]\nfmul h0, h2, v0.h[3]\nfmul h0, h1, h0\nret",
  "giasm": "mov d2, v0.d[1]\nfmul v0.4h, v0.4h, v2.4h\nmov h2, v0.h[1]\nmov h3, v0.h[2]\nmov h4, v0.h[3]\nfmul h0, h0, h2\nfmul h2, h3, h4\nfmul h0, h0, h2\nfmul h0, h1, h0\nret",
  "ll": "define half @test(<8 x half> %a, half %b) {\n  %r = call fast half @llvm.vector.reduce.fmul(half %b, <8 x half> %a)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 27 for instruction:   %r = call fast half @llvm.vector.reduce.fmul.v8f16(half %b, <8 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "reduce.fmul",
  "ty": "<16 x half>",
  "variant": "reduce",
  "codesize": 46,
  "thru": 76,
  "lat": 92,
  "sizelat": 60,
  "size": 16,
  "gisize": 16,
  "extrasize": 0,
  "asm": "fmul h2, h2, h0\nfmul h2, h2, v0.h[1]\nfmul h2, h2, v0.h[2]\nfmul h2, h2, v0.h[3]\nfmul h2, h2, v0.h[4]\nfmul h2, h2, v0.h[5]\nfmul h2, h2, v0.h[6]\nfmul h0, h2, v0.h[7]\nfmul h0, h0, h1\nfmul h0, h0, v1.h[1]\nfmul h0, h0, v1.h[2]\nfmul h0, h0, v1.h[3]\nfmul h0, h0, v1.h[4]\nfmul h0, h0, v1.h[5]\nfmul h0, h0, v1.h[6]\nfmul h0, h0, v1.h[7]\nret",
  "giasm": "fmul h2, h2, h0\nfmul h2, h2, v0.h[1]\nfmul h2, h2, v0.h[2]\nfmul h2, h2, v0.h[3]\nfmul h2, h2, v0.h[4]\nfmul h2, h2, v0.h[5]\nfmul h2, h2, v0.h[6]\nfmul h0, h2, v0.h[7]\nfmul h0, h0, h1\nfmul h0, h0, v1.h[1]\nfmul h0, h0, v1.h[2]\nfmul h0, h0, v1.h[3]\nfmul h0, h0, v1.h[4]\nfmul h0, h0, v1.h[5]\nfmul h0, h0, v1.h[6]\nfmul h0, h0, v1.h[7]\nret",
  "ll": "define half @test(<16 x half> %a, half %b) {\n  %r = call half @llvm.vector.reduce.fmul(half %b, <16 x half> %a)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 46 for instruction:   %r = call half @llvm.vector.reduce.fmul.v16f16(half %b, <16 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "reduce.fmul",
  "ty": "<16 x half>",
  "variant": "reducefast",
  "codesize": 44,
  "thru": 48,
  "lat": 52,
  "sizelat": 44,
  "size": 7,
  "gisize": 10,
  "extrasize": 0,
  "asm": "fmul v0.8h, v0.8h, v1.8h\next v1.16b, v0.16b, v0.16b, #8\nfmul v0.4h, v0.4h, v1.4h\nfmul h1, h0, v0.h[1]\nfmul h1, h1, v0.h[2]\nfmul h0, h1, v0.h[3]\nfmul h0, h2, h0\nret",
  "giasm": "fmul v0.8h, v0.8h, v1.8h\nmov d1, v0.d[1]\nfmul v0.4h, v0.4h, v1.4h\nmov h1, v0.h[1]\nmov h3, v0.h[2]\nmov h4, v0.h[3]\nfmul h0, h0, h1\nfmul h1, h3, h4\nfmul h0, h0, h1\nfmul h0, h2, h0\nret",
  "ll": "define half @test(<16 x half> %a, half %b) {\n  %r = call fast half @llvm.vector.reduce.fmul(half %b, <16 x half> %a)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 44 for instruction:   %r = call fast half @llvm.vector.reduce.fmul.v16f16(half %b, <16 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "reduce.fmul",
  "ty": "<2 x float>",
  "variant": "reduce",
  "codesize": 5,
  "thru": 8,
  "lat": 10,
  "sizelat": 6,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fmul s1, s1, s0\nfmul s0, s1, v0.s[1]\nret",
  "giasm": "mov s2, v0.s[1]\nfmul s0, s1, s0\nfmul s0, s0, s2\nret",
  "ll": "define float @test(<2 x float> %a, float %b) {\n  %r = call float @llvm.vector.reduce.fmul(float %b, <2 x float> %a)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 5 for instruction:   %r = call float @llvm.vector.reduce.fmul.v2f32(float %b, <2 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "reduce.fmul",
  "ty": "<2 x float>",
  "variant": "reducefast",
  "codesize": 2,
  "thru": 3,
  "lat": 4,
  "sizelat": 2,
  "size": 2,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fmul s0, s0, v0.s[1]\nfmul s0, s1, s0\nret",
  "giasm": "mov s2, v0.s[1]\nfmul s0, s0, s2\nfmul s0, s1, s0\nret",
  "ll": "define float @test(<2 x float> %a, float %b) {\n  %r = call fast float @llvm.vector.reduce.fmul(float %b, <2 x float> %a)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call fast float @llvm.vector.reduce.fmul.v2f32(float %b, <2 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "reduce.fmul",
  "ty": "<4 x float>",
  "variant": "reduce",
  "codesize": 11,
  "thru": 18,
  "lat": 22,
  "sizelat": 14,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fmul s1, s1, s0\nfmul s1, s1, v0.s[1]\nfmul s1, s1, v0.s[2]\nfmul s0, s1, v0.s[3]\nret",
  "giasm": "fmul s1, s1, s0\nfmul s1, s1, v0.s[1]\nfmul s1, s1, v0.s[2]\nfmul s0, s1, v0.s[3]\nret",
  "ll": "define float @test(<4 x float> %a, float %b) {\n  %r = call float @llvm.vector.reduce.fmul(float %b, <4 x float> %a)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 11 for instruction:   %r = call float @llvm.vector.reduce.fmul.v4f32(float %b, <4 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "reduce.fmul",
  "ty": "<4 x float>",
  "variant": "reducefast",
  "codesize": 8,
  "thru": 10,
  "lat": 12,
  "sizelat": 8,
  "size": 4,
  "gisize": 5,
  "extrasize": 0,
  "asm": "ext v2.16b, v0.16b, v0.16b, #8\nfmul v0.2s, v0.2s, v2.2s\nfmul s0, s0, v0.s[1]\nfmul s0, s1, s0\nret",
  "giasm": "mov d2, v0.d[1]\nfmul v0.2s, v0.2s, v2.2s\nmov s2, v0.s[1]\nfmul s0, s0, s2\nfmul s0, s1, s0\nret",
  "ll": "define float @test(<4 x float> %a, float %b) {\n  %r = call fast float @llvm.vector.reduce.fmul(float %b, <4 x float> %a)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 8 for instruction:   %r = call fast float @llvm.vector.reduce.fmul.v4f32(float %b, <4 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "reduce.fmul",
  "ty": "<8 x float>",
  "variant": "reduce",
  "codesize": 22,
  "thru": 36,
  "lat": 44,
  "sizelat": 28,
  "size": 8,
  "gisize": 8,
  "extrasize": 0,
  "asm": "fmul s2, s2, s0\nfmul s2, s2, v0.s[1]\nfmul s2, s2, v0.s[2]\nfmul s0, s2, v0.s[3]\nfmul s0, s0, s1\nfmul s0, s0, v1.s[1]\nfmul s0, s0, v1.s[2]\nfmul s0, s0, v1.s[3]\nret",
  "giasm": "fmul s2, s2, s0\nfmul s2, s2, v0.s[1]\nfmul s2, s2, v0.s[2]\nfmul s0, s2, v0.s[3]\nfmul s0, s0, s1\nfmul s0, s0, v1.s[1]\nfmul s0, s0, v1.s[2]\nfmul s0, s0, v1.s[3]\nret",
  "ll": "define float @test(<8 x float> %a, float %b) {\n  %r = call float @llvm.vector.reduce.fmul(float %b, <8 x float> %a)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 22 for instruction:   %r = call float @llvm.vector.reduce.fmul.v8f32(float %b, <8 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "reduce.fmul",
  "ty": "<8 x float>",
  "variant": "reducefast",
  "codesize": 15,
  "thru": 18,
  "lat": 21,
  "sizelat": 15,
  "size": 5,
  "gisize": 6,
  "extrasize": 0,
  "asm": "fmul v0.4s, v0.4s, v1.4s\next v1.16b, v0.16b, v0.16b, #8\nfmul v0.2s, v0.2s, v1.2s\nfmul s0, s0, v0.s[1]\nfmul s0, s2, s0\nret",
  "giasm": "fmul v0.4s, v0.4s, v1.4s\nmov d1, v0.d[1]\nfmul v0.2s, v0.2s, v1.2s\nmov s1, v0.s[1]\nfmul s0, s0, s1\nfmul s0, s2, s0\nret",
  "ll": "define float @test(<8 x float> %a, float %b) {\n  %r = call fast float @llvm.vector.reduce.fmul(float %b, <8 x float> %a)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 15 for instruction:   %r = call fast float @llvm.vector.reduce.fmul.v8f32(float %b, <8 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "reduce.fmul",
  "ty": "<2 x double>",
  "variant": "reduce",
  "codesize": 5,
  "thru": 8,
  "lat": 10,
  "sizelat": 6,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmul d1, d1, d0\nfmul d0, d1, v0.d[1]\nret",
  "giasm": "fmul d1, d1, d0\nfmul d0, d1, v0.d[1]\nret",
  "ll": "define double @test(<2 x double> %a, double %b) {\n  %r = call double @llvm.vector.reduce.fmul(double %b, <2 x double> %a)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 5 for instruction:   %r = call double @llvm.vector.reduce.fmul.v2f64(double %b, <2 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "reduce.fmul",
  "ty": "<2 x double>",
  "variant": "reducefast",
  "codesize": 2,
  "thru": 3,
  "lat": 4,
  "sizelat": 2,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmul d0, d0, v0.d[1]\nfmul d0, d1, d0\nret",
  "giasm": "fmul d0, d0, v0.d[1]\nfmul d0, d1, d0\nret",
  "ll": "define double @test(<2 x double> %a, double %b) {\n  %r = call fast double @llvm.vector.reduce.fmul(double %b, <2 x double> %a)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call fast double @llvm.vector.reduce.fmul.v2f64(double %b, <2 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "reduce.fmul",
  "ty": "<4 x double>",
  "variant": "reduce",
  "codesize": 10,
  "thru": 16,
  "lat": 20,
  "sizelat": 12,
  "size": 4,
  "gisize": 4,
  "extrasize": 0,
  "asm": "fmul d2, d2, d0\nfmul d0, d2, v0.d[1]\nfmul d0, d0, d1\nfmul d0, d0, v1.d[1]\nret",
  "giasm": "fmul d2, d2, d0\nfmul d0, d2, v0.d[1]\nfmul d0, d0, d1\nfmul d0, d0, v1.d[1]\nret",
  "ll": "define double @test(<4 x double> %a, double %b) {\n  %r = call double @llvm.vector.reduce.fmul(double %b, <4 x double> %a)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 10 for instruction:   %r = call double @llvm.vector.reduce.fmul.v4f64(double %b, <4 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "reduce.fmul",
  "ty": "<4 x double>",
  "variant": "reducefast",
  "codesize": 5,
  "thru": 7,
  "lat": 9,
  "sizelat": 5,
  "size": 3,
  "gisize": 3,
  "extrasize": 0,
  "asm": "fmul v0.2d, v0.2d, v1.2d\nfmul d0, d0, v0.d[1]\nfmul d0, d2, d0\nret",
  "giasm": "fmul v0.2d, v0.2d, v1.2d\nfmul d0, d0, v0.d[1]\nfmul d0, d2, d0\nret",
  "ll": "define double @test(<4 x double> %a, double %b) {\n  %r = call fast double @llvm.vector.reduce.fmul(double %b, <4 x double> %a)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 5 for instruction:   %r = call fast double @llvm.vector.reduce.fmul.v4f64(double %b, <4 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "reduce.fmin",
  "ty": "<4 x half>",
  "variant": "reduce",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fminnmv h0, v0.4h\nret",
  "giasm": "fminnmv h0, v0.4h\nret",
  "ll": "define half @test(<4 x half> %a) {\n  %r = call half @llvm.vector.reduce.fmin(<4 x half> %a)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call half @llvm.vector.reduce.fmin.v4f16(<4 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "reduce.fmin",
  "ty": "<4 x half>",
  "variant": "reducefast",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fminnmv h0, v0.4h\nret",
  "giasm": "fminnmv h0, v0.4h\nret",
  "ll": "define half @test(<4 x half> %a) {\n  %r = call fast half @llvm.vector.reduce.fmin(<4 x half> %a)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call fast half @llvm.vector.reduce.fmin.v4f16(<4 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "reduce.fmin",
  "ty": "<8 x half>",
  "variant": "reduce",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fminnmv h0, v0.8h\nret",
  "giasm": "fminnmv h0, v0.8h\nret",
  "ll": "define half @test(<8 x half> %a) {\n  %r = call half @llvm.vector.reduce.fmin(<8 x half> %a)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call half @llvm.vector.reduce.fmin.v8f16(<8 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "reduce.fmin",
  "ty": "<8 x half>",
  "variant": "reducefast",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fminnmv h0, v0.8h\nret",
  "giasm": "fminnmv h0, v0.8h\nret",
  "ll": "define half @test(<8 x half> %a) {\n  %r = call fast half @llvm.vector.reduce.fmin(<8 x half> %a)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call fast half @llvm.vector.reduce.fmin.v8f16(<8 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "reduce.fmin",
  "ty": "<16 x half>",
  "variant": "reduce",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fminnm v0.8h, v0.8h, v1.8h\nfminnmv h0, v0.8h\nret",
  "giasm": "fminnm v0.8h, v0.8h, v1.8h\nfminnmv h0, v0.8h\nret",
  "ll": "define half @test(<16 x half> %a) {\n  %r = call half @llvm.vector.reduce.fmin(<16 x half> %a)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 3 for instruction:   %r = call half @llvm.vector.reduce.fmin.v16f16(<16 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "reduce.fmin",
  "ty": "<16 x half>",
  "variant": "reducefast",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fminnm v0.8h, v0.8h, v1.8h\nfminnmv h0, v0.8h\nret",
  "giasm": "fminnm v0.8h, v0.8h, v1.8h\nfminnmv h0, v0.8h\nret",
  "ll": "define half @test(<16 x half> %a) {\n  %r = call fast half @llvm.vector.reduce.fmin(<16 x half> %a)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 3 for instruction:   %r = call fast half @llvm.vector.reduce.fmin.v16f16(<16 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "reduce.fmin",
  "ty": "<2 x float>",
  "variant": "reduce",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fminnmp s0, v0.2s\nret",
  "giasm": "fminnmp s0, v0.2s\nret",
  "ll": "define float @test(<2 x float> %a) {\n  %r = call float @llvm.vector.reduce.fmin(<2 x float> %a)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call float @llvm.vector.reduce.fmin.v2f32(<2 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "reduce.fmin",
  "ty": "<2 x float>",
  "variant": "reducefast",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fminnmp s0, v0.2s\nret",
  "giasm": "fminnmp s0, v0.2s\nret",
  "ll": "define float @test(<2 x float> %a) {\n  %r = call fast float @llvm.vector.reduce.fmin(<2 x float> %a)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call fast float @llvm.vector.reduce.fmin.v2f32(<2 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "reduce.fmin",
  "ty": "<4 x float>",
  "variant": "reduce",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fminnmv s0, v0.4s\nret",
  "giasm": "fminnmv s0, v0.4s\nret",
  "ll": "define float @test(<4 x float> %a) {\n  %r = call float @llvm.vector.reduce.fmin(<4 x float> %a)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call float @llvm.vector.reduce.fmin.v4f32(<4 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "reduce.fmin",
  "ty": "<4 x float>",
  "variant": "reducefast",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fminnmv s0, v0.4s\nret",
  "giasm": "fminnmv s0, v0.4s\nret",
  "ll": "define float @test(<4 x float> %a) {\n  %r = call fast float @llvm.vector.reduce.fmin(<4 x float> %a)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call fast float @llvm.vector.reduce.fmin.v4f32(<4 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "reduce.fmin",
  "ty": "<8 x float>",
  "variant": "reduce",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fminnm v0.4s, v0.4s, v1.4s\nfminnmv s0, v0.4s\nret",
  "giasm": "fminnm v0.4s, v0.4s, v1.4s\nfminnmv s0, v0.4s\nret",
  "ll": "define float @test(<8 x float> %a) {\n  %r = call float @llvm.vector.reduce.fmin(<8 x float> %a)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 3 for instruction:   %r = call float @llvm.vector.reduce.fmin.v8f32(<8 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "reduce.fmin",
  "ty": "<8 x float>",
  "variant": "reducefast",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fminnm v0.4s, v0.4s, v1.4s\nfminnmv s0, v0.4s\nret",
  "giasm": "fminnm v0.4s, v0.4s, v1.4s\nfminnmv s0, v0.4s\nret",
  "ll": "define float @test(<8 x float> %a) {\n  %r = call fast float @llvm.vector.reduce.fmin(<8 x float> %a)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 3 for instruction:   %r = call fast float @llvm.vector.reduce.fmin.v8f32(<8 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "reduce.fmin",
  "ty": "<2 x double>",
  "variant": "reduce",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fminnmp d0, v0.2d\nret",
  "giasm": "fminnmp d0, v0.2d\nret",
  "ll": "define double @test(<2 x double> %a) {\n  %r = call double @llvm.vector.reduce.fmin(<2 x double> %a)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call double @llvm.vector.reduce.fmin.v2f64(<2 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "reduce.fmin",
  "ty": "<2 x double>",
  "variant": "reducefast",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fminnmp d0, v0.2d\nret",
  "giasm": "fminnmp d0, v0.2d\nret",
  "ll": "define double @test(<2 x double> %a) {\n  %r = call fast double @llvm.vector.reduce.fmin(<2 x double> %a)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call fast double @llvm.vector.reduce.fmin.v2f64(<2 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "reduce.fmin",
  "ty": "<4 x double>",
  "variant": "reduce",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fminnm v0.2d, v0.2d, v1.2d\nfminnmp d0, v0.2d\nret",
  "giasm": "fminnm v0.2d, v0.2d, v1.2d\nfminnmp d0, v0.2d\nret",
  "ll": "define double @test(<4 x double> %a) {\n  %r = call double @llvm.vector.reduce.fmin(<4 x double> %a)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 3 for instruction:   %r = call double @llvm.vector.reduce.fmin.v4f64(<4 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "reduce.fmin",
  "ty": "<4 x double>",
  "variant": "reducefast",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fminnm v0.2d, v0.2d, v1.2d\nfminnmp d0, v0.2d\nret",
  "giasm": "fminnm v0.2d, v0.2d, v1.2d\nfminnmp d0, v0.2d\nret",
  "ll": "define double @test(<4 x double> %a) {\n  %r = call fast double @llvm.vector.reduce.fmin(<4 x double> %a)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 3 for instruction:   %r = call fast double @llvm.vector.reduce.fmin.v4f64(<4 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "reduce.fmax",
  "ty": "<4 x half>",
  "variant": "reduce",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmaxnmv h0, v0.4h\nret",
  "giasm": "fmaxnmv h0, v0.4h\nret",
  "ll": "define half @test(<4 x half> %a) {\n  %r = call half @llvm.vector.reduce.fmax(<4 x half> %a)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call half @llvm.vector.reduce.fmax.v4f16(<4 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "reduce.fmax",
  "ty": "<4 x half>",
  "variant": "reducefast",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmaxnmv h0, v0.4h\nret",
  "giasm": "fmaxnmv h0, v0.4h\nret",
  "ll": "define half @test(<4 x half> %a) {\n  %r = call fast half @llvm.vector.reduce.fmax(<4 x half> %a)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call fast half @llvm.vector.reduce.fmax.v4f16(<4 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "reduce.fmax",
  "ty": "<8 x half>",
  "variant": "reduce",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmaxnmv h0, v0.8h\nret",
  "giasm": "fmaxnmv h0, v0.8h\nret",
  "ll": "define half @test(<8 x half> %a) {\n  %r = call half @llvm.vector.reduce.fmax(<8 x half> %a)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call half @llvm.vector.reduce.fmax.v8f16(<8 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "reduce.fmax",
  "ty": "<8 x half>",
  "variant": "reducefast",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmaxnmv h0, v0.8h\nret",
  "giasm": "fmaxnmv h0, v0.8h\nret",
  "ll": "define half @test(<8 x half> %a) {\n  %r = call fast half @llvm.vector.reduce.fmax(<8 x half> %a)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call fast half @llvm.vector.reduce.fmax.v8f16(<8 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "reduce.fmax",
  "ty": "<16 x half>",
  "variant": "reduce",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmaxnm v0.8h, v0.8h, v1.8h\nfmaxnmv h0, v0.8h\nret",
  "giasm": "fmaxnm v0.8h, v0.8h, v1.8h\nfmaxnmv h0, v0.8h\nret",
  "ll": "define half @test(<16 x half> %a) {\n  %r = call half @llvm.vector.reduce.fmax(<16 x half> %a)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 3 for instruction:   %r = call half @llvm.vector.reduce.fmax.v16f16(<16 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "reduce.fmax",
  "ty": "<16 x half>",
  "variant": "reducefast",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmaxnm v0.8h, v0.8h, v1.8h\nfmaxnmv h0, v0.8h\nret",
  "giasm": "fmaxnm v0.8h, v0.8h, v1.8h\nfmaxnmv h0, v0.8h\nret",
  "ll": "define half @test(<16 x half> %a) {\n  %r = call fast half @llvm.vector.reduce.fmax(<16 x half> %a)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 3 for instruction:   %r = call fast half @llvm.vector.reduce.fmax.v16f16(<16 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "reduce.fmax",
  "ty": "<2 x float>",
  "variant": "reduce",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmaxnmp s0, v0.2s\nret",
  "giasm": "fmaxnmp s0, v0.2s\nret",
  "ll": "define float @test(<2 x float> %a) {\n  %r = call float @llvm.vector.reduce.fmax(<2 x float> %a)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call float @llvm.vector.reduce.fmax.v2f32(<2 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "reduce.fmax",
  "ty": "<2 x float>",
  "variant": "reducefast",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmaxnmp s0, v0.2s\nret",
  "giasm": "fmaxnmp s0, v0.2s\nret",
  "ll": "define float @test(<2 x float> %a) {\n  %r = call fast float @llvm.vector.reduce.fmax(<2 x float> %a)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call fast float @llvm.vector.reduce.fmax.v2f32(<2 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "reduce.fmax",
  "ty": "<4 x float>",
  "variant": "reduce",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmaxnmv s0, v0.4s\nret",
  "giasm": "fmaxnmv s0, v0.4s\nret",
  "ll": "define float @test(<4 x float> %a) {\n  %r = call float @llvm.vector.reduce.fmax(<4 x float> %a)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call float @llvm.vector.reduce.fmax.v4f32(<4 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "reduce.fmax",
  "ty": "<4 x float>",
  "variant": "reducefast",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmaxnmv s0, v0.4s\nret",
  "giasm": "fmaxnmv s0, v0.4s\nret",
  "ll": "define float @test(<4 x float> %a) {\n  %r = call fast float @llvm.vector.reduce.fmax(<4 x float> %a)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call fast float @llvm.vector.reduce.fmax.v4f32(<4 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "reduce.fmax",
  "ty": "<8 x float>",
  "variant": "reduce",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmaxnm v0.4s, v0.4s, v1.4s\nfmaxnmv s0, v0.4s\nret",
  "giasm": "fmaxnm v0.4s, v0.4s, v1.4s\nfmaxnmv s0, v0.4s\nret",
  "ll": "define float @test(<8 x float> %a) {\n  %r = call float @llvm.vector.reduce.fmax(<8 x float> %a)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 3 for instruction:   %r = call float @llvm.vector.reduce.fmax.v8f32(<8 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "reduce.fmax",
  "ty": "<8 x float>",
  "variant": "reducefast",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmaxnm v0.4s, v0.4s, v1.4s\nfmaxnmv s0, v0.4s\nret",
  "giasm": "fmaxnm v0.4s, v0.4s, v1.4s\nfmaxnmv s0, v0.4s\nret",
  "ll": "define float @test(<8 x float> %a) {\n  %r = call fast float @llvm.vector.reduce.fmax(<8 x float> %a)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 3 for instruction:   %r = call fast float @llvm.vector.reduce.fmax.v8f32(<8 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "reduce.fmax",
  "ty": "<2 x double>",
  "variant": "reduce",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmaxnmp d0, v0.2d\nret",
  "giasm": "fmaxnmp d0, v0.2d\nret",
  "ll": "define double @test(<2 x double> %a) {\n  %r = call double @llvm.vector.reduce.fmax(<2 x double> %a)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call double @llvm.vector.reduce.fmax.v2f64(<2 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "reduce.fmax",
  "ty": "<2 x double>",
  "variant": "reducefast",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmaxnmp d0, v0.2d\nret",
  "giasm": "fmaxnmp d0, v0.2d\nret",
  "ll": "define double @test(<2 x double> %a) {\n  %r = call fast double @llvm.vector.reduce.fmax(<2 x double> %a)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call fast double @llvm.vector.reduce.fmax.v2f64(<2 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "reduce.fmax",
  "ty": "<4 x double>",
  "variant": "reduce",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmaxnm v0.2d, v0.2d, v1.2d\nfmaxnmp d0, v0.2d\nret",
  "giasm": "fmaxnm v0.2d, v0.2d, v1.2d\nfmaxnmp d0, v0.2d\nret",
  "ll": "define double @test(<4 x double> %a) {\n  %r = call double @llvm.vector.reduce.fmax(<4 x double> %a)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 3 for instruction:   %r = call double @llvm.vector.reduce.fmax.v4f64(<4 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "reduce.fmax",
  "ty": "<4 x double>",
  "variant": "reducefast",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmaxnm v0.2d, v0.2d, v1.2d\nfmaxnmp d0, v0.2d\nret",
  "giasm": "fmaxnm v0.2d, v0.2d, v1.2d\nfmaxnmp d0, v0.2d\nret",
  "ll": "define double @test(<4 x double> %a) {\n  %r = call fast double @llvm.vector.reduce.fmax(<4 x double> %a)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 3 for instruction:   %r = call fast double @llvm.vector.reduce.fmax.v4f64(<4 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "reduce.fminimum",
  "ty": "<4 x half>",
  "variant": "reduce",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fminv h0, v0.4h\nret",
  "giasm": "fminv h0, v0.4h\nret",
  "ll": "define half @test(<4 x half> %a) {\n  %r = call half @llvm.vector.reduce.fminimum(<4 x half> %a)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call half @llvm.vector.reduce.fminimum.v4f16(<4 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "reduce.fminimum",
  "ty": "<4 x half>",
  "variant": "reducefast",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fminv h0, v0.4h\nret",
  "giasm": "fminv h0, v0.4h\nret",
  "ll": "define half @test(<4 x half> %a) {\n  %r = call fast half @llvm.vector.reduce.fminimum(<4 x half> %a)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call fast half @llvm.vector.reduce.fminimum.v4f16(<4 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "reduce.fminimum",
  "ty": "<8 x half>",
  "variant": "reduce",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fminv h0, v0.8h\nret",
  "giasm": "fminv h0, v0.8h\nret",
  "ll": "define half @test(<8 x half> %a) {\n  %r = call half @llvm.vector.reduce.fminimum(<8 x half> %a)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call half @llvm.vector.reduce.fminimum.v8f16(<8 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "reduce.fminimum",
  "ty": "<8 x half>",
  "variant": "reducefast",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fminv h0, v0.8h\nret",
  "giasm": "fminv h0, v0.8h\nret",
  "ll": "define half @test(<8 x half> %a) {\n  %r = call fast half @llvm.vector.reduce.fminimum(<8 x half> %a)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call fast half @llvm.vector.reduce.fminimum.v8f16(<8 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "reduce.fminimum",
  "ty": "<16 x half>",
  "variant": "reduce",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmin v0.8h, v0.8h, v1.8h\nfminv h0, v0.8h\nret",
  "giasm": "fmin v0.8h, v0.8h, v1.8h\nfminv h0, v0.8h\nret",
  "ll": "define half @test(<16 x half> %a) {\n  %r = call half @llvm.vector.reduce.fminimum(<16 x half> %a)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 3 for instruction:   %r = call half @llvm.vector.reduce.fminimum.v16f16(<16 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "reduce.fminimum",
  "ty": "<16 x half>",
  "variant": "reducefast",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmin v0.8h, v0.8h, v1.8h\nfminv h0, v0.8h\nret",
  "giasm": "fmin v0.8h, v0.8h, v1.8h\nfminv h0, v0.8h\nret",
  "ll": "define half @test(<16 x half> %a) {\n  %r = call fast half @llvm.vector.reduce.fminimum(<16 x half> %a)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 3 for instruction:   %r = call fast half @llvm.vector.reduce.fminimum.v16f16(<16 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "reduce.fminimum",
  "ty": "<2 x float>",
  "variant": "reduce",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fminp s0, v0.2s\nret",
  "giasm": "fminp s0, v0.2s\nret",
  "ll": "define float @test(<2 x float> %a) {\n  %r = call float @llvm.vector.reduce.fminimum(<2 x float> %a)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call float @llvm.vector.reduce.fminimum.v2f32(<2 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "reduce.fminimum",
  "ty": "<2 x float>",
  "variant": "reducefast",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fminp s0, v0.2s\nret",
  "giasm": "fminp s0, v0.2s\nret",
  "ll": "define float @test(<2 x float> %a) {\n  %r = call fast float @llvm.vector.reduce.fminimum(<2 x float> %a)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call fast float @llvm.vector.reduce.fminimum.v2f32(<2 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "reduce.fminimum",
  "ty": "<4 x float>",
  "variant": "reduce",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fminv s0, v0.4s\nret",
  "giasm": "fminv s0, v0.4s\nret",
  "ll": "define float @test(<4 x float> %a) {\n  %r = call float @llvm.vector.reduce.fminimum(<4 x float> %a)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call float @llvm.vector.reduce.fminimum.v4f32(<4 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "reduce.fminimum",
  "ty": "<4 x float>",
  "variant": "reducefast",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fminv s0, v0.4s\nret",
  "giasm": "fminv s0, v0.4s\nret",
  "ll": "define float @test(<4 x float> %a) {\n  %r = call fast float @llvm.vector.reduce.fminimum(<4 x float> %a)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call fast float @llvm.vector.reduce.fminimum.v4f32(<4 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "reduce.fminimum",
  "ty": "<8 x float>",
  "variant": "reduce",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmin v0.4s, v0.4s, v1.4s\nfminv s0, v0.4s\nret",
  "giasm": "fmin v0.4s, v0.4s, v1.4s\nfminv s0, v0.4s\nret",
  "ll": "define float @test(<8 x float> %a) {\n  %r = call float @llvm.vector.reduce.fminimum(<8 x float> %a)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 3 for instruction:   %r = call float @llvm.vector.reduce.fminimum.v8f32(<8 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "reduce.fminimum",
  "ty": "<8 x float>",
  "variant": "reducefast",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmin v0.4s, v0.4s, v1.4s\nfminv s0, v0.4s\nret",
  "giasm": "fmin v0.4s, v0.4s, v1.4s\nfminv s0, v0.4s\nret",
  "ll": "define float @test(<8 x float> %a) {\n  %r = call fast float @llvm.vector.reduce.fminimum(<8 x float> %a)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 3 for instruction:   %r = call fast float @llvm.vector.reduce.fminimum.v8f32(<8 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "reduce.fminimum",
  "ty": "<2 x double>",
  "variant": "reduce",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fminp d0, v0.2d\nret",
  "giasm": "fminp d0, v0.2d\nret",
  "ll": "define double @test(<2 x double> %a) {\n  %r = call double @llvm.vector.reduce.fminimum(<2 x double> %a)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call double @llvm.vector.reduce.fminimum.v2f64(<2 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "reduce.fminimum",
  "ty": "<2 x double>",
  "variant": "reducefast",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fminp d0, v0.2d\nret",
  "giasm": "fminp d0, v0.2d\nret",
  "ll": "define double @test(<2 x double> %a) {\n  %r = call fast double @llvm.vector.reduce.fminimum(<2 x double> %a)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call fast double @llvm.vector.reduce.fminimum.v2f64(<2 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "reduce.fminimum",
  "ty": "<4 x double>",
  "variant": "reduce",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmin v0.2d, v0.2d, v1.2d\nfminp d0, v0.2d\nret",
  "giasm": "fmin v0.2d, v0.2d, v1.2d\nfminp d0, v0.2d\nret",
  "ll": "define double @test(<4 x double> %a) {\n  %r = call double @llvm.vector.reduce.fminimum(<4 x double> %a)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 3 for instruction:   %r = call double @llvm.vector.reduce.fminimum.v4f64(<4 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "reduce.fminimum",
  "ty": "<4 x double>",
  "variant": "reducefast",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmin v0.2d, v0.2d, v1.2d\nfminp d0, v0.2d\nret",
  "giasm": "fmin v0.2d, v0.2d, v1.2d\nfminp d0, v0.2d\nret",
  "ll": "define double @test(<4 x double> %a) {\n  %r = call fast double @llvm.vector.reduce.fminimum(<4 x double> %a)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 3 for instruction:   %r = call fast double @llvm.vector.reduce.fminimum.v4f64(<4 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "reduce.fmaximum",
  "ty": "<4 x half>",
  "variant": "reduce",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmaxv h0, v0.4h\nret",
  "giasm": "fmaxv h0, v0.4h\nret",
  "ll": "define half @test(<4 x half> %a) {\n  %r = call half @llvm.vector.reduce.fmaximum(<4 x half> %a)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call half @llvm.vector.reduce.fmaximum.v4f16(<4 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "reduce.fmaximum",
  "ty": "<4 x half>",
  "variant": "reducefast",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmaxv h0, v0.4h\nret",
  "giasm": "fmaxv h0, v0.4h\nret",
  "ll": "define half @test(<4 x half> %a) {\n  %r = call fast half @llvm.vector.reduce.fmaximum(<4 x half> %a)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call fast half @llvm.vector.reduce.fmaximum.v4f16(<4 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "reduce.fmaximum",
  "ty": "<8 x half>",
  "variant": "reduce",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmaxv h0, v0.8h\nret",
  "giasm": "fmaxv h0, v0.8h\nret",
  "ll": "define half @test(<8 x half> %a) {\n  %r = call half @llvm.vector.reduce.fmaximum(<8 x half> %a)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call half @llvm.vector.reduce.fmaximum.v8f16(<8 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "reduce.fmaximum",
  "ty": "<8 x half>",
  "variant": "reducefast",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmaxv h0, v0.8h\nret",
  "giasm": "fmaxv h0, v0.8h\nret",
  "ll": "define half @test(<8 x half> %a) {\n  %r = call fast half @llvm.vector.reduce.fmaximum(<8 x half> %a)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call fast half @llvm.vector.reduce.fmaximum.v8f16(<8 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "reduce.fmaximum",
  "ty": "<16 x half>",
  "variant": "reduce",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmax v0.8h, v0.8h, v1.8h\nfmaxv h0, v0.8h\nret",
  "giasm": "fmax v0.8h, v0.8h, v1.8h\nfmaxv h0, v0.8h\nret",
  "ll": "define half @test(<16 x half> %a) {\n  %r = call half @llvm.vector.reduce.fmaximum(<16 x half> %a)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 3 for instruction:   %r = call half @llvm.vector.reduce.fmaximum.v16f16(<16 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "reduce.fmaximum",
  "ty": "<16 x half>",
  "variant": "reducefast",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmax v0.8h, v0.8h, v1.8h\nfmaxv h0, v0.8h\nret",
  "giasm": "fmax v0.8h, v0.8h, v1.8h\nfmaxv h0, v0.8h\nret",
  "ll": "define half @test(<16 x half> %a) {\n  %r = call fast half @llvm.vector.reduce.fmaximum(<16 x half> %a)\n  ret half %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 3 for instruction:   %r = call fast half @llvm.vector.reduce.fmaximum.v16f16(<16 x half> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret half %r"
 },
 {
  "instr": "reduce.fmaximum",
  "ty": "<2 x float>",
  "variant": "reduce",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmaxp s0, v0.2s\nret",
  "giasm": "fmaxp s0, v0.2s\nret",
  "ll": "define float @test(<2 x float> %a) {\n  %r = call float @llvm.vector.reduce.fmaximum(<2 x float> %a)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call float @llvm.vector.reduce.fmaximum.v2f32(<2 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "reduce.fmaximum",
  "ty": "<2 x float>",
  "variant": "reducefast",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmaxp s0, v0.2s\nret",
  "giasm": "fmaxp s0, v0.2s\nret",
  "ll": "define float @test(<2 x float> %a) {\n  %r = call fast float @llvm.vector.reduce.fmaximum(<2 x float> %a)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call fast float @llvm.vector.reduce.fmaximum.v2f32(<2 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "reduce.fmaximum",
  "ty": "<4 x float>",
  "variant": "reduce",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmaxv s0, v0.4s\nret",
  "giasm": "fmaxv s0, v0.4s\nret",
  "ll": "define float @test(<4 x float> %a) {\n  %r = call float @llvm.vector.reduce.fmaximum(<4 x float> %a)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call float @llvm.vector.reduce.fmaximum.v4f32(<4 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "reduce.fmaximum",
  "ty": "<4 x float>",
  "variant": "reducefast",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmaxv s0, v0.4s\nret",
  "giasm": "fmaxv s0, v0.4s\nret",
  "ll": "define float @test(<4 x float> %a) {\n  %r = call fast float @llvm.vector.reduce.fmaximum(<4 x float> %a)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call fast float @llvm.vector.reduce.fmaximum.v4f32(<4 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "reduce.fmaximum",
  "ty": "<8 x float>",
  "variant": "reduce",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmax v0.4s, v0.4s, v1.4s\nfmaxv s0, v0.4s\nret",
  "giasm": "fmax v0.4s, v0.4s, v1.4s\nfmaxv s0, v0.4s\nret",
  "ll": "define float @test(<8 x float> %a) {\n  %r = call float @llvm.vector.reduce.fmaximum(<8 x float> %a)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 3 for instruction:   %r = call float @llvm.vector.reduce.fmaximum.v8f32(<8 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "reduce.fmaximum",
  "ty": "<8 x float>",
  "variant": "reducefast",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmax v0.4s, v0.4s, v1.4s\nfmaxv s0, v0.4s\nret",
  "giasm": "fmax v0.4s, v0.4s, v1.4s\nfmaxv s0, v0.4s\nret",
  "ll": "define float @test(<8 x float> %a) {\n  %r = call fast float @llvm.vector.reduce.fmaximum(<8 x float> %a)\n  ret float %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 3 for instruction:   %r = call fast float @llvm.vector.reduce.fmaximum.v8f32(<8 x float> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret float %r"
 },
 {
  "instr": "reduce.fmaximum",
  "ty": "<2 x double>",
  "variant": "reduce",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmaxp d0, v0.2d\nret",
  "giasm": "fmaxp d0, v0.2d\nret",
  "ll": "define double @test(<2 x double> %a) {\n  %r = call double @llvm.vector.reduce.fmaximum(<2 x double> %a)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call double @llvm.vector.reduce.fmaximum.v2f64(<2 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "reduce.fmaximum",
  "ty": "<2 x double>",
  "variant": "reducefast",
  "codesize": 2,
  "thru": 2,
  "lat": 2,
  "sizelat": 2,
  "size": 1,
  "gisize": 1,
  "extrasize": 0,
  "asm": "fmaxp d0, v0.2d\nret",
  "giasm": "fmaxp d0, v0.2d\nret",
  "ll": "define double @test(<2 x double> %a) {\n  %r = call fast double @llvm.vector.reduce.fmaximum(<2 x double> %a)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 2 for instruction:   %r = call fast double @llvm.vector.reduce.fmaximum.v2f64(<2 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "reduce.fmaximum",
  "ty": "<4 x double>",
  "variant": "reduce",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmax v0.2d, v0.2d, v1.2d\nfmaxp d0, v0.2d\nret",
  "giasm": "fmax v0.2d, v0.2d, v1.2d\nfmaxp d0, v0.2d\nret",
  "ll": "define double @test(<4 x double> %a) {\n  %r = call double @llvm.vector.reduce.fmaximum(<4 x double> %a)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 3 for instruction:   %r = call double @llvm.vector.reduce.fmaximum.v4f64(<4 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 },
 {
  "instr": "reduce.fmaximum",
  "ty": "<4 x double>",
  "variant": "reducefast",
  "codesize": 3,
  "thru": 3,
  "lat": 3,
  "sizelat": 3,
  "size": 2,
  "gisize": 2,
  "extrasize": 0,
  "asm": "fmax v0.2d, v0.2d, v1.2d\nfmaxp d0, v0.2d\nret",
  "giasm": "fmax v0.2d, v0.2d, v1.2d\nfmaxp d0, v0.2d\nret",
  "ll": "define double @test(<4 x double> %a) {\n  %r = call fast double @llvm.vector.reduce.fmaximum(<4 x double> %a)\n  ret double %r\n}",
  "costoutput": "Printing analysis 'Cost Model Analysis' for function 'test':\nCost Model: Found an estimated cost of 3 for instruction:   %r = call fast double @llvm.vector.reduce.fmaximum.v4f64(<4 x double> %a)\nCost Model: Found an estimated cost of 1 for instruction:   ret double %r"
 }
]